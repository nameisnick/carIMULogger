
h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08011d00  08011d00  00021d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080122f8  080122f8  000222f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012300  08012300  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012304  08012304  00022304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08012308  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002774  24000078  0801237c  00030078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240027ec  0801237c  000327ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   000257bb  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000046c5  00000000  00000000  0005585d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c58  00000000  00000000  00059f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a90  00000000  00000000  0005bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d8e0  00000000  00000000  0005d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029f9e  00000000  00000000  0009aef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017362f  00000000  00000000  000c4e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002384bd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000080fc  00000000  00000000  00238510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011ce8 	.word	0x08011ce8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08011ce8 	.word	0x08011ce8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <createCQueue>:
 *      Author: IoT02
 */

#include "cQueue.h"

QueueType* createCQueue(){
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  QueueType* cQ;
  cQ = (QueueType*)malloc(sizeof(QueueType));
 800069a:	f44f 70f2 	mov.w	r0, #484	; 0x1e4
 800069e:	f010 f933 	bl	8010908 <malloc>
 80006a2:	4603      	mov	r3, r0
 80006a4:	607b      	str	r3, [r7, #4]
  cQ->front = 0;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  cQ->rear = 0;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
}
 80006b6:	bf00      	nop
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <isCQueueFull>:
  }else{
    return 0;
  }
}
int isCQueueFull(QueueType* cQ)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  if(((cQ->rear + 1)%CQUEUE_SIZE) == cQ -> front){
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80006ce:	1c59      	adds	r1, r3, #1
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <isCQueueFull+0x44>)
 80006d2:	fb83 2301 	smull	r2, r3, r3, r1
 80006d6:	10da      	asrs	r2, r3, #3
 80006d8:	17cb      	asrs	r3, r1, #31
 80006da:	1ad2      	subs	r2, r2, r3
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	1aca      	subs	r2, r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d101      	bne.n	80006f4 <isCQueueFull+0x34>
    return 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <isCQueueFull+0x36>
  }else{
    return 0;
 80006f4:	2300      	movs	r3, #0
  }
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	66666667 	.word	0x66666667

08000708 <enCQueue>:
void enCQueue(QueueType* cQ,element item )
{
 8000708:	b084      	sub	sp, #16
 800070a:	b4b0      	push	{r4, r5, r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	f107 001c 	add.w	r0, r7, #28
 8000716:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  cQ->rear = (cQ->rear + 1) % CQUEUE_SIZE;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <enCQueue+0x6c>)
 8000724:	fb83 1302 	smull	r1, r3, r3, r2
 8000728:	10d9      	asrs	r1, r3, #3
 800072a:	17d3      	asrs	r3, r2, #31
 800072c:	1ac9      	subs	r1, r1, r3
 800072e:	460b      	mov	r3, r1
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	440b      	add	r3, r1
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	1ad1      	subs	r1, r2, r3
 8000738:	b2ca      	uxtb	r2, r1
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  cQ->cQueue[cQ->rear] = item;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000746:	4619      	mov	r1, r3
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	440b      	add	r3, r1
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4413      	add	r3, r2
 8000754:	461d      	mov	r5, r3
 8000756:	f107 041c 	add.w	r4, r7, #28
 800075a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800075c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800075e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000762:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	bcb0      	pop	{r4, r5, r7}
 800076e:	b004      	add	sp, #16
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	66666667 	.word	0x66666667

08000778 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <MX_GPIO_Init+0x150>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000794:	4a4c      	ldr	r2, [pc, #304]	; (80008c8 <MX_GPIO_Init+0x150>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079e:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80007ac:	4b46      	ldr	r3, [pc, #280]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b2:	4a45      	ldr	r2, [pc, #276]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007bc:	4b42      	ldr	r3, [pc, #264]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d0:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007d2:	f043 0301 	orr.w	r3, r3, #1
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007da:	4b3b      	ldr	r3, [pc, #236]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e8:	4b37      	ldr	r3, [pc, #220]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ee:	4a36      	ldr	r2, [pc, #216]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f8:	4b33      	ldr	r3, [pc, #204]	; (80008c8 <MX_GPIO_Init+0x150>)
 80007fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000806:	4b30      	ldr	r3, [pc, #192]	; (80008c8 <MX_GPIO_Init+0x150>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a2e      	ldr	r2, [pc, #184]	; (80008c8 <MX_GPIO_Init+0x150>)
 800080e:	f043 0308 	orr.w	r3, r3, #8
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b2c      	ldr	r3, [pc, #176]	; (80008c8 <MX_GPIO_Init+0x150>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	4828      	ldr	r0, [pc, #160]	; (80008cc <MX_GPIO_Init+0x154>)
 800082c:	f002 fd86 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	4826      	ldr	r0, [pc, #152]	; (80008d0 <MX_GPIO_Init+0x158>)
 8000838:	f002 fd80 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800083c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000842:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	4619      	mov	r1, r3
 8000852:	4820      	ldr	r0, [pc, #128]	; (80008d4 <MX_GPIO_Init+0x15c>)
 8000854:	f002 fbc2 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000858:	f44f 7380 	mov.w	r3, #256	; 0x100
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4816      	ldr	r0, [pc, #88]	; (80008cc <MX_GPIO_Init+0x154>)
 8000872:	f002 fbb3 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 8000876:	2310      	movs	r3, #16
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800087a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800087e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	2301      	movs	r3, #1
 8000882:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	4619      	mov	r1, r3
 800088a:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MX_GPIO_Init+0x15c>)
 800088c:	f002 fba6 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089e:	2303      	movs	r3, #3
 80008a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	4619      	mov	r1, r3
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <MX_GPIO_Init+0x158>)
 80008aa:	f002 fb97 	bl	8002fdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2106      	movs	r1, #6
 80008b2:	200a      	movs	r0, #10
 80008b4:	f001 fdf9 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008b8:	200a      	movs	r0, #10
 80008ba:	f001 fe10 	bl	80024de <HAL_NVIC_EnableIRQ>

}
 80008be:	bf00      	nop
 80008c0:	3728      	adds	r7, #40	; 0x28
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	58024400 	.word	0x58024400
 80008cc:	58022000 	.word	0x58022000
 80008d0:	58020c00 	.word	0x58020c00
 80008d4:	58021c00 	.word	0x58021c00

080008d8 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80008dc:	bf00      	nop
 80008de:	f000 f915 	bl	8000b0c <icm20948_who_am_i>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f083 0301 	eor.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f7      	bne.n	80008de <icm20948_init+0x6>

	icm20948_device_reset();
 80008ee:	f000 f932 	bl	8000b56 <icm20948_device_reset>
	icm20948_wakeup();
 80008f2:	f000 f947 	bl	8000b84 <icm20948_wakeup>

	icm20948_clock_source(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f9bf 	bl	8000c7a <icm20948_clock_source>
	icm20948_odr_align_enable();
 80008fc:	f000 f9d6 	bl	8000cac <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8000900:	f000 f95a 	bl	8000bb8 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8000904:	2000      	movs	r0, #0
 8000906:	f000 f9da 	bl	8000cbe <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 800090a:	2000      	movs	r0, #0
 800090c:	f000 f9f4 	bl	8000cf8 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0x03);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 fa0e 	bl	8000d32 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0x03);
 8000916:	2003      	movs	r0, #3
 8000918:	f000 fa29 	bl	8000d6e <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 800091c:	f000 fa56 	bl	8000dcc <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000920:	f000 fad6 	bl	8000ed0 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000924:	2003      	movs	r0, #3
 8000926:	f000 fbc9 	bl	80010bc <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 800092a:	2003      	movs	r0, #3
 800092c:	f000 fc10 	bl	8001150 <icm20948_accel_full_scale_select>

	icm20948_data_ready_int_enable(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f000 fa0d 	bl	8000d50 <icm20948_data_ready_int_enable>


}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}

0800093a <ak09916_init>:

void ak09916_init()
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800093e:	f000 f952 	bl	8000be6 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000942:	f000 f967 	bl	8000c14 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000946:	2007      	movs	r0, #7
 8000948:	f000 f97e 	bl	8000c48 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 800094c:	bf00      	nop
 800094e:	f000 f8f0 	bl	8000b32 <ak09916_who_am_i>
 8000952:	4603      	mov	r3, r0
 8000954:	f083 0301 	eor.w	r3, r3, #1
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1f7      	bne.n	800094e <ak09916_init+0x14>

	ak09916_soft_reset();
 800095e:	f000 f906 	bl	8000b6e <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000962:	2008      	movs	r0, #8
 8000964:	f000 fa21 	bl	8000daa <ak09916_operation_mode_setting>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000974:	2206      	movs	r2, #6
 8000976:	2133      	movs	r1, #51	; 0x33
 8000978:	2000      	movs	r0, #0
 800097a:	f000 fcb1 	bl	80012e0 <read_multiple_icm20948_reg>
 800097e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	b21a      	sxth	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	b21b      	sxth	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b21a      	sxth	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3302      	adds	r3, #2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	3303      	adds	r3, #3
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b21b      	sxth	r3, r3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	b21a      	sxth	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3304      	adds	r3, #4
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3305      	adds	r3, #5
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	b21b      	sxth	r3, r3
 80009c4:	4313      	orrs	r3, r2
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	809a      	strh	r2, [r3, #4]
}
 80009cc:	bf00      	nop
 80009ce:	3710      	adds	r7, #16
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80009dc:	2206      	movs	r2, #6
 80009de:	212d      	movs	r1, #45	; 0x2d
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 fc7d 	bl	80012e0 <read_multiple_icm20948_reg>
 80009e6:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	021b      	lsls	r3, r3, #8
 80009ee:	b21a      	sxth	r2, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b21b      	sxth	r3, r3
 80009f8:	4313      	orrs	r3, r2
 80009fa:	b21a      	sxth	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	3302      	adds	r3, #2
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	b21a      	sxth	r2, r3
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3303      	adds	r3, #3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b21a      	sxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);// + accel_scale_factor;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	021b      	lsls	r3, r3, #8
 8000a22:	b21a      	sxth	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	3305      	adds	r3, #5
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	b21b      	sxth	r3, r3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	b21a      	sxth	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	809a      	strh	r2, [r3, #4]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <icm20948_accel_gyro_read>:

void icm20948_accel_gyro_read (IMU* data)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint8_t *temp = read_multiple_icm20948_reg (ub_0, B0_ACCEL_XOUT_H, 14);
 8000a44:	220e      	movs	r2, #14
 8000a46:	212d      	movs	r1, #45	; 0x2d
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fc49 	bl	80012e0 <read_multiple_icm20948_reg>
 8000a4e:	60f8      	str	r0, [r7, #12]

  data->accel_x = (int16_t) (temp[0] << 8 | temp[1]);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	021b      	lsls	r3, r3, #8
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b21a      	sxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	809a      	strh	r2, [r3, #4]
  data->accel_y = (int16_t) (temp[2] << 8 | temp[3]);
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	021b      	lsls	r3, r3, #8
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3303      	adds	r3, #3
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	80da      	strh	r2, [r3, #6]
  data->accel_z = (int16_t) (temp[4] << 8 | temp[5]);	// + accel_scale_factor;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	3304      	adds	r3, #4
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	021b      	lsls	r3, r3, #8
 8000a8a:	b21a      	sxth	r2, r3
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3305      	adds	r3, #5
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	b21b      	sxth	r3, r3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	b21a      	sxth	r2, r3
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	811a      	strh	r2, [r3, #8]
  data->temp    = (int16_t) (temp[6] << 8 | temp[7]);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	3306      	adds	r3, #6
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3307      	adds	r3, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	b21b      	sxth	r3, r3
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	b21a      	sxth	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	82da      	strh	r2, [r3, #22]
  data->gyro_x  = (int16_t) (temp[8] << 8 | temp[9]);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	3308      	adds	r3, #8
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3309      	adds	r3, #9
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	815a      	strh	r2, [r3, #10]
  data->gyro_y  = (int16_t) (temp[10] << 8 | temp[11]);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	330a      	adds	r3, #10
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	b21a      	sxth	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	330b      	adds	r3, #11
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	b21b      	sxth	r3, r3
 8000ae2:	4313      	orrs	r3, r2
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	819a      	strh	r2, [r3, #12]
  data->gyro_z  = (int16_t) (temp[12] << 8 | temp[13]);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	330c      	adds	r3, #12
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	330d      	adds	r3, #13
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	81da      	strh	r2, [r3, #14]
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f000 fb93 	bl	8001240 <read_single_icm20948_reg>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2bea      	cmp	r3, #234	; 0xea
 8000b22:	d101      	bne.n	8000b28 <icm20948_who_am_i+0x1c>
		return true;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e000      	b.n	8000b2a <icm20948_who_am_i+0x1e>
	else
		return false;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f000 fc2d 	bl	8001398 <read_single_ak09916_reg>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b09      	cmp	r3, #9
 8000b46:	d101      	bne.n	8000b4c <ak09916_who_am_i+0x1a>
		return true;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <ak09916_who_am_i+0x1c>
	else
		return false;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000b5a:	22c1      	movs	r2, #193	; 0xc1
 8000b5c:	2106      	movs	r1, #6
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 fb9a 	bl	8001298 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f001 fb95 	bl	8002294 <HAL_Delay>
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000b72:	2101      	movs	r1, #1
 8000b74:	2032      	movs	r0, #50	; 0x32
 8000b76:	f000 fc30 	bl	80013da <write_single_ak09916_reg>
	HAL_Delay(100);
 8000b7a:	2064      	movs	r0, #100	; 0x64
 8000b7c:	f001 fb8a 	bl	8002294 <HAL_Delay>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000b8a:	2106      	movs	r1, #6
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f000 fb57 	bl	8001240 <read_single_icm20948_reg>
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b9c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fb77 	bl	8001298 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f001 fb72 	bl	8002294 <HAL_Delay>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fb3d 	bl	8001240 <read_single_icm20948_reg>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f043 0310 	orr.w	r3, r3, #16
 8000bd0:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	2103      	movs	r1, #3
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 fb5d 	bl	8001298 <write_single_icm20948_reg>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000bec:	2103      	movs	r1, #3
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 fb26 	bl	8001240 <read_single_icm20948_reg>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	461a      	mov	r2, r3
 8000c04:	2103      	movs	r1, #3
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 fb46 	bl	8001298 <write_single_icm20948_reg>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000c1a:	2103      	movs	r1, #3
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f000 fb0f 	bl	8001240 <read_single_icm20948_reg>
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f043 0320 	orr.w	r3, r3, #32
 8000c2c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	461a      	mov	r2, r3
 8000c32:	2103      	movs	r1, #3
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 fb2f 	bl	8001298 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000c3a:	2064      	movs	r0, #100	; 0x64
 8000c3c:	f001 fb2a 	bl	8002294 <HAL_Delay>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2030      	movs	r0, #48	; 0x30
 8000c56:	f000 faf3 	bl	8001240 <read_single_icm20948_reg>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8000c5e:	7bfa      	ldrb	r2, [r7, #15]
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	2030      	movs	r0, #48	; 0x30
 8000c6e:	f000 fb13 	bl	8001298 <write_single_icm20948_reg>
}
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b084      	sub	sp, #16
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000c84:	2106      	movs	r1, #6
 8000c86:	2000      	movs	r0, #0
 8000c88:	f000 fada 	bl	8001240 <read_single_icm20948_reg>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000c98:	7bfb      	ldrb	r3, [r7, #15]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2106      	movs	r1, #6
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fafa 	bl	8001298 <write_single_icm20948_reg>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2109      	movs	r1, #9
 8000cb4:	2020      	movs	r0, #32
 8000cb6:	f000 faef 	bl	8001298 <write_single_icm20948_reg>
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b084      	sub	sp, #16
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2020      	movs	r0, #32
 8000ccc:	f000 fab8 	bl	8001240 <read_single_icm20948_reg>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	b25a      	sxtb	r2, r3
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	b25b      	sxtb	r3, r3
 8000ce2:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2020      	movs	r0, #32
 8000cec:	f000 fad4 	bl	8001298 <write_single_icm20948_reg>
}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000d02:	2114      	movs	r1, #20
 8000d04:	2020      	movs	r0, #32
 8000d06:	f000 fa9b 	bl	8001240 <read_single_icm20948_reg>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	b25a      	sxtb	r2, r3
 8000d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	461a      	mov	r2, r3
 8000d22:	2101      	movs	r1, #1
 8000d24:	2020      	movs	r0, #32
 8000d26:	f000 fab7 	bl	8001298 <write_single_icm20948_reg>
}
 8000d2a:	bf00      	nop
 8000d2c:	3710      	adds	r7, #16
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2100      	movs	r1, #0
 8000d42:	2020      	movs	r0, #32
 8000d44:	f000 faa8 	bl	8001298 <write_single_icm20948_reg>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <icm20948_data_ready_int_enable>:

void icm20948_data_ready_int_enable(uint8_t divider)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  write_single_icm20948_reg(ub_0,B0_INT_ENABLE_1 , divider);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	2111      	movs	r1, #17
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 fa99 	bl	8001298 <write_single_icm20948_reg>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b084      	sub	sp, #16
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000d78:	88fb      	ldrh	r3, [r7, #6]
 8000d7a:	0a1b      	lsrs	r3, r3, #8
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000d8a:	7bfb      	ldrb	r3, [r7, #15]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	2110      	movs	r1, #16
 8000d90:	2020      	movs	r0, #32
 8000d92:	f000 fa81 	bl	8001298 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000d96:	7bbb      	ldrb	r3, [r7, #14]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	2111      	movs	r1, #17
 8000d9c:	2020      	movs	r0, #32
 8000d9e:	f000 fa7b 	bl	8001298 <write_single_icm20948_reg>
}
 8000da2:	bf00      	nop
 8000da4:	3710      	adds	r7, #16
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	4619      	mov	r1, r3
 8000db8:	2031      	movs	r0, #49	; 0x31
 8000dba:	f000 fb0e 	bl	80013da <write_single_ak09916_reg>
	HAL_Delay(100);
 8000dbe:	2064      	movs	r0, #100	; 0x64
 8000dc0:	f001 fa68 	bl	8002294 <HAL_Delay>
}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	2300      	movs	r3, #0
 8000de4:	80bb      	strh	r3, [r7, #4]

	for(int i = 0; i < 100; i++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	e016      	b.n	8000e1a <icm20948_gyro_calibration+0x4e>
	{
		icm20948_gyro_read(&temp);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fdbb 	bl	800096c <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
		gyro_bias[1] += temp.y;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e06:	4413      	add	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
		gyro_bias[2] += temp.z;
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e10:	4413      	add	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 100; i++)
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3301      	adds	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	2b63      	cmp	r3, #99	; 0x63
 8000e1e:	dde5      	ble.n	8000dec <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <icm20948_gyro_calibration+0x100>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1152      	asrs	r2, r2, #5
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	60bb      	str	r3, [r7, #8]
	gyro_bias[1] /= 100;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4a26      	ldr	r2, [pc, #152]	; (8000ecc <icm20948_gyro_calibration+0x100>)
 8000e34:	fb82 1203 	smull	r1, r2, r2, r3
 8000e38:	1152      	asrs	r2, r2, #5
 8000e3a:	17db      	asrs	r3, r3, #31
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
	gyro_bias[2] /= 100;
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4a22      	ldr	r2, [pc, #136]	; (8000ecc <icm20948_gyro_calibration+0x100>)
 8000e44:	fb82 1203 	smull	r1, r2, r2, r3
 8000e48:	1152      	asrs	r2, r2, #5
 8000e4a:	17db      	asrs	r3, r3, #31
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	613b      	str	r3, [r7, #16]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	425b      	negs	r3, r3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	da00      	bge.n	8000e5a <icm20948_gyro_calibration+0x8e>
 8000e58:	3303      	adds	r3, #3
 8000e5a:	109b      	asrs	r3, r3, #2
 8000e5c:	121b      	asrs	r3, r3, #8
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	703b      	strb	r3, [r7, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	425b      	negs	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da00      	bge.n	8000e6c <icm20948_gyro_calibration+0xa0>
 8000e6a:	3303      	adds	r3, #3
 8000e6c:	109b      	asrs	r3, r3, #2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	707b      	strb	r3, [r7, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	425b      	negs	r3, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da00      	bge.n	8000e7c <icm20948_gyro_calibration+0xb0>
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	109b      	asrs	r3, r3, #2
 8000e7e:	121b      	asrs	r3, r3, #8
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	70bb      	strb	r3, [r7, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	425b      	negs	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	da00      	bge.n	8000e8e <icm20948_gyro_calibration+0xc2>
 8000e8c:	3303      	adds	r3, #3
 8000e8e:	109b      	asrs	r3, r3, #2
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	70fb      	strb	r3, [r7, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	425b      	negs	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	da00      	bge.n	8000e9e <icm20948_gyro_calibration+0xd2>
 8000e9c:	3303      	adds	r3, #3
 8000e9e:	109b      	asrs	r3, r3, #2
 8000ea0:	121b      	asrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	713b      	strb	r3, [r7, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	425b      	negs	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	da00      	bge.n	8000eb0 <icm20948_gyro_calibration+0xe4>
 8000eae:	3303      	adds	r3, #3
 8000eb0:	109b      	asrs	r3, r3, #2
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	717b      	strb	r3, [r7, #5]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8000eb6:	463a      	mov	r2, r7
 8000eb8:	2306      	movs	r3, #6
 8000eba:	2103      	movs	r1, #3
 8000ebc:	2020      	movs	r0, #32
 8000ebe:	f000 fa3f 	bl	8001340 <write_multiple_icm20948_reg>
}
 8000ec2:	bf00      	nop
 8000ec4:	3720      	adds	r7, #32
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	51eb851f 	.word	0x51eb851f

08000ed0 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b090      	sub	sp, #64	; 0x40
 8000ed4:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
 8000ede:	605a      	str	r2, [r3, #4]
 8000ee0:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000efa:	e016      	b.n	8000f2a <icm20948_accel_calibration+0x5a>
	{
		icm20948_accel_read(&temp);
 8000efc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fd67 	bl	80009d4 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000f0c:	4413      	add	r3, r2
 8000f0e:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000f16:	4413      	add	r3, r2
 8000f18:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000f20:	4413      	add	r3, r2
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8000f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f26:	3301      	adds	r3, #1
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f2c:	2b63      	cmp	r3, #99	; 0x63
 8000f2e:	dde5      	ble.n	8000efc <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	4a60      	ldr	r2, [pc, #384]	; (80010b4 <icm20948_accel_calibration+0x1e4>)
 8000f34:	fb82 1203 	smull	r1, r2, r2, r3
 8000f38:	1152      	asrs	r2, r2, #5
 8000f3a:	17db      	asrs	r3, r3, #31
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	4a5c      	ldr	r2, [pc, #368]	; (80010b4 <icm20948_accel_calibration+0x1e4>)
 8000f44:	fb82 1203 	smull	r1, r2, r2, r3
 8000f48:	1152      	asrs	r2, r2, #5
 8000f4a:	17db      	asrs	r3, r3, #31
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8000f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f52:	4a58      	ldr	r2, [pc, #352]	; (80010b4 <icm20948_accel_calibration+0x1e4>)
 8000f54:	fb82 1203 	smull	r1, r2, r2, r3
 8000f58:	1152      	asrs	r2, r2, #5
 8000f5a:	17db      	asrs	r3, r3, #31
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8000f60:	4a55      	ldr	r2, [pc, #340]	; (80010b8 <icm20948_accel_calibration+0x1e8>)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	6812      	ldr	r2, [r2, #0]
 8000f66:	4611      	mov	r1, r2
 8000f68:	8019      	strh	r1, [r3, #0]
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	0c12      	lsrs	r2, r2, #16
 8000f6e:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8000f70:	2202      	movs	r2, #2
 8000f72:	2114      	movs	r1, #20
 8000f74:	2010      	movs	r0, #16
 8000f76:	f000 f9b3 	bl	80012e0 <read_multiple_icm20948_reg>
 8000f7a:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8000f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	021b      	lsls	r3, r3, #8
 8000f82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f84:	3201      	adds	r2, #1
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8000f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f8e:	3301      	adds	r3, #1
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	2117      	movs	r1, #23
 8000f9e:	2010      	movs	r0, #16
 8000fa0:	f000 f99e 	bl	80012e0 <read_multiple_icm20948_reg>
 8000fa4:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8000fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	021b      	lsls	r3, r3, #8
 8000fac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000fae:	3201      	adds	r2, #1
 8000fb0:	7812      	ldrb	r2, [r2, #0]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb8:	3301      	adds	r3, #1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	211a      	movs	r1, #26
 8000fc8:	2010      	movs	r0, #16
 8000fca:	f000 f989 	bl	80012e0 <read_multiple_icm20948_reg>
 8000fce:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8000fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fd8:	3201      	adds	r2, #1
 8000fda:	7812      	ldrb	r2, [r2, #0]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	da00      	bge.n	8000ff8 <icm20948_accel_calibration+0x128>
 8000ff6:	3307      	adds	r3, #7
 8000ff8:	10db      	asrs	r3, r3, #3
 8000ffa:	425b      	negs	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	2b00      	cmp	r3, #0
 8001006:	da00      	bge.n	800100a <icm20948_accel_calibration+0x13a>
 8001008:	3307      	adds	r3, #7
 800100a:	10db      	asrs	r3, r3, #3
 800100c:	425b      	negs	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	2b00      	cmp	r3, #0
 8001018:	da00      	bge.n	800101c <icm20948_accel_calibration+0x14c>
 800101a:	3307      	adds	r3, #7
 800101c:	10db      	asrs	r3, r3, #3
 800101e:	425b      	negs	r3, r3
 8001020:	4413      	add	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	121b      	asrs	r3, r3, #8
 8001028:	b2db      	uxtb	r3, r3
 800102a:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	b2db      	uxtb	r3, r3
 8001036:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001038:	7a7a      	ldrb	r2, [r7, #9]
 800103a:	793b      	ldrb	r3, [r7, #4]
 800103c:	4313      	orrs	r3, r2
 800103e:	b2db      	uxtb	r3, r3
 8001040:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	121b      	asrs	r3, r3, #8
 8001046:	b2db      	uxtb	r3, r3
 8001048:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	f023 0301 	bic.w	r3, r3, #1
 8001052:	b2db      	uxtb	r3, r3
 8001054:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8001056:	7afa      	ldrb	r2, [r7, #11]
 8001058:	797b      	ldrb	r3, [r7, #5]
 800105a:	4313      	orrs	r3, r2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	121b      	asrs	r3, r3, #8
 8001064:	b2db      	uxtb	r3, r3
 8001066:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	f023 0301 	bic.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001074:	7b7a      	ldrb	r2, [r7, #13]
 8001076:	79bb      	ldrb	r3, [r7, #6]
 8001078:	4313      	orrs	r3, r2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800107e:	f107 0208 	add.w	r2, r7, #8
 8001082:	2302      	movs	r3, #2
 8001084:	2114      	movs	r1, #20
 8001086:	2010      	movs	r0, #16
 8001088:	f000 f95a 	bl	8001340 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	1c9a      	adds	r2, r3, #2
 8001092:	2302      	movs	r3, #2
 8001094:	2117      	movs	r1, #23
 8001096:	2010      	movs	r0, #16
 8001098:	f000 f952 	bl	8001340 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	1d1a      	adds	r2, r3, #4
 80010a2:	2302      	movs	r3, #2
 80010a4:	211a      	movs	r1, #26
 80010a6:	2010      	movs	r0, #16
 80010a8:	f000 f94a 	bl	8001340 <write_multiple_icm20948_reg>
}
 80010ac:	bf00      	nop
 80010ae:	3740      	adds	r7, #64	; 0x40
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	51eb851f 	.word	0x51eb851f
 80010b8:	08011d00 	.word	0x08011d00

080010bc <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 80010c6:	2101      	movs	r1, #1
 80010c8:	2020      	movs	r0, #32
 80010ca:	f000 f8b9 	bl	8001240 <read_single_icm20948_reg>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d827      	bhi.n	8001128 <icm20948_gyro_full_scale_select+0x6c>
 80010d8:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <icm20948_gyro_full_scale_select+0x24>)
 80010da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010de:	bf00      	nop
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	080010f9 	.word	0x080010f9
 80010e8:	08001109 	.word	0x08001109
 80010ec:	08001119 	.word	0x08001119
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <icm20948_gyro_full_scale_select+0x80>)
 80010f2:	4a13      	ldr	r2, [pc, #76]	; (8001140 <icm20948_gyro_full_scale_select+0x84>)
 80010f4:	601a      	str	r2, [r3, #0]
			break;
 80010f6:	e017      	b.n	8001128 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <icm20948_gyro_full_scale_select+0x80>)
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <icm20948_gyro_full_scale_select+0x88>)
 8001104:	601a      	str	r2, [r3, #0]
			break;
 8001106:	e00f      	b.n	8001128 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f043 0304 	orr.w	r3, r3, #4
 800110e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <icm20948_gyro_full_scale_select+0x80>)
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <icm20948_gyro_full_scale_select+0x8c>)
 8001114:	601a      	str	r2, [r3, #0]
			break;
 8001116:	e007      	b.n	8001128 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	f043 0306 	orr.w	r3, r3, #6
 800111e:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <icm20948_gyro_full_scale_select+0x80>)
 8001122:	4a0a      	ldr	r2, [pc, #40]	; (800114c <icm20948_gyro_full_scale_select+0x90>)
 8001124:	601a      	str	r2, [r3, #0]
			break;
 8001126:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	461a      	mov	r2, r3
 800112c:	2101      	movs	r1, #1
 800112e:	2020      	movs	r0, #32
 8001130:	f000 f8b2 	bl	8001298 <write_single_icm20948_reg>
}
 8001134:	bf00      	nop
 8001136:	3710      	adds	r7, #16
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	24000094 	.word	0x24000094
 8001140:	43030000 	.word	0x43030000
 8001144:	42830000 	.word	0x42830000
 8001148:	42033333 	.word	0x42033333
 800114c:	41833333 	.word	0x41833333

08001150 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800115a:	2114      	movs	r1, #20
 800115c:	2020      	movs	r0, #32
 800115e:	f000 f86f 	bl	8001240 <read_single_icm20948_reg>
 8001162:	4603      	mov	r3, r0
 8001164:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b03      	cmp	r3, #3
 800116a:	d82b      	bhi.n	80011c4 <icm20948_accel_full_scale_select+0x74>
 800116c:	a201      	add	r2, pc, #4	; (adr r2, 8001174 <icm20948_accel_full_scale_select+0x24>)
 800116e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001172:	bf00      	nop
 8001174:	08001185 	.word	0x08001185
 8001178:	0800118f 	.word	0x0800118f
 800117c:	080011a1 	.word	0x080011a1
 8001180:	080011b3 	.word	0x080011b3
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <icm20948_accel_full_scale_select+0x88>)
 8001186:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800118a:	601a      	str	r2, [r3, #0]
			break;
 800118c:	e01a      	b.n	80011c4 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <icm20948_accel_full_scale_select+0x88>)
 8001198:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800119c:	601a      	str	r2, [r3, #0]
			break;
 800119e:	e011      	b.n	80011c4 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	f043 0304 	orr.w	r3, r3, #4
 80011a6:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 80011a8:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <icm20948_accel_full_scale_select+0x88>)
 80011aa:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 80011ae:	601a      	str	r2, [r3, #0]
			break;
 80011b0:	e008      	b.n	80011c4 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f043 0306 	orr.w	r3, r3, #6
 80011b8:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <icm20948_accel_full_scale_select+0x88>)
 80011bc:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 80011c0:	601a      	str	r2, [r3, #0]
			break;
 80011c2:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	461a      	mov	r2, r3
 80011c8:	2114      	movs	r1, #20
 80011ca:	2020      	movs	r0, #32
 80011cc:	f000 f864 	bl	8001298 <write_single_icm20948_reg>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	24000098 	.word	0x24000098

080011dc <cs_high>:


/* Static Functions */
static void cs_high()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011e6:	4802      	ldr	r0, [pc, #8]	; (80011f0 <cs_high+0x14>)
 80011e8:	f002 f8a8 	bl	800333c <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	58020c00 	.word	0x58020c00

080011f4 <cs_low>:

static void cs_low()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011fe:	4802      	ldr	r0, [pc, #8]	; (8001208 <cs_low+0x14>)
 8001200:	f002 f89c 	bl	800333c <HAL_GPIO_WritePin>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	58020c00 	.word	0x58020c00

0800120c <select_user_bank>:

static void select_user_bank(userbank ub)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8001216:	237f      	movs	r3, #127	; 0x7f
 8001218:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	737b      	strb	r3, [r7, #13]

	cs_low();
 800121e:	f7ff ffe9 	bl	80011f4 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001222:	f107 010c 	add.w	r1, r7, #12
 8001226:	230a      	movs	r3, #10
 8001228:	2202      	movs	r2, #2
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <select_user_bank+0x30>)
 800122c:	f007 f980 	bl	8008530 <HAL_SPI_Transmit>
	cs_high();
 8001230:	f7ff ffd4 	bl	80011dc <cs_high>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	24000140 	.word	0x24000140

08001240 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001256:	b2db      	uxtb	r3, r3
 8001258:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ffd5 	bl	800120c <select_user_bank>

	cs_low();
 8001262:	f7ff ffc7 	bl	80011f4 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001266:	f107 010f 	add.w	r1, r7, #15
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	2201      	movs	r2, #1
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <read_single_icm20948_reg+0x54>)
 8001272:	f007 f95d 	bl	8008530 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001276:	f107 010e 	add.w	r1, r7, #14
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	2201      	movs	r2, #1
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <read_single_icm20948_reg+0x54>)
 8001282:	f007 fb47 	bl	8008914 <HAL_SPI_Receive>
	cs_high();
 8001286:	f7ff ffa9 	bl	80011dc <cs_high>

	return reg_val;
 800128a:	7bbb      	ldrb	r3, [r7, #14]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24000140 	.word	0x24000140

08001298 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	460b      	mov	r3, r1
 80012a4:	71bb      	strb	r3, [r7, #6]
 80012a6:	4613      	mov	r3, r2
 80012a8:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80012aa:	79bb      	ldrb	r3, [r7, #6]
 80012ac:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffa9 	bl	800120c <select_user_bank>

	cs_low();
 80012ba:	f7ff ff9b 	bl	80011f4 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80012be:	f107 010c 	add.w	r1, r7, #12
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	2202      	movs	r2, #2
 80012c8:	4804      	ldr	r0, [pc, #16]	; (80012dc <write_single_icm20948_reg+0x44>)
 80012ca:	f007 f931 	bl	8008530 <HAL_SPI_Transmit>
	cs_high();
 80012ce:	f7ff ff85 	bl	80011dc <cs_high>
}
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	24000140 	.word	0x24000140

080012e0 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
 80012ea:	460b      	mov	r3, r1
 80012ec:	71bb      	strb	r3, [r7, #6]
 80012ee:	4613      	mov	r3, r2
 80012f0:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ff84 	bl	800120c <select_user_bank>

	cs_low();
 8001304:	f7ff ff76 	bl	80011f4 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001308:	f107 010f 	add.w	r1, r7, #15
 800130c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001310:	2201      	movs	r2, #1
 8001312:	4809      	ldr	r0, [pc, #36]	; (8001338 <read_multiple_icm20948_reg+0x58>)
 8001314:	f007 f90c 	bl	8008530 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001318:	797b      	ldrb	r3, [r7, #5]
 800131a:	b29a      	uxth	r2, r3
 800131c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <read_multiple_icm20948_reg+0x5c>)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <read_multiple_icm20948_reg+0x58>)
 8001324:	f007 faf6 	bl	8008914 <HAL_SPI_Receive>
	cs_high();
 8001328:	f7ff ff58 	bl	80011dc <cs_high>

	return reg_val;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <read_multiple_icm20948_reg+0x5c>)
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	24000140 	.word	0x24000140
 800133c:	2400009c 	.word	0x2400009c

08001340 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	603a      	str	r2, [r7, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	71bb      	strb	r3, [r7, #6]
 8001352:	4613      	mov	r3, r2
 8001354:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff55 	bl	800120c <select_user_bank>

	cs_low();
 8001362:	f7ff ff47 	bl	80011f4 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001366:	f107 010f 	add.w	r1, r7, #15
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	2201      	movs	r2, #1
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <write_multiple_icm20948_reg+0x54>)
 8001372:	f007 f8dd 	bl	8008530 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001376:	797b      	ldrb	r3, [r7, #5]
 8001378:	b29a      	uxth	r2, r3
 800137a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137e:	6839      	ldr	r1, [r7, #0]
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <write_multiple_icm20948_reg+0x54>)
 8001382:	f007 f8d5 	bl	8008530 <HAL_SPI_Transmit>
	cs_high();
 8001386:	f7ff ff29 	bl	80011dc <cs_high>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	24000140 	.word	0x24000140

08001398 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80013a2:	228c      	movs	r2, #140	; 0x8c
 80013a4:	2103      	movs	r1, #3
 80013a6:	2030      	movs	r0, #48	; 0x30
 80013a8:	f7ff ff76 	bl	8001298 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	461a      	mov	r2, r3
 80013b0:	2104      	movs	r1, #4
 80013b2:	2030      	movs	r0, #48	; 0x30
 80013b4:	f7ff ff70 	bl	8001298 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80013b8:	2281      	movs	r2, #129	; 0x81
 80013ba:	2105      	movs	r1, #5
 80013bc:	2030      	movs	r0, #48	; 0x30
 80013be:	f7ff ff6b 	bl	8001298 <write_single_icm20948_reg>

	HAL_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 ff66 	bl	8002294 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 80013c8:	213b      	movs	r1, #59	; 0x3b
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff ff38 	bl	8001240 <read_single_icm20948_reg>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	460a      	mov	r2, r1
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4613      	mov	r3, r2
 80013e8:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80013ea:	220c      	movs	r2, #12
 80013ec:	2103      	movs	r1, #3
 80013ee:	2030      	movs	r0, #48	; 0x30
 80013f0:	f7ff ff52 	bl	8001298 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	461a      	mov	r2, r3
 80013f8:	2104      	movs	r1, #4
 80013fa:	2030      	movs	r0, #48	; 0x30
 80013fc:	f7ff ff4c 	bl	8001298 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001400:	79bb      	ldrb	r3, [r7, #6]
 8001402:	461a      	mov	r2, r3
 8001404:	2106      	movs	r1, #6
 8001406:	2030      	movs	r0, #48	; 0x30
 8001408:	f7ff ff46 	bl	8001298 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800140c:	2281      	movs	r2, #129	; 0x81
 800140e:	2105      	movs	r1, #5
 8001410:	2030      	movs	r0, #48	; 0x30
 8001412:	f7ff ff41 	bl	8001298 <write_single_icm20948_reg>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void
HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4)
 800142a:	88fb      	ldrh	r3, [r7, #6]
 800142c:	2b10      	cmp	r3, #16
 800142e:	d102      	bne.n	8001436 <HAL_GPIO_EXTI_Callback+0x16>
  {
    userKey1Flag = 1;
 8001430:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_GPIO_EXTI_Callback+0x68>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]

  }

  if (GPIO_Pin == GPIO_PIN_15)
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800143c:	d11f      	bne.n	800147e <HAL_GPIO_EXTI_Callback+0x5e>
  {
    dataReadyCount++;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	3301      	adds	r3, #1
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_GPIO_EXTI_Callback+0x6c>)
 8001446:	6013      	str	r3, [r2, #0]
    dataReadyFlag = 0;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_GPIO_EXTI_Callback+0x70>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
    icm20948_accel_gyro_read(&imuData);
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <HAL_GPIO_EXTI_Callback+0x74>)
 8001450:	f7ff faf4 	bl	8000a3c <icm20948_accel_gyro_read>
    if(!isCQueueFull(cQ)) enCQueue(cQ, imuData);
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <HAL_GPIO_EXTI_Callback+0x78>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f931 	bl	80006c0 <isCQueueFull>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10c      	bne.n	800147e <HAL_GPIO_EXTI_Callback+0x5e>
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_GPIO_EXTI_Callback+0x78>)
 8001466:	681d      	ldr	r5, [r3, #0]
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_GPIO_EXTI_Callback+0x74>)
 800146a:	466c      	mov	r4, sp
 800146c:	f103 020c 	add.w	r2, r3, #12
 8001470:	ca07      	ldmia	r2, {r0, r1, r2}
 8001472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001478:	4628      	mov	r0, r5
 800147a:	f7ff f945 	bl	8000708 <enCQueue>
  }
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bdb0      	pop	{r4, r5, r7, pc}
 8001486:	bf00      	nop
 8001488:	240000a2 	.word	0x240000a2
 800148c:	240000a4 	.word	0x240000a4
 8001490:	240000a3 	.word	0x240000a3
 8001494:	240000a8 	.word	0x240000a8
 8001498:	240000c0 	.word	0x240000c0

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0a0      	sub	sp, #128	; 0x80
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char uart_buffer[100];
  cQ = createCQueue();
 80014a2:	f7ff f8f7 	bl	8000694 <createCQueue>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a87      	ldr	r2, [pc, #540]	; (80016c8 <main+0x22c>)
 80014aa:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ac:	f000 fe60 	bl	8002170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b0:	f000 f932 	bl	8001718 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b4:	f7ff f960 	bl	8000778 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80014b8:	f000 f9ca 	bl	8001850 <MX_SDMMC1_SD_Init>
  MX_UART4_Init();
 80014bc:	f000 fd4e 	bl	8001f5c <MX_UART4_Init>
  MX_SPI2_Init();
 80014c0:	f000 fa88 	bl	80019d4 <MX_SPI2_Init>
  MX_FATFS_Init();
 80014c4:	f00a fd16 	bl	800bef4 <MX_FATFS_Init>
  MX_TIM7_Init();
 80014c8:	f000 fce8 	bl	8001e9c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  printf ("start main()\r\n");
 80014cc:	487f      	ldr	r0, [pc, #508]	; (80016cc <main+0x230>)
 80014ce:	f00f fb91 	bl	8010bf4 <puts>

  HAL_Delay (10);
 80014d2:	200a      	movs	r0, #10
 80014d4:	f000 fede 	bl	8002294 <HAL_Delay>
  icm20948_init();
 80014d8:	f7ff f9fe 	bl	80008d8 <icm20948_init>
  ak09916_init();
 80014dc:	f7ff fa2d 	bl	800093a <ak09916_init>
  HAL_Delay (10);
 80014e0:	200a      	movs	r0, #10
 80014e2:	f000 fed7 	bl	8002294 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char fileName[12];

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ec:	4878      	ldr	r0, [pc, #480]	; (80016d0 <main+0x234>)
 80014ee:	f001 ff25 	bl	800333c <HAL_GPIO_WritePin>
  int i = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t bw, br;

  // 1.
  //printf("%c%c%c%c\r\n", SDPath[0], SDPath[1], SDPath[2], SDPath[3]);
  if ((retSD = f_mount (&SDFatFS, SDPath, 0)) == FR_OK)
 80014f6:	2200      	movs	r2, #0
 80014f8:	4976      	ldr	r1, [pc, #472]	; (80016d4 <main+0x238>)
 80014fa:	4877      	ldr	r0, [pc, #476]	; (80016d8 <main+0x23c>)
 80014fc:	f00e fa80 	bl	800fa00 <f_mount>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b75      	ldr	r3, [pc, #468]	; (80016dc <main+0x240>)
 8001506:	701a      	strb	r2, [r3, #0]
 8001508:	4b74      	ldr	r3, [pc, #464]	; (80016dc <main+0x240>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <main+0x82>
  {
    //sprintf(str, "f_mount OK %d", retSD);
    printf ("1. f_mount OK %d \r\n", retSD);
 8001510:	4b72      	ldr	r3, [pc, #456]	; (80016dc <main+0x240>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4872      	ldr	r0, [pc, #456]	; (80016e0 <main+0x244>)
 8001518:	f00f fae6 	bl	8010ae8 <iprintf>
 800151c:	e005      	b.n	800152a <main+0x8e>
  }
  else
  {
    printf ("1. f_mount OK failed %d\r\n", retSD);
 800151e:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <main+0x240>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4619      	mov	r1, r3
 8001524:	486f      	ldr	r0, [pc, #444]	; (80016e4 <main+0x248>)
 8001526:	f00f fadf 	bl	8010ae8 <iprintf>
  }
  // 2.

  int fileIndex = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	67fb      	str	r3, [r7, #124]	; 0x7c

  do
  {

    fileIndex++;
 800152e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001530:	3301      	adds	r3, #1
 8001532:	67fb      	str	r3, [r7, #124]	; 0x7c
    sprintf (fileName, "data%04d.bin", fileIndex);
 8001534:	1d3b      	adds	r3, r7, #4
 8001536:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001538:	496b      	ldr	r1, [pc, #428]	; (80016e8 <main+0x24c>)
 800153a:	4618      	mov	r0, r3
 800153c:	f00f fb72 	bl	8010c24 <siprintf>

    retSD = f_open (&SDFile, fileName, FA_OPEN_EXISTING | FA_READ);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2201      	movs	r2, #1
 8001544:	4619      	mov	r1, r3
 8001546:	4869      	ldr	r0, [pc, #420]	; (80016ec <main+0x250>)
 8001548:	f00e faa0 	bl	800fa8c <f_open>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	4b62      	ldr	r3, [pc, #392]	; (80016dc <main+0x240>)
 8001552:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit (&huart4, fileName, 12, HAL_MAX_DELAY);
 8001554:	1d39      	adds	r1, r7, #4
 8001556:	f04f 33ff 	mov.w	r3, #4294967295
 800155a:	220c      	movs	r2, #12
 800155c:	4864      	ldr	r0, [pc, #400]	; (80016f0 <main+0x254>)
 800155e:	f008 f9c5 	bl	80098ec <HAL_UART_Transmit>
    printf ("  %d\r\n", retSD);
 8001562:	4b5e      	ldr	r3, [pc, #376]	; (80016dc <main+0x240>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	4619      	mov	r1, r3
 8001568:	4862      	ldr	r0, [pc, #392]	; (80016f4 <main+0x258>)
 800156a:	f00f fabd 	bl	8010ae8 <iprintf>
    HAL_Delay (100);
 800156e:	2064      	movs	r0, #100	; 0x64
 8001570:	f000 fe90 	bl	8002294 <HAL_Delay>
    if (retSD == FR_OK)
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <main+0x240>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <main+0xe6>
      f_close (&SDFile);
 800157c:	485b      	ldr	r0, [pc, #364]	; (80016ec <main+0x250>)
 800157e:	f00f f84d 	bl	801061c <f_close>
    if ( retSD == FR_NOT_READY)
 8001582:	4b56      	ldr	r3, [pc, #344]	; (80016dc <main+0x240>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b03      	cmp	r3, #3
 8001588:	d100      	bne.n	800158c <main+0xf0>
      while(1);
 800158a:	e7fe      	b.n	800158a <main+0xee>
  }while (retSD != FR_NO_FILE);
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <main+0x240>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b04      	cmp	r3, #4
 8001592:	d1cc      	bne.n	800152e <main+0x92>

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159a:	484d      	ldr	r0, [pc, #308]	; (80016d0 <main+0x234>)
 800159c:	f001 fece 	bl	800333c <HAL_GPIO_WritePin>

  uint8_t startFlag = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint8_t save_Count = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a


  while (1)
  {
    if (startFlag)
 80015ac:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d03e      	beq.n	8001632 <main+0x196>
//
//      imuData.ax = my_mag.x;
//      imuData.ax = my_mag.y;
//      imuData.ax = my_mag.z;

      HAL_UART_Transmit(&huart4, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe91 	bl	80002e0 <strlen>
 80015be:	4603      	mov	r3, r0
 80015c0:	b29a      	uxth	r2, r3
 80015c2:	f107 0110 	add.w	r1, r7, #16
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	4849      	ldr	r0, [pc, #292]	; (80016f0 <main+0x254>)
 80015cc:	f008 f98e 	bl	80098ec <HAL_UART_Transmit>
      printf("%d\r\n", strlen(uart_buffer));
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fe83 	bl	80002e0 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	4619      	mov	r1, r3
 80015de:	4846      	ldr	r0, [pc, #280]	; (80016f8 <main+0x25c>)
 80015e0:	f00f fa82 	bl	8010ae8 <iprintf>
      f_write (&SDFile,  (uint8_t*)&imuData, 22 , &bw);
 80015e4:	463b      	mov	r3, r7
 80015e6:	2216      	movs	r2, #22
 80015e8:	4944      	ldr	r1, [pc, #272]	; (80016fc <main+0x260>)
 80015ea:	4840      	ldr	r0, [pc, #256]	; (80016ec <main+0x250>)
 80015ec:	f00e fd21 	bl	8010032 <f_write>
      if(save_Count++ == 5){
 80015f0:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	f887 207a 	strb.w	r2, [r7, #122]	; 0x7a
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d105      	bne.n	800160a <main+0x16e>
        save_Count = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
        f_sync (&SDFile);
 8001604:	4839      	ldr	r0, [pc, #228]	; (80016ec <main+0x250>)
 8001606:	f00e feeb 	bl	80103e0 <f_sync>
      }
      if( dataReadyCount%500 == 0){
 800160a:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <main+0x264>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <main+0x268>)
 8001610:	fb83 1302 	smull	r1, r3, r3, r2
 8001614:	1159      	asrs	r1, r3, #5
 8001616:	17d3      	asrs	r3, r2, #31
 8001618:	1acb      	subs	r3, r1, r3
 800161a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800161e:	fb01 f303 	mul.w	r3, r1, r3
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d104      	bne.n	8001632 <main+0x196>
        HAL_GPIO_TogglePin (LED_B_GPIO_Port, LED_B_Pin);
 8001628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800162c:	4828      	ldr	r0, [pc, #160]	; (80016d0 <main+0x234>)
 800162e:	f001 fe9e 	bl	800336e <HAL_GPIO_TogglePin>
      }

    }

    if (userKey1Flag)
 8001632:	4b35      	ldr	r3, [pc, #212]	; (8001708 <main+0x26c>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0b7      	beq.n	80015ac <main+0x110>
    {
      if (startFlag == 1)
 800163c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001640:	2b01      	cmp	r3, #1
 8001642:	d103      	bne.n	800164c <main+0x1b0>
        f_close (&SDFile);
 8001644:	4829      	ldr	r0, [pc, #164]	; (80016ec <main+0x250>)
 8001646:	f00e ffe9 	bl	801061c <f_close>
 800164a:	e017      	b.n	800167c <main+0x1e0>
      else
      {
        retSD = f_open (&SDFile, fileName, FA_OPEN_APPEND | FA_WRITE);
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2232      	movs	r2, #50	; 0x32
 8001650:	4619      	mov	r1, r3
 8001652:	4826      	ldr	r0, [pc, #152]	; (80016ec <main+0x250>)
 8001654:	f00e fa1a 	bl	800fa8c <f_open>
 8001658:	4603      	mov	r3, r0
 800165a:	461a      	mov	r2, r3
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <main+0x240>)
 800165e:	701a      	strb	r2, [r3, #0]

        if (retSD == FR_OK)
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <main+0x240>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d103      	bne.n	8001670 <main+0x1d4>
        {
          printf ("OK\r\n");
 8001668:	4828      	ldr	r0, [pc, #160]	; (800170c <main+0x270>)
 800166a:	f00f fac3 	bl	8010bf4 <puts>
 800166e:	e005      	b.n	800167c <main+0x1e0>
        }
        else
        {
          printf ("2. Failed %d \r\n", retSD);
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <main+0x240>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	4826      	ldr	r0, [pc, #152]	; (8001710 <main+0x274>)
 8001678:	f00f fa36 	bl	8010ae8 <iprintf>
        }
      }

      printf ("asdf\r\n");
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <main+0x278>)
 800167e:	f00f fab9 	bl	8010bf4 <puts>
      if(startFlag){
 8001682:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <main+0x1fc>
        HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001690:	480f      	ldr	r0, [pc, #60]	; (80016d0 <main+0x234>)
 8001692:	f001 fe53 	bl	800333c <HAL_GPIO_WritePin>
 8001696:	e005      	b.n	80016a4 <main+0x208>
      }else{
        HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <main+0x234>)
 80016a0:	f001 fe4c 	bl	800333c <HAL_GPIO_WritePin>
      }
      startFlag = !startFlag;
 80016a4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      HAL_Delay (500);
 80016b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ba:	f000 fdeb 	bl	8002294 <HAL_Delay>

      userKey1Flag = 0;
 80016be:	4b12      	ldr	r3, [pc, #72]	; (8001708 <main+0x26c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    if (startFlag)
 80016c4:	e772      	b.n	80015ac <main+0x110>
 80016c6:	bf00      	nop
 80016c8:	240000c0 	.word	0x240000c0
 80016cc:	08011d04 	.word	0x08011d04
 80016d0:	58022000 	.word	0x58022000
 80016d4:	240002b0 	.word	0x240002b0
 80016d8:	240002b4 	.word	0x240002b4
 80016dc:	240002ac 	.word	0x240002ac
 80016e0:	08011d14 	.word	0x08011d14
 80016e4:	08011d28 	.word	0x08011d28
 80016e8:	08011d44 	.word	0x08011d44
 80016ec:	240012f0 	.word	0x240012f0
 80016f0:	24000218 	.word	0x24000218
 80016f4:	08011d54 	.word	0x08011d54
 80016f8:	08011d5c 	.word	0x08011d5c
 80016fc:	240000a8 	.word	0x240000a8
 8001700:	240000a4 	.word	0x240000a4
 8001704:	10624dd3 	.word	0x10624dd3
 8001708:	240000a2 	.word	0x240000a2
 800170c:	08011d64 	.word	0x08011d64
 8001710:	08011d68 	.word	0x08011d68
 8001714:	08011d78 	.word	0x08011d78

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b09c      	sub	sp, #112	; 0x70
 800171c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	224c      	movs	r2, #76	; 0x4c
 8001724:	2100      	movs	r1, #0
 8001726:	4618      	mov	r0, r3
 8001728:	f00f f8f6 	bl	8010918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2220      	movs	r2, #32
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f00f f8f0 	bl	8010918 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001738:	2002      	movs	r0, #2
 800173a:	f001 fe4d 	bl	80033d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <SystemClock_Config+0xfc>)
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	4a33      	ldr	r2, [pc, #204]	; (8001814 <SystemClock_Config+0xfc>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <SystemClock_Config+0xfc>)
 8001750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <SystemClock_Config+0x100>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	4a2e      	ldr	r2, [pc, #184]	; (8001818 <SystemClock_Config+0x100>)
 800175e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001762:	6193      	str	r3, [r2, #24]
 8001764:	4b2c      	ldr	r3, [pc, #176]	; (8001818 <SystemClock_Config+0x100>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001770:	bf00      	nop
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <SystemClock_Config+0x100>)
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800177e:	d1f8      	bne.n	8001772 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001780:	4b26      	ldr	r3, [pc, #152]	; (800181c <SystemClock_Config+0x104>)
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	f023 0303 	bic.w	r3, r3, #3
 8001788:	4a24      	ldr	r2, [pc, #144]	; (800181c <SystemClock_Config+0x104>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	2302      	movs	r3, #2
 80017a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80017a2:	2305      	movs	r3, #5
 80017a4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80017a6:	23a0      	movs	r3, #160	; 0xa0
 80017a8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017aa:	2302      	movs	r3, #2
 80017ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017ae:	2302      	movs	r3, #2
 80017b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017b2:	2302      	movs	r3, #2
 80017b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80017b6:	2308      	movs	r3, #8
 80017b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fe40 	bl	800344c <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80017d2:	f000 f837 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	233f      	movs	r3, #63	; 0x3f
 80017d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2303      	movs	r3, #3
 80017dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017e2:	2308      	movs	r3, #8
 80017e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017ea:	2340      	movs	r3, #64	; 0x40
 80017ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017f4:	2340      	movs	r3, #64	; 0x40
 80017f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	2102      	movs	r1, #2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fa53 	bl	8003ca8 <HAL_RCC_ClockConfig>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001808:	f000 f81c 	bl	8001844 <Error_Handler>
  }
}
 800180c:	bf00      	nop
 800180e:	3770      	adds	r7, #112	; 0x70
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	58000400 	.word	0x58000400
 8001818:	58024800 	.word	0x58024800
 800181c:	58024400 	.word	0x58024400

08001820 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit (&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001828:	1d39      	adds	r1, r7, #4
 800182a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182e:	2201      	movs	r2, #1
 8001830:	4803      	ldr	r0, [pc, #12]	; (8001840 <__io_putchar+0x20>)
 8001832:	f008 f85b 	bl	80098ec <HAL_UART_Transmit>

  return ch;
 8001836:	687b      	ldr	r3, [r7, #4]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	24000218 	.word	0x24000218

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_SDMMC1_SD_Init+0x34>)
 8001856:	4a0c      	ldr	r2, [pc, #48]	; (8001888 <MX_SDMMC1_SD_Init+0x38>)
 8001858:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <MX_SDMMC1_SD_Init+0x34>)
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <MX_SDMMC1_SD_Init+0x34>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <MX_SDMMC1_SD_Init+0x34>)
 8001868:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <MX_SDMMC1_SD_Init+0x34>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <MX_SDMMC1_SD_Init+0x34>)
 8001876:	2204      	movs	r2, #4
 8001878:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	240000c4 	.word	0x240000c4
 8001888:	52007000 	.word	0x52007000

0800188c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0ba      	sub	sp, #232	; 0xe8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	22bc      	movs	r2, #188	; 0xbc
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00f f833 	bl	8010918 <memset>
  if(sdHandle->Instance==SDMMC1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <HAL_SD_MspInit+0x138>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d17f      	bne.n	80019bc <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80018bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80018c2:	2305      	movs	r3, #5
 80018c4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80018c6:	23c0      	movs	r3, #192	; 0xc0
 80018c8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018ca:	2302      	movs	r3, #2
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 10;
 80018d2:	230a      	movs	r3, #10
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018da:	2300      	movs	r3, #0
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80018e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fd67 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80018f8:	f7ff ffa4 	bl	8001844 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 80018fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001902:	4a31      	ldr	r2, [pc, #196]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800190c:	4b2e      	ldr	r3, [pc, #184]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 800190e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	4a29      	ldr	r2, [pc, #164]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 800192c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	4a22      	ldr	r2, [pc, #136]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <HAL_SD_MspInit+0x13c>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001956:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800195a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001964:	2301      	movs	r3, #1
 8001966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001970:	230c      	movs	r3, #12
 8001972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001976:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800197a:	4619      	mov	r1, r3
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <HAL_SD_MspInit+0x140>)
 800197e:	f001 fb2d 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001982:	2304      	movs	r3, #4
 8001984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800198e:	2301      	movs	r3, #1
 8001990:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800199a:	230c      	movs	r3, #12
 800199c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019a4:	4619      	mov	r1, r3
 80019a6:	480a      	ldr	r0, [pc, #40]	; (80019d0 <HAL_SD_MspInit+0x144>)
 80019a8:	f001 fb18 	bl	8002fdc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2031      	movs	r0, #49	; 0x31
 80019b2:	f000 fd7a 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80019b6:	2031      	movs	r0, #49	; 0x31
 80019b8:	f000 fd91 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80019bc:	bf00      	nop
 80019be:	37e8      	adds	r7, #232	; 0xe8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	52007000 	.word	0x52007000
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58020800 	.word	0x58020800
 80019d0:	58020c00 	.word	0x58020c00

080019d4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_SPI2_Init+0xa8>)
 80019da:	4a29      	ldr	r2, [pc, #164]	; (8001a80 <MX_SPI2_Init+0xac>)
 80019dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019de:	4b27      	ldr	r3, [pc, #156]	; (8001a7c <MX_SPI2_Init+0xa8>)
 80019e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <MX_SPI2_Init+0xa8>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ec:	4b23      	ldr	r3, [pc, #140]	; (8001a7c <MX_SPI2_Init+0xa8>)
 80019ee:	2207      	movs	r2, #7
 80019f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019f2:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <MX_SPI2_Init+0xa8>)
 80019f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019fa:	4b20      	ldr	r3, [pc, #128]	; (8001a7c <MX_SPI2_Init+0xa8>)
 80019fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a04:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a10:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a2c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a30:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a5c:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_SPI2_Init+0xa8>)
 8001a6a:	f006 fc5b 	bl	8008324 <HAL_SPI_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001a74:	f7ff fee6 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	24000140 	.word	0x24000140
 8001a80:	40003800 	.word	0x40003800

08001a84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b0b8      	sub	sp, #224	; 0xe0
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0310 	add.w	r3, r7, #16
 8001aa0:	22bc      	movs	r2, #188	; 0xbc
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f00e ff37 	bl	8010918 <memset>
  if(spiHandle->Instance==SPI2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <HAL_SPI_MspInit+0xe0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d153      	bne.n	8001b5c <HAL_SPI_MspInit+0xd8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8001aba:	2305      	movs	r3, #5
 8001abc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001abe:	23c0      	movs	r3, #192	; 0xc0
 8001ac0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 20;
 8001ac2:	2314      	movs	r3, #20
 8001ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001aca:	2302      	movs	r3, #2
 8001acc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ad2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fc6a 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 8001af2:	f7ff fea7 	bl	8001844 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_SPI_MspInit+0xe4>)
 8001af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_SPI_MspInit+0xe4>)
 8001afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b02:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_SPI_MspInit+0xe4>)
 8001b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_SPI_MspInit+0xe4>)
 8001b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_SPI_MspInit+0xe4>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b24:	4b10      	ldr	r3, [pc, #64]	; (8001b68 <HAL_SPI_MspInit+0xe4>)
 8001b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b32:	230e      	movs	r3, #14
 8001b34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b54:	4619      	mov	r1, r3
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <HAL_SPI_MspInit+0xe8>)
 8001b58:	f001 fa40 	bl	8002fdc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	37e0      	adds	r7, #224	; 0xe0
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40003800 	.word	0x40003800
 8001b68:	58024400 	.word	0x58024400
 8001b6c:	58022000 	.word	0x58022000

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_MspInit+0x30>)
 8001b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b7c:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_MspInit+0x30>)
 8001b7e:	f043 0302 	orr.w	r3, r3, #2
 8001b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_MspInit+0x30>)
 8001b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	58024400 	.word	0x58024400

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <NMI_Handler+0x4>

08001baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <HardFault_Handler+0x4>

08001bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <MemManage_Handler+0x4>

08001bb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <BusFault_Handler+0x4>

08001bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <UsageFault_Handler+0x4>

08001bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf0:	f000 fb30 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_KEY_Pin);
 8001bfc:	2010      	movs	r0, #16
 8001bfe:	f001 fbd0 	bl	80033a2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <SDMMC1_IRQHandler+0x10>)
 8001c0e:	f005 f995 	bl	8006f3c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	240000c4 	.word	0x240000c4

08001c1c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <UART4_IRQHandler+0x10>)
 8001c22:	f007 fef9 	bl	8009a18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24000218 	.word	0x24000218

08001c30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM7_IRQHandler+0x10>)
 8001c36:	f007 fb71 	bl	800931c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	240001cc 	.word	0x240001cc

08001c44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	e00a      	b.n	8001c6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c56:	f3af 8000 	nop.w
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	60ba      	str	r2, [r7, #8]
 8001c62:	b2ca      	uxtb	r2, r1
 8001c64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	dbf0      	blt.n	8001c56 <_read+0x12>
	}

return len;
 8001c74:	687b      	ldr	r3, [r7, #4]
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	60f8      	str	r0, [r7, #12]
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	e009      	b.n	8001ca4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	60ba      	str	r2, [r7, #8]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fdc1 	bl	8001820 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	dbf1      	blt.n	8001c90 <_write+0x12>
	}
	return len;
 8001cac:	687b      	ldr	r3, [r7, #4]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <_close>:

int _close(int file)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cde:	605a      	str	r2, [r3, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_isatty>:

int _isatty(int file)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <_sbrk+0x5c>)
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <_sbrk+0x60>)
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d102      	bne.n	8001d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d3c:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <_sbrk+0x64>)
 8001d3e:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <_sbrk+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d207      	bcs.n	8001d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d50:	f00e fdb0 	bl	80108b4 <__errno>
 8001d54:	4603      	mov	r3, r0
 8001d56:	220c      	movs	r2, #12
 8001d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5e:	e009      	b.n	8001d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <_sbrk+0x64>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <_sbrk+0x64>)
 8001d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d72:	68fb      	ldr	r3, [r7, #12]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	24080000 	.word	0x24080000
 8001d80:	00000400 	.word	0x00000400
 8001d84:	240001c8 	.word	0x240001c8
 8001d88:	240027f0 	.word	0x240027f0

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <SystemInit+0xe4>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <SystemInit+0xe4>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001da0:	4b34      	ldr	r3, [pc, #208]	; (8001e74 <SystemInit+0xe8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	d807      	bhi.n	8001dbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <SystemInit+0xe8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 030f 	bic.w	r3, r3, #15
 8001db4:	4a2f      	ldr	r2, [pc, #188]	; (8001e74 <SystemInit+0xe8>)
 8001db6:	f043 0307 	orr.w	r3, r3, #7
 8001dba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <SystemInit+0xec>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <SystemInit+0xec>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <SystemInit+0xec>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <SystemInit+0xec>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4929      	ldr	r1, [pc, #164]	; (8001e78 <SystemInit+0xec>)
 8001dd4:	4b29      	ldr	r3, [pc, #164]	; (8001e7c <SystemInit+0xf0>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dda:	4b26      	ldr	r3, [pc, #152]	; (8001e74 <SystemInit+0xe8>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001de6:	4b23      	ldr	r3, [pc, #140]	; (8001e74 <SystemInit+0xe8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 030f 	bic.w	r3, r3, #15
 8001dee:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <SystemInit+0xe8>)
 8001df0:	f043 0307 	orr.w	r3, r3, #7
 8001df4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <SystemInit+0xec>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dfc:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <SystemInit+0xec>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <SystemInit+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <SystemInit+0xec>)
 8001e0a:	4a1d      	ldr	r2, [pc, #116]	; (8001e80 <SystemInit+0xf4>)
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e0e:	4b1a      	ldr	r3, [pc, #104]	; (8001e78 <SystemInit+0xec>)
 8001e10:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <SystemInit+0xf8>)
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e14:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <SystemInit+0xec>)
 8001e16:	4a1c      	ldr	r2, [pc, #112]	; (8001e88 <SystemInit+0xfc>)
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e1a:	4b17      	ldr	r3, [pc, #92]	; (8001e78 <SystemInit+0xec>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <SystemInit+0xec>)
 8001e22:	4a19      	ldr	r2, [pc, #100]	; (8001e88 <SystemInit+0xfc>)
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <SystemInit+0xec>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <SystemInit+0xec>)
 8001e2e:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <SystemInit+0xfc>)
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <SystemInit+0xec>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <SystemInit+0xec>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <SystemInit+0xec>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <SystemInit+0xec>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <SystemInit+0x100>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <SystemInit+0x104>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e56:	d202      	bcs.n	8001e5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <SystemInit+0x108>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <SystemInit+0x10c>)
 8001e60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000ed00 	.word	0xe000ed00
 8001e74:	52002000 	.word	0x52002000
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e80:	02020200 	.word	0x02020200
 8001e84:	01ff0000 	.word	0x01ff0000
 8001e88:	01010280 	.word	0x01010280
 8001e8c:	5c001000 	.word	0x5c001000
 8001e90:	ffff0000 	.word	0xffff0000
 8001e94:	51008108 	.word	0x51008108
 8001e98:	52004000 	.word	0x52004000

08001e9c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001eac:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <MX_TIM7_Init+0x6c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eb8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001ec2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ec6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ece:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001ed0:	f007 f9cd 	bl	800926e <HAL_TIM_Base_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001eda:	f7ff fcb3 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4806      	ldr	r0, [pc, #24]	; (8001f04 <MX_TIM7_Init+0x68>)
 8001eec:	f007 fc02 	bl	80096f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001ef6:	f7ff fca5 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	240001cc 	.word	0x240001cc
 8001f08:	40001400 	.word	0x40001400

08001f0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	; (8001f54 <HAL_TIM_Base_MspInit+0x48>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d116      	bne.n	8001f4c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f24:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f26:	f043 0320 	orr.w	r3, r3, #32
 8001f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <HAL_TIM_Base_MspInit+0x4c>)
 8001f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2104      	movs	r1, #4
 8001f40:	2037      	movs	r0, #55	; 0x37
 8001f42:	f000 fab2 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f46:	2037      	movs	r0, #55	; 0x37
 8001f48:	f000 fac9 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40001400 	.word	0x40001400
 8001f58:	58024400 	.word	0x58024400

08001f5c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <MX_UART4_Init+0x90>)
 8001f62:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <MX_UART4_Init+0x94>)
 8001f64:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <MX_UART4_Init+0x90>)
 8001f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f6c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <MX_UART4_Init+0x90>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <MX_UART4_Init+0x90>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <MX_UART4_Init+0x90>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f80:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <MX_UART4_Init+0x90>)
 8001f82:	220c      	movs	r2, #12
 8001f84:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f86:	4b19      	ldr	r3, [pc, #100]	; (8001fec <MX_UART4_Init+0x90>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <MX_UART4_Init+0x90>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <MX_UART4_Init+0x90>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <MX_UART4_Init+0x90>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <MX_UART4_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001fa4:	4811      	ldr	r0, [pc, #68]	; (8001fec <MX_UART4_Init+0x90>)
 8001fa6:	f007 fc51 	bl	800984c <HAL_UART_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001fb0:	f7ff fc48 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <MX_UART4_Init+0x90>)
 8001fb8:	f009 f908 	bl	800b1cc <HAL_UARTEx_SetTxFifoThreshold>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001fc2:	f7ff fc3f 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4808      	ldr	r0, [pc, #32]	; (8001fec <MX_UART4_Init+0x90>)
 8001fca:	f009 f93d 	bl	800b248 <HAL_UARTEx_SetRxFifoThreshold>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001fd4:	f7ff fc36 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001fd8:	4804      	ldr	r0, [pc, #16]	; (8001fec <MX_UART4_Init+0x90>)
 8001fda:	f009 f8be 	bl	800b15a <HAL_UARTEx_DisableFifoMode>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001fe4:	f7ff fc2e 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	24000218 	.word	0x24000218
 8001ff0:	40004c00 	.word	0x40004c00

08001ff4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b0ba      	sub	sp, #232	; 0xe8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200c:	f107 0318 	add.w	r3, r7, #24
 8002010:	22bc      	movs	r2, #188	; 0xbc
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00e fc7f 	bl	8010918 <memset>
  if(uartHandle->Instance==UART4)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a3b      	ldr	r2, [pc, #236]	; (800210c <HAL_UART_MspInit+0x118>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d16e      	bne.n	8002102 <HAL_UART_MspInit+0x10e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002024:	2302      	movs	r3, #2
 8002026:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202e:	f107 0318 	add.w	r3, r7, #24
 8002032:	4618      	mov	r0, r3
 8002034:	f002 f9c4 	bl	80043c0 <HAL_RCCEx_PeriphCLKConfig>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800203e:	f7ff fc01 	bl	8001844 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002042:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002048:	4a31      	ldr	r2, [pc, #196]	; (8002110 <HAL_UART_MspInit+0x11c>)
 800204a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800204e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002052:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002058:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800205c:	617b      	str	r3, [r7, #20]
 800205e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002060:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002066:	4a2a      	ldr	r2, [pc, #168]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002070:	4b27      	ldr	r3, [pc, #156]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	4b24      	ldr	r3, [pc, #144]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002084:	4a22      	ldr	r2, [pc, #136]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_UART_MspInit+0x11c>)
 8002090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60fb      	str	r3, [r7, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0_C     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800209c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020b6:	2308      	movs	r3, #8
 80020b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020bc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4814      	ldr	r0, [pc, #80]	; (8002114 <HAL_UART_MspInit+0x120>)
 80020c4:	f000 ff8a 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020e0:	2308      	movs	r3, #8
 80020e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020ea:	4619      	mov	r1, r3
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <HAL_UART_MspInit+0x124>)
 80020ee:	f000 ff75 	bl	8002fdc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2105      	movs	r1, #5
 80020f6:	2034      	movs	r0, #52	; 0x34
 80020f8:	f000 f9d7 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020fc:	2034      	movs	r0, #52	; 0x34
 80020fe:	f000 f9ee 	bl	80024de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002102:	bf00      	nop
 8002104:	37e8      	adds	r7, #232	; 0xe8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40004c00 	.word	0x40004c00
 8002110:	58024400 	.word	0x58024400
 8002114:	58022000 	.word	0x58022000
 8002118:	58020000 	.word	0x58020000

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002120:	f7ff fe34 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002126:	490d      	ldr	r1, [pc, #52]	; (800215c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002128:	4a0d      	ldr	r2, [pc, #52]	; (8002160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800212a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800212c:	e002      	b.n	8002134 <LoopCopyDataInit>

0800212e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800212e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002132:	3304      	adds	r3, #4

08002134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002138:	d3f9      	bcc.n	800212e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213a:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800213c:	4c0a      	ldr	r4, [pc, #40]	; (8002168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002140:	e001      	b.n	8002146 <LoopFillZerobss>

08002142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002144:	3204      	adds	r2, #4

08002146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002148:	d3fb      	bcc.n	8002142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214a:	f00e fbb9 	bl	80108c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7ff f9a5 	bl	800149c <main>
  bx  lr
 8002152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002154:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002158:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800215c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002160:	08012308 	.word	0x08012308
  ldr r2, =_sbss
 8002164:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002168:	240027ec 	.word	0x240027ec

0800216c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC3_IRQHandler>
	...

08002170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002176:	2003      	movs	r0, #3
 8002178:	f000 f98c 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800217c:	f001 ff4a 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_Init+0x68>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 030f 	and.w	r3, r3, #15
 800218c:	4913      	ldr	r1, [pc, #76]	; (80021dc <HAL_Init+0x6c>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	f003 031f 	and.w	r3, r3, #31
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_Init+0x68>)
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_Init+0x6c>)
 80021a4:	5cd3      	ldrb	r3, [r2, r3]
 80021a6:	f003 031f 	and.w	r3, r3, #31
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <HAL_Init+0x70>)
 80021b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021b4:	4a0b      	ldr	r2, [pc, #44]	; (80021e4 <HAL_Init+0x74>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021ba:	200f      	movs	r0, #15
 80021bc:	f000 f814 	bl	80021e8 <HAL_InitTick>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e002      	b.n	80021d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021ca:	f7ff fcd1 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	58024400 	.word	0x58024400
 80021dc:	08011dd4 	.word	0x08011dd4
 80021e0:	24000004 	.word	0x24000004
 80021e4:	24000000 	.word	0x24000000

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021f0:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_InitTick+0x60>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e021      	b.n	8002240 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <HAL_InitTick+0x64>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_InitTick+0x60>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f971 	bl	80024fa <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00e      	b.n	8002240 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d80a      	bhi.n	800223e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f000 f93b 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_InitTick+0x68>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	2400000c 	.word	0x2400000c
 800224c:	24000000 	.word	0x24000000
 8002250:	24000008 	.word	0x24000008

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	2400000c 	.word	0x2400000c
 8002278:	240002a8 	.word	0x240002a8

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	240002a8 	.word	0x240002a8

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_Delay+0x44>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffde 	bl	800227c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	2400000c 	.word	0x2400000c

080022dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <HAL_GetREVID+0x14>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0c1b      	lsrs	r3, r3, #16
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	5c001000 	.word	0x5c001000

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800231c:	4b06      	ldr	r3, [pc, #24]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 800231e:	4313      	orrs	r3, r2
 8002320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002322:	4a04      	ldr	r2, [pc, #16]	; (8002334 <__NVIC_SetPriorityGrouping+0x40>)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	60d3      	str	r3, [r2, #12]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00
 8002338:	05fa0000 	.word	0x05fa0000

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	88fb      	ldrh	r3, [r7, #6]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024b8:	f7ff ff40 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	6978      	ldr	r0, [r7, #20]
 80024c4:	f7ff ff90 	bl	80023e8 <NVIC_EncodePriority>
 80024c8:	4602      	mov	r2, r0
 80024ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff5f 	bl	8002394 <__NVIC_SetPriority>
}
 80024d6:	bf00      	nop
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff33 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f2:	bf00      	nop
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7ff ffa4 	bl	8002450 <SysTick_Config>
 8002508:	4603      	mov	r3, r0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800251c:	f7ff feae 	bl	800227c <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e2dc      	b.n	8002ae6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d008      	beq.n	800254a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e2cd      	b.n	8002ae6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a76      	ldr	r2, [pc, #472]	; (8002728 <HAL_DMA_Abort+0x214>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d04a      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a74      	ldr	r2, [pc, #464]	; (800272c <HAL_DMA_Abort+0x218>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d045      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a73      	ldr	r2, [pc, #460]	; (8002730 <HAL_DMA_Abort+0x21c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d040      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a71      	ldr	r2, [pc, #452]	; (8002734 <HAL_DMA_Abort+0x220>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d03b      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a70      	ldr	r2, [pc, #448]	; (8002738 <HAL_DMA_Abort+0x224>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d036      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a6e      	ldr	r2, [pc, #440]	; (800273c <HAL_DMA_Abort+0x228>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d031      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a6d      	ldr	r2, [pc, #436]	; (8002740 <HAL_DMA_Abort+0x22c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d02c      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6b      	ldr	r2, [pc, #428]	; (8002744 <HAL_DMA_Abort+0x230>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d027      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a6a      	ldr	r2, [pc, #424]	; (8002748 <HAL_DMA_Abort+0x234>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d022      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a68      	ldr	r2, [pc, #416]	; (800274c <HAL_DMA_Abort+0x238>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d01d      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a67      	ldr	r2, [pc, #412]	; (8002750 <HAL_DMA_Abort+0x23c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d018      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a65      	ldr	r2, [pc, #404]	; (8002754 <HAL_DMA_Abort+0x240>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a64      	ldr	r2, [pc, #400]	; (8002758 <HAL_DMA_Abort+0x244>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d00e      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a62      	ldr	r2, [pc, #392]	; (800275c <HAL_DMA_Abort+0x248>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a61      	ldr	r2, [pc, #388]	; (8002760 <HAL_DMA_Abort+0x24c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_DMA_Abort+0xd6>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5f      	ldr	r2, [pc, #380]	; (8002764 <HAL_DMA_Abort+0x250>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_DMA_Abort+0xda>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <HAL_DMA_Abort+0xdc>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 021e 	bic.w	r2, r2, #30
 8002602:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695a      	ldr	r2, [r3, #20]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002612:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e00a      	b.n	8002632 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020e 	bic.w	r2, r2, #14
 800262a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <HAL_DMA_Abort+0x214>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d072      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a3a      	ldr	r2, [pc, #232]	; (800272c <HAL_DMA_Abort+0x218>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d06d      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a39      	ldr	r2, [pc, #228]	; (8002730 <HAL_DMA_Abort+0x21c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d068      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_DMA_Abort+0x220>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d063      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a36      	ldr	r2, [pc, #216]	; (8002738 <HAL_DMA_Abort+0x224>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d05e      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_DMA_Abort+0x228>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d059      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a33      	ldr	r2, [pc, #204]	; (8002740 <HAL_DMA_Abort+0x22c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d054      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a31      	ldr	r2, [pc, #196]	; (8002744 <HAL_DMA_Abort+0x230>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04f      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a30      	ldr	r2, [pc, #192]	; (8002748 <HAL_DMA_Abort+0x234>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d04a      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2e      	ldr	r2, [pc, #184]	; (800274c <HAL_DMA_Abort+0x238>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d045      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a2d      	ldr	r2, [pc, #180]	; (8002750 <HAL_DMA_Abort+0x23c>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d040      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2b      	ldr	r2, [pc, #172]	; (8002754 <HAL_DMA_Abort+0x240>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d03b      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_DMA_Abort+0x244>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d036      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a28      	ldr	r2, [pc, #160]	; (800275c <HAL_DMA_Abort+0x248>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d031      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_DMA_Abort+0x24c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d02c      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a25      	ldr	r2, [pc, #148]	; (8002764 <HAL_DMA_Abort+0x250>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_DMA_Abort+0x254>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d022      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <HAL_DMA_Abort+0x258>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01d      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_DMA_Abort+0x25c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d018      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <HAL_DMA_Abort+0x260>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <HAL_DMA_Abort+0x264>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00e      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_DMA_Abort+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d009      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_DMA_Abort+0x26c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d004      	beq.n	8002722 <HAL_DMA_Abort+0x20e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_DMA_Abort+0x270>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d132      	bne.n	8002788 <HAL_DMA_Abort+0x274>
 8002722:	2301      	movs	r3, #1
 8002724:	e031      	b.n	800278a <HAL_DMA_Abort+0x276>
 8002726:	bf00      	nop
 8002728:	40020010 	.word	0x40020010
 800272c:	40020028 	.word	0x40020028
 8002730:	40020040 	.word	0x40020040
 8002734:	40020058 	.word	0x40020058
 8002738:	40020070 	.word	0x40020070
 800273c:	40020088 	.word	0x40020088
 8002740:	400200a0 	.word	0x400200a0
 8002744:	400200b8 	.word	0x400200b8
 8002748:	40020410 	.word	0x40020410
 800274c:	40020428 	.word	0x40020428
 8002750:	40020440 	.word	0x40020440
 8002754:	40020458 	.word	0x40020458
 8002758:	40020470 	.word	0x40020470
 800275c:	40020488 	.word	0x40020488
 8002760:	400204a0 	.word	0x400204a0
 8002764:	400204b8 	.word	0x400204b8
 8002768:	58025408 	.word	0x58025408
 800276c:	5802541c 	.word	0x5802541c
 8002770:	58025430 	.word	0x58025430
 8002774:	58025444 	.word	0x58025444
 8002778:	58025458 	.word	0x58025458
 800277c:	5802546c 	.word	0x5802546c
 8002780:	58025480 	.word	0x58025480
 8002784:	58025494 	.word	0x58025494
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800279c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a6d      	ldr	r2, [pc, #436]	; (8002958 <HAL_DMA_Abort+0x444>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d04a      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6b      	ldr	r2, [pc, #428]	; (800295c <HAL_DMA_Abort+0x448>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d045      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6a      	ldr	r2, [pc, #424]	; (8002960 <HAL_DMA_Abort+0x44c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d040      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a68      	ldr	r2, [pc, #416]	; (8002964 <HAL_DMA_Abort+0x450>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d03b      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a67      	ldr	r2, [pc, #412]	; (8002968 <HAL_DMA_Abort+0x454>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d036      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a65      	ldr	r2, [pc, #404]	; (800296c <HAL_DMA_Abort+0x458>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d031      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a64      	ldr	r2, [pc, #400]	; (8002970 <HAL_DMA_Abort+0x45c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d02c      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a62      	ldr	r2, [pc, #392]	; (8002974 <HAL_DMA_Abort+0x460>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d027      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a61      	ldr	r2, [pc, #388]	; (8002978 <HAL_DMA_Abort+0x464>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d022      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a5f      	ldr	r2, [pc, #380]	; (800297c <HAL_DMA_Abort+0x468>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d01d      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a5e      	ldr	r2, [pc, #376]	; (8002980 <HAL_DMA_Abort+0x46c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d018      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_DMA_Abort+0x470>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <HAL_DMA_Abort+0x474>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d00e      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a59      	ldr	r2, [pc, #356]	; (800298c <HAL_DMA_Abort+0x478>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d009      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_DMA_Abort+0x47c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d004      	beq.n	800283e <HAL_DMA_Abort+0x32a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_DMA_Abort+0x480>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <HAL_DMA_Abort+0x33c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	e007      	b.n	8002860 <HAL_DMA_Abort+0x34c>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0201 	bic.w	r2, r2, #1
 800285e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002860:	e013      	b.n	800288a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002862:	f7ff fd0b 	bl	800227c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b05      	cmp	r3, #5
 800286e:	d90c      	bls.n	800288a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2203      	movs	r2, #3
 800287a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e12d      	b.n	8002ae6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1e5      	bne.n	8002862 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <HAL_DMA_Abort+0x444>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d04a      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_DMA_Abort+0x448>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d045      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a2c      	ldr	r2, [pc, #176]	; (8002960 <HAL_DMA_Abort+0x44c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d040      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a2a      	ldr	r2, [pc, #168]	; (8002964 <HAL_DMA_Abort+0x450>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d03b      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <HAL_DMA_Abort+0x454>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d036      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a27      	ldr	r2, [pc, #156]	; (800296c <HAL_DMA_Abort+0x458>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d031      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a26      	ldr	r2, [pc, #152]	; (8002970 <HAL_DMA_Abort+0x45c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d02c      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a24      	ldr	r2, [pc, #144]	; (8002974 <HAL_DMA_Abort+0x460>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d027      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a23      	ldr	r2, [pc, #140]	; (8002978 <HAL_DMA_Abort+0x464>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d022      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a21      	ldr	r2, [pc, #132]	; (800297c <HAL_DMA_Abort+0x468>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d01d      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a20      	ldr	r2, [pc, #128]	; (8002980 <HAL_DMA_Abort+0x46c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d018      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1e      	ldr	r2, [pc, #120]	; (8002984 <HAL_DMA_Abort+0x470>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <HAL_DMA_Abort+0x474>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00e      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_DMA_Abort+0x478>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1a      	ldr	r2, [pc, #104]	; (8002990 <HAL_DMA_Abort+0x47c>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_DMA_Abort+0x422>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a18      	ldr	r2, [pc, #96]	; (8002994 <HAL_DMA_Abort+0x480>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_DMA_Abort+0x426>
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_DMA_Abort+0x428>
 800293a:	2300      	movs	r3, #0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d02b      	beq.n	8002998 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	223f      	movs	r2, #63	; 0x3f
 8002950:	409a      	lsls	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	609a      	str	r2, [r3, #8]
 8002956:	e02a      	b.n	80029ae <HAL_DMA_Abort+0x49a>
 8002958:	40020010 	.word	0x40020010
 800295c:	40020028 	.word	0x40020028
 8002960:	40020040 	.word	0x40020040
 8002964:	40020058 	.word	0x40020058
 8002968:	40020070 	.word	0x40020070
 800296c:	40020088 	.word	0x40020088
 8002970:	400200a0 	.word	0x400200a0
 8002974:	400200b8 	.word	0x400200b8
 8002978:	40020410 	.word	0x40020410
 800297c:	40020428 	.word	0x40020428
 8002980:	40020440 	.word	0x40020440
 8002984:	40020458 	.word	0x40020458
 8002988:	40020470 	.word	0x40020470
 800298c:	40020488 	.word	0x40020488
 8002990:	400204a0 	.word	0x400204a0
 8002994:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	2201      	movs	r2, #1
 80029a8:	409a      	lsls	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a4f      	ldr	r2, [pc, #316]	; (8002af0 <HAL_DMA_Abort+0x5dc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d072      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_DMA_Abort+0x5e0>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d06d      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_DMA_Abort+0x5e4>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d068      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a4a      	ldr	r2, [pc, #296]	; (8002afc <HAL_DMA_Abort+0x5e8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d063      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a49      	ldr	r2, [pc, #292]	; (8002b00 <HAL_DMA_Abort+0x5ec>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d05e      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a47      	ldr	r2, [pc, #284]	; (8002b04 <HAL_DMA_Abort+0x5f0>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d059      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a46      	ldr	r2, [pc, #280]	; (8002b08 <HAL_DMA_Abort+0x5f4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d054      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a44      	ldr	r2, [pc, #272]	; (8002b0c <HAL_DMA_Abort+0x5f8>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d04f      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a43      	ldr	r2, [pc, #268]	; (8002b10 <HAL_DMA_Abort+0x5fc>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d04a      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a41      	ldr	r2, [pc, #260]	; (8002b14 <HAL_DMA_Abort+0x600>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d045      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a40      	ldr	r2, [pc, #256]	; (8002b18 <HAL_DMA_Abort+0x604>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d040      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a3e      	ldr	r2, [pc, #248]	; (8002b1c <HAL_DMA_Abort+0x608>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d03b      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_DMA_Abort+0x60c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d036      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a3b      	ldr	r2, [pc, #236]	; (8002b24 <HAL_DMA_Abort+0x610>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d031      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a3a      	ldr	r2, [pc, #232]	; (8002b28 <HAL_DMA_Abort+0x614>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d02c      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a38      	ldr	r2, [pc, #224]	; (8002b2c <HAL_DMA_Abort+0x618>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d027      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a37      	ldr	r2, [pc, #220]	; (8002b30 <HAL_DMA_Abort+0x61c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d022      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a35      	ldr	r2, [pc, #212]	; (8002b34 <HAL_DMA_Abort+0x620>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01d      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a34      	ldr	r2, [pc, #208]	; (8002b38 <HAL_DMA_Abort+0x624>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d018      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a32      	ldr	r2, [pc, #200]	; (8002b3c <HAL_DMA_Abort+0x628>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a31      	ldr	r2, [pc, #196]	; (8002b40 <HAL_DMA_Abort+0x62c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <HAL_DMA_Abort+0x630>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d009      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <HAL_DMA_Abort+0x634>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_DMA_Abort+0x58a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2c      	ldr	r2, [pc, #176]	; (8002b4c <HAL_DMA_Abort+0x638>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_DMA_Abort+0x58e>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_DMA_Abort+0x590>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d015      	beq.n	8002ad4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ab0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00c      	beq.n	8002ad4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ad2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40020010 	.word	0x40020010
 8002af4:	40020028 	.word	0x40020028
 8002af8:	40020040 	.word	0x40020040
 8002afc:	40020058 	.word	0x40020058
 8002b00:	40020070 	.word	0x40020070
 8002b04:	40020088 	.word	0x40020088
 8002b08:	400200a0 	.word	0x400200a0
 8002b0c:	400200b8 	.word	0x400200b8
 8002b10:	40020410 	.word	0x40020410
 8002b14:	40020428 	.word	0x40020428
 8002b18:	40020440 	.word	0x40020440
 8002b1c:	40020458 	.word	0x40020458
 8002b20:	40020470 	.word	0x40020470
 8002b24:	40020488 	.word	0x40020488
 8002b28:	400204a0 	.word	0x400204a0
 8002b2c:	400204b8 	.word	0x400204b8
 8002b30:	58025408 	.word	0x58025408
 8002b34:	5802541c 	.word	0x5802541c
 8002b38:	58025430 	.word	0x58025430
 8002b3c:	58025444 	.word	0x58025444
 8002b40:	58025458 	.word	0x58025458
 8002b44:	5802546c 	.word	0x5802546c
 8002b48:	58025480 	.word	0x58025480
 8002b4c:	58025494 	.word	0x58025494

08002b50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e237      	b.n	8002fd2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d004      	beq.n	8002b78 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2280      	movs	r2, #128	; 0x80
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e22c      	b.n	8002fd2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a5c      	ldr	r2, [pc, #368]	; (8002cf0 <HAL_DMA_Abort_IT+0x1a0>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d04a      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a5b      	ldr	r2, [pc, #364]	; (8002cf4 <HAL_DMA_Abort_IT+0x1a4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d045      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a59      	ldr	r2, [pc, #356]	; (8002cf8 <HAL_DMA_Abort_IT+0x1a8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d040      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a58      	ldr	r2, [pc, #352]	; (8002cfc <HAL_DMA_Abort_IT+0x1ac>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d03b      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a56      	ldr	r2, [pc, #344]	; (8002d00 <HAL_DMA_Abort_IT+0x1b0>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d036      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a55      	ldr	r2, [pc, #340]	; (8002d04 <HAL_DMA_Abort_IT+0x1b4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d031      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a53      	ldr	r2, [pc, #332]	; (8002d08 <HAL_DMA_Abort_IT+0x1b8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d02c      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a52      	ldr	r2, [pc, #328]	; (8002d0c <HAL_DMA_Abort_IT+0x1bc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d027      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a50      	ldr	r2, [pc, #320]	; (8002d10 <HAL_DMA_Abort_IT+0x1c0>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d022      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a4f      	ldr	r2, [pc, #316]	; (8002d14 <HAL_DMA_Abort_IT+0x1c4>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01d      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a4d      	ldr	r2, [pc, #308]	; (8002d18 <HAL_DMA_Abort_IT+0x1c8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d018      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4c      	ldr	r2, [pc, #304]	; (8002d1c <HAL_DMA_Abort_IT+0x1cc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d013      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4a      	ldr	r2, [pc, #296]	; (8002d20 <HAL_DMA_Abort_IT+0x1d0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00e      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a49      	ldr	r2, [pc, #292]	; (8002d24 <HAL_DMA_Abort_IT+0x1d4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a47      	ldr	r2, [pc, #284]	; (8002d28 <HAL_DMA_Abort_IT+0x1d8>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d004      	beq.n	8002c18 <HAL_DMA_Abort_IT+0xc8>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a46      	ldr	r2, [pc, #280]	; (8002d2c <HAL_DMA_Abort_IT+0x1dc>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d101      	bne.n	8002c1c <HAL_DMA_Abort_IT+0xcc>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_DMA_Abort_IT+0xce>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f000 8086 	beq.w	8002d30 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2204      	movs	r2, #4
 8002c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a2f      	ldr	r2, [pc, #188]	; (8002cf0 <HAL_DMA_Abort_IT+0x1a0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d04a      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a2e      	ldr	r2, [pc, #184]	; (8002cf4 <HAL_DMA_Abort_IT+0x1a4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d045      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_DMA_Abort_IT+0x1a8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d040      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <HAL_DMA_Abort_IT+0x1ac>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d03b      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a29      	ldr	r2, [pc, #164]	; (8002d00 <HAL_DMA_Abort_IT+0x1b0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d036      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a28      	ldr	r2, [pc, #160]	; (8002d04 <HAL_DMA_Abort_IT+0x1b4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d031      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <HAL_DMA_Abort_IT+0x1b8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d02c      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_DMA_Abort_IT+0x1bc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d027      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <HAL_DMA_Abort_IT+0x1c0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d022      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a22      	ldr	r2, [pc, #136]	; (8002d14 <HAL_DMA_Abort_IT+0x1c4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d01d      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <HAL_DMA_Abort_IT+0x1c8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d018      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <HAL_DMA_Abort_IT+0x1cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d013      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a1d      	ldr	r2, [pc, #116]	; (8002d20 <HAL_DMA_Abort_IT+0x1d0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00e      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1c      	ldr	r2, [pc, #112]	; (8002d24 <HAL_DMA_Abort_IT+0x1d4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a1a      	ldr	r2, [pc, #104]	; (8002d28 <HAL_DMA_Abort_IT+0x1d8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d004      	beq.n	8002ccc <HAL_DMA_Abort_IT+0x17c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a19      	ldr	r2, [pc, #100]	; (8002d2c <HAL_DMA_Abort_IT+0x1dc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <HAL_DMA_Abort_IT+0x18e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0201 	bic.w	r2, r2, #1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	e178      	b.n	8002fd0 <HAL_DMA_Abort_IT+0x480>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e16f      	b.n	8002fd0 <HAL_DMA_Abort_IT+0x480>
 8002cf0:	40020010 	.word	0x40020010
 8002cf4:	40020028 	.word	0x40020028
 8002cf8:	40020040 	.word	0x40020040
 8002cfc:	40020058 	.word	0x40020058
 8002d00:	40020070 	.word	0x40020070
 8002d04:	40020088 	.word	0x40020088
 8002d08:	400200a0 	.word	0x400200a0
 8002d0c:	400200b8 	.word	0x400200b8
 8002d10:	40020410 	.word	0x40020410
 8002d14:	40020428 	.word	0x40020428
 8002d18:	40020440 	.word	0x40020440
 8002d1c:	40020458 	.word	0x40020458
 8002d20:	40020470 	.word	0x40020470
 8002d24:	40020488 	.word	0x40020488
 8002d28:	400204a0 	.word	0x400204a0
 8002d2c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 020e 	bic.w	r2, r2, #14
 8002d3e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6c      	ldr	r2, [pc, #432]	; (8002ef8 <HAL_DMA_Abort_IT+0x3a8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d04a      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <HAL_DMA_Abort_IT+0x3ac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d045      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a69      	ldr	r2, [pc, #420]	; (8002f00 <HAL_DMA_Abort_IT+0x3b0>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d040      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a68      	ldr	r2, [pc, #416]	; (8002f04 <HAL_DMA_Abort_IT+0x3b4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d03b      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a66      	ldr	r2, [pc, #408]	; (8002f08 <HAL_DMA_Abort_IT+0x3b8>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d036      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a65      	ldr	r2, [pc, #404]	; (8002f0c <HAL_DMA_Abort_IT+0x3bc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d031      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a63      	ldr	r2, [pc, #396]	; (8002f10 <HAL_DMA_Abort_IT+0x3c0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d02c      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a62      	ldr	r2, [pc, #392]	; (8002f14 <HAL_DMA_Abort_IT+0x3c4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d027      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a60      	ldr	r2, [pc, #384]	; (8002f18 <HAL_DMA_Abort_IT+0x3c8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d022      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a5f      	ldr	r2, [pc, #380]	; (8002f1c <HAL_DMA_Abort_IT+0x3cc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d01d      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a5d      	ldr	r2, [pc, #372]	; (8002f20 <HAL_DMA_Abort_IT+0x3d0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a5c      	ldr	r2, [pc, #368]	; (8002f24 <HAL_DMA_Abort_IT+0x3d4>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d013      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a5a      	ldr	r2, [pc, #360]	; (8002f28 <HAL_DMA_Abort_IT+0x3d8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a59      	ldr	r2, [pc, #356]	; (8002f2c <HAL_DMA_Abort_IT+0x3dc>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a57      	ldr	r2, [pc, #348]	; (8002f30 <HAL_DMA_Abort_IT+0x3e0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_DMA_Abort_IT+0x290>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <HAL_DMA_Abort_IT+0x3e4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d108      	bne.n	8002df2 <HAL_DMA_Abort_IT+0x2a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	e007      	b.n	8002e02 <HAL_DMA_Abort_IT+0x2b2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0201 	bic.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <HAL_DMA_Abort_IT+0x3a8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d072      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_DMA_Abort_IT+0x3ac>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d06d      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <HAL_DMA_Abort_IT+0x3b0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d068      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a37      	ldr	r2, [pc, #220]	; (8002f04 <HAL_DMA_Abort_IT+0x3b4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d063      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <HAL_DMA_Abort_IT+0x3b8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d05e      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_DMA_Abort_IT+0x3bc>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d059      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a33      	ldr	r2, [pc, #204]	; (8002f10 <HAL_DMA_Abort_IT+0x3c0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d054      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a31      	ldr	r2, [pc, #196]	; (8002f14 <HAL_DMA_Abort_IT+0x3c4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d04f      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <HAL_DMA_Abort_IT+0x3c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d04a      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <HAL_DMA_Abort_IT+0x3cc>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d045      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a2d      	ldr	r2, [pc, #180]	; (8002f20 <HAL_DMA_Abort_IT+0x3d0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d040      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <HAL_DMA_Abort_IT+0x3d4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d03b      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2a      	ldr	r2, [pc, #168]	; (8002f28 <HAL_DMA_Abort_IT+0x3d8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d036      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a28      	ldr	r2, [pc, #160]	; (8002f2c <HAL_DMA_Abort_IT+0x3dc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d031      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a27      	ldr	r2, [pc, #156]	; (8002f30 <HAL_DMA_Abort_IT+0x3e0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d02c      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <HAL_DMA_Abort_IT+0x3e4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d027      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <HAL_DMA_Abort_IT+0x3e8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d022      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <HAL_DMA_Abort_IT+0x3ec>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01d      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_DMA_Abort_IT+0x3f0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d018      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a1f      	ldr	r2, [pc, #124]	; (8002f44 <HAL_DMA_Abort_IT+0x3f4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d013      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <HAL_DMA_Abort_IT+0x3f8>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d00e      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_DMA_Abort_IT+0x3fc>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d009      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1b      	ldr	r2, [pc, #108]	; (8002f50 <HAL_DMA_Abort_IT+0x400>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d004      	beq.n	8002ef2 <HAL_DMA_Abort_IT+0x3a2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <HAL_DMA_Abort_IT+0x404>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d132      	bne.n	8002f58 <HAL_DMA_Abort_IT+0x408>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e031      	b.n	8002f5a <HAL_DMA_Abort_IT+0x40a>
 8002ef6:	bf00      	nop
 8002ef8:	40020010 	.word	0x40020010
 8002efc:	40020028 	.word	0x40020028
 8002f00:	40020040 	.word	0x40020040
 8002f04:	40020058 	.word	0x40020058
 8002f08:	40020070 	.word	0x40020070
 8002f0c:	40020088 	.word	0x40020088
 8002f10:	400200a0 	.word	0x400200a0
 8002f14:	400200b8 	.word	0x400200b8
 8002f18:	40020410 	.word	0x40020410
 8002f1c:	40020428 	.word	0x40020428
 8002f20:	40020440 	.word	0x40020440
 8002f24:	40020458 	.word	0x40020458
 8002f28:	40020470 	.word	0x40020470
 8002f2c:	40020488 	.word	0x40020488
 8002f30:	400204a0 	.word	0x400204a0
 8002f34:	400204b8 	.word	0x400204b8
 8002f38:	58025408 	.word	0x58025408
 8002f3c:	5802541c 	.word	0x5802541c
 8002f40:	58025430 	.word	0x58025430
 8002f44:	58025444 	.word	0x58025444
 8002f48:	58025458 	.word	0x58025458
 8002f4c:	5802546c 	.word	0x5802546c
 8002f50:	58025480 	.word	0x58025480
 8002f54:	58025494 	.word	0x58025494
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d028      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f72:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f8c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00c      	beq.n	8002fb0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002fae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3710      	adds	r7, #16
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002fea:	4b89      	ldr	r3, [pc, #548]	; (8003210 <HAL_GPIO_Init+0x234>)
 8002fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fee:	e194      	b.n	800331a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8186 	beq.w	8003314 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d005      	beq.n	8003020 <HAL_GPIO_Init+0x44>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d130      	bne.n	8003082 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4313      	orrs	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003056:	2201      	movs	r2, #1
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f003 0201 	and.w	r2, r3, #1
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	2b03      	cmp	r3, #3
 800308c:	d017      	beq.n	80030be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	2203      	movs	r2, #3
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43db      	mvns	r3, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4013      	ands	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d123      	bne.n	8003112 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	08da      	lsrs	r2, r3, #3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	3208      	adds	r2, #8
 80030d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	220f      	movs	r2, #15
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	69b9      	ldr	r1, [r7, #24]
 800310e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	2203      	movs	r2, #3
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0203 	and.w	r2, r3, #3
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 80e0 	beq.w	8003314 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003154:	4b2f      	ldr	r3, [pc, #188]	; (8003214 <HAL_GPIO_Init+0x238>)
 8003156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800315a:	4a2e      	ldr	r2, [pc, #184]	; (8003214 <HAL_GPIO_Init+0x238>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_GPIO_Init+0x238>)
 8003166:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003172:	4a29      	ldr	r2, [pc, #164]	; (8003218 <HAL_GPIO_Init+0x23c>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	089b      	lsrs	r3, r3, #2
 8003178:	3302      	adds	r3, #2
 800317a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	220f      	movs	r2, #15
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4013      	ands	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <HAL_GPIO_Init+0x240>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d052      	beq.n	8003244 <HAL_GPIO_Init+0x268>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <HAL_GPIO_Init+0x244>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d031      	beq.n	800320a <HAL_GPIO_Init+0x22e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_GPIO_Init+0x248>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d02b      	beq.n	8003206 <HAL_GPIO_Init+0x22a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <HAL_GPIO_Init+0x24c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d025      	beq.n	8003202 <HAL_GPIO_Init+0x226>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a1c      	ldr	r2, [pc, #112]	; (800322c <HAL_GPIO_Init+0x250>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01f      	beq.n	80031fe <HAL_GPIO_Init+0x222>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1b      	ldr	r2, [pc, #108]	; (8003230 <HAL_GPIO_Init+0x254>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d019      	beq.n	80031fa <HAL_GPIO_Init+0x21e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1a      	ldr	r2, [pc, #104]	; (8003234 <HAL_GPIO_Init+0x258>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_GPIO_Init+0x21a>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a19      	ldr	r2, [pc, #100]	; (8003238 <HAL_GPIO_Init+0x25c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00d      	beq.n	80031f2 <HAL_GPIO_Init+0x216>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a18      	ldr	r2, [pc, #96]	; (800323c <HAL_GPIO_Init+0x260>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d007      	beq.n	80031ee <HAL_GPIO_Init+0x212>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a17      	ldr	r2, [pc, #92]	; (8003240 <HAL_GPIO_Init+0x264>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d101      	bne.n	80031ea <HAL_GPIO_Init+0x20e>
 80031e6:	2309      	movs	r3, #9
 80031e8:	e02d      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 80031ea:	230a      	movs	r3, #10
 80031ec:	e02b      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 80031ee:	2308      	movs	r3, #8
 80031f0:	e029      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e027      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 80031f6:	2306      	movs	r3, #6
 80031f8:	e025      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 80031fa:	2305      	movs	r3, #5
 80031fc:	e023      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 80031fe:	2304      	movs	r3, #4
 8003200:	e021      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 8003202:	2303      	movs	r3, #3
 8003204:	e01f      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 8003206:	2302      	movs	r3, #2
 8003208:	e01d      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 800320a:	2301      	movs	r3, #1
 800320c:	e01b      	b.n	8003246 <HAL_GPIO_Init+0x26a>
 800320e:	bf00      	nop
 8003210:	58000080 	.word	0x58000080
 8003214:	58024400 	.word	0x58024400
 8003218:	58000400 	.word	0x58000400
 800321c:	58020000 	.word	0x58020000
 8003220:	58020400 	.word	0x58020400
 8003224:	58020800 	.word	0x58020800
 8003228:	58020c00 	.word	0x58020c00
 800322c:	58021000 	.word	0x58021000
 8003230:	58021400 	.word	0x58021400
 8003234:	58021800 	.word	0x58021800
 8003238:	58021c00 	.word	0x58021c00
 800323c:	58022000 	.word	0x58022000
 8003240:	58022400 	.word	0x58022400
 8003244:	2300      	movs	r3, #0
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	f002 0203 	and.w	r2, r2, #3
 800324c:	0092      	lsls	r2, r2, #2
 800324e:	4093      	lsls	r3, r2
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003256:	4938      	ldr	r1, [pc, #224]	; (8003338 <HAL_GPIO_Init+0x35c>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d003      	beq.n	800328a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800328a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80032b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	43db      	mvns	r3, r3
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	4013      	ands	r3, r2
 80032f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	3301      	adds	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	f47f ae63 	bne.w	8002ff0 <HAL_GPIO_Init+0x14>
  }
}
 800332a:	bf00      	nop
 800332c:	bf00      	nop
 800332e:	3724      	adds	r7, #36	; 0x24
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	58000400 	.word	0x58000400

0800333c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
 8003348:	4613      	mov	r3, r2
 800334a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800334c:	787b      	ldrb	r3, [r7, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003358:	e003      	b.n	8003362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	041a      	lsls	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	460b      	mov	r3, r1
 8003378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003380:	887a      	ldrh	r2, [r7, #2]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	041a      	lsls	r2, r3, #16
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	43d9      	mvns	r1, r3
 800338c:	887b      	ldrh	r3, [r7, #2]
 800338e:	400b      	ands	r3, r1
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	619a      	str	r2, [r3, #24]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80033c0:	88fb      	ldrh	r3, [r7, #6]
 80033c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe f829 	bl	8001420 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_PWREx_ConfigSupply+0x70>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d00a      	beq.n	8003402 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_PWREx_ConfigSupply+0x70>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d001      	beq.n	80033fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e01f      	b.n	800343e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	e01d      	b.n	800343e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_PWREx_ConfigSupply+0x70>)
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f023 0207 	bic.w	r2, r3, #7
 800340a:	490f      	ldr	r1, [pc, #60]	; (8003448 <HAL_PWREx_ConfigSupply+0x70>)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003412:	f7fe ff33 	bl	800227c <HAL_GetTick>
 8003416:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003418:	e009      	b.n	800342e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800341a:	f7fe ff2f 	bl	800227c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003428:	d901      	bls.n	800342e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e007      	b.n	800343e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_PWREx_ConfigSupply+0x70>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800343a:	d1ee      	bne.n	800341a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	58024800 	.word	0x58024800

0800344c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08c      	sub	sp, #48	; 0x30
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d102      	bne.n	8003460 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	f000 bc1d 	b.w	8003c9a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 8087 	beq.w	800357c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346e:	4b99      	ldr	r3, [pc, #612]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003476:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003478:	4b96      	ldr	r3, [pc, #600]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	2b10      	cmp	r3, #16
 8003482:	d007      	beq.n	8003494 <HAL_RCC_OscConfig+0x48>
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	2b18      	cmp	r3, #24
 8003488:	d110      	bne.n	80034ac <HAL_RCC_OscConfig+0x60>
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	f003 0303 	and.w	r3, r3, #3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d10b      	bne.n	80034ac <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	4b8f      	ldr	r3, [pc, #572]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d06c      	beq.n	800357a <HAL_RCC_OscConfig+0x12e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d168      	bne.n	800357a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e3f6      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_OscConfig+0x78>
 80034b6:	4b87      	ldr	r3, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a86      	ldr	r2, [pc, #536]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e02e      	b.n	8003522 <HAL_RCC_OscConfig+0xd6>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x9a>
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	4b7e      	ldr	r3, [pc, #504]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7d      	ldr	r2, [pc, #500]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e01d      	b.n	8003522 <HAL_RCC_OscConfig+0xd6>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ee:	d10c      	bne.n	800350a <HAL_RCC_OscConfig+0xbe>
 80034f0:	4b78      	ldr	r3, [pc, #480]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a77      	ldr	r2, [pc, #476]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	4b75      	ldr	r3, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a74      	ldr	r2, [pc, #464]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	e00b      	b.n	8003522 <HAL_RCC_OscConfig+0xd6>
 800350a:	4b72      	ldr	r3, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a71      	ldr	r2, [pc, #452]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800351c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003520:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d013      	beq.n	8003552 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe fea7 	bl	800227c <HAL_GetTick>
 800352e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003532:	f7fe fea3 	bl	800227c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b64      	cmp	r3, #100	; 0x64
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e3aa      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003544:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0xe6>
 8003550:	e014      	b.n	800357c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003552:	f7fe fe93 	bl	800227c <HAL_GetTick>
 8003556:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355a:	f7fe fe8f 	bl	800227c <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	; 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e396      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800356c:	4b59      	ldr	r3, [pc, #356]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f0      	bne.n	800355a <HAL_RCC_OscConfig+0x10e>
 8003578:	e000      	b.n	800357c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80cb 	beq.w	8003720 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800358a:	4b52      	ldr	r3, [pc, #328]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003592:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003594:	4b4f      	ldr	r3, [pc, #316]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_RCC_OscConfig+0x164>
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	2b18      	cmp	r3, #24
 80035a4:	d156      	bne.n	8003654 <HAL_RCC_OscConfig+0x208>
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d151      	bne.n	8003654 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035b0:	4b48      	ldr	r3, [pc, #288]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_OscConfig+0x17c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e368      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80035c8:	4b42      	ldr	r3, [pc, #264]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f023 0219 	bic.w	r2, r3, #25
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	493f      	ldr	r1, [pc, #252]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035da:	f7fe fe4f 	bl	800227c <HAL_GetTick>
 80035de:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e2:	f7fe fe4b 	bl	800227c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e352      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f4:	4b37      	ldr	r3, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	f7fe fe6c 	bl	80022dc <HAL_GetREVID>
 8003604:	4603      	mov	r3, r0
 8003606:	f241 0203 	movw	r2, #4099	; 0x1003
 800360a:	4293      	cmp	r3, r2
 800360c:	d817      	bhi.n	800363e <HAL_RCC_OscConfig+0x1f2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d108      	bne.n	8003628 <HAL_RCC_OscConfig+0x1dc>
 8003616:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800361e:	4a2d      	ldr	r2, [pc, #180]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003626:	e07b      	b.n	8003720 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003628:	4b2a      	ldr	r3, [pc, #168]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	031b      	lsls	r3, r3, #12
 8003636:	4927      	ldr	r1, [pc, #156]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363c:	e070      	b.n	8003720 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b25      	ldr	r3, [pc, #148]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	061b      	lsls	r3, r3, #24
 800364c:	4921      	ldr	r1, [pc, #132]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800364e:	4313      	orrs	r3, r2
 8003650:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003652:	e065      	b.n	8003720 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d048      	beq.n	80036ee <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800365c:	4b1d      	ldr	r3, [pc, #116]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 0219 	bic.w	r2, r3, #25
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	491a      	ldr	r1, [pc, #104]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800366a:	4313      	orrs	r3, r2
 800366c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe fe05 	bl	800227c <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe fe01 	bl	800227c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e308      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003688:	4b12      	ldr	r3, [pc, #72]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	f7fe fe22 	bl	80022dc <HAL_GetREVID>
 8003698:	4603      	mov	r3, r0
 800369a:	f241 0203 	movw	r2, #4099	; 0x1003
 800369e:	4293      	cmp	r3, r2
 80036a0:	d81a      	bhi.n	80036d8 <HAL_RCC_OscConfig+0x28c>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b40      	cmp	r3, #64	; 0x40
 80036a8:	d108      	bne.n	80036bc <HAL_RCC_OscConfig+0x270>
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80036b2:	4a08      	ldr	r2, [pc, #32]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b8:	6053      	str	r3, [r2, #4]
 80036ba:	e031      	b.n	8003720 <HAL_RCC_OscConfig+0x2d4>
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	031b      	lsls	r3, r3, #12
 80036ca:	4902      	ldr	r1, [pc, #8]	; (80036d4 <HAL_RCC_OscConfig+0x288>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	604b      	str	r3, [r1, #4]
 80036d0:	e026      	b.n	8003720 <HAL_RCC_OscConfig+0x2d4>
 80036d2:	bf00      	nop
 80036d4:	58024400 	.word	0x58024400
 80036d8:	4b9a      	ldr	r3, [pc, #616]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	4997      	ldr	r1, [pc, #604]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	604b      	str	r3, [r1, #4]
 80036ec:	e018      	b.n	8003720 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ee:	4b95      	ldr	r3, [pc, #596]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a94      	ldr	r2, [pc, #592]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fa:	f7fe fdbf 	bl	800227c <HAL_GetTick>
 80036fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fe fdbb 	bl	800227c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e2c2      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003714:	4b8b      	ldr	r3, [pc, #556]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a9 	beq.w	8003880 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003736:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003738:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d007      	beq.n	8003754 <HAL_RCC_OscConfig+0x308>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	2b18      	cmp	r3, #24
 8003748:	d13a      	bne.n	80037c0 <HAL_RCC_OscConfig+0x374>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d135      	bne.n	80037c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003754:	4b7b      	ldr	r3, [pc, #492]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_OscConfig+0x320>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	2b80      	cmp	r3, #128	; 0x80
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e296      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800376c:	f7fe fdb6 	bl	80022dc <HAL_GetREVID>
 8003770:	4603      	mov	r3, r0
 8003772:	f241 0203 	movw	r2, #4099	; 0x1003
 8003776:	4293      	cmp	r3, r2
 8003778:	d817      	bhi.n	80037aa <HAL_RCC_OscConfig+0x35e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	2b20      	cmp	r3, #32
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x348>
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800378a:	4a6e      	ldr	r2, [pc, #440]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800378c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003790:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003792:	e075      	b.n	8003880 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003794:	4b6b      	ldr	r3, [pc, #428]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	069b      	lsls	r3, r3, #26
 80037a2:	4968      	ldr	r1, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037a8:	e06a      	b.n	8003880 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037aa:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	061b      	lsls	r3, r3, #24
 80037b8:	4962      	ldr	r1, [pc, #392]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037be:	e05f      	b.n	8003880 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d042      	beq.n	800384e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037c8:	4b5e      	ldr	r3, [pc, #376]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5d      	ldr	r2, [pc, #372]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80037ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe fd52 	bl	800227c <HAL_GetTick>
 80037d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80037dc:	f7fe fd4e 	bl	800227c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e255      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ee:	4b55      	ldr	r3, [pc, #340]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0f0      	beq.n	80037dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037fa:	f7fe fd6f 	bl	80022dc <HAL_GetREVID>
 80037fe:	4603      	mov	r3, r0
 8003800:	f241 0203 	movw	r2, #4099	; 0x1003
 8003804:	4293      	cmp	r3, r2
 8003806:	d817      	bhi.n	8003838 <HAL_RCC_OscConfig+0x3ec>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	2b20      	cmp	r3, #32
 800380e:	d108      	bne.n	8003822 <HAL_RCC_OscConfig+0x3d6>
 8003810:	4b4c      	ldr	r3, [pc, #304]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003818:	4a4a      	ldr	r2, [pc, #296]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800381e:	6053      	str	r3, [r2, #4]
 8003820:	e02e      	b.n	8003880 <HAL_RCC_OscConfig+0x434>
 8003822:	4b48      	ldr	r3, [pc, #288]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	069b      	lsls	r3, r3, #26
 8003830:	4944      	ldr	r1, [pc, #272]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	604b      	str	r3, [r1, #4]
 8003836:	e023      	b.n	8003880 <HAL_RCC_OscConfig+0x434>
 8003838:	4b42      	ldr	r3, [pc, #264]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	493f      	ldr	r1, [pc, #252]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003848:	4313      	orrs	r3, r2
 800384a:	60cb      	str	r3, [r1, #12]
 800384c:	e018      	b.n	8003880 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800384e:	4b3d      	ldr	r3, [pc, #244]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a3c      	ldr	r2, [pc, #240]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fd0f 	bl	800227c <HAL_GetTick>
 800385e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003862:	f7fe fd0b 	bl	800227c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e212      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003874:	4b33      	ldr	r3, [pc, #204]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d036      	beq.n	80038fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003898:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 800389a:	f043 0301 	orr.w	r3, r3, #1
 800389e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe fcec 	bl	800227c <HAL_GetTick>
 80038a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038a8:	f7fe fce8 	bl	800227c <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e1ef      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038ba:	4b22      	ldr	r3, [pc, #136]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80038bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0x45c>
 80038c6:	e018      	b.n	80038fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038cc:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038d4:	f7fe fcd2 	bl	800227c <HAL_GetTick>
 80038d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fcce 	bl	800227c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e1d5      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 80038f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1f0      	bne.n	80038dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0320 	and.w	r3, r3, #32
 8003902:	2b00      	cmp	r3, #0
 8003904:	d039      	beq.n	800397a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01c      	beq.n	8003948 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003918:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800391a:	f7fe fcaf 	bl	800227c <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003922:	f7fe fcab 	bl	800227c <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e1b2      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003934:	4b03      	ldr	r3, [pc, #12]	; (8003944 <HAL_RCC_OscConfig+0x4f8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0f0      	beq.n	8003922 <HAL_RCC_OscConfig+0x4d6>
 8003940:	e01b      	b.n	800397a <HAL_RCC_OscConfig+0x52e>
 8003942:	bf00      	nop
 8003944:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003948:	4b9b      	ldr	r3, [pc, #620]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a9a      	ldr	r2, [pc, #616]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 800394e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003952:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003954:	f7fe fc92 	bl	800227c <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800395c:	f7fe fc8e 	bl	800227c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e195      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800396e:	4b92      	ldr	r3, [pc, #584]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8081 	beq.w	8003a8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003988:	4b8c      	ldr	r3, [pc, #560]	; (8003bbc <HAL_RCC_OscConfig+0x770>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a8b      	ldr	r2, [pc, #556]	; (8003bbc <HAL_RCC_OscConfig+0x770>)
 800398e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003992:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003994:	f7fe fc72 	bl	800227c <HAL_GetTick>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800399c:	f7fe fc6e 	bl	800227c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b64      	cmp	r3, #100	; 0x64
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e175      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ae:	4b83      	ldr	r3, [pc, #524]	; (8003bbc <HAL_RCC_OscConfig+0x770>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d0f0      	beq.n	800399c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d106      	bne.n	80039d0 <HAL_RCC_OscConfig+0x584>
 80039c2:	4b7d      	ldr	r3, [pc, #500]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	4a7c      	ldr	r2, [pc, #496]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6713      	str	r3, [r2, #112]	; 0x70
 80039ce:	e02d      	b.n	8003a2c <HAL_RCC_OscConfig+0x5e0>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x5a6>
 80039d8:	4b77      	ldr	r3, [pc, #476]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a76      	ldr	r2, [pc, #472]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	4b74      	ldr	r3, [pc, #464]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	4a73      	ldr	r2, [pc, #460]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039ea:	f023 0304 	bic.w	r3, r3, #4
 80039ee:	6713      	str	r3, [r2, #112]	; 0x70
 80039f0:	e01c      	b.n	8003a2c <HAL_RCC_OscConfig+0x5e0>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x5c8>
 80039fa:	4b6f      	ldr	r3, [pc, #444]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a6e      	ldr	r2, [pc, #440]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a00:	f043 0304 	orr.w	r3, r3, #4
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	4b6c      	ldr	r3, [pc, #432]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	4a6b      	ldr	r2, [pc, #428]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a0c:	f043 0301 	orr.w	r3, r3, #1
 8003a10:	6713      	str	r3, [r2, #112]	; 0x70
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0x5e0>
 8003a14:	4b68      	ldr	r3, [pc, #416]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a67      	ldr	r2, [pc, #412]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a1a:	f023 0301 	bic.w	r3, r3, #1
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a20:	4b65      	ldr	r3, [pc, #404]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	4a64      	ldr	r2, [pc, #400]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a26:	f023 0304 	bic.w	r3, r3, #4
 8003a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d015      	beq.n	8003a60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7fe fc22 	bl	800227c <HAL_GetTick>
 8003a38:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7fe fc1e 	bl	800227c <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e123      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a52:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0ee      	beq.n	8003a3c <HAL_RCC_OscConfig+0x5f0>
 8003a5e:	e014      	b.n	8003a8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe fc0c 	bl	800227c <HAL_GetTick>
 8003a64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a66:	e00a      	b.n	8003a7e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fe fc08 	bl	800227c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e10d      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1ee      	bne.n	8003a68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f000 8102 	beq.w	8003c98 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a94:	4b48      	ldr	r3, [pc, #288]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a9c:	2b18      	cmp	r3, #24
 8003a9e:	f000 80bd 	beq.w	8003c1c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	f040 809e 	bne.w	8003be8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a41      	ldr	r2, [pc, #260]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fbe0 	bl	800227c <HAL_GetTick>
 8003abc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fbdc 	bl	800227c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0e3      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x774>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	430a      	orrs	r2, r1
 8003af2:	4931      	ldr	r1, [pc, #196]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	628b      	str	r3, [r1, #40]	; 0x28
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	3b01      	subs	r3, #1
 8003afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b06:	3b01      	subs	r3, #1
 8003b08:	025b      	lsls	r3, r3, #9
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b12:	3b01      	subs	r3, #1
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	3b01      	subs	r3, #1
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b28:	4923      	ldr	r1, [pc, #140]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	4a21      	ldr	r2, [pc, #132]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b34:	f023 0301 	bic.w	r3, r3, #1
 8003b38:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b3a:	4b1f      	ldr	r3, [pc, #124]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3e:	4b21      	ldr	r3, [pc, #132]	; (8003bc4 <HAL_RCC_OscConfig+0x778>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b46:	00d2      	lsls	r2, r2, #3
 8003b48:	491b      	ldr	r1, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b4e:	4b1a      	ldr	r3, [pc, #104]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	f023 020c 	bic.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	4917      	ldr	r1, [pc, #92]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b60:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	f023 0202 	bic.w	r2, r3, #2
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6c:	4912      	ldr	r1, [pc, #72]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b72:	4b11      	ldr	r3, [pc, #68]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	4a10      	ldr	r2, [pc, #64]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b7e:	4b0e      	ldr	r3, [pc, #56]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b82:	4a0d      	ldr	r2, [pc, #52]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	4a0a      	ldr	r2, [pc, #40]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	4a07      	ldr	r2, [pc, #28]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba2:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_RCC_OscConfig+0x76c>)
 8003ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7fe fb65 	bl	800227c <HAL_GetTick>
 8003bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bb4:	e011      	b.n	8003bda <HAL_RCC_OscConfig+0x78e>
 8003bb6:	bf00      	nop
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	58024800 	.word	0x58024800
 8003bc0:	fffffc0c 	.word	0xfffffc0c
 8003bc4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bc8:	f7fe fb58 	bl	800227c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e05f      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bda:	4b32      	ldr	r3, [pc, #200]	; (8003ca4 <HAL_RCC_OscConfig+0x858>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x77c>
 8003be6:	e057      	b.n	8003c98 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be8:	4b2e      	ldr	r3, [pc, #184]	; (8003ca4 <HAL_RCC_OscConfig+0x858>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a2d      	ldr	r2, [pc, #180]	; (8003ca4 <HAL_RCC_OscConfig+0x858>)
 8003bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf4:	f7fe fb42 	bl	800227c <HAL_GetTick>
 8003bf8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fe fb3e 	bl	800227c <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e045      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_RCC_OscConfig+0x858>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f0      	bne.n	8003bfc <HAL_RCC_OscConfig+0x7b0>
 8003c1a:	e03d      	b.n	8003c98 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_RCC_OscConfig+0x858>)
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_RCC_OscConfig+0x858>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c26:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d031      	beq.n	8003c94 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0203 	and.w	r2, r3, #3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d12a      	bne.n	8003c94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	091b      	lsrs	r3, r3, #4
 8003c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d122      	bne.n	8003c94 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d11a      	bne.n	8003c94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	0a5b      	lsrs	r3, r3, #9
 8003c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d111      	bne.n	8003c94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	0c1b      	lsrs	r3, r3, #16
 8003c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d108      	bne.n	8003c94 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	0e1b      	lsrs	r3, r3, #24
 8003c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d001      	beq.n	8003c98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3730      	adds	r7, #48	; 0x30
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	58024400 	.word	0x58024400

08003ca8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e19c      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cbc:	4b8a      	ldr	r3, [pc, #552]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d910      	bls.n	8003cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cca:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 020f 	bic.w	r2, r3, #15
 8003cd2:	4985      	ldr	r1, [pc, #532]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cda:	4b83      	ldr	r3, [pc, #524]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d001      	beq.n	8003cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e184      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0304 	and.w	r3, r3, #4
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	4b7b      	ldr	r3, [pc, #492]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d908      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d08:	4b78      	ldr	r3, [pc, #480]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	4975      	ldr	r1, [pc, #468]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695a      	ldr	r2, [r3, #20]
 8003d2a:	4b70      	ldr	r3, [pc, #448]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d908      	bls.n	8003d48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d36:	4b6d      	ldr	r3, [pc, #436]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	496a      	ldr	r1, [pc, #424]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	4b64      	ldr	r3, [pc, #400]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d908      	bls.n	8003d76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d64:	4b61      	ldr	r3, [pc, #388]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	495e      	ldr	r1, [pc, #376]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d010      	beq.n	8003da4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	4b59      	ldr	r3, [pc, #356]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d88:	6a1b      	ldr	r3, [r3, #32]
 8003d8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d908      	bls.n	8003da4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d92:	4b56      	ldr	r3, [pc, #344]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	4953      	ldr	r1, [pc, #332]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d010      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	4b4d      	ldr	r3, [pc, #308]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 030f 	and.w	r3, r3, #15
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d908      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dc0:	4b4a      	ldr	r3, [pc, #296]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	f023 020f 	bic.w	r2, r3, #15
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4947      	ldr	r1, [pc, #284]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d055      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dde:	4b43      	ldr	r3, [pc, #268]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	4940      	ldr	r1, [pc, #256]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d107      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003df8:	4b3c      	ldr	r3, [pc, #240]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d121      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0f6      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b03      	cmp	r3, #3
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e10:	4b36      	ldr	r3, [pc, #216]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d115      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0ea      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e28:	4b30      	ldr	r3, [pc, #192]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0de      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e38:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0304 	and.w	r3, r3, #4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0d6      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f023 0207 	bic.w	r2, r3, #7
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4925      	ldr	r1, [pc, #148]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5a:	f7fe fa0f 	bl	800227c <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e60:	e00a      	b.n	8003e78 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e62:	f7fe fa0b 	bl	800227c <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0be      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e78:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d1eb      	bne.n	8003e62 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d208      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea6:	4b11      	ldr	r3, [pc, #68]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f023 020f 	bic.w	r2, r3, #15
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	490e      	ldr	r1, [pc, #56]	; (8003eec <HAL_RCC_ClockConfig+0x244>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d214      	bcs.n	8003ef0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 020f 	bic.w	r2, r3, #15
 8003ece:	4906      	ldr	r1, [pc, #24]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed6:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_RCC_ClockConfig+0x240>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	683a      	ldr	r2, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e086      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x34e>
 8003ee8:	52002000 	.word	0x52002000
 8003eec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0304 	and.w	r3, r3, #4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d208      	bcs.n	8003f1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f0c:	4b3c      	ldr	r3, [pc, #240]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f0e:	699b      	ldr	r3, [r3, #24]
 8003f10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4939      	ldr	r1, [pc, #228]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d010      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d208      	bcs.n	8003f4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f3a:	4b31      	ldr	r3, [pc, #196]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	492e      	ldr	r1, [pc, #184]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d010      	beq.n	8003f7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699a      	ldr	r2, [r3, #24]
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f5e:	69db      	ldr	r3, [r3, #28]
 8003f60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d208      	bcs.n	8003f7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	4922      	ldr	r1, [pc, #136]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0320 	and.w	r3, r3, #32
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d010      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d208      	bcs.n	8003fa8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f96:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	4917      	ldr	r1, [pc, #92]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fa8:	f000 f834 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fac:	4602      	mov	r2, r0
 8003fae:	4b14      	ldr	r3, [pc, #80]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	0a1b      	lsrs	r3, r3, #8
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	4912      	ldr	r1, [pc, #72]	; (8004004 <HAL_RCC_ClockConfig+0x35c>)
 8003fba:	5ccb      	ldrb	r3, [r1, r3]
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fc6:	4b0e      	ldr	r3, [pc, #56]	; (8004000 <HAL_RCC_ClockConfig+0x358>)
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	4a0d      	ldr	r2, [pc, #52]	; (8004004 <HAL_RCC_ClockConfig+0x35c>)
 8003fd0:	5cd3      	ldrb	r3, [r2, r3]
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fdc:	4a0a      	ldr	r2, [pc, #40]	; (8004008 <HAL_RCC_ClockConfig+0x360>)
 8003fde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fe0:	4a0a      	ldr	r2, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x364>)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003fe6:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x368>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fe f8fc 	bl	80021e8 <HAL_InitTick>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	58024400 	.word	0x58024400
 8004004:	08011dd4 	.word	0x08011dd4
 8004008:	24000004 	.word	0x24000004
 800400c:	24000000 	.word	0x24000000
 8004010:	24000008 	.word	0x24000008

08004014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800401a:	4bb3      	ldr	r3, [pc, #716]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004022:	2b18      	cmp	r3, #24
 8004024:	f200 8155 	bhi.w	80042d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <HAL_RCC_GetSysClockFreq+0x1c>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004095 	.word	0x08004095
 8004034:	080042d3 	.word	0x080042d3
 8004038:	080042d3 	.word	0x080042d3
 800403c:	080042d3 	.word	0x080042d3
 8004040:	080042d3 	.word	0x080042d3
 8004044:	080042d3 	.word	0x080042d3
 8004048:	080042d3 	.word	0x080042d3
 800404c:	080042d3 	.word	0x080042d3
 8004050:	080040bb 	.word	0x080040bb
 8004054:	080042d3 	.word	0x080042d3
 8004058:	080042d3 	.word	0x080042d3
 800405c:	080042d3 	.word	0x080042d3
 8004060:	080042d3 	.word	0x080042d3
 8004064:	080042d3 	.word	0x080042d3
 8004068:	080042d3 	.word	0x080042d3
 800406c:	080042d3 	.word	0x080042d3
 8004070:	080040c1 	.word	0x080040c1
 8004074:	080042d3 	.word	0x080042d3
 8004078:	080042d3 	.word	0x080042d3
 800407c:	080042d3 	.word	0x080042d3
 8004080:	080042d3 	.word	0x080042d3
 8004084:	080042d3 	.word	0x080042d3
 8004088:	080042d3 	.word	0x080042d3
 800408c:	080042d3 	.word	0x080042d3
 8004090:	080040c7 	.word	0x080040c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004094:	4b94      	ldr	r3, [pc, #592]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0320 	and.w	r3, r3, #32
 800409c:	2b00      	cmp	r3, #0
 800409e:	d009      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040a0:	4b91      	ldr	r3, [pc, #580]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	08db      	lsrs	r3, r3, #3
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	4a90      	ldr	r2, [pc, #576]	; (80042ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80040b2:	e111      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040b4:	4b8d      	ldr	r3, [pc, #564]	; (80042ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040b6:	61bb      	str	r3, [r7, #24]
    break;
 80040b8:	e10e      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80040ba:	4b8d      	ldr	r3, [pc, #564]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040bc:	61bb      	str	r3, [r7, #24]
    break;
 80040be:	e10b      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80040c0:	4b8c      	ldr	r3, [pc, #560]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040c2:	61bb      	str	r3, [r7, #24]
    break;
 80040c4:	e108      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040c6:	4b88      	ldr	r3, [pc, #544]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80040d0:	4b85      	ldr	r3, [pc, #532]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	091b      	lsrs	r3, r3, #4
 80040d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040dc:	4b82      	ldr	r3, [pc, #520]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	f003 0301 	and.w	r3, r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040e6:	4b80      	ldr	r3, [pc, #512]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	08db      	lsrs	r3, r3, #3
 80040ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	ee07 3a90 	vmov	s15, r3
 80040fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 80e1 	beq.w	80042cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b02      	cmp	r3, #2
 800410e:	f000 8083 	beq.w	8004218 <HAL_RCC_GetSysClockFreq+0x204>
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	2b02      	cmp	r3, #2
 8004116:	f200 80a1 	bhi.w	800425c <HAL_RCC_GetSysClockFreq+0x248>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d003      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x114>
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d056      	beq.n	80041d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004126:	e099      	b.n	800425c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004128:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02d      	beq.n	8004190 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004134:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	08db      	lsrs	r3, r3, #3
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	4a6b      	ldr	r2, [pc, #428]	; (80042ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
 8004144:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	ee07 3a90 	vmov	s15, r3
 800414c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415e:	4b62      	ldr	r3, [pc, #392]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004166:	ee07 3a90 	vmov	s15, r3
 800416a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004172:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800418e:	e087      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	ee07 3a90 	vmov	s15, r3
 8004196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800419e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a2:	4b51      	ldr	r3, [pc, #324]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d2:	e065      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004300 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e6:	4b40      	ldr	r3, [pc, #256]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004212:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004216:	e043      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	ee07 3a90 	vmov	s15, r3
 800421e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004222:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004304 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422a:	4b2f      	ldr	r3, [pc, #188]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423a:	ed97 6a02 	vldr	s12, [r7, #8]
 800423e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004256:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425a:	e021      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	ee07 3a90 	vmov	s15, r3
 8004262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004266:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004300 <HAL_RCC_GetSysClockFreq+0x2ec>
 800426a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004282:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800429e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80042a0:	4b11      	ldr	r3, [pc, #68]	; (80042e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a4:	0a5b      	lsrs	r3, r3, #9
 80042a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042aa:	3301      	adds	r3, #1
 80042ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042c4:	ee17 3a90 	vmov	r3, s15
 80042c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80042ca:	e005      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
    break;
 80042d0:	e002      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80042d2:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042d4:	61bb      	str	r3, [r7, #24]
    break;
 80042d6:	bf00      	nop
  }

  return sysclockfreq;
 80042d8:	69bb      	ldr	r3, [r7, #24]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3724      	adds	r7, #36	; 0x24
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
 80042ec:	03d09000 	.word	0x03d09000
 80042f0:	003d0900 	.word	0x003d0900
 80042f4:	017d7840 	.word	0x017d7840
 80042f8:	46000000 	.word	0x46000000
 80042fc:	4c742400 	.word	0x4c742400
 8004300:	4a742400 	.word	0x4a742400
 8004304:	4bbebc20 	.word	0x4bbebc20

08004308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800430e:	f7ff fe81 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8004312:	4602      	mov	r2, r0
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <HAL_RCC_GetHCLKFreq+0x50>)
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	490f      	ldr	r1, [pc, #60]	; (800435c <HAL_RCC_GetHCLKFreq+0x54>)
 8004320:	5ccb      	ldrb	r3, [r1, r3]
 8004322:	f003 031f 	and.w	r3, r3, #31
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <HAL_RCC_GetHCLKFreq+0x50>)
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	4a09      	ldr	r2, [pc, #36]	; (800435c <HAL_RCC_GetHCLKFreq+0x54>)
 8004336:	5cd3      	ldrb	r3, [r2, r3]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a07      	ldr	r2, [pc, #28]	; (8004360 <HAL_RCC_GetHCLKFreq+0x58>)
 8004344:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <HAL_RCC_GetHCLKFreq+0x58>)
 800434e:	681b      	ldr	r3, [r3, #0]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3708      	adds	r7, #8
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	58024400 	.word	0x58024400
 800435c:	08011dd4 	.word	0x08011dd4
 8004360:	24000004 	.word	0x24000004
 8004364:	24000000 	.word	0x24000000

08004368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800436c:	f7ff ffcc 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8004370:	4602      	mov	r2, r0
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	091b      	lsrs	r3, r3, #4
 8004378:	f003 0307 	and.w	r3, r3, #7
 800437c:	4904      	ldr	r1, [pc, #16]	; (8004390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800437e:	5ccb      	ldrb	r3, [r1, r3]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004388:	4618      	mov	r0, r3
 800438a:	bd80      	pop	{r7, pc}
 800438c:	58024400 	.word	0x58024400
 8004390:	08011dd4 	.word	0x08011dd4

08004394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004398:	f7ff ffb6 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 800439c:	4602      	mov	r2, r0
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043a0:	69db      	ldr	r3, [r3, #28]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	4904      	ldr	r1, [pc, #16]	; (80043bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043aa:	5ccb      	ldrb	r3, [r1, r3]
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	58024400 	.word	0x58024400
 80043bc:	08011dd4 	.word	0x08011dd4

080043c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043c8:	2300      	movs	r3, #0
 80043ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043cc:	2300      	movs	r3, #0
 80043ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03f      	beq.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043e4:	d02a      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ea:	d824      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f0:	d018      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f6:	d81e      	bhi.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004400:	d007      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004402:	e018      	b.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004404:	4ba3      	ldr	r3, [pc, #652]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	4aa2      	ldr	r2, [pc, #648]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800440a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800440e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004410:	e015      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3304      	adds	r3, #4
 8004416:	2102      	movs	r1, #2
 8004418:	4618      	mov	r0, r3
 800441a:	f001 fff9 	bl	8006410 <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004422:	e00c      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3324      	adds	r3, #36	; 0x24
 8004428:	2102      	movs	r1, #2
 800442a:	4618      	mov	r0, r3
 800442c:	f002 f8a2 	bl	8006574 <RCCEx_PLL3_Config>
 8004430:	4603      	mov	r3, r0
 8004432:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
      break;
 800443a:	e000      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800443c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004444:	4b93      	ldr	r3, [pc, #588]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004446:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004448:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004450:	4990      	ldr	r1, [pc, #576]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004452:	4313      	orrs	r3, r2
 8004454:	650b      	str	r3, [r1, #80]	; 0x50
 8004456:	e001      	b.n	800445c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004464:	2b00      	cmp	r3, #0
 8004466:	d03d      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	2b04      	cmp	r3, #4
 800446e:	d826      	bhi.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	0800448d 	.word	0x0800448d
 800447c:	0800449b 	.word	0x0800449b
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044c5 	.word	0x080044c5
 8004488:	080044c5 	.word	0x080044c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800448c:	4b81      	ldr	r3, [pc, #516]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	4a80      	ldr	r2, [pc, #512]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004492:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004496:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004498:	e015      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3304      	adds	r3, #4
 800449e:	2100      	movs	r1, #0
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 ffb5 	bl	8006410 <RCCEx_PLL2_Config>
 80044a6:	4603      	mov	r3, r0
 80044a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044aa:	e00c      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3324      	adds	r3, #36	; 0x24
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f002 f85e 	bl	8006574 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
      break;
 80044c2:	e000      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80044c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d109      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044cc:	4b71      	ldr	r3, [pc, #452]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d0:	f023 0207 	bic.w	r2, r3, #7
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d8:	496e      	ldr	r1, [pc, #440]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	650b      	str	r3, [r1, #80]	; 0x50
 80044de:	e001      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d042      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044f8:	d02b      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d825      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004500:	2bc0      	cmp	r3, #192	; 0xc0
 8004502:	d028      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004504:	2bc0      	cmp	r3, #192	; 0xc0
 8004506:	d821      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004508:	2b80      	cmp	r3, #128	; 0x80
 800450a:	d016      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d81d      	bhi.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d002      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004514:	2b40      	cmp	r3, #64	; 0x40
 8004516:	d007      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004518:	e018      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451a:	4b5e      	ldr	r3, [pc, #376]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	4a5d      	ldr	r2, [pc, #372]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004526:	e017      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3304      	adds	r3, #4
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f001 ff6e 	bl	8006410 <RCCEx_PLL2_Config>
 8004534:	4603      	mov	r3, r0
 8004536:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004538:	e00e      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3324      	adds	r3, #36	; 0x24
 800453e:	2100      	movs	r1, #0
 8004540:	4618      	mov	r0, r3
 8004542:	f002 f817 	bl	8006574 <RCCEx_PLL3_Config>
 8004546:	4603      	mov	r3, r0
 8004548:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800454a:	e005      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]
      break;
 8004550:	e002      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004552:	bf00      	nop
 8004554:	e000      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004558:	7dfb      	ldrb	r3, [r7, #23]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d109      	bne.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800455e:	4b4d      	ldr	r3, [pc, #308]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004562:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456a:	494a      	ldr	r1, [pc, #296]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800456c:	4313      	orrs	r3, r2
 800456e:	650b      	str	r3, [r1, #80]	; 0x50
 8004570:	e001      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	7dfb      	ldrb	r3, [r7, #23]
 8004574:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457e:	2b00      	cmp	r3, #0
 8004580:	d049      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004588:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800458c:	d030      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800458e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004592:	d82a      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004594:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004598:	d02c      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800459a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800459e:	d824      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045a4:	d018      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80045a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045aa:	d81e      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80045b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b4:	d007      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80045b6:	e018      	b.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b8:	4b36      	ldr	r3, [pc, #216]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045bc:	4a35      	ldr	r2, [pc, #212]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045c4:	e017      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3304      	adds	r3, #4
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 ff1f 	bl	8006410 <RCCEx_PLL2_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80045d6:	e00e      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3324      	adds	r3, #36	; 0x24
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 ffc8 	bl	8006574 <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045e8:	e005      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
      break;
 80045ee:	e002      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80045f0:	bf00      	nop
 80045f2:	e000      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80045f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800460a:	4922      	ldr	r1, [pc, #136]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	658b      	str	r3, [r1, #88]	; 0x58
 8004610:	e001      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004612:	7dfb      	ldrb	r3, [r7, #23]
 8004614:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461e:	2b00      	cmp	r3, #0
 8004620:	d04b      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800462c:	d030      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800462e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004632:	d82a      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004634:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004638:	d02e      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800463a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800463e:	d824      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004644:	d018      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800464a:	d81e      	bhi.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004654:	d007      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004656:	e018      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004664:	e019      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3304      	adds	r3, #4
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f001 fecf 	bl	8006410 <RCCEx_PLL2_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004676:	e010      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3324      	adds	r3, #36	; 0x24
 800467c:	2100      	movs	r1, #0
 800467e:	4618      	mov	r0, r3
 8004680:	f001 ff78 	bl	8006574 <RCCEx_PLL3_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004688:	e007      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	75fb      	strb	r3, [r7, #23]
      break;
 800468e:	e004      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004690:	bf00      	nop
 8004692:	e002      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004694:	58024400 	.word	0x58024400
      break;
 8004698:	bf00      	nop
    }

    if(ret == HAL_OK)
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10a      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046a0:	4b99      	ldr	r3, [pc, #612]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046ae:	4996      	ldr	r1, [pc, #600]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	658b      	str	r3, [r1, #88]	; 0x58
 80046b4:	e001      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d032      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ca:	2b30      	cmp	r3, #48	; 0x30
 80046cc:	d01c      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80046ce:	2b30      	cmp	r3, #48	; 0x30
 80046d0:	d817      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80046d2:	2b20      	cmp	r3, #32
 80046d4:	d00c      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d813      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d016      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d10f      	bne.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046e2:	4b89      	ldr	r3, [pc, #548]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a88      	ldr	r2, [pc, #544]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80046ee:	e00e      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3304      	adds	r3, #4
 80046f4:	2102      	movs	r1, #2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fe8a 	bl	8006410 <RCCEx_PLL2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004700:	e005      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	75fb      	strb	r3, [r7, #23]
      break;
 8004706:	e002      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004708:	bf00      	nop
 800470a:	e000      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800470c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470e:	7dfb      	ldrb	r3, [r7, #23]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d109      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004714:	4b7c      	ldr	r3, [pc, #496]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004718:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004720:	4979      	ldr	r1, [pc, #484]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004722:	4313      	orrs	r3, r2
 8004724:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7dfb      	ldrb	r3, [r7, #23]
 800472a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d047      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004740:	d030      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004742:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004746:	d82a      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004748:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800474c:	d02c      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800474e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004752:	d824      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004758:	d018      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	d81e      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d007      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800476a:	e018      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476c:	4b66      	ldr	r3, [pc, #408]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	4a65      	ldr	r2, [pc, #404]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004778:	e017      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fe45 	bl	8006410 <RCCEx_PLL2_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800478a:	e00e      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3324      	adds	r3, #36	; 0x24
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f001 feee 	bl	8006574 <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800479c:	e005      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	75fb      	strb	r3, [r7, #23]
      break;
 80047a2:	e002      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80047a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047aa:	7dfb      	ldrb	r3, [r7, #23]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80047b0:	4b55      	ldr	r3, [pc, #340]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047bc:	4952      	ldr	r1, [pc, #328]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	650b      	str	r3, [r1, #80]	; 0x50
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
 80047c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d049      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047dc:	d02e      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80047de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e2:	d828      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047e8:	d02a      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80047ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047ee:	d822      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047f4:	d026      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80047f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047fa:	d81c      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004800:	d010      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8004802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004806:	d816      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01d      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004810:	d111      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	2101      	movs	r1, #1
 8004818:	4618      	mov	r0, r3
 800481a:	f001 fdf9 	bl	8006410 <RCCEx_PLL2_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004822:	e012      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3324      	adds	r3, #36	; 0x24
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fea2 	bl	8006574 <RCCEx_PLL3_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004834:	e009      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	75fb      	strb	r3, [r7, #23]
      break;
 800483a:	e006      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800483c:	bf00      	nop
 800483e:	e004      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004840:	bf00      	nop
 8004842:	e002      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004844:	bf00      	nop
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800484a:	7dfb      	ldrb	r3, [r7, #23]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004854:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800485c:	492a      	ldr	r1, [pc, #168]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800485e:	4313      	orrs	r3, r2
 8004860:	650b      	str	r3, [r1, #80]	; 0x50
 8004862:	e001      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d04d      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800487a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800487e:	d02e      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004880:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004884:	d828      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800488a:	d02a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d822      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004892:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004896:	d026      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004898:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800489c:	d81c      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800489e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a2:	d010      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80048a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a8:	d816      	bhi.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d01d      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80048ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b2:	d111      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	2101      	movs	r1, #1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 fda8 	bl	8006410 <RCCEx_PLL2_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048c4:	e012      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3324      	adds	r3, #36	; 0x24
 80048ca:	2101      	movs	r1, #1
 80048cc:	4618      	mov	r0, r3
 80048ce:	f001 fe51 	bl	8006574 <RCCEx_PLL3_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80048d6:	e009      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	75fb      	strb	r3, [r7, #23]
      break;
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048de:	bf00      	nop
 80048e0:	e004      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ec:	7dfb      	ldrb	r3, [r7, #23]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004900:	4901      	ldr	r1, [pc, #4]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004902:	4313      	orrs	r3, r2
 8004904:	658b      	str	r3, [r1, #88]	; 0x58
 8004906:	e003      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d02f      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004924:	d00e      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800492a:	d814      	bhi.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d015      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8004930:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004934:	d10f      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004936:	4baf      	ldr	r3, [pc, #700]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	4aae      	ldr	r2, [pc, #696]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800493c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004942:	e00c      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	2101      	movs	r1, #1
 800494a:	4618      	mov	r0, r3
 800494c:	f001 fd60 	bl	8006410 <RCCEx_PLL2_Config>
 8004950:	4603      	mov	r3, r0
 8004952:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004954:	e003      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
      break;
 800495a:	e000      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800495c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800495e:	7dfb      	ldrb	r3, [r7, #23]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d109      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004964:	4ba3      	ldr	r3, [pc, #652]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004968:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004970:	49a0      	ldr	r1, [pc, #640]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004972:	4313      	orrs	r3, r2
 8004974:	650b      	str	r3, [r1, #80]	; 0x50
 8004976:	e001      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d032      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800498c:	2b03      	cmp	r3, #3
 800498e:	d81b      	bhi.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049a9 	.word	0x080049a9
 80049a0:	080049b7 	.word	0x080049b7
 80049a4:	080049cf 	.word	0x080049cf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a8:	4b92      	ldr	r3, [pc, #584]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ac:	4a91      	ldr	r2, [pc, #580]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049b4:	e00c      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2102      	movs	r1, #2
 80049bc:	4618      	mov	r0, r3
 80049be:	f001 fd27 	bl	8006410 <RCCEx_PLL2_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80049c6:	e003      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	75fb      	strb	r3, [r7, #23]
      break;
 80049cc:	e000      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80049ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049d0:	7dfb      	ldrb	r3, [r7, #23]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80049d6:	4b87      	ldr	r3, [pc, #540]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	f023 0203 	bic.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e2:	4984      	ldr	r1, [pc, #528]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049e8:	e001      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8086 	beq.w	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049fc:	4b7e      	ldr	r3, [pc, #504]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7d      	ldr	r2, [pc, #500]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a08:	f7fd fc38 	bl	800227c <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a0e:	e009      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a10:	f7fd fc34 	bl	800227c <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d902      	bls.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	75fb      	strb	r3, [r7, #23]
        break;
 8004a22:	e005      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a24:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0ef      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d166      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a36:	4b6f      	ldr	r3, [pc, #444]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a40:	4053      	eors	r3, r2
 8004a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d013      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a4a:	4b6a      	ldr	r3, [pc, #424]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a52:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a54:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a58:	4a66      	ldr	r2, [pc, #408]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a60:	4b64      	ldr	r3, [pc, #400]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a64:	4a63      	ldr	r2, [pc, #396]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a6a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a6c:	4a61      	ldr	r2, [pc, #388]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a7c:	d115      	bne.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a7e:	f7fd fbfd 	bl	800227c <HAL_GetTick>
 8004a82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a84:	e00b      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a86:	f7fd fbf9 	bl	800227c <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d902      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a9c:	e005      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a9e:	4b55      	ldr	r3, [pc, #340]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ed      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d126      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004abe:	d10d      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004ac0:	4b4c      	ldr	r3, [pc, #304]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ace:	0919      	lsrs	r1, r3, #4
 8004ad0:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	4947      	ldr	r1, [pc, #284]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]
 8004ada:	e005      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004adc:	4b45      	ldr	r3, [pc, #276]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	4a44      	ldr	r2, [pc, #272]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ae2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ae6:	6113      	str	r3, [r2, #16]
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af6:	493f      	ldr	r1, [pc, #252]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	670b      	str	r3, [r1, #112]	; 0x70
 8004afc:	e004      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004afe:	7dfb      	ldrb	r3, [r7, #23]
 8004b00:	75bb      	strb	r3, [r7, #22]
 8004b02:	e001      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	7dfb      	ldrb	r3, [r7, #23]
 8004b06:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8085 	beq.w	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b1a:	2b28      	cmp	r3, #40	; 0x28
 8004b1c:	d866      	bhi.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004b1e:	a201      	add	r2, pc, #4	; (adr r2, 8004b24 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004c01 	.word	0x08004c01
 8004b28:	08004bed 	.word	0x08004bed
 8004b2c:	08004bed 	.word	0x08004bed
 8004b30:	08004bed 	.word	0x08004bed
 8004b34:	08004bed 	.word	0x08004bed
 8004b38:	08004bed 	.word	0x08004bed
 8004b3c:	08004bed 	.word	0x08004bed
 8004b40:	08004bed 	.word	0x08004bed
 8004b44:	08004bc9 	.word	0x08004bc9
 8004b48:	08004bed 	.word	0x08004bed
 8004b4c:	08004bed 	.word	0x08004bed
 8004b50:	08004bed 	.word	0x08004bed
 8004b54:	08004bed 	.word	0x08004bed
 8004b58:	08004bed 	.word	0x08004bed
 8004b5c:	08004bed 	.word	0x08004bed
 8004b60:	08004bed 	.word	0x08004bed
 8004b64:	08004bdb 	.word	0x08004bdb
 8004b68:	08004bed 	.word	0x08004bed
 8004b6c:	08004bed 	.word	0x08004bed
 8004b70:	08004bed 	.word	0x08004bed
 8004b74:	08004bed 	.word	0x08004bed
 8004b78:	08004bed 	.word	0x08004bed
 8004b7c:	08004bed 	.word	0x08004bed
 8004b80:	08004bed 	.word	0x08004bed
 8004b84:	08004c01 	.word	0x08004c01
 8004b88:	08004bed 	.word	0x08004bed
 8004b8c:	08004bed 	.word	0x08004bed
 8004b90:	08004bed 	.word	0x08004bed
 8004b94:	08004bed 	.word	0x08004bed
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004bed 	.word	0x08004bed
 8004ba0:	08004bed 	.word	0x08004bed
 8004ba4:	08004c01 	.word	0x08004c01
 8004ba8:	08004bed 	.word	0x08004bed
 8004bac:	08004bed 	.word	0x08004bed
 8004bb0:	08004bed 	.word	0x08004bed
 8004bb4:	08004bed 	.word	0x08004bed
 8004bb8:	08004bed 	.word	0x08004bed
 8004bbc:	08004bed 	.word	0x08004bed
 8004bc0:	08004bed 	.word	0x08004bed
 8004bc4:	08004c01 	.word	0x08004c01
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	2101      	movs	r1, #1
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f001 fc1e 	bl	8006410 <RCCEx_PLL2_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004bd8:	e013      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3324      	adds	r3, #36	; 0x24
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fcc7 	bl	8006574 <RCCEx_PLL3_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004bea:	e00a      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf0:	e007      	b.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bf2:	bf00      	nop
 8004bf4:	58024400 	.word	0x58024400
 8004bf8:	58024800 	.word	0x58024800
 8004bfc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d109      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c08:	4b96      	ldr	r3, [pc, #600]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c0c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c14:	4993      	ldr	r1, [pc, #588]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	654b      	str	r3, [r1, #84]	; 0x54
 8004c1a:	e001      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d038      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	d821      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c7f 	.word	0x08004c7f
 8004c40:	08004c55 	.word	0x08004c55
 8004c44:	08004c67 	.word	0x08004c67
 8004c48:	08004c7f 	.word	0x08004c7f
 8004c4c:	08004c7f 	.word	0x08004c7f
 8004c50:	08004c7f 	.word	0x08004c7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 fbd8 	bl	8006410 <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c64:	e00c      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fc81 	bl	8006574 <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c76:	e003      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7c:	e000      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004c7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c86:	4b77      	ldr	r3, [pc, #476]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	f023 0207 	bic.w	r2, r3, #7
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c92:	4974      	ldr	r1, [pc, #464]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	654b      	str	r3, [r1, #84]	; 0x54
 8004c98:	e001      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c9a:	7dfb      	ldrb	r3, [r7, #23]
 8004c9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d03a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	d821      	bhi.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004cb4:	a201      	add	r2, pc, #4	; (adr r2, 8004cbc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004cff 	.word	0x08004cff
 8004cc0:	08004cd5 	.word	0x08004cd5
 8004cc4:	08004ce7 	.word	0x08004ce7
 8004cc8:	08004cff 	.word	0x08004cff
 8004ccc:	08004cff 	.word	0x08004cff
 8004cd0:	08004cff 	.word	0x08004cff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	2101      	movs	r1, #1
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fb98 	bl	8006410 <RCCEx_PLL2_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ce4:	e00c      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3324      	adds	r3, #36	; 0x24
 8004cea:	2101      	movs	r1, #1
 8004cec:	4618      	mov	r0, r3
 8004cee:	f001 fc41 	bl	8006574 <RCCEx_PLL3_Config>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004cf6:	e003      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d00:	7dfb      	ldrb	r3, [r7, #23]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10a      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d06:	4b57      	ldr	r3, [pc, #348]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	f023 0207 	bic.w	r2, r3, #7
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	4953      	ldr	r1, [pc, #332]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	658b      	str	r3, [r1, #88]	; 0x58
 8004d1a:	e001      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	7dfb      	ldrb	r3, [r7, #23]
 8004d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d04b      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d36:	d02e      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004d3c:	d828      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d42:	d02a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d822      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d4e:	d026      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004d50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d54:	d81c      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d5a:	d010      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d60:	d816      	bhi.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d01d      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6a:	d111      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	2100      	movs	r1, #0
 8004d72:	4618      	mov	r0, r3
 8004d74:	f001 fb4c 	bl	8006410 <RCCEx_PLL2_Config>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d7c:	e012      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3324      	adds	r3, #36	; 0x24
 8004d82:	2102      	movs	r1, #2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 fbf5 	bl	8006574 <RCCEx_PLL3_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d8e:	e009      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
      break;
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d96:	bf00      	nop
 8004d98:	e004      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004db8:	492a      	ldr	r1, [pc, #168]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	654b      	str	r3, [r1, #84]	; 0x54
 8004dbe:	e001      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc0:	7dfb      	ldrb	r3, [r7, #23]
 8004dc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d04d      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004dda:	d02e      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004ddc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004de0:	d828      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	d02a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d822      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df2:	d026      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004df4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004df8:	d81c      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dfe:	d010      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e04:	d816      	bhi.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01d      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0e:	d111      	bne.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fafa 	bl	8006410 <RCCEx_PLL2_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e20:	e012      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	3324      	adds	r3, #36	; 0x24
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f001 fba3 	bl	8006574 <RCCEx_PLL3_Config>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004e32:	e009      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	75fb      	strb	r3, [r7, #23]
      break;
 8004e38:	e006      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e004      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d10c      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e4e:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e5c:	4901      	ldr	r1, [pc, #4]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	658b      	str	r3, [r1, #88]	; 0x58
 8004e62:	e003      	b.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004e64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e68:	7dfb      	ldrb	r3, [r7, #23]
 8004e6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d04b      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e82:	d02e      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004e84:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e88:	d828      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e8e:	d02a      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d822      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e9a:	d026      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004e9c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ea0:	d81c      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea6:	d010      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004ea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004eac:	d816      	bhi.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01d      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eb6:	d111      	bne.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3304      	adds	r3, #4
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f001 faa6 	bl	8006410 <RCCEx_PLL2_Config>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004ec8:	e012      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3324      	adds	r3, #36	; 0x24
 8004ece:	2102      	movs	r1, #2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f001 fb4f 	bl	8006574 <RCCEx_PLL3_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004eda:	e009      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	75fb      	strb	r3, [r7, #23]
      break;
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004eee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ef0:	7dfb      	ldrb	r3, [r7, #23]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004ef6:	4b9d      	ldr	r3, [pc, #628]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f04:	4999      	ldr	r1, [pc, #612]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	658b      	str	r3, [r1, #88]	; 0x58
 8004f0a:	e001      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f0c:	7dfb      	ldrb	r3, [r7, #23]
 8004f0e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d10a      	bne.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3324      	adds	r3, #36	; 0x24
 8004f2c:	2102      	movs	r1, #2
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f001 fb20 	bl	8006574 <RCCEx_PLL3_Config>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004f3e:	4b8b      	ldr	r3, [pc, #556]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f4c:	4987      	ldr	r1, [pc, #540]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0310 	and.w	r3, r3, #16
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01a      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f68:	d10a      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3324      	adds	r3, #36	; 0x24
 8004f6e:	2102      	movs	r1, #2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 faff 	bl	8006574 <RCCEx_PLL3_Config>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f80:	4b7a      	ldr	r3, [pc, #488]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f8e:	4977      	ldr	r1, [pc, #476]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d034      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004faa:	d01d      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fb0:	d817      	bhi.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fba:	d009      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004fbc:	e011      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 fa23 	bl	8006410 <RCCEx_PLL2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fce:	e00c      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	2102      	movs	r1, #2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 facc 	bl	8006574 <RCCEx_PLL3_Config>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fe0:	e003      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fe6:	e000      	b.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004fe8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ff0:	4b5e      	ldr	r3, [pc, #376]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ffe:	495b      	ldr	r1, [pc, #364]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005000:	4313      	orrs	r3, r2
 8005002:	658b      	str	r3, [r1, #88]	; 0x58
 8005004:	e001      	b.n	800500a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
 8005008:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d033      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005020:	d01c      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005022:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005026:	d816      	bhi.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800502c:	d003      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800502e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005032:	d007      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005034:	e00f      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005036:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	4a4c      	ldr	r2, [pc, #304]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800503c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005040:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005042:	e00c      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	3324      	adds	r3, #36	; 0x24
 8005048:	2101      	movs	r1, #1
 800504a:	4618      	mov	r0, r3
 800504c:	f001 fa92 	bl	8006574 <RCCEx_PLL3_Config>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005054:	e003      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	75fb      	strb	r3, [r7, #23]
      break;
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800505c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800505e:	7dfb      	ldrb	r3, [r7, #23]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005072:	493e      	ldr	r1, [pc, #248]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005074:	4313      	orrs	r3, r2
 8005076:	654b      	str	r3, [r1, #84]	; 0x54
 8005078:	e001      	b.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
 800507c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d029      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d007      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005098:	e00f      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800509a:	4b34      	ldr	r3, [pc, #208]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800509c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509e:	4a33      	ldr	r2, [pc, #204]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050a6:	e00b      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	2102      	movs	r1, #2
 80050ae:	4618      	mov	r0, r3
 80050b0:	f001 f9ae 	bl	8006410 <RCCEx_PLL2_Config>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80050b8:	e002      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	75fb      	strb	r3, [r7, #23]
      break;
 80050be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d109      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d2:	4926      	ldr	r1, [pc, #152]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050d8:	e001      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050da:	7dfb      	ldrb	r3, [r7, #23]
 80050dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00a      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	3324      	adds	r3, #36	; 0x24
 80050ee:	2102      	movs	r1, #2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 fa3f 	bl	8006574 <RCCEx_PLL3_Config>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d033      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005114:	d017      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800511a:	d811      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800511c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005120:	d013      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005122:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005126:	d80b      	bhi.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005128:	2b00      	cmp	r3, #0
 800512a:	d010      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800512c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005130:	d106      	bne.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005132:	4b0e      	ldr	r3, [pc, #56]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	4a0d      	ldr	r2, [pc, #52]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800513e:	e007      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	75fb      	strb	r3, [r7, #23]
      break;
 8005144:	e004      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005146:	bf00      	nop
 8005148:	e002      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800514a:	bf00      	nop
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800514e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005156:	4b05      	ldr	r3, [pc, #20]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005162:	4902      	ldr	r1, [pc, #8]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005164:	4313      	orrs	r3, r2
 8005166:	654b      	str	r3, [r1, #84]	; 0x54
 8005168:	e004      	b.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800516a:	bf00      	nop
 800516c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
 8005172:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005180:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005184:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518c:	492e      	ldr	r1, [pc, #184]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800518e:	4313      	orrs	r3, r2
 8005190:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800519e:	4b2a      	ldr	r3, [pc, #168]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80051ac:	4926      	ldr	r1, [pc, #152]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d008      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ca:	491f      	ldr	r1, [pc, #124]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	4a19      	ldr	r2, [pc, #100]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051e6:	6113      	str	r3, [r2, #16]
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ea:	691a      	ldr	r2, [r3, #16]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051f2:	4915      	ldr	r1, [pc, #84]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da08      	bge.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005204:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800520c:	490e      	ldr	r1, [pc, #56]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800520e:	4313      	orrs	r3, r2
 8005210:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800521e:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005222:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522c:	4906      	ldr	r1, [pc, #24]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800522e:	4313      	orrs	r3, r2
 8005230:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005232:	7dbb      	ldrb	r3, [r7, #22]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005238:	2300      	movs	r3, #0
 800523a:	e000      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	58024400 	.word	0x58024400

0800524c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b090      	sub	sp, #64	; 0x40
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	f040 8095 	bne.w	8005388 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800525e:	4b97      	ldr	r3, [pc, #604]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	2b04      	cmp	r3, #4
 800526c:	f200 8088 	bhi.w	8005380 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005270:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005276:	bf00      	nop
 8005278:	0800528d 	.word	0x0800528d
 800527c:	080052b5 	.word	0x080052b5
 8005280:	080052dd 	.word	0x080052dd
 8005284:	08005379 	.word	0x08005379
 8005288:	08005305 	.word	0x08005305
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800528c:	4b8b      	ldr	r3, [pc, #556]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005294:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005298:	d108      	bne.n	80052ac <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800529a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 ff64 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052a8:	f000 bc94 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052b0:	f000 bc90 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052b4:	4b81      	ldr	r3, [pc, #516]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052c0:	d108      	bne.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052c2:	f107 0318 	add.w	r3, r7, #24
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 fca8 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052d0:	f000 bc80 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80052d4:	2300      	movs	r3, #0
 80052d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052d8:	f000 bc7c 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052dc:	4b77      	ldr	r3, [pc, #476]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052e8:	d108      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ea:	f107 030c 	add.w	r3, r7, #12
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 fde8 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052f8:	f000 bc6c 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005300:	f000 bc68 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005304:	4b6d      	ldr	r3, [pc, #436]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005308:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800530c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800530e:	4b6b      	ldr	r3, [pc, #428]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b04      	cmp	r3, #4
 8005318:	d10c      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800531a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531c:	2b00      	cmp	r3, #0
 800531e:	d109      	bne.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005320:	4b66      	ldr	r3, [pc, #408]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	08db      	lsrs	r3, r3, #3
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	4a65      	ldr	r2, [pc, #404]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800532c:	fa22 f303 	lsr.w	r3, r2, r3
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005332:	e01f      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005334:	4b61      	ldr	r3, [pc, #388]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005340:	d106      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005344:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005348:	d102      	bne.n	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800534a:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800534c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800534e:	e011      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005350:	4b5a      	ldr	r3, [pc, #360]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800535c:	d106      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d102      	bne.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005366:	4b58      	ldr	r3, [pc, #352]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800536a:	e003      	b.n	8005374 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005370:	f000 bc30 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005374:	f000 bc2e 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005378:	4b54      	ldr	r3, [pc, #336]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800537c:	f000 bc2a 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005380:	2300      	movs	r3, #0
 8005382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005384:	f000 bc26 	b.w	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538e:	f040 809f 	bne.w	80054d0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005392:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800539a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a2:	d04d      	beq.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053aa:	f200 8084 	bhi.w	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	2bc0      	cmp	r3, #192	; 0xc0
 80053b2:	d07d      	beq.n	80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80053b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b6:	2bc0      	cmp	r3, #192	; 0xc0
 80053b8:	d87d      	bhi.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80053ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d02d      	beq.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80053c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d877      	bhi.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80053cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ce:	2b40      	cmp	r3, #64	; 0x40
 80053d0:	d012      	beq.n	80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80053d2:	e070      	b.n	80054b6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053d4:	4b39      	ldr	r3, [pc, #228]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053e0:	d107      	bne.n	80053f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fec0 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f0:	e3f0      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053f6:	e3ed      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053f8:	4b30      	ldr	r3, [pc, #192]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005404:	d107      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005406:	f107 0318 	add.w	r3, r7, #24
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fc06 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005414:	e3de      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800541a:	e3db      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005428:	d107      	bne.n	800543a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800542a:	f107 030c 	add.w	r3, r7, #12
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd48 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005438:	e3cc      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800543e:	e3c9      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005440:	4b1e      	ldr	r3, [pc, #120]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005444:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005448:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800544a:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d10c      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005458:	2b00      	cmp	r3, #0
 800545a:	d109      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	08db      	lsrs	r3, r3, #3
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800546e:	e01e      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005470:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547c:	d106      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800547e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005480:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005484:	d102      	bne.n	800548c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005486:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005488:	63fb      	str	r3, [r7, #60]	; 0x3c
 800548a:	e010      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005494:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005498:	d106      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800549a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054a0:	d102      	bne.n	80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80054a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a6:	e002      	b.n	80054ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80054a8:	2300      	movs	r3, #0
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80054ac:	e392      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80054ae:	e391      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80054b0:	4b06      	ldr	r3, [pc, #24]	; (80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054b4:	e38e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80054ba:	e38b      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80054bc:	58024400 	.word	0x58024400
 80054c0:	03d09000 	.word	0x03d09000
 80054c4:	003d0900 	.word	0x003d0900
 80054c8:	017d7840 	.word	0x017d7840
 80054cc:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054d6:	f040 809c 	bne.w	8005612 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80054da:	4b9d      	ldr	r3, [pc, #628]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ea:	d054      	beq.n	8005596 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80054ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054f2:	f200 808b 	bhi.w	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054fc:	f000 8083 	beq.w	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005506:	f200 8081 	bhi.w	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005510:	d02f      	beq.n	8005572 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8005512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005514:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005518:	d878      	bhi.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800551a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551c:	2b00      	cmp	r3, #0
 800551e:	d004      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005526:	d012      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8005528:	e070      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800552a:	4b89      	ldr	r3, [pc, #548]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005532:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005536:	d107      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fe15 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005546:	e345      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800554c:	e342      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800554e:	4b80      	ldr	r3, [pc, #512]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005556:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800555a:	d107      	bne.n	800556c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555c:	f107 0318 	add.w	r3, r7, #24
 8005560:	4618      	mov	r0, r3
 8005562:	f000 fb5b 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800556a:	e333      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005570:	e330      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005572:	4b77      	ldr	r3, [pc, #476]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800557a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557e:	d107      	bne.n	8005590 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005580:	f107 030c 	add.w	r3, r7, #12
 8005584:	4618      	mov	r0, r3
 8005586:	f000 fc9d 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800558e:	e321      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005590:	2300      	movs	r3, #0
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005594:	e31e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005596:	4b6e      	ldr	r3, [pc, #440]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800559e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055a0:	4b6b      	ldr	r3, [pc, #428]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d10c      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80055ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055b2:	4b67      	ldr	r3, [pc, #412]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	08db      	lsrs	r3, r3, #3
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c4:	e01e      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055c6:	4b62      	ldr	r3, [pc, #392]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d2:	d106      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80055d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055da:	d102      	bne.n	80055e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80055dc:	4b5e      	ldr	r3, [pc, #376]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80055de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055e0:	e010      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055e2:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ee:	d106      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f6:	d102      	bne.n	80055fe <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80055f8:	4b58      	ldr	r3, [pc, #352]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80055fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055fc:	e002      	b.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005602:	e2e7      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005604:	e2e6      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005606:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800560a:	e2e3      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800560c:	2300      	movs	r3, #0
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005610:	e2e0      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005618:	f040 80a7 	bne.w	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800561c:	4b4c      	ldr	r3, [pc, #304]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800561e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005620:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8005624:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800562c:	d055      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005634:	f200 8096 	bhi.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800563e:	f000 8084 	beq.w	800574a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005648:	f200 808c 	bhi.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005652:	d030      	beq.n	80056b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005656:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800565a:	f200 8083 	bhi.w	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	2b00      	cmp	r3, #0
 8005662:	d004      	beq.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005666:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800566a:	d012      	beq.n	8005692 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800566c:	e07a      	b.n	8005764 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800566e:	4b38      	ldr	r3, [pc, #224]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567a:	d107      	bne.n	800568c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800567c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fd73 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800568a:	e2a3      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800568c:	2300      	movs	r3, #0
 800568e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005690:	e2a0      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005692:	4b2f      	ldr	r3, [pc, #188]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800569a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800569e:	d107      	bne.n	80056b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056a0:	f107 0318 	add.w	r3, r7, #24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fab9 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80056ae:	e291      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056b4:	e28e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056b6:	4b26      	ldr	r3, [pc, #152]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c2:	d107      	bne.n	80056d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056c4:	f107 030c 	add.w	r3, r7, #12
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fbfb 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80056d2:	e27f      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80056d8:	e27c      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80056da:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056e4:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0304 	and.w	r3, r3, #4
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d10c      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056f6:	4b16      	ldr	r3, [pc, #88]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	08db      	lsrs	r3, r3, #3
 80056fc:	f003 0303 	and.w	r3, r3, #3
 8005700:	4a14      	ldr	r2, [pc, #80]	; (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005708:	e01e      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005716:	d106      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8005718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800571a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800571e:	d102      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005720:	4b0d      	ldr	r3, [pc, #52]	; (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005724:	e010      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005726:	4b0a      	ldr	r3, [pc, #40]	; (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005732:	d106      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8005734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005736:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800573a:	d102      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005740:	e002      	b.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005746:	e245      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005748:	e244      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800574a:	4b05      	ldr	r3, [pc, #20]	; (8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800574e:	e241      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005750:	58024400 	.word	0x58024400
 8005754:	03d09000 	.word	0x03d09000
 8005758:	003d0900 	.word	0x003d0900
 800575c:	017d7840 	.word	0x017d7840
 8005760:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005768:	e234      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005770:	f040 809c 	bne.w	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005774:	4b9b      	ldr	r3, [pc, #620]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800577c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005784:	d054      	beq.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800578c:	f200 808b 	bhi.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005796:	f000 8083 	beq.w	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057a0:	f200 8081 	bhi.w	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057aa:	d02f      	beq.n	800580c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	d878      	bhi.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d004      	beq.n	80057c4 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c0:	d012      	beq.n	80057e8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 80057c2:	e070      	b.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057c4:	4b87      	ldr	r3, [pc, #540]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057d0:	d107      	bne.n	80057e2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d6:	4618      	mov	r0, r3
 80057d8:	f000 fcc8 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057e0:	e1f8      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057e6:	e1f5      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e8:	4b7e      	ldr	r3, [pc, #504]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057f4:	d107      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f6:	f107 0318 	add.w	r3, r7, #24
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 fa0e 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005804:	e1e6      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800580a:	e1e3      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800580c:	4b75      	ldr	r3, [pc, #468]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005818:	d107      	bne.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fb50 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005828:	e1d4      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800582e:	e1d1      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005830:	4b6c      	ldr	r3, [pc, #432]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005838:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800583a:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b04      	cmp	r3, #4
 8005844:	d10c      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800584c:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	08db      	lsrs	r3, r3, #3
 8005852:	f003 0303 	and.w	r3, r3, #3
 8005856:	4a64      	ldr	r2, [pc, #400]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800585e:	e01e      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005860:	4b60      	ldr	r3, [pc, #384]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800586c:	d106      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005874:	d102      	bne.n	800587c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005876:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587a:	e010      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800587c:	4b59      	ldr	r3, [pc, #356]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005888:	d106      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800588a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800588c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005890:	d102      	bne.n	8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005892:	4b57      	ldr	r3, [pc, #348]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005894:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005896:	e002      	b.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800589c:	e19a      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800589e:	e199      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80058a0:	4b54      	ldr	r3, [pc, #336]	; (80059f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058a4:	e196      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80058a6:	2300      	movs	r3, #0
 80058a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058aa:	e193      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058b2:	d173      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80058b4:	4b4b      	ldr	r3, [pc, #300]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80058be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c4:	d02f      	beq.n	8005926 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058cc:	d863      	bhi.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058da:	d012      	beq.n	8005902 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80058dc:	e05b      	b.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058de:	4b41      	ldr	r3, [pc, #260]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ea:	d107      	bne.n	80058fc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ec:	f107 0318 	add.w	r3, r7, #24
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 f993 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058fa:	e16b      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005900:	e168      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005902:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590e:	d107      	bne.n	8005920 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005910:	f107 030c 	add.w	r3, r7, #12
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fad5 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800591e:	e159      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005924:	e156      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005926:	4b2f      	ldr	r3, [pc, #188]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800592e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005930:	4b2c      	ldr	r3, [pc, #176]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b04      	cmp	r3, #4
 800593a:	d10c      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005942:	4b28      	ldr	r3, [pc, #160]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	08db      	lsrs	r3, r3, #3
 8005948:	f003 0303 	and.w	r3, r3, #3
 800594c:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005954:	e01e      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005956:	4b23      	ldr	r3, [pc, #140]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d106      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800596a:	d102      	bne.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800596c:	4b1f      	ldr	r3, [pc, #124]	; (80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800596e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005970:	e010      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005972:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800597e:	d106      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005986:	d102      	bne.n	800598e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005988:	4b19      	ldr	r3, [pc, #100]	; (80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800598a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800598c:	e002      	b.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005992:	e11f      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005994:	e11e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005996:	2300      	movs	r3, #0
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800599a:	e11b      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a2:	d13e      	bne.n	8005a22 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80059a4:	4b0f      	ldr	r3, [pc, #60]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d004      	beq.n	80059be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80059b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ba:	d01d      	beq.n	80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 80059bc:	e02e      	b.n	8005a1c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059be:	4b09      	ldr	r3, [pc, #36]	; (80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059ca:	d107      	bne.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fbcb 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80059d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059da:	e0fb      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e0:	e0f8      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80059e2:	bf00      	nop
 80059e4:	58024400 	.word	0x58024400
 80059e8:	03d09000 	.word	0x03d09000
 80059ec:	003d0900 	.word	0x003d0900
 80059f0:	017d7840 	.word	0x017d7840
 80059f4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059f8:	4b79      	ldr	r3, [pc, #484]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a04:	d107      	bne.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a06:	f107 0318 	add.w	r3, r7, #24
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f906 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a14:	e0de      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a16:	2300      	movs	r3, #0
 8005a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a1a:	e0db      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a20:	e0d8      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a28:	f040 8085 	bne.w	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8005a2c:	4b6c      	ldr	r3, [pc, #432]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a30:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a3c:	d06b      	beq.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a44:	d874      	bhi.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d056      	beq.n	8005afc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d86c      	bhi.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a5c:	d03b      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a64:	d864      	bhi.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a6c:	d021      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a74:	d85c      	bhi.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a82:	d004      	beq.n	8005a8e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005a84:	e054      	b.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005a86:	f000 f8b3 	bl	8005bf0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005a8c:	e0a2      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a8e:	4b54      	ldr	r3, [pc, #336]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a9a:	d107      	bne.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 f8bb 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005aaa:	e093      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ab0:	e090      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ab2:	4b4b      	ldr	r3, [pc, #300]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ac0:	f107 030c 	add.w	r3, r7, #12
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 f9fd 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ace:	e081      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad4:	e07e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ad6:	4b42      	ldr	r3, [pc, #264]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d109      	bne.n	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ae2:	4b3f      	ldr	r3, [pc, #252]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	08db      	lsrs	r3, r3, #3
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005af4:	e06e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005afa:	e06b      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005afc:	4b38      	ldr	r3, [pc, #224]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b08:	d102      	bne.n	8005b10 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005b0a:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005b0e:	e061      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b14:	e05e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b16:	4b32      	ldr	r3, [pc, #200]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b22:	d102      	bne.n	8005b2a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005b24:	4b31      	ldr	r3, [pc, #196]	; (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005b26:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b28:	e054      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b2e:	e051      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b34:	e04e      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3c:	d148      	bne.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005b3e:	4b28      	ldr	r3, [pc, #160]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b46:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4e:	d02a      	beq.n	8005ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b56:	d838      	bhi.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b64:	d00d      	beq.n	8005b82 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005b66:	e030      	b.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b68:	4b1d      	ldr	r3, [pc, #116]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b74:	d102      	bne.n	8005b7c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005b78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b7a:	e02b      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b80:	e028      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b82:	4b17      	ldr	r3, [pc, #92]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b8e:	d107      	bne.n	8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f000 fae9 	bl	800616c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b9e:	e019      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ba4:	e016      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ba6:	4b0e      	ldr	r3, [pc, #56]	; (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bb2:	d107      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bb4:	f107 0318 	add.w	r3, r7, #24
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 f82f 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005bc2:	e007      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bc8:	e004      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005bce:	e001      	b.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3740      	adds	r7, #64	; 0x40
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	58024400 	.word	0x58024400
 8005be4:	03d09000 	.word	0x03d09000
 8005be8:	003d0900 	.word	0x003d0900
 8005bec:	017d7840 	.word	0x017d7840

08005bf0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bf4:	f7fe fb88 	bl	8004308 <HAL_RCC_GetHCLKFreq>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	4904      	ldr	r1, [pc, #16]	; (8005c18 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c06:	5ccb      	ldrb	r3, [r1, r3]
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	58024400 	.word	0x58024400
 8005c18:	08011dd4 	.word	0x08011dd4

08005c1c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b089      	sub	sp, #36	; 0x24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c24:	4ba1      	ldr	r3, [pc, #644]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c2e:	4b9f      	ldr	r3, [pc, #636]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c32:	0b1b      	lsrs	r3, r3, #12
 8005c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c38:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c3a:	4b9c      	ldr	r3, [pc, #624]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3e:	091b      	lsrs	r3, r3, #4
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c46:	4b99      	ldr	r3, [pc, #612]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	08db      	lsrs	r3, r3, #3
 8005c4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	fb02 f303 	mul.w	r3, r2, r3
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 8111 	beq.w	8005e8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	f000 8083 	beq.w	8005d78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	f200 80a1 	bhi.w	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d056      	beq.n	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c86:	e099      	b.n	8005dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c88:	4b88      	ldr	r3, [pc, #544]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02d      	beq.n	8005cf0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c94:	4b85      	ldr	r3, [pc, #532]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	08db      	lsrs	r3, r3, #3
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	4a84      	ldr	r2, [pc, #528]	; (8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cbe:	4b7b      	ldr	r3, [pc, #492]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cee:	e087      	b.n	8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005eb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d02:	4b6a      	ldr	r3, [pc, #424]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d32:	e065      	b.n	8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	ee07 3a90 	vmov	s15, r3
 8005d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d46:	4b59      	ldr	r3, [pc, #356]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d76:	e043      	b.n	8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	ee07 3a90 	vmov	s15, r3
 8005d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ec0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8a:	4b48      	ldr	r3, [pc, #288]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005db6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dba:	e021      	b.n	8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	ee07 3a90 	vmov	s15, r3
 8005dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ebc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005de2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dfe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005e00:	4b2a      	ldr	r3, [pc, #168]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	0a5b      	lsrs	r3, r3, #9
 8005e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e26:	ee17 2a90 	vmov	r2, s15
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e2e:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e54:	ee17 2a90 	vmov	r2, s15
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	0e1b      	lsrs	r3, r3, #24
 8005e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e82:	ee17 2a90 	vmov	r2, s15
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e8a:	e008      	b.n	8005e9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
}
 8005e9e:	bf00      	nop
 8005ea0:	3724      	adds	r7, #36	; 0x24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400
 8005eb0:	03d09000 	.word	0x03d09000
 8005eb4:	46000000 	.word	0x46000000
 8005eb8:	4c742400 	.word	0x4c742400
 8005ebc:	4a742400 	.word	0x4a742400
 8005ec0:	4bbebc20 	.word	0x4bbebc20

08005ec4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b089      	sub	sp, #36	; 0x24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ecc:	4ba1      	ldr	r3, [pc, #644]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005ed6:	4b9f      	ldr	r3, [pc, #636]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	0d1b      	lsrs	r3, r3, #20
 8005edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ee0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ee2:	4b9c      	ldr	r3, [pc, #624]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	0a1b      	lsrs	r3, r3, #8
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005eee:	4b99      	ldr	r3, [pc, #612]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	08db      	lsrs	r3, r3, #3
 8005ef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8111 	beq.w	8006134 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b02      	cmp	r3, #2
 8005f16:	f000 8083 	beq.w	8006020 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	f200 80a1 	bhi.w	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d056      	beq.n	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f2e:	e099      	b.n	8006064 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f30:	4b88      	ldr	r3, [pc, #544]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d02d      	beq.n	8005f98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f3c:	4b85      	ldr	r3, [pc, #532]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	08db      	lsrs	r3, r3, #3
 8005f42:	f003 0303 	and.w	r3, r3, #3
 8005f46:	4a84      	ldr	r2, [pc, #528]	; (8006158 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f48:	fa22 f303 	lsr.w	r3, r2, r3
 8005f4c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	ee07 3a90 	vmov	s15, r3
 8005f54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f66:	4b7b      	ldr	r3, [pc, #492]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f96:	e087      	b.n	80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006160 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005faa:	4b6a      	ldr	r3, [pc, #424]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fda:	e065      	b.n	80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fee:	4b59      	ldr	r3, [pc, #356]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006002:	eddf 5a56 	vldr	s11, [pc, #344]	; 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800600e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800601e:	e043      	b.n	80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	ee07 3a90 	vmov	s15, r3
 8006026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006168 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800602e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006032:	4b48      	ldr	r3, [pc, #288]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006042:	ed97 6a03 	vldr	s12, [r7, #12]
 8006046:	eddf 5a45 	vldr	s11, [pc, #276]	; 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800604a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006062:	e021      	b.n	80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006164 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006076:	4b37      	ldr	r3, [pc, #220]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006086:	ed97 6a03 	vldr	s12, [r7, #12]
 800608a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800615c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800608e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800609a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060a6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	0a5b      	lsrs	r3, r3, #9
 80060ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ce:	ee17 2a90 	vmov	r2, s15
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80060d6:	4b1f      	ldr	r3, [pc, #124]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	0c1b      	lsrs	r3, r3, #16
 80060dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060fc:	ee17 2a90 	vmov	r2, s15
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006104:	4b13      	ldr	r3, [pc, #76]	; (8006154 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006108:	0e1b      	lsrs	r3, r3, #24
 800610a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800611a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800611e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800612a:	ee17 2a90 	vmov	r2, s15
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006132:	e008      	b.n	8006146 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	609a      	str	r2, [r3, #8]
}
 8006146:	bf00      	nop
 8006148:	3724      	adds	r7, #36	; 0x24
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	58024400 	.word	0x58024400
 8006158:	03d09000 	.word	0x03d09000
 800615c:	46000000 	.word	0x46000000
 8006160:	4c742400 	.word	0x4c742400
 8006164:	4a742400 	.word	0x4a742400
 8006168:	4bbebc20 	.word	0x4bbebc20

0800616c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800616c:	b480      	push	{r7}
 800616e:	b089      	sub	sp, #36	; 0x24
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006174:	4ba0      	ldr	r3, [pc, #640]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800617e:	4b9e      	ldr	r3, [pc, #632]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	091b      	lsrs	r3, r3, #4
 8006184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006188:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800618a:	4b9b      	ldr	r3, [pc, #620]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800618c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006194:	4b98      	ldr	r3, [pc, #608]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006198:	08db      	lsrs	r3, r3, #3
 800619a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	fb02 f303 	mul.w	r3, r2, r3
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8111 	beq.w	80063da <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	f000 8083 	beq.w	80062c6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	f200 80a1 	bhi.w	800630a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d056      	beq.n	8006282 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80061d4:	e099      	b.n	800630a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061d6:	4b88      	ldr	r3, [pc, #544]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0320 	and.w	r3, r3, #32
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d02d      	beq.n	800623e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061e2:	4b85      	ldr	r3, [pc, #532]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	08db      	lsrs	r3, r3, #3
 80061e8:	f003 0303 	and.w	r3, r3, #3
 80061ec:	4a83      	ldr	r2, [pc, #524]	; (80063fc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80061ee:	fa22 f303 	lsr.w	r3, r2, r3
 80061f2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006208:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800620c:	4b7a      	ldr	r3, [pc, #488]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800620e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006214:	ee07 3a90 	vmov	s15, r3
 8006218:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800621c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006220:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006224:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006228:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800622c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006230:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006238:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800623c:	e087      	b.n	800634e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006248:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006404 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800624c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006250:	4b69      	ldr	r3, [pc, #420]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006258:	ee07 3a90 	vmov	s15, r3
 800625c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006260:	ed97 6a03 	vldr	s12, [r7, #12]
 8006264:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800626c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006280:	e065      	b.n	800634e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	ee07 3a90 	vmov	s15, r3
 8006288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006408 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006294:	4b58      	ldr	r3, [pc, #352]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629c:	ee07 3a90 	vmov	s15, r3
 80062a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c4:	e043      	b.n	800634e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	ee07 3a90 	vmov	s15, r3
 80062cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800640c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80062d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d8:	4b47      	ldr	r3, [pc, #284]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006308:	e021      	b.n	800634e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	ee07 3a90 	vmov	s15, r3
 8006310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006314:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006404 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631c:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006324:	ee07 3a90 	vmov	s15, r3
 8006328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006330:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006400 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800634c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800634e:	4b2a      	ldr	r3, [pc, #168]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006352:	0a5b      	lsrs	r3, r3, #9
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006364:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006368:	edd7 6a07 	vldr	s13, [r7, #28]
 800636c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006370:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006374:	ee17 2a90 	vmov	r2, s15
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800637c:	4b1e      	ldr	r3, [pc, #120]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800637e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006380:	0c1b      	lsrs	r3, r3, #16
 8006382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006392:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006396:	edd7 6a07 	vldr	s13, [r7, #28]
 800639a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063a2:	ee17 2a90 	vmov	r2, s15
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80063aa:	4b13      	ldr	r3, [pc, #76]	; (80063f8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	0e1b      	lsrs	r3, r3, #24
 80063b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063d0:	ee17 2a90 	vmov	r2, s15
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80063d8:	e008      	b.n	80063ec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2200      	movs	r2, #0
 80063e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	609a      	str	r2, [r3, #8]
}
 80063ec:	bf00      	nop
 80063ee:	3724      	adds	r7, #36	; 0x24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr
 80063f8:	58024400 	.word	0x58024400
 80063fc:	03d09000 	.word	0x03d09000
 8006400:	46000000 	.word	0x46000000
 8006404:	4c742400 	.word	0x4c742400
 8006408:	4a742400 	.word	0x4a742400
 800640c:	4bbebc20 	.word	0x4bbebc20

08006410 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b084      	sub	sp, #16
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800641e:	4b53      	ldr	r3, [pc, #332]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	f003 0303 	and.w	r3, r3, #3
 8006426:	2b03      	cmp	r3, #3
 8006428:	d101      	bne.n	800642e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800642a:	2301      	movs	r3, #1
 800642c:	e099      	b.n	8006562 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800642e:	4b4f      	ldr	r3, [pc, #316]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a4e      	ldr	r2, [pc, #312]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006434:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800643a:	f7fb ff1f 	bl	800227c <HAL_GetTick>
 800643e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006440:	e008      	b.n	8006454 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006442:	f7fb ff1b 	bl	800227c <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e086      	b.n	8006562 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006454:	4b45      	ldr	r3, [pc, #276]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1f0      	bne.n	8006442 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006460:	4b42      	ldr	r3, [pc, #264]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006464:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	031b      	lsls	r3, r3, #12
 800646e:	493f      	ldr	r1, [pc, #252]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006470:	4313      	orrs	r3, r2
 8006472:	628b      	str	r3, [r1, #40]	; 0x28
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	3b01      	subs	r3, #1
 800647a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	3b01      	subs	r3, #1
 8006484:	025b      	lsls	r3, r3, #9
 8006486:	b29b      	uxth	r3, r3
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	3b01      	subs	r3, #1
 8006490:	041b      	lsls	r3, r3, #16
 8006492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	3b01      	subs	r3, #1
 800649e:	061b      	lsls	r3, r3, #24
 80064a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064a4:	4931      	ldr	r1, [pc, #196]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80064aa:	4b30      	ldr	r3, [pc, #192]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	492d      	ldr	r1, [pc, #180]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064bc:	4b2b      	ldr	r3, [pc, #172]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	f023 0220 	bic.w	r2, r3, #32
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	4928      	ldr	r1, [pc, #160]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80064ce:	4b27      	ldr	r3, [pc, #156]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	4a26      	ldr	r2, [pc, #152]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064d4:	f023 0310 	bic.w	r3, r3, #16
 80064d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80064da:	4b24      	ldr	r3, [pc, #144]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064de:	4b24      	ldr	r3, [pc, #144]	; (8006570 <RCCEx_PLL2_Config+0x160>)
 80064e0:	4013      	ands	r3, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	69d2      	ldr	r2, [r2, #28]
 80064e6:	00d2      	lsls	r2, r2, #3
 80064e8:	4920      	ldr	r1, [pc, #128]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064ea:	4313      	orrs	r3, r2
 80064ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064ee:	4b1f      	ldr	r3, [pc, #124]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	4a1e      	ldr	r2, [pc, #120]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 80064f4:	f043 0310 	orr.w	r3, r3, #16
 80064f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d106      	bne.n	800650e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006500:	4b1a      	ldr	r3, [pc, #104]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006504:	4a19      	ldr	r2, [pc, #100]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800650a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800650c:	e00f      	b.n	800652e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d106      	bne.n	8006522 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006514:	4b15      	ldr	r3, [pc, #84]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	4a14      	ldr	r2, [pc, #80]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 800651a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800651e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006520:	e005      	b.n	800652e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006522:	4b12      	ldr	r3, [pc, #72]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	4a11      	ldr	r2, [pc, #68]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800652c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800652e:	4b0f      	ldr	r3, [pc, #60]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a0e      	ldr	r2, [pc, #56]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800653a:	f7fb fe9f 	bl	800227c <HAL_GetTick>
 800653e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006540:	e008      	b.n	8006554 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006542:	f7fb fe9b 	bl	800227c <HAL_GetTick>
 8006546:	4602      	mov	r2, r0
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	2b02      	cmp	r3, #2
 800654e:	d901      	bls.n	8006554 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e006      	b.n	8006562 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <RCCEx_PLL2_Config+0x15c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0f0      	beq.n	8006542 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	58024400 	.word	0x58024400
 8006570:	ffff0007 	.word	0xffff0007

08006574 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006582:	4b53      	ldr	r3, [pc, #332]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006586:	f003 0303 	and.w	r3, r3, #3
 800658a:	2b03      	cmp	r3, #3
 800658c:	d101      	bne.n	8006592 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e099      	b.n	80066c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006592:	4b4f      	ldr	r3, [pc, #316]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a4e      	ldr	r2, [pc, #312]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800659c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800659e:	f7fb fe6d 	bl	800227c <HAL_GetTick>
 80065a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065a4:	e008      	b.n	80065b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80065a6:	f7fb fe69 	bl	800227c <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d901      	bls.n	80065b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e086      	b.n	80066c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065b8:	4b45      	ldr	r3, [pc, #276]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80065c4:	4b42      	ldr	r3, [pc, #264]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 80065c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	051b      	lsls	r3, r3, #20
 80065d2:	493f      	ldr	r1, [pc, #252]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 80065d4:	4313      	orrs	r3, r2
 80065d6:	628b      	str	r3, [r1, #40]	; 0x28
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	3b01      	subs	r3, #1
 80065de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	025b      	lsls	r3, r3, #9
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	431a      	orrs	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	3b01      	subs	r3, #1
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	3b01      	subs	r3, #1
 8006602:	061b      	lsls	r3, r3, #24
 8006604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006608:	4931      	ldr	r1, [pc, #196]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800660e:	4b30      	ldr	r3, [pc, #192]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	492d      	ldr	r1, [pc, #180]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800661c:	4313      	orrs	r3, r2
 800661e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006620:	4b2b      	ldr	r3, [pc, #172]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	4928      	ldr	r1, [pc, #160]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800662e:	4313      	orrs	r3, r2
 8006630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006632:	4b27      	ldr	r3, [pc, #156]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	4a26      	ldr	r2, [pc, #152]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800663c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800663e:	4b24      	ldr	r3, [pc, #144]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006642:	4b24      	ldr	r3, [pc, #144]	; (80066d4 <RCCEx_PLL3_Config+0x160>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	69d2      	ldr	r2, [r2, #28]
 800664a:	00d2      	lsls	r2, r2, #3
 800664c:	4920      	ldr	r1, [pc, #128]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006652:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006656:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006664:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006668:	4a19      	ldr	r2, [pc, #100]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800666a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800666e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006670:	e00f      	b.n	8006692 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d106      	bne.n	8006686 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800667a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667c:	4a14      	ldr	r2, [pc, #80]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800667e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006684:	e005      	b.n	8006692 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 800668c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006692:	4b0f      	ldr	r3, [pc, #60]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0e      	ldr	r2, [pc, #56]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800669e:	f7fb fded 	bl	800227c <HAL_GetTick>
 80066a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066a4:	e008      	b.n	80066b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80066a6:	f7fb fde9 	bl	800227c <HAL_GetTick>
 80066aa:	4602      	mov	r2, r0
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1ad3      	subs	r3, r2, r3
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d901      	bls.n	80066b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e006      	b.n	80066c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <RCCEx_PLL3_Config+0x15c>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0f0      	beq.n	80066a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	58024400 	.word	0x58024400
 80066d4:	ffff0007 	.word	0xffff0007

080066d8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08a      	sub	sp, #40	; 0x28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e075      	b.n	80067d6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d105      	bne.n	8006702 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7fb f8c5 	bl	800188c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2204      	movs	r2, #4
 8006706:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f868 	bl	80067e0 <HAL_SD_InitCard>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e05d      	b.n	80067d6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800671a:	f107 0308 	add.w	r3, r7, #8
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 ff71 	bl	8007608 <HAL_SD_GetCardStatus>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d001      	beq.n	8006730 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e052      	b.n	80067d6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006730:	7e3b      	ldrb	r3, [r7, #24]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006736:	7e7b      	ldrb	r3, [r7, #25]
 8006738:	b2db      	uxtb	r3, r3
 800673a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006740:	2b01      	cmp	r3, #1
 8006742:	d10a      	bne.n	800675a <HAL_SD_Init+0x82>
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	2b00      	cmp	r3, #0
 8006748:	d102      	bne.n	8006750 <HAL_SD_Init+0x78>
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d004      	beq.n	800675a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006756:	659a      	str	r2, [r3, #88]	; 0x58
 8006758:	e00b      	b.n	8006772 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	2b01      	cmp	r3, #1
 8006760:	d104      	bne.n	800676c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006768:	659a      	str	r2, [r3, #88]	; 0x58
 800676a:	e002      	b.n	8006772 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f001 f82f 	bl	80077dc <HAL_SD_ConfigWideBusOperation>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e026      	b.n	80067d6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006788:	f7fb fd78 	bl	800227c <HAL_GetTick>
 800678c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800678e:	e011      	b.n	80067b4 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006790:	f7fb fd74 	bl	800227c <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d109      	bne.n	80067b4 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067a6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e010      	b.n	80067d6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f001 f923 	bl	8007a00 <HAL_SD_GetCardState>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b04      	cmp	r3, #4
 80067be:	d1e7      	bne.n	8006790 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3728      	adds	r7, #40	; 0x28
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
	...

080067e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067e0:	b590      	push	{r4, r7, lr}
 80067e2:	b08d      	sub	sp, #52	; 0x34
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80067fc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006800:	f7fe fd24 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 8006804:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d109      	bne.n	8006820 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800681a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e06a      	b.n	80068f6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	0a1b      	lsrs	r3, r3, #8
 8006824:	4a36      	ldr	r2, [pc, #216]	; (8006900 <HAL_SD_InitCard+0x120>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	091b      	lsrs	r3, r3, #4
 800682c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681c      	ldr	r4, [r3, #0]
 8006832:	466a      	mov	r2, sp
 8006834:	f107 0318 	add.w	r3, r7, #24
 8006838:	e893 0003 	ldmia.w	r3, {r0, r1}
 800683c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006840:	f107 030c 	add.w	r3, r7, #12
 8006844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006846:	4620      	mov	r0, r4
 8006848:	f004 fd8a 	bl	800b360 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f004 fdcd 	bl	800b3f0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	005b      	lsls	r3, r3, #1
 800685a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006862:	4a28      	ldr	r2, [pc, #160]	; (8006904 <HAL_SD_InitCard+0x124>)
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	fbb2 f3f3 	udiv	r3, r2, r3
 800686a:	3301      	adds	r3, #1
 800686c:	4618      	mov	r0, r3
 800686e:	f7fb fd11 	bl	8002294 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 f9b2 	bl	8007bdc <SD_PowerON>
 8006878:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00b      	beq.n	8006898 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	431a      	orrs	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e02e      	b.n	80068f6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f8d1 	bl	8007a40 <SD_InitCard>
 800689e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	431a      	orrs	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e01b      	b.n	80068f6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068c6:	4618      	mov	r0, r3
 80068c8:	f004 fe28 	bl	800b51c <SDMMC_CmdBlockLength>
 80068cc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068ce:	6a3b      	ldr	r3, [r7, #32]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00f      	beq.n	80068f4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a0b      	ldr	r2, [pc, #44]	; (8006908 <HAL_SD_InitCard+0x128>)
 80068da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	372c      	adds	r7, #44	; 0x2c
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd90      	pop	{r4, r7, pc}
 80068fe:	bf00      	nop
 8006900:	014f8b59 	.word	0x014f8b59
 8006904:	00012110 	.word	0x00012110
 8006908:	1fe00fff 	.word	0x1fe00fff

0800690c <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b092      	sub	sp, #72	; 0x48
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
 8006918:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800691a:	f7fb fcaf 	bl	800227c <HAL_GetTick>
 800691e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d107      	bne.n	800693e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e167      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b01      	cmp	r3, #1
 8006948:	f040 815a 	bne.w	8006c00 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006952:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	441a      	add	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800695c:	429a      	cmp	r2, r3
 800695e:	d907      	bls.n	8006970 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e14e      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2203      	movs	r2, #3
 8006974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	2b01      	cmp	r3, #1
 8006986:	d002      	beq.n	800698e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	025b      	lsls	r3, r3, #9
 800698c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800698e:	f04f 33ff 	mov.w	r3, #4294967295
 8006992:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	025b      	lsls	r3, r3, #9
 8006998:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800699a:	2390      	movs	r3, #144	; 0x90
 800699c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800699e:	2302      	movs	r3, #2
 80069a0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80069a6:	2300      	movs	r3, #0
 80069a8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f107 0214 	add.w	r2, r7, #20
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f004 fd85 	bl	800b4c4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68da      	ldr	r2, [r3, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069c8:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d90a      	bls.n	80069e6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2202      	movs	r2, #2
 80069d4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069dc:	4618      	mov	r0, r3
 80069de:	f004 fde3 	bl	800b5a8 <SDMMC_CmdReadMultiBlock>
 80069e2:	6478      	str	r0, [r7, #68]	; 0x44
 80069e4:	e009      	b.n	80069fa <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069f2:	4618      	mov	r0, r3
 80069f4:	f004 fdb5 	bl	800b562 <SDMMC_CmdReadSingleBlock>
 80069f8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80069fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d012      	beq.n	8006a26 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a84      	ldr	r2, [pc, #528]	; (8006c18 <HAL_SD_ReadBlocks+0x30c>)
 8006a06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	e0f3      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a2a:	e058      	b.n	8006ade <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d033      	beq.n	8006aa2 <HAL_SD_ReadBlocks+0x196>
 8006a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a3c:	2b1f      	cmp	r3, #31
 8006a3e:	d930      	bls.n	8006aa2 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006a40:	2300      	movs	r3, #0
 8006a42:	643b      	str	r3, [r7, #64]	; 0x40
 8006a44:	e027      	b.n	8006a96 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f004 fcb2 	bl	800b3b4 <SDMMC_ReadFIFO>
 8006a50:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a58:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a62:	0a1b      	lsrs	r3, r3, #8
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a6c:	3301      	adds	r3, #1
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a82:	0e1b      	lsrs	r3, r3, #24
 8006a84:	b2da      	uxtb	r2, r3
 8006a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a88:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8006a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a92:	3301      	adds	r3, #1
 8006a94:	643b      	str	r3, [r7, #64]	; 0x40
 8006a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a98:	2b07      	cmp	r3, #7
 8006a9a:	d9d4      	bls.n	8006a46 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	3b20      	subs	r3, #32
 8006aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006aa2:	f7fb fbeb 	bl	800227c <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d902      	bls.n	8006ab8 <HAL_SD_ReadBlocks+0x1ac>
 8006ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d112      	bne.n	8006ade <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a56      	ldr	r2, [pc, #344]	; (8006c18 <HAL_SD_ReadBlocks+0x30c>)
 8006abe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e097      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d09f      	beq.n	8006a2c <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68da      	ldr	r2, [r3, #12]
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006afa:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d022      	beq.n	8006b50 <HAL_SD_ReadBlocks+0x244>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d91f      	bls.n	8006b50 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b14:	2b03      	cmp	r3, #3
 8006b16:	d01b      	beq.n	8006b50 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f004 fdad 	bl	800b67c <SDMMC_CmdStopTransfer>
 8006b22:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d012      	beq.n	8006b50 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a3a      	ldr	r2, [pc, #232]	; (8006c18 <HAL_SD_ReadBlocks+0x30c>)
 8006b30:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e05e      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d012      	beq.n	8006b84 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_SD_ReadBlocks+0x30c>)
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6a:	f043 0208 	orr.w	r2, r3, #8
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e044      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d012      	beq.n	8006bb8 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a20      	ldr	r2, [pc, #128]	; (8006c18 <HAL_SD_ReadBlocks+0x30c>)
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b9e:	f043 0202 	orr.w	r2, r3, #2
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e02a      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bbe:	f003 0320 	and.w	r3, r3, #32
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d012      	beq.n	8006bec <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <HAL_SD_ReadBlocks+0x30c>)
 8006bcc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e010      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <HAL_SD_ReadBlocks+0x310>)
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e006      	b.n	8006c0e <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
  }
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3748      	adds	r7, #72	; 0x48
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	1fe00fff 	.word	0x1fe00fff
 8006c1c:	18000f3a 	.word	0x18000f3a

08006c20 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b092      	sub	sp, #72	; 0x48
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006c2e:	f7fb fb25 	bl	800227c <HAL_GetTick>
 8006c32:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d107      	bne.n	8006c52 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e16b      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	f040 815e 	bne.w	8006f1c <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	441a      	add	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d907      	bls.n	8006c84 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e152      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2203      	movs	r2, #3
 8006c88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2200      	movs	r2, #0
 8006c92:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d002      	beq.n	8006ca2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9e:	025b      	lsls	r3, r3, #9
 8006ca0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	025b      	lsls	r3, r3, #9
 8006cac:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006cae:	2390      	movs	r3, #144	; 0x90
 8006cb0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f107 0218 	add.w	r2, r7, #24
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f004 fbfb 	bl	800b4c4 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cdc:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d90a      	bls.n	8006cfa <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f004 fc9f 	bl	800b634 <SDMMC_CmdWriteMultiBlock>
 8006cf6:	6478      	str	r0, [r7, #68]	; 0x44
 8006cf8:	e009      	b.n	8006d0e <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006d06:	4618      	mov	r0, r3
 8006d08:	f004 fc71 	bl	800b5ee <SDMMC_CmdWriteSingleBlock>
 8006d0c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d012      	beq.n	8006d3a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a86      	ldr	r2, [pc, #536]	; (8006f34 <HAL_SD_WriteBlocks+0x314>)
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d22:	431a      	orrs	r2, r3
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e0f7      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006d3e:	e05c      	b.n	8006dfa <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d037      	beq.n	8006dbe <HAL_SD_WriteBlocks+0x19e>
 8006d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d50:	2b1f      	cmp	r3, #31
 8006d52:	d934      	bls.n	8006dbe <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006d54:	2300      	movs	r3, #0
 8006d56:	643b      	str	r3, [r7, #64]	; 0x40
 8006d58:	e02b      	b.n	8006db2 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d62:	3301      	adds	r3, #1
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	021a      	lsls	r2, r3, #8
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d74:	3301      	adds	r3, #1
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	041a      	lsls	r2, r3, #16
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	3301      	adds	r3, #1
 8006d88:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	061a      	lsls	r2, r3, #24
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	3301      	adds	r3, #1
 8006d9a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f107 0214 	add.w	r2, r7, #20
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f004 fb11 	bl	800b3ce <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dae:	3301      	adds	r3, #1
 8006db0:	643b      	str	r3, [r7, #64]	; 0x40
 8006db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d9d0      	bls.n	8006d5a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dba:	3b20      	subs	r3, #32
 8006dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006dbe:	f7fb fa5d 	bl	800227c <HAL_GetTick>
 8006dc2:	4602      	mov	r2, r0
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	1ad3      	subs	r3, r2, r3
 8006dc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d902      	bls.n	8006dd4 <HAL_SD_WriteBlocks+0x1b4>
 8006dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d112      	bne.n	8006dfa <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a56      	ldr	r2, [pc, #344]	; (8006f34 <HAL_SD_WriteBlocks+0x314>)
 8006dda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de2:	431a      	orrs	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e097      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d09b      	beq.n	8006d40 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e16:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d022      	beq.n	8006e6c <HAL_SD_WriteBlocks+0x24c>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d91f      	bls.n	8006e6c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d01b      	beq.n	8006e6c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f004 fc1f 	bl	800b67c <SDMMC_CmdStopTransfer>
 8006e3e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d012      	beq.n	8006e6c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a3a      	ldr	r2, [pc, #232]	; (8006f34 <HAL_SD_WriteBlocks+0x314>)
 8006e4c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e54:	431a      	orrs	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e05e      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e72:	f003 0308 	and.w	r3, r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d012      	beq.n	8006ea0 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a2d      	ldr	r2, [pc, #180]	; (8006f34 <HAL_SD_WriteBlocks+0x314>)
 8006e80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e86:	f043 0208 	orr.w	r2, r3, #8
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e044      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d012      	beq.n	8006ed4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a20      	ldr	r2, [pc, #128]	; (8006f34 <HAL_SD_WriteBlocks+0x314>)
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eba:	f043 0202 	orr.w	r2, r3, #2
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e02a      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eda:	f003 0310 	and.w	r3, r3, #16
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d012      	beq.n	8006f08 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <HAL_SD_WriteBlocks+0x314>)
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eee:	f043 0210 	orr.w	r2, r3, #16
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e010      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <HAL_SD_WriteBlocks+0x318>)
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	e006      	b.n	8006f2a <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3748      	adds	r7, #72	; 0x48
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	1fe00fff 	.word	0x1fe00fff
 8006f38:	18000f3a 	.word	0x18000f3a

08006f3c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <HAL_SD_IRQHandler+0x2e>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d003      	beq.n	8006f6a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 f926 	bl	80081b4 <SD_Read_IT>
 8006f68:	e19a      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80ac 	beq.w	80070d2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	4b59      	ldr	r3, [pc, #356]	; (80070f4 <HAL_SD_IRQHandler+0x1b8>)
 8006f90:	400b      	ands	r3, r1
 8006f92:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 0308 	and.w	r3, r3, #8
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d038      	beq.n	8007030 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <HAL_SD_IRQHandler+0x96>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d011      	beq.n	8006ff6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f004 fb50 	bl	800b67c <SDMMC_CmdStopTransfer>
 8006fdc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d008      	beq.n	8006ff6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f95b 	bl	80072ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3f      	ldr	r2, [pc, #252]	; (80070f8 <HAL_SD_IRQHandler+0x1bc>)
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	2b00      	cmp	r3, #0
 8007014:	d104      	bne.n	8007020 <HAL_SD_IRQHandler+0xe4>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d003      	beq.n	8007028 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f005 f80b 	bl	800c03c <HAL_SD_RxCpltCallback>
 8007026:	e13b      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f004 fffd 	bl	800c028 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800702e:	e137      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 8132 	beq.w	80072a0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2200      	movs	r2, #0
 8007042:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2200      	movs	r2, #0
 8007052:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f003 0302 	and.w	r3, r3, #2
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <HAL_SD_IRQHandler+0x12c>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d011      	beq.n	800708c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4618      	mov	r0, r3
 800706e:	f004 fb05 	bl	800b67c <SDMMC_CmdStopTransfer>
 8007072:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d008      	beq.n	800708c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	431a      	orrs	r2, r3
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f910 	bl	80072ac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d104      	bne.n	80070ae <HAL_SD_IRQHandler+0x172>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f003 0320 	and.w	r3, r3, #32
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d002      	beq.n	80070b4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f004 ffba 	bl	800c028 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d105      	bne.n	80070ca <HAL_SD_IRQHandler+0x18e>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80eb 	beq.w	80072a0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f004 ffb6 	bl	800c03c <HAL_SD_RxCpltCallback>
}
 80070d0:	e0e6      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <HAL_SD_IRQHandler+0x1c0>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d008      	beq.n	80070fc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f001 f8a8 	bl	8008240 <SD_Write_IT>
 80070f0:	e0d6      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
 80070f2:	bf00      	nop
 80070f4:	ffff3ec5 	.word	0xffff3ec5
 80070f8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 809d 	beq.w	8007246 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	2b00      	cmp	r3, #0
 8007118:	d005      	beq.n	8007126 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711e:	f043 0202 	orr.w	r2, r3, #2
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d005      	beq.n	8007140 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007138:	f043 0208 	orr.w	r2, r3, #8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b00      	cmp	r3, #0
 800714c:	d005      	beq.n	800715a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	f043 0220 	orr.w	r2, r3, #32
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	f003 0310 	and.w	r3, r3, #16
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716c:	f043 0210 	orr.w	r2, r3, #16
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a4b      	ldr	r2, [pc, #300]	; (80072a8 <HAL_SD_IRQHandler+0x36c>)
 800717a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800718a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68da      	ldr	r2, [r3, #12]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80071aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68da      	ldr	r2, [r3, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80071ba:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f004 fa5b 	bl	800b67c <SDMMC_CmdStopTransfer>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071cc:	431a      	orrs	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68da      	ldr	r2, [r3, #12]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071e0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ea:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f003 0308 	and.w	r3, r3, #8
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00a      	beq.n	800720c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f851 	bl	80072ac <HAL_SD_ErrorCallback>
}
 800720a:	e049      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	d044      	beq.n	80072a0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	2b00      	cmp	r3, #0
 800721c:	d040      	beq.n	80072a0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800722c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f834 	bl	80072ac <HAL_SD_ErrorCallback>
}
 8007244:	e02c      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d025      	beq.n	80072a0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10c      	bne.n	8007286 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f001 f84a 	bl	8008310 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800727c:	e010      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f001 f832 	bl	80082e8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007284:	e00c      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f003 0320 	and.w	r3, r3, #32
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f001 f833 	bl	80082fc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007296:	e003      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f81b 	bl	80082d4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800729e:	e7ff      	b.n	80072a0 <HAL_SD_IRQHandler+0x364>
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	18000f3a 	.word	0x18000f3a

080072ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ce:	0f9b      	lsrs	r3, r3, #30
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072da:	0e9b      	lsrs	r3, r3, #26
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	f003 030f 	and.w	r3, r3, #15
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ec:	0e1b      	lsrs	r3, r3, #24
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	b2da      	uxtb	r2, r3
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	b2da      	uxtb	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	b2da      	uxtb	r2, r3
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007320:	0d1b      	lsrs	r3, r3, #20
 8007322:	b29a      	uxth	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732c:	0c1b      	lsrs	r3, r3, #16
 800732e:	b2db      	uxtb	r3, r3
 8007330:	f003 030f 	and.w	r3, r3, #15
 8007334:	b2da      	uxtb	r2, r3
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800733e:	0bdb      	lsrs	r3, r3, #15
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007350:	0b9b      	lsrs	r3, r3, #14
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	b2da      	uxtb	r2, r3
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007362:	0b5b      	lsrs	r3, r3, #13
 8007364:	b2db      	uxtb	r3, r3
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	b2da      	uxtb	r2, r3
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007374:	0b1b      	lsrs	r3, r3, #12
 8007376:	b2db      	uxtb	r3, r3
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	b2da      	uxtb	r2, r3
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2200      	movs	r2, #0
 8007386:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d163      	bne.n	8007458 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007394:	009a      	lsls	r2, r3, #2
 8007396:	f640 73fc 	movw	r3, #4092	; 0xffc
 800739a:	4013      	ands	r3, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80073a0:	0f92      	lsrs	r2, r2, #30
 80073a2:	431a      	orrs	r2, r3
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ac:	0edb      	lsrs	r3, r3, #27
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073be:	0e1b      	lsrs	r3, r3, #24
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073d0:	0d5b      	lsrs	r3, r3, #21
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	f003 0307 	and.w	r3, r3, #7
 80073d8:	b2da      	uxtb	r2, r3
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073e2:	0c9b      	lsrs	r3, r3, #18
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	b2da      	uxtb	r2, r3
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073f4:	0bdb      	lsrs	r3, r3, #15
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	1c5a      	adds	r2, r3, #1
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	7e1b      	ldrb	r3, [r3, #24]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	3302      	adds	r3, #2
 8007418:	2201      	movs	r2, #1
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007422:	fb03 f202 	mul.w	r2, r3, r2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	7a1b      	ldrb	r3, [r3, #8]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	f003 030f 	and.w	r3, r3, #15
 8007434:	2201      	movs	r2, #1
 8007436:	409a      	lsls	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007444:	0a52      	lsrs	r2, r2, #9
 8007446:	fb03 f202 	mul.w	r2, r3, r2
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007454:	655a      	str	r2, [r3, #84]	; 0x54
 8007456:	e031      	b.n	80074bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800745c:	2b01      	cmp	r3, #1
 800745e:	d11d      	bne.n	800749c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007464:	041b      	lsls	r3, r3, #16
 8007466:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	431a      	orrs	r2, r3
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	3301      	adds	r3, #1
 800747c:	029a      	lsls	r2, r3, #10
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007490:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	655a      	str	r2, [r3, #84]	; 0x54
 800749a:	e00f      	b.n	80074bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a58      	ldr	r2, [pc, #352]	; (8007604 <HAL_SD_GetCardCSD+0x344>)
 80074a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2201      	movs	r2, #1
 80074b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e09d      	b.n	80075f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c0:	0b9b      	lsrs	r3, r3, #14
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074d2:	09db      	lsrs	r3, r3, #7
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ea:	b2da      	uxtb	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f4:	0fdb      	lsrs	r3, r3, #31
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007500:	0f5b      	lsrs	r3, r3, #29
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	b2da      	uxtb	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	0e9b      	lsrs	r3, r3, #26
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007524:	0d9b      	lsrs	r3, r3, #22
 8007526:	b2db      	uxtb	r3, r3
 8007528:	f003 030f 	and.w	r3, r3, #15
 800752c:	b2da      	uxtb	r2, r3
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007536:	0d5b      	lsrs	r3, r3, #21
 8007538:	b2db      	uxtb	r3, r3
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	b2da      	uxtb	r2, r3
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007552:	0c1b      	lsrs	r3, r3, #16
 8007554:	b2db      	uxtb	r3, r3
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	b2da      	uxtb	r2, r3
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007566:	0bdb      	lsrs	r3, r3, #15
 8007568:	b2db      	uxtb	r3, r3
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800757a:	0b9b      	lsrs	r3, r3, #14
 800757c:	b2db      	uxtb	r3, r3
 800757e:	f003 0301 	and.w	r3, r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758e:	0b5b      	lsrs	r3, r3, #13
 8007590:	b2db      	uxtb	r3, r3
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	b2da      	uxtb	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a2:	0b1b      	lsrs	r3, r3, #12
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	f003 0301 	and.w	r3, r3, #1
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b6:	0a9b      	lsrs	r3, r3, #10
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	b2da      	uxtb	r2, r3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	f003 0303 	and.w	r3, r3, #3
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	1fe00fff 	.word	0x1fe00fff

08007608 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b094      	sub	sp, #80	; 0x50
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007612:	2300      	movs	r3, #0
 8007614:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b03      	cmp	r3, #3
 8007622:	d101      	bne.n	8007628 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e0a7      	b.n	8007778 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007628:	f107 0308 	add.w	r3, r7, #8
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 fb62 	bl	8007cf8 <SD_SendSDStatus>
 8007634:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007638:	2b00      	cmp	r3, #0
 800763a:	d011      	beq.n	8007660 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a4f      	ldr	r2, [pc, #316]	; (8007780 <HAL_SD_GetCardStatus+0x178>)
 8007642:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800765e:	e070      	b.n	8007742 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	099b      	lsrs	r3, r3, #6
 8007664:	b2db      	uxtb	r3, r3
 8007666:	f003 0303 	and.w	r3, r3, #3
 800766a:	b2da      	uxtb	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	b2db      	uxtb	r3, r3
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	b2da      	uxtb	r2, r3
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	0a1b      	lsrs	r3, r3, #8
 8007684:	b29b      	uxth	r3, r3
 8007686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800768a:	b29a      	uxth	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	0e1b      	lsrs	r3, r3, #24
 8007690:	b29b      	uxth	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	061a      	lsls	r2, r3, #24
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	021b      	lsls	r3, r3, #8
 80076a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80076a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	b2da      	uxtb	r2, r3
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	0a1b      	lsrs	r3, r3, #8
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	0d1b      	lsrs	r3, r3, #20
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	b2da      	uxtb	r2, r3
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	0c1b      	lsrs	r3, r3, #16
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b29a      	uxth	r2, r3
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	0a9b      	lsrs	r3, r3, #10
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007704:	b2da      	uxtb	r2, r3
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	0a1b      	lsrs	r3, r3, #8
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 0303 	and.w	r3, r3, #3
 8007714:	b2da      	uxtb	r2, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	091b      	lsrs	r3, r3, #4
 800771e:	b2db      	uxtb	r3, r3
 8007720:	f003 030f 	and.w	r3, r3, #15
 8007724:	b2da      	uxtb	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	f003 030f 	and.w	r3, r3, #15
 8007732:	b2da      	uxtb	r2, r3
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	0e1b      	lsrs	r3, r3, #24
 800773c:	b2da      	uxtb	r2, r3
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f44f 7100 	mov.w	r1, #512	; 0x200
 800774a:	4618      	mov	r0, r3
 800774c:	f003 fee6 	bl	800b51c <SDMMC_CmdBlockLength>
 8007750:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007752:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a08      	ldr	r2, [pc, #32]	; (8007780 <HAL_SD_GetCardStatus+0x178>)
 800775e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007764:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007774:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007778:	4618      	mov	r0, r3
 800777a:	3750      	adds	r7, #80	; 0x50
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	1fe00fff 	.word	0x1fe00fff

08007784 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b08d      	sub	sp, #52	; 0x34
 80077e0:	af02      	add	r7, sp, #8
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80077e6:	2300      	movs	r3, #0
 80077e8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2203      	movs	r2, #3
 80077f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d02e      	beq.n	800785e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007806:	d106      	bne.n	8007816 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800780c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	635a      	str	r2, [r3, #52]	; 0x34
 8007814:	e029      	b.n	800786a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800781c:	d10a      	bne.n	8007834 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fb62 	bl	8007ee8 <SD_WideBus_Enable>
 8007824:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	635a      	str	r2, [r3, #52]	; 0x34
 8007832:	e01a      	b.n	800786a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10a      	bne.n	8007850 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fb9f 	bl	8007f7e <SD_WideBus_Disable>
 8007840:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	635a      	str	r2, [r3, #52]	; 0x34
 800784e:	e00c      	b.n	800786a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	635a      	str	r2, [r3, #52]	; 0x34
 800785c:	e005      	b.n	800786a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007862:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a5e      	ldr	r2, [pc, #376]	; (80079f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007878:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007880:	e094      	b.n	80079ac <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007882:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007886:	f7fd fce1 	bl	800524c <HAL_RCCEx_GetPeriphCLKFreq>
 800788a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	f000 8083 	beq.w	800799a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695a      	ldr	r2, [r3, #20]
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	4950      	ldr	r1, [pc, #320]	; (80079f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078b2:	fba1 1303 	umull	r1, r3, r1, r3
 80078b6:	0e1b      	lsrs	r3, r3, #24
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d303      	bcc.n	80078c4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	61bb      	str	r3, [r7, #24]
 80078c2:	e05a      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078cc:	d103      	bne.n	80078d6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	61bb      	str	r3, [r7, #24]
 80078d4:	e051      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078de:	d126      	bne.n	800792e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10e      	bne.n	8007906 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	4a43      	ldr	r2, [pc, #268]	; (80079f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d906      	bls.n	80078fe <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	4a40      	ldr	r2, [pc, #256]	; (80079f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078f4:	fba2 2303 	umull	r2, r3, r2, r3
 80078f8:	0e5b      	lsrs	r3, r3, #25
 80078fa:	61bb      	str	r3, [r7, #24]
 80078fc:	e03d      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	695b      	ldr	r3, [r3, #20]
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	e039      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	6a3a      	ldr	r2, [r7, #32]
 800790e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007912:	4a39      	ldr	r2, [pc, #228]	; (80079f8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d906      	bls.n	8007926 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	4a36      	ldr	r2, [pc, #216]	; (80079f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800791c:	fba2 2303 	umull	r2, r3, r2, r3
 8007920:	0e5b      	lsrs	r3, r3, #25
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	e029      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	695b      	ldr	r3, [r3, #20]
 800792a:	61bb      	str	r3, [r7, #24]
 800792c:	e025      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10e      	bne.n	8007954 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007936:	6a3b      	ldr	r3, [r7, #32]
 8007938:	4a30      	ldr	r2, [pc, #192]	; (80079fc <HAL_SD_ConfigWideBusOperation+0x220>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d906      	bls.n	800794c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800793e:	6a3b      	ldr	r3, [r7, #32]
 8007940:	4a2c      	ldr	r2, [pc, #176]	; (80079f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007942:	fba2 2303 	umull	r2, r3, r2, r3
 8007946:	0e1b      	lsrs	r3, r3, #24
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	e016      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	61bb      	str	r3, [r7, #24]
 8007952:	e012      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	695b      	ldr	r3, [r3, #20]
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	6a3a      	ldr	r2, [r7, #32]
 800795c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007960:	4a26      	ldr	r2, [pc, #152]	; (80079fc <HAL_SD_ConfigWideBusOperation+0x220>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d906      	bls.n	8007974 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	4a22      	ldr	r2, [pc, #136]	; (80079f4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0e1b      	lsrs	r3, r3, #24
 8007970:	61bb      	str	r3, [r7, #24]
 8007972:	e002      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	695b      	ldr	r3, [r3, #20]
 8007978:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681c      	ldr	r4, [r3, #0]
 800797e:	466a      	mov	r2, sp
 8007980:	f107 0314 	add.w	r3, r7, #20
 8007984:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007988:	e882 0003 	stmia.w	r2, {r0, r1}
 800798c:	f107 0308 	add.w	r3, r7, #8
 8007990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007992:	4620      	mov	r0, r4
 8007994:	f003 fce4 	bl	800b360 <SDMMC_Init>
 8007998:	e008      	b.n	80079ac <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079b4:	4618      	mov	r0, r3
 80079b6:	f003 fdb1 	bl	800b51c <SDMMC_CmdBlockLength>
 80079ba:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00c      	beq.n	80079dc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a0a      	ldr	r2, [pc, #40]	; (80079f0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80079c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80079e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	372c      	adds	r7, #44	; 0x2c
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd90      	pop	{r4, r7, pc}
 80079f0:	1fe00fff 	.word	0x1fe00fff
 80079f4:	55e63b89 	.word	0x55e63b89
 80079f8:	02faf080 	.word	0x02faf080
 80079fc:	017d7840 	.word	0x017d7840

08007a00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b086      	sub	sp, #24
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007a0c:	f107 030c 	add.w	r3, r7, #12
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fa40 	bl	8007e98 <SD_SendStatus>
 8007a18:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d005      	beq.n	8007a2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	0a5b      	lsrs	r3, r3, #9
 8007a30:	f003 030f 	and.w	r3, r3, #15
 8007a34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007a36:	693b      	ldr	r3, [r7, #16]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b090      	sub	sp, #64	; 0x40
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007a4c:	f7fa fc16 	bl	800227c <HAL_GetTick>
 8007a50:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f003 fcdb 	bl	800b412 <SDMMC_GetPowerState>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d102      	bne.n	8007a68 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a66:	e0b5      	b.n	8007bd4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d02e      	beq.n	8007ace <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f003 ff26 	bl	800b8c6 <SDMMC_CmdSendCID>
 8007a7a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <SD_InitCard+0x46>
    {
      return errorstate;
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	e0a6      	b.n	8007bd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f003 fd06 	bl	800b49e <SDMMC_GetResponse>
 8007a92:	4602      	mov	r2, r0
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2104      	movs	r1, #4
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f003 fcfd 	bl	800b49e <SDMMC_GetResponse>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2108      	movs	r1, #8
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f003 fcf4 	bl	800b49e <SDMMC_GetResponse>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	210c      	movs	r1, #12
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f003 fceb 	bl	800b49e <SDMMC_GetResponse>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d01d      	beq.n	8007b12 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007ad6:	e019      	b.n	8007b0c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f107 020a 	add.w	r2, r7, #10
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f003 ff2e 	bl	800b944 <SDMMC_CmdSetRelAdd>
 8007ae8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d001      	beq.n	8007af4 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af2:	e06f      	b.n	8007bd4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007af4:	f7fa fbc2 	bl	800227c <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	f241 3287 	movw	r2, #4999	; 0x1387
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d902      	bls.n	8007b0c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007b06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007b0a:	e063      	b.n	8007bd4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d0e2      	beq.n	8007ad8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d036      	beq.n	8007b88 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007b1a:	897b      	ldrh	r3, [r7, #10]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2a:	041b      	lsls	r3, r3, #16
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f003 fee8 	bl	800b904 <SDMMC_CmdSendCSD>
 8007b34:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <SD_InitCard+0x100>
    {
      return errorstate;
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	e049      	b.n	8007bd4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2100      	movs	r1, #0
 8007b46:	4618      	mov	r0, r3
 8007b48:	f003 fca9 	bl	800b49e <SDMMC_GetResponse>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2104      	movs	r1, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f003 fca0 	bl	800b49e <SDMMC_GetResponse>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2108      	movs	r1, #8
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f003 fc97 	bl	800b49e <SDMMC_GetResponse>
 8007b70:	4602      	mov	r2, r0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	210c      	movs	r1, #12
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f003 fc8e 	bl	800b49e <SDMMC_GetResponse>
 8007b82:	4602      	mov	r2, r0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2104      	movs	r1, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f003 fc85 	bl	800b49e <SDMMC_GetResponse>
 8007b94:	4603      	mov	r3, r0
 8007b96:	0d1a      	lsrs	r2, r3, #20
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b9c:	f107 030c 	add.w	r3, r7, #12
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7ff fb8c 	bl	80072c0 <HAL_SD_GetCardCSD>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007bae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007bb2:	e00f      	b.n	8007bd4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bbc:	041b      	lsls	r3, r3, #16
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	4610      	mov	r0, r2
 8007bc2:	f003 fd97 	bl	800b6f4 <SDMMC_CmdSelDesel>
 8007bc6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <SD_InitCard+0x192>
  {
    return errorstate;
 8007bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bd0:	e000      	b.n	8007bd4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3740      	adds	r7, #64	; 0x40
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007bec:	2300      	movs	r3, #0
 8007bee:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f003 fda0 	bl	800b73a <SDMMC_CmdGoIdleState>
 8007bfa:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	e072      	b.n	8007cec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f003 fdb3 	bl	800b776 <SDMMC_CmdOperCond>
 8007c10:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c18:	d10d      	bne.n	8007c36 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f003 fd88 	bl	800b73a <SDMMC_CmdGoIdleState>
 8007c2a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d004      	beq.n	8007c3c <SD_PowerON+0x60>
    {
      return errorstate;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	e05a      	b.n	8007cec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d137      	bne.n	8007cb4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f003 fdb3 	bl	800b7b6 <SDMMC_CmdAppCommand>
 8007c50:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d02d      	beq.n	8007cb4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c5c:	e046      	b.n	8007cec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2100      	movs	r1, #0
 8007c64:	4618      	mov	r0, r3
 8007c66:	f003 fda6 	bl	800b7b6 <SDMMC_CmdAppCommand>
 8007c6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d001      	beq.n	8007c76 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	e03a      	b.n	8007cec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	491e      	ldr	r1, [pc, #120]	; (8007cf4 <SD_PowerON+0x118>)
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f003 fdbd 	bl	800b7fc <SDMMC_CmdAppOperCommand>
 8007c82:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c8e:	e02d      	b.n	8007cec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f003 fc01 	bl	800b49e <SDMMC_GetResponse>
 8007c9c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	0fdb      	lsrs	r3, r3, #31
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d101      	bne.n	8007caa <SD_PowerON+0xce>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e000      	b.n	8007cac <SD_PowerON+0xd0>
 8007caa:	2300      	movs	r3, #0
 8007cac:	613b      	str	r3, [r7, #16]

    count++;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	3301      	adds	r3, #1
 8007cb2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d802      	bhi.n	8007cc4 <SD_PowerON+0xe8>
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0cc      	beq.n	8007c5e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d902      	bls.n	8007cd4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007cce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cd2:	e00b      	b.n	8007cec <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	c1100000 	.word	0xc1100000

08007cf8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08c      	sub	sp, #48	; 0x30
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007d02:	f7fa fabb 	bl	800227c <HAL_GetTick>
 8007d06:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f003 fbc3 	bl	800b49e <SDMMC_GetResponse>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d22:	d102      	bne.n	8007d2a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007d24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d28:	e0b0      	b.n	8007e8c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2140      	movs	r1, #64	; 0x40
 8007d30:	4618      	mov	r0, r3
 8007d32:	f003 fbf3 	bl	800b51c <SDMMC_CmdBlockLength>
 8007d36:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d38:	6a3b      	ldr	r3, [r7, #32]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d46:	6a3b      	ldr	r3, [r7, #32]
 8007d48:	e0a0      	b.n	8007e8c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d52:	041b      	lsls	r3, r3, #16
 8007d54:	4619      	mov	r1, r3
 8007d56:	4610      	mov	r0, r2
 8007d58:	f003 fd2d 	bl	800b7b6 <SDMMC_CmdAppCommand>
 8007d5c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d5e:	6a3b      	ldr	r3, [r7, #32]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d005      	beq.n	8007d70 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d6c:	6a3b      	ldr	r3, [r7, #32]
 8007d6e:	e08d      	b.n	8007e8c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295
 8007d74:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007d7a:	2360      	movs	r3, #96	; 0x60
 8007d7c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d86:	2301      	movs	r3, #1
 8007d88:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f107 0208 	add.w	r2, r7, #8
 8007d92:	4611      	mov	r1, r2
 8007d94:	4618      	mov	r0, r3
 8007d96:	f003 fb95 	bl	800b4c4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f003 fe15 	bl	800b9ce <SDMMC_CmdStatusRegister>
 8007da4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007da6:	6a3b      	ldr	r3, [r7, #32]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d02b      	beq.n	8007e04 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007db4:	6a3b      	ldr	r3, [r7, #32]
 8007db6:	e069      	b.n	8007e8c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d013      	beq.n	8007dee <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dca:	e00d      	b.n	8007de8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f003 faef 	bl	800b3b4 <SDMMC_ReadFIFO>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	601a      	str	r2, [r3, #0]
        pData++;
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	3304      	adds	r3, #4
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	3301      	adds	r3, #1
 8007de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	2b07      	cmp	r3, #7
 8007dec:	d9ee      	bls.n	8007dcc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dee:	f7fa fa45 	bl	800227c <HAL_GetTick>
 8007df2:	4602      	mov	r2, r0
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d102      	bne.n	8007e04 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dfe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e02:	e043      	b.n	8007e8c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0d2      	beq.n	8007db8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e18:	f003 0308 	and.w	r3, r3, #8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007e20:	2308      	movs	r3, #8
 8007e22:	e033      	b.n	8007e8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2a:	f003 0302 	and.w	r3, r3, #2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007e32:	2302      	movs	r3, #2
 8007e34:	e02a      	b.n	8007e8c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3c:	f003 0320 	and.w	r3, r3, #32
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d017      	beq.n	8007e74 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e44:	2320      	movs	r3, #32
 8007e46:	e021      	b.n	8007e8c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f003 fab1 	bl	800b3b4 <SDMMC_ReadFIFO>
 8007e52:	4602      	mov	r2, r0
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	601a      	str	r2, [r3, #0]
    pData++;
 8007e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5a:	3304      	adds	r3, #4
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e5e:	f7fa fa0d 	bl	800227c <HAL_GetTick>
 8007e62:	4602      	mov	r2, r0
 8007e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6c:	d102      	bne.n	8007e74 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e6e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e72:	e00b      	b.n	8007e8c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e2      	bne.n	8007e48 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a03      	ldr	r2, [pc, #12]	; (8007e94 <SD_SendSDStatus+0x19c>)
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3730      	adds	r7, #48	; 0x30
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	18000f3a 	.word	0x18000f3a

08007e98 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d102      	bne.n	8007eae <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007ea8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eac:	e018      	b.n	8007ee0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb6:	041b      	lsls	r3, r3, #16
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f003 fd64 	bl	800b988 <SDMMC_CmdSendStatus>
 8007ec0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	e009      	b.n	8007ee0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f003 fae3 	bl	800b49e <SDMMC_GetResponse>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2100      	movs	r1, #0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f003 facd 	bl	800b49e <SDMMC_GetResponse>
 8007f04:	4603      	mov	r3, r0
 8007f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f0e:	d102      	bne.n	8007f16 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f10:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f14:	e02f      	b.n	8007f76 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f879 	bl	8008014 <SD_FindSCR>
 8007f22:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	e023      	b.n	8007f76 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d01c      	beq.n	8007f72 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f40:	041b      	lsls	r3, r3, #16
 8007f42:	4619      	mov	r1, r3
 8007f44:	4610      	mov	r0, r2
 8007f46:	f003 fc36 	bl	800b7b6 <SDMMC_CmdAppCommand>
 8007f4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	e00f      	b.n	8007f76 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2102      	movs	r1, #2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f003 fc6d 	bl	800b83c <SDMMC_CmdBusWidth>
 8007f62:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	e003      	b.n	8007f76 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e001      	b.n	8007f76 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f72:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3718      	adds	r7, #24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b086      	sub	sp, #24
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2100      	movs	r1, #0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f003 fa82 	bl	800b49e <SDMMC_GetResponse>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa4:	d102      	bne.n	8007fac <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007fa6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007faa:	e02f      	b.n	800800c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f82e 	bl	8008014 <SD_FindSCR>
 8007fb8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	e023      	b.n	800800c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d01c      	beq.n	8008008 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f003 fbeb 	bl	800b7b6 <SDMMC_CmdAppCommand>
 8007fe0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d001      	beq.n	8007fec <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	e00f      	b.n	800800c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f003 fc22 	bl	800b83c <SDMMC_CmdBusWidth>
 8007ff8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d001      	beq.n	8008004 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	e003      	b.n	800800c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008004:	2300      	movs	r3, #0
 8008006:	e001      	b.n	800800c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008008:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800800c:	4618      	mov	r0, r3
 800800e:	3718      	adds	r7, #24
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08e      	sub	sp, #56	; 0x38
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800801e:	f7fa f92d 	bl	800227c <HAL_GetTick>
 8008022:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008024:	2300      	movs	r3, #0
 8008026:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008028:	2300      	movs	r3, #0
 800802a:	60bb      	str	r3, [r7, #8]
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2108      	movs	r1, #8
 800803a:	4618      	mov	r0, r3
 800803c:	f003 fa6e 	bl	800b51c <SDMMC_CmdBlockLength>
 8008040:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	e0ad      	b.n	80081a8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008054:	041b      	lsls	r3, r3, #16
 8008056:	4619      	mov	r1, r3
 8008058:	4610      	mov	r0, r2
 800805a:	f003 fbac 	bl	800b7b6 <SDMMC_CmdAppCommand>
 800805e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	e09e      	b.n	80081a8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800806a:	f04f 33ff 	mov.w	r3, #4294967295
 800806e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008070:	2308      	movs	r3, #8
 8008072:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008074:	2330      	movs	r3, #48	; 0x30
 8008076:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008078:	2302      	movs	r3, #2
 800807a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800807c:	2300      	movs	r3, #0
 800807e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008080:	2301      	movs	r3, #1
 8008082:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f107 0210 	add.w	r2, r7, #16
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f003 fa18 	bl	800b4c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4618      	mov	r0, r3
 800809a:	f003 fbf2 	bl	800b882 <SDMMC_CmdSendSCR>
 800809e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80080a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d027      	beq.n	80080f6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80080a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a8:	e07e      	b.n	80081a8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d113      	bne.n	80080e0 <SD_FindSCR+0xcc>
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d110      	bne.n	80080e0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f003 f976 	bl	800b3b4 <SDMMC_ReadFIFO>
 80080c8:	4603      	mov	r3, r0
 80080ca:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f003 f96f 	bl	800b3b4 <SDMMC_ReadFIFO>
 80080d6:	4603      	mov	r3, r0
 80080d8:	60fb      	str	r3, [r7, #12]
      index++;
 80080da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080dc:	3301      	adds	r3, #1
 80080de:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080e0:	f7fa f8cc 	bl	800227c <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ee:	d102      	bne.n	80080f6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080f4:	e058      	b.n	80081a8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080fc:	f240 532a 	movw	r3, #1322	; 0x52a
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0d1      	beq.n	80080aa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810c:	f003 0308 	and.w	r3, r3, #8
 8008110:	2b00      	cmp	r3, #0
 8008112:	d005      	beq.n	8008120 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2208      	movs	r2, #8
 800811a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800811c:	2308      	movs	r3, #8
 800811e:	e043      	b.n	80081a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2202      	movs	r2, #2
 8008134:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008136:	2302      	movs	r3, #2
 8008138:	e036      	b.n	80081a8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008140:	f003 0320 	and.w	r3, r3, #32
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2220      	movs	r2, #32
 800814e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008150:	2320      	movs	r3, #32
 8008152:	e029      	b.n	80081a8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a15      	ldr	r2, [pc, #84]	; (80081b0 <SD_FindSCR+0x19c>)
 800815a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	061a      	lsls	r2, r3, #24
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008168:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	0a1b      	lsrs	r3, r3, #8
 800816e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008172:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0e1b      	lsrs	r3, r3, #24
 8008178:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	601a      	str	r2, [r3, #0]
    scr++;
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	3304      	adds	r3, #4
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	061a      	lsls	r2, r3, #24
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008190:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	0a1b      	lsrs	r3, r3, #8
 8008196:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800819a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	0e1b      	lsrs	r3, r3, #24
 80081a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80081a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3738      	adds	r7, #56	; 0x38
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	18000f3a 	.word	0x18000f3a

080081b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	2b1f      	cmp	r3, #31
 80081c8:	d936      	bls.n	8008238 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80081ca:	2300      	movs	r3, #0
 80081cc:	617b      	str	r3, [r7, #20]
 80081ce:	e027      	b.n	8008220 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f003 f8ed 	bl	800b3b4 <SDMMC_ReadFIFO>
 80081da:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	3301      	adds	r3, #1
 80081e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	0a1b      	lsrs	r3, r3, #8
 80081ee:	b2da      	uxtb	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	3301      	adds	r3, #1
 80081f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	0c1b      	lsrs	r3, r3, #16
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	3301      	adds	r3, #1
 8008208:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	0e1b      	lsrs	r3, r3, #24
 800820e:	b2da      	uxtb	r2, r3
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	3301      	adds	r3, #1
 8008218:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	3301      	adds	r3, #1
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2b07      	cmp	r3, #7
 8008224:	d9d4      	bls.n	80081d0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008230:	f1a3 0220 	sub.w	r2, r3, #32
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8008238:	bf00      	nop
 800823a:	3718      	adds	r7, #24
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b086      	sub	sp, #24
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a1b      	ldr	r3, [r3, #32]
 8008252:	2b1f      	cmp	r3, #31
 8008254:	d93a      	bls.n	80082cc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008256:	2300      	movs	r3, #0
 8008258:	617b      	str	r3, [r7, #20]
 800825a:	e02b      	b.n	80082b4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	021a      	lsls	r2, r3, #8
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4313      	orrs	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	3301      	adds	r3, #1
 8008278:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	041a      	lsls	r2, r3, #16
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	4313      	orrs	r3, r2
 8008284:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	3301      	adds	r3, #1
 800828a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	061a      	lsls	r2, r3, #24
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	3301      	adds	r3, #1
 800829c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f107 020c 	add.w	r2, r7, #12
 80082a6:	4611      	mov	r1, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f003 f890 	bl	800b3ce <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	3301      	adds	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b07      	cmp	r3, #7
 80082b8:	d9d0      	bls.n	800825c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	f1a3 0220 	sub.w	r2, r3, #32
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	621a      	str	r2, [r3, #32]
  }
}
 80082cc:	bf00      	nop
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e0f1      	b.n	800851a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a78      	ldr	r2, [pc, #480]	; (8008524 <HAL_SPI_Init+0x200>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d00f      	beq.n	8008366 <HAL_SPI_Init+0x42>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a77      	ldr	r2, [pc, #476]	; (8008528 <HAL_SPI_Init+0x204>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d00a      	beq.n	8008366 <HAL_SPI_Init+0x42>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a75      	ldr	r2, [pc, #468]	; (800852c <HAL_SPI_Init+0x208>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d005      	beq.n	8008366 <HAL_SPI_Init+0x42>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	d901      	bls.n	8008366 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	e0d9      	b.n	800851a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 ff66 	bl	8009238 <SPI_GetPacketSize>
 800836c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a6c      	ldr	r2, [pc, #432]	; (8008524 <HAL_SPI_Init+0x200>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d00c      	beq.n	8008392 <HAL_SPI_Init+0x6e>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a6a      	ldr	r2, [pc, #424]	; (8008528 <HAL_SPI_Init+0x204>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d007      	beq.n	8008392 <HAL_SPI_Init+0x6e>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a69      	ldr	r2, [pc, #420]	; (800852c <HAL_SPI_Init+0x208>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d002      	beq.n	8008392 <HAL_SPI_Init+0x6e>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2b08      	cmp	r3, #8
 8008390:	d811      	bhi.n	80083b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008396:	4a63      	ldr	r2, [pc, #396]	; (8008524 <HAL_SPI_Init+0x200>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d009      	beq.n	80083b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a61      	ldr	r2, [pc, #388]	; (8008528 <HAL_SPI_Init+0x204>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d004      	beq.n	80083b0 <HAL_SPI_Init+0x8c>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a60      	ldr	r2, [pc, #384]	; (800852c <HAL_SPI_Init+0x208>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d104      	bne.n	80083ba <HAL_SPI_Init+0x96>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d901      	bls.n	80083ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e0af      	b.n	800851a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d106      	bne.n	80083d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7f9 fb58 	bl	8001a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0201 	bic.w	r2, r2, #1
 80083ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80083f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008400:	d119      	bne.n	8008436 <HAL_SPI_Init+0x112>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800840a:	d103      	bne.n	8008414 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008410:	2b00      	cmp	r3, #0
 8008412:	d008      	beq.n	8008426 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008418:	2b00      	cmp	r3, #0
 800841a:	d10c      	bne.n	8008436 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008424:	d107      	bne.n	8008436 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008434:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	69da      	ldr	r2, [r3, #28]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	431a      	orrs	r2, r3
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	431a      	orrs	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008448:	ea42 0103 	orr.w	r1, r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008460:	431a      	orrs	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	699b      	ldr	r3, [r3, #24]
 800846c:	431a      	orrs	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	695b      	ldr	r3, [r3, #20]
 8008478:	431a      	orrs	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a1b      	ldr	r3, [r3, #32]
 800847e:	431a      	orrs	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	431a      	orrs	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848a:	431a      	orrs	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008496:	ea42 0103 	orr.w	r1, r2, r3
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d113      	bne.n	80084d6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f022 0201 	bic.w	r2, r2, #1
 80084e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	40013000 	.word	0x40013000
 8008528:	40003800 	.word	0x40003800
 800852c:	40003c00 	.word	0x40003c00

08008530 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	; 0x28
 8008534:	af02      	add	r7, sp, #8
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	603b      	str	r3, [r7, #0]
 800853c:	4613      	mov	r3, r2
 800853e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	3320      	adds	r3, #32
 8008546:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008552:	2b01      	cmp	r3, #1
 8008554:	d101      	bne.n	800855a <HAL_SPI_Transmit+0x2a>
 8008556:	2302      	movs	r3, #2
 8008558:	e1d7      	b.n	800890a <HAL_SPI_Transmit+0x3da>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008562:	f7f9 fe8b 	bl	800227c <HAL_GetTick>
 8008566:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b01      	cmp	r3, #1
 8008572:	d007      	beq.n	8008584 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008574:	2302      	movs	r3, #2
 8008576:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008580:	7efb      	ldrb	r3, [r7, #27]
 8008582:	e1c2      	b.n	800890a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_SPI_Transmit+0x60>
 800858a:	88fb      	ldrh	r3, [r7, #6]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d107      	bne.n	80085a0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800859c:	7efb      	ldrb	r3, [r7, #27]
 800859e:	e1b4      	b.n	800890a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2203      	movs	r2, #3
 80085a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	88fa      	ldrh	r2, [r7, #6]
 80085ba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	88fa      	ldrh	r2, [r7, #6]
 80085c2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2200      	movs	r2, #0
 80085ca:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80085f0:	d107      	bne.n	8008602 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008600:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	4b96      	ldr	r3, [pc, #600]	; (8008864 <HAL_SPI_Transmit+0x334>)
 800860a:	4013      	ands	r3, r2
 800860c:	88f9      	ldrh	r1, [r7, #6]
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	6812      	ldr	r2, [r2, #0]
 8008612:	430b      	orrs	r3, r1
 8008614:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f042 0201 	orr.w	r2, r2, #1
 8008624:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800862e:	d107      	bne.n	8008640 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800863e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	2b0f      	cmp	r3, #15
 8008646:	d947      	bls.n	80086d8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008648:	e03f      	b.n	80086ca <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b02      	cmp	r3, #2
 8008656:	d114      	bne.n	8008682 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	6812      	ldr	r2, [r2, #0]
 8008662:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008668:	1d1a      	adds	r2, r3, #4
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29a      	uxth	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008680:	e023      	b.n	80086ca <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008682:	f7f9 fdfb 	bl	800227c <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	683a      	ldr	r2, [r7, #0]
 800868e:	429a      	cmp	r2, r3
 8008690:	d803      	bhi.n	800869a <HAL_SPI_Transmit+0x16a>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008698:	d102      	bne.n	80086a0 <HAL_SPI_Transmit+0x170>
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d114      	bne.n	80086ca <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 fcfb 	bl	800909c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e11f      	b.n	800890a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d1b9      	bne.n	800864a <HAL_SPI_Transmit+0x11a>
 80086d6:	e0f2      	b.n	80088be <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	2b07      	cmp	r3, #7
 80086de:	f240 80e7 	bls.w	80088b0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086e2:	e05d      	b.n	80087a0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	695b      	ldr	r3, [r3, #20]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d132      	bne.n	8008758 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d918      	bls.n	8008730 <HAL_SPI_Transmit+0x200>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d014      	beq.n	8008730 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6812      	ldr	r2, [r2, #0]
 8008710:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008716:	1d1a      	adds	r2, r3, #4
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008722:	b29b      	uxth	r3, r3
 8008724:	3b02      	subs	r3, #2
 8008726:	b29a      	uxth	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800872e:	e037      	b.n	80087a0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008734:	881a      	ldrh	r2, [r3, #0]
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873e:	1c9a      	adds	r2, r3, #2
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800874a:	b29b      	uxth	r3, r3
 800874c:	3b01      	subs	r3, #1
 800874e:	b29a      	uxth	r2, r3
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008756:	e023      	b.n	80087a0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008758:	f7f9 fd90 	bl	800227c <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	683a      	ldr	r2, [r7, #0]
 8008764:	429a      	cmp	r2, r3
 8008766:	d803      	bhi.n	8008770 <HAL_SPI_Transmit+0x240>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876e:	d102      	bne.n	8008776 <HAL_SPI_Transmit+0x246>
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d114      	bne.n	80087a0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 fc90 	bl	800909c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800879c:	2303      	movs	r3, #3
 800879e:	e0b4      	b.n	800890a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d19b      	bne.n	80086e4 <HAL_SPI_Transmit+0x1b4>
 80087ac:	e087      	b.n	80088be <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695b      	ldr	r3, [r3, #20]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d155      	bne.n	8008868 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d918      	bls.n	80087fa <HAL_SPI_Transmit+0x2ca>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087cc:	2b40      	cmp	r3, #64	; 0x40
 80087ce:	d914      	bls.n	80087fa <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e0:	1d1a      	adds	r2, r3, #4
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b04      	subs	r3, #4
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087f8:	e05a      	b.n	80088b0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008800:	b29b      	uxth	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	d917      	bls.n	8008836 <HAL_SPI_Transmit+0x306>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880a:	2b00      	cmp	r3, #0
 800880c:	d013      	beq.n	8008836 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008812:	881a      	ldrh	r2, [r3, #0]
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881c:	1c9a      	adds	r2, r3, #2
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008828:	b29b      	uxth	r3, r3
 800882a:	3b02      	subs	r3, #2
 800882c:	b29a      	uxth	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008834:	e03c      	b.n	80088b0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3320      	adds	r3, #32
 8008840:	7812      	ldrb	r2, [r2, #0]
 8008842:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008848:	1c5a      	adds	r2, r3, #1
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008854:	b29b      	uxth	r3, r3
 8008856:	3b01      	subs	r3, #1
 8008858:	b29a      	uxth	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008860:	e026      	b.n	80088b0 <HAL_SPI_Transmit+0x380>
 8008862:	bf00      	nop
 8008864:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008868:	f7f9 fd08 	bl	800227c <HAL_GetTick>
 800886c:	4602      	mov	r2, r0
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	429a      	cmp	r2, r3
 8008876:	d803      	bhi.n	8008880 <HAL_SPI_Transmit+0x350>
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d102      	bne.n	8008886 <HAL_SPI_Transmit+0x356>
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d114      	bne.n	80088b0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 fc08 	bl	800909c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e02c      	b.n	800890a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f47f af78 	bne.w	80087ae <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	9300      	str	r3, [sp, #0]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2200      	movs	r2, #0
 80088c6:	2108      	movs	r1, #8
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	f000 fc87 	bl	80091dc <SPI_WaitOnFlagUntilTimeout>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088da:	f043 0220 	orr.w	r2, r3, #32
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 fbd9 	bl	800909c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008904:	2301      	movs	r3, #1
 8008906:	e000      	b.n	800890a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008908:	7efb      	ldrb	r3, [r7, #27]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3720      	adds	r7, #32
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop

08008914 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b08a      	sub	sp, #40	; 0x28
 8008918:	af02      	add	r7, sp, #8
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	4613      	mov	r3, r2
 8008922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008924:	2300      	movs	r3, #0
 8008926:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3330      	adds	r3, #48	; 0x30
 800892e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008938:	d112      	bne.n	8008960 <HAL_SPI_Receive+0x4c>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10e      	bne.n	8008960 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2204      	movs	r2, #4
 8008946:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800894a:	88fa      	ldrh	r2, [r7, #6]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	68f8      	ldr	r0, [r7, #12]
 8008958:	f000 f978 	bl	8008c4c <HAL_SPI_TransmitReceive>
 800895c:	4603      	mov	r3, r0
 800895e:	e16f      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_SPI_Receive+0x5a>
 800896a:	2302      	movs	r3, #2
 800896c:	e168      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008976:	f7f9 fc81 	bl	800227c <HAL_GetTick>
 800897a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	d007      	beq.n	8008998 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008988:	2302      	movs	r3, #2
 800898a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008994:	7ffb      	ldrb	r3, [r7, #31]
 8008996:	e153      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d002      	beq.n	80089a4 <HAL_SPI_Receive+0x90>
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d107      	bne.n	80089b4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 80089a4:	2301      	movs	r3, #1
 80089a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80089b0:	7ffb      	ldrb	r3, [r7, #31]
 80089b2:	e145      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2204      	movs	r2, #4
 80089b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	68ba      	ldr	r2, [r7, #8]
 80089c8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	88fa      	ldrh	r2, [r7, #6]
 80089ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	88fa      	ldrh	r2, [r7, #6]
 80089d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2200      	movs	r2, #0
 80089f4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008a04:	d107      	bne.n	8008a16 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a14:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685a      	ldr	r2, [r3, #4]
 8008a1c:	4b8a      	ldr	r3, [pc, #552]	; (8008c48 <HAL_SPI_Receive+0x334>)
 8008a1e:	4013      	ands	r3, r2
 8008a20:	88f9      	ldrh	r1, [r7, #6]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	430b      	orrs	r3, r1
 8008a28:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f042 0201 	orr.w	r2, r2, #1
 8008a38:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a42:	d107      	bne.n	8008a54 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	2b0f      	cmp	r3, #15
 8008a5a:	d948      	bls.n	8008aee <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008a5c:	e040      	b.n	8008ae0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695a      	ldr	r2, [r3, #20]
 8008a64:	f248 0308 	movw	r3, #32776	; 0x8008
 8008a68:	4013      	ands	r3, r2
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d014      	beq.n	8008a98 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a78:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a7e:	1d1a      	adds	r2, r3, #4
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a96:	e023      	b.n	8008ae0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a98:	f7f9 fbf0 	bl	800227c <HAL_GetTick>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	1ad3      	subs	r3, r2, r3
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d803      	bhi.n	8008ab0 <HAL_SPI_Receive+0x19c>
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aae:	d102      	bne.n	8008ab6 <HAL_SPI_Receive+0x1a2>
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d114      	bne.n	8008ae0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 faf0 	bl	800909c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e0af      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1b8      	bne.n	8008a5e <HAL_SPI_Receive+0x14a>
 8008aec:	e095      	b.n	8008c1a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	2b07      	cmp	r3, #7
 8008af4:	f240 808b 	bls.w	8008c0e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008af8:	e03f      	b.n	8008b7a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	f003 0301 	and.w	r3, r3, #1
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d114      	bne.n	8008b32 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	8812      	ldrh	r2, [r2, #0]
 8008b10:	b292      	uxth	r2, r2
 8008b12:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b18:	1c9a      	adds	r2, r3, #2
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b30:	e023      	b.n	8008b7a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b32:	f7f9 fba3 	bl	800227c <HAL_GetTick>
 8008b36:	4602      	mov	r2, r0
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	1ad3      	subs	r3, r2, r3
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	429a      	cmp	r2, r3
 8008b40:	d803      	bhi.n	8008b4a <HAL_SPI_Receive+0x236>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b48:	d102      	bne.n	8008b50 <HAL_SPI_Receive+0x23c>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d114      	bne.n	8008b7a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b50:	68f8      	ldr	r0, [r7, #12]
 8008b52:	f000 faa3 	bl	800909c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e062      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1b9      	bne.n	8008afa <HAL_SPI_Receive+0x1e6>
 8008b86:	e048      	b.n	8008c1a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	f003 0301 	and.w	r3, r3, #1
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d117      	bne.n	8008bc6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ba2:	7812      	ldrb	r2, [r2, #0]
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bac:	1c5a      	adds	r2, r3, #1
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008bc4:	e023      	b.n	8008c0e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bc6:	f7f9 fb59 	bl	800227c <HAL_GetTick>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	1ad3      	subs	r3, r2, r3
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d803      	bhi.n	8008bde <HAL_SPI_Receive+0x2ca>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bdc:	d102      	bne.n	8008be4 <HAL_SPI_Receive+0x2d0>
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d114      	bne.n	8008c0e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 fa59 	bl	800909c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	e018      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1b6      	bne.n	8008b88 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f000 fa3e 	bl	800909c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d001      	beq.n	8008c3e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8008c3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}
 8008c48:	ffff0000 	.word	0xffff0000

08008c4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08e      	sub	sp, #56	; 0x38
 8008c50:	af02      	add	r7, sp, #8
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3320      	adds	r3, #32
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3330      	adds	r3, #48	; 0x30
 8008c6e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d101      	bne.n	8008c7e <HAL_SPI_TransmitReceive+0x32>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e209      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c86:	f7f9 faf9 	bl	800227c <HAL_GetTick>
 8008c8a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008c8c:	887b      	ldrh	r3, [r7, #2]
 8008c8e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008c90:	887b      	ldrh	r3, [r7, #2]
 8008c92:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c9a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ca2:	7efb      	ldrb	r3, [r7, #27]
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d014      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x86>
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cae:	d106      	bne.n	8008cbe <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d102      	bne.n	8008cbe <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008cb8:	7efb      	ldrb	r3, [r7, #27]
 8008cba:	2b04      	cmp	r3, #4
 8008cbc:	d009      	beq.n	8008cd2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008ccc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cd0:	e1df      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x98>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d002      	beq.n	8008ce4 <HAL_SPI_TransmitReceive+0x98>
 8008cde:	887b      	ldrh	r3, [r7, #2]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d109      	bne.n	8008cf8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008cf2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cf6:	e1cc      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	d003      	beq.n	8008d0c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2205      	movs	r2, #5
 8008d08:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	887a      	ldrh	r2, [r7, #2]
 8008d1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	887a      	ldrh	r2, [r7, #2]
 8008d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	887a      	ldrh	r2, [r7, #2]
 8008d34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	887a      	ldrh	r2, [r7, #2]
 8008d3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	685a      	ldr	r2, [r3, #4]
 8008d52:	4b82      	ldr	r3, [pc, #520]	; (8008f5c <HAL_SPI_TransmitReceive+0x310>)
 8008d54:	4013      	ands	r3, r2
 8008d56:	8879      	ldrh	r1, [r7, #2]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	6812      	ldr	r2, [r2, #0]
 8008d5c:	430b      	orrs	r3, r1
 8008d5e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d78:	d107      	bne.n	8008d8a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	2b0f      	cmp	r3, #15
 8008d90:	d970      	bls.n	8008e74 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d92:	e068      	b.n	8008e66 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d11a      	bne.n	8008dd8 <HAL_SPI_TransmitReceive+0x18c>
 8008da2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d017      	beq.n	8008dd8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008db8:	1d1a      	adds	r2, r3, #4
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	695a      	ldr	r2, [r3, #20]
 8008dde:	f248 0308 	movw	r3, #32776	; 0x8008
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d01a      	beq.n	8008e1e <HAL_SPI_TransmitReceive+0x1d2>
 8008de8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d017      	beq.n	8008e1e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008df6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008df8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008e1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e1e:	f7f9 fa2d 	bl	800227c <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d803      	bhi.n	8008e36 <HAL_SPI_TransmitReceive+0x1ea>
 8008e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e34:	d102      	bne.n	8008e3c <HAL_SPI_TransmitReceive+0x1f0>
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d114      	bne.n	8008e66 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f000 f92d 	bl	800909c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008e62:	2303      	movs	r3, #3
 8008e64:	e115      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e66:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d193      	bne.n	8008d94 <HAL_SPI_TransmitReceive+0x148>
 8008e6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d190      	bne.n	8008d94 <HAL_SPI_TransmitReceive+0x148>
 8008e72:	e0e7      	b.n	8009044 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b07      	cmp	r3, #7
 8008e7a:	f240 80dd 	bls.w	8009038 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e7e:	e066      	b.n	8008f4e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f003 0302 	and.w	r3, r3, #2
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d119      	bne.n	8008ec2 <HAL_SPI_TransmitReceive+0x276>
 8008e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d016      	beq.n	8008ec2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e98:	881a      	ldrh	r2, [r3, #0]
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea2:	1c9a      	adds	r2, r3, #2
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	b29a      	uxth	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ec0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d11a      	bne.n	8008f06 <HAL_SPI_TransmitReceive+0x2ba>
 8008ed0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d017      	beq.n	8008f06 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	b292      	uxth	r2, r2
 8008ee0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ee6:	1c9a      	adds	r2, r3, #2
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f04:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f06:	f7f9 f9b9 	bl	800227c <HAL_GetTick>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	1ad3      	subs	r3, r2, r3
 8008f10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d803      	bhi.n	8008f1e <HAL_SPI_TransmitReceive+0x2d2>
 8008f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1c:	d102      	bne.n	8008f24 <HAL_SPI_TransmitReceive+0x2d8>
 8008f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d114      	bne.n	8008f4e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f8b9 	bl	800909c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e0a1      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d195      	bne.n	8008e80 <HAL_SPI_TransmitReceive+0x234>
 8008f54:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d192      	bne.n	8008e80 <HAL_SPI_TransmitReceive+0x234>
 8008f5a:	e073      	b.n	8009044 <HAL_SPI_TransmitReceive+0x3f8>
 8008f5c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d11b      	bne.n	8008fa6 <HAL_SPI_TransmitReceive+0x35a>
 8008f6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d018      	beq.n	8008fa6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3320      	adds	r3, #32
 8008f7e:	7812      	ldrb	r2, [r2, #0]
 8008f80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b29a      	uxth	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d11d      	bne.n	8008ff0 <HAL_SPI_TransmitReceive+0x3a4>
 8008fb4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d01a      	beq.n	8008ff0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fc6:	7812      	ldrb	r2, [r2, #0]
 8008fc8:	b2d2      	uxtb	r2, r2
 8008fca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	1c5a      	adds	r2, r3, #1
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fee:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ff0:	f7f9 f944 	bl	800227c <HAL_GetTick>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	1ad3      	subs	r3, r2, r3
 8008ffa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d803      	bhi.n	8009008 <HAL_SPI_TransmitReceive+0x3bc>
 8009000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009006:	d102      	bne.n	800900e <HAL_SPI_TransmitReceive+0x3c2>
 8009008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800900a:	2b00      	cmp	r3, #0
 800900c:	d114      	bne.n	8009038 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f844 	bl	800909c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009022:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e02c      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8009038:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800903a:	2b00      	cmp	r3, #0
 800903c:	d190      	bne.n	8008f60 <HAL_SPI_TransmitReceive+0x314>
 800903e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009040:	2b00      	cmp	r3, #0
 8009042:	d18d      	bne.n	8008f60 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	2200      	movs	r2, #0
 800904c:	2108      	movs	r1, #8
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 f8c4 	bl	80091dc <SPI_WaitOnFlagUntilTimeout>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009060:	f043 0220 	orr.w	r2, r3, #32
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f816 	bl	800909c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e001      	b.n	8009092 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800908e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009092:	4618      	mov	r0, r3
 8009094:	3730      	adds	r7, #48	; 0x30
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop

0800909c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	695b      	ldr	r3, [r3, #20]
 80090aa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0208 	orr.w	r2, r2, #8
 80090ba:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0210 	orr.w	r2, r2, #16
 80090ca:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f022 0201 	bic.w	r2, r2, #1
 80090da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	6919      	ldr	r1, [r3, #16]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	4b3c      	ldr	r3, [pc, #240]	; (80091d8 <SPI_CloseTransfer+0x13c>)
 80090e8:	400b      	ands	r3, r1
 80090ea:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689a      	ldr	r2, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80090fa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009102:	b2db      	uxtb	r3, r3
 8009104:	2b04      	cmp	r3, #4
 8009106:	d014      	beq.n	8009132 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f003 0320 	and.w	r3, r3, #32
 800910e:	2b00      	cmp	r3, #0
 8009110:	d00f      	beq.n	8009132 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	699a      	ldr	r2, [r3, #24]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f042 0220 	orr.w	r2, r2, #32
 8009130:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009138:	b2db      	uxtb	r3, r3
 800913a:	2b03      	cmp	r3, #3
 800913c:	d014      	beq.n	8009168 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00f      	beq.n	8009168 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914e:	f043 0204 	orr.w	r2, r3, #4
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009166:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00f      	beq.n	8009192 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009178:	f043 0201 	orr.w	r2, r3, #1
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	699a      	ldr	r2, [r3, #24]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009190:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00f      	beq.n	80091bc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a2:	f043 0208 	orr.w	r2, r3, #8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	699a      	ldr	r2, [r3, #24]
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091ba:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80091cc:	bf00      	nop
 80091ce:	3714      	adds	r7, #20
 80091d0:	46bd      	mov	sp, r7
 80091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d6:	4770      	bx	lr
 80091d8:	fffffc90 	.word	0xfffffc90

080091dc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	603b      	str	r3, [r7, #0]
 80091e8:	4613      	mov	r3, r2
 80091ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091ec:	e010      	b.n	8009210 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ee:	f7f9 f845 	bl	800227c <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d803      	bhi.n	8009206 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009204:	d102      	bne.n	800920c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d101      	bne.n	8009210 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800920c:	2303      	movs	r3, #3
 800920e:	e00f      	b.n	8009230 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	695a      	ldr	r2, [r3, #20]
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	4013      	ands	r3, r2
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	429a      	cmp	r2, r3
 800921e:	bf0c      	ite	eq
 8009220:	2301      	moveq	r3, #1
 8009222:	2300      	movne	r3, #0
 8009224:	b2db      	uxtb	r3, r3
 8009226:	461a      	mov	r2, r3
 8009228:	79fb      	ldrb	r3, [r7, #7]
 800922a:	429a      	cmp	r2, r3
 800922c:	d0df      	beq.n	80091ee <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800922e:	2300      	movs	r3, #0
}
 8009230:	4618      	mov	r0, r3
 8009232:	3710      	adds	r7, #16
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009244:	095b      	lsrs	r3, r3, #5
 8009246:	3301      	adds	r3, #1
 8009248:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	3301      	adds	r3, #1
 8009250:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	3307      	adds	r3, #7
 8009256:	08db      	lsrs	r3, r3, #3
 8009258:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009262:	4618      	mov	r0, r3
 8009264:	3714      	adds	r7, #20
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b082      	sub	sp, #8
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e049      	b.n	8009314 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7f8 fe39 	bl	8001f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2202      	movs	r2, #2
 800929e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	3304      	adds	r3, #4
 80092aa:	4619      	mov	r1, r3
 80092ac:	4610      	mov	r0, r2
 80092ae:	f000 f987 	bl	80095c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	f003 0302 	and.w	r3, r3, #2
 800932e:	2b02      	cmp	r3, #2
 8009330:	d122      	bne.n	8009378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b02      	cmp	r3, #2
 800933e:	d11b      	bne.n	8009378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f06f 0202 	mvn.w	r2, #2
 8009348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2201      	movs	r2, #1
 800934e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	f003 0303 	and.w	r3, r3, #3
 800935a:	2b00      	cmp	r3, #0
 800935c:	d003      	beq.n	8009366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f90f 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 8009364:	e005      	b.n	8009372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 f901 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f912 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	f003 0304 	and.w	r3, r3, #4
 8009382:	2b04      	cmp	r3, #4
 8009384:	d122      	bne.n	80093cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b04      	cmp	r3, #4
 8009392:	d11b      	bne.n	80093cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f06f 0204 	mvn.w	r2, #4
 800939c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2202      	movs	r2, #2
 80093a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8e5 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 80093b8:	e005      	b.n	80093c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f8d7 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f8e8 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f003 0308 	and.w	r3, r3, #8
 80093d6:	2b08      	cmp	r3, #8
 80093d8:	d122      	bne.n	8009420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f003 0308 	and.w	r3, r3, #8
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	d11b      	bne.n	8009420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f06f 0208 	mvn.w	r2, #8
 80093f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2204      	movs	r2, #4
 80093f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	69db      	ldr	r3, [r3, #28]
 80093fe:	f003 0303 	and.w	r3, r3, #3
 8009402:	2b00      	cmp	r3, #0
 8009404:	d003      	beq.n	800940e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f8bb 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 800940c:	e005      	b.n	800941a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f000 f8ad 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f8be 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2200      	movs	r2, #0
 800941e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	f003 0310 	and.w	r3, r3, #16
 800942a:	2b10      	cmp	r3, #16
 800942c:	d122      	bne.n	8009474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	f003 0310 	and.w	r3, r3, #16
 8009438:	2b10      	cmp	r3, #16
 800943a:	d11b      	bne.n	8009474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f06f 0210 	mvn.w	r2, #16
 8009444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2208      	movs	r2, #8
 800944a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	69db      	ldr	r3, [r3, #28]
 8009452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009456:	2b00      	cmp	r3, #0
 8009458:	d003      	beq.n	8009462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f891 	bl	8009582 <HAL_TIM_IC_CaptureCallback>
 8009460:	e005      	b.n	800946e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f883 	bl	800956e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f894 	bl	8009596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	f003 0301 	and.w	r3, r3, #1
 800947e:	2b01      	cmp	r3, #1
 8009480:	d10e      	bne.n	80094a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b01      	cmp	r3, #1
 800948e:	d107      	bne.n	80094a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f06f 0201 	mvn.w	r2, #1
 8009498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f85d 	bl	800955a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094aa:	2b80      	cmp	r3, #128	; 0x80
 80094ac:	d10e      	bne.n	80094cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b8:	2b80      	cmp	r3, #128	; 0x80
 80094ba:	d107      	bne.n	80094cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f000 f9ac 	bl	8009824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094da:	d10e      	bne.n	80094fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e6:	2b80      	cmp	r3, #128	; 0x80
 80094e8:	d107      	bne.n	80094fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f99f 	bl	8009838 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009504:	2b40      	cmp	r3, #64	; 0x40
 8009506:	d10e      	bne.n	8009526 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009512:	2b40      	cmp	r3, #64	; 0x40
 8009514:	d107      	bne.n	8009526 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800951e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f842 	bl	80095aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	691b      	ldr	r3, [r3, #16]
 800952c:	f003 0320 	and.w	r3, r3, #32
 8009530:	2b20      	cmp	r3, #32
 8009532:	d10e      	bne.n	8009552 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0320 	and.w	r3, r3, #32
 800953e:	2b20      	cmp	r3, #32
 8009540:	d107      	bne.n	8009552 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f06f 0220 	mvn.w	r2, #32
 800954a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f95f 	bl	8009810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009552:	bf00      	nop
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800956e:	b480      	push	{r7}
 8009570:	b083      	sub	sp, #12
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800958a:	bf00      	nop
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095b2:	bf00      	nop
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a40      	ldr	r2, [pc, #256]	; (80096d4 <TIM_Base_SetConfig+0x114>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d013      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095de:	d00f      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a3d      	ldr	r2, [pc, #244]	; (80096d8 <TIM_Base_SetConfig+0x118>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d00b      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a3c      	ldr	r2, [pc, #240]	; (80096dc <TIM_Base_SetConfig+0x11c>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d007      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a3b      	ldr	r2, [pc, #236]	; (80096e0 <TIM_Base_SetConfig+0x120>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d003      	beq.n	8009600 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a3a      	ldr	r2, [pc, #232]	; (80096e4 <TIM_Base_SetConfig+0x124>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d108      	bne.n	8009612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	685b      	ldr	r3, [r3, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2f      	ldr	r2, [pc, #188]	; (80096d4 <TIM_Base_SetConfig+0x114>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01f      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009620:	d01b      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a2c      	ldr	r2, [pc, #176]	; (80096d8 <TIM_Base_SetConfig+0x118>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d017      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2b      	ldr	r2, [pc, #172]	; (80096dc <TIM_Base_SetConfig+0x11c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a2a      	ldr	r2, [pc, #168]	; (80096e0 <TIM_Base_SetConfig+0x120>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a29      	ldr	r2, [pc, #164]	; (80096e4 <TIM_Base_SetConfig+0x124>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a28      	ldr	r2, [pc, #160]	; (80096e8 <TIM_Base_SetConfig+0x128>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a27      	ldr	r2, [pc, #156]	; (80096ec <TIM_Base_SetConfig+0x12c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0x9a>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a26      	ldr	r2, [pc, #152]	; (80096f0 <TIM_Base_SetConfig+0x130>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a10      	ldr	r2, [pc, #64]	; (80096d4 <TIM_Base_SetConfig+0x114>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d00f      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a12      	ldr	r2, [pc, #72]	; (80096e4 <TIM_Base_SetConfig+0x124>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00b      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <TIM_Base_SetConfig+0x128>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d007      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a10      	ldr	r2, [pc, #64]	; (80096ec <TIM_Base_SetConfig+0x12c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d003      	beq.n	80096b8 <TIM_Base_SetConfig+0xf8>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a0f      	ldr	r2, [pc, #60]	; (80096f0 <TIM_Base_SetConfig+0x130>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d103      	bne.n	80096c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2201      	movs	r2, #1
 80096c4:	615a      	str	r2, [r3, #20]
}
 80096c6:	bf00      	nop
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40010400 	.word	0x40010400
 80096e8:	40014000 	.word	0x40014000
 80096ec:	40014400 	.word	0x40014400
 80096f0:	40014800 	.word	0x40014800

080096f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009704:	2b01      	cmp	r3, #1
 8009706:	d101      	bne.n	800970c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009708:	2302      	movs	r3, #2
 800970a:	e06d      	b.n	80097e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a30      	ldr	r2, [pc, #192]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d004      	beq.n	8009740 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a2f      	ldr	r2, [pc, #188]	; (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d108      	bne.n	8009752 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009746:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	68fa      	ldr	r2, [r7, #12]
 800974e:	4313      	orrs	r3, r2
 8009750:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009758:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	68fa      	ldr	r2, [r7, #12]
 8009760:	4313      	orrs	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a20      	ldr	r2, [pc, #128]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d022      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800977e:	d01d      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4a1d      	ldr	r2, [pc, #116]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009786:	4293      	cmp	r3, r2
 8009788:	d018      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1c      	ldr	r2, [pc, #112]	; (8009800 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d013      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a1a      	ldr	r2, [pc, #104]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00e      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d009      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a16      	ldr	r2, [pc, #88]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d004      	beq.n	80097bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a15      	ldr	r2, [pc, #84]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d10c      	bne.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2201      	movs	r2, #1
 80097da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097e6:	2300      	movs	r3, #0
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400
 80097fc:	40000400 	.word	0x40000400
 8009800:	40000800 	.word	0x40000800
 8009804:	40000c00 	.word	0x40000c00
 8009808:	40001800 	.word	0x40001800
 800980c:	40014000 	.word	0x40014000

08009810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800982c:	bf00      	nop
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e042      	b.n	80098e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009864:	2b00      	cmp	r3, #0
 8009866:	d106      	bne.n	8009876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7f8 fbbf 	bl	8001ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2224      	movs	r2, #36	; 0x24
 800987a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f022 0201 	bic.w	r2, r2, #1
 800988c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fc80 	bl	800a194 <UART_SetConfig>
 8009894:	4603      	mov	r3, r0
 8009896:	2b01      	cmp	r3, #1
 8009898:	d101      	bne.n	800989e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e022      	b.n	80098e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f001 f9dc 	bl	800ac64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0201 	orr.w	r2, r2, #1
 80098da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fa63 	bl	800ada8 <UART_CheckIdleState>
 80098e2:	4603      	mov	r3, r0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b08a      	sub	sp, #40	; 0x28
 80098f0:	af02      	add	r7, sp, #8
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009902:	2b20      	cmp	r3, #32
 8009904:	f040 8083 	bne.w	8009a0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d002      	beq.n	8009914 <HAL_UART_Transmit+0x28>
 800990e:	88fb      	ldrh	r3, [r7, #6]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d101      	bne.n	8009918 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e07b      	b.n	8009a10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <HAL_UART_Transmit+0x3a>
 8009922:	2302      	movs	r3, #2
 8009924:	e074      	b.n	8009a10 <HAL_UART_Transmit+0x124>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2221      	movs	r2, #33	; 0x21
 800993a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800993e:	f7f8 fc9d 	bl	800227c <HAL_GetTick>
 8009942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	88fa      	ldrh	r2, [r7, #6]
 8009948:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	88fa      	ldrh	r2, [r7, #6]
 8009950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800995c:	d108      	bne.n	8009970 <HAL_UART_Transmit+0x84>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	691b      	ldr	r3, [r3, #16]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d104      	bne.n	8009970 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009966:	2300      	movs	r3, #0
 8009968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	61bb      	str	r3, [r7, #24]
 800996e:	e003      	b.n	8009978 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009980:	e02c      	b.n	80099dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	2200      	movs	r2, #0
 800998a:	2180      	movs	r1, #128	; 0x80
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f001 fa56 	bl	800ae3e <UART_WaitOnFlagUntilTimeout>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009998:	2303      	movs	r3, #3
 800999a:	e039      	b.n	8009a10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d10b      	bne.n	80099ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	881b      	ldrh	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	3302      	adds	r3, #2
 80099b6:	61bb      	str	r3, [r7, #24]
 80099b8:	e007      	b.n	80099ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	781a      	ldrb	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	3301      	adds	r3, #1
 80099c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b01      	subs	r3, #1
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1cc      	bne.n	8009982 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	2200      	movs	r2, #0
 80099f0:	2140      	movs	r1, #64	; 0x40
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f001 fa23 	bl	800ae3e <UART_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d001      	beq.n	8009a02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80099fe:	2303      	movs	r3, #3
 8009a00:	e006      	b.n	8009a10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2220      	movs	r2, #32
 8009a06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	e000      	b.n	8009a10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009a0e:	2302      	movs	r3, #2
  }
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3720      	adds	r7, #32
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b0ba      	sub	sp, #232	; 0xe8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	69db      	ldr	r3, [r3, #28]
 8009a26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009a3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a42:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a46:	4013      	ands	r3, r2
 8009a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d11b      	bne.n	8009a8c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d015      	beq.n	8009a8c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a64:	f003 0320 	and.w	r3, r3, #32
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d105      	bne.n	8009a78 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d009      	beq.n	8009a8c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 835a 	beq.w	800a136 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	4798      	blx	r3
      }
      return;
 8009a8a:	e354      	b.n	800a136 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 811f 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a9a:	4b8b      	ldr	r3, [pc, #556]	; (8009cc8 <HAL_UART_IRQHandler+0x2b0>)
 8009a9c:	4013      	ands	r3, r2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d106      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009aa2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009aa6:	4b89      	ldr	r3, [pc, #548]	; (8009ccc <HAL_UART_IRQHandler+0x2b4>)
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 8112 	beq.w	8009cd4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab4:	f003 0301 	and.w	r3, r3, #1
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d011      	beq.n	8009ae0 <HAL_UART_IRQHandler+0xc8>
 8009abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00b      	beq.n	8009ae0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2201      	movs	r2, #1
 8009ace:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad6:	f043 0201 	orr.w	r2, r3, #1
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d011      	beq.n	8009b10 <HAL_UART_IRQHandler+0xf8>
 8009aec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00b      	beq.n	8009b10 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2202      	movs	r2, #2
 8009afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b06:	f043 0204 	orr.w	r2, r3, #4
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b14:	f003 0304 	and.w	r3, r3, #4
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d011      	beq.n	8009b40 <HAL_UART_IRQHandler+0x128>
 8009b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b20:	f003 0301 	and.w	r3, r3, #1
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d00b      	beq.n	8009b40 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2204      	movs	r2, #4
 8009b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b36:	f043 0202 	orr.w	r2, r3, #2
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b44:	f003 0308 	and.w	r3, r3, #8
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d017      	beq.n	8009b7c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b50:	f003 0320 	and.w	r3, r3, #32
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d105      	bne.n	8009b64 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b58:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b5c:	4b5a      	ldr	r3, [pc, #360]	; (8009cc8 <HAL_UART_IRQHandler+0x2b0>)
 8009b5e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d00b      	beq.n	8009b7c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2208      	movs	r2, #8
 8009b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b72:	f043 0208 	orr.w	r2, r3, #8
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d012      	beq.n	8009bae <HAL_UART_IRQHandler+0x196>
 8009b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00c      	beq.n	8009bae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba4:	f043 0220 	orr.w	r2, r3, #32
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	f000 82c0 	beq.w	800a13a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bbe:	f003 0320 	and.w	r3, r3, #32
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d013      	beq.n	8009bee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d105      	bne.n	8009bde <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009bd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d007      	beq.n	8009bee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bf4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c02:	2b40      	cmp	r3, #64	; 0x40
 8009c04:	d005      	beq.n	8009c12 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009c0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d04f      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 f9dc 	bl	800afd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b40      	cmp	r3, #64	; 0x40
 8009c24:	d141      	bne.n	8009caa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	3308      	adds	r3, #8
 8009c2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3308      	adds	r3, #8
 8009c4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1d9      	bne.n	8009c26 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d013      	beq.n	8009ca2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c7e:	4a14      	ldr	r2, [pc, #80]	; (8009cd0 <HAL_UART_IRQHandler+0x2b8>)
 8009c80:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7f8 ff62 	bl	8002b50 <HAL_DMA_Abort_IT>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d017      	beq.n	8009cc2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009c9c:	4610      	mov	r0, r2
 8009c9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca0:	e00f      	b.n	8009cc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fa60 	bl	800a168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ca8:	e00b      	b.n	8009cc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 fa5c 	bl	800a168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cb0:	e007      	b.n	8009cc2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fa58 	bl	800a168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009cc0:	e23b      	b.n	800a13a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc2:	bf00      	nop
    return;
 8009cc4:	e239      	b.n	800a13a <HAL_UART_IRQHandler+0x722>
 8009cc6:	bf00      	nop
 8009cc8:	10000001 	.word	0x10000001
 8009ccc:	04000120 	.word	0x04000120
 8009cd0:	0800b09d 	.word	0x0800b09d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	f040 81ce 	bne.w	800a07a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce2:	f003 0310 	and.w	r3, r3, #16
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f000 81c7 	beq.w	800a07a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cf0:	f003 0310 	and.w	r3, r3, #16
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	f000 81c0 	beq.w	800a07a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2210      	movs	r2, #16
 8009d00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	689b      	ldr	r3, [r3, #8]
 8009d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d0c:	2b40      	cmp	r3, #64	; 0x40
 8009d0e:	f040 813b 	bne.w	8009f88 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a8b      	ldr	r2, [pc, #556]	; (8009f48 <HAL_UART_IRQHandler+0x530>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d059      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a89      	ldr	r2, [pc, #548]	; (8009f4c <HAL_UART_IRQHandler+0x534>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d053      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a87      	ldr	r2, [pc, #540]	; (8009f50 <HAL_UART_IRQHandler+0x538>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d04d      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4a85      	ldr	r2, [pc, #532]	; (8009f54 <HAL_UART_IRQHandler+0x53c>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d047      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a83      	ldr	r2, [pc, #524]	; (8009f58 <HAL_UART_IRQHandler+0x540>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d041      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a81      	ldr	r2, [pc, #516]	; (8009f5c <HAL_UART_IRQHandler+0x544>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d03b      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a7f      	ldr	r2, [pc, #508]	; (8009f60 <HAL_UART_IRQHandler+0x548>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d035      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a7d      	ldr	r2, [pc, #500]	; (8009f64 <HAL_UART_IRQHandler+0x54c>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d02f      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a7b      	ldr	r2, [pc, #492]	; (8009f68 <HAL_UART_IRQHandler+0x550>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d029      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a79      	ldr	r2, [pc, #484]	; (8009f6c <HAL_UART_IRQHandler+0x554>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d023      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a77      	ldr	r2, [pc, #476]	; (8009f70 <HAL_UART_IRQHandler+0x558>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d01d      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a75      	ldr	r2, [pc, #468]	; (8009f74 <HAL_UART_IRQHandler+0x55c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d017      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a73      	ldr	r2, [pc, #460]	; (8009f78 <HAL_UART_IRQHandler+0x560>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d011      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a71      	ldr	r2, [pc, #452]	; (8009f7c <HAL_UART_IRQHandler+0x564>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00b      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a6f      	ldr	r2, [pc, #444]	; (8009f80 <HAL_UART_IRQHandler+0x568>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d005      	beq.n	8009dd2 <HAL_UART_IRQHandler+0x3ba>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a6d      	ldr	r2, [pc, #436]	; (8009f84 <HAL_UART_IRQHandler+0x56c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d105      	bne.n	8009dde <HAL_UART_IRQHandler+0x3c6>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	e004      	b.n	8009de8 <HAL_UART_IRQHandler+0x3d0>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f000 81a4 	beq.w	800a13e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e00:	429a      	cmp	r2, r3
 8009e02:	f080 819c 	bcs.w	800a13e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e14:	69db      	ldr	r3, [r3, #28]
 8009e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e1a:	f000 8086 	beq.w	8009f2a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009e2a:	e853 3f00 	ldrex	r3, [r3]
 8009e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e4c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e50:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e54:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d1da      	bne.n	8009e1e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	3308      	adds	r3, #8
 8009e6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e7a:	f023 0301 	bic.w	r3, r3, #1
 8009e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3308      	adds	r3, #8
 8009e88:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e90:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e92:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e94:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e98:	e841 2300 	strex	r3, r2, [r1]
 8009e9c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d1e1      	bne.n	8009e68 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	3308      	adds	r3, #8
 8009eaa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009eae:	e853 3f00 	ldrex	r3, [r3]
 8009eb2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	3308      	adds	r3, #8
 8009ec4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009ec8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009eca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ecc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009ece:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009ed0:	e841 2300 	strex	r3, r2, [r1]
 8009ed4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009ed6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1e3      	bne.n	8009ea4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2220      	movs	r2, #32
 8009ee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ef2:	e853 3f00 	ldrex	r3, [r3]
 8009ef6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009efa:	f023 0310 	bic.w	r3, r3, #16
 8009efe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	461a      	mov	r2, r3
 8009f08:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f0c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f0e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f10:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f14:	e841 2300 	strex	r3, r2, [r1]
 8009f18:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d1e4      	bne.n	8009eea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7f8 faf5 	bl	8002514 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f91c 	bl	800a17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f44:	e0fb      	b.n	800a13e <HAL_UART_IRQHandler+0x726>
 8009f46:	bf00      	nop
 8009f48:	40020010 	.word	0x40020010
 8009f4c:	40020028 	.word	0x40020028
 8009f50:	40020040 	.word	0x40020040
 8009f54:	40020058 	.word	0x40020058
 8009f58:	40020070 	.word	0x40020070
 8009f5c:	40020088 	.word	0x40020088
 8009f60:	400200a0 	.word	0x400200a0
 8009f64:	400200b8 	.word	0x400200b8
 8009f68:	40020410 	.word	0x40020410
 8009f6c:	40020428 	.word	0x40020428
 8009f70:	40020440 	.word	0x40020440
 8009f74:	40020458 	.word	0x40020458
 8009f78:	40020470 	.word	0x40020470
 8009f7c:	40020488 	.word	0x40020488
 8009f80:	400204a0 	.word	0x400204a0
 8009f84:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009fa2:	b29b      	uxth	r3, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f000 80cc 	beq.w	800a142 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 80c7 	beq.w	800a142 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbc:	e853 3f00 	ldrex	r3, [r3]
 8009fc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009fdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e4      	bne.n	8009fb4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	623b      	str	r3, [r7, #32]
   return(result);
 8009ffa:	6a3a      	ldr	r2, [r7, #32]
 8009ffc:	4b54      	ldr	r3, [pc, #336]	; (800a150 <HAL_UART_IRQHandler+0x738>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	3308      	adds	r3, #8
 800a00a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a00e:	633a      	str	r2, [r7, #48]	; 0x30
 800a010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a016:	e841 2300 	strex	r3, r2, [r1]
 800a01a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1e3      	bne.n	8009fea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2220      	movs	r2, #32
 800a026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	e853 3f00 	ldrex	r3, [r3]
 800a042:	60fb      	str	r3, [r7, #12]
   return(result);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f023 0310 	bic.w	r3, r3, #16
 800a04a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	461a      	mov	r2, r3
 800a054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a058:	61fb      	str	r3, [r7, #28]
 800a05a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a05c:	69b9      	ldr	r1, [r7, #24]
 800a05e:	69fa      	ldr	r2, [r7, #28]
 800a060:	e841 2300 	strex	r3, r2, [r1]
 800a064:	617b      	str	r3, [r7, #20]
   return(result);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1e4      	bne.n	800a036 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a06c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f882 	bl	800a17c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a078:	e063      	b.n	800a142 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a07e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00e      	beq.n	800a0a4 <HAL_UART_IRQHandler+0x68c>
 800a086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a08a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d008      	beq.n	800a0a4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a09a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 f83e 	bl	800b11e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0a2:	e051      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a0a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d014      	beq.n	800a0da <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a0b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d105      	bne.n	800a0c8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a0c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d008      	beq.n	800a0da <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d03a      	beq.n	800a146 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	4798      	blx	r3
    }
    return;
 800a0d8:	e035      	b.n	800a146 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d009      	beq.n	800a0fa <HAL_UART_IRQHandler+0x6e2>
 800a0e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 ffe8 	bl	800b0c8 <UART_EndTransmit_IT>
    return;
 800a0f8:	e026      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d009      	beq.n	800a11a <HAL_UART_IRQHandler+0x702>
 800a106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a10a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f001 f817 	bl	800b146 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a118:	e016      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a11a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a11e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d010      	beq.n	800a148 <HAL_UART_IRQHandler+0x730>
 800a126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	da0c      	bge.n	800a148 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 ffff 	bl	800b132 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a134:	e008      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
      return;
 800a136:	bf00      	nop
 800a138:	e006      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
    return;
 800a13a:	bf00      	nop
 800a13c:	e004      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
      return;
 800a13e:	bf00      	nop
 800a140:	e002      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
      return;
 800a142:	bf00      	nop
 800a144:	e000      	b.n	800a148 <HAL_UART_IRQHandler+0x730>
    return;
 800a146:	bf00      	nop
  }
}
 800a148:	37e8      	adds	r7, #232	; 0xe8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	effffffe 	.word	0xeffffffe

0800a154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a154:	b480      	push	{r7}
 800a156:	b083      	sub	sp, #12
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a170:	bf00      	nop
 800a172:	370c      	adds	r7, #12
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr

0800a17c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a192:	4770      	bx	lr

0800a194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a198:	b092      	sub	sp, #72	; 0x48
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4bbe      	ldr	r3, [pc, #760]	; (800a4bc <UART_SetConfig+0x328>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	6812      	ldr	r2, [r2, #0]
 800a1ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4ab3      	ldr	r2, [pc, #716]	; (800a4c0 <UART_SetConfig+0x32c>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d004      	beq.n	800a200 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	4baf      	ldr	r3, [pc, #700]	; (800a4c4 <UART_SetConfig+0x330>)
 800a208:	4013      	ands	r3, r2
 800a20a:	697a      	ldr	r2, [r7, #20]
 800a20c:	6812      	ldr	r2, [r2, #0]
 800a20e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a210:	430b      	orrs	r3, r1
 800a212:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	f023 010f 	bic.w	r1, r3, #15
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4aa6      	ldr	r2, [pc, #664]	; (800a4c8 <UART_SetConfig+0x334>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d177      	bne.n	800a324 <UART_SetConfig+0x190>
 800a234:	4ba5      	ldr	r3, [pc, #660]	; (800a4cc <UART_SetConfig+0x338>)
 800a236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a23c:	2b28      	cmp	r3, #40	; 0x28
 800a23e:	d86d      	bhi.n	800a31c <UART_SetConfig+0x188>
 800a240:	a201      	add	r2, pc, #4	; (adr r2, 800a248 <UART_SetConfig+0xb4>)
 800a242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a246:	bf00      	nop
 800a248:	0800a2ed 	.word	0x0800a2ed
 800a24c:	0800a31d 	.word	0x0800a31d
 800a250:	0800a31d 	.word	0x0800a31d
 800a254:	0800a31d 	.word	0x0800a31d
 800a258:	0800a31d 	.word	0x0800a31d
 800a25c:	0800a31d 	.word	0x0800a31d
 800a260:	0800a31d 	.word	0x0800a31d
 800a264:	0800a31d 	.word	0x0800a31d
 800a268:	0800a2f5 	.word	0x0800a2f5
 800a26c:	0800a31d 	.word	0x0800a31d
 800a270:	0800a31d 	.word	0x0800a31d
 800a274:	0800a31d 	.word	0x0800a31d
 800a278:	0800a31d 	.word	0x0800a31d
 800a27c:	0800a31d 	.word	0x0800a31d
 800a280:	0800a31d 	.word	0x0800a31d
 800a284:	0800a31d 	.word	0x0800a31d
 800a288:	0800a2fd 	.word	0x0800a2fd
 800a28c:	0800a31d 	.word	0x0800a31d
 800a290:	0800a31d 	.word	0x0800a31d
 800a294:	0800a31d 	.word	0x0800a31d
 800a298:	0800a31d 	.word	0x0800a31d
 800a29c:	0800a31d 	.word	0x0800a31d
 800a2a0:	0800a31d 	.word	0x0800a31d
 800a2a4:	0800a31d 	.word	0x0800a31d
 800a2a8:	0800a305 	.word	0x0800a305
 800a2ac:	0800a31d 	.word	0x0800a31d
 800a2b0:	0800a31d 	.word	0x0800a31d
 800a2b4:	0800a31d 	.word	0x0800a31d
 800a2b8:	0800a31d 	.word	0x0800a31d
 800a2bc:	0800a31d 	.word	0x0800a31d
 800a2c0:	0800a31d 	.word	0x0800a31d
 800a2c4:	0800a31d 	.word	0x0800a31d
 800a2c8:	0800a30d 	.word	0x0800a30d
 800a2cc:	0800a31d 	.word	0x0800a31d
 800a2d0:	0800a31d 	.word	0x0800a31d
 800a2d4:	0800a31d 	.word	0x0800a31d
 800a2d8:	0800a31d 	.word	0x0800a31d
 800a2dc:	0800a31d 	.word	0x0800a31d
 800a2e0:	0800a31d 	.word	0x0800a31d
 800a2e4:	0800a31d 	.word	0x0800a31d
 800a2e8:	0800a315 	.word	0x0800a315
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e222      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a2f4:	2304      	movs	r3, #4
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e21e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a2fc:	2308      	movs	r3, #8
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e21a      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a304:	2310      	movs	r3, #16
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e216      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a30c:	2320      	movs	r3, #32
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e212      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a314:	2340      	movs	r3, #64	; 0x40
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e20e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a31c:	2380      	movs	r3, #128	; 0x80
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e20a      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a69      	ldr	r2, [pc, #420]	; (800a4d0 <UART_SetConfig+0x33c>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d130      	bne.n	800a390 <UART_SetConfig+0x1fc>
 800a32e:	4b67      	ldr	r3, [pc, #412]	; (800a4cc <UART_SetConfig+0x338>)
 800a330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	2b05      	cmp	r3, #5
 800a338:	d826      	bhi.n	800a388 <UART_SetConfig+0x1f4>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <UART_SetConfig+0x1ac>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a359 	.word	0x0800a359
 800a344:	0800a361 	.word	0x0800a361
 800a348:	0800a369 	.word	0x0800a369
 800a34c:	0800a371 	.word	0x0800a371
 800a350:	0800a379 	.word	0x0800a379
 800a354:	0800a381 	.word	0x0800a381
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a35e:	e1ec      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a360:	2304      	movs	r3, #4
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a366:	e1e8      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a368:	2308      	movs	r3, #8
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36e:	e1e4      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a370:	2310      	movs	r3, #16
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a376:	e1e0      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a378:	2320      	movs	r3, #32
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37e:	e1dc      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a380:	2340      	movs	r3, #64	; 0x40
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a386:	e1d8      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a388:	2380      	movs	r3, #128	; 0x80
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38e:	e1d4      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a4f      	ldr	r2, [pc, #316]	; (800a4d4 <UART_SetConfig+0x340>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d130      	bne.n	800a3fc <UART_SetConfig+0x268>
 800a39a:	4b4c      	ldr	r3, [pc, #304]	; (800a4cc <UART_SetConfig+0x338>)
 800a39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39e:	f003 0307 	and.w	r3, r3, #7
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d826      	bhi.n	800a3f4 <UART_SetConfig+0x260>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <UART_SetConfig+0x218>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a3c5 	.word	0x0800a3c5
 800a3b0:	0800a3cd 	.word	0x0800a3cd
 800a3b4:	0800a3d5 	.word	0x0800a3d5
 800a3b8:	0800a3dd 	.word	0x0800a3dd
 800a3bc:	0800a3e5 	.word	0x0800a3e5
 800a3c0:	0800a3ed 	.word	0x0800a3ed
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ca:	e1b6      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3cc:	2304      	movs	r3, #4
 800a3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3d2:	e1b2      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3d4:	2308      	movs	r3, #8
 800a3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3da:	e1ae      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3dc:	2310      	movs	r3, #16
 800a3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3e2:	e1aa      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3e4:	2320      	movs	r3, #32
 800a3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ea:	e1a6      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3ec:	2340      	movs	r3, #64	; 0x40
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f2:	e1a2      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3f4:	2380      	movs	r3, #128	; 0x80
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fa:	e19e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a35      	ldr	r2, [pc, #212]	; (800a4d8 <UART_SetConfig+0x344>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d130      	bne.n	800a468 <UART_SetConfig+0x2d4>
 800a406:	4b31      	ldr	r3, [pc, #196]	; (800a4cc <UART_SetConfig+0x338>)
 800a408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40a:	f003 0307 	and.w	r3, r3, #7
 800a40e:	2b05      	cmp	r3, #5
 800a410:	d826      	bhi.n	800a460 <UART_SetConfig+0x2cc>
 800a412:	a201      	add	r2, pc, #4	; (adr r2, 800a418 <UART_SetConfig+0x284>)
 800a414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a418:	0800a431 	.word	0x0800a431
 800a41c:	0800a439 	.word	0x0800a439
 800a420:	0800a441 	.word	0x0800a441
 800a424:	0800a449 	.word	0x0800a449
 800a428:	0800a451 	.word	0x0800a451
 800a42c:	0800a459 	.word	0x0800a459
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a436:	e180      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a438:	2304      	movs	r3, #4
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a43e:	e17c      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a440:	2308      	movs	r3, #8
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a446:	e178      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a448:	2310      	movs	r3, #16
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a44e:	e174      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a450:	2320      	movs	r3, #32
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a456:	e170      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a458:	2340      	movs	r3, #64	; 0x40
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45e:	e16c      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a460:	2380      	movs	r3, #128	; 0x80
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a466:	e168      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a1b      	ldr	r2, [pc, #108]	; (800a4dc <UART_SetConfig+0x348>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d142      	bne.n	800a4f8 <UART_SetConfig+0x364>
 800a472:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <UART_SetConfig+0x338>)
 800a474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	d838      	bhi.n	800a4f0 <UART_SetConfig+0x35c>
 800a47e:	a201      	add	r2, pc, #4	; (adr r2, 800a484 <UART_SetConfig+0x2f0>)
 800a480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a484:	0800a49d 	.word	0x0800a49d
 800a488:	0800a4a5 	.word	0x0800a4a5
 800a48c:	0800a4ad 	.word	0x0800a4ad
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4e1 	.word	0x0800a4e1
 800a498:	0800a4e9 	.word	0x0800a4e9
 800a49c:	2300      	movs	r3, #0
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a2:	e14a      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4a4:	2304      	movs	r3, #4
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4aa:	e146      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4ac:	2308      	movs	r3, #8
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b2:	e142      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4b4:	2310      	movs	r3, #16
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ba:	e13e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4bc:	cfff69f3 	.word	0xcfff69f3
 800a4c0:	58000c00 	.word	0x58000c00
 800a4c4:	11fff4ff 	.word	0x11fff4ff
 800a4c8:	40011000 	.word	0x40011000
 800a4cc:	58024400 	.word	0x58024400
 800a4d0:	40004400 	.word	0x40004400
 800a4d4:	40004800 	.word	0x40004800
 800a4d8:	40004c00 	.word	0x40004c00
 800a4dc:	40005000 	.word	0x40005000
 800a4e0:	2320      	movs	r3, #32
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4e6:	e128      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4e8:	2340      	movs	r3, #64	; 0x40
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ee:	e124      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4f0:	2380      	movs	r3, #128	; 0x80
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4f6:	e120      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4acb      	ldr	r2, [pc, #812]	; (800a82c <UART_SetConfig+0x698>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d176      	bne.n	800a5f0 <UART_SetConfig+0x45c>
 800a502:	4bcb      	ldr	r3, [pc, #812]	; (800a830 <UART_SetConfig+0x69c>)
 800a504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a506:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a50a:	2b28      	cmp	r3, #40	; 0x28
 800a50c:	d86c      	bhi.n	800a5e8 <UART_SetConfig+0x454>
 800a50e:	a201      	add	r2, pc, #4	; (adr r2, 800a514 <UART_SetConfig+0x380>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a5b9 	.word	0x0800a5b9
 800a518:	0800a5e9 	.word	0x0800a5e9
 800a51c:	0800a5e9 	.word	0x0800a5e9
 800a520:	0800a5e9 	.word	0x0800a5e9
 800a524:	0800a5e9 	.word	0x0800a5e9
 800a528:	0800a5e9 	.word	0x0800a5e9
 800a52c:	0800a5e9 	.word	0x0800a5e9
 800a530:	0800a5e9 	.word	0x0800a5e9
 800a534:	0800a5c1 	.word	0x0800a5c1
 800a538:	0800a5e9 	.word	0x0800a5e9
 800a53c:	0800a5e9 	.word	0x0800a5e9
 800a540:	0800a5e9 	.word	0x0800a5e9
 800a544:	0800a5e9 	.word	0x0800a5e9
 800a548:	0800a5e9 	.word	0x0800a5e9
 800a54c:	0800a5e9 	.word	0x0800a5e9
 800a550:	0800a5e9 	.word	0x0800a5e9
 800a554:	0800a5c9 	.word	0x0800a5c9
 800a558:	0800a5e9 	.word	0x0800a5e9
 800a55c:	0800a5e9 	.word	0x0800a5e9
 800a560:	0800a5e9 	.word	0x0800a5e9
 800a564:	0800a5e9 	.word	0x0800a5e9
 800a568:	0800a5e9 	.word	0x0800a5e9
 800a56c:	0800a5e9 	.word	0x0800a5e9
 800a570:	0800a5e9 	.word	0x0800a5e9
 800a574:	0800a5d1 	.word	0x0800a5d1
 800a578:	0800a5e9 	.word	0x0800a5e9
 800a57c:	0800a5e9 	.word	0x0800a5e9
 800a580:	0800a5e9 	.word	0x0800a5e9
 800a584:	0800a5e9 	.word	0x0800a5e9
 800a588:	0800a5e9 	.word	0x0800a5e9
 800a58c:	0800a5e9 	.word	0x0800a5e9
 800a590:	0800a5e9 	.word	0x0800a5e9
 800a594:	0800a5d9 	.word	0x0800a5d9
 800a598:	0800a5e9 	.word	0x0800a5e9
 800a59c:	0800a5e9 	.word	0x0800a5e9
 800a5a0:	0800a5e9 	.word	0x0800a5e9
 800a5a4:	0800a5e9 	.word	0x0800a5e9
 800a5a8:	0800a5e9 	.word	0x0800a5e9
 800a5ac:	0800a5e9 	.word	0x0800a5e9
 800a5b0:	0800a5e9 	.word	0x0800a5e9
 800a5b4:	0800a5e1 	.word	0x0800a5e1
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5be:	e0bc      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5c6:	e0b8      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5c8:	2308      	movs	r3, #8
 800a5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ce:	e0b4      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5d0:	2310      	movs	r3, #16
 800a5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5d6:	e0b0      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5d8:	2320      	movs	r3, #32
 800a5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5de:	e0ac      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5e0:	2340      	movs	r3, #64	; 0x40
 800a5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5e6:	e0a8      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5e8:	2380      	movs	r3, #128	; 0x80
 800a5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ee:	e0a4      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a8f      	ldr	r2, [pc, #572]	; (800a834 <UART_SetConfig+0x6a0>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d130      	bne.n	800a65c <UART_SetConfig+0x4c8>
 800a5fa:	4b8d      	ldr	r3, [pc, #564]	; (800a830 <UART_SetConfig+0x69c>)
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	f003 0307 	and.w	r3, r3, #7
 800a602:	2b05      	cmp	r3, #5
 800a604:	d826      	bhi.n	800a654 <UART_SetConfig+0x4c0>
 800a606:	a201      	add	r2, pc, #4	; (adr r2, 800a60c <UART_SetConfig+0x478>)
 800a608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a60c:	0800a625 	.word	0x0800a625
 800a610:	0800a62d 	.word	0x0800a62d
 800a614:	0800a635 	.word	0x0800a635
 800a618:	0800a63d 	.word	0x0800a63d
 800a61c:	0800a645 	.word	0x0800a645
 800a620:	0800a64d 	.word	0x0800a64d
 800a624:	2300      	movs	r3, #0
 800a626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a62a:	e086      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a62c:	2304      	movs	r3, #4
 800a62e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a632:	e082      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a634:	2308      	movs	r3, #8
 800a636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a63a:	e07e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a63c:	2310      	movs	r3, #16
 800a63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a642:	e07a      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a644:	2320      	movs	r3, #32
 800a646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a64a:	e076      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a64c:	2340      	movs	r3, #64	; 0x40
 800a64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a652:	e072      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a654:	2380      	movs	r3, #128	; 0x80
 800a656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65a:	e06e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a75      	ldr	r2, [pc, #468]	; (800a838 <UART_SetConfig+0x6a4>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d130      	bne.n	800a6c8 <UART_SetConfig+0x534>
 800a666:	4b72      	ldr	r3, [pc, #456]	; (800a830 <UART_SetConfig+0x69c>)
 800a668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a66a:	f003 0307 	and.w	r3, r3, #7
 800a66e:	2b05      	cmp	r3, #5
 800a670:	d826      	bhi.n	800a6c0 <UART_SetConfig+0x52c>
 800a672:	a201      	add	r2, pc, #4	; (adr r2, 800a678 <UART_SetConfig+0x4e4>)
 800a674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a678:	0800a691 	.word	0x0800a691
 800a67c:	0800a699 	.word	0x0800a699
 800a680:	0800a6a1 	.word	0x0800a6a1
 800a684:	0800a6a9 	.word	0x0800a6a9
 800a688:	0800a6b1 	.word	0x0800a6b1
 800a68c:	0800a6b9 	.word	0x0800a6b9
 800a690:	2300      	movs	r3, #0
 800a692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a696:	e050      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a698:	2304      	movs	r3, #4
 800a69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a69e:	e04c      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6a6:	e048      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a6a8:	2310      	movs	r3, #16
 800a6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ae:	e044      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a6b0:	2320      	movs	r3, #32
 800a6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6b6:	e040      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a6b8:	2340      	movs	r3, #64	; 0x40
 800a6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6be:	e03c      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a6c0:	2380      	movs	r3, #128	; 0x80
 800a6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c6:	e038      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a5b      	ldr	r2, [pc, #364]	; (800a83c <UART_SetConfig+0x6a8>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d130      	bne.n	800a734 <UART_SetConfig+0x5a0>
 800a6d2:	4b57      	ldr	r3, [pc, #348]	; (800a830 <UART_SetConfig+0x69c>)
 800a6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b05      	cmp	r3, #5
 800a6dc:	d826      	bhi.n	800a72c <UART_SetConfig+0x598>
 800a6de:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <UART_SetConfig+0x550>)
 800a6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e4:	0800a6fd 	.word	0x0800a6fd
 800a6e8:	0800a705 	.word	0x0800a705
 800a6ec:	0800a70d 	.word	0x0800a70d
 800a6f0:	0800a715 	.word	0x0800a715
 800a6f4:	0800a71d 	.word	0x0800a71d
 800a6f8:	0800a725 	.word	0x0800a725
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a702:	e01a      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a704:	2304      	movs	r3, #4
 800a706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a70a:	e016      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a70c:	2308      	movs	r3, #8
 800a70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a712:	e012      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a714:	2310      	movs	r3, #16
 800a716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a71a:	e00e      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a71c:	2320      	movs	r3, #32
 800a71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a722:	e00a      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a724:	2340      	movs	r3, #64	; 0x40
 800a726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a72a:	e006      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a72c:	2380      	movs	r3, #128	; 0x80
 800a72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a732:	e002      	b.n	800a73a <UART_SetConfig+0x5a6>
 800a734:	2380      	movs	r3, #128	; 0x80
 800a736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a3f      	ldr	r2, [pc, #252]	; (800a83c <UART_SetConfig+0x6a8>)
 800a740:	4293      	cmp	r3, r2
 800a742:	f040 80f8 	bne.w	800a936 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a74a:	2b20      	cmp	r3, #32
 800a74c:	dc46      	bgt.n	800a7dc <UART_SetConfig+0x648>
 800a74e:	2b02      	cmp	r3, #2
 800a750:	f2c0 8082 	blt.w	800a858 <UART_SetConfig+0x6c4>
 800a754:	3b02      	subs	r3, #2
 800a756:	2b1e      	cmp	r3, #30
 800a758:	d87e      	bhi.n	800a858 <UART_SetConfig+0x6c4>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <UART_SetConfig+0x5cc>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a7e3 	.word	0x0800a7e3
 800a764:	0800a859 	.word	0x0800a859
 800a768:	0800a7eb 	.word	0x0800a7eb
 800a76c:	0800a859 	.word	0x0800a859
 800a770:	0800a859 	.word	0x0800a859
 800a774:	0800a859 	.word	0x0800a859
 800a778:	0800a7fb 	.word	0x0800a7fb
 800a77c:	0800a859 	.word	0x0800a859
 800a780:	0800a859 	.word	0x0800a859
 800a784:	0800a859 	.word	0x0800a859
 800a788:	0800a859 	.word	0x0800a859
 800a78c:	0800a859 	.word	0x0800a859
 800a790:	0800a859 	.word	0x0800a859
 800a794:	0800a859 	.word	0x0800a859
 800a798:	0800a80b 	.word	0x0800a80b
 800a79c:	0800a859 	.word	0x0800a859
 800a7a0:	0800a859 	.word	0x0800a859
 800a7a4:	0800a859 	.word	0x0800a859
 800a7a8:	0800a859 	.word	0x0800a859
 800a7ac:	0800a859 	.word	0x0800a859
 800a7b0:	0800a859 	.word	0x0800a859
 800a7b4:	0800a859 	.word	0x0800a859
 800a7b8:	0800a859 	.word	0x0800a859
 800a7bc:	0800a859 	.word	0x0800a859
 800a7c0:	0800a859 	.word	0x0800a859
 800a7c4:	0800a859 	.word	0x0800a859
 800a7c8:	0800a859 	.word	0x0800a859
 800a7cc:	0800a859 	.word	0x0800a859
 800a7d0:	0800a859 	.word	0x0800a859
 800a7d4:	0800a859 	.word	0x0800a859
 800a7d8:	0800a84b 	.word	0x0800a84b
 800a7dc:	2b40      	cmp	r3, #64	; 0x40
 800a7de:	d037      	beq.n	800a850 <UART_SetConfig+0x6bc>
 800a7e0:	e03a      	b.n	800a858 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7e2:	f7fb fa05 	bl	8005bf0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a7e8:	e03c      	b.n	800a864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7fb fa14 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7f8:	e034      	b.n	800a864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7fa:	f107 0318 	add.w	r3, r7, #24
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7fb fb60 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a808:	e02c      	b.n	800a864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <UART_SetConfig+0x69c>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f003 0320 	and.w	r3, r3, #32
 800a812:	2b00      	cmp	r3, #0
 800a814:	d016      	beq.n	800a844 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a816:	4b06      	ldr	r3, [pc, #24]	; (800a830 <UART_SetConfig+0x69c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	08db      	lsrs	r3, r3, #3
 800a81c:	f003 0303 	and.w	r3, r3, #3
 800a820:	4a07      	ldr	r2, [pc, #28]	; (800a840 <UART_SetConfig+0x6ac>)
 800a822:	fa22 f303 	lsr.w	r3, r2, r3
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a828:	e01c      	b.n	800a864 <UART_SetConfig+0x6d0>
 800a82a:	bf00      	nop
 800a82c:	40011400 	.word	0x40011400
 800a830:	58024400 	.word	0x58024400
 800a834:	40007800 	.word	0x40007800
 800a838:	40007c00 	.word	0x40007c00
 800a83c:	58000c00 	.word	0x58000c00
 800a840:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a844:	4b9d      	ldr	r3, [pc, #628]	; (800aabc <UART_SetConfig+0x928>)
 800a846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a848:	e00c      	b.n	800a864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a84a:	4b9d      	ldr	r3, [pc, #628]	; (800aac0 <UART_SetConfig+0x92c>)
 800a84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a84e:	e009      	b.n	800a864 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a850:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a856:	e005      	b.n	800a864 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a862:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a866:	2b00      	cmp	r3, #0
 800a868:	f000 81de 	beq.w	800ac28 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	4a94      	ldr	r2, [pc, #592]	; (800aac4 <UART_SetConfig+0x930>)
 800a872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a876:	461a      	mov	r2, r3
 800a878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a87a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a87e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	4613      	mov	r3, r2
 800a886:	005b      	lsls	r3, r3, #1
 800a888:	4413      	add	r3, r2
 800a88a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d305      	bcc.n	800a89c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a898:	429a      	cmp	r2, r3
 800a89a:	d903      	bls.n	800a8a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8a2:	e1c1      	b.n	800ac28 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	60fa      	str	r2, [r7, #12]
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b0:	4a84      	ldr	r2, [pc, #528]	; (800aac4 <UART_SetConfig+0x930>)
 800a8b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	603b      	str	r3, [r7, #0]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a8c6:	f7f5 fd63 	bl	8000390 <__aeabi_uldivmod>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4610      	mov	r0, r2
 800a8d0:	4619      	mov	r1, r3
 800a8d2:	f04f 0200 	mov.w	r2, #0
 800a8d6:	f04f 0300 	mov.w	r3, #0
 800a8da:	020b      	lsls	r3, r1, #8
 800a8dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8e0:	0202      	lsls	r2, r0, #8
 800a8e2:	6979      	ldr	r1, [r7, #20]
 800a8e4:	6849      	ldr	r1, [r1, #4]
 800a8e6:	0849      	lsrs	r1, r1, #1
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	eb12 0804 	adds.w	r8, r2, r4
 800a8f2:	eb43 0905 	adc.w	r9, r3, r5
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	469a      	mov	sl, r3
 800a8fe:	4693      	mov	fp, r2
 800a900:	4652      	mov	r2, sl
 800a902:	465b      	mov	r3, fp
 800a904:	4640      	mov	r0, r8
 800a906:	4649      	mov	r1, r9
 800a908:	f7f5 fd42 	bl	8000390 <__aeabi_uldivmod>
 800a90c:	4602      	mov	r2, r0
 800a90e:	460b      	mov	r3, r1
 800a910:	4613      	mov	r3, r2
 800a912:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a91a:	d308      	bcc.n	800a92e <UART_SetConfig+0x79a>
 800a91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a922:	d204      	bcs.n	800a92e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a92a:	60da      	str	r2, [r3, #12]
 800a92c:	e17c      	b.n	800ac28 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a92e:	2301      	movs	r3, #1
 800a930:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a934:	e178      	b.n	800ac28 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a93e:	f040 80c5 	bne.w	800aacc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a942:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a946:	2b20      	cmp	r3, #32
 800a948:	dc48      	bgt.n	800a9dc <UART_SetConfig+0x848>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	db7b      	blt.n	800aa46 <UART_SetConfig+0x8b2>
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d879      	bhi.n	800aa46 <UART_SetConfig+0x8b2>
 800a952:	a201      	add	r2, pc, #4	; (adr r2, 800a958 <UART_SetConfig+0x7c4>)
 800a954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a958:	0800a9e3 	.word	0x0800a9e3
 800a95c:	0800a9eb 	.word	0x0800a9eb
 800a960:	0800aa47 	.word	0x0800aa47
 800a964:	0800aa47 	.word	0x0800aa47
 800a968:	0800a9f3 	.word	0x0800a9f3
 800a96c:	0800aa47 	.word	0x0800aa47
 800a970:	0800aa47 	.word	0x0800aa47
 800a974:	0800aa47 	.word	0x0800aa47
 800a978:	0800aa03 	.word	0x0800aa03
 800a97c:	0800aa47 	.word	0x0800aa47
 800a980:	0800aa47 	.word	0x0800aa47
 800a984:	0800aa47 	.word	0x0800aa47
 800a988:	0800aa47 	.word	0x0800aa47
 800a98c:	0800aa47 	.word	0x0800aa47
 800a990:	0800aa47 	.word	0x0800aa47
 800a994:	0800aa47 	.word	0x0800aa47
 800a998:	0800aa13 	.word	0x0800aa13
 800a99c:	0800aa47 	.word	0x0800aa47
 800a9a0:	0800aa47 	.word	0x0800aa47
 800a9a4:	0800aa47 	.word	0x0800aa47
 800a9a8:	0800aa47 	.word	0x0800aa47
 800a9ac:	0800aa47 	.word	0x0800aa47
 800a9b0:	0800aa47 	.word	0x0800aa47
 800a9b4:	0800aa47 	.word	0x0800aa47
 800a9b8:	0800aa47 	.word	0x0800aa47
 800a9bc:	0800aa47 	.word	0x0800aa47
 800a9c0:	0800aa47 	.word	0x0800aa47
 800a9c4:	0800aa47 	.word	0x0800aa47
 800a9c8:	0800aa47 	.word	0x0800aa47
 800a9cc:	0800aa47 	.word	0x0800aa47
 800a9d0:	0800aa47 	.word	0x0800aa47
 800a9d4:	0800aa47 	.word	0x0800aa47
 800a9d8:	0800aa39 	.word	0x0800aa39
 800a9dc:	2b40      	cmp	r3, #64	; 0x40
 800a9de:	d02e      	beq.n	800aa3e <UART_SetConfig+0x8aa>
 800a9e0:	e031      	b.n	800aa46 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9e2:	f7f9 fcc1 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 800a9e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9e8:	e033      	b.n	800aa52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9ea:	f7f9 fcd3 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 800a9ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9f0:	e02f      	b.n	800aa52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7fb f910 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa00:	e027      	b.n	800aa52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa02:	f107 0318 	add.w	r3, r7, #24
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fb fa5c 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa10:	e01f      	b.n	800aa52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa12:	4b2d      	ldr	r3, [pc, #180]	; (800aac8 <UART_SetConfig+0x934>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f003 0320 	and.w	r3, r3, #32
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d009      	beq.n	800aa32 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa1e:	4b2a      	ldr	r3, [pc, #168]	; (800aac8 <UART_SetConfig+0x934>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	08db      	lsrs	r3, r3, #3
 800aa24:	f003 0303 	and.w	r3, r3, #3
 800aa28:	4a24      	ldr	r2, [pc, #144]	; (800aabc <UART_SetConfig+0x928>)
 800aa2a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa30:	e00f      	b.n	800aa52 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800aa32:	4b22      	ldr	r3, [pc, #136]	; (800aabc <UART_SetConfig+0x928>)
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa36:	e00c      	b.n	800aa52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa38:	4b21      	ldr	r3, [pc, #132]	; (800aac0 <UART_SetConfig+0x92c>)
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa3c:	e009      	b.n	800aa52 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa44:	e005      	b.n	800aa52 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aa50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f000 80e7 	beq.w	800ac28 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	4a19      	ldr	r2, [pc, #100]	; (800aac4 <UART_SetConfig+0x930>)
 800aa60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa64:	461a      	mov	r2, r3
 800aa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa68:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa6c:	005a      	lsls	r2, r3, #1
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	685b      	ldr	r3, [r3, #4]
 800aa72:	085b      	lsrs	r3, r3, #1
 800aa74:	441a      	add	r2, r3
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	2b0f      	cmp	r3, #15
 800aa84:	d916      	bls.n	800aab4 <UART_SetConfig+0x920>
 800aa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa8c:	d212      	bcs.n	800aab4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa90:	b29b      	uxth	r3, r3
 800aa92:	f023 030f 	bic.w	r3, r3, #15
 800aa96:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	085b      	lsrs	r3, r3, #1
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f003 0307 	and.w	r3, r3, #7
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aab0:	60da      	str	r2, [r3, #12]
 800aab2:	e0b9      	b.n	800ac28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aaba:	e0b5      	b.n	800ac28 <UART_SetConfig+0xa94>
 800aabc:	03d09000 	.word	0x03d09000
 800aac0:	003d0900 	.word	0x003d0900
 800aac4:	08011de4 	.word	0x08011de4
 800aac8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aacc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aad0:	2b20      	cmp	r3, #32
 800aad2:	dc49      	bgt.n	800ab68 <UART_SetConfig+0x9d4>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	db7c      	blt.n	800abd2 <UART_SetConfig+0xa3e>
 800aad8:	2b20      	cmp	r3, #32
 800aada:	d87a      	bhi.n	800abd2 <UART_SetConfig+0xa3e>
 800aadc:	a201      	add	r2, pc, #4	; (adr r2, 800aae4 <UART_SetConfig+0x950>)
 800aade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae2:	bf00      	nop
 800aae4:	0800ab6f 	.word	0x0800ab6f
 800aae8:	0800ab77 	.word	0x0800ab77
 800aaec:	0800abd3 	.word	0x0800abd3
 800aaf0:	0800abd3 	.word	0x0800abd3
 800aaf4:	0800ab7f 	.word	0x0800ab7f
 800aaf8:	0800abd3 	.word	0x0800abd3
 800aafc:	0800abd3 	.word	0x0800abd3
 800ab00:	0800abd3 	.word	0x0800abd3
 800ab04:	0800ab8f 	.word	0x0800ab8f
 800ab08:	0800abd3 	.word	0x0800abd3
 800ab0c:	0800abd3 	.word	0x0800abd3
 800ab10:	0800abd3 	.word	0x0800abd3
 800ab14:	0800abd3 	.word	0x0800abd3
 800ab18:	0800abd3 	.word	0x0800abd3
 800ab1c:	0800abd3 	.word	0x0800abd3
 800ab20:	0800abd3 	.word	0x0800abd3
 800ab24:	0800ab9f 	.word	0x0800ab9f
 800ab28:	0800abd3 	.word	0x0800abd3
 800ab2c:	0800abd3 	.word	0x0800abd3
 800ab30:	0800abd3 	.word	0x0800abd3
 800ab34:	0800abd3 	.word	0x0800abd3
 800ab38:	0800abd3 	.word	0x0800abd3
 800ab3c:	0800abd3 	.word	0x0800abd3
 800ab40:	0800abd3 	.word	0x0800abd3
 800ab44:	0800abd3 	.word	0x0800abd3
 800ab48:	0800abd3 	.word	0x0800abd3
 800ab4c:	0800abd3 	.word	0x0800abd3
 800ab50:	0800abd3 	.word	0x0800abd3
 800ab54:	0800abd3 	.word	0x0800abd3
 800ab58:	0800abd3 	.word	0x0800abd3
 800ab5c:	0800abd3 	.word	0x0800abd3
 800ab60:	0800abd3 	.word	0x0800abd3
 800ab64:	0800abc5 	.word	0x0800abc5
 800ab68:	2b40      	cmp	r3, #64	; 0x40
 800ab6a:	d02e      	beq.n	800abca <UART_SetConfig+0xa36>
 800ab6c:	e031      	b.n	800abd2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab6e:	f7f9 fbfb 	bl	8004368 <HAL_RCC_GetPCLK1Freq>
 800ab72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab74:	e033      	b.n	800abde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab76:	f7f9 fc0d 	bl	8004394 <HAL_RCC_GetPCLK2Freq>
 800ab7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab7c:	e02f      	b.n	800abde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7fb f84a 	bl	8005c1c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab8c:	e027      	b.n	800abde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab8e:	f107 0318 	add.w	r3, r7, #24
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7fb f996 	bl	8005ec4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab9c:	e01f      	b.n	800abde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab9e:	4b2d      	ldr	r3, [pc, #180]	; (800ac54 <UART_SetConfig+0xac0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d009      	beq.n	800abbe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800abaa:	4b2a      	ldr	r3, [pc, #168]	; (800ac54 <UART_SetConfig+0xac0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	08db      	lsrs	r3, r3, #3
 800abb0:	f003 0303 	and.w	r3, r3, #3
 800abb4:	4a28      	ldr	r2, [pc, #160]	; (800ac58 <UART_SetConfig+0xac4>)
 800abb6:	fa22 f303 	lsr.w	r3, r2, r3
 800abba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800abbc:	e00f      	b.n	800abde <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800abbe:	4b26      	ldr	r3, [pc, #152]	; (800ac58 <UART_SetConfig+0xac4>)
 800abc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc2:	e00c      	b.n	800abde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800abc4:	4b25      	ldr	r3, [pc, #148]	; (800ac5c <UART_SetConfig+0xac8>)
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abc8:	e009      	b.n	800abde <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abd0:	e005      	b.n	800abde <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800abdc:	bf00      	nop
    }

    if (pclk != 0U)
 800abde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d021      	beq.n	800ac28 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abe8:	4a1d      	ldr	r2, [pc, #116]	; (800ac60 <UART_SetConfig+0xacc>)
 800abea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abee:	461a      	mov	r2, r3
 800abf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abf2:	fbb3 f2f2 	udiv	r2, r3, r2
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	085b      	lsrs	r3, r3, #1
 800abfc:	441a      	add	r2, r3
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac06:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	2b0f      	cmp	r3, #15
 800ac0c:	d909      	bls.n	800ac22 <UART_SetConfig+0xa8e>
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac14:	d205      	bcs.n	800ac22 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	60da      	str	r2, [r3, #12]
 800ac20:	e002      	b.n	800ac28 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ac22:	2301      	movs	r3, #1
 800ac24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	2200      	movs	r2, #0
 800ac42:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ac44:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3748      	adds	r7, #72	; 0x48
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac52:	bf00      	nop
 800ac54:	58024400 	.word	0x58024400
 800ac58:	03d09000 	.word	0x03d09000
 800ac5c:	003d0900 	.word	0x003d0900
 800ac60:	08011de4 	.word	0x08011de4

0800ac64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b083      	sub	sp, #12
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	430a      	orrs	r2, r1
 800ac8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac92:	f003 0302 	and.w	r3, r3, #2
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d00a      	beq.n	800acb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	430a      	orrs	r2, r1
 800acae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00a      	beq.n	800acd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	685b      	ldr	r3, [r3, #4]
 800acc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	430a      	orrs	r2, r1
 800acd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acd6:	f003 0308 	and.w	r3, r3, #8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00a      	beq.n	800acf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	430a      	orrs	r2, r1
 800acf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf8:	f003 0310 	and.w	r3, r3, #16
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00a      	beq.n	800ad16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	430a      	orrs	r2, r1
 800ad14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00a      	beq.n	800ad38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	430a      	orrs	r2, r1
 800ad36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d01a      	beq.n	800ad7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	430a      	orrs	r2, r1
 800ad58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad62:	d10a      	bne.n	800ad7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	430a      	orrs	r2, r1
 800ad78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	605a      	str	r2, [r3, #4]
  }
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af02      	add	r7, sp, #8
 800adae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adb8:	f7f7 fa60 	bl	800227c <HAL_GetTick>
 800adbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0308 	and.w	r3, r3, #8
 800adc8:	2b08      	cmp	r3, #8
 800adca:	d10e      	bne.n	800adea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2200      	movs	r2, #0
 800add6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 f82f 	bl	800ae3e <UART_WaitOnFlagUntilTimeout>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d001      	beq.n	800adea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e025      	b.n	800ae36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	d10e      	bne.n	800ae16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f819 	bl	800ae3e <UART_WaitOnFlagUntilTimeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae12:	2303      	movs	r3, #3
 800ae14:	e00f      	b.n	800ae36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b09c      	sub	sp, #112	; 0x70
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	60f8      	str	r0, [r7, #12]
 800ae46:	60b9      	str	r1, [r7, #8]
 800ae48:	603b      	str	r3, [r7, #0]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae4e:	e0a9      	b.n	800afa4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae56:	f000 80a5 	beq.w	800afa4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae5a:	f7f7 fa0f 	bl	800227c <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae66:	429a      	cmp	r2, r3
 800ae68:	d302      	bcc.n	800ae70 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d140      	bne.n	800aef2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae78:	e853 3f00 	ldrex	r3, [r3]
 800ae7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae84:	667b      	str	r3, [r7, #100]	; 0x64
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	461a      	mov	r2, r3
 800ae8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae96:	e841 2300 	strex	r3, r2, [r1]
 800ae9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e6      	bne.n	800ae70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	3308      	adds	r3, #8
 800aea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeac:	e853 3f00 	ldrex	r3, [r3]
 800aeb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb4:	f023 0301 	bic.w	r3, r3, #1
 800aeb8:	663b      	str	r3, [r7, #96]	; 0x60
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	3308      	adds	r3, #8
 800aec0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aec2:	64ba      	str	r2, [r7, #72]	; 0x48
 800aec4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aeca:	e841 2300 	strex	r3, r2, [r1]
 800aece:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d1e5      	bne.n	800aea2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2220      	movs	r2, #32
 800aeda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2220      	movs	r2, #32
 800aee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e069      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f003 0304 	and.w	r3, r3, #4
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d051      	beq.n	800afa4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af0e:	d149      	bne.n	800afa4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af22:	e853 3f00 	ldrex	r3, [r3]
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	461a      	mov	r2, r3
 800af36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af38:	637b      	str	r3, [r7, #52]	; 0x34
 800af3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af40:	e841 2300 	strex	r3, r2, [r1]
 800af44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1e6      	bne.n	800af1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	3308      	adds	r3, #8
 800af52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	e853 3f00 	ldrex	r3, [r3]
 800af5a:	613b      	str	r3, [r7, #16]
   return(result);
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f023 0301 	bic.w	r3, r3, #1
 800af62:	66bb      	str	r3, [r7, #104]	; 0x68
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3308      	adds	r3, #8
 800af6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af6c:	623a      	str	r2, [r7, #32]
 800af6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af70:	69f9      	ldr	r1, [r7, #28]
 800af72:	6a3a      	ldr	r2, [r7, #32]
 800af74:	e841 2300 	strex	r3, r2, [r1]
 800af78:	61bb      	str	r3, [r7, #24]
   return(result);
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1e5      	bne.n	800af4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2220      	movs	r2, #32
 800af84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2220      	movs	r2, #32
 800af8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e010      	b.n	800afc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	69da      	ldr	r2, [r3, #28]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	4013      	ands	r3, r2
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	bf0c      	ite	eq
 800afb4:	2301      	moveq	r3, #1
 800afb6:	2300      	movne	r3, #0
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	461a      	mov	r2, r3
 800afbc:	79fb      	ldrb	r3, [r7, #7]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	f43f af46 	beq.w	800ae50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afc4:	2300      	movs	r3, #0
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3770      	adds	r7, #112	; 0x70
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
	...

0800afd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b095      	sub	sp, #84	; 0x54
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aff6:	643b      	str	r3, [r7, #64]	; 0x40
 800aff8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800affc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e6      	bne.n	800afd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3308      	adds	r3, #8
 800b010:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b012:	6a3b      	ldr	r3, [r7, #32]
 800b014:	e853 3f00 	ldrex	r3, [r3]
 800b018:	61fb      	str	r3, [r7, #28]
   return(result);
 800b01a:	69fa      	ldr	r2, [r7, #28]
 800b01c:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <UART_EndRxTransfer+0xc8>)
 800b01e:	4013      	ands	r3, r2
 800b020:	64bb      	str	r3, [r7, #72]	; 0x48
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b02a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b02c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e5      	bne.n	800b00a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b042:	2b01      	cmp	r3, #1
 800b044:	d118      	bne.n	800b078 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	e853 3f00 	ldrex	r3, [r3]
 800b052:	60bb      	str	r3, [r7, #8]
   return(result);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	f023 0310 	bic.w	r3, r3, #16
 800b05a:	647b      	str	r3, [r7, #68]	; 0x44
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	461a      	mov	r2, r3
 800b062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b064:	61bb      	str	r3, [r7, #24]
 800b066:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b068:	6979      	ldr	r1, [r7, #20]
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	e841 2300 	strex	r3, r2, [r1]
 800b070:	613b      	str	r3, [r7, #16]
   return(result);
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1e6      	bne.n	800b046 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b08c:	bf00      	nop
 800b08e:	3754      	adds	r7, #84	; 0x54
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	effffffe 	.word	0xeffffffe

0800b09c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f7ff f854 	bl	800a168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	61bb      	str	r3, [r7, #24]
 800b0f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6979      	ldr	r1, [r7, #20]
 800b0f4:	69ba      	ldr	r2, [r7, #24]
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e6      	bne.n	800b0d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2220      	movs	r2, #32
 800b106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f7ff f81f 	bl	800a154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b116:	bf00      	nop
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b126:	bf00      	nop
 800b128:	370c      	adds	r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b130:	4770      	bx	lr

0800b132 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b132:	b480      	push	{r7}
 800b134:	b083      	sub	sp, #12
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b13a:	bf00      	nop
 800b13c:	370c      	adds	r7, #12
 800b13e:	46bd      	mov	sp, r7
 800b140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b144:	4770      	bx	lr

0800b146 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b146:	b480      	push	{r7}
 800b148:	b083      	sub	sp, #12
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b14e:	bf00      	nop
 800b150:	370c      	adds	r7, #12
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b15a:	b480      	push	{r7}
 800b15c:	b085      	sub	sp, #20
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <HAL_UARTEx_DisableFifoMode+0x16>
 800b16c:	2302      	movs	r3, #2
 800b16e:	e027      	b.n	800b1c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2224      	movs	r2, #36	; 0x24
 800b17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0201 	bic.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b19e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d101      	bne.n	800b1e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1e0:	2302      	movs	r3, #2
 800b1e2:	e02d      	b.n	800b240 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2224      	movs	r2, #36	; 0x24
 800b1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	f022 0201 	bic.w	r2, r2, #1
 800b20a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	430a      	orrs	r2, r1
 800b21e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f84f 	bl	800b2c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2220      	movs	r2, #32
 800b232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d101      	bne.n	800b260 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b25c:	2302      	movs	r3, #2
 800b25e:	e02d      	b.n	800b2bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2224      	movs	r2, #36	; 0x24
 800b26c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 0201 	bic.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f811 	bl	800b2c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	68fa      	ldr	r2, [r7, #12]
 800b2a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2220      	movs	r2, #32
 800b2ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d108      	bne.n	800b2e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2e4:	e031      	b.n	800b34a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2e6:	2310      	movs	r3, #16
 800b2e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2ea:	2310      	movs	r3, #16
 800b2ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	689b      	ldr	r3, [r3, #8]
 800b2f4:	0e5b      	lsrs	r3, r3, #25
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	0f5b      	lsrs	r3, r3, #29
 800b306:	b2db      	uxtb	r3, r3
 800b308:	f003 0307 	and.w	r3, r3, #7
 800b30c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
 800b310:	7b3a      	ldrb	r2, [r7, #12]
 800b312:	4911      	ldr	r1, [pc, #68]	; (800b358 <UARTEx_SetNbDataToProcess+0x94>)
 800b314:	5c8a      	ldrb	r2, [r1, r2]
 800b316:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b31a:	7b3a      	ldrb	r2, [r7, #12]
 800b31c:	490f      	ldr	r1, [pc, #60]	; (800b35c <UARTEx_SetNbDataToProcess+0x98>)
 800b31e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b320:	fb93 f3f2 	sdiv	r3, r3, r2
 800b324:	b29a      	uxth	r2, r3
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
 800b32e:	7b7a      	ldrb	r2, [r7, #13]
 800b330:	4909      	ldr	r1, [pc, #36]	; (800b358 <UARTEx_SetNbDataToProcess+0x94>)
 800b332:	5c8a      	ldrb	r2, [r1, r2]
 800b334:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b338:	7b7a      	ldrb	r2, [r7, #13]
 800b33a:	4908      	ldr	r1, [pc, #32]	; (800b35c <UARTEx_SetNbDataToProcess+0x98>)
 800b33c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b33e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b342:	b29a      	uxth	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b34a:	bf00      	nop
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	08011dfc 	.word	0x08011dfc
 800b35c:	08011e04 	.word	0x08011e04

0800b360 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b360:	b084      	sub	sp, #16
 800b362:	b480      	push	{r7}
 800b364:	b085      	sub	sp, #20
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	f107 001c 	add.w	r0, r7, #28
 800b36e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b376:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b378:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b37a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b37e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b382:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b386:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	685a      	ldr	r2, [r3, #4]
 800b392:	4b07      	ldr	r3, [pc, #28]	; (800b3b0 <SDMMC_Init+0x50>)
 800b394:	4013      	ands	r3, r2
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	431a      	orrs	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	b004      	add	sp, #16
 800b3ac:	4770      	bx	lr
 800b3ae:	bf00      	nop
 800b3b0:	ffc02c00 	.word	0xffc02c00

0800b3b4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
 800b3d6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	370c      	adds	r7, #12
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f043 0203 	orr.w	r2, r3, #3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	370c      	adds	r7, #12
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr

0800b412 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0303 	and.w	r3, r3, #3
}
 800b422:	4618      	mov	r0, r3
 800b424:	370c      	adds	r7, #12
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
	...

0800b430 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b44e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b454:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b45a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	68da      	ldr	r2, [r3, #12]
 800b466:	4b06      	ldr	r3, [pc, #24]	; (800b480 <SDMMC_SendCommand+0x50>)
 800b468:	4013      	ands	r3, r2
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	431a      	orrs	r2, r3
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3714      	adds	r7, #20
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	fffee0c0 	.word	0xfffee0c0

0800b484 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	b2db      	uxtb	r3, r3
}
 800b492:	4618      	mov	r0, r3
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b085      	sub	sp, #20
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
 800b4a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	3314      	adds	r3, #20
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	685a      	ldr	r2, [r3, #4]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4ea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b4f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b4f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b502:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	431a      	orrs	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b50e:	2300      	movs	r3, #0

}
 800b510:	4618      	mov	r0, r3
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b088      	sub	sp, #32
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b52a:	2310      	movs	r3, #16
 800b52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b52e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b534:	2300      	movs	r3, #0
 800b536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b53c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b53e:	f107 0308 	add.w	r3, r7, #8
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ff73 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b54a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b54e:	2110      	movs	r1, #16
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 fa5f 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b558:	69fb      	ldr	r3, [r7, #28]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3720      	adds	r7, #32
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b088      	sub	sp, #32
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b570:	2311      	movs	r3, #17
 800b572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b574:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b57e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b584:	f107 0308 	add.w	r3, r7, #8
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff ff50 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b590:	f241 3288 	movw	r2, #5000	; 0x1388
 800b594:	2111      	movs	r1, #17
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 fa3c 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b59c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b59e:	69fb      	ldr	r3, [r7, #28]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3720      	adds	r7, #32
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b088      	sub	sp, #32
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b5b6:	2312      	movs	r3, #18
 800b5b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5ca:	f107 0308 	add.w	r3, r7, #8
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f7ff ff2d 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b5d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5da:	2112      	movs	r1, #18
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fa19 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b5e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3720      	adds	r7, #32
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}

0800b5ee <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b5ee:	b580      	push	{r7, lr}
 800b5f0:	b088      	sub	sp, #32
 800b5f2:	af00      	add	r7, sp, #0
 800b5f4:	6078      	str	r0, [r7, #4]
 800b5f6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b5fc:	2318      	movs	r3, #24
 800b5fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b600:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b606:	2300      	movs	r3, #0
 800b608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b60a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b60e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b610:	f107 0308 	add.w	r3, r7, #8
 800b614:	4619      	mov	r1, r3
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff ff0a 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b61c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b620:	2118      	movs	r1, #24
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f9f6 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b62a:	69fb      	ldr	r3, [r7, #28]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3720      	adds	r7, #32
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b088      	sub	sp, #32
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b642:	2319      	movs	r3, #25
 800b644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b64a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64c:	2300      	movs	r3, #0
 800b64e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b654:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b656:	f107 0308 	add.w	r3, r7, #8
 800b65a:	4619      	mov	r1, r3
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f7ff fee7 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b662:	f241 3288 	movw	r2, #5000	; 0x1388
 800b666:	2119      	movs	r1, #25
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f9d3 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b66e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b670:	69fb      	ldr	r3, [r7, #28]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3720      	adds	r7, #32
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
	...

0800b67c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b684:	2300      	movs	r3, #0
 800b686:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b688:	230c      	movs	r3, #12
 800b68a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b68c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b690:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b692:	2300      	movs	r3, #0
 800b694:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b69a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6b4:	f107 0308 	add.w	r3, r7, #8
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f7ff feb8 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b6c0:	4a0b      	ldr	r2, [pc, #44]	; (800b6f0 <SDMMC_CmdStopTransfer+0x74>)
 800b6c2:	210c      	movs	r1, #12
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f9a5 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b6ca:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b6d8:	69fb      	ldr	r3, [r7, #28]
 800b6da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6de:	d101      	bne.n	800b6e4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3720      	adds	r7, #32
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	05f5e100 	.word	0x05f5e100

0800b6f4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b702:	2307      	movs	r3, #7
 800b704:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b70c:	2300      	movs	r3, #0
 800b70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b716:	f107 0308 	add.w	r3, r7, #8
 800b71a:	4619      	mov	r1, r3
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f7ff fe87 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b722:	f241 3288 	movw	r2, #5000	; 0x1388
 800b726:	2107      	movs	r1, #7
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f973 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b72e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b730:	69fb      	ldr	r3, [r7, #28]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3720      	adds	r7, #32
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b73a:	b580      	push	{r7, lr}
 800b73c:	b088      	sub	sp, #32
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b742:	2300      	movs	r3, #0
 800b744:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b746:	2300      	movs	r3, #0
 800b748:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b74a:	2300      	movs	r3, #0
 800b74c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74e:	2300      	movs	r3, #0
 800b750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff fe66 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fb97 	bl	800be98 <SDMMC_GetCmdError>
 800b76a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b76c:	69fb      	ldr	r3, [r7, #28]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3720      	adds	r7, #32
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b088      	sub	sp, #32
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b77e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b784:	2308      	movs	r3, #8
 800b786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b798:	f107 0308 	add.w	r3, r7, #8
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fe46 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f000 fb29 	bl	800bdfc <SDMMC_GetCmdResp7>
 800b7aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7ac:	69fb      	ldr	r3, [r7, #28]
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3720      	adds	r7, #32
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b088      	sub	sp, #32
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b7c4:	2337      	movs	r3, #55	; 0x37
 800b7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7d8:	f107 0308 	add.w	r3, r7, #8
 800b7dc:	4619      	mov	r1, r3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f7ff fe26 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b7e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e8:	2137      	movs	r1, #55	; 0x37
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f912 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b80a:	2329      	movs	r3, #41	; 0x29
 800b80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b80e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b81c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b81e:	f107 0308 	add.w	r3, r7, #8
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fe03 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f000 fa2e 	bl	800bc8c <SDMMC_GetCmdResp3>
 800b830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b832:	69fb      	ldr	r3, [r7, #28]
}
 800b834:	4618      	mov	r0, r3
 800b836:	3720      	adds	r7, #32
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b088      	sub	sp, #32
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b84a:	2306      	movs	r3, #6
 800b84c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b84e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b85c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b85e:	f107 0308 	add.w	r3, r7, #8
 800b862:	4619      	mov	r1, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f7ff fde3 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b86a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b86e:	2106      	movs	r1, #6
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f8cf 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b878:	69fb      	ldr	r3, [r7, #28]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}

0800b882 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b882:	b580      	push	{r7, lr}
 800b884:	b088      	sub	sp, #32
 800b886:	af00      	add	r7, sp, #0
 800b888:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b88a:	2300      	movs	r3, #0
 800b88c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b88e:	2333      	movs	r3, #51	; 0x33
 800b890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b892:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b896:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b898:	2300      	movs	r3, #0
 800b89a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b89c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8a2:	f107 0308 	add.w	r3, r7, #8
 800b8a6:	4619      	mov	r1, r3
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f7ff fdc1 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b8ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b2:	2133      	movs	r1, #51	; 0x33
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f8ad 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b8ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3720      	adds	r7, #32
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b088      	sub	sp, #32
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b8d2:	2302      	movs	r3, #2
 800b8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8e6:	f107 0308 	add.w	r3, r7, #8
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fd9f 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f980 	bl	800bbf8 <SDMMC_GetCmdResp2>
 800b8f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b912:	2309      	movs	r3, #9
 800b914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b916:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff fd7f 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 f960 	bl	800bbf8 <SDMMC_GetCmdResp2>
 800b938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b93a:	69fb      	ldr	r3, [r7, #28]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3720      	adds	r7, #32
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
 800b94c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b94e:	2300      	movs	r3, #0
 800b950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b952:	2303      	movs	r3, #3
 800b954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b95a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b95c:	2300      	movs	r3, #0
 800b95e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b964:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b966:	f107 0308 	add.w	r3, r7, #8
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff fd5f 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b972:	683a      	ldr	r2, [r7, #0]
 800b974:	2103      	movs	r1, #3
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 f9c8 	bl	800bd0c <SDMMC_GetCmdResp6>
 800b97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b97e:	69fb      	ldr	r3, [r7, #28]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3720      	adds	r7, #32
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b996:	230d      	movs	r3, #13
 800b998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b99a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b99e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9aa:	f107 0308 	add.w	r3, r7, #8
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	6878      	ldr	r0, [r7, #4]
 800b9b2:	f7ff fd3d 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b9b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9ba:	210d      	movs	r1, #13
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f829 	bl	800ba14 <SDMMC_GetCmdResp1>
 800b9c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3720      	adds	r7, #32
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b088      	sub	sp, #32
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b9da:	230d      	movs	r3, #13
 800b9dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b9de:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ee:	f107 0308 	add.w	r3, r7, #8
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff fd1b 	bl	800b430 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b9fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9fe:	210d      	movs	r1, #13
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f807 	bl	800ba14 <SDMMC_GetCmdResp1>
 800ba06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ba08:	69fb      	ldr	r3, [r7, #28]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3720      	adds	r7, #32
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
	...

0800ba14 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b088      	sub	sp, #32
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	607a      	str	r2, [r7, #4]
 800ba20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba22:	4b70      	ldr	r3, [pc, #448]	; (800bbe4 <SDMMC_GetCmdResp1+0x1d0>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a70      	ldr	r2, [pc, #448]	; (800bbe8 <SDMMC_GetCmdResp1+0x1d4>)
 800ba28:	fba2 2303 	umull	r2, r3, r2, r3
 800ba2c:	0a5a      	lsrs	r2, r3, #9
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	fb02 f303 	mul.w	r3, r2, r3
 800ba34:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	1e5a      	subs	r2, r3, #1
 800ba3a:	61fa      	str	r2, [r7, #28]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d102      	bne.n	800ba46 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba44:	e0c9      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	4b67      	ldr	r3, [pc, #412]	; (800bbec <SDMMC_GetCmdResp1+0x1d8>)
 800ba50:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0ef      	beq.n	800ba36 <SDMMC_GetCmdResp1+0x22>
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d1ea      	bne.n	800ba36 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba64:	f003 0304 	and.w	r3, r3, #4
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d004      	beq.n	800ba76 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2204      	movs	r2, #4
 800ba70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba72:	2304      	movs	r3, #4
 800ba74:	e0b1      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	f003 0301 	and.w	r3, r3, #1
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d004      	beq.n	800ba8c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2201      	movs	r2, #1
 800ba86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	e0a6      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	4a58      	ldr	r2, [pc, #352]	; (800bbf0 <SDMMC_GetCmdResp1+0x1dc>)
 800ba90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba92:	68f8      	ldr	r0, [r7, #12]
 800ba94:	f7ff fcf6 	bl	800b484 <SDMMC_GetCommandResponse>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	7afb      	ldrb	r3, [r7, #11]
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d001      	beq.n	800baa6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e099      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800baa6:	2100      	movs	r1, #0
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f7ff fcf8 	bl	800b49e <SDMMC_GetResponse>
 800baae:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	4b50      	ldr	r3, [pc, #320]	; (800bbf4 <SDMMC_GetCmdResp1+0x1e0>)
 800bab4:	4013      	ands	r3, r2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800baba:	2300      	movs	r3, #0
 800babc:	e08d      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	da02      	bge.n	800baca <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bac4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bac8:	e087      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bad4:	2340      	movs	r3, #64	; 0x40
 800bad6:	e080      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d001      	beq.n	800bae6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bae2:	2380      	movs	r3, #128	; 0x80
 800bae4:	e079      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800baf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800baf4:	e071      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb04:	e069      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb14:	e061      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb24:	e059      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb34:	e051      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb44:	e049      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb54:	e041      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb64:	e039      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb74:	e031      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb84:	e029      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb94:	e021      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bba0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bba4:	e019      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d002      	beq.n	800bbb6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bbb4:	e011      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d002      	beq.n	800bbc6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bbc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bbc4:	e009      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bbd0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bbd4:	e001      	b.n	800bbda <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3720      	adds	r7, #32
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	24000000 	.word	0x24000000
 800bbe8:	10624dd3 	.word	0x10624dd3
 800bbec:	00200045 	.word	0x00200045
 800bbf0:	002000c5 	.word	0x002000c5
 800bbf4:	fdffe008 	.word	0xfdffe008

0800bbf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b085      	sub	sp, #20
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc00:	4b1f      	ldr	r3, [pc, #124]	; (800bc80 <SDMMC_GetCmdResp2+0x88>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a1f      	ldr	r2, [pc, #124]	; (800bc84 <SDMMC_GetCmdResp2+0x8c>)
 800bc06:	fba2 2303 	umull	r2, r3, r2, r3
 800bc0a:	0a5b      	lsrs	r3, r3, #9
 800bc0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc10:	fb02 f303 	mul.w	r3, r2, r3
 800bc14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	1e5a      	subs	r2, r3, #1
 800bc1a:	60fa      	str	r2, [r7, #12]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d102      	bne.n	800bc26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc24:	e026      	b.n	800bc74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d0ef      	beq.n	800bc16 <SDMMC_GetCmdResp2+0x1e>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d1ea      	bne.n	800bc16 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2204      	movs	r2, #4
 800bc50:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc52:	2304      	movs	r3, #4
 800bc54:	e00e      	b.n	800bc74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d004      	beq.n	800bc6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e003      	b.n	800bc74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4a06      	ldr	r2, [pc, #24]	; (800bc88 <SDMMC_GetCmdResp2+0x90>)
 800bc70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	24000000 	.word	0x24000000
 800bc84:	10624dd3 	.word	0x10624dd3
 800bc88:	002000c5 	.word	0x002000c5

0800bc8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc94:	4b1a      	ldr	r3, [pc, #104]	; (800bd00 <SDMMC_GetCmdResp3+0x74>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	4a1a      	ldr	r2, [pc, #104]	; (800bd04 <SDMMC_GetCmdResp3+0x78>)
 800bc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc9e:	0a5b      	lsrs	r3, r3, #9
 800bca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bca4:	fb02 f303 	mul.w	r3, r2, r3
 800bca8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	1e5a      	subs	r2, r3, #1
 800bcae:	60fa      	str	r2, [r7, #12]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d102      	bne.n	800bcba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcb8:	e01b      	b.n	800bcf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcbe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0ef      	beq.n	800bcaa <SDMMC_GetCmdResp3+0x1e>
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1ea      	bne.n	800bcaa <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcd8:	f003 0304 	and.w	r3, r3, #4
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d004      	beq.n	800bcea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2204      	movs	r2, #4
 800bce4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bce6:	2304      	movs	r3, #4
 800bce8:	e003      	b.n	800bcf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a06      	ldr	r2, [pc, #24]	; (800bd08 <SDMMC_GetCmdResp3+0x7c>)
 800bcee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3714      	adds	r7, #20
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	24000000 	.word	0x24000000
 800bd04:	10624dd3 	.word	0x10624dd3
 800bd08:	002000c5 	.word	0x002000c5

0800bd0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	460b      	mov	r3, r1
 800bd16:	607a      	str	r2, [r7, #4]
 800bd18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bd1a:	4b35      	ldr	r3, [pc, #212]	; (800bdf0 <SDMMC_GetCmdResp6+0xe4>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	4a35      	ldr	r2, [pc, #212]	; (800bdf4 <SDMMC_GetCmdResp6+0xe8>)
 800bd20:	fba2 2303 	umull	r2, r3, r2, r3
 800bd24:	0a5b      	lsrs	r3, r3, #9
 800bd26:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd2a:	fb02 f303 	mul.w	r3, r2, r3
 800bd2e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd30:	69fb      	ldr	r3, [r7, #28]
 800bd32:	1e5a      	subs	r2, r3, #1
 800bd34:	61fa      	str	r2, [r7, #28]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d102      	bne.n	800bd40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd3e:	e052      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd44:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d0ef      	beq.n	800bd30 <SDMMC_GetCmdResp6+0x24>
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1ea      	bne.n	800bd30 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd5e:	f003 0304 	and.w	r3, r3, #4
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d004      	beq.n	800bd70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2204      	movs	r2, #4
 800bd6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd6c:	2304      	movs	r3, #4
 800bd6e:	e03a      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd74:	f003 0301 	and.w	r3, r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d004      	beq.n	800bd86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e02f      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd86:	68f8      	ldr	r0, [r7, #12]
 800bd88:	f7ff fb7c 	bl	800b484 <SDMMC_GetCommandResponse>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	461a      	mov	r2, r3
 800bd90:	7afb      	ldrb	r3, [r7, #11]
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d001      	beq.n	800bd9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e025      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	4a16      	ldr	r2, [pc, #88]	; (800bdf8 <SDMMC_GetCmdResp6+0xec>)
 800bd9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bda0:	2100      	movs	r1, #0
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff fb7b 	bl	800b49e <SDMMC_GetResponse>
 800bda8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	0c1b      	lsrs	r3, r3, #16
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	e011      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d002      	beq.n	800bdd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdd0:	e009      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bde0:	e001      	b.n	800bde6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bde2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3720      	adds	r7, #32
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	24000000 	.word	0x24000000
 800bdf4:	10624dd3 	.word	0x10624dd3
 800bdf8:	002000c5 	.word	0x002000c5

0800bdfc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b085      	sub	sp, #20
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be04:	4b22      	ldr	r3, [pc, #136]	; (800be90 <SDMMC_GetCmdResp7+0x94>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a22      	ldr	r2, [pc, #136]	; (800be94 <SDMMC_GetCmdResp7+0x98>)
 800be0a:	fba2 2303 	umull	r2, r3, r2, r3
 800be0e:	0a5b      	lsrs	r3, r3, #9
 800be10:	f241 3288 	movw	r2, #5000	; 0x1388
 800be14:	fb02 f303 	mul.w	r3, r2, r3
 800be18:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	1e5a      	subs	r2, r3, #1
 800be1e:	60fa      	str	r2, [r7, #12]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be28:	e02c      	b.n	800be84 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800be36:	2b00      	cmp	r3, #0
 800be38:	d0ef      	beq.n	800be1a <SDMMC_GetCmdResp7+0x1e>
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1ea      	bne.n	800be1a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2204      	movs	r2, #4
 800be54:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be56:	2304      	movs	r3, #4
 800be58:	e014      	b.n	800be84 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be5e:	f003 0301 	and.w	r3, r3, #1
 800be62:	2b00      	cmp	r3, #0
 800be64:	d004      	beq.n	800be70 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2201      	movs	r2, #1
 800be6a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be6c:	2301      	movs	r3, #1
 800be6e:	e009      	b.n	800be84 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d002      	beq.n	800be82 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2240      	movs	r2, #64	; 0x40
 800be80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be82:	2300      	movs	r3, #0

}
 800be84:	4618      	mov	r0, r3
 800be86:	3714      	adds	r7, #20
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr
 800be90:	24000000 	.word	0x24000000
 800be94:	10624dd3 	.word	0x10624dd3

0800be98 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bea0:	4b11      	ldr	r3, [pc, #68]	; (800bee8 <SDMMC_GetCmdError+0x50>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a11      	ldr	r2, [pc, #68]	; (800beec <SDMMC_GetCmdError+0x54>)
 800bea6:	fba2 2303 	umull	r2, r3, r2, r3
 800beaa:	0a5b      	lsrs	r3, r3, #9
 800beac:	f241 3288 	movw	r2, #5000	; 0x1388
 800beb0:	fb02 f303 	mul.w	r3, r2, r3
 800beb4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	1e5a      	subs	r2, r3, #1
 800beba:	60fa      	str	r2, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d102      	bne.n	800bec6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bec0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bec4:	e009      	b.n	800beda <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d0f1      	beq.n	800beb6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a06      	ldr	r2, [pc, #24]	; (800bef0 <SDMMC_GetCmdError+0x58>)
 800bed6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	24000000 	.word	0x24000000
 800beec:	10624dd3 	.word	0x10624dd3
 800bef0:	002000c5 	.word	0x002000c5

0800bef4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bef8:	4904      	ldr	r1, [pc, #16]	; (800bf0c <MX_FATFS_Init+0x18>)
 800befa:	4805      	ldr	r0, [pc, #20]	; (800bf10 <MX_FATFS_Init+0x1c>)
 800befc:	f004 fc04 	bl	8010708 <FATFS_LinkDriver>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	4b03      	ldr	r3, [pc, #12]	; (800bf14 <MX_FATFS_Init+0x20>)
 800bf06:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bf08:	bf00      	nop
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	240002b0 	.word	0x240002b0
 800bf10:	08011e0c 	.word	0x08011e0c
 800bf14:	240002ac 	.word	0x240002ac

0800bf18 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bf18:	b480      	push	{r7}
 800bf1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bf1c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bf32:	f000 f89b 	bl	800c06c <BSP_SD_IsDetected>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d001      	beq.n	800bf40 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e012      	b.n	800bf66 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bf40:	480b      	ldr	r0, [pc, #44]	; (800bf70 <BSP_SD_Init+0x48>)
 800bf42:	f7fa fbc9 	bl	80066d8 <HAL_SD_Init>
 800bf46:	4603      	mov	r3, r0
 800bf48:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bf4a:	79fb      	ldrb	r3, [r7, #7]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d109      	bne.n	800bf64 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bf50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf54:	4806      	ldr	r0, [pc, #24]	; (800bf70 <BSP_SD_Init+0x48>)
 800bf56:	f7fb fc41 	bl	80077dc <HAL_SD_ConfigWideBusOperation>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d001      	beq.n	800bf64 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bf64:	79fb      	ldrb	r3, [r7, #7]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
 800bf6e:	bf00      	nop
 800bf70:	240000c4 	.word	0x240000c4

0800bf74 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b088      	sub	sp, #32
 800bf78:	af02      	add	r7, sp, #8
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
 800bf80:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	9300      	str	r3, [sp, #0]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	68f9      	ldr	r1, [r7, #12]
 800bf90:	4806      	ldr	r0, [pc, #24]	; (800bfac <BSP_SD_ReadBlocks+0x38>)
 800bf92:	f7fa fcbb 	bl	800690c <HAL_SD_ReadBlocks>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d001      	beq.n	800bfa0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3718      	adds	r7, #24
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	240000c4 	.word	0x240000c4

0800bfb0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b088      	sub	sp, #32
 800bfb4:	af02      	add	r7, sp, #8
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	68f9      	ldr	r1, [r7, #12]
 800bfcc:	4806      	ldr	r0, [pc, #24]	; (800bfe8 <BSP_SD_WriteBlocks+0x38>)
 800bfce:	f7fa fe27 	bl	8006c20 <HAL_SD_WriteBlocks>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d001      	beq.n	800bfdc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bfdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3718      	adds	r7, #24
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	240000c4 	.word	0x240000c4

0800bfec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bff0:	4805      	ldr	r0, [pc, #20]	; (800c008 <BSP_SD_GetCardState+0x1c>)
 800bff2:	f7fb fd05 	bl	8007a00 <HAL_SD_GetCardState>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	bf14      	ite	ne
 800bffc:	2301      	movne	r3, #1
 800bffe:	2300      	moveq	r3, #0
 800c000:	b2db      	uxtb	r3, r3
}
 800c002:	4618      	mov	r0, r3
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	240000c4 	.word	0x240000c4

0800c00c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800c014:	6879      	ldr	r1, [r7, #4]
 800c016:	4803      	ldr	r0, [pc, #12]	; (800c024 <BSP_SD_GetCardInfo+0x18>)
 800c018:	f7fb fbb4 	bl	8007784 <HAL_SD_GetCardInfo>
}
 800c01c:	bf00      	nop
 800c01e:	3708      	adds	r7, #8
 800c020:	46bd      	mov	sp, r7
 800c022:	bd80      	pop	{r7, pc}
 800c024:	240000c4 	.word	0x240000c4

0800c028 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c030:	f000 f80e 	bl	800c050 <BSP_SD_WriteCpltCallback>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c044:	f000 f80b 	bl	800c05e <BSP_SD_ReadCpltCallback>
}
 800c048:	bf00      	nop
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c050:	b480      	push	{r7}
 800c052:	af00      	add	r7, sp, #0

}
 800c054:	bf00      	nop
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr

0800c05e <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c05e:	b480      	push	{r7}
 800c060:	af00      	add	r7, sp, #0

}
 800c062:	bf00      	nop
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c072:	2301      	movs	r3, #1
 800c074:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	b2db      	uxtb	r3, r3
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	370c      	adds	r7, #12
 800c07e:	46bd      	mov	sp, r7
 800c080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c084:	4770      	bx	lr
	...

0800c088 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c092:	4b0b      	ldr	r3, [pc, #44]	; (800c0c0 <SD_CheckStatus+0x38>)
 800c094:	2201      	movs	r2, #1
 800c096:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c098:	f7ff ffa8 	bl	800bfec <BSP_SD_GetCardState>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d107      	bne.n	800c0b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c0a2:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <SD_CheckStatus+0x38>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	f023 0301 	bic.w	r3, r3, #1
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4b04      	ldr	r3, [pc, #16]	; (800c0c0 <SD_CheckStatus+0x38>)
 800c0b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c0b2:	4b03      	ldr	r3, [pc, #12]	; (800c0c0 <SD_CheckStatus+0x38>)
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	b2db      	uxtb	r3, r3
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	2400000d 	.word	0x2400000d

0800c0c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b082      	sub	sp, #8
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c0ce:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <SD_initialize+0x38>)
 800c0d0:	2201      	movs	r2, #1
 800c0d2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c0d4:	f7ff ff28 	bl	800bf28 <BSP_SD_Init>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d107      	bne.n	800c0ee <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c0de:	79fb      	ldrb	r3, [r7, #7]
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7ff ffd1 	bl	800c088 <SD_CheckStatus>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4b04      	ldr	r3, [pc, #16]	; (800c0fc <SD_initialize+0x38>)
 800c0ec:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c0ee:	4b03      	ldr	r3, [pc, #12]	; (800c0fc <SD_initialize+0x38>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	b2db      	uxtb	r3, r3
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3708      	adds	r7, #8
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}
 800c0fc:	2400000d 	.word	0x2400000d

0800c100 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
 800c106:	4603      	mov	r3, r0
 800c108:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c10a:	79fb      	ldrb	r3, [r7, #7]
 800c10c:	4618      	mov	r0, r3
 800c10e:	f7ff ffbb 	bl	800c088 <SD_CheckStatus>
 800c112:	4603      	mov	r3, r0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3708      	adds	r7, #8
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	60b9      	str	r1, [r7, #8]
 800c124:	607a      	str	r2, [r7, #4]
 800c126:	603b      	str	r3, [r7, #0]
 800c128:	4603      	mov	r3, r0
 800c12a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c12c:	2301      	movs	r3, #1
 800c12e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c130:	f04f 33ff 	mov.w	r3, #4294967295
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	6879      	ldr	r1, [r7, #4]
 800c138:	68b8      	ldr	r0, [r7, #8]
 800c13a:	f7ff ff1b 	bl	800bf74 <BSP_SD_ReadBlocks>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d107      	bne.n	800c154 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c144:	bf00      	nop
 800c146:	f7ff ff51 	bl	800bfec <BSP_SD_GetCardState>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d1fa      	bne.n	800c146 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c150:	2300      	movs	r3, #0
 800c152:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c154:	7dfb      	ldrb	r3, [r7, #23]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3718      	adds	r7, #24
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
 800c168:	603b      	str	r3, [r7, #0]
 800c16a:	4603      	mov	r3, r0
 800c16c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c172:	f04f 33ff 	mov.w	r3, #4294967295
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	68b8      	ldr	r0, [r7, #8]
 800c17c:	f7ff ff18 	bl	800bfb0 <BSP_SD_WriteBlocks>
 800c180:	4603      	mov	r3, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	d107      	bne.n	800c196 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c186:	bf00      	nop
 800c188:	f7ff ff30 	bl	800bfec <BSP_SD_GetCardState>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1fa      	bne.n	800c188 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b08c      	sub	sp, #48	; 0x30
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	603a      	str	r2, [r7, #0]
 800c1aa:	71fb      	strb	r3, [r7, #7]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c1b6:	4b25      	ldr	r3, [pc, #148]	; (800c24c <SD_ioctl+0xac>)
 800c1b8:	781b      	ldrb	r3, [r3, #0]
 800c1ba:	b2db      	uxtb	r3, r3
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d001      	beq.n	800c1c8 <SD_ioctl+0x28>
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e03c      	b.n	800c242 <SD_ioctl+0xa2>

  switch (cmd)
 800c1c8:	79bb      	ldrb	r3, [r7, #6]
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d834      	bhi.n	800c238 <SD_ioctl+0x98>
 800c1ce:	a201      	add	r2, pc, #4	; (adr r2, 800c1d4 <SD_ioctl+0x34>)
 800c1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1d4:	0800c1e5 	.word	0x0800c1e5
 800c1d8:	0800c1ed 	.word	0x0800c1ed
 800c1dc:	0800c205 	.word	0x0800c205
 800c1e0:	0800c21f 	.word	0x0800c21f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c1ea:	e028      	b.n	800c23e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c1ec:	f107 0308 	add.w	r3, r7, #8
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	f7ff ff0b 	bl	800c00c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c1f6:	6a3a      	ldr	r2, [r7, #32]
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c202:	e01c      	b.n	800c23e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c204:	f107 0308 	add.w	r3, r7, #8
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff feff 	bl	800c00c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c210:	b29a      	uxth	r2, r3
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c21c:	e00f      	b.n	800c23e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c21e:	f107 0308 	add.w	r3, r7, #8
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fef2 	bl	800c00c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c22a:	0a5a      	lsrs	r2, r3, #9
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c236:	e002      	b.n	800c23e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c238:	2304      	movs	r3, #4
 800c23a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c23e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c242:	4618      	mov	r0, r3
 800c244:	3730      	adds	r7, #48	; 0x30
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	2400000d 	.word	0x2400000d

0800c250 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	4a08      	ldr	r2, [pc, #32]	; (800c280 <disk_status+0x30>)
 800c25e:	009b      	lsls	r3, r3, #2
 800c260:	4413      	add	r3, r2
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	685b      	ldr	r3, [r3, #4]
 800c266:	79fa      	ldrb	r2, [r7, #7]
 800c268:	4905      	ldr	r1, [pc, #20]	; (800c280 <disk_status+0x30>)
 800c26a:	440a      	add	r2, r1
 800c26c:	7a12      	ldrb	r2, [r2, #8]
 800c26e:	4610      	mov	r0, r2
 800c270:	4798      	blx	r3
 800c272:	4603      	mov	r3, r0
 800c274:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}
 800c280:	240027d0 	.word	0x240027d0

0800c284 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	4603      	mov	r3, r0
 800c28c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c292:	79fb      	ldrb	r3, [r7, #7]
 800c294:	4a0d      	ldr	r2, [pc, #52]	; (800c2cc <disk_initialize+0x48>)
 800c296:	5cd3      	ldrb	r3, [r2, r3]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d111      	bne.n	800c2c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	4a0b      	ldr	r2, [pc, #44]	; (800c2cc <disk_initialize+0x48>)
 800c2a0:	2101      	movs	r1, #1
 800c2a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c2a4:	79fb      	ldrb	r3, [r7, #7]
 800c2a6:	4a09      	ldr	r2, [pc, #36]	; (800c2cc <disk_initialize+0x48>)
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4413      	add	r3, r2
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	79fa      	ldrb	r2, [r7, #7]
 800c2b2:	4906      	ldr	r1, [pc, #24]	; (800c2cc <disk_initialize+0x48>)
 800c2b4:	440a      	add	r2, r1
 800c2b6:	7a12      	ldrb	r2, [r2, #8]
 800c2b8:	4610      	mov	r0, r2
 800c2ba:	4798      	blx	r3
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	3710      	adds	r7, #16
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	240027d0 	.word	0x240027d0

0800c2d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <disk_read+0x3c>)
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	689c      	ldr	r4, [r3, #8]
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4a07      	ldr	r2, [pc, #28]	; (800c30c <disk_read+0x3c>)
 800c2f0:	4413      	add	r3, r2
 800c2f2:	7a18      	ldrb	r0, [r3, #8]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	47a0      	blx	r4
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}
 800c30a:	bf00      	nop
 800c30c:	240027d0 	.word	0x240027d0

0800c310 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c310:	b590      	push	{r4, r7, lr}
 800c312:	b087      	sub	sp, #28
 800c314:	af00      	add	r7, sp, #0
 800c316:	60b9      	str	r1, [r7, #8]
 800c318:	607a      	str	r2, [r7, #4]
 800c31a:	603b      	str	r3, [r7, #0]
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4a0a      	ldr	r2, [pc, #40]	; (800c34c <disk_write+0x3c>)
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	68dc      	ldr	r4, [r3, #12]
 800c32c:	7bfb      	ldrb	r3, [r7, #15]
 800c32e:	4a07      	ldr	r2, [pc, #28]	; (800c34c <disk_write+0x3c>)
 800c330:	4413      	add	r3, r2
 800c332:	7a18      	ldrb	r0, [r3, #8]
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	68b9      	ldr	r1, [r7, #8]
 800c33a:	47a0      	blx	r4
 800c33c:	4603      	mov	r3, r0
 800c33e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c340:	7dfb      	ldrb	r3, [r7, #23]
}
 800c342:	4618      	mov	r0, r3
 800c344:	371c      	adds	r7, #28
 800c346:	46bd      	mov	sp, r7
 800c348:	bd90      	pop	{r4, r7, pc}
 800c34a:	bf00      	nop
 800c34c:	240027d0 	.word	0x240027d0

0800c350 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	4603      	mov	r3, r0
 800c358:	603a      	str	r2, [r7, #0]
 800c35a:	71fb      	strb	r3, [r7, #7]
 800c35c:	460b      	mov	r3, r1
 800c35e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	4a09      	ldr	r2, [pc, #36]	; (800c388 <disk_ioctl+0x38>)
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	79fa      	ldrb	r2, [r7, #7]
 800c36e:	4906      	ldr	r1, [pc, #24]	; (800c388 <disk_ioctl+0x38>)
 800c370:	440a      	add	r2, r1
 800c372:	7a10      	ldrb	r0, [r2, #8]
 800c374:	79b9      	ldrb	r1, [r7, #6]
 800c376:	683a      	ldr	r2, [r7, #0]
 800c378:	4798      	blx	r3
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	240027d0 	.word	0x240027d0

0800c38c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c38c:	b480      	push	{r7}
 800c38e:	b085      	sub	sp, #20
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3301      	adds	r3, #1
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c39c:	89fb      	ldrh	r3, [r7, #14]
 800c39e:	021b      	lsls	r3, r3, #8
 800c3a0:	b21a      	sxth	r2, r3
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	b21b      	sxth	r3, r3
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	b21b      	sxth	r3, r3
 800c3ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c3ae:	89fb      	ldrh	r3, [r7, #14]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3714      	adds	r7, #20
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3303      	adds	r3, #3
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	021b      	lsls	r3, r3, #8
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	3202      	adds	r2, #2
 800c3d4:	7812      	ldrb	r2, [r2, #0]
 800c3d6:	4313      	orrs	r3, r2
 800c3d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	021b      	lsls	r3, r3, #8
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	3201      	adds	r2, #1
 800c3e2:	7812      	ldrb	r2, [r2, #0]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	021b      	lsls	r3, r3, #8
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	7812      	ldrb	r2, [r2, #0]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	3714      	adds	r7, #20
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr

0800c402 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c402:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c406:	b09d      	sub	sp, #116	; 0x74
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800c40c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c40e:	3307      	adds	r3, #7
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	b2db      	uxtb	r3, r3
 800c414:	2200      	movs	r2, #0
 800c416:	469a      	mov	sl, r3
 800c418:	4693      	mov	fp, r2
 800c41a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800c41e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c422:	f04f 0000 	mov.w	r0, #0
 800c426:	f04f 0100 	mov.w	r1, #0
 800c42a:	0219      	lsls	r1, r3, #8
 800c42c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c430:	0210      	lsls	r0, r2, #8
 800c432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c434:	3306      	adds	r3, #6
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2200      	movs	r2, #0
 800c43c:	461c      	mov	r4, r3
 800c43e:	4615      	mov	r5, r2
 800c440:	ea40 0804 	orr.w	r8, r0, r4
 800c444:	ea41 0905 	orr.w	r9, r1, r5
 800c448:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800c44c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c450:	f04f 0000 	mov.w	r0, #0
 800c454:	f04f 0100 	mov.w	r1, #0
 800c458:	0219      	lsls	r1, r3, #8
 800c45a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c45e:	0210      	lsls	r0, r2, #8
 800c460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c462:	3305      	adds	r3, #5
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2200      	movs	r2, #0
 800c46a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c46c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c46e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c472:	4623      	mov	r3, r4
 800c474:	4303      	orrs	r3, r0
 800c476:	62bb      	str	r3, [r7, #40]	; 0x28
 800c478:	462b      	mov	r3, r5
 800c47a:	430b      	orrs	r3, r1
 800c47c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c47e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c482:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800c486:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c48a:	f04f 0000 	mov.w	r0, #0
 800c48e:	f04f 0100 	mov.w	r1, #0
 800c492:	0219      	lsls	r1, r3, #8
 800c494:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c498:	0210      	lsls	r0, r2, #8
 800c49a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c49c:	3304      	adds	r3, #4
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	653b      	str	r3, [r7, #80]	; 0x50
 800c4a6:	657a      	str	r2, [r7, #84]	; 0x54
 800c4a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800c4ac:	4623      	mov	r3, r4
 800c4ae:	4303      	orrs	r3, r0
 800c4b0:	623b      	str	r3, [r7, #32]
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	430b      	orrs	r3, r1
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
 800c4b8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c4bc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800c4c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c4c4:	f04f 0000 	mov.w	r0, #0
 800c4c8:	f04f 0100 	mov.w	r1, #0
 800c4cc:	0219      	lsls	r1, r3, #8
 800c4ce:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c4d2:	0210      	lsls	r0, r2, #8
 800c4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4d6:	3303      	adds	r3, #3
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2200      	movs	r2, #0
 800c4de:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c4e2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c4e6:	4623      	mov	r3, r4
 800c4e8:	4303      	orrs	r3, r0
 800c4ea:	61bb      	str	r3, [r7, #24]
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	430b      	orrs	r3, r1
 800c4f0:	61fb      	str	r3, [r7, #28]
 800c4f2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c4f6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800c4fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c4fe:	f04f 0000 	mov.w	r0, #0
 800c502:	f04f 0100 	mov.w	r1, #0
 800c506:	0219      	lsls	r1, r3, #8
 800c508:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c50c:	0210      	lsls	r0, r2, #8
 800c50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c510:	3302      	adds	r3, #2
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2200      	movs	r2, #0
 800c518:	643b      	str	r3, [r7, #64]	; 0x40
 800c51a:	647a      	str	r2, [r7, #68]	; 0x44
 800c51c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c520:	4623      	mov	r3, r4
 800c522:	4303      	orrs	r3, r0
 800c524:	613b      	str	r3, [r7, #16]
 800c526:	462b      	mov	r3, r5
 800c528:	430b      	orrs	r3, r1
 800c52a:	617b      	str	r3, [r7, #20]
 800c52c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c530:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800c534:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c538:	f04f 0200 	mov.w	r2, #0
 800c53c:	f04f 0300 	mov.w	r3, #0
 800c540:	020b      	lsls	r3, r1, #8
 800c542:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c546:	0202      	lsls	r2, r0, #8
 800c548:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c54a:	3101      	adds	r1, #1
 800c54c:	7809      	ldrb	r1, [r1, #0]
 800c54e:	b2c9      	uxtb	r1, r1
 800c550:	2000      	movs	r0, #0
 800c552:	63b9      	str	r1, [r7, #56]	; 0x38
 800c554:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c556:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800c55a:	4621      	mov	r1, r4
 800c55c:	4311      	orrs	r1, r2
 800c55e:	60b9      	str	r1, [r7, #8]
 800c560:	4629      	mov	r1, r5
 800c562:	4319      	orrs	r1, r3
 800c564:	60f9      	str	r1, [r7, #12]
 800c566:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c56a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800c56e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	020b      	lsls	r3, r1, #8
 800c57c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c580:	0202      	lsls	r2, r0, #8
 800c582:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c584:	7809      	ldrb	r1, [r1, #0]
 800c586:	b2c9      	uxtb	r1, r1
 800c588:	2000      	movs	r0, #0
 800c58a:	6339      	str	r1, [r7, #48]	; 0x30
 800c58c:	6378      	str	r0, [r7, #52]	; 0x34
 800c58e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c592:	4621      	mov	r1, r4
 800c594:	4311      	orrs	r1, r2
 800c596:	6039      	str	r1, [r7, #0]
 800c598:	4629      	mov	r1, r5
 800c59a:	4319      	orrs	r1, r3
 800c59c:	6079      	str	r1, [r7, #4]
 800c59e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c5a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800c5a6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	3774      	adds	r7, #116	; 0x74
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c5b6:	4770      	bx	lr

0800c5b8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	1c5a      	adds	r2, r3, #1
 800c5c8:	607a      	str	r2, [r7, #4]
 800c5ca:	887a      	ldrh	r2, [r7, #2]
 800c5cc:	b2d2      	uxtb	r2, r2
 800c5ce:	701a      	strb	r2, [r3, #0]
 800c5d0:	887b      	ldrh	r3, [r7, #2]
 800c5d2:	0a1b      	lsrs	r3, r3, #8
 800c5d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	1c5a      	adds	r2, r3, #1
 800c5da:	607a      	str	r2, [r7, #4]
 800c5dc:	887a      	ldrh	r2, [r7, #2]
 800c5de:	b2d2      	uxtb	r2, r2
 800c5e0:	701a      	strb	r2, [r3, #0]
}
 800c5e2:	bf00      	nop
 800c5e4:	370c      	adds	r7, #12
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr

0800c5ee <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c5ee:	b480      	push	{r7}
 800c5f0:	b083      	sub	sp, #12
 800c5f2:	af00      	add	r7, sp, #0
 800c5f4:	6078      	str	r0, [r7, #4]
 800c5f6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	1c5a      	adds	r2, r3, #1
 800c5fc:	607a      	str	r2, [r7, #4]
 800c5fe:	683a      	ldr	r2, [r7, #0]
 800c600:	b2d2      	uxtb	r2, r2
 800c602:	701a      	strb	r2, [r3, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	0a1b      	lsrs	r3, r3, #8
 800c608:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	607a      	str	r2, [r7, #4]
 800c610:	683a      	ldr	r2, [r7, #0]
 800c612:	b2d2      	uxtb	r2, r2
 800c614:	701a      	strb	r2, [r3, #0]
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	0a1b      	lsrs	r3, r3, #8
 800c61a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	1c5a      	adds	r2, r3, #1
 800c620:	607a      	str	r2, [r7, #4]
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	b2d2      	uxtb	r2, r2
 800c626:	701a      	strb	r2, [r3, #0]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	0a1b      	lsrs	r3, r3, #8
 800c62c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	1c5a      	adds	r2, r3, #1
 800c632:	607a      	str	r2, [r7, #4]
 800c634:	683a      	ldr	r2, [r7, #0]
 800c636:	b2d2      	uxtb	r2, r2
 800c638:	701a      	strb	r2, [r3, #0]
}
 800c63a:	bf00      	nop
 800c63c:	370c      	adds	r7, #12
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr

0800c646 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c646:	b480      	push	{r7}
 800c648:	b085      	sub	sp, #20
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	60fa      	str	r2, [r7, #12]
 800c658:	783a      	ldrb	r2, [r7, #0]
 800c65a:	701a      	strb	r2, [r3, #0]
 800c65c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c660:	f04f 0200 	mov.w	r2, #0
 800c664:	f04f 0300 	mov.w	r3, #0
 800c668:	0a02      	lsrs	r2, r0, #8
 800c66a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c66e:	0a0b      	lsrs	r3, r1, #8
 800c670:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	60fa      	str	r2, [r7, #12]
 800c67a:	783a      	ldrb	r2, [r7, #0]
 800c67c:	701a      	strb	r2, [r3, #0]
 800c67e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c682:	f04f 0200 	mov.w	r2, #0
 800c686:	f04f 0300 	mov.w	r3, #0
 800c68a:	0a02      	lsrs	r2, r0, #8
 800c68c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c690:	0a0b      	lsrs	r3, r1, #8
 800c692:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	1c5a      	adds	r2, r3, #1
 800c69a:	60fa      	str	r2, [r7, #12]
 800c69c:	783a      	ldrb	r2, [r7, #0]
 800c69e:	701a      	strb	r2, [r3, #0]
 800c6a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	0a02      	lsrs	r2, r0, #8
 800c6ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6b2:	0a0b      	lsrs	r3, r1, #8
 800c6b4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	60fa      	str	r2, [r7, #12]
 800c6be:	783a      	ldrb	r2, [r7, #0]
 800c6c0:	701a      	strb	r2, [r3, #0]
 800c6c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6c6:	f04f 0200 	mov.w	r2, #0
 800c6ca:	f04f 0300 	mov.w	r3, #0
 800c6ce:	0a02      	lsrs	r2, r0, #8
 800c6d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6d4:	0a0b      	lsrs	r3, r1, #8
 800c6d6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	1c5a      	adds	r2, r3, #1
 800c6de:	60fa      	str	r2, [r7, #12]
 800c6e0:	783a      	ldrb	r2, [r7, #0]
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6e8:	f04f 0200 	mov.w	r2, #0
 800c6ec:	f04f 0300 	mov.w	r3, #0
 800c6f0:	0a02      	lsrs	r2, r0, #8
 800c6f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6f6:	0a0b      	lsrs	r3, r1, #8
 800c6f8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	1c5a      	adds	r2, r3, #1
 800c700:	60fa      	str	r2, [r7, #12]
 800c702:	783a      	ldrb	r2, [r7, #0]
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c70a:	f04f 0200 	mov.w	r2, #0
 800c70e:	f04f 0300 	mov.w	r3, #0
 800c712:	0a02      	lsrs	r2, r0, #8
 800c714:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c718:	0a0b      	lsrs	r3, r1, #8
 800c71a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	1c5a      	adds	r2, r3, #1
 800c722:	60fa      	str	r2, [r7, #12]
 800c724:	783a      	ldrb	r2, [r7, #0]
 800c726:	701a      	strb	r2, [r3, #0]
 800c728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c72c:	f04f 0200 	mov.w	r2, #0
 800c730:	f04f 0300 	mov.w	r3, #0
 800c734:	0a02      	lsrs	r2, r0, #8
 800c736:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c73a:	0a0b      	lsrs	r3, r1, #8
 800c73c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	1c5a      	adds	r2, r3, #1
 800c744:	60fa      	str	r2, [r7, #12]
 800c746:	783a      	ldrb	r2, [r7, #0]
 800c748:	701a      	strb	r2, [r3, #0]
}
 800c74a:	bf00      	nop
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c756:	b480      	push	{r7}
 800c758:	b087      	sub	sp, #28
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	60f8      	str	r0, [r7, #12]
 800c75e:	60b9      	str	r1, [r7, #8]
 800c760:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00d      	beq.n	800c78c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	1c53      	adds	r3, r2, #1
 800c774:	613b      	str	r3, [r7, #16]
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	1c59      	adds	r1, r3, #1
 800c77a:	6179      	str	r1, [r7, #20]
 800c77c:	7812      	ldrb	r2, [r2, #0]
 800c77e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3b01      	subs	r3, #1
 800c784:	607b      	str	r3, [r7, #4]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1f1      	bne.n	800c770 <mem_cpy+0x1a>
	}
}
 800c78c:	bf00      	nop
 800c78e:	371c      	adds	r7, #28
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	617a      	str	r2, [r7, #20]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	b2d2      	uxtb	r2, r2
 800c7b2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	607b      	str	r3, [r7, #4]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1f3      	bne.n	800c7a8 <mem_set+0x10>
}
 800c7c0:	bf00      	nop
 800c7c2:	bf00      	nop
 800c7c4:	371c      	adds	r7, #28
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7cc:	4770      	bx	lr

0800c7ce <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c7ce:	b480      	push	{r7}
 800c7d0:	b089      	sub	sp, #36	; 0x24
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	60f8      	str	r0, [r7, #12]
 800c7d6:	60b9      	str	r1, [r7, #8]
 800c7d8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	61fb      	str	r3, [r7, #28]
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	1c5a      	adds	r2, r3, #1
 800c7ea:	61fa      	str	r2, [r7, #28]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	61ba      	str	r2, [r7, #24]
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	1acb      	subs	r3, r1, r3
 800c7fa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	3b01      	subs	r3, #1
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <mem_cmp+0x40>
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0eb      	beq.n	800c7e6 <mem_cmp+0x18>

	return r;
 800c80e:	697b      	ldr	r3, [r7, #20]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3724      	adds	r7, #36	; 0x24
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c826:	e002      	b.n	800c82e <chk_chr+0x12>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3301      	adds	r3, #1
 800c82c:	607b      	str	r3, [r7, #4]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <chk_chr+0x26>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	781b      	ldrb	r3, [r3, #0]
 800c83a:	461a      	mov	r2, r3
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	4293      	cmp	r3, r2
 800c840:	d1f2      	bne.n	800c828 <chk_chr+0xc>
	return *str;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	781b      	ldrb	r3, [r3, #0]
}
 800c846:	4618      	mov	r0, r3
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
	...

0800c854 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	60fb      	str	r3, [r7, #12]
 800c866:	e029      	b.n	800c8bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c868:	4a27      	ldr	r2, [pc, #156]	; (800c908 <chk_lock+0xb4>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	011b      	lsls	r3, r3, #4
 800c86e:	4413      	add	r3, r2
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	2b00      	cmp	r3, #0
 800c874:	d01d      	beq.n	800c8b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c876:	4a24      	ldr	r2, [pc, #144]	; (800c908 <chk_lock+0xb4>)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	4413      	add	r3, r2
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	429a      	cmp	r2, r3
 800c886:	d116      	bne.n	800c8b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c888:	4a1f      	ldr	r2, [pc, #124]	; (800c908 <chk_lock+0xb4>)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	4413      	add	r3, r2
 800c890:	3304      	adds	r3, #4
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c898:	429a      	cmp	r2, r3
 800c89a:	d10c      	bne.n	800c8b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c89c:	4a1a      	ldr	r2, [pc, #104]	; (800c908 <chk_lock+0xb4>)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	011b      	lsls	r3, r3, #4
 800c8a2:	4413      	add	r3, r2
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d102      	bne.n	800c8b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c8b0:	e007      	b.n	800c8c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c8b2:	2301      	movs	r3, #1
 800c8b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b01      	cmp	r3, #1
 800c8c0:	d9d2      	bls.n	800c868 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d109      	bne.n	800c8dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c8c8:	68bb      	ldr	r3, [r7, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <chk_lock+0x80>
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d101      	bne.n	800c8d8 <chk_lock+0x84>
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	e010      	b.n	800c8fa <chk_lock+0xa6>
 800c8d8:	2312      	movs	r3, #18
 800c8da:	e00e      	b.n	800c8fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d108      	bne.n	800c8f4 <chk_lock+0xa0>
 800c8e2:	4a09      	ldr	r2, [pc, #36]	; (800c908 <chk_lock+0xb4>)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	011b      	lsls	r3, r3, #4
 800c8e8:	4413      	add	r3, r2
 800c8ea:	330c      	adds	r3, #12
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8f2:	d101      	bne.n	800c8f8 <chk_lock+0xa4>
 800c8f4:	2310      	movs	r3, #16
 800c8f6:	e000      	b.n	800c8fa <chk_lock+0xa6>
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	24002350 	.word	0x24002350

0800c90c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c912:	2300      	movs	r3, #0
 800c914:	607b      	str	r3, [r7, #4]
 800c916:	e002      	b.n	800c91e <enq_lock+0x12>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3301      	adds	r3, #1
 800c91c:	607b      	str	r3, [r7, #4]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d806      	bhi.n	800c932 <enq_lock+0x26>
 800c924:	4a09      	ldr	r2, [pc, #36]	; (800c94c <enq_lock+0x40>)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	011b      	lsls	r3, r3, #4
 800c92a:	4413      	add	r3, r2
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d1f2      	bne.n	800c918 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2b02      	cmp	r3, #2
 800c936:	bf14      	ite	ne
 800c938:	2301      	movne	r3, #1
 800c93a:	2300      	moveq	r3, #0
 800c93c:	b2db      	uxtb	r3, r3
}
 800c93e:	4618      	mov	r0, r3
 800c940:	370c      	adds	r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	24002350 	.word	0x24002350

0800c950 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c950:	b480      	push	{r7}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c95a:	2300      	movs	r3, #0
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	e01f      	b.n	800c9a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c960:	4a41      	ldr	r2, [pc, #260]	; (800ca68 <inc_lock+0x118>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	011b      	lsls	r3, r3, #4
 800c966:	4413      	add	r3, r2
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	429a      	cmp	r2, r3
 800c970:	d113      	bne.n	800c99a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c972:	4a3d      	ldr	r2, [pc, #244]	; (800ca68 <inc_lock+0x118>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	011b      	lsls	r3, r3, #4
 800c978:	4413      	add	r3, r2
 800c97a:	3304      	adds	r3, #4
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c982:	429a      	cmp	r2, r3
 800c984:	d109      	bne.n	800c99a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c986:	4a38      	ldr	r2, [pc, #224]	; (800ca68 <inc_lock+0x118>)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	011b      	lsls	r3, r3, #4
 800c98c:	4413      	add	r3, r2
 800c98e:	3308      	adds	r3, #8
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800c996:	429a      	cmp	r2, r3
 800c998:	d006      	beq.n	800c9a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d9dc      	bls.n	800c960 <inc_lock+0x10>
 800c9a6:	e000      	b.n	800c9aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c9a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b02      	cmp	r3, #2
 800c9ae:	d132      	bne.n	800ca16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	e002      	b.n	800c9bc <inc_lock+0x6c>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d806      	bhi.n	800c9d0 <inc_lock+0x80>
 800c9c2:	4a29      	ldr	r2, [pc, #164]	; (800ca68 <inc_lock+0x118>)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	011b      	lsls	r3, r3, #4
 800c9c8:	4413      	add	r3, r2
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1f2      	bne.n	800c9b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b02      	cmp	r3, #2
 800c9d4:	d101      	bne.n	800c9da <inc_lock+0x8a>
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	e040      	b.n	800ca5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	4922      	ldr	r1, [pc, #136]	; (800ca68 <inc_lock+0x118>)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	011b      	lsls	r3, r3, #4
 800c9e4:	440b      	add	r3, r1
 800c9e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	689a      	ldr	r2, [r3, #8]
 800c9ec:	491e      	ldr	r1, [pc, #120]	; (800ca68 <inc_lock+0x118>)
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	011b      	lsls	r3, r3, #4
 800c9f2:	440b      	add	r3, r1
 800c9f4:	3304      	adds	r3, #4
 800c9f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9fc:	491a      	ldr	r1, [pc, #104]	; (800ca68 <inc_lock+0x118>)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	011b      	lsls	r3, r3, #4
 800ca02:	440b      	add	r3, r1
 800ca04:	3308      	adds	r3, #8
 800ca06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ca08:	4a17      	ldr	r2, [pc, #92]	; (800ca68 <inc_lock+0x118>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	4413      	add	r3, r2
 800ca10:	330c      	adds	r3, #12
 800ca12:	2200      	movs	r2, #0
 800ca14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d009      	beq.n	800ca30 <inc_lock+0xe0>
 800ca1c:	4a12      	ldr	r2, [pc, #72]	; (800ca68 <inc_lock+0x118>)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	4413      	add	r3, r2
 800ca24:	330c      	adds	r3, #12
 800ca26:	881b      	ldrh	r3, [r3, #0]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d001      	beq.n	800ca30 <inc_lock+0xe0>
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e015      	b.n	800ca5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d108      	bne.n	800ca48 <inc_lock+0xf8>
 800ca36:	4a0c      	ldr	r2, [pc, #48]	; (800ca68 <inc_lock+0x118>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4413      	add	r3, r2
 800ca3e:	330c      	adds	r3, #12
 800ca40:	881b      	ldrh	r3, [r3, #0]
 800ca42:	3301      	adds	r3, #1
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	e001      	b.n	800ca4c <inc_lock+0xfc>
 800ca48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca4c:	4906      	ldr	r1, [pc, #24]	; (800ca68 <inc_lock+0x118>)
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	011b      	lsls	r3, r3, #4
 800ca52:	440b      	add	r3, r1
 800ca54:	330c      	adds	r3, #12
 800ca56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3714      	adds	r7, #20
 800ca60:	46bd      	mov	sp, r7
 800ca62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca66:	4770      	bx	lr
 800ca68:	24002350 	.word	0x24002350

0800ca6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	3b01      	subs	r3, #1
 800ca78:	607b      	str	r3, [r7, #4]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d825      	bhi.n	800cacc <dec_lock+0x60>
		n = Files[i].ctr;
 800ca80:	4a17      	ldr	r2, [pc, #92]	; (800cae0 <dec_lock+0x74>)
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	4413      	add	r3, r2
 800ca88:	330c      	adds	r3, #12
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca8e:	89fb      	ldrh	r3, [r7, #14]
 800ca90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca94:	d101      	bne.n	800ca9a <dec_lock+0x2e>
 800ca96:	2300      	movs	r3, #0
 800ca98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca9a:	89fb      	ldrh	r3, [r7, #14]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <dec_lock+0x3a>
 800caa0:	89fb      	ldrh	r3, [r7, #14]
 800caa2:	3b01      	subs	r3, #1
 800caa4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800caa6:	4a0e      	ldr	r2, [pc, #56]	; (800cae0 <dec_lock+0x74>)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	011b      	lsls	r3, r3, #4
 800caac:	4413      	add	r3, r2
 800caae:	330c      	adds	r3, #12
 800cab0:	89fa      	ldrh	r2, [r7, #14]
 800cab2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cab4:	89fb      	ldrh	r3, [r7, #14]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d105      	bne.n	800cac6 <dec_lock+0x5a>
 800caba:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <dec_lock+0x74>)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	4413      	add	r3, r2
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	737b      	strb	r3, [r7, #13]
 800caca:	e001      	b.n	800cad0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cacc:	2302      	movs	r3, #2
 800cace:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cad0:	7b7b      	ldrb	r3, [r7, #13]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cadc:	4770      	bx	lr
 800cade:	bf00      	nop
 800cae0:	24002350 	.word	0x24002350

0800cae4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800caec:	2300      	movs	r3, #0
 800caee:	60fb      	str	r3, [r7, #12]
 800caf0:	e010      	b.n	800cb14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800caf2:	4a0d      	ldr	r2, [pc, #52]	; (800cb28 <clear_lock+0x44>)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	011b      	lsls	r3, r3, #4
 800caf8:	4413      	add	r3, r2
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	687a      	ldr	r2, [r7, #4]
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d105      	bne.n	800cb0e <clear_lock+0x2a>
 800cb02:	4a09      	ldr	r2, [pc, #36]	; (800cb28 <clear_lock+0x44>)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	011b      	lsls	r3, r3, #4
 800cb08:	4413      	add	r3, r2
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3301      	adds	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d9eb      	bls.n	800caf2 <clear_lock+0xe>
	}
}
 800cb1a:	bf00      	nop
 800cb1c:	bf00      	nop
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	24002350 	.word	0x24002350

0800cb2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b086      	sub	sp, #24
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb34:	2300      	movs	r3, #0
 800cb36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	78db      	ldrb	r3, [r3, #3]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d034      	beq.n	800cbaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	7858      	ldrb	r0, [r3, #1]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb50:	2301      	movs	r3, #1
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	f7ff fbdc 	bl	800c310 <disk_write>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	73fb      	strb	r3, [r7, #15]
 800cb62:	e022      	b.n	800cbaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6e:	697a      	ldr	r2, [r7, #20]
 800cb70:	1ad2      	subs	r2, r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d217      	bcs.n	800cbaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	789b      	ldrb	r3, [r3, #2]
 800cb7e:	613b      	str	r3, [r7, #16]
 800cb80:	e010      	b.n	800cba4 <sync_window+0x78>
					wsect += fs->fsize;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	4413      	add	r3, r2
 800cb8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	7858      	ldrb	r0, [r3, #1]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb96:	2301      	movs	r3, #1
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	f7ff fbb9 	bl	800c310 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb9e:	693b      	ldr	r3, [r7, #16]
 800cba0:	3b01      	subs	r3, #1
 800cba2:	613b      	str	r3, [r7, #16]
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d8eb      	bhi.n	800cb82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3718      	adds	r7, #24
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
 800cbbc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc6:	683a      	ldr	r2, [r7, #0]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d01b      	beq.n	800cc04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f7ff ffad 	bl	800cb2c <sync_window>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbd6:	7bfb      	ldrb	r3, [r7, #15]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d113      	bne.n	800cc04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	7858      	ldrb	r0, [r3, #1]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	f7ff fb71 	bl	800c2d0 <disk_read>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d004      	beq.n	800cbfe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
	...

0800cc10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f7ff ff87 	bl	800cb2c <sync_window>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d159      	bne.n	800ccdc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b03      	cmp	r3, #3
 800cc2e:	d149      	bne.n	800ccc4 <sync_fs+0xb4>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	791b      	ldrb	r3, [r3, #4]
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d145      	bne.n	800ccc4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	899b      	ldrh	r3, [r3, #12]
 800cc42:	461a      	mov	r2, r3
 800cc44:	2100      	movs	r1, #0
 800cc46:	f7ff fda7 	bl	800c798 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	333c      	adds	r3, #60	; 0x3c
 800cc4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc52:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7ff fcae 	bl	800c5b8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	333c      	adds	r3, #60	; 0x3c
 800cc60:	4921      	ldr	r1, [pc, #132]	; (800cce8 <sync_fs+0xd8>)
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fcc3 	bl	800c5ee <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	333c      	adds	r3, #60	; 0x3c
 800cc6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc70:	491e      	ldr	r1, [pc, #120]	; (800ccec <sync_fs+0xdc>)
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7ff fcbb 	bl	800c5ee <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	333c      	adds	r3, #60	; 0x3c
 800cc7c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	69db      	ldr	r3, [r3, #28]
 800cc84:	4619      	mov	r1, r3
 800cc86:	4610      	mov	r0, r2
 800cc88:	f7ff fcb1 	bl	800c5ee <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	333c      	adds	r3, #60	; 0x3c
 800cc90:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	699b      	ldr	r3, [r3, #24]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	f7ff fca7 	bl	800c5ee <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	7858      	ldrb	r0, [r3, #1]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccb8:	2301      	movs	r3, #1
 800ccba:	f7ff fb29 	bl	800c310 <disk_write>
			fs->fsi_flag = 0;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	785b      	ldrb	r3, [r3, #1]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2100      	movs	r1, #0
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7ff fb3f 	bl	800c350 <disk_ioctl>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d001      	beq.n	800ccdc <sync_fs+0xcc>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	41615252 	.word	0x41615252
 800ccec:	61417272 	.word	0x61417272

0800ccf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	3b02      	subs	r3, #2
 800ccfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	3b02      	subs	r3, #2
 800cd06:	683a      	ldr	r2, [r7, #0]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d301      	bcc.n	800cd10 <clust2sect+0x20>
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	e008      	b.n	800cd22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	895b      	ldrh	r3, [r3, #10]
 800cd14:	461a      	mov	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	fb03 f202 	mul.w	r2, r3, r2
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd20:	4413      	add	r3, r2
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
	...

0800cd30 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cd30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cd34:	b088      	sub	sp, #32
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
 800cd3a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d904      	bls.n	800cd52 <get_fat+0x22>
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	683a      	ldr	r2, [r7, #0]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d302      	bcc.n	800cd58 <get_fat+0x28>
		val = 1;	/* Internal error */
 800cd52:	2301      	movs	r3, #1
 800cd54:	61fb      	str	r3, [r7, #28]
 800cd56:	e13a      	b.n	800cfce <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd58:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	3b01      	subs	r3, #1
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	f200 8126 	bhi.w	800cfb6 <get_fat+0x286>
 800cd6a:	a201      	add	r2, pc, #4	; (adr r2, 800cd70 <get_fat+0x40>)
 800cd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd70:	0800cd81 	.word	0x0800cd81
 800cd74:	0800ce2f 	.word	0x0800ce2f
 800cd78:	0800ce7b 	.word	0x0800ce7b
 800cd7c:	0800cecb 	.word	0x0800cecb
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	085b      	lsrs	r3, r3, #1
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	899b      	ldrh	r3, [r3, #12]
 800cd96:	4619      	mov	r1, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd9e:	4413      	add	r3, r2
 800cda0:	4619      	mov	r1, r3
 800cda2:	69b8      	ldr	r0, [r7, #24]
 800cda4:	f7ff ff06 	bl	800cbb4 <move_window>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f040 8106 	bne.w	800cfbc <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	60fa      	str	r2, [r7, #12]
 800cdb6:	69ba      	ldr	r2, [r7, #24]
 800cdb8:	8992      	ldrh	r2, [r2, #12]
 800cdba:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdbe:	fb01 f202 	mul.w	r2, r1, r2
 800cdc2:	1a9b      	subs	r3, r3, r2
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdcc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cdce:	69bb      	ldr	r3, [r7, #24]
 800cdd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdd2:	69bb      	ldr	r3, [r7, #24]
 800cdd4:	899b      	ldrh	r3, [r3, #12]
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	fbb3 f3f1 	udiv	r3, r3, r1
 800cdde:	4413      	add	r3, r2
 800cde0:	4619      	mov	r1, r3
 800cde2:	69b8      	ldr	r0, [r7, #24]
 800cde4:	f7ff fee6 	bl	800cbb4 <move_window>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f040 80e8 	bne.w	800cfc0 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cdf0:	69bb      	ldr	r3, [r7, #24]
 800cdf2:	899b      	ldrh	r3, [r3, #12]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdfc:	fb01 f202 	mul.w	r2, r1, r2
 800ce00:	1a9b      	subs	r3, r3, r2
 800ce02:	69ba      	ldr	r2, [r7, #24]
 800ce04:	4413      	add	r3, r2
 800ce06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce0a:	021b      	lsls	r3, r3, #8
 800ce0c:	461a      	mov	r2, r3
 800ce0e:	68bb      	ldr	r3, [r7, #8]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	f003 0301 	and.w	r3, r3, #1
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d002      	beq.n	800ce24 <get_fat+0xf4>
 800ce1e:	68bb      	ldr	r3, [r7, #8]
 800ce20:	091b      	lsrs	r3, r3, #4
 800ce22:	e002      	b.n	800ce2a <get_fat+0xfa>
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce2a:	61fb      	str	r3, [r7, #28]
			break;
 800ce2c:	e0cf      	b.n	800cfce <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	899b      	ldrh	r3, [r3, #12]
 800ce36:	085b      	lsrs	r3, r3, #1
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce42:	4413      	add	r3, r2
 800ce44:	4619      	mov	r1, r3
 800ce46:	69b8      	ldr	r0, [r7, #24]
 800ce48:	f7ff feb4 	bl	800cbb4 <move_window>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f040 80b8 	bne.w	800cfc4 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	005b      	lsls	r3, r3, #1
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	8992      	ldrh	r2, [r2, #12]
 800ce62:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce66:	fb00 f202 	mul.w	r2, r0, r2
 800ce6a:	1a9b      	subs	r3, r3, r2
 800ce6c:	440b      	add	r3, r1
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7ff fa8c 	bl	800c38c <ld_word>
 800ce74:	4603      	mov	r3, r0
 800ce76:	61fb      	str	r3, [r7, #28]
			break;
 800ce78:	e0a9      	b.n	800cfce <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce7e:	69bb      	ldr	r3, [r7, #24]
 800ce80:	899b      	ldrh	r3, [r3, #12]
 800ce82:	089b      	lsrs	r3, r3, #2
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	4619      	mov	r1, r3
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce8e:	4413      	add	r3, r2
 800ce90:	4619      	mov	r1, r3
 800ce92:	69b8      	ldr	r0, [r7, #24]
 800ce94:	f7ff fe8e 	bl	800cbb4 <move_window>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f040 8094 	bne.w	800cfc8 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	8992      	ldrh	r2, [r2, #12]
 800ceae:	fbb3 f0f2 	udiv	r0, r3, r2
 800ceb2:	fb00 f202 	mul.w	r2, r0, r2
 800ceb6:	1a9b      	subs	r3, r3, r2
 800ceb8:	440b      	add	r3, r1
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff fa7e 	bl	800c3bc <ld_dword>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cec6:	61fb      	str	r3, [r7, #28]
			break;
 800cec8:	e081      	b.n	800cfce <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	d070      	beq.n	800cfb6 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cee4:	1e54      	subs	r4, r2, #1
 800cee6:	f143 35ff 	adc.w	r5, r3, #4294967295
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	899b      	ldrh	r3, [r3, #12]
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	2200      	movs	r2, #0
 800cef2:	4698      	mov	r8, r3
 800cef4:	4691      	mov	r9, r2
 800cef6:	4642      	mov	r2, r8
 800cef8:	464b      	mov	r3, r9
 800cefa:	4620      	mov	r0, r4
 800cefc:	4629      	mov	r1, r5
 800cefe:	f7f3 fa47 	bl	8000390 <__aeabi_uldivmod>
 800cf02:	4602      	mov	r2, r0
 800cf04:	460b      	mov	r3, r1
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	895b      	ldrh	r3, [r3, #10]
 800cf0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0e:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	79db      	ldrb	r3, [r3, #7]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d10e      	bne.n	800cf36 <get_fat+0x206>
					if (cofs <= clen) {
 800cf18:	697a      	ldr	r2, [r7, #20]
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d80a      	bhi.n	800cf36 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	429a      	cmp	r2, r3
 800cf26:	d002      	beq.n	800cf2e <get_fat+0x1fe>
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	e001      	b.n	800cf32 <get_fat+0x202>
 800cf2e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf32:	61fb      	str	r3, [r7, #28]
						break;
 800cf34:	e04b      	b.n	800cfce <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	79db      	ldrb	r3, [r3, #7]
 800cf3a:	2b03      	cmp	r3, #3
 800cf3c:	d108      	bne.n	800cf50 <get_fat+0x220>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	699b      	ldr	r3, [r3, #24]
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	429a      	cmp	r2, r3
 800cf46:	d203      	bcs.n	800cf50 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	61fb      	str	r3, [r7, #28]
					break;
 800cf4e:	e03e      	b.n	800cfce <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	79db      	ldrb	r3, [r3, #7]
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d02e      	beq.n	800cfb6 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	69db      	ldr	r3, [r3, #28]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d003      	beq.n	800cf68 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800cf60:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf64:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800cf66:	e032      	b.n	800cfce <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	899b      	ldrh	r3, [r3, #12]
 800cf70:	089b      	lsrs	r3, r3, #2
 800cf72:	b29b      	uxth	r3, r3
 800cf74:	4619      	mov	r1, r3
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf7c:	4413      	add	r3, r2
 800cf7e:	4619      	mov	r1, r3
 800cf80:	69b8      	ldr	r0, [r7, #24]
 800cf82:	f7ff fe17 	bl	800cbb4 <move_window>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d11f      	bne.n	800cfcc <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	69ba      	ldr	r2, [r7, #24]
 800cf98:	8992      	ldrh	r2, [r2, #12]
 800cf9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf9e:	fb00 f202 	mul.w	r2, r0, r2
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	440b      	add	r3, r1
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7ff fa08 	bl	800c3bc <ld_dword>
 800cfac:	4603      	mov	r3, r0
 800cfae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfb2:	61fb      	str	r3, [r7, #28]
					break;
 800cfb4:	e00b      	b.n	800cfce <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	61fb      	str	r3, [r7, #28]
 800cfba:	e008      	b.n	800cfce <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfbc:	bf00      	nop
 800cfbe:	e006      	b.n	800cfce <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfc0:	bf00      	nop
 800cfc2:	e004      	b.n	800cfce <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cfc4:	bf00      	nop
 800cfc6:	e002      	b.n	800cfce <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfc8:	bf00      	nop
 800cfca:	e000      	b.n	800cfce <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cfcc:	bf00      	nop
		}
	}

	return val;
 800cfce:	69fb      	ldr	r3, [r7, #28]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3720      	adds	r7, #32
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cfda:	bf00      	nop

0800cfdc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cfdc:	b590      	push	{r4, r7, lr}
 800cfde:	b089      	sub	sp, #36	; 0x24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cfe8:	2302      	movs	r3, #2
 800cfea:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	f240 8106 	bls.w	800d200 <put_fat+0x224>
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	6a1b      	ldr	r3, [r3, #32]
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	f080 8100 	bcs.w	800d200 <put_fat+0x224>
		switch (fs->fs_type) {
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	2b04      	cmp	r3, #4
 800d006:	f300 8104 	bgt.w	800d212 <put_fat+0x236>
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	f280 80b3 	bge.w	800d176 <put_fat+0x19a>
 800d010:	2b01      	cmp	r3, #1
 800d012:	d003      	beq.n	800d01c <put_fat+0x40>
 800d014:	2b02      	cmp	r3, #2
 800d016:	f000 8083 	beq.w	800d120 <put_fat+0x144>
 800d01a:	e0fa      	b.n	800d212 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	61bb      	str	r3, [r7, #24]
 800d020:	69bb      	ldr	r3, [r7, #24]
 800d022:	085b      	lsrs	r3, r3, #1
 800d024:	69ba      	ldr	r2, [r7, #24]
 800d026:	4413      	add	r3, r2
 800d028:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	899b      	ldrh	r3, [r3, #12]
 800d032:	4619      	mov	r1, r3
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	fbb3 f3f1 	udiv	r3, r3, r1
 800d03a:	4413      	add	r3, r2
 800d03c:	4619      	mov	r1, r3
 800d03e:	68f8      	ldr	r0, [r7, #12]
 800d040:	f7ff fdb8 	bl	800cbb4 <move_window>
 800d044:	4603      	mov	r3, r0
 800d046:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d048:	7ffb      	ldrb	r3, [r7, #31]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	f040 80da 	bne.w	800d204 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	61ba      	str	r2, [r7, #24]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	8992      	ldrh	r2, [r2, #12]
 800d060:	fbb3 f0f2 	udiv	r0, r3, r2
 800d064:	fb00 f202 	mul.w	r2, r0, r2
 800d068:	1a9b      	subs	r3, r3, r2
 800d06a:	440b      	add	r3, r1
 800d06c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00d      	beq.n	800d094 <put_fat+0xb8>
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	b25b      	sxtb	r3, r3
 800d07e:	f003 030f 	and.w	r3, r3, #15
 800d082:	b25a      	sxtb	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	b2db      	uxtb	r3, r3
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	b25b      	sxtb	r3, r3
 800d08c:	4313      	orrs	r3, r2
 800d08e:	b25b      	sxtb	r3, r3
 800d090:	b2db      	uxtb	r3, r3
 800d092:	e001      	b.n	800d098 <put_fat+0xbc>
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	b2db      	uxtb	r3, r3
 800d098:	697a      	ldr	r2, [r7, #20]
 800d09a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	899b      	ldrh	r3, [r3, #12]
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	69bb      	ldr	r3, [r7, #24]
 800d0ae:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0b2:	4413      	add	r3, r2
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f7ff fd7c 	bl	800cbb4 <move_window>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0c0:	7ffb      	ldrb	r3, [r7, #31]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	f040 80a0 	bne.w	800d208 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	899b      	ldrh	r3, [r3, #12]
 800d0d2:	461a      	mov	r2, r3
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800d0da:	fb00 f202 	mul.w	r2, r0, r2
 800d0de:	1a9b      	subs	r3, r3, r2
 800d0e0:	440b      	add	r3, r1
 800d0e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f003 0301 	and.w	r3, r3, #1
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d003      	beq.n	800d0f6 <put_fat+0x11a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	091b      	lsrs	r3, r3, #4
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	e00e      	b.n	800d114 <put_fat+0x138>
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	b25b      	sxtb	r3, r3
 800d0fc:	f023 030f 	bic.w	r3, r3, #15
 800d100:	b25a      	sxtb	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	0a1b      	lsrs	r3, r3, #8
 800d106:	b25b      	sxtb	r3, r3
 800d108:	f003 030f 	and.w	r3, r3, #15
 800d10c:	b25b      	sxtb	r3, r3
 800d10e:	4313      	orrs	r3, r2
 800d110:	b25b      	sxtb	r3, r3
 800d112:	b2db      	uxtb	r3, r3
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2201      	movs	r2, #1
 800d11c:	70da      	strb	r2, [r3, #3]
			break;
 800d11e:	e078      	b.n	800d212 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	899b      	ldrh	r3, [r3, #12]
 800d128:	085b      	lsrs	r3, r3, #1
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	4619      	mov	r1, r3
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	fbb3 f3f1 	udiv	r3, r3, r1
 800d134:	4413      	add	r3, r2
 800d136:	4619      	mov	r1, r3
 800d138:	68f8      	ldr	r0, [r7, #12]
 800d13a:	f7ff fd3b 	bl	800cbb4 <move_window>
 800d13e:	4603      	mov	r3, r0
 800d140:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d142:	7ffb      	ldrb	r3, [r7, #31]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d161      	bne.n	800d20c <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	005b      	lsls	r3, r3, #1
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	8992      	ldrh	r2, [r2, #12]
 800d156:	fbb3 f0f2 	udiv	r0, r3, r2
 800d15a:	fb00 f202 	mul.w	r2, r0, r2
 800d15e:	1a9b      	subs	r3, r3, r2
 800d160:	440b      	add	r3, r1
 800d162:	687a      	ldr	r2, [r7, #4]
 800d164:	b292      	uxth	r2, r2
 800d166:	4611      	mov	r1, r2
 800d168:	4618      	mov	r0, r3
 800d16a:	f7ff fa25 	bl	800c5b8 <st_word>
			fs->wflag = 1;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2201      	movs	r2, #1
 800d172:	70da      	strb	r2, [r3, #3]
			break;
 800d174:	e04d      	b.n	800d212 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	899b      	ldrh	r3, [r3, #12]
 800d17e:	089b      	lsrs	r3, r3, #2
 800d180:	b29b      	uxth	r3, r3
 800d182:	4619      	mov	r1, r3
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	fbb3 f3f1 	udiv	r3, r3, r1
 800d18a:	4413      	add	r3, r2
 800d18c:	4619      	mov	r1, r3
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff fd10 	bl	800cbb4 <move_window>
 800d194:	4603      	mov	r3, r0
 800d196:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d198:	7ffb      	ldrb	r3, [r7, #31]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d138      	bne.n	800d210 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	781b      	ldrb	r3, [r3, #0]
 800d1a2:	2b04      	cmp	r3, #4
 800d1a4:	d017      	beq.n	800d1d6 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	8992      	ldrh	r2, [r2, #12]
 800d1ba:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1be:	fb00 f202 	mul.w	r2, r0, r2
 800d1c2:	1a9b      	subs	r3, r3, r2
 800d1c4:	440b      	add	r3, r1
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7ff f8f8 	bl	800c3bc <ld_dword>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d1d2:	4323      	orrs	r3, r4
 800d1d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	009b      	lsls	r3, r3, #2
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	8992      	ldrh	r2, [r2, #12]
 800d1e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1e8:	fb00 f202 	mul.w	r2, r0, r2
 800d1ec:	1a9b      	subs	r3, r3, r2
 800d1ee:	440b      	add	r3, r1
 800d1f0:	6879      	ldr	r1, [r7, #4]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7ff f9fb 	bl	800c5ee <st_dword>
			fs->wflag = 1;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	70da      	strb	r2, [r3, #3]
			break;
 800d1fe:	e008      	b.n	800d212 <put_fat+0x236>
		}
	}
 800d200:	bf00      	nop
 800d202:	e006      	b.n	800d212 <put_fat+0x236>
			if (res != FR_OK) break;
 800d204:	bf00      	nop
 800d206:	e004      	b.n	800d212 <put_fat+0x236>
			if (res != FR_OK) break;
 800d208:	bf00      	nop
 800d20a:	e002      	b.n	800d212 <put_fat+0x236>
			if (res != FR_OK) break;
 800d20c:	bf00      	nop
 800d20e:	e000      	b.n	800d212 <put_fat+0x236>
			if (res != FR_OK) break;
 800d210:	bf00      	nop
	return res;
 800d212:	7ffb      	ldrb	r3, [r7, #31]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3724      	adds	r7, #36	; 0x24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd90      	pop	{r4, r7, pc}

0800d21c <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08a      	sub	sp, #40	; 0x28
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	3b02      	subs	r3, #2
 800d22c:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	3b02      	subs	r3, #2
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	429a      	cmp	r2, r3
 800d238:	d301      	bcc.n	800d23e <find_bitmap+0x22>
 800d23a:	2300      	movs	r3, #0
 800d23c:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	61fb      	str	r3, [r7, #28]
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	61bb      	str	r3, [r7, #24]
 800d246:	2300      	movs	r3, #0
 800d248:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	08db      	lsrs	r3, r3, #3
 800d252:	68f9      	ldr	r1, [r7, #12]
 800d254:	8989      	ldrh	r1, [r1, #12]
 800d256:	fbb3 f3f1 	udiv	r3, r3, r1
 800d25a:	4413      	add	r3, r2
 800d25c:	4619      	mov	r1, r3
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f7ff fca8 	bl	800cbb4 <move_window>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <find_bitmap+0x54>
 800d26a:	f04f 33ff 	mov.w	r3, #4294967295
 800d26e:	e058      	b.n	800d322 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	08db      	lsrs	r3, r3, #3
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	8992      	ldrh	r2, [r2, #12]
 800d278:	fbb3 f1f2 	udiv	r1, r3, r2
 800d27c:	fb01 f202 	mul.w	r2, r1, r2
 800d280:	1a9b      	subs	r3, r3, r2
 800d282:	623b      	str	r3, [r7, #32]
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2201      	movs	r2, #1
 800d28c:	fa02 f303 	lsl.w	r3, r2, r3
 800d290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	6a3b      	ldr	r3, [r7, #32]
 800d298:	4413      	add	r3, r2
 800d29a:	333c      	adds	r3, #60	; 0x3c
 800d29c:	781a      	ldrb	r2, [r3, #0]
 800d29e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2a2:	4013      	ands	r3, r2
 800d2a4:	74fb      	strb	r3, [r7, #19]
 800d2a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2aa:	005b      	lsls	r3, r3, #1
 800d2ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	61fb      	str	r3, [r7, #28]
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6a1b      	ldr	r3, [r3, #32]
 800d2ba:	3b02      	subs	r3, #2
 800d2bc:	69fa      	ldr	r2, [r7, #28]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d307      	bcc.n	800d2d2 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	61fb      	str	r3, [r7, #28]
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	899b      	ldrh	r3, [r3, #12]
 800d2d0:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d2d2:	7cfb      	ldrb	r3, [r7, #19]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d109      	bne.n	800d2ec <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	617b      	str	r3, [r7, #20]
 800d2de:	697a      	ldr	r2, [r7, #20]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d106      	bne.n	800d2f4 <find_bitmap+0xd8>
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	3302      	adds	r3, #2
 800d2ea:	e01a      	b.n	800d322 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	61bb      	str	r3, [r7, #24]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d2f4:	69fa      	ldr	r2, [r7, #28]
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d101      	bne.n	800d300 <find_bitmap+0xe4>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e010      	b.n	800d322 <find_bitmap+0x106>
			} while (bm);
 800d300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1c5      	bne.n	800d294 <find_bitmap+0x78>
			bm = 1;
 800d308:	2301      	movs	r3, #1
 800d30a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d30e:	6a3b      	ldr	r3, [r7, #32]
 800d310:	3301      	adds	r3, #1
 800d312:	623b      	str	r3, [r7, #32]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	899b      	ldrh	r3, [r3, #12]
 800d318:	461a      	mov	r2, r3
 800d31a:	6a3b      	ldr	r3, [r7, #32]
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d3b9      	bcc.n	800d294 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d320:	e793      	b.n	800d24a <find_bitmap+0x2e>
	}
}
 800d322:	4618      	mov	r0, r3
 800d324:	3728      	adds	r7, #40	; 0x28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b088      	sub	sp, #32
 800d32e:	af00      	add	r7, sp, #0
 800d330:	60f8      	str	r0, [r7, #12]
 800d332:	60b9      	str	r1, [r7, #8]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d338:	68bb      	ldr	r3, [r7, #8]
 800d33a:	3b02      	subs	r3, #2
 800d33c:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	08db      	lsrs	r3, r3, #3
 800d346:	68f9      	ldr	r1, [r7, #12]
 800d348:	8989      	ldrh	r1, [r1, #12]
 800d34a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d34e:	4413      	add	r3, r2
 800d350:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	08db      	lsrs	r3, r3, #3
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	8992      	ldrh	r2, [r2, #12]
 800d35a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d35e:	fb01 f202 	mul.w	r2, r1, r2
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	f003 0307 	and.w	r3, r3, #7
 800d36c:	2201      	movs	r2, #1
 800d36e:	fa02 f303 	lsl.w	r3, r2, r3
 800d372:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	1c5a      	adds	r2, r3, #1
 800d378:	617a      	str	r2, [r7, #20]
 800d37a:	4619      	mov	r1, r3
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7ff fc19 	bl	800cbb4 <move_window>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d001      	beq.n	800d38c <change_bitmap+0x62>
 800d388:	2301      	movs	r3, #1
 800d38a:	e03f      	b.n	800d40c <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d38c:	68fa      	ldr	r2, [r7, #12]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	4413      	add	r3, r2
 800d392:	333c      	adds	r3, #60	; 0x3c
 800d394:	781a      	ldrb	r2, [r3, #0]
 800d396:	7ffb      	ldrb	r3, [r7, #31]
 800d398:	4013      	ands	r3, r2
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	bf14      	ite	ne
 800d3a0:	2301      	movne	r3, #1
 800d3a2:	2300      	moveq	r3, #0
 800d3a4:	b2db      	uxtb	r3, r3
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	4293      	cmp	r3, r2
 800d3ac:	d101      	bne.n	800d3b2 <change_bitmap+0x88>
 800d3ae:	2302      	movs	r3, #2
 800d3b0:	e02c      	b.n	800d40c <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d3b2:	68fa      	ldr	r2, [r7, #12]
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	4413      	add	r3, r2
 800d3b8:	333c      	adds	r3, #60	; 0x3c
 800d3ba:	781a      	ldrb	r2, [r3, #0]
 800d3bc:	7ffb      	ldrb	r3, [r7, #31]
 800d3be:	4053      	eors	r3, r2
 800d3c0:	b2d9      	uxtb	r1, r3
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	333c      	adds	r3, #60	; 0x3c
 800d3ca:	460a      	mov	r2, r1
 800d3cc:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2201      	movs	r2, #1
 800d3d2:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	607b      	str	r3, [r7, #4]
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d101      	bne.n	800d3e4 <change_bitmap+0xba>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e013      	b.n	800d40c <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800d3e4:	7ffb      	ldrb	r3, [r7, #31]
 800d3e6:	005b      	lsls	r3, r3, #1
 800d3e8:	77fb      	strb	r3, [r7, #31]
 800d3ea:	7ffb      	ldrb	r3, [r7, #31]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1cd      	bne.n	800d38c <change_bitmap+0x62>
			bm = 1;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	61bb      	str	r3, [r7, #24]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	899b      	ldrh	r3, [r3, #12]
 800d3fe:	461a      	mov	r2, r3
 800d400:	69bb      	ldr	r3, [r7, #24]
 800d402:	4293      	cmp	r3, r2
 800d404:	d3c2      	bcc.n	800d38c <change_bitmap+0x62>
		i = 0;
 800d406:	2300      	movs	r3, #0
 800d408:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d40a:	e7b3      	b.n	800d374 <change_bitmap+0x4a>
	}
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3720      	adds	r7, #32
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b086      	sub	sp, #24
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	79db      	ldrb	r3, [r3, #7]
 800d420:	2b03      	cmp	r3, #3
 800d422:	d121      	bne.n	800d468 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	617b      	str	r3, [r7, #20]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	699b      	ldr	r3, [r3, #24]
 800d42e:	613b      	str	r3, [r7, #16]
 800d430:	e014      	b.n	800d45c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6818      	ldr	r0, [r3, #0]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	3301      	adds	r3, #1
 800d43a:	461a      	mov	r2, r3
 800d43c:	6979      	ldr	r1, [r7, #20]
 800d43e:	f7ff fdcd 	bl	800cfdc <put_fat>
 800d442:	4603      	mov	r3, r0
 800d444:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d446:	7bfb      	ldrb	r3, [r7, #15]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d001      	beq.n	800d450 <fill_first_frag+0x3c>
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	e00c      	b.n	800d46a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	3301      	adds	r3, #1
 800d454:	617b      	str	r3, [r7, #20]
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	3b01      	subs	r3, #1
 800d45a:	613b      	str	r3, [r7, #16]
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e7      	bne.n	800d432 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d468:	2300      	movs	r3, #0
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3718      	adds	r7, #24
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}

0800d472 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d472:	b580      	push	{r7, lr}
 800d474:	b086      	sub	sp, #24
 800d476:	af00      	add	r7, sp, #0
 800d478:	60f8      	str	r0, [r7, #12]
 800d47a:	60b9      	str	r1, [r7, #8]
 800d47c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d47e:	e020      	b.n	800d4c2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6818      	ldr	r0, [r3, #0]
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	69db      	ldr	r3, [r3, #28]
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	1c59      	adds	r1, r3, #1
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	69db      	ldr	r3, [r3, #28]
 800d492:	2b01      	cmp	r3, #1
 800d494:	d905      	bls.n	800d4a2 <fill_last_frag+0x30>
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	69db      	ldr	r3, [r3, #28]
 800d49a:	68ba      	ldr	r2, [r7, #8]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	3302      	adds	r3, #2
 800d4a0:	e000      	b.n	800d4a4 <fill_last_frag+0x32>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	f7ff fd99 	bl	800cfdc <put_fat>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d001      	beq.n	800d4b8 <fill_last_frag+0x46>
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	e009      	b.n	800d4cc <fill_last_frag+0x5a>
		obj->n_frag--;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	69db      	ldr	r3, [r3, #28]
 800d4bc:	1e5a      	subs	r2, r3, #1
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	69db      	ldr	r3, [r3, #28]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d1da      	bne.n	800d480 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3718      	adds	r7, #24
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b08a      	sub	sp, #40	; 0x28
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2b01      	cmp	r3, #1
 800d4f6:	d904      	bls.n	800d502 <remove_chain+0x2e>
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	6a1b      	ldr	r3, [r3, #32]
 800d4fc:	68ba      	ldr	r2, [r7, #8]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d301      	bcc.n	800d506 <remove_chain+0x32>
 800d502:	2302      	movs	r3, #2
 800d504:	e096      	b.n	800d634 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d014      	beq.n	800d536 <remove_chain+0x62>
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	781b      	ldrb	r3, [r3, #0]
 800d510:	2b04      	cmp	r3, #4
 800d512:	d103      	bne.n	800d51c <remove_chain+0x48>
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	79db      	ldrb	r3, [r3, #7]
 800d518:	2b02      	cmp	r3, #2
 800d51a:	d00c      	beq.n	800d536 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d51c:	f04f 32ff 	mov.w	r2, #4294967295
 800d520:	6879      	ldr	r1, [r7, #4]
 800d522:	69b8      	ldr	r0, [r7, #24]
 800d524:	f7ff fd5a 	bl	800cfdc <put_fat>
 800d528:	4603      	mov	r3, r0
 800d52a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d52c:	7ffb      	ldrb	r3, [r7, #31]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <remove_chain+0x62>
 800d532:	7ffb      	ldrb	r3, [r7, #31]
 800d534:	e07e      	b.n	800d634 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d536:	68b9      	ldr	r1, [r7, #8]
 800d538:	68f8      	ldr	r0, [r7, #12]
 800d53a:	f7ff fbf9 	bl	800cd30 <get_fat>
 800d53e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d055      	beq.n	800d5f2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d101      	bne.n	800d550 <remove_chain+0x7c>
 800d54c:	2302      	movs	r3, #2
 800d54e:	e071      	b.n	800d634 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d556:	d101      	bne.n	800d55c <remove_chain+0x88>
 800d558:	2301      	movs	r3, #1
 800d55a:	e06b      	b.n	800d634 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d55c:	69bb      	ldr	r3, [r7, #24]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2b04      	cmp	r3, #4
 800d562:	d00b      	beq.n	800d57c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d564:	2200      	movs	r2, #0
 800d566:	68b9      	ldr	r1, [r7, #8]
 800d568:	69b8      	ldr	r0, [r7, #24]
 800d56a:	f7ff fd37 	bl	800cfdc <put_fat>
 800d56e:	4603      	mov	r3, r0
 800d570:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d572:	7ffb      	ldrb	r3, [r7, #31]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <remove_chain+0xa8>
 800d578:	7ffb      	ldrb	r3, [r7, #31]
 800d57a:	e05b      	b.n	800d634 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d57c:	69bb      	ldr	r3, [r7, #24]
 800d57e:	69da      	ldr	r2, [r3, #28]
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	3b02      	subs	r3, #2
 800d586:	429a      	cmp	r2, r3
 800d588:	d20b      	bcs.n	800d5a2 <remove_chain+0xce>
			fs->free_clst++;
 800d58a:	69bb      	ldr	r3, [r7, #24]
 800d58c:	69db      	ldr	r3, [r3, #28]
 800d58e:	1c5a      	adds	r2, r3, #1
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	791b      	ldrb	r3, [r3, #4]
 800d598:	f043 0301 	orr.w	r3, r3, #1
 800d59c:	b2da      	uxtb	r2, r3
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d5a2:	6a3b      	ldr	r3, [r7, #32]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d102      	bne.n	800d5b2 <remove_chain+0xde>
			ecl = nxt;
 800d5ac:	697b      	ldr	r3, [r7, #20]
 800d5ae:	623b      	str	r3, [r7, #32]
 800d5b0:	e017      	b.n	800d5e2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	2b04      	cmp	r3, #4
 800d5b8:	d10f      	bne.n	800d5da <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d5ba:	6a3a      	ldr	r2, [r7, #32]
 800d5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d5c6:	69b8      	ldr	r0, [r7, #24]
 800d5c8:	f7ff feaf 	bl	800d32a <change_bitmap>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d5d0:	7ffb      	ldrb	r3, [r7, #31]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d001      	beq.n	800d5da <remove_chain+0x106>
 800d5d6:	7ffb      	ldrb	r3, [r7, #31]
 800d5d8:	e02c      	b.n	800d634 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d5da:	697b      	ldr	r3, [r7, #20]
 800d5dc:	623b      	str	r3, [r7, #32]
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d5e6:	69bb      	ldr	r3, [r7, #24]
 800d5e8:	6a1b      	ldr	r3, [r3, #32]
 800d5ea:	68ba      	ldr	r2, [r7, #8]
 800d5ec:	429a      	cmp	r2, r3
 800d5ee:	d3a2      	bcc.n	800d536 <remove_chain+0x62>
 800d5f0:	e000      	b.n	800d5f4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d5f2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d5f4:	69bb      	ldr	r3, [r7, #24]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b04      	cmp	r3, #4
 800d5fa:	d11a      	bne.n	800d632 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d103      	bne.n	800d60a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	2200      	movs	r2, #0
 800d606:	71da      	strb	r2, [r3, #7]
 800d608:	e013      	b.n	800d632 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	79db      	ldrb	r3, [r3, #7]
 800d60e:	2b03      	cmp	r3, #3
 800d610:	d10f      	bne.n	800d632 <remove_chain+0x15e>
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	689b      	ldr	r3, [r3, #8]
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d30a      	bcc.n	800d632 <remove_chain+0x15e>
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	689a      	ldr	r2, [r3, #8]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	699b      	ldr	r3, [r3, #24]
 800d624:	4413      	add	r3, r2
 800d626:	687a      	ldr	r2, [r7, #4]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d802      	bhi.n	800d632 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2202      	movs	r2, #2
 800d630:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d632:	2300      	movs	r3, #0
}
 800d634:	4618      	mov	r0, r3
 800d636:	3728      	adds	r7, #40	; 0x28
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d10d      	bne.n	800d66e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	699b      	ldr	r3, [r3, #24]
 800d656:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d004      	beq.n	800d668 <create_chain+0x2c>
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	6a1b      	ldr	r3, [r3, #32]
 800d662:	69ba      	ldr	r2, [r7, #24]
 800d664:	429a      	cmp	r2, r3
 800d666:	d31b      	bcc.n	800d6a0 <create_chain+0x64>
 800d668:	2301      	movs	r3, #1
 800d66a:	61bb      	str	r3, [r7, #24]
 800d66c:	e018      	b.n	800d6a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d66e:	6839      	ldr	r1, [r7, #0]
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7ff fb5d 	bl	800cd30 <get_fat>
 800d676:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d801      	bhi.n	800d682 <create_chain+0x46>
 800d67e:	2301      	movs	r3, #1
 800d680:	e0d9      	b.n	800d836 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d688:	d101      	bne.n	800d68e <create_chain+0x52>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	e0d3      	b.n	800d836 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	6a1b      	ldr	r3, [r3, #32]
 800d692:	68fa      	ldr	r2, [r7, #12]
 800d694:	429a      	cmp	r2, r3
 800d696:	d201      	bcs.n	800d69c <create_chain+0x60>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	e0cc      	b.n	800d836 <create_chain+0x1fa>
		scl = clst;
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b04      	cmp	r3, #4
 800d6a6:	d164      	bne.n	800d772 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	69b9      	ldr	r1, [r7, #24]
 800d6ac:	6938      	ldr	r0, [r7, #16]
 800d6ae:	f7ff fdb5 	bl	800d21c <find_bitmap>
 800d6b2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d003      	beq.n	800d6c2 <create_chain+0x86>
 800d6ba:	69fb      	ldr	r3, [r7, #28]
 800d6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c0:	d101      	bne.n	800d6c6 <create_chain+0x8a>
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	e0b7      	b.n	800d836 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d6c6:	2301      	movs	r3, #1
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	69f9      	ldr	r1, [r7, #28]
 800d6cc:	6938      	ldr	r0, [r7, #16]
 800d6ce:	f7ff fe2c 	bl	800d32a <change_bitmap>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	2b02      	cmp	r3, #2
 800d6da:	d101      	bne.n	800d6e0 <create_chain+0xa4>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e0aa      	b.n	800d836 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d6e0:	7dfb      	ldrb	r3, [r7, #23]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d102      	bne.n	800d6ec <create_chain+0xb0>
 800d6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6ea:	e0a4      	b.n	800d836 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	71da      	strb	r2, [r3, #7]
 800d6f8:	e011      	b.n	800d71e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	79db      	ldrb	r3, [r3, #7]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	d10d      	bne.n	800d71e <create_chain+0xe2>
 800d702:	69bb      	ldr	r3, [r7, #24]
 800d704:	3301      	adds	r3, #1
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	429a      	cmp	r2, r3
 800d70a:	d008      	beq.n	800d71e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	69ba      	ldr	r2, [r7, #24]
 800d712:	1ad2      	subs	r2, r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2203      	movs	r2, #3
 800d71c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	79db      	ldrb	r3, [r3, #7]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d064      	beq.n	800d7f0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	3301      	adds	r3, #1
 800d72a:	69fa      	ldr	r2, [r7, #28]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d10b      	bne.n	800d748 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	69db      	ldr	r3, [r3, #28]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d003      	beq.n	800d740 <create_chain+0x104>
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	69db      	ldr	r3, [r3, #28]
 800d73c:	3301      	adds	r3, #1
 800d73e:	e000      	b.n	800d742 <create_chain+0x106>
 800d740:	2302      	movs	r3, #2
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	61d3      	str	r3, [r2, #28]
 800d746:	e053      	b.n	800d7f0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	69db      	ldr	r3, [r3, #28]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d102      	bne.n	800d756 <create_chain+0x11a>
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d756:	69fa      	ldr	r2, [r7, #28]
 800d758:	6839      	ldr	r1, [r7, #0]
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f7ff fe89 	bl	800d472 <fill_last_frag>
 800d760:	4603      	mov	r3, r0
 800d762:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800d764:	7dfb      	ldrb	r3, [r7, #23]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d142      	bne.n	800d7f0 <create_chain+0x1b4>
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2201      	movs	r2, #1
 800d76e:	61da      	str	r2, [r3, #28]
 800d770:	e03e      	b.n	800d7f0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d772:	69bb      	ldr	r3, [r7, #24]
 800d774:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	3301      	adds	r3, #1
 800d77a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	6a1b      	ldr	r3, [r3, #32]
 800d780:	69fa      	ldr	r2, [r7, #28]
 800d782:	429a      	cmp	r2, r3
 800d784:	d307      	bcc.n	800d796 <create_chain+0x15a>
				ncl = 2;
 800d786:	2302      	movs	r3, #2
 800d788:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d78a:	69fa      	ldr	r2, [r7, #28]
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	429a      	cmp	r2, r3
 800d790:	d901      	bls.n	800d796 <create_chain+0x15a>
 800d792:	2300      	movs	r3, #0
 800d794:	e04f      	b.n	800d836 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d796:	69f9      	ldr	r1, [r7, #28]
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff fac9 	bl	800cd30 <get_fat>
 800d79e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00e      	beq.n	800d7c4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b01      	cmp	r3, #1
 800d7aa:	d003      	beq.n	800d7b4 <create_chain+0x178>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b2:	d101      	bne.n	800d7b8 <create_chain+0x17c>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	e03e      	b.n	800d836 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d1da      	bne.n	800d776 <create_chain+0x13a>
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	e038      	b.n	800d836 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800d7c4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ca:	69f9      	ldr	r1, [r7, #28]
 800d7cc:	6938      	ldr	r0, [r7, #16]
 800d7ce:	f7ff fc05 	bl	800cfdc <put_fat>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <create_chain+0x1b4>
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d006      	beq.n	800d7f0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d7e2:	69fa      	ldr	r2, [r7, #28]
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	6938      	ldr	r0, [r7, #16]
 800d7e8:	f7ff fbf8 	bl	800cfdc <put_fat>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d7f0:	7dfb      	ldrb	r3, [r7, #23]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d116      	bne.n	800d824 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	69fa      	ldr	r2, [r7, #28]
 800d7fa:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	69da      	ldr	r2, [r3, #28]
 800d800:	693b      	ldr	r3, [r7, #16]
 800d802:	6a1b      	ldr	r3, [r3, #32]
 800d804:	3b02      	subs	r3, #2
 800d806:	429a      	cmp	r2, r3
 800d808:	d804      	bhi.n	800d814 <create_chain+0x1d8>
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	1e5a      	subs	r2, r3, #1
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	791b      	ldrb	r3, [r3, #4]
 800d818:	f043 0301 	orr.w	r3, r3, #1
 800d81c:	b2da      	uxtb	r2, r3
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	711a      	strb	r2, [r3, #4]
 800d822:	e007      	b.n	800d834 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d824:	7dfb      	ldrb	r3, [r7, #23]
 800d826:	2b01      	cmp	r3, #1
 800d828:	d102      	bne.n	800d830 <create_chain+0x1f4>
 800d82a:	f04f 33ff 	mov.w	r3, #4294967295
 800d82e:	e000      	b.n	800d832 <create_chain+0x1f6>
 800d830:	2301      	movs	r3, #1
 800d832:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d834:	69fb      	ldr	r3, [r7, #28]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3720      	adds	r7, #32
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d83e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d842:	b088      	sub	sp, #32
 800d844:	af00      	add	r7, sp, #0
 800d846:	60f8      	str	r0, [r7, #12]
 800d848:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d856:	3304      	adds	r3, #4
 800d858:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	899b      	ldrh	r3, [r3, #12]
 800d85e:	b29b      	uxth	r3, r3
 800d860:	2200      	movs	r2, #0
 800d862:	4698      	mov	r8, r3
 800d864:	4691      	mov	r9, r2
 800d866:	4642      	mov	r2, r8
 800d868:	464b      	mov	r3, r9
 800d86a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d86e:	f7f2 fd8f 	bl	8000390 <__aeabi_uldivmod>
 800d872:	4602      	mov	r2, r0
 800d874:	460b      	mov	r3, r1
 800d876:	4610      	mov	r0, r2
 800d878:	4619      	mov	r1, r3
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	895b      	ldrh	r3, [r3, #10]
 800d87e:	b29b      	uxth	r3, r3
 800d880:	2200      	movs	r2, #0
 800d882:	461c      	mov	r4, r3
 800d884:	4615      	mov	r5, r2
 800d886:	4622      	mov	r2, r4
 800d888:	462b      	mov	r3, r5
 800d88a:	f7f2 fd81 	bl	8000390 <__aeabi_uldivmod>
 800d88e:	4602      	mov	r2, r0
 800d890:	460b      	mov	r3, r1
 800d892:	4613      	mov	r3, r2
 800d894:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	1d1a      	adds	r2, r3, #4
 800d89a:	61ba      	str	r2, [r7, #24]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <clmt_clust+0x6c>
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	e010      	b.n	800d8cc <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800d8aa:	69fa      	ldr	r2, [r7, #28]
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d307      	bcc.n	800d8c2 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800d8b2:	69fa      	ldr	r2, [r7, #28]
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	61fb      	str	r3, [r7, #28]
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	3304      	adds	r3, #4
 800d8be:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d8c0:	e7e9      	b.n	800d896 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800d8c2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	4413      	add	r3, r2
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3720      	adds	r7, #32
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d8d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b086      	sub	sp, #24
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	2b04      	cmp	r3, #4
 800d8ec:	d102      	bne.n	800d8f4 <dir_sdi+0x1e>
 800d8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8f2:	e001      	b.n	800d8f8 <dir_sdi+0x22>
 800d8f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	429a      	cmp	r2, r3
 800d8fc:	d904      	bls.n	800d908 <dir_sdi+0x32>
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	f003 031f 	and.w	r3, r3, #31
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <dir_sdi+0x36>
		return FR_INT_ERR;
 800d908:	2302      	movs	r3, #2
 800d90a:	e074      	b.n	800d9f6 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	683a      	ldr	r2, [r7, #0]
 800d910:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d109      	bne.n	800d932 <dir_sdi+0x5c>
 800d91e:	693b      	ldr	r3, [r7, #16]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	2b02      	cmp	r3, #2
 800d924:	d905      	bls.n	800d932 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d92a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10c      	bne.n	800d952 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	095b      	lsrs	r3, r3, #5
 800d93c:	693a      	ldr	r2, [r7, #16]
 800d93e:	8912      	ldrh	r2, [r2, #8]
 800d940:	4293      	cmp	r3, r2
 800d942:	d301      	bcc.n	800d948 <dir_sdi+0x72>
 800d944:	2302      	movs	r3, #2
 800d946:	e056      	b.n	800d9f6 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	639a      	str	r2, [r3, #56]	; 0x38
 800d950:	e02d      	b.n	800d9ae <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d952:	693b      	ldr	r3, [r7, #16]
 800d954:	895b      	ldrh	r3, [r3, #10]
 800d956:	461a      	mov	r2, r3
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	899b      	ldrh	r3, [r3, #12]
 800d95c:	fb02 f303 	mul.w	r3, r2, r3
 800d960:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d962:	e019      	b.n	800d998 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6979      	ldr	r1, [r7, #20]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7ff f9e1 	bl	800cd30 <get_fat>
 800d96e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d976:	d101      	bne.n	800d97c <dir_sdi+0xa6>
 800d978:	2301      	movs	r3, #1
 800d97a:	e03c      	b.n	800d9f6 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d904      	bls.n	800d98c <dir_sdi+0xb6>
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	6a1b      	ldr	r3, [r3, #32]
 800d986:	697a      	ldr	r2, [r7, #20]
 800d988:	429a      	cmp	r2, r3
 800d98a:	d301      	bcc.n	800d990 <dir_sdi+0xba>
 800d98c:	2302      	movs	r3, #2
 800d98e:	e032      	b.n	800d9f6 <dir_sdi+0x120>
			ofs -= csz;
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d2e1      	bcs.n	800d964 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800d9a0:	6979      	ldr	r1, [r7, #20]
 800d9a2:	6938      	ldr	r0, [r7, #16]
 800d9a4:	f7ff f9a4 	bl	800ccf0 <clust2sect>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <dir_sdi+0xea>
 800d9bc:	2302      	movs	r3, #2
 800d9be:	e01a      	b.n	800d9f6 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	899b      	ldrh	r3, [r3, #12]
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9d0:	441a      	add	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d9d6:	693b      	ldr	r3, [r7, #16]
 800d9d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	899b      	ldrh	r3, [r3, #12]
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9e8:	fb00 f202 	mul.w	r2, r0, r2
 800d9ec:	1a9b      	subs	r3, r3, r2
 800d9ee:	18ca      	adds	r2, r1, r3
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d9f4:	2300      	movs	r3, #0
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3718      	adds	r7, #24
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}

0800d9fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d9fe:	b580      	push	{r7, lr}
 800da00:	b086      	sub	sp, #24
 800da02:	af00      	add	r7, sp, #0
 800da04:	6078      	str	r0, [r7, #4]
 800da06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da12:	3320      	adds	r3, #32
 800da14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00b      	beq.n	800da36 <dir_next+0x38>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	2b04      	cmp	r3, #4
 800da24:	d102      	bne.n	800da2c <dir_next+0x2e>
 800da26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da2a:	e001      	b.n	800da30 <dir_next+0x32>
 800da2c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	429a      	cmp	r2, r3
 800da34:	d801      	bhi.n	800da3a <dir_next+0x3c>
 800da36:	2304      	movs	r3, #4
 800da38:	e0c3      	b.n	800dbc2 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	899b      	ldrh	r3, [r3, #12]
 800da3e:	461a      	mov	r2, r3
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	fbb3 f1f2 	udiv	r1, r3, r2
 800da46:	fb01 f202 	mul.w	r2, r1, r2
 800da4a:	1a9b      	subs	r3, r3, r2
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	f040 80a5 	bne.w	800db9c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da56:	1c5a      	adds	r2, r3, #1
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10b      	bne.n	800da7c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	095b      	lsrs	r3, r3, #5
 800da68:	68fa      	ldr	r2, [r7, #12]
 800da6a:	8912      	ldrh	r2, [r2, #8]
 800da6c:	4293      	cmp	r3, r2
 800da6e:	f0c0 8095 	bcc.w	800db9c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2200      	movs	r2, #0
 800da76:	639a      	str	r2, [r3, #56]	; 0x38
 800da78:	2304      	movs	r3, #4
 800da7a:	e0a2      	b.n	800dbc2 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	899b      	ldrh	r3, [r3, #12]
 800da80:	461a      	mov	r2, r3
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	fbb3 f3f2 	udiv	r3, r3, r2
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	8952      	ldrh	r2, [r2, #10]
 800da8c:	3a01      	subs	r2, #1
 800da8e:	4013      	ands	r3, r2
 800da90:	2b00      	cmp	r3, #0
 800da92:	f040 8083 	bne.w	800db9c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7ff f946 	bl	800cd30 <get_fat>
 800daa4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d801      	bhi.n	800dab0 <dir_next+0xb2>
 800daac:	2302      	movs	r3, #2
 800daae:	e088      	b.n	800dbc2 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dab6:	d101      	bne.n	800dabc <dir_next+0xbe>
 800dab8:	2301      	movs	r3, #1
 800daba:	e082      	b.n	800dbc2 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	6a1b      	ldr	r3, [r3, #32]
 800dac0:	697a      	ldr	r2, [r7, #20]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d360      	bcc.n	800db88 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d104      	bne.n	800dad6 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	639a      	str	r2, [r3, #56]	; 0x38
 800dad2:	2304      	movs	r3, #4
 800dad4:	e075      	b.n	800dbc2 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dad6:	687a      	ldr	r2, [r7, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dadc:	4619      	mov	r1, r3
 800dade:	4610      	mov	r0, r2
 800dae0:	f7ff fdac 	bl	800d63c <create_chain>
 800dae4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <dir_next+0xf2>
 800daec:	2307      	movs	r3, #7
 800daee:	e068      	b.n	800dbc2 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d101      	bne.n	800dafa <dir_next+0xfc>
 800daf6:	2302      	movs	r3, #2
 800daf8:	e063      	b.n	800dbc2 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db00:	d101      	bne.n	800db06 <dir_next+0x108>
 800db02:	2301      	movs	r3, #1
 800db04:	e05d      	b.n	800dbc2 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	79db      	ldrb	r3, [r3, #7]
 800db0a:	f043 0304 	orr.w	r3, r3, #4
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff f809 	bl	800cb2c <sync_window>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <dir_next+0x126>
 800db20:	2301      	movs	r3, #1
 800db22:	e04e      	b.n	800dbc2 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	899b      	ldrh	r3, [r3, #12]
 800db2e:	461a      	mov	r2, r3
 800db30:	2100      	movs	r1, #0
 800db32:	f7fe fe31 	bl	800c798 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db36:	2300      	movs	r3, #0
 800db38:	613b      	str	r3, [r7, #16]
 800db3a:	6979      	ldr	r1, [r7, #20]
 800db3c:	68f8      	ldr	r0, [r7, #12]
 800db3e:	f7ff f8d7 	bl	800ccf0 <clust2sect>
 800db42:	4602      	mov	r2, r0
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
 800db48:	e012      	b.n	800db70 <dir_next+0x172>
						fs->wflag = 1;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2201      	movs	r2, #1
 800db4e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7fe ffeb 	bl	800cb2c <sync_window>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d001      	beq.n	800db60 <dir_next+0x162>
 800db5c:	2301      	movs	r3, #1
 800db5e:	e030      	b.n	800dbc2 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db60:	693b      	ldr	r3, [r7, #16]
 800db62:	3301      	adds	r3, #1
 800db64:	613b      	str	r3, [r7, #16]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	1c5a      	adds	r2, r3, #1
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	895b      	ldrh	r3, [r3, #10]
 800db74:	461a      	mov	r2, r3
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	4293      	cmp	r3, r2
 800db7a:	d3e6      	bcc.n	800db4a <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db80:	693b      	ldr	r3, [r7, #16]
 800db82:	1ad2      	subs	r2, r2, r3
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	697a      	ldr	r2, [r7, #20]
 800db8c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800db8e:	6979      	ldr	r1, [r7, #20]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	f7ff f8ad 	bl	800ccf0 <clust2sect>
 800db96:	4602      	mov	r2, r0
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	68ba      	ldr	r2, [r7, #8]
 800dba0:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	899b      	ldrh	r3, [r3, #12]
 800dbac:	461a      	mov	r2, r3
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbb4:	fb00 f202 	mul.w	r2, r0, r2
 800dbb8:	1a9b      	subs	r3, r3, r2
 800dbba:	18ca      	adds	r2, r1, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3718      	adds	r7, #24
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b086      	sub	sp, #24
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800dbda:	2100      	movs	r1, #0
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f7ff fe7a 	bl	800d8d6 <dir_sdi>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbe6:	7dfb      	ldrb	r3, [r7, #23]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d140      	bne.n	800dc6e <dir_alloc+0xa4>
		n = 0;
 800dbec:	2300      	movs	r3, #0
 800dbee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f7fe ffdc 	bl	800cbb4 <move_window>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dc00:	7dfb      	ldrb	r3, [r7, #23]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d132      	bne.n	800dc6c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	2b04      	cmp	r3, #4
 800dc0c:	d108      	bne.n	800dc20 <dir_alloc+0x56>
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	b25b      	sxtb	r3, r3
 800dc16:	43db      	mvns	r3, r3
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	09db      	lsrs	r3, r3, #7
 800dc1c:	b2db      	uxtb	r3, r3
 800dc1e:	e00f      	b.n	800dc40 <dir_alloc+0x76>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	2be5      	cmp	r3, #229	; 0xe5
 800dc28:	d004      	beq.n	800dc34 <dir_alloc+0x6a>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc2e:	781b      	ldrb	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <dir_alloc+0x6e>
 800dc34:	2301      	movs	r3, #1
 800dc36:	e000      	b.n	800dc3a <dir_alloc+0x70>
 800dc38:	2300      	movs	r3, #0
 800dc3a:	f003 0301 	and.w	r3, r3, #1
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d007      	beq.n	800dc54 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	3301      	adds	r3, #1
 800dc48:	613b      	str	r3, [r7, #16]
 800dc4a:	693a      	ldr	r2, [r7, #16]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d102      	bne.n	800dc58 <dir_alloc+0x8e>
 800dc52:	e00c      	b.n	800dc6e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc54:	2300      	movs	r3, #0
 800dc56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc58:	2101      	movs	r1, #1
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff fecf 	bl	800d9fe <dir_next>
 800dc60:	4603      	mov	r3, r0
 800dc62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc64:	7dfb      	ldrb	r3, [r7, #23]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d0c2      	beq.n	800dbf0 <dir_alloc+0x26>
 800dc6a:	e000      	b.n	800dc6e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800dc6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc6e:	7dfb      	ldrb	r3, [r7, #23]
 800dc70:	2b04      	cmp	r3, #4
 800dc72:	d101      	bne.n	800dc78 <dir_alloc+0xae>
 800dc74:	2307      	movs	r3, #7
 800dc76:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc78:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3718      	adds	r7, #24
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b084      	sub	sp, #16
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
 800dc8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	331a      	adds	r3, #26
 800dc90:	4618      	mov	r0, r3
 800dc92:	f7fe fb7b 	bl	800c38c <ld_word>
 800dc96:	4603      	mov	r3, r0
 800dc98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	781b      	ldrb	r3, [r3, #0]
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d109      	bne.n	800dcb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	3314      	adds	r3, #20
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fb70 	bl	800c38c <ld_word>
 800dcac:	4603      	mov	r3, r0
 800dcae:	041b      	lsls	r3, r3, #16
 800dcb0:	68fa      	ldr	r2, [r7, #12]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b084      	sub	sp, #16
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	331a      	adds	r3, #26
 800dcd0:	687a      	ldr	r2, [r7, #4]
 800dcd2:	b292      	uxth	r2, r2
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fc6e 	bl	800c5b8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	781b      	ldrb	r3, [r3, #0]
 800dce0:	2b03      	cmp	r3, #3
 800dce2:	d109      	bne.n	800dcf8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	f103 0214 	add.w	r2, r3, #20
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	0c1b      	lsrs	r3, r3, #16
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fe fc60 	bl	800c5b8 <st_word>
	}
}
 800dcf8:	bf00      	nop
 800dcfa:	3710      	adds	r7, #16
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}

0800dd00 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dd00:	b590      	push	{r4, r7, lr}
 800dd02:	b087      	sub	sp, #28
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
 800dd08:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	331a      	adds	r3, #26
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7fe fb3c 	bl	800c38c <ld_word>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d001      	beq.n	800dd1e <cmp_lfn+0x1e>
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	e059      	b.n	800ddd2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd26:	1e5a      	subs	r2, r3, #1
 800dd28:	4613      	mov	r3, r2
 800dd2a:	005b      	lsls	r3, r3, #1
 800dd2c:	4413      	add	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4413      	add	r3, r2
 800dd32:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd34:	2301      	movs	r3, #1
 800dd36:	81fb      	strh	r3, [r7, #14]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	613b      	str	r3, [r7, #16]
 800dd3c:	e033      	b.n	800dda6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dd3e:	4a27      	ldr	r2, [pc, #156]	; (800dddc <cmp_lfn+0xdc>)
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	4413      	add	r3, r2
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	461a      	mov	r2, r3
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f7fe fb1d 	bl	800c38c <ld_word>
 800dd52:	4603      	mov	r3, r0
 800dd54:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd56:	89fb      	ldrh	r3, [r7, #14]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01a      	beq.n	800dd92 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	2bfe      	cmp	r3, #254	; 0xfe
 800dd60:	d812      	bhi.n	800dd88 <cmp_lfn+0x88>
 800dd62:	89bb      	ldrh	r3, [r7, #12]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f002 fd1b 	bl	80107a0 <ff_wtoupper>
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	461c      	mov	r4, r3
 800dd6e:	697b      	ldr	r3, [r7, #20]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	617a      	str	r2, [r7, #20]
 800dd74:	005b      	lsls	r3, r3, #1
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	4413      	add	r3, r2
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f002 fd0f 	bl	80107a0 <ff_wtoupper>
 800dd82:	4603      	mov	r3, r0
 800dd84:	429c      	cmp	r4, r3
 800dd86:	d001      	beq.n	800dd8c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd88:	2300      	movs	r3, #0
 800dd8a:	e022      	b.n	800ddd2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd8c:	89bb      	ldrh	r3, [r7, #12]
 800dd8e:	81fb      	strh	r3, [r7, #14]
 800dd90:	e006      	b.n	800dda0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd92:	89bb      	ldrh	r3, [r7, #12]
 800dd94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d001      	beq.n	800dda0 <cmp_lfn+0xa0>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e018      	b.n	800ddd2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dda0:	693b      	ldr	r3, [r7, #16]
 800dda2:	3301      	adds	r3, #1
 800dda4:	613b      	str	r3, [r7, #16]
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2b0c      	cmp	r3, #12
 800ddaa:	d9c8      	bls.n	800dd3e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00b      	beq.n	800ddd0 <cmp_lfn+0xd0>
 800ddb8:	89fb      	ldrh	r3, [r7, #14]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d008      	beq.n	800ddd0 <cmp_lfn+0xd0>
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	005b      	lsls	r3, r3, #1
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <cmp_lfn+0xd0>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	e000      	b.n	800ddd2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ddd0:	2301      	movs	r3, #1
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	371c      	adds	r7, #28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd90      	pop	{r4, r7, pc}
 800ddda:	bf00      	nop
 800dddc:	08011ea0 	.word	0x08011ea0

0800dde0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	331a      	adds	r3, #26
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7fe facc 	bl	800c38c <ld_word>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d001      	beq.n	800ddfe <pick_lfn+0x1e>
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	e04d      	b.n	800de9a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de06:	1e5a      	subs	r2, r3, #1
 800de08:	4613      	mov	r3, r2
 800de0a:	005b      	lsls	r3, r3, #1
 800de0c:	4413      	add	r3, r2
 800de0e:	009b      	lsls	r3, r3, #2
 800de10:	4413      	add	r3, r2
 800de12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de14:	2301      	movs	r3, #1
 800de16:	81fb      	strh	r3, [r7, #14]
 800de18:	2300      	movs	r3, #0
 800de1a:	613b      	str	r3, [r7, #16]
 800de1c:	e028      	b.n	800de70 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800de1e:	4a21      	ldr	r2, [pc, #132]	; (800dea4 <pick_lfn+0xc4>)
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	4413      	add	r3, r2
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	461a      	mov	r2, r3
 800de28:	683b      	ldr	r3, [r7, #0]
 800de2a:	4413      	add	r3, r2
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7fe faad 	bl	800c38c <ld_word>
 800de32:	4603      	mov	r3, r0
 800de34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800de36:	89fb      	ldrh	r3, [r7, #14]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00f      	beq.n	800de5c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2bfe      	cmp	r3, #254	; 0xfe
 800de40:	d901      	bls.n	800de46 <pick_lfn+0x66>
 800de42:	2300      	movs	r3, #0
 800de44:	e029      	b.n	800de9a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800de46:	89bb      	ldrh	r3, [r7, #12]
 800de48:	81fb      	strh	r3, [r7, #14]
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	1c5a      	adds	r2, r3, #1
 800de4e:	617a      	str	r2, [r7, #20]
 800de50:	005b      	lsls	r3, r3, #1
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	4413      	add	r3, r2
 800de56:	89fa      	ldrh	r2, [r7, #14]
 800de58:	801a      	strh	r2, [r3, #0]
 800de5a:	e006      	b.n	800de6a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de5c:	89bb      	ldrh	r3, [r7, #12]
 800de5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de62:	4293      	cmp	r3, r2
 800de64:	d001      	beq.n	800de6a <pick_lfn+0x8a>
 800de66:	2300      	movs	r3, #0
 800de68:	e017      	b.n	800de9a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de6a:	693b      	ldr	r3, [r7, #16]
 800de6c:	3301      	adds	r3, #1
 800de6e:	613b      	str	r3, [r7, #16]
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	2b0c      	cmp	r3, #12
 800de74:	d9d3      	bls.n	800de1e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00a      	beq.n	800de98 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800de82:	697b      	ldr	r3, [r7, #20]
 800de84:	2bfe      	cmp	r3, #254	; 0xfe
 800de86:	d901      	bls.n	800de8c <pick_lfn+0xac>
 800de88:	2300      	movs	r3, #0
 800de8a:	e006      	b.n	800de9a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	4413      	add	r3, r2
 800de94:	2200      	movs	r2, #0
 800de96:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800de98:	2301      	movs	r3, #1
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3718      	adds	r7, #24
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	08011ea0 	.word	0x08011ea0

0800dea8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b088      	sub	sp, #32
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	4611      	mov	r1, r2
 800deb4:	461a      	mov	r2, r3
 800deb6:	460b      	mov	r3, r1
 800deb8:	71fb      	strb	r3, [r7, #7]
 800deba:	4613      	mov	r3, r2
 800debc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	330d      	adds	r3, #13
 800dec2:	79ba      	ldrb	r2, [r7, #6]
 800dec4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800dec6:	68bb      	ldr	r3, [r7, #8]
 800dec8:	330b      	adds	r3, #11
 800deca:	220f      	movs	r2, #15
 800decc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	330c      	adds	r3, #12
 800ded2:	2200      	movs	r2, #0
 800ded4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	331a      	adds	r3, #26
 800deda:	2100      	movs	r1, #0
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fe fb6b 	bl	800c5b8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dee2:	79fb      	ldrb	r3, [r7, #7]
 800dee4:	1e5a      	subs	r2, r3, #1
 800dee6:	4613      	mov	r3, r2
 800dee8:	005b      	lsls	r3, r3, #1
 800deea:	4413      	add	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800def2:	2300      	movs	r3, #0
 800def4:	82fb      	strh	r3, [r7, #22]
 800def6:	2300      	movs	r3, #0
 800def8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800defa:	8afb      	ldrh	r3, [r7, #22]
 800defc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df00:	4293      	cmp	r3, r2
 800df02:	d007      	beq.n	800df14 <put_lfn+0x6c>
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	61fa      	str	r2, [r7, #28]
 800df0a:	005b      	lsls	r3, r3, #1
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	4413      	add	r3, r2
 800df10:	881b      	ldrh	r3, [r3, #0]
 800df12:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800df14:	4a17      	ldr	r2, [pc, #92]	; (800df74 <put_lfn+0xcc>)
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	4413      	add	r3, r2
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	461a      	mov	r2, r3
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	4413      	add	r3, r2
 800df22:	8afa      	ldrh	r2, [r7, #22]
 800df24:	4611      	mov	r1, r2
 800df26:	4618      	mov	r0, r3
 800df28:	f7fe fb46 	bl	800c5b8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800df2c:	8afb      	ldrh	r3, [r7, #22]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d102      	bne.n	800df38 <put_lfn+0x90>
 800df32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800df36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	3301      	adds	r3, #1
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	2b0c      	cmp	r3, #12
 800df42:	d9da      	bls.n	800defa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800df44:	8afb      	ldrh	r3, [r7, #22]
 800df46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d006      	beq.n	800df5c <put_lfn+0xb4>
 800df4e:	69fb      	ldr	r3, [r7, #28]
 800df50:	005b      	lsls	r3, r3, #1
 800df52:	68fa      	ldr	r2, [r7, #12]
 800df54:	4413      	add	r3, r2
 800df56:	881b      	ldrh	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d103      	bne.n	800df64 <put_lfn+0xbc>
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	79fa      	ldrb	r2, [r7, #7]
 800df68:	701a      	strb	r2, [r3, #0]
}
 800df6a:	bf00      	nop
 800df6c:	3720      	adds	r7, #32
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	08011ea0 	.word	0x08011ea0

0800df78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b08c      	sub	sp, #48	; 0x30
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	607a      	str	r2, [r7, #4]
 800df84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df86:	220b      	movs	r2, #11
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	68f8      	ldr	r0, [r7, #12]
 800df8c:	f7fe fbe3 	bl	800c756 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	2b05      	cmp	r3, #5
 800df94:	d929      	bls.n	800dfea <gen_numname+0x72>
		sr = seq;
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df9a:	e020      	b.n	800dfde <gen_numname+0x66>
			wc = *lfn++;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	1c9a      	adds	r2, r3, #2
 800dfa0:	607a      	str	r2, [r7, #4]
 800dfa2:	881b      	ldrh	r3, [r3, #0]
 800dfa4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfaa:	e015      	b.n	800dfd8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	005a      	lsls	r2, r3, #1
 800dfb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfb2:	f003 0301 	and.w	r3, r3, #1
 800dfb6:	4413      	add	r3, r2
 800dfb8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800dfba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dfbc:	085b      	lsrs	r3, r3, #1
 800dfbe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <gen_numname+0x5a>
 800dfca:	69fa      	ldr	r2, [r7, #28]
 800dfcc:	4b30      	ldr	r3, [pc, #192]	; (800e090 <gen_numname+0x118>)
 800dfce:	4053      	eors	r3, r2
 800dfd0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800dfd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	2b0f      	cmp	r3, #15
 800dfdc:	d9e6      	bls.n	800dfac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d1da      	bne.n	800df9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dfea:	2307      	movs	r3, #7
 800dfec:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	f003 030f 	and.w	r3, r3, #15
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	3330      	adds	r3, #48	; 0x30
 800dffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e002:	2b39      	cmp	r3, #57	; 0x39
 800e004:	d904      	bls.n	800e010 <gen_numname+0x98>
 800e006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e00a:	3307      	adds	r3, #7
 800e00c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e012:	1e5a      	subs	r2, r3, #1
 800e014:	62ba      	str	r2, [r7, #40]	; 0x28
 800e016:	3330      	adds	r3, #48	; 0x30
 800e018:	443b      	add	r3, r7
 800e01a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e01e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	091b      	lsrs	r3, r3, #4
 800e026:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1df      	bne.n	800dfee <gen_numname+0x76>
	ns[i] = '~';
 800e02e:	f107 0214 	add.w	r2, r7, #20
 800e032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e034:	4413      	add	r3, r2
 800e036:	227e      	movs	r2, #126	; 0x7e
 800e038:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e03a:	2300      	movs	r3, #0
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
 800e03e:	e002      	b.n	800e046 <gen_numname+0xce>
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	3301      	adds	r3, #1
 800e044:	627b      	str	r3, [r7, #36]	; 0x24
 800e046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d205      	bcs.n	800e05a <gen_numname+0xe2>
 800e04e:	68fa      	ldr	r2, [r7, #12]
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	4413      	add	r3, r2
 800e054:	781b      	ldrb	r3, [r3, #0]
 800e056:	2b20      	cmp	r3, #32
 800e058:	d1f2      	bne.n	800e040 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05c:	2b07      	cmp	r3, #7
 800e05e:	d807      	bhi.n	800e070 <gen_numname+0xf8>
 800e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	62ba      	str	r2, [r7, #40]	; 0x28
 800e066:	3330      	adds	r3, #48	; 0x30
 800e068:	443b      	add	r3, r7
 800e06a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e06e:	e000      	b.n	800e072 <gen_numname+0xfa>
 800e070:	2120      	movs	r1, #32
 800e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e074:	1c5a      	adds	r2, r3, #1
 800e076:	627a      	str	r2, [r7, #36]	; 0x24
 800e078:	68fa      	ldr	r2, [r7, #12]
 800e07a:	4413      	add	r3, r2
 800e07c:	460a      	mov	r2, r1
 800e07e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	2b07      	cmp	r3, #7
 800e084:	d9e9      	bls.n	800e05a <gen_numname+0xe2>
}
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	3730      	adds	r7, #48	; 0x30
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	00011021 	.word	0x00011021

0800e094 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e09c:	2300      	movs	r3, #0
 800e09e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e0a0:	230b      	movs	r3, #11
 800e0a2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e0a4:	7bfb      	ldrb	r3, [r7, #15]
 800e0a6:	b2da      	uxtb	r2, r3
 800e0a8:	0852      	lsrs	r2, r2, #1
 800e0aa:	01db      	lsls	r3, r3, #7
 800e0ac:	4313      	orrs	r3, r2
 800e0ae:	b2da      	uxtb	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	1c59      	adds	r1, r3, #1
 800e0b4:	6079      	str	r1, [r7, #4]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	4413      	add	r3, r2
 800e0ba:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	3b01      	subs	r3, #1
 800e0c0:	60bb      	str	r3, [r7, #8]
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d1ed      	bne.n	800e0a4 <sum_sfn+0x10>
	return sum;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3714      	adds	r7, #20
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d4:	4770      	bx	lr

0800e0d6 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e0d6:	b480      	push	{r7}
 800e0d8:	b087      	sub	sp, #28
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	781b      	ldrb	r3, [r3, #0]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	015b      	lsls	r3, r3, #5
 800e0e8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	827b      	strh	r3, [r7, #18]
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	617b      	str	r3, [r7, #20]
 800e0f2:	e018      	b.n	800e126 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	2b02      	cmp	r3, #2
 800e0f8:	d103      	bne.n	800e102 <xdir_sum+0x2c>
			i++;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	617b      	str	r3, [r7, #20]
 800e100:	e00e      	b.n	800e120 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e102:	8a7b      	ldrh	r3, [r7, #18]
 800e104:	03db      	lsls	r3, r3, #15
 800e106:	b29a      	uxth	r2, r3
 800e108:	8a7b      	ldrh	r3, [r7, #18]
 800e10a:	085b      	lsrs	r3, r3, #1
 800e10c:	b29b      	uxth	r3, r3
 800e10e:	4413      	add	r3, r2
 800e110:	b29a      	uxth	r2, r3
 800e112:	6879      	ldr	r1, [r7, #4]
 800e114:	697b      	ldr	r3, [r7, #20]
 800e116:	440b      	add	r3, r1
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	4413      	add	r3, r2
 800e11e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	3301      	adds	r3, #1
 800e124:	617b      	str	r3, [r7, #20]
 800e126:	697a      	ldr	r2, [r7, #20]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d3e2      	bcc.n	800e0f4 <xdir_sum+0x1e>
		}
	}
	return sum;
 800e12e:	8a7b      	ldrh	r3, [r7, #18]
}
 800e130:	4618      	mov	r0, r3
 800e132:	371c      	adds	r7, #28
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e144:	2300      	movs	r3, #0
 800e146:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e148:	e01f      	b.n	800e18a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e14a:	89bb      	ldrh	r3, [r7, #12]
 800e14c:	4618      	mov	r0, r3
 800e14e:	f002 fb27 	bl	80107a0 <ff_wtoupper>
 800e152:	4603      	mov	r3, r0
 800e154:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e156:	89fb      	ldrh	r3, [r7, #14]
 800e158:	03db      	lsls	r3, r3, #15
 800e15a:	b29a      	uxth	r2, r3
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	085b      	lsrs	r3, r3, #1
 800e160:	b29b      	uxth	r3, r3
 800e162:	4413      	add	r3, r2
 800e164:	b29a      	uxth	r2, r3
 800e166:	89bb      	ldrh	r3, [r7, #12]
 800e168:	b2db      	uxtb	r3, r3
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	4413      	add	r3, r2
 800e16e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e170:	89fb      	ldrh	r3, [r7, #14]
 800e172:	03db      	lsls	r3, r3, #15
 800e174:	b29a      	uxth	r2, r3
 800e176:	89fb      	ldrh	r3, [r7, #14]
 800e178:	085b      	lsrs	r3, r3, #1
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	4413      	add	r3, r2
 800e17e:	b29a      	uxth	r2, r3
 800e180:	89bb      	ldrh	r3, [r7, #12]
 800e182:	0a1b      	lsrs	r3, r3, #8
 800e184:	b29b      	uxth	r3, r3
 800e186:	4413      	add	r3, r2
 800e188:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	1c9a      	adds	r2, r3, #2
 800e18e:	607a      	str	r2, [r7, #4]
 800e190:	881b      	ldrh	r3, [r3, #0]
 800e192:	81bb      	strh	r3, [r7, #12]
 800e194:	89bb      	ldrh	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d1d7      	bne.n	800e14a <xname_sum+0xe>
	}
	return sum;
 800e19a:	89fb      	ldrh	r3, [r7, #14]
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b087      	sub	sp, #28
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4610      	mov	r0, r2
 800e1c0:	f7fe fcf8 	bl	800cbb4 <move_window>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e1c8:	7bfb      	ldrb	r3, [r7, #15]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <load_xdir+0x2e>
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
 800e1d0:	e09f      	b.n	800e312 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	2b85      	cmp	r3, #133	; 0x85
 800e1da:	d001      	beq.n	800e1e0 <load_xdir+0x3c>
 800e1dc:	2302      	movs	r3, #2
 800e1de:	e098      	b.n	800e312 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1e4:	2220      	movs	r2, #32
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	6938      	ldr	r0, [r7, #16]
 800e1ea:	f7fe fab4 	bl	800c756 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	015b      	lsls	r3, r3, #5
 800e1f8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	2b5f      	cmp	r3, #95	; 0x5f
 800e1fe:	d903      	bls.n	800e208 <load_xdir+0x64>
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e206:	d901      	bls.n	800e20c <load_xdir+0x68>
 800e208:	2302      	movs	r3, #2
 800e20a:	e082      	b.n	800e312 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e20c:	2100      	movs	r1, #0
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f7ff fbf5 	bl	800d9fe <dir_next>
 800e214:	4603      	mov	r3, r0
 800e216:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e218:	7bfb      	ldrb	r3, [r7, #15]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d001      	beq.n	800e222 <load_xdir+0x7e>
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	e077      	b.n	800e312 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e22a:	4619      	mov	r1, r3
 800e22c:	4610      	mov	r0, r2
 800e22e:	f7fe fcc1 	bl	800cbb4 <move_window>
 800e232:	4603      	mov	r3, r0
 800e234:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e236:	7bfb      	ldrb	r3, [r7, #15]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d001      	beq.n	800e240 <load_xdir+0x9c>
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	e068      	b.n	800e312 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2bc0      	cmp	r3, #192	; 0xc0
 800e248:	d001      	beq.n	800e24e <load_xdir+0xaa>
 800e24a:	2302      	movs	r3, #2
 800e24c:	e061      	b.n	800e312 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	f103 0020 	add.w	r0, r3, #32
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e258:	2220      	movs	r2, #32
 800e25a:	4619      	mov	r1, r3
 800e25c:	f7fe fa7b 	bl	800c756 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	3323      	adds	r3, #35	; 0x23
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	332c      	adds	r3, #44	; 0x2c
 800e268:	4a2c      	ldr	r2, [pc, #176]	; (800e31c <load_xdir+0x178>)
 800e26a:	fba2 2303 	umull	r2, r3, r2, r3
 800e26e:	08db      	lsrs	r3, r3, #3
 800e270:	015b      	lsls	r3, r3, #5
 800e272:	68ba      	ldr	r2, [r7, #8]
 800e274:	429a      	cmp	r2, r3
 800e276:	d201      	bcs.n	800e27c <load_xdir+0xd8>
 800e278:	2302      	movs	r3, #2
 800e27a:	e04a      	b.n	800e312 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e27c:	2340      	movs	r3, #64	; 0x40
 800e27e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e280:	2100      	movs	r1, #0
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff fbbb 	bl	800d9fe <dir_next>
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <load_xdir+0xf2>
 800e292:	7bfb      	ldrb	r3, [r7, #15]
 800e294:	e03d      	b.n	800e312 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29e:	4619      	mov	r1, r3
 800e2a0:	4610      	mov	r0, r2
 800e2a2:	f7fe fc87 	bl	800cbb4 <move_window>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e2aa:	7bfb      	ldrb	r3, [r7, #15]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d001      	beq.n	800e2b4 <load_xdir+0x110>
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
 800e2b2:	e02e      	b.n	800e312 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2bc1      	cmp	r3, #193	; 0xc1
 800e2bc:	d001      	beq.n	800e2c2 <load_xdir+0x11e>
 800e2be:	2302      	movs	r3, #2
 800e2c0:	e027      	b.n	800e312 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e2c8:	d208      	bcs.n	800e2dc <load_xdir+0x138>
 800e2ca:	693a      	ldr	r2, [r7, #16]
 800e2cc:	697b      	ldr	r3, [r7, #20]
 800e2ce:	18d0      	adds	r0, r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d4:	2220      	movs	r2, #32
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	f7fe fa3d 	bl	800c756 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	3320      	adds	r3, #32
 800e2e0:	617b      	str	r3, [r7, #20]
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d3ca      	bcc.n	800e280 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e2f0:	d80e      	bhi.n	800e310 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e2f2:	6938      	ldr	r0, [r7, #16]
 800e2f4:	f7ff feef 	bl	800e0d6 <xdir_sum>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	461c      	mov	r4, r3
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	3302      	adds	r3, #2
 800e300:	4618      	mov	r0, r3
 800e302:	f7fe f843 	bl	800c38c <ld_word>
 800e306:	4603      	mov	r3, r0
 800e308:	429c      	cmp	r4, r3
 800e30a:	d001      	beq.n	800e310 <load_xdir+0x16c>
 800e30c:	2302      	movs	r3, #2
 800e30e:	e000      	b.n	800e312 <load_xdir+0x16e>
	}
	return FR_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	371c      	adds	r7, #28
 800e316:	46bd      	mov	sp, r7
 800e318:	bd90      	pop	{r4, r7, pc}
 800e31a:	bf00      	nop
 800e31c:	88888889 	.word	0x88888889

0800e320 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e320:	b5b0      	push	{r4, r5, r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
 800e328:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e32a:	6839      	ldr	r1, [r7, #0]
 800e32c:	6808      	ldr	r0, [r1, #0]
 800e32e:	6879      	ldr	r1, [r7, #4]
 800e330:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e332:	6839      	ldr	r1, [r7, #0]
 800e334:	6a08      	ldr	r0, [r1, #32]
 800e336:	6879      	ldr	r1, [r7, #4]
 800e338:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e33a:	6839      	ldr	r1, [r7, #0]
 800e33c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e33e:	b2c8      	uxtb	r0, r1
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e348:	2000      	movs	r0, #0
 800e34a:	460c      	mov	r4, r1
 800e34c:	4605      	mov	r5, r0
 800e34e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e352:	2300      	movs	r3, #0
 800e354:	6879      	ldr	r1, [r7, #4]
 800e356:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff fab4 	bl	800d8d6 <dir_sdi>
 800e36e:	4603      	mov	r3, r0
 800e370:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e372:	7bfb      	ldrb	r3, [r7, #15]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d104      	bne.n	800e382 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff ff13 	bl	800e1a4 <load_xdir>
 800e37e:	4603      	mov	r3, r0
 800e380:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e382:	7bfb      	ldrb	r3, [r7, #15]
}
 800e384:	4618      	mov	r0, r3
 800e386:	3710      	adds	r7, #16
 800e388:	46bd      	mov	sp, r7
 800e38a:	bdb0      	pop	{r4, r5, r7, pc}

0800e38c <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e38c:	b590      	push	{r4, r7, lr}
 800e38e:	b087      	sub	sp, #28
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	695b      	ldr	r3, [r3, #20]
 800e39a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	1c9c      	adds	r4, r3, #2
 800e3a0:	68f8      	ldr	r0, [r7, #12]
 800e3a2:	f7ff fe98 	bl	800e0d6 <xdir_sum>
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f7fe f904 	bl	800c5b8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	781b      	ldrb	r3, [r3, #0]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff fa88 	bl	800d8d6 <dir_sdi>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e3ca:	e026      	b.n	800e41a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d4:	4619      	mov	r1, r3
 800e3d6:	4610      	mov	r0, r2
 800e3d8:	f7fe fbec 	bl	800cbb4 <move_window>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3e0:	7dfb      	ldrb	r3, [r7, #23]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d11d      	bne.n	800e422 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ea:	2220      	movs	r2, #32
 800e3ec:	68f9      	ldr	r1, [r7, #12]
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fe f9b1 	bl	800c756 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e3fc:	693b      	ldr	r3, [r7, #16]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	613b      	str	r3, [r7, #16]
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00e      	beq.n	800e426 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3320      	adds	r3, #32
 800e40c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e40e:	2100      	movs	r1, #0
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff faf4 	bl	800d9fe <dir_next>
 800e416:	4603      	mov	r3, r0
 800e418:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0d5      	beq.n	800e3cc <store_xdir+0x40>
 800e420:	e002      	b.n	800e428 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e422:	bf00      	nop
 800e424:	e000      	b.n	800e428 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e426:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e428:	7dfb      	ldrb	r3, [r7, #23]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d002      	beq.n	800e434 <store_xdir+0xa8>
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
 800e430:	2b01      	cmp	r3, #1
 800e432:	d101      	bne.n	800e438 <store_xdir+0xac>
 800e434:	7dfb      	ldrb	r3, [r7, #23]
 800e436:	e000      	b.n	800e43a <store_xdir+0xae>
 800e438:	2302      	movs	r3, #2
}
 800e43a:	4618      	mov	r0, r3
 800e43c:	371c      	adds	r7, #28
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd90      	pop	{r4, r7, pc}

0800e442 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e442:	b590      	push	{r4, r7, lr}
 800e444:	b085      	sub	sp, #20
 800e446:	af00      	add	r7, sp, #0
 800e448:	6078      	str	r0, [r7, #4]
 800e44a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e44c:	2240      	movs	r2, #64	; 0x40
 800e44e:	2100      	movs	r1, #0
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7fe f9a1 	bl	800c798 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2285      	movs	r2, #133	; 0x85
 800e45a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	3320      	adds	r3, #32
 800e460:	22c0      	movs	r2, #192	; 0xc0
 800e462:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e464:	2300      	movs	r3, #0
 800e466:	72bb      	strb	r3, [r7, #10]
 800e468:	2301      	movs	r3, #1
 800e46a:	72fb      	strb	r3, [r7, #11]
 800e46c:	2301      	movs	r3, #1
 800e46e:	813b      	strh	r3, [r7, #8]
 800e470:	2340      	movs	r3, #64	; 0x40
 800e472:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	1c5a      	adds	r2, r3, #1
 800e478:	60fa      	str	r2, [r7, #12]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	4413      	add	r3, r2
 800e47e:	22c1      	movs	r2, #193	; 0xc1
 800e480:	701a      	strb	r2, [r3, #0]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	60fa      	str	r2, [r7, #12]
 800e488:	687a      	ldr	r2, [r7, #4]
 800e48a:	4413      	add	r3, r2
 800e48c:	2200      	movs	r2, #0
 800e48e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e490:	893b      	ldrh	r3, [r7, #8]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00b      	beq.n	800e4ae <create_xdir+0x6c>
 800e496:	7abb      	ldrb	r3, [r7, #10]
 800e498:	005b      	lsls	r3, r3, #1
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	4413      	add	r3, r2
 800e49e:	881b      	ldrh	r3, [r3, #0]
 800e4a0:	813b      	strh	r3, [r7, #8]
 800e4a2:	893b      	ldrh	r3, [r7, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <create_xdir+0x6c>
 800e4a8:	7abb      	ldrb	r3, [r7, #10]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	893a      	ldrh	r2, [r7, #8]
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fe f87d 	bl	800c5b8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3302      	adds	r3, #2
 800e4c2:	60fb      	str	r3, [r7, #12]
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f003 031f 	and.w	r3, r3, #31
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d1e0      	bne.n	800e490 <create_xdir+0x4e>
		nb++;
 800e4ce:	7afb      	ldrb	r3, [r7, #11]
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e4d4:	7abb      	ldrb	r3, [r7, #10]
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	4413      	add	r3, r2
 800e4dc:	881b      	ldrh	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d1c8      	bne.n	800e474 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	3323      	adds	r3, #35	; 0x23
 800e4e6:	7aba      	ldrb	r2, [r7, #10]
 800e4e8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	7afa      	ldrb	r2, [r7, #11]
 800e4f0:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e4f8:	6838      	ldr	r0, [r7, #0]
 800e4fa:	f7ff fe1f 	bl	800e13c <xname_sum>
 800e4fe:	4603      	mov	r3, r0
 800e500:	4619      	mov	r1, r3
 800e502:	4620      	mov	r0, r4
 800e504:	f7fe f858 	bl	800c5b8 <st_word>
}
 800e508:	bf00      	nop
 800e50a:	3714      	adds	r7, #20
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd90      	pop	{r4, r7, pc}

0800e510 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e51a:	2304      	movs	r3, #4
 800e51c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e524:	23ff      	movs	r3, #255	; 0xff
 800e526:	757b      	strb	r3, [r7, #21]
 800e528:	23ff      	movs	r3, #255	; 0xff
 800e52a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e52c:	e09f      	b.n	800e66e <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e532:	4619      	mov	r1, r3
 800e534:	6938      	ldr	r0, [r7, #16]
 800e536:	f7fe fb3d 	bl	800cbb4 <move_window>
 800e53a:	4603      	mov	r3, r0
 800e53c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e53e:	7dfb      	ldrb	r3, [r7, #23]
 800e540:	2b00      	cmp	r3, #0
 800e542:	f040 809a 	bne.w	800e67a <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e54a:	781b      	ldrb	r3, [r3, #0]
 800e54c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e54e:	7dbb      	ldrb	r3, [r7, #22]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d102      	bne.n	800e55a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e554:	2304      	movs	r3, #4
 800e556:	75fb      	strb	r3, [r7, #23]
 800e558:	e096      	b.n	800e688 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	2b04      	cmp	r3, #4
 800e560:	d118      	bne.n	800e594 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e562:	7dbb      	ldrb	r3, [r7, #22]
 800e564:	2b85      	cmp	r3, #133	; 0x85
 800e566:	d179      	bne.n	800e65c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff fe17 	bl	800e1a4 <load_xdir>
 800e576:	4603      	mov	r3, r0
 800e578:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d17e      	bne.n	800e67e <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	695b      	ldr	r3, [r3, #20]
 800e584:	3304      	adds	r3, #4
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e58c:	b2da      	uxtb	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e592:	e074      	b.n	800e67e <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e598:	330b      	adds	r3, #11
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5a0:	73fb      	strb	r3, [r7, #15]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	7bfa      	ldrb	r2, [r7, #15]
 800e5a6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e5a8:	7dbb      	ldrb	r3, [r7, #22]
 800e5aa:	2be5      	cmp	r3, #229	; 0xe5
 800e5ac:	d00e      	beq.n	800e5cc <dir_read+0xbc>
 800e5ae:	7dbb      	ldrb	r3, [r7, #22]
 800e5b0:	2b2e      	cmp	r3, #46	; 0x2e
 800e5b2:	d00b      	beq.n	800e5cc <dir_read+0xbc>
 800e5b4:	7bfb      	ldrb	r3, [r7, #15]
 800e5b6:	f023 0320 	bic.w	r3, r3, #32
 800e5ba:	2b08      	cmp	r3, #8
 800e5bc:	bf0c      	ite	eq
 800e5be:	2301      	moveq	r3, #1
 800e5c0:	2300      	movne	r3, #0
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d002      	beq.n	800e5d2 <dir_read+0xc2>
				ord = 0xFF;
 800e5cc:	23ff      	movs	r3, #255	; 0xff
 800e5ce:	757b      	strb	r3, [r7, #21]
 800e5d0:	e044      	b.n	800e65c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e5d2:	7bfb      	ldrb	r3, [r7, #15]
 800e5d4:	2b0f      	cmp	r3, #15
 800e5d6:	d12f      	bne.n	800e638 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e5d8:	7dbb      	ldrb	r3, [r7, #22]
 800e5da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d00d      	beq.n	800e5fe <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5e6:	7b5b      	ldrb	r3, [r3, #13]
 800e5e8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e5ea:	7dbb      	ldrb	r3, [r7, #22]
 800e5ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5f0:	75bb      	strb	r3, [r7, #22]
 800e5f2:	7dbb      	ldrb	r3, [r7, #22]
 800e5f4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e5fe:	7dba      	ldrb	r2, [r7, #22]
 800e600:	7d7b      	ldrb	r3, [r7, #21]
 800e602:	429a      	cmp	r2, r3
 800e604:	d115      	bne.n	800e632 <dir_read+0x122>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e60a:	330d      	adds	r3, #13
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	7d3a      	ldrb	r2, [r7, #20]
 800e610:	429a      	cmp	r2, r3
 800e612:	d10e      	bne.n	800e632 <dir_read+0x122>
 800e614:	693b      	ldr	r3, [r7, #16]
 800e616:	691a      	ldr	r2, [r3, #16]
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e61c:	4619      	mov	r1, r3
 800e61e:	4610      	mov	r0, r2
 800e620:	f7ff fbde 	bl	800dde0 <pick_lfn>
 800e624:	4603      	mov	r3, r0
 800e626:	2b00      	cmp	r3, #0
 800e628:	d003      	beq.n	800e632 <dir_read+0x122>
 800e62a:	7d7b      	ldrb	r3, [r7, #21]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	e000      	b.n	800e634 <dir_read+0x124>
 800e632:	23ff      	movs	r3, #255	; 0xff
 800e634:	757b      	strb	r3, [r7, #21]
 800e636:	e011      	b.n	800e65c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e638:	7d7b      	ldrb	r3, [r7, #21]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d109      	bne.n	800e652 <dir_read+0x142>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e642:	4618      	mov	r0, r3
 800e644:	f7ff fd26 	bl	800e094 <sum_sfn>
 800e648:	4603      	mov	r3, r0
 800e64a:	461a      	mov	r2, r3
 800e64c:	7d3b      	ldrb	r3, [r7, #20]
 800e64e:	4293      	cmp	r3, r2
 800e650:	d017      	beq.n	800e682 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f04f 32ff 	mov.w	r2, #4294967295
 800e658:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800e65a:	e012      	b.n	800e682 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e65c:	2100      	movs	r1, #0
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f7ff f9cd 	bl	800d9fe <dir_next>
 800e664:	4603      	mov	r3, r0
 800e666:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e668:	7dfb      	ldrb	r3, [r7, #23]
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10b      	bne.n	800e686 <dir_read+0x176>
	while (dp->sect) {
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e672:	2b00      	cmp	r3, #0
 800e674:	f47f af5b 	bne.w	800e52e <dir_read+0x1e>
 800e678:	e006      	b.n	800e688 <dir_read+0x178>
		if (res != FR_OK) break;
 800e67a:	bf00      	nop
 800e67c:	e004      	b.n	800e688 <dir_read+0x178>
					break;
 800e67e:	bf00      	nop
 800e680:	e002      	b.n	800e688 <dir_read+0x178>
					break;
 800e682:	bf00      	nop
 800e684:	e000      	b.n	800e688 <dir_read+0x178>
		if (res != FR_OK) break;
 800e686:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e688:	7dfb      	ldrb	r3, [r7, #23]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d002      	beq.n	800e694 <dir_read+0x184>
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800e694:	7dfb      	ldrb	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3718      	adds	r7, #24
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}

0800e69e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e69e:	b590      	push	{r4, r7, lr}
 800e6a0:	b089      	sub	sp, #36	; 0x24
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7ff f911 	bl	800d8d6 <dir_sdi>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800e6b8:	7ffb      	ldrb	r3, [r7, #31]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d001      	beq.n	800e6c2 <dir_find+0x24>
 800e6be:	7ffb      	ldrb	r3, [r7, #31]
 800e6c0:	e112      	b.n	800e8e8 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	2b04      	cmp	r3, #4
 800e6c8:	d164      	bne.n	800e794 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fd34 	bl	800e13c <xname_sum>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e6d8:	e04f      	b.n	800e77a <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	3324      	adds	r3, #36	; 0x24
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fd fe53 	bl	800c38c <ld_word>
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	461a      	mov	r2, r3
 800e6ea:	893b      	ldrh	r3, [r7, #8]
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d000      	beq.n	800e6f2 <dir_find+0x54>
 800e6f0:	e043      	b.n	800e77a <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e6fa:	76fb      	strb	r3, [r7, #27]
 800e6fc:	2340      	movs	r3, #64	; 0x40
 800e6fe:	617b      	str	r3, [r7, #20]
 800e700:	2300      	movs	r3, #0
 800e702:	613b      	str	r3, [r7, #16]
 800e704:	e029      	b.n	800e75a <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	f003 031f 	and.w	r3, r3, #31
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d102      	bne.n	800e716 <dir_find+0x78>
 800e710:	697b      	ldr	r3, [r7, #20]
 800e712:	3302      	adds	r3, #2
 800e714:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	695a      	ldr	r2, [r3, #20]
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	4413      	add	r3, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f7fd fe34 	bl	800c38c <ld_word>
 800e724:	4603      	mov	r3, r0
 800e726:	4618      	mov	r0, r3
 800e728:	f002 f83a 	bl	80107a0 <ff_wtoupper>
 800e72c:	4603      	mov	r3, r0
 800e72e:	461c      	mov	r4, r3
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	691a      	ldr	r2, [r3, #16]
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	005b      	lsls	r3, r3, #1
 800e738:	4413      	add	r3, r2
 800e73a:	881b      	ldrh	r3, [r3, #0]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f002 f82f 	bl	80107a0 <ff_wtoupper>
 800e742:	4603      	mov	r3, r0
 800e744:	429c      	cmp	r4, r3
 800e746:	d10c      	bne.n	800e762 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e748:	7efb      	ldrb	r3, [r7, #27]
 800e74a:	3b01      	subs	r3, #1
 800e74c:	76fb      	strb	r3, [r7, #27]
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	3302      	adds	r3, #2
 800e752:	617b      	str	r3, [r7, #20]
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	3301      	adds	r3, #1
 800e758:	613b      	str	r3, [r7, #16]
 800e75a:	7efb      	ldrb	r3, [r7, #27]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d1d2      	bne.n	800e706 <dir_find+0x68>
 800e760:	e000      	b.n	800e764 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e762:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e764:	7efb      	ldrb	r3, [r7, #27]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d107      	bne.n	800e77a <dir_find+0xdc>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	691a      	ldr	r2, [r3, #16]
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	005b      	lsls	r3, r3, #1
 800e772:	4413      	add	r3, r2
 800e774:	881b      	ldrh	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d009      	beq.n	800e78e <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e77a:	2100      	movs	r1, #0
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f7ff fec7 	bl	800e510 <dir_read>
 800e782:	4603      	mov	r3, r0
 800e784:	77fb      	strb	r3, [r7, #31]
 800e786:	7ffb      	ldrb	r3, [r7, #31]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d0a6      	beq.n	800e6da <dir_find+0x3c>
 800e78c:	e000      	b.n	800e790 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e78e:	bf00      	nop
		}
		return res;
 800e790:	7ffb      	ldrb	r3, [r7, #31]
 800e792:	e0a9      	b.n	800e8e8 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e794:	23ff      	movs	r3, #255	; 0xff
 800e796:	773b      	strb	r3, [r7, #28]
 800e798:	7f3b      	ldrb	r3, [r7, #28]
 800e79a:	777b      	strb	r3, [r7, #29]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f04f 32ff 	mov.w	r2, #4294967295
 800e7a2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	68f8      	ldr	r0, [r7, #12]
 800e7ac:	f7fe fa02 	bl	800cbb4 <move_window>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e7b4:	7ffb      	ldrb	r3, [r7, #31]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f040 8090 	bne.w	800e8dc <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e7c4:	7fbb      	ldrb	r3, [r7, #30]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d102      	bne.n	800e7d0 <dir_find+0x132>
 800e7ca:	2304      	movs	r3, #4
 800e7cc:	77fb      	strb	r3, [r7, #31]
 800e7ce:	e08a      	b.n	800e8e6 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7d4:	330b      	adds	r3, #11
 800e7d6:	781b      	ldrb	r3, [r3, #0]
 800e7d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7dc:	72fb      	strb	r3, [r7, #11]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7afa      	ldrb	r2, [r7, #11]
 800e7e2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e7e4:	7fbb      	ldrb	r3, [r7, #30]
 800e7e6:	2be5      	cmp	r3, #229	; 0xe5
 800e7e8:	d007      	beq.n	800e7fa <dir_find+0x15c>
 800e7ea:	7afb      	ldrb	r3, [r7, #11]
 800e7ec:	f003 0308 	and.w	r3, r3, #8
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d009      	beq.n	800e808 <dir_find+0x16a>
 800e7f4:	7afb      	ldrb	r3, [r7, #11]
 800e7f6:	2b0f      	cmp	r3, #15
 800e7f8:	d006      	beq.n	800e808 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e7fa:	23ff      	movs	r3, #255	; 0xff
 800e7fc:	777b      	strb	r3, [r7, #29]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f04f 32ff 	mov.w	r2, #4294967295
 800e804:	64da      	str	r2, [r3, #76]	; 0x4c
 800e806:	e05e      	b.n	800e8c6 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e808:	7afb      	ldrb	r3, [r7, #11]
 800e80a:	2b0f      	cmp	r3, #15
 800e80c:	d136      	bne.n	800e87c <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d154      	bne.n	800e8c6 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e81c:	7fbb      	ldrb	r3, [r7, #30]
 800e81e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e822:	2b00      	cmp	r3, #0
 800e824:	d00d      	beq.n	800e842 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e82a:	7b5b      	ldrb	r3, [r3, #13]
 800e82c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e82e:	7fbb      	ldrb	r3, [r7, #30]
 800e830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e834:	77bb      	strb	r3, [r7, #30]
 800e836:	7fbb      	ldrb	r3, [r7, #30]
 800e838:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e842:	7fba      	ldrb	r2, [r7, #30]
 800e844:	7f7b      	ldrb	r3, [r7, #29]
 800e846:	429a      	cmp	r2, r3
 800e848:	d115      	bne.n	800e876 <dir_find+0x1d8>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e84e:	330d      	adds	r3, #13
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	7f3a      	ldrb	r2, [r7, #28]
 800e854:	429a      	cmp	r2, r3
 800e856:	d10e      	bne.n	800e876 <dir_find+0x1d8>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	691a      	ldr	r2, [r3, #16]
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e860:	4619      	mov	r1, r3
 800e862:	4610      	mov	r0, r2
 800e864:	f7ff fa4c 	bl	800dd00 <cmp_lfn>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <dir_find+0x1d8>
 800e86e:	7f7b      	ldrb	r3, [r7, #29]
 800e870:	3b01      	subs	r3, #1
 800e872:	b2db      	uxtb	r3, r3
 800e874:	e000      	b.n	800e878 <dir_find+0x1da>
 800e876:	23ff      	movs	r3, #255	; 0xff
 800e878:	777b      	strb	r3, [r7, #29]
 800e87a:	e024      	b.n	800e8c6 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e87c:	7f7b      	ldrb	r3, [r7, #29]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d109      	bne.n	800e896 <dir_find+0x1f8>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e886:	4618      	mov	r0, r3
 800e888:	f7ff fc04 	bl	800e094 <sum_sfn>
 800e88c:	4603      	mov	r3, r0
 800e88e:	461a      	mov	r2, r3
 800e890:	7f3b      	ldrb	r3, [r7, #28]
 800e892:	4293      	cmp	r3, r2
 800e894:	d024      	beq.n	800e8e0 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e89c:	f003 0301 	and.w	r3, r3, #1
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d10a      	bne.n	800e8ba <dir_find+0x21c>
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	3340      	adds	r3, #64	; 0x40
 800e8ac:	220b      	movs	r2, #11
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	f7fd ff8d 	bl	800c7ce <mem_cmp>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d014      	beq.n	800e8e4 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8ba:	23ff      	movs	r3, #255	; 0xff
 800e8bc:	777b      	strb	r3, [r7, #29]
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c4:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7ff f898 	bl	800d9fe <dir_next>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e8d2:	7ffb      	ldrb	r3, [r7, #31]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f43f af65 	beq.w	800e7a4 <dir_find+0x106>
 800e8da:	e004      	b.n	800e8e6 <dir_find+0x248>
		if (res != FR_OK) break;
 800e8dc:	bf00      	nop
 800e8de:	e002      	b.n	800e8e6 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e8e0:	bf00      	nop
 800e8e2:	e000      	b.n	800e8e6 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e8e4:	bf00      	nop

	return res;
 800e8e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	3724      	adds	r7, #36	; 0x24
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	bd90      	pop	{r4, r7, pc}

0800e8f0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e8f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e8f4:	b0a0      	sub	sp, #128	; 0x80
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e906:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d001      	beq.n	800e912 <dir_register+0x22>
 800e90e:	2306      	movs	r3, #6
 800e910:	e192      	b.n	800ec38 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e912:	2300      	movs	r3, #0
 800e914:	677b      	str	r3, [r7, #116]	; 0x74
 800e916:	e002      	b.n	800e91e <dir_register+0x2e>
 800e918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e91a:	3301      	adds	r3, #1
 800e91c:	677b      	str	r3, [r7, #116]	; 0x74
 800e91e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e920:	691a      	ldr	r2, [r3, #16]
 800e922:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e924:	005b      	lsls	r3, r3, #1
 800e926:	4413      	add	r3, r2
 800e928:	881b      	ldrh	r3, [r3, #0]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1f4      	bne.n	800e918 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e92e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	2b04      	cmp	r3, #4
 800e934:	f040 80a3 	bne.w	800ea7e <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e93a:	330e      	adds	r3, #14
 800e93c:	4aa4      	ldr	r2, [pc, #656]	; (800ebd0 <dir_register+0x2e0>)
 800e93e:	fba2 2303 	umull	r2, r3, r2, r3
 800e942:	08db      	lsrs	r3, r3, #3
 800e944:	3302      	adds	r3, #2
 800e946:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e948:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff f93d 	bl	800dbca <dir_alloc>
 800e950:	4603      	mov	r3, r0
 800e952:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e956:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d002      	beq.n	800e964 <dir_register+0x74>
 800e95e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e962:	e169      	b.n	800ec38 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e96a:	3b01      	subs	r3, #1
 800e96c:	015b      	lsls	r3, r3, #5
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	689b      	ldr	r3, [r3, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d076      	beq.n	800ea6a <dir_register+0x17a>
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	79db      	ldrb	r3, [r3, #7]
 800e980:	f003 0304 	and.w	r3, r3, #4
 800e984:	2b00      	cmp	r3, #0
 800e986:	d070      	beq.n	800ea6a <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e98e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e990:	8949      	ldrh	r1, [r1, #10]
 800e992:	4608      	mov	r0, r1
 800e994:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e996:	8989      	ldrh	r1, [r1, #12]
 800e998:	fb00 f101 	mul.w	r1, r0, r1
 800e99c:	2000      	movs	r0, #0
 800e99e:	460c      	mov	r4, r1
 800e9a0:	4605      	mov	r5, r0
 800e9a2:	eb12 0804 	adds.w	r8, r2, r4
 800e9a6:	eb43 0905 	adc.w	r9, r3, r5
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7fe fd2e 	bl	800d414 <fill_first_frag>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e9be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d002      	beq.n	800e9cc <dir_register+0xdc>
 800e9c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9ca:	e135      	b.n	800ec38 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	f7fe fd4b 	bl	800d472 <fill_last_frag>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e9e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d002      	beq.n	800e9f0 <dir_register+0x100>
 800e9ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9ee:	e123      	b.n	800ec38 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	f107 0308 	add.w	r3, r7, #8
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff fc91 	bl	800e320 <load_obj_dir>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ea04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <dir_register+0x122>
 800ea0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea10:	e112      	b.n	800ec38 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ea12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea14:	695b      	ldr	r3, [r3, #20]
 800ea16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ea20:	4608      	mov	r0, r1
 800ea22:	f7fd fe10 	bl	800c646 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ea26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea28:	695b      	ldr	r3, [r3, #20]
 800ea2a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ea34:	4608      	mov	r0, r1
 800ea36:	f7fd fe06 	bl	800c646 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	79da      	ldrb	r2, [r3, #7]
 800ea3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea40:	695b      	ldr	r3, [r3, #20]
 800ea42:	3321      	adds	r3, #33	; 0x21
 800ea44:	f042 0201 	orr.w	r2, r2, #1
 800ea48:	b2d2      	uxtb	r2, r2
 800ea4a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ea4c:	f107 0308 	add.w	r3, r7, #8
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff fc9b 	bl	800e38c <store_xdir>
 800ea56:	4603      	mov	r3, r0
 800ea58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ea5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d002      	beq.n	800ea6a <dir_register+0x17a>
 800ea64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea68:	e0e6      	b.n	800ec38 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ea6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea6c:	695a      	ldr	r2, [r3, #20]
 800ea6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea70:	691b      	ldr	r3, [r3, #16]
 800ea72:	4619      	mov	r1, r3
 800ea74:	4610      	mov	r0, r2
 800ea76:	f7ff fce4 	bl	800e442 <create_xdir>
		return FR_OK;
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	e0dc      	b.n	800ec38 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ea84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ea88:	220c      	movs	r2, #12
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fd fe63 	bl	800c756 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ea90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d033      	beq.n	800eb04 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2240      	movs	r2, #64	; 0x40
 800eaa0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	67bb      	str	r3, [r7, #120]	; 0x78
 800eaa8:	e016      	b.n	800ead8 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800eab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eab2:	691a      	ldr	r2, [r3, #16]
 800eab4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800eab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaba:	f7ff fa5d 	bl	800df78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff fded 	bl	800e69e <dir_find>
 800eac4:	4603      	mov	r3, r0
 800eac6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800eaca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d106      	bne.n	800eae0 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800ead2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ead4:	3301      	adds	r3, #1
 800ead6:	67bb      	str	r3, [r7, #120]	; 0x78
 800ead8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eada:	2b63      	cmp	r3, #99	; 0x63
 800eadc:	d9e5      	bls.n	800eaaa <dir_register+0x1ba>
 800eade:	e000      	b.n	800eae2 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800eae0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800eae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eae4:	2b64      	cmp	r3, #100	; 0x64
 800eae6:	d101      	bne.n	800eaec <dir_register+0x1fc>
 800eae8:	2307      	movs	r3, #7
 800eaea:	e0a5      	b.n	800ec38 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800eaec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eaf0:	2b04      	cmp	r3, #4
 800eaf2:	d002      	beq.n	800eafa <dir_register+0x20a>
 800eaf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eaf8:	e09e      	b.n	800ec38 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800eafa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800eb04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d007      	beq.n	800eb20 <dir_register+0x230>
 800eb10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eb12:	330c      	adds	r3, #12
 800eb14:	4a2f      	ldr	r2, [pc, #188]	; (800ebd4 <dir_register+0x2e4>)
 800eb16:	fba2 2303 	umull	r2, r3, r2, r3
 800eb1a:	089b      	lsrs	r3, r3, #2
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	e000      	b.n	800eb22 <dir_register+0x232>
 800eb20:	2301      	movs	r3, #1
 800eb22:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eb24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f7ff f84f 	bl	800dbca <dir_alloc>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eb32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d14f      	bne.n	800ebda <dir_register+0x2ea>
 800eb3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb3c:	3b01      	subs	r3, #1
 800eb3e:	673b      	str	r3, [r7, #112]	; 0x70
 800eb40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d049      	beq.n	800ebda <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb4c:	015b      	lsls	r3, r3, #5
 800eb4e:	1ad3      	subs	r3, r2, r3
 800eb50:	4619      	mov	r1, r3
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7fe febf 	bl	800d8d6 <dir_sdi>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800eb5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d139      	bne.n	800ebda <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	3340      	adds	r3, #64	; 0x40
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f7ff fa92 	bl	800e094 <sum_sfn>
 800eb70:	4603      	mov	r3, r0
 800eb72:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb7e:	f7fe f819 	bl	800cbb4 <move_window>
 800eb82:	4603      	mov	r3, r0
 800eb84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800eb88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d123      	bne.n	800ebd8 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eb90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb92:	6918      	ldr	r0, [r3, #16]
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800eb98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb9a:	b2da      	uxtb	r2, r3
 800eb9c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800eba0:	f7ff f982 	bl	800dea8 <put_lfn>
				fs->wflag = 1;
 800eba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eba6:	2201      	movs	r2, #1
 800eba8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ebaa:	2100      	movs	r1, #0
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7fe ff26 	bl	800d9fe <dir_next>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800ebb8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10c      	bne.n	800ebda <dir_register+0x2ea>
 800ebc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebc2:	3b01      	subs	r3, #1
 800ebc4:	673b      	str	r3, [r7, #112]	; 0x70
 800ebc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d1d4      	bne.n	800eb76 <dir_register+0x286>
 800ebcc:	e005      	b.n	800ebda <dir_register+0x2ea>
 800ebce:	bf00      	nop
 800ebd0:	88888889 	.word	0x88888889
 800ebd4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800ebd8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ebda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d128      	bne.n	800ec34 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ebea:	f7fd ffe3 	bl	800cbb4 <move_window>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ebf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d11b      	bne.n	800ec34 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec00:	2220      	movs	r2, #32
 800ec02:	2100      	movs	r1, #0
 800ec04:	4618      	mov	r0, r3
 800ec06:	f7fd fdc7 	bl	800c798 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	3340      	adds	r3, #64	; 0x40
 800ec12:	220b      	movs	r2, #11
 800ec14:	4619      	mov	r1, r3
 800ec16:	f7fd fd9e 	bl	800c756 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec24:	330c      	adds	r3, #12
 800ec26:	f002 0218 	and.w	r2, r2, #24
 800ec2a:	b2d2      	uxtb	r2, r2
 800ec2c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ec2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ec30:	2201      	movs	r2, #1
 800ec32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ec34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3780      	adds	r7, #128	; 0x80
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec42:	bf00      	nop

0800ec44 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08a      	sub	sp, #40	; 0x28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
 800ec4c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	613b      	str	r3, [r7, #16]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	60fb      	str	r3, [r7, #12]
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	617b      	str	r3, [r7, #20]
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ec64:	69bb      	ldr	r3, [r7, #24]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	61ba      	str	r2, [r7, #24]
 800ec6a:	693a      	ldr	r2, [r7, #16]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ec72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec74:	2b1f      	cmp	r3, #31
 800ec76:	d940      	bls.n	800ecfa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ec78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec7a:	2b2f      	cmp	r3, #47	; 0x2f
 800ec7c:	d006      	beq.n	800ec8c <create_name+0x48>
 800ec7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec80:	2b5c      	cmp	r3, #92	; 0x5c
 800ec82:	d110      	bne.n	800eca6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ec84:	e002      	b.n	800ec8c <create_name+0x48>
 800ec86:	69bb      	ldr	r3, [r7, #24]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	61bb      	str	r3, [r7, #24]
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	69bb      	ldr	r3, [r7, #24]
 800ec90:	4413      	add	r3, r2
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	2b2f      	cmp	r3, #47	; 0x2f
 800ec96:	d0f6      	beq.n	800ec86 <create_name+0x42>
 800ec98:	693a      	ldr	r2, [r7, #16]
 800ec9a:	69bb      	ldr	r3, [r7, #24]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b5c      	cmp	r3, #92	; 0x5c
 800eca2:	d0f0      	beq.n	800ec86 <create_name+0x42>
			break;
 800eca4:	e02a      	b.n	800ecfc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	2bfe      	cmp	r3, #254	; 0xfe
 800ecaa:	d901      	bls.n	800ecb0 <create_name+0x6c>
 800ecac:	2306      	movs	r3, #6
 800ecae:	e17d      	b.n	800efac <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ecb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecb2:	b2db      	uxtb	r3, r3
 800ecb4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ecb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecb8:	2101      	movs	r1, #1
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f001 fd34 	bl	8010728 <ff_convert>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ecc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d101      	bne.n	800ecce <create_name+0x8a>
 800ecca:	2306      	movs	r3, #6
 800eccc:	e16e      	b.n	800efac <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ecce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecd0:	2b7f      	cmp	r3, #127	; 0x7f
 800ecd2:	d809      	bhi.n	800ece8 <create_name+0xa4>
 800ecd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecd6:	4619      	mov	r1, r3
 800ecd8:	488d      	ldr	r0, [pc, #564]	; (800ef10 <create_name+0x2cc>)
 800ecda:	f7fd fd9f 	bl	800c81c <chk_chr>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d001      	beq.n	800ece8 <create_name+0xa4>
 800ece4:	2306      	movs	r3, #6
 800ece6:	e161      	b.n	800efac <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	1c5a      	adds	r2, r3, #1
 800ecec:	617a      	str	r2, [r7, #20]
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecf6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ecf8:	e7b4      	b.n	800ec64 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ecfa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ecfc:	693a      	ldr	r2, [r7, #16]
 800ecfe:	69bb      	ldr	r3, [r7, #24]
 800ed00:	441a      	add	r2, r3
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ed06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed08:	2b1f      	cmp	r3, #31
 800ed0a:	d801      	bhi.n	800ed10 <create_name+0xcc>
 800ed0c:	2304      	movs	r3, #4
 800ed0e:	e000      	b.n	800ed12 <create_name+0xce>
 800ed10:	2300      	movs	r3, #0
 800ed12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ed16:	e011      	b.n	800ed3c <create_name+0xf8>
		w = lfn[di - 1];
 800ed18:	697a      	ldr	r2, [r7, #20]
 800ed1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ed1e:	4413      	add	r3, r2
 800ed20:	005b      	lsls	r3, r3, #1
 800ed22:	68fa      	ldr	r2, [r7, #12]
 800ed24:	4413      	add	r3, r2
 800ed26:	881b      	ldrh	r3, [r3, #0]
 800ed28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ed2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed2c:	2b20      	cmp	r3, #32
 800ed2e:	d002      	beq.n	800ed36 <create_name+0xf2>
 800ed30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed32:	2b2e      	cmp	r3, #46	; 0x2e
 800ed34:	d106      	bne.n	800ed44 <create_name+0x100>
		di--;
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	3b01      	subs	r3, #1
 800ed3a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1ea      	bne.n	800ed18 <create_name+0xd4>
 800ed42:	e000      	b.n	800ed46 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ed44:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	2200      	movs	r2, #0
 800ed50:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d101      	bne.n	800ed5c <create_name+0x118>
 800ed58:	2306      	movs	r3, #6
 800ed5a:	e127      	b.n	800efac <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	3340      	adds	r3, #64	; 0x40
 800ed60:	220b      	movs	r2, #11
 800ed62:	2120      	movs	r1, #32
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fd fd17 	bl	800c798 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	e002      	b.n	800ed76 <create_name+0x132>
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	3301      	adds	r3, #1
 800ed74:	61bb      	str	r3, [r7, #24]
 800ed76:	69bb      	ldr	r3, [r7, #24]
 800ed78:	005b      	lsls	r3, r3, #1
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	881b      	ldrh	r3, [r3, #0]
 800ed80:	2b20      	cmp	r3, #32
 800ed82:	d0f5      	beq.n	800ed70 <create_name+0x12c>
 800ed84:	69bb      	ldr	r3, [r7, #24]
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	68fa      	ldr	r2, [r7, #12]
 800ed8a:	4413      	add	r3, r2
 800ed8c:	881b      	ldrh	r3, [r3, #0]
 800ed8e:	2b2e      	cmp	r3, #46	; 0x2e
 800ed90:	d0ee      	beq.n	800ed70 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d009      	beq.n	800edac <create_name+0x168>
 800ed98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed9c:	f043 0303 	orr.w	r3, r3, #3
 800eda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800eda4:	e002      	b.n	800edac <create_name+0x168>
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	3b01      	subs	r3, #1
 800edaa:	617b      	str	r3, [r7, #20]
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d009      	beq.n	800edc6 <create_name+0x182>
 800edb2:	697a      	ldr	r2, [r7, #20]
 800edb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800edb8:	4413      	add	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	4413      	add	r3, r2
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	2b2e      	cmp	r3, #46	; 0x2e
 800edc4:	d1ef      	bne.n	800eda6 <create_name+0x162>

	i = b = 0; ni = 8;
 800edc6:	2300      	movs	r3, #0
 800edc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800edcc:	2300      	movs	r3, #0
 800edce:	623b      	str	r3, [r7, #32]
 800edd0:	2308      	movs	r3, #8
 800edd2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	61ba      	str	r2, [r7, #24]
 800edda:	005b      	lsls	r3, r3, #1
 800eddc:	68fa      	ldr	r2, [r7, #12]
 800edde:	4413      	add	r3, r2
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ede4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 8090 	beq.w	800ef0c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800edec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edee:	2b20      	cmp	r3, #32
 800edf0:	d006      	beq.n	800ee00 <create_name+0x1bc>
 800edf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf4:	2b2e      	cmp	r3, #46	; 0x2e
 800edf6:	d10a      	bne.n	800ee0e <create_name+0x1ca>
 800edf8:	69ba      	ldr	r2, [r7, #24]
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d006      	beq.n	800ee0e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800ee00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee04:	f043 0303 	orr.w	r3, r3, #3
 800ee08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee0c:	e07d      	b.n	800ef0a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ee0e:	6a3a      	ldr	r2, [r7, #32]
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d203      	bcs.n	800ee1e <create_name+0x1da>
 800ee16:	69ba      	ldr	r2, [r7, #24]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	d123      	bne.n	800ee66 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	2b0b      	cmp	r3, #11
 800ee22:	d106      	bne.n	800ee32 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ee24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee28:	f043 0303 	orr.w	r3, r3, #3
 800ee2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee30:	e075      	b.n	800ef1e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ee32:	69ba      	ldr	r2, [r7, #24]
 800ee34:	697b      	ldr	r3, [r7, #20]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d005      	beq.n	800ee46 <create_name+0x202>
 800ee3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee3e:	f043 0303 	orr.w	r3, r3, #3
 800ee42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ee46:	69ba      	ldr	r2, [r7, #24]
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d866      	bhi.n	800ef1c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	61bb      	str	r3, [r7, #24]
 800ee52:	2308      	movs	r3, #8
 800ee54:	623b      	str	r3, [r7, #32]
 800ee56:	230b      	movs	r3, #11
 800ee58:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ee5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee64:	e051      	b.n	800ef0a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ee66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee68:	2b7f      	cmp	r3, #127	; 0x7f
 800ee6a:	d914      	bls.n	800ee96 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ee6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee6e:	2100      	movs	r1, #0
 800ee70:	4618      	mov	r0, r3
 800ee72:	f001 fc59 	bl	8010728 <ff_convert>
 800ee76:	4603      	mov	r3, r0
 800ee78:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ee7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d004      	beq.n	800ee8a <create_name+0x246>
 800ee80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee82:	3b80      	subs	r3, #128	; 0x80
 800ee84:	4a23      	ldr	r2, [pc, #140]	; (800ef14 <create_name+0x2d0>)
 800ee86:	5cd3      	ldrb	r3, [r2, r3]
 800ee88:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ee8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee8e:	f043 0302 	orr.w	r3, r3, #2
 800ee92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ee96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d007      	beq.n	800eeac <create_name+0x268>
 800ee9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee9e:	4619      	mov	r1, r3
 800eea0:	481d      	ldr	r0, [pc, #116]	; (800ef18 <create_name+0x2d4>)
 800eea2:	f7fd fcbb 	bl	800c81c <chk_chr>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d008      	beq.n	800eebe <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800eeac:	235f      	movs	r3, #95	; 0x5f
 800eeae:	84bb      	strh	r3, [r7, #36]	; 0x24
 800eeb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeb4:	f043 0303 	orr.w	r3, r3, #3
 800eeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eebc:	e01b      	b.n	800eef6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800eebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec0:	2b40      	cmp	r3, #64	; 0x40
 800eec2:	d909      	bls.n	800eed8 <create_name+0x294>
 800eec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec6:	2b5a      	cmp	r3, #90	; 0x5a
 800eec8:	d806      	bhi.n	800eed8 <create_name+0x294>
					b |= 2;
 800eeca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eece:	f043 0302 	orr.w	r3, r3, #2
 800eed2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eed6:	e00e      	b.n	800eef6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800eed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeda:	2b60      	cmp	r3, #96	; 0x60
 800eedc:	d90b      	bls.n	800eef6 <create_name+0x2b2>
 800eede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eee0:	2b7a      	cmp	r3, #122	; 0x7a
 800eee2:	d808      	bhi.n	800eef6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eee4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eee8:	f043 0301 	orr.w	r3, r3, #1
 800eeec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eef0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eef2:	3b20      	subs	r3, #32
 800eef4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	1c5a      	adds	r2, r3, #1
 800eefa:	623a      	str	r2, [r7, #32]
 800eefc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eefe:	b2d1      	uxtb	r1, r2
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	4413      	add	r3, r2
 800ef04:	460a      	mov	r2, r1
 800ef06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800ef0a:	e763      	b.n	800edd4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ef0c:	bf00      	nop
 800ef0e:	e006      	b.n	800ef1e <create_name+0x2da>
 800ef10:	08011d80 	.word	0x08011d80
 800ef14:	08011e20 	.word	0x08011e20
 800ef18:	08011d8c 	.word	0x08011d8c
			if (si > di) break;			/* No extension */
 800ef1c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ef24:	2be5      	cmp	r3, #229	; 0xe5
 800ef26:	d103      	bne.n	800ef30 <create_name+0x2ec>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2205      	movs	r2, #5
 800ef2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	2b08      	cmp	r3, #8
 800ef34:	d104      	bne.n	800ef40 <create_name+0x2fc>
 800ef36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ef40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef44:	f003 030c 	and.w	r3, r3, #12
 800ef48:	2b0c      	cmp	r3, #12
 800ef4a:	d005      	beq.n	800ef58 <create_name+0x314>
 800ef4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef50:	f003 0303 	and.w	r3, r3, #3
 800ef54:	2b03      	cmp	r3, #3
 800ef56:	d105      	bne.n	800ef64 <create_name+0x320>
 800ef58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef5c:	f043 0302 	orr.w	r3, r3, #2
 800ef60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ef64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef68:	f003 0302 	and.w	r3, r3, #2
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d117      	bne.n	800efa0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ef70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef74:	f003 0303 	and.w	r3, r3, #3
 800ef78:	2b01      	cmp	r3, #1
 800ef7a:	d105      	bne.n	800ef88 <create_name+0x344>
 800ef7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef80:	f043 0310 	orr.w	r3, r3, #16
 800ef84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ef88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef8c:	f003 030c 	and.w	r3, r3, #12
 800ef90:	2b04      	cmp	r3, #4
 800ef92:	d105      	bne.n	800efa0 <create_name+0x35c>
 800ef94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef98:	f043 0308 	orr.w	r3, r3, #8
 800ef9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800efa6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800efaa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800efac:	4618      	mov	r0, r3
 800efae:	3728      	adds	r7, #40	; 0x28
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800efc8:	e002      	b.n	800efd0 <follow_path+0x1c>
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	3301      	adds	r3, #1
 800efce:	603b      	str	r3, [r7, #0]
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	781b      	ldrb	r3, [r3, #0]
 800efd4:	2b2f      	cmp	r3, #47	; 0x2f
 800efd6:	d0f8      	beq.n	800efca <follow_path+0x16>
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b5c      	cmp	r3, #92	; 0x5c
 800efde:	d0f4      	beq.n	800efca <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	2200      	movs	r2, #0
 800efe4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800efe6:	693b      	ldr	r3, [r7, #16]
 800efe8:	2200      	movs	r2, #0
 800efea:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	2b1f      	cmp	r3, #31
 800eff2:	d80a      	bhi.n	800f00a <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2280      	movs	r2, #128	; 0x80
 800eff8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800effc:	2100      	movs	r1, #0
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f7fe fc69 	bl	800d8d6 <dir_sdi>
 800f004:	4603      	mov	r3, r0
 800f006:	75fb      	strb	r3, [r7, #23]
 800f008:	e07d      	b.n	800f106 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f00a:	463b      	mov	r3, r7
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7ff fe18 	bl	800ec44 <create_name>
 800f014:	4603      	mov	r3, r0
 800f016:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f018:	7dfb      	ldrb	r3, [r7, #23]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d16e      	bne.n	800f0fc <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f7ff fb3d 	bl	800e69e <dir_find>
 800f024:	4603      	mov	r3, r0
 800f026:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f02e:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f030:	7dfb      	ldrb	r3, [r7, #23]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00a      	beq.n	800f04c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f036:	7dfb      	ldrb	r3, [r7, #23]
 800f038:	2b04      	cmp	r3, #4
 800f03a:	d161      	bne.n	800f100 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f03c:	7afb      	ldrb	r3, [r7, #11]
 800f03e:	f003 0304 	and.w	r3, r3, #4
 800f042:	2b00      	cmp	r3, #0
 800f044:	d15c      	bne.n	800f100 <follow_path+0x14c>
 800f046:	2305      	movs	r3, #5
 800f048:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f04a:	e059      	b.n	800f100 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f04c:	7afb      	ldrb	r3, [r7, #11]
 800f04e:	f003 0304 	and.w	r3, r3, #4
 800f052:	2b00      	cmp	r3, #0
 800f054:	d156      	bne.n	800f104 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f056:	693b      	ldr	r3, [r7, #16]
 800f058:	799b      	ldrb	r3, [r3, #6]
 800f05a:	f003 0310 	and.w	r3, r3, #16
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d102      	bne.n	800f068 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f062:	2305      	movs	r3, #5
 800f064:	75fb      	strb	r3, [r7, #23]
 800f066:	e04e      	b.n	800f106 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	781b      	ldrb	r3, [r3, #0]
 800f06c:	2b04      	cmp	r3, #4
 800f06e:	d130      	bne.n	800f0d2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	689a      	ldr	r2, [r3, #8]
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f07e:	4613      	mov	r3, r2
 800f080:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f084:	693a      	ldr	r2, [r7, #16]
 800f086:	79d2      	ldrb	r2, [r2, #7]
 800f088:	431a      	orrs	r2, r3
 800f08a:	693b      	ldr	r3, [r7, #16]
 800f08c:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	695b      	ldr	r3, [r3, #20]
 800f09a:	3334      	adds	r3, #52	; 0x34
 800f09c:	4618      	mov	r0, r3
 800f09e:	f7fd f98d 	bl	800c3bc <ld_dword>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	695b      	ldr	r3, [r3, #20]
 800f0ac:	3321      	adds	r3, #33	; 0x21
 800f0ae:	781b      	ldrb	r3, [r3, #0]
 800f0b0:	f003 0302 	and.w	r3, r3, #2
 800f0b4:	b2da      	uxtb	r2, r3
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	695b      	ldr	r3, [r3, #20]
 800f0be:	3338      	adds	r3, #56	; 0x38
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fd f99e 	bl	800c402 <ld_qword>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	6939      	ldr	r1, [r7, #16]
 800f0cc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f0d0:	e79b      	b.n	800f00a <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	8992      	ldrh	r2, [r2, #12]
 800f0e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0e4:	fb00 f202 	mul.w	r2, r0, r2
 800f0e8:	1a9b      	subs	r3, r3, r2
 800f0ea:	440b      	add	r3, r1
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f7fe fdc7 	bl	800dc82 <ld_clust>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f0fa:	e786      	b.n	800f00a <follow_path+0x56>
			if (res != FR_OK) break;
 800f0fc:	bf00      	nop
 800f0fe:	e002      	b.n	800f106 <follow_path+0x152>
				break;
 800f100:	bf00      	nop
 800f102:	e000      	b.n	800f106 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f104:	bf00      	nop
			}
		}
	}

	return res;
 800f106:	7dfb      	ldrb	r3, [r7, #23]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3718      	adds	r7, #24
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f110:	b480      	push	{r7}
 800f112:	b087      	sub	sp, #28
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f118:	f04f 33ff 	mov.w	r3, #4294967295
 800f11c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d031      	beq.n	800f18a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	617b      	str	r3, [r7, #20]
 800f12c:	e002      	b.n	800f134 <get_ldnumber+0x24>
 800f12e:	697b      	ldr	r3, [r7, #20]
 800f130:	3301      	adds	r3, #1
 800f132:	617b      	str	r3, [r7, #20]
 800f134:	697b      	ldr	r3, [r7, #20]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	2b1f      	cmp	r3, #31
 800f13a:	d903      	bls.n	800f144 <get_ldnumber+0x34>
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	2b3a      	cmp	r3, #58	; 0x3a
 800f142:	d1f4      	bne.n	800f12e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	2b3a      	cmp	r3, #58	; 0x3a
 800f14a:	d11c      	bne.n	800f186 <get_ldnumber+0x76>
			tp = *path;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	60fa      	str	r2, [r7, #12]
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	3b30      	subs	r3, #48	; 0x30
 800f15c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b09      	cmp	r3, #9
 800f162:	d80e      	bhi.n	800f182 <get_ldnumber+0x72>
 800f164:	68fa      	ldr	r2, [r7, #12]
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d10a      	bne.n	800f182 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d107      	bne.n	800f182 <get_ldnumber+0x72>
					vol = (int)i;
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	3301      	adds	r3, #1
 800f17a:	617b      	str	r3, [r7, #20]
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	697a      	ldr	r2, [r7, #20]
 800f180:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	e002      	b.n	800f18c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f186:	2300      	movs	r3, #0
 800f188:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f18a:	693b      	ldr	r3, [r7, #16]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	371c      	adds	r7, #28
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	70da      	strb	r2, [r3, #3]
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ae:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f1b0:	6839      	ldr	r1, [r7, #0]
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7fd fcfe 	bl	800cbb4 <move_window>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <check_fs+0x2a>
 800f1be:	2304      	movs	r3, #4
 800f1c0:	e044      	b.n	800f24c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	333c      	adds	r3, #60	; 0x3c
 800f1c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fd f8de 	bl	800c38c <ld_word>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d001      	beq.n	800f1e0 <check_fs+0x48>
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e035      	b.n	800f24c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1e6:	2be9      	cmp	r3, #233	; 0xe9
 800f1e8:	d009      	beq.n	800f1fe <check_fs+0x66>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1f0:	2beb      	cmp	r3, #235	; 0xeb
 800f1f2:	d11e      	bne.n	800f232 <check_fs+0x9a>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1fa:	2b90      	cmp	r3, #144	; 0x90
 800f1fc:	d119      	bne.n	800f232 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	333c      	adds	r3, #60	; 0x3c
 800f202:	3336      	adds	r3, #54	; 0x36
 800f204:	4618      	mov	r0, r3
 800f206:	f7fd f8d9 	bl	800c3bc <ld_dword>
 800f20a:	4603      	mov	r3, r0
 800f20c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f210:	4a10      	ldr	r2, [pc, #64]	; (800f254 <check_fs+0xbc>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d101      	bne.n	800f21a <check_fs+0x82>
 800f216:	2300      	movs	r3, #0
 800f218:	e018      	b.n	800f24c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	333c      	adds	r3, #60	; 0x3c
 800f21e:	3352      	adds	r3, #82	; 0x52
 800f220:	4618      	mov	r0, r3
 800f222:	f7fd f8cb 	bl	800c3bc <ld_dword>
 800f226:	4603      	mov	r3, r0
 800f228:	4a0b      	ldr	r2, [pc, #44]	; (800f258 <check_fs+0xc0>)
 800f22a:	4293      	cmp	r3, r2
 800f22c:	d101      	bne.n	800f232 <check_fs+0x9a>
 800f22e:	2300      	movs	r3, #0
 800f230:	e00c      	b.n	800f24c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	333c      	adds	r3, #60	; 0x3c
 800f236:	220b      	movs	r2, #11
 800f238:	4908      	ldr	r1, [pc, #32]	; (800f25c <check_fs+0xc4>)
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fd fac7 	bl	800c7ce <mem_cmp>
 800f240:	4603      	mov	r3, r0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d101      	bne.n	800f24a <check_fs+0xb2>
 800f246:	2301      	movs	r3, #1
 800f248:	e000      	b.n	800f24c <check_fs+0xb4>
#endif
	return 2;
 800f24a:	2302      	movs	r3, #2
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3708      	adds	r7, #8
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	00544146 	.word	0x00544146
 800f258:	33544146 	.word	0x33544146
 800f25c:	08011d94 	.word	0x08011d94

0800f260 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f264:	b09c      	sub	sp, #112	; 0x70
 800f266:	af00      	add	r7, sp, #0
 800f268:	61f8      	str	r0, [r7, #28]
 800f26a:	61b9      	str	r1, [r7, #24]
 800f26c:	4613      	mov	r3, r2
 800f26e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f270:	69bb      	ldr	r3, [r7, #24]
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f276:	69f8      	ldr	r0, [r7, #28]
 800f278:	f7ff ff4a 	bl	800f110 <get_ldnumber>
 800f27c:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800f27e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f280:	2b00      	cmp	r3, #0
 800f282:	da01      	bge.n	800f288 <find_volume+0x28>
 800f284:	230b      	movs	r3, #11
 800f286:	e376      	b.n	800f976 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f288:	4aa6      	ldr	r2, [pc, #664]	; (800f524 <find_volume+0x2c4>)
 800f28a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f28c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f290:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f294:	2b00      	cmp	r3, #0
 800f296:	d101      	bne.n	800f29c <find_volume+0x3c>
 800f298:	230c      	movs	r3, #12
 800f29a:	e36c      	b.n	800f976 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2a0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
 800f2a4:	f023 0301 	bic.w	r3, r3, #1
 800f2a8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f2aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d01a      	beq.n	800f2e8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800f2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b4:	785b      	ldrb	r3, [r3, #1]
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f7fc ffca 	bl	800c250 <disk_status>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f2c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f2c6:	f003 0301 	and.w	r3, r3, #1
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d10c      	bne.n	800f2e8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f2ce:	7dfb      	ldrb	r3, [r7, #23]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d007      	beq.n	800f2e4 <find_volume+0x84>
 800f2d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f2d8:	f003 0304 	and.w	r3, r3, #4
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d001      	beq.n	800f2e4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f2e0:	230a      	movs	r3, #10
 800f2e2:	e348      	b.n	800f976 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e346      	b.n	800f976 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f2e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2f0:	b2da      	uxtb	r2, r3
 800f2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f8:	785b      	ldrb	r3, [r3, #1]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fc ffc2 	bl	800c284 <disk_initialize>
 800f300:	4603      	mov	r3, r0
 800f302:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f306:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f30a:	f003 0301 	and.w	r3, r3, #1
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d001      	beq.n	800f316 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f312:	2303      	movs	r3, #3
 800f314:	e32f      	b.n	800f976 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f316:	7dfb      	ldrb	r3, [r7, #23]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d007      	beq.n	800f32c <find_volume+0xcc>
 800f31c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f320:	f003 0304 	and.w	r3, r3, #4
 800f324:	2b00      	cmp	r3, #0
 800f326:	d001      	beq.n	800f32c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f328:	230a      	movs	r3, #10
 800f32a:	e324      	b.n	800f976 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f32e:	7858      	ldrb	r0, [r3, #1]
 800f330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f332:	330c      	adds	r3, #12
 800f334:	461a      	mov	r2, r3
 800f336:	2102      	movs	r1, #2
 800f338:	f7fd f80a 	bl	800c350 <disk_ioctl>
 800f33c:	4603      	mov	r3, r0
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d001      	beq.n	800f346 <find_volume+0xe6>
 800f342:	2301      	movs	r3, #1
 800f344:	e317      	b.n	800f976 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f348:	899b      	ldrh	r3, [r3, #12]
 800f34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f34e:	d80d      	bhi.n	800f36c <find_volume+0x10c>
 800f350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f352:	899b      	ldrh	r3, [r3, #12]
 800f354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f358:	d308      	bcc.n	800f36c <find_volume+0x10c>
 800f35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f35c:	899b      	ldrh	r3, [r3, #12]
 800f35e:	461a      	mov	r2, r3
 800f360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f362:	899b      	ldrh	r3, [r3, #12]
 800f364:	3b01      	subs	r3, #1
 800f366:	4013      	ands	r3, r2
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d001      	beq.n	800f370 <find_volume+0x110>
 800f36c:	2301      	movs	r3, #1
 800f36e:	e302      	b.n	800f976 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f374:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f376:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f378:	f7ff ff0e 	bl	800f198 <check_fs>
 800f37c:	4603      	mov	r3, r0
 800f37e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f382:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f386:	2b02      	cmp	r3, #2
 800f388:	d14d      	bne.n	800f426 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f38a:	2300      	movs	r3, #0
 800f38c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f38e:	e020      	b.n	800f3d2 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f392:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f398:	011b      	lsls	r3, r3, #4
 800f39a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f39e:	4413      	add	r3, r2
 800f3a0:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3a4:	3304      	adds	r3, #4
 800f3a6:	781b      	ldrb	r3, [r3, #0]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d006      	beq.n	800f3ba <find_volume+0x15a>
 800f3ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3ae:	3308      	adds	r3, #8
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f7fd f803 	bl	800c3bc <ld_dword>
 800f3b6:	4602      	mov	r2, r0
 800f3b8:	e000      	b.n	800f3bc <find_volume+0x15c>
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	3360      	adds	r3, #96	; 0x60
 800f3c2:	f107 0110 	add.w	r1, r7, #16
 800f3c6:	440b      	add	r3, r1
 800f3c8:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f3cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3d4:	2b03      	cmp	r3, #3
 800f3d6:	d9db      	bls.n	800f390 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f3d8:	2300      	movs	r3, #0
 800f3da:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800f3dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <find_volume+0x188>
 800f3e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f3e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	3360      	adds	r3, #96	; 0x60
 800f3ee:	f107 0210 	add.w	r2, r7, #16
 800f3f2:	4413      	add	r3, r2
 800f3f4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f3f8:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f3fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d005      	beq.n	800f40c <find_volume+0x1ac>
 800f400:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f402:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f404:	f7ff fec8 	bl	800f198 <check_fs>
 800f408:	4603      	mov	r3, r0
 800f40a:	e000      	b.n	800f40e <find_volume+0x1ae>
 800f40c:	2303      	movs	r3, #3
 800f40e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f412:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f416:	2b01      	cmp	r3, #1
 800f418:	d905      	bls.n	800f426 <find_volume+0x1c6>
 800f41a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f41c:	3301      	adds	r3, #1
 800f41e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f422:	2b03      	cmp	r3, #3
 800f424:	d9e0      	bls.n	800f3e8 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f426:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d101      	bne.n	800f432 <find_volume+0x1d2>
 800f42e:	2301      	movs	r3, #1
 800f430:	e2a1      	b.n	800f976 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f432:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f436:	2b01      	cmp	r3, #1
 800f438:	d901      	bls.n	800f43e <find_volume+0x1de>
 800f43a:	230d      	movs	r3, #13
 800f43c:	e29b      	b.n	800f976 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f43e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f442:	2b01      	cmp	r3, #1
 800f444:	f040 8101 	bne.w	800f64a <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f448:	230b      	movs	r3, #11
 800f44a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f44c:	e002      	b.n	800f454 <find_volume+0x1f4>
 800f44e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f450:	3301      	adds	r3, #1
 800f452:	65bb      	str	r3, [r7, #88]	; 0x58
 800f454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f456:	2b3f      	cmp	r3, #63	; 0x3f
 800f458:	d806      	bhi.n	800f468 <find_volume+0x208>
 800f45a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f45c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f45e:	4413      	add	r3, r2
 800f460:	333c      	adds	r3, #60	; 0x3c
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d0f2      	beq.n	800f44e <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f46a:	2b3f      	cmp	r3, #63	; 0x3f
 800f46c:	d801      	bhi.n	800f472 <find_volume+0x212>
 800f46e:	230d      	movs	r3, #13
 800f470:	e281      	b.n	800f976 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f474:	333c      	adds	r3, #60	; 0x3c
 800f476:	3368      	adds	r3, #104	; 0x68
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fc ff87 	bl	800c38c <ld_word>
 800f47e:	4603      	mov	r3, r0
 800f480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f484:	d001      	beq.n	800f48a <find_volume+0x22a>
 800f486:	230d      	movs	r3, #13
 800f488:	e275      	b.n	800f976 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f48a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f48c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800f490:	461a      	mov	r2, r3
 800f492:	2301      	movs	r3, #1
 800f494:	4093      	lsls	r3, r2
 800f496:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f498:	8992      	ldrh	r2, [r2, #12]
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d001      	beq.n	800f4a2 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800f49e:	230d      	movs	r3, #13
 800f4a0:	e269      	b.n	800f976 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4a4:	333c      	adds	r3, #60	; 0x3c
 800f4a6:	3348      	adds	r3, #72	; 0x48
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7fc ffaa 	bl	800c402 <ld_qword>
 800f4ae:	4602      	mov	r2, r0
 800f4b0:	460b      	mov	r3, r1
 800f4b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f4b4:	2000      	movs	r0, #0
 800f4b6:	60b9      	str	r1, [r7, #8]
 800f4b8:	60f8      	str	r0, [r7, #12]
 800f4ba:	68b9      	ldr	r1, [r7, #8]
 800f4bc:	1851      	adds	r1, r2, r1
 800f4be:	6039      	str	r1, [r7, #0]
 800f4c0:	68f9      	ldr	r1, [r7, #12]
 800f4c2:	eb43 0101 	adc.w	r1, r3, r1
 800f4c6:	6079      	str	r1, [r7, #4]
 800f4c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f4d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f4d4:	2b01      	cmp	r3, #1
 800f4d6:	d301      	bcc.n	800f4dc <find_volume+0x27c>
 800f4d8:	230d      	movs	r3, #13
 800f4da:	e24c      	b.n	800f976 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f4dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4de:	333c      	adds	r3, #60	; 0x3c
 800f4e0:	3354      	adds	r3, #84	; 0x54
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fc ff6a 	bl	800c3bc <ld_dword>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ec:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f4ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f0:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800f4f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f4f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4fa:	789b      	ldrb	r3, [r3, #2]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	d001      	beq.n	800f504 <find_volume+0x2a4>
 800f500:	230d      	movs	r3, #13
 800f502:	e238      	b.n	800f976 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f506:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f50a:	461a      	mov	r2, r3
 800f50c:	2301      	movs	r3, #1
 800f50e:	4093      	lsls	r3, r2
 800f510:	b29a      	uxth	r2, r3
 800f512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f514:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f518:	895b      	ldrh	r3, [r3, #10]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d104      	bne.n	800f528 <find_volume+0x2c8>
 800f51e:	230d      	movs	r3, #13
 800f520:	e229      	b.n	800f976 <find_volume+0x716>
 800f522:	bf00      	nop
 800f524:	24002348 	.word	0x24002348

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f52a:	333c      	adds	r3, #60	; 0x3c
 800f52c:	335c      	adds	r3, #92	; 0x5c
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fc ff44 	bl	800c3bc <ld_dword>
 800f534:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f538:	4a99      	ldr	r2, [pc, #612]	; (800f7a0 <find_volume+0x540>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d901      	bls.n	800f542 <find_volume+0x2e2>
 800f53e:	230d      	movs	r3, #13
 800f540:	e219      	b.n	800f976 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800f542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f544:	1c9a      	adds	r2, r3, #2
 800f546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f548:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f54a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f54c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f54e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f552:	333c      	adds	r3, #60	; 0x3c
 800f554:	3358      	adds	r3, #88	; 0x58
 800f556:	4618      	mov	r0, r3
 800f558:	f7fc ff30 	bl	800c3bc <ld_dword>
 800f55c:	4602      	mov	r2, r0
 800f55e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f560:	441a      	add	r2, r3
 800f562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f564:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f568:	333c      	adds	r3, #60	; 0x3c
 800f56a:	3350      	adds	r3, #80	; 0x50
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fc ff25 	bl	800c3bc <ld_dword>
 800f572:	4602      	mov	r2, r0
 800f574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f576:	441a      	add	r2, r3
 800f578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f57a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f57e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f580:	2200      	movs	r2, #0
 800f582:	469a      	mov	sl, r3
 800f584:	4693      	mov	fp, r2
 800f586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f588:	895b      	ldrh	r3, [r3, #10]
 800f58a:	461a      	mov	r2, r3
 800f58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f58e:	fb02 f303 	mul.w	r3, r2, r3
 800f592:	2200      	movs	r2, #0
 800f594:	4698      	mov	r8, r3
 800f596:	4691      	mov	r9, r2
 800f598:	eb1a 0408 	adds.w	r4, sl, r8
 800f59c:	eb4b 0509 	adc.w	r5, fp, r9
 800f5a0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f5a4:	42a2      	cmp	r2, r4
 800f5a6:	41ab      	sbcs	r3, r5
 800f5a8:	d201      	bcs.n	800f5ae <find_volume+0x34e>
 800f5aa:	230d      	movs	r3, #13
 800f5ac:	e1e3      	b.n	800f976 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b0:	333c      	adds	r3, #60	; 0x3c
 800f5b2:	3360      	adds	r3, #96	; 0x60
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fc ff01 	bl	800c3bc <ld_dword>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5be:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f5c8:	f7fd fb92 	bl	800ccf0 <clust2sect>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f5d2:	f7fd faef 	bl	800cbb4 <move_window>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d001      	beq.n	800f5e0 <find_volume+0x380>
 800f5dc:	2301      	movs	r3, #1
 800f5de:	e1ca      	b.n	800f976 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5e4:	e015      	b.n	800f612 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f5e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5ea:	4413      	add	r3, r2
 800f5ec:	333c      	adds	r3, #60	; 0x3c
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	2b81      	cmp	r3, #129	; 0x81
 800f5f2:	d10b      	bne.n	800f60c <find_volume+0x3ac>
 800f5f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5f6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f5fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5fc:	3314      	adds	r3, #20
 800f5fe:	4413      	add	r3, r2
 800f600:	4618      	mov	r0, r3
 800f602:	f7fc fedb 	bl	800c3bc <ld_dword>
 800f606:	4603      	mov	r3, r0
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d009      	beq.n	800f620 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f60c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f60e:	3320      	adds	r3, #32
 800f610:	65bb      	str	r3, [r7, #88]	; 0x58
 800f612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f614:	899b      	ldrh	r3, [r3, #12]
 800f616:	461a      	mov	r2, r3
 800f618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d3e3      	bcc.n	800f5e6 <find_volume+0x386>
 800f61e:	e000      	b.n	800f622 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f620:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f624:	899b      	ldrh	r3, [r3, #12]
 800f626:	461a      	mov	r2, r3
 800f628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d101      	bne.n	800f632 <find_volume+0x3d2>
 800f62e:	230d      	movs	r3, #13
 800f630:	e1a1      	b.n	800f976 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f634:	f04f 32ff 	mov.w	r2, #4294967295
 800f638:	61da      	str	r2, [r3, #28]
 800f63a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f63c:	69da      	ldr	r2, [r3, #28]
 800f63e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f640:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f642:	2304      	movs	r3, #4
 800f644:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f648:	e17d      	b.n	800f946 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64c:	333c      	adds	r3, #60	; 0x3c
 800f64e:	330b      	adds	r3, #11
 800f650:	4618      	mov	r0, r3
 800f652:	f7fc fe9b 	bl	800c38c <ld_word>
 800f656:	4603      	mov	r3, r0
 800f658:	461a      	mov	r2, r3
 800f65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f65c:	899b      	ldrh	r3, [r3, #12]
 800f65e:	429a      	cmp	r2, r3
 800f660:	d001      	beq.n	800f666 <find_volume+0x406>
 800f662:	230d      	movs	r3, #13
 800f664:	e187      	b.n	800f976 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f668:	333c      	adds	r3, #60	; 0x3c
 800f66a:	3316      	adds	r3, #22
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fc fe8d 	bl	800c38c <ld_word>
 800f672:	4603      	mov	r3, r0
 800f674:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f676:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d106      	bne.n	800f68a <find_volume+0x42a>
 800f67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67e:	333c      	adds	r3, #60	; 0x3c
 800f680:	3324      	adds	r3, #36	; 0x24
 800f682:	4618      	mov	r0, r3
 800f684:	f7fc fe9a 	bl	800c3bc <ld_dword>
 800f688:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800f68a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f68e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f692:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f698:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f69c:	789b      	ldrb	r3, [r3, #2]
 800f69e:	2b01      	cmp	r3, #1
 800f6a0:	d005      	beq.n	800f6ae <find_volume+0x44e>
 800f6a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6a4:	789b      	ldrb	r3, [r3, #2]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	d001      	beq.n	800f6ae <find_volume+0x44e>
 800f6aa:	230d      	movs	r3, #13
 800f6ac:	e163      	b.n	800f976 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f6ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b0:	789b      	ldrb	r3, [r3, #2]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f6b6:	fb02 f303 	mul.w	r3, r2, r3
 800f6ba:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f6bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6be:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6c6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f6c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6ca:	895b      	ldrh	r3, [r3, #10]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d008      	beq.n	800f6e2 <find_volume+0x482>
 800f6d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d2:	895b      	ldrh	r3, [r3, #10]
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d8:	895b      	ldrh	r3, [r3, #10]
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	4013      	ands	r3, r2
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d001      	beq.n	800f6e6 <find_volume+0x486>
 800f6e2:	230d      	movs	r3, #13
 800f6e4:	e147      	b.n	800f976 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e8:	333c      	adds	r3, #60	; 0x3c
 800f6ea:	3311      	adds	r3, #17
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fc fe4d 	bl	800c38c <ld_word>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	461a      	mov	r2, r3
 800f6f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6f8:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6fc:	891b      	ldrh	r3, [r3, #8]
 800f6fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f700:	8992      	ldrh	r2, [r2, #12]
 800f702:	0952      	lsrs	r2, r2, #5
 800f704:	b292      	uxth	r2, r2
 800f706:	fbb3 f1f2 	udiv	r1, r3, r2
 800f70a:	fb01 f202 	mul.w	r2, r1, r2
 800f70e:	1a9b      	subs	r3, r3, r2
 800f710:	b29b      	uxth	r3, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <find_volume+0x4ba>
 800f716:	230d      	movs	r3, #13
 800f718:	e12d      	b.n	800f976 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f71a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f71c:	333c      	adds	r3, #60	; 0x3c
 800f71e:	3313      	adds	r3, #19
 800f720:	4618      	mov	r0, r3
 800f722:	f7fc fe33 	bl	800c38c <ld_word>
 800f726:	4603      	mov	r3, r0
 800f728:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f72a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d106      	bne.n	800f73e <find_volume+0x4de>
 800f730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f732:	333c      	adds	r3, #60	; 0x3c
 800f734:	3320      	adds	r3, #32
 800f736:	4618      	mov	r0, r3
 800f738:	f7fc fe40 	bl	800c3bc <ld_dword>
 800f73c:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f73e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f740:	333c      	adds	r3, #60	; 0x3c
 800f742:	330e      	adds	r3, #14
 800f744:	4618      	mov	r0, r3
 800f746:	f7fc fe21 	bl	800c38c <ld_word>
 800f74a:	4603      	mov	r3, r0
 800f74c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f750:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f754:	2b00      	cmp	r3, #0
 800f756:	d101      	bne.n	800f75c <find_volume+0x4fc>
 800f758:	230d      	movs	r3, #13
 800f75a:	e10c      	b.n	800f976 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f75c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f762:	4413      	add	r3, r2
 800f764:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f766:	8911      	ldrh	r1, [r2, #8]
 800f768:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f76a:	8992      	ldrh	r2, [r2, #12]
 800f76c:	0952      	lsrs	r2, r2, #5
 800f76e:	b292      	uxth	r2, r2
 800f770:	fbb1 f2f2 	udiv	r2, r1, r2
 800f774:	b292      	uxth	r2, r2
 800f776:	4413      	add	r3, r2
 800f778:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f77a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f77c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f77e:	429a      	cmp	r2, r3
 800f780:	d201      	bcs.n	800f786 <find_volume+0x526>
 800f782:	230d      	movs	r3, #13
 800f784:	e0f7      	b.n	800f976 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f78a:	1ad3      	subs	r3, r2, r3
 800f78c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f78e:	8952      	ldrh	r2, [r2, #10]
 800f790:	fbb3 f3f2 	udiv	r3, r3, r2
 800f794:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d103      	bne.n	800f7a4 <find_volume+0x544>
 800f79c:	230d      	movs	r3, #13
 800f79e:	e0ea      	b.n	800f976 <find_volume+0x716>
 800f7a0:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800f7a4:	2303      	movs	r3, #3
 800f7a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f7aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ac:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d802      	bhi.n	800f7ba <find_volume+0x55a>
 800f7b4:	2302      	movs	r3, #2
 800f7b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7bc:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d802      	bhi.n	800f7ca <find_volume+0x56a>
 800f7c4:	2301      	movs	r3, #1
 800f7c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7cc:	1c9a      	adds	r2, r3, #2
 800f7ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f7d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7d6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f7d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f7dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7de:	441a      	add	r2, r3
 800f7e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f7e4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e8:	441a      	add	r2, r3
 800f7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ec:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f7ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f7f2:	2b03      	cmp	r3, #3
 800f7f4:	d11e      	bne.n	800f834 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f8:	333c      	adds	r3, #60	; 0x3c
 800f7fa:	332a      	adds	r3, #42	; 0x2a
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f7fc fdc5 	bl	800c38c <ld_word>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	d001      	beq.n	800f80c <find_volume+0x5ac>
 800f808:	230d      	movs	r3, #13
 800f80a:	e0b4      	b.n	800f976 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f80e:	891b      	ldrh	r3, [r3, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d001      	beq.n	800f818 <find_volume+0x5b8>
 800f814:	230d      	movs	r3, #13
 800f816:	e0ae      	b.n	800f976 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81a:	333c      	adds	r3, #60	; 0x3c
 800f81c:	332c      	adds	r3, #44	; 0x2c
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fc fdcc 	bl	800c3bc <ld_dword>
 800f824:	4602      	mov	r2, r0
 800f826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f828:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f82a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f82c:	6a1b      	ldr	r3, [r3, #32]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f832:	e01f      	b.n	800f874 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f836:	891b      	ldrh	r3, [r3, #8]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <find_volume+0x5e0>
 800f83c:	230d      	movs	r3, #13
 800f83e:	e09a      	b.n	800f976 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f844:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f846:	441a      	add	r2, r3
 800f848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f84a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f84c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f850:	2b02      	cmp	r3, #2
 800f852:	d103      	bne.n	800f85c <find_volume+0x5fc>
 800f854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f856:	6a1b      	ldr	r3, [r3, #32]
 800f858:	005b      	lsls	r3, r3, #1
 800f85a:	e00a      	b.n	800f872 <find_volume+0x612>
 800f85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f85e:	6a1a      	ldr	r2, [r3, #32]
 800f860:	4613      	mov	r3, r2
 800f862:	005b      	lsls	r3, r3, #1
 800f864:	4413      	add	r3, r2
 800f866:	085a      	lsrs	r2, r3, #1
 800f868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f86a:	6a1b      	ldr	r3, [r3, #32]
 800f86c:	f003 0301 	and.w	r3, r3, #1
 800f870:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f872:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f87a:	899b      	ldrh	r3, [r3, #12]
 800f87c:	4619      	mov	r1, r3
 800f87e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f880:	440b      	add	r3, r1
 800f882:	3b01      	subs	r3, #1
 800f884:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f886:	8989      	ldrh	r1, [r1, #12]
 800f888:	fbb3 f3f1 	udiv	r3, r3, r1
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d201      	bcs.n	800f894 <find_volume+0x634>
 800f890:	230d      	movs	r3, #13
 800f892:	e070      	b.n	800f976 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f896:	f04f 32ff 	mov.w	r2, #4294967295
 800f89a:	61da      	str	r2, [r3, #28]
 800f89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f89e:	69da      	ldr	r2, [r3, #28]
 800f8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a2:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f8a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a6:	2280      	movs	r2, #128	; 0x80
 800f8a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f8aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f8ae:	2b03      	cmp	r3, #3
 800f8b0:	d149      	bne.n	800f946 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8b4:	333c      	adds	r3, #60	; 0x3c
 800f8b6:	3330      	adds	r3, #48	; 0x30
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7fc fd67 	bl	800c38c <ld_word>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d140      	bne.n	800f946 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f8c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f8cc:	f7fd f972 	bl	800cbb4 <move_window>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d137      	bne.n	800f946 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800f8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8d8:	2200      	movs	r2, #0
 800f8da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8de:	333c      	adds	r3, #60	; 0x3c
 800f8e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f7fc fd51 	bl	800c38c <ld_word>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	461a      	mov	r2, r3
 800f8ee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d127      	bne.n	800f946 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f8:	333c      	adds	r3, #60	; 0x3c
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fc fd5e 	bl	800c3bc <ld_dword>
 800f900:	4603      	mov	r3, r0
 800f902:	4a1f      	ldr	r2, [pc, #124]	; (800f980 <find_volume+0x720>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d11e      	bne.n	800f946 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f90a:	333c      	adds	r3, #60	; 0x3c
 800f90c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f910:	4618      	mov	r0, r3
 800f912:	f7fc fd53 	bl	800c3bc <ld_dword>
 800f916:	4603      	mov	r3, r0
 800f918:	4a1a      	ldr	r2, [pc, #104]	; (800f984 <find_volume+0x724>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d113      	bne.n	800f946 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f920:	333c      	adds	r3, #60	; 0x3c
 800f922:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f926:	4618      	mov	r0, r3
 800f928:	f7fc fd48 	bl	800c3bc <ld_dword>
 800f92c:	4602      	mov	r2, r0
 800f92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f930:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f934:	333c      	adds	r3, #60	; 0x3c
 800f936:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f93a:	4618      	mov	r0, r3
 800f93c:	f7fc fd3e 	bl	800c3bc <ld_dword>
 800f940:	4602      	mov	r2, r0
 800f942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f944:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f948:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800f94c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f94e:	4b0e      	ldr	r3, [pc, #56]	; (800f988 <find_volume+0x728>)
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	4b0c      	ldr	r3, [pc, #48]	; (800f988 <find_volume+0x728>)
 800f958:	801a      	strh	r2, [r3, #0]
 800f95a:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <find_volume+0x728>)
 800f95c:	881a      	ldrh	r2, [r3, #0]
 800f95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f960:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f964:	4a09      	ldr	r2, [pc, #36]	; (800f98c <find_volume+0x72c>)
 800f966:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f96a:	4a09      	ldr	r2, [pc, #36]	; (800f990 <find_volume+0x730>)
 800f96c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f96e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f970:	f7fd f8b8 	bl	800cae4 <clear_lock>
#endif
	return FR_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	3770      	adds	r7, #112	; 0x70
 800f97a:	46bd      	mov	sp, r7
 800f97c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f980:	41615252 	.word	0x41615252
 800f984:	61417272 	.word	0x61417272
 800f988:	2400234c 	.word	0x2400234c
 800f98c:	240025d0 	.word	0x240025d0
 800f990:	24002370 	.word	0x24002370

0800f994 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b084      	sub	sp, #16
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f99e:	2309      	movs	r3, #9
 800f9a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d01c      	beq.n	800f9e2 <validate+0x4e>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d018      	beq.n	800f9e2 <validate+0x4e>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d013      	beq.n	800f9e2 <validate+0x4e>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	889a      	ldrh	r2, [r3, #4]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	88db      	ldrh	r3, [r3, #6]
 800f9c4:	429a      	cmp	r2, r3
 800f9c6:	d10c      	bne.n	800f9e2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	785b      	ldrb	r3, [r3, #1]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f7fc fc3e 	bl	800c250 <disk_status>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	f003 0301 	and.w	r3, r3, #1
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d101      	bne.n	800f9e2 <validate+0x4e>
			res = FR_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9e2:	7bfb      	ldrb	r3, [r7, #15]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d102      	bne.n	800f9ee <validate+0x5a>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	e000      	b.n	800f9f0 <validate+0x5c>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	683a      	ldr	r2, [r7, #0]
 800f9f2:	6013      	str	r3, [r2, #0]
	return res;
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3710      	adds	r7, #16
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b088      	sub	sp, #32
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fa0e:	68bb      	ldr	r3, [r7, #8]
 800fa10:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fa12:	f107 0310 	add.w	r3, r7, #16
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7ff fb7a 	bl	800f110 <get_ldnumber>
 800fa1c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	da01      	bge.n	800fa28 <f_mount+0x28>
 800fa24:	230b      	movs	r3, #11
 800fa26:	e02b      	b.n	800fa80 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa28:	4a17      	ldr	r2, [pc, #92]	; (800fa88 <f_mount+0x88>)
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa30:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fa38:	69b8      	ldr	r0, [r7, #24]
 800fa3a:	f7fd f853 	bl	800cae4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	2200      	movs	r2, #0
 800fa42:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d002      	beq.n	800fa50 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa50:	68fa      	ldr	r2, [r7, #12]
 800fa52:	490d      	ldr	r1, [pc, #52]	; (800fa88 <f_mount+0x88>)
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d002      	beq.n	800fa66 <f_mount+0x66>
 800fa60:	79fb      	ldrb	r3, [r7, #7]
 800fa62:	2b01      	cmp	r3, #1
 800fa64:	d001      	beq.n	800fa6a <f_mount+0x6a>
 800fa66:	2300      	movs	r3, #0
 800fa68:	e00a      	b.n	800fa80 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa6a:	f107 010c 	add.w	r1, r7, #12
 800fa6e:	f107 0308 	add.w	r3, r7, #8
 800fa72:	2200      	movs	r2, #0
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7ff fbf3 	bl	800f260 <find_volume>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3720      	adds	r7, #32
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	24002348 	.word	0x24002348

0800fa8c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa90:	b0a8      	sub	sp, #160	; 0xa0
 800fa92:	af00      	add	r7, sp, #0
 800fa94:	6278      	str	r0, [r7, #36]	; 0x24
 800fa96:	6239      	str	r1, [r7, #32]
 800fa98:	4613      	mov	r3, r2
 800fa9a:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <f_open+0x1a>
 800faa2:	2309      	movs	r3, #9
 800faa4:	e2c0      	b.n	8010028 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800faa6:	7ffb      	ldrb	r3, [r7, #31]
 800faa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faac:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800faae:	7ffb      	ldrb	r3, [r7, #31]
 800fab0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fab4:	f107 0020 	add.w	r0, r7, #32
 800fab8:	461a      	mov	r2, r3
 800faba:	f7ff fbd1 	bl	800f260 <find_volume>
 800fabe:	4603      	mov	r3, r0
 800fac0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800fac4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f040 82a4 	bne.w	8010016 <f_open+0x58a>
		dj.obj.fs = fs;
 800face:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad0:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fad2:	6a3b      	ldr	r3, [r7, #32]
 800fad4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fad8:	4619      	mov	r1, r3
 800fada:	4610      	mov	r0, r2
 800fadc:	f7ff fa6a 	bl	800efb4 <follow_path>
 800fae0:	4603      	mov	r3, r0
 800fae2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fae6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800faea:	2b00      	cmp	r3, #0
 800faec:	d11a      	bne.n	800fb24 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800faee:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800faf2:	b25b      	sxtb	r3, r3
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	da03      	bge.n	800fb00 <f_open+0x74>
				res = FR_INVALID_NAME;
 800faf8:	2306      	movs	r3, #6
 800fafa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800fafe:	e011      	b.n	800fb24 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb00:	7ffb      	ldrb	r3, [r7, #31]
 800fb02:	f023 0301 	bic.w	r3, r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	bf14      	ite	ne
 800fb0a:	2301      	movne	r3, #1
 800fb0c:	2300      	moveq	r3, #0
 800fb0e:	b2db      	uxtb	r3, r3
 800fb10:	461a      	mov	r2, r3
 800fb12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb16:	4611      	mov	r1, r2
 800fb18:	4618      	mov	r0, r3
 800fb1a:	f7fc fe9b 	bl	800c854 <chk_lock>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fb24:	7ffb      	ldrb	r3, [r7, #31]
 800fb26:	f003 031c 	and.w	r3, r3, #28
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	f000 8117 	beq.w	800fd5e <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800fb30:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d017      	beq.n	800fb68 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb38:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fb3c:	2b04      	cmp	r3, #4
 800fb3e:	d10e      	bne.n	800fb5e <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb40:	f7fc fee4 	bl	800c90c <enq_lock>
 800fb44:	4603      	mov	r3, r0
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d006      	beq.n	800fb58 <f_open+0xcc>
 800fb4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb4e:	4618      	mov	r0, r3
 800fb50:	f7fe fece 	bl	800e8f0 <dir_register>
 800fb54:	4603      	mov	r3, r0
 800fb56:	e000      	b.n	800fb5a <f_open+0xce>
 800fb58:	2312      	movs	r3, #18
 800fb5a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb5e:	7ffb      	ldrb	r3, [r7, #31]
 800fb60:	f043 0308 	orr.w	r3, r3, #8
 800fb64:	77fb      	strb	r3, [r7, #31]
 800fb66:	e011      	b.n	800fb8c <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb6c:	f003 0311 	and.w	r3, r3, #17
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d003      	beq.n	800fb7c <f_open+0xf0>
					res = FR_DENIED;
 800fb74:	2307      	movs	r3, #7
 800fb76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800fb7a:	e007      	b.n	800fb8c <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb7c:	7ffb      	ldrb	r3, [r7, #31]
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d002      	beq.n	800fb8c <f_open+0x100>
 800fb86:	2308      	movs	r3, #8
 800fb88:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb8c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	f040 8100 	bne.w	800fd96 <f_open+0x30a>
 800fb96:	7ffb      	ldrb	r3, [r7, #31]
 800fb98:	f003 0308 	and.w	r3, r3, #8
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	f000 80fa 	beq.w	800fd96 <f_open+0x30a>
				dw = GET_FATTIME();
 800fba2:	f7fc f9b9 	bl	800bf18 <get_fattime>
 800fba6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800fbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbac:	781b      	ldrb	r3, [r3, #0]
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	f040 8085 	bne.w	800fcbe <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800fbb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb8:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800fbba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbc:	695b      	ldr	r3, [r3, #20]
 800fbbe:	3334      	adds	r3, #52	; 0x34
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fc fbfb 	bl	800c3bc <ld_dword>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbca:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	695b      	ldr	r3, [r3, #20]
 800fbd0:	3338      	adds	r3, #56	; 0x38
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fc fc15 	bl	800c402 <ld_qword>
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbda:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe0:	695b      	ldr	r3, [r3, #20]
 800fbe2:	3321      	adds	r3, #33	; 0x21
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f003 0302 	and.w	r3, r3, #2
 800fbea:	b2db      	uxtb	r3, r3
 800fbec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbee:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	695b      	ldr	r3, [r3, #20]
 800fbfa:	3308      	adds	r3, #8
 800fbfc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fc fcf4 	bl	800c5ee <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800fc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc08:	695b      	ldr	r3, [r3, #20]
 800fc0a:	f103 0214 	add.w	r2, r3, #20
 800fc0e:	2300      	movs	r3, #0
 800fc10:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800fc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc14:	695b      	ldr	r3, [r3, #20]
 800fc16:	330c      	adds	r3, #12
 800fc18:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fc fce6 	bl	800c5ee <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	695b      	ldr	r3, [r3, #20]
 800fc26:	f103 0215 	add.w	r2, r3, #21
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800fc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc30:	695b      	ldr	r3, [r3, #20]
 800fc32:	1d1a      	adds	r2, r3, #4
 800fc34:	2320      	movs	r3, #32
 800fc36:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	695b      	ldr	r3, [r3, #20]
 800fc3c:	3334      	adds	r3, #52	; 0x34
 800fc3e:	2100      	movs	r1, #0
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7fc fcd4 	bl	800c5ee <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800fc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc48:	695b      	ldr	r3, [r3, #20]
 800fc4a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc4e:	f04f 0200 	mov.w	r2, #0
 800fc52:	f04f 0300 	mov.w	r3, #0
 800fc56:	4608      	mov	r0, r1
 800fc58:	f7fc fcf5 	bl	800c646 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800fc64:	f04f 0200 	mov.w	r2, #0
 800fc68:	f04f 0300 	mov.w	r3, #0
 800fc6c:	4608      	mov	r0, r1
 800fc6e:	f7fc fcea 	bl	800c646 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	695b      	ldr	r3, [r3, #20]
 800fc76:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800fc7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fe fb82 	bl	800e38c <store_xdir>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800fc8e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d17f      	bne.n	800fd96 <f_open+0x30a>
 800fc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc98:	689b      	ldr	r3, [r3, #8]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d07b      	beq.n	800fd96 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800fc9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	689b      	ldr	r3, [r3, #8]
 800fca4:	2200      	movs	r2, #0
 800fca6:	4619      	mov	r1, r3
 800fca8:	f7fd fc14 	bl	800d4d4 <remove_chain>
 800fcac:	4603      	mov	r3, r0
 800fcae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcb8:	3b01      	subs	r3, #1
 800fcba:	6193      	str	r3, [r2, #24]
 800fcbc:	e06b      	b.n	800fd96 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fcbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcc0:	330e      	adds	r3, #14
 800fcc2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fc fc91 	bl	800c5ee <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcce:	3316      	adds	r3, #22
 800fcd0:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7fc fc8a 	bl	800c5ee <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fcda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcdc:	f103 020b 	add.w	r2, r3, #11
 800fce0:	2320      	movs	r3, #32
 800fce2:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fce4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fce8:	4619      	mov	r1, r3
 800fcea:	4610      	mov	r0, r2
 800fcec:	f7fd ffc9 	bl	800dc82 <ld_clust>
 800fcf0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fcf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	4619      	mov	r1, r3
 800fcfc:	f7fd ffe0 	bl	800dcc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fd00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd02:	331c      	adds	r3, #28
 800fd04:	2100      	movs	r1, #0
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fc fc71 	bl	800c5ee <st_dword>
					fs->wflag = 1;
 800fd0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd0e:	2301      	movs	r3, #1
 800fd10:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fd12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d03d      	beq.n	800fd96 <f_open+0x30a>
						dw = fs->winsect;
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800fd22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd26:	2200      	movs	r2, #0
 800fd28:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7fd fbd1 	bl	800d4d4 <remove_chain>
 800fd32:	4603      	mov	r3, r0
 800fd34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800fd38:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d12a      	bne.n	800fd96 <f_open+0x30a>
							res = move_window(fs, dw);
 800fd40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd42:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fd46:	4618      	mov	r0, r3
 800fd48:	f7fc ff34 	bl	800cbb4 <move_window>
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd58:	3b01      	subs	r3, #1
 800fd5a:	6193      	str	r3, [r2, #24]
 800fd5c:	e01b      	b.n	800fd96 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd5e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d117      	bne.n	800fd96 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd66:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd6a:	f003 0310 	and.w	r3, r3, #16
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d003      	beq.n	800fd7a <f_open+0x2ee>
					res = FR_NO_FILE;
 800fd72:	2304      	movs	r3, #4
 800fd74:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800fd78:	e00d      	b.n	800fd96 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fd7a:	7ffb      	ldrb	r3, [r7, #31]
 800fd7c:	f003 0302 	and.w	r3, r3, #2
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d008      	beq.n	800fd96 <f_open+0x30a>
 800fd84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd88:	f003 0301 	and.w	r3, r3, #1
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <f_open+0x30a>
						res = FR_DENIED;
 800fd90:	2307      	movs	r3, #7
 800fd92:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd96:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d128      	bne.n	800fdf0 <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd9e:	7ffb      	ldrb	r3, [r7, #31]
 800fda0:	f003 0308 	and.w	r3, r3, #8
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d003      	beq.n	800fdb0 <f_open+0x324>
				mode |= FA_MODIFIED;
 800fda8:	7ffb      	ldrb	r3, [r7, #31]
 800fdaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdae:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fdb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb6:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800fdb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdbc:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fdbe:	7ffb      	ldrb	r3, [r7, #31]
 800fdc0:	f023 0301 	bic.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	bf14      	ite	ne
 800fdc8:	2301      	movne	r3, #1
 800fdca:	2300      	moveq	r3, #0
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	461a      	mov	r2, r3
 800fdd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7fc fdba 	bl	800c950 <inc_lock>
 800fddc:	4602      	mov	r2, r0
 800fdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde0:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d102      	bne.n	800fdf0 <f_open+0x364>
 800fdea:	2302      	movs	r3, #2
 800fdec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fdf0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f040 810e 	bne.w	8010016 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	2b04      	cmp	r3, #4
 800fe00:	d12d      	bne.n	800fe5e <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800fe02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe06:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800fe08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fe0c:	4613      	mov	r3, r2
 800fe0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fe12:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fe16:	431a      	orrs	r2, r3
 800fe18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800fe1c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fe1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe20:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800fe22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe24:	695b      	ldr	r3, [r3, #20]
 800fe26:	3334      	adds	r3, #52	; 0x34
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fc fac7 	bl	800c3bc <ld_dword>
 800fe2e:	4602      	mov	r2, r0
 800fe30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe32:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fe34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	3338      	adds	r3, #56	; 0x38
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7fc fae1 	bl	800c402 <ld_qword>
 800fe40:	4602      	mov	r2, r0
 800fe42:	460b      	mov	r3, r1
 800fe44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe46:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4c:	695b      	ldr	r3, [r3, #20]
 800fe4e:	3321      	adds	r3, #33	; 0x21
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	f003 0302 	and.w	r3, r3, #2
 800fe56:	b2da      	uxtb	r2, r3
 800fe58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5a:	71da      	strb	r2, [r3, #7]
 800fe5c:	e016      	b.n	800fe8c <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fe5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe62:	4619      	mov	r1, r3
 800fe64:	4610      	mov	r0, r2
 800fe66:	f7fd ff0c 	bl	800dc82 <ld_clust>
 800fe6a:	4602      	mov	r2, r0
 800fe6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fe70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe72:	331c      	adds	r3, #28
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fc faa1 	bl	800c3bc <ld_dword>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	613b      	str	r3, [r7, #16]
 800fe80:	617a      	str	r2, [r7, #20]
 800fe82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe88:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	2200      	movs	r2, #0
 800fe90:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe96:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9a:	88da      	ldrh	r2, [r3, #6]
 800fe9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	7ffa      	ldrb	r2, [r7, #31]
 800fea4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800fea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feaa:	2200      	movs	r2, #0
 800feac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800feb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb2:	2200      	movs	r2, #0
 800feb4:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800feb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feb8:	f04f 0200 	mov.w	r2, #0
 800febc:	f04f 0300 	mov.w	r3, #0
 800fec0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec6:	3354      	adds	r3, #84	; 0x54
 800fec8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fecc:	2100      	movs	r1, #0
 800fece:	4618      	mov	r0, r3
 800fed0:	f7fc fc62 	bl	800c798 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fed4:	7ffb      	ldrb	r3, [r7, #31]
 800fed6:	f003 0320 	and.w	r3, r3, #32
 800feda:	2b00      	cmp	r3, #0
 800fedc:	f000 809b 	beq.w	8010016 <f_open+0x58a>
 800fee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fee6:	4313      	orrs	r3, r2
 800fee8:	f000 8095 	beq.w	8010016 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800feec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feee:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fef2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fef4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefa:	895b      	ldrh	r3, [r3, #10]
 800fefc:	461a      	mov	r2, r3
 800fefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff00:	899b      	ldrh	r3, [r3, #12]
 800ff02:	fb02 f303 	mul.w	r3, r2, r3
 800ff06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ff0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0c:	689b      	ldr	r3, [r3, #8]
 800ff0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ff18:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800ff1c:	e023      	b.n	800ff66 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800ff1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff20:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fc ff03 	bl	800cd30 <get_fat>
 800ff2a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800ff2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d802      	bhi.n	800ff3c <f_open+0x4b0>
 800ff36:	2302      	movs	r3, #2
 800ff38:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ff3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff44:	d102      	bne.n	800ff4c <f_open+0x4c0>
 800ff46:	2301      	movs	r3, #1
 800ff48:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff50:	2200      	movs	r2, #0
 800ff52:	4698      	mov	r8, r3
 800ff54:	4691      	mov	r9, r2
 800ff56:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ff5a:	ebb2 0a08 	subs.w	sl, r2, r8
 800ff5e:	eb63 0b09 	sbc.w	fp, r3, r9
 800ff62:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800ff66:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d10a      	bne.n	800ff84 <f_open+0x4f8>
 800ff6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff72:	2200      	movs	r2, #0
 800ff74:	461c      	mov	r4, r3
 800ff76:	4615      	mov	r5, r2
 800ff78:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ff7c:	4294      	cmp	r4, r2
 800ff7e:	eb75 0303 	sbcs.w	r3, r5, r3
 800ff82:	d3cc      	bcc.n	800ff1e <f_open+0x492>
				}
				fp->clust = clst;
 800ff84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff8a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ff8c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d140      	bne.n	8010016 <f_open+0x58a>
 800ff94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff96:	899b      	ldrh	r3, [r3, #12]
 800ff98:	b29b      	uxth	r3, r3
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	60bb      	str	r3, [r7, #8]
 800ff9e:	60fa      	str	r2, [r7, #12]
 800ffa0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ffa4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ffa8:	f7f0 f9f2 	bl	8000390 <__aeabi_uldivmod>
 800ffac:	4313      	orrs	r3, r2
 800ffae:	d032      	beq.n	8010016 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ffb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb2:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fc fe9a 	bl	800ccf0 <clust2sect>
 800ffbc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800ffc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d103      	bne.n	800ffd0 <f_open+0x544>
						res = FR_INT_ERR;
 800ffc8:	2302      	movs	r3, #2
 800ffca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800ffce:	e022      	b.n	8010016 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ffd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd2:	899b      	ldrh	r3, [r3, #12]
 800ffd4:	b29b      	uxth	r3, r3
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	603b      	str	r3, [r7, #0]
 800ffda:	607a      	str	r2, [r7, #4]
 800ffdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffe0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ffe4:	f7f0 f9d4 	bl	8000390 <__aeabi_uldivmod>
 800ffe8:	4602      	mov	r2, r0
 800ffea:	460b      	mov	r3, r1
 800ffec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fff0:	441a      	add	r2, r3
 800fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff4:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff8:	7858      	ldrb	r0, [r3, #1]
 800fffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010002:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010004:	2301      	movs	r3, #1
 8010006:	f7fc f963 	bl	800c2d0 <disk_read>
 801000a:	4603      	mov	r3, r0
 801000c:	2b00      	cmp	r3, #0
 801000e:	d002      	beq.n	8010016 <f_open+0x58a>
 8010010:	2301      	movs	r3, #1
 8010012:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010016:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801001a:	2b00      	cmp	r3, #0
 801001c:	d002      	beq.n	8010024 <f_open+0x598>
 801001e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010020:	2200      	movs	r2, #0
 8010022:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010024:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8010028:	4618      	mov	r0, r3
 801002a:	37a0      	adds	r7, #160	; 0xa0
 801002c:	46bd      	mov	sp, r7
 801002e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010032 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010036:	b091      	sub	sp, #68	; 0x44
 8010038:	af00      	add	r7, sp, #0
 801003a:	61f8      	str	r0, [r7, #28]
 801003c:	61b9      	str	r1, [r7, #24]
 801003e:	617a      	str	r2, [r7, #20]
 8010040:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	2200      	movs	r2, #0
 801004a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	f107 0220 	add.w	r2, r7, #32
 8010052:	4611      	mov	r1, r2
 8010054:	4618      	mov	r0, r3
 8010056:	f7ff fc9d 	bl	800f994 <validate>
 801005a:	4603      	mov	r3, r0
 801005c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010060:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010064:	2b00      	cmp	r3, #0
 8010066:	d108      	bne.n	801007a <f_write+0x48>
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801006e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010072:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010076:	2b00      	cmp	r3, #0
 8010078:	d002      	beq.n	8010080 <f_write+0x4e>
 801007a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801007e:	e1aa      	b.n	80103d6 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010086:	f003 0302 	and.w	r3, r3, #2
 801008a:	2b00      	cmp	r3, #0
 801008c:	d101      	bne.n	8010092 <f_write+0x60>
 801008e:	2307      	movs	r3, #7
 8010090:	e1a1      	b.n	80103d6 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010092:	6a3b      	ldr	r3, [r7, #32]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	2b04      	cmp	r3, #4
 8010098:	f000 818d 	beq.w	80103b6 <f_write+0x384>
 801009c:	69fb      	ldr	r3, [r7, #28]
 801009e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	18d1      	adds	r1, r2, r3
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80100ac:	4613      	mov	r3, r2
 80100ae:	4299      	cmp	r1, r3
 80100b0:	f080 8181 	bcs.w	80103b6 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80100ba:	4613      	mov	r3, r2
 80100bc:	43db      	mvns	r3, r3
 80100be:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80100c0:	e179      	b.n	80103b6 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80100c8:	6a3b      	ldr	r3, [r7, #32]
 80100ca:	899b      	ldrh	r3, [r3, #12]
 80100cc:	b29b      	uxth	r3, r3
 80100ce:	2200      	movs	r2, #0
 80100d0:	461d      	mov	r5, r3
 80100d2:	4616      	mov	r6, r2
 80100d4:	462a      	mov	r2, r5
 80100d6:	4633      	mov	r3, r6
 80100d8:	f7f0 f95a 	bl	8000390 <__aeabi_uldivmod>
 80100dc:	4313      	orrs	r3, r2
 80100de:	f040 810a 	bne.w	80102f6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80100e8:	6a3b      	ldr	r3, [r7, #32]
 80100ea:	899b      	ldrh	r3, [r3, #12]
 80100ec:	b29b      	uxth	r3, r3
 80100ee:	2200      	movs	r2, #0
 80100f0:	60bb      	str	r3, [r7, #8]
 80100f2:	60fa      	str	r2, [r7, #12]
 80100f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80100f8:	f7f0 f94a 	bl	8000390 <__aeabi_uldivmod>
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	6a3b      	ldr	r3, [r7, #32]
 8010102:	895b      	ldrh	r3, [r3, #10]
 8010104:	3b01      	subs	r3, #1
 8010106:	4013      	ands	r3, r2
 8010108:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 801010a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010c:	2b00      	cmp	r3, #0
 801010e:	d146      	bne.n	801019e <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010110:	69fb      	ldr	r3, [r7, #28]
 8010112:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010116:	4313      	orrs	r3, r2
 8010118:	d10c      	bne.n	8010134 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801011a:	69fb      	ldr	r3, [r7, #28]
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8010120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010122:	2b00      	cmp	r3, #0
 8010124:	d11a      	bne.n	801015c <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	2100      	movs	r1, #0
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd fa86 	bl	800d63c <create_chain>
 8010130:	63b8      	str	r0, [r7, #56]	; 0x38
 8010132:	e013      	b.n	801015c <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010138:	2b00      	cmp	r3, #0
 801013a:	d007      	beq.n	801014c <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010142:	69f8      	ldr	r0, [r7, #28]
 8010144:	f7fd fb7b 	bl	800d83e <clmt_clust>
 8010148:	63b8      	str	r0, [r7, #56]	; 0x38
 801014a:	e007      	b.n	801015c <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801014c:	69fa      	ldr	r2, [r7, #28]
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010152:	4619      	mov	r1, r3
 8010154:	4610      	mov	r0, r2
 8010156:	f7fd fa71 	bl	800d63c <create_chain>
 801015a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	2b00      	cmp	r3, #0
 8010160:	f000 812e 	beq.w	80103c0 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010166:	2b01      	cmp	r3, #1
 8010168:	d105      	bne.n	8010176 <f_write+0x144>
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	2202      	movs	r2, #2
 801016e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010172:	2302      	movs	r3, #2
 8010174:	e12f      	b.n	80103d6 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801017c:	d105      	bne.n	801018a <f_write+0x158>
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	2201      	movs	r2, #1
 8010182:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010186:	2301      	movs	r3, #1
 8010188:	e125      	b.n	80103d6 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 801018a:	69fb      	ldr	r3, [r7, #28]
 801018c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801018e:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	689b      	ldr	r3, [r3, #8]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d102      	bne.n	801019e <f_write+0x16c>
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801019c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801019e:	69fb      	ldr	r3, [r7, #28]
 80101a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101a4:	b25b      	sxtb	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	da1b      	bge.n	80101e2 <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	7858      	ldrb	r0, [r3, #1]
 80101ae:	69fb      	ldr	r3, [r7, #28]
 80101b0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101b8:	2301      	movs	r3, #1
 80101ba:	f7fc f8a9 	bl	800c310 <disk_write>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d005      	beq.n	80101d0 <f_write+0x19e>
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80101cc:	2301      	movs	r3, #1
 80101ce:	e102      	b.n	80103d6 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80101d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80101e2:	6a3a      	ldr	r2, [r7, #32]
 80101e4:	69fb      	ldr	r3, [r7, #28]
 80101e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101e8:	4619      	mov	r1, r3
 80101ea:	4610      	mov	r0, r2
 80101ec:	f7fc fd80 	bl	800ccf0 <clust2sect>
 80101f0:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 80101f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d105      	bne.n	8010204 <f_write+0x1d2>
 80101f8:	69fb      	ldr	r3, [r7, #28]
 80101fa:	2202      	movs	r2, #2
 80101fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010200:	2302      	movs	r3, #2
 8010202:	e0e8      	b.n	80103d6 <f_write+0x3a4>
			sect += csect;
 8010204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010208:	4413      	add	r3, r2
 801020a:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801020c:	6a3b      	ldr	r3, [r7, #32]
 801020e:	899b      	ldrh	r3, [r3, #12]
 8010210:	461a      	mov	r2, r3
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	fbb3 f3f2 	udiv	r3, r3, r2
 8010218:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 801021a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021c:	2b00      	cmp	r3, #0
 801021e:	d046      	beq.n	80102ae <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010224:	4413      	add	r3, r2
 8010226:	6a3a      	ldr	r2, [r7, #32]
 8010228:	8952      	ldrh	r2, [r2, #10]
 801022a:	4293      	cmp	r3, r2
 801022c:	d905      	bls.n	801023a <f_write+0x208>
					cc = fs->csize - csect;
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	895b      	ldrh	r3, [r3, #10]
 8010232:	461a      	mov	r2, r3
 8010234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010236:	1ad3      	subs	r3, r2, r3
 8010238:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	7858      	ldrb	r0, [r3, #1]
 801023e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010242:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010244:	f7fc f864 	bl	800c310 <disk_write>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d005      	beq.n	801025a <f_write+0x228>
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	2201      	movs	r2, #1
 8010252:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010256:	2301      	movs	r3, #1
 8010258:	e0bd      	b.n	80103d6 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010260:	1ad3      	subs	r3, r2, r3
 8010262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010264:	429a      	cmp	r2, r3
 8010266:	d91a      	bls.n	801029e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010268:	69fb      	ldr	r3, [r7, #28]
 801026a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	6a3a      	ldr	r2, [r7, #32]
 8010278:	8992      	ldrh	r2, [r2, #12]
 801027a:	fb02 f303 	mul.w	r3, r2, r3
 801027e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010280:	18d1      	adds	r1, r2, r3
 8010282:	6a3b      	ldr	r3, [r7, #32]
 8010284:	899b      	ldrh	r3, [r3, #12]
 8010286:	461a      	mov	r2, r3
 8010288:	f7fc fa65 	bl	800c756 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010296:	b2da      	uxtb	r2, r3
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801029e:	6a3b      	ldr	r3, [r7, #32]
 80102a0:	899b      	ldrh	r3, [r3, #12]
 80102a2:	461a      	mov	r2, r3
 80102a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a6:	fb02 f303 	mul.w	r3, r2, r3
 80102aa:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 80102ac:	e058      	b.n	8010360 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80102ae:	69fb      	ldr	r3, [r7, #28]
 80102b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d01b      	beq.n	80102f0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80102c4:	4290      	cmp	r0, r2
 80102c6:	eb71 0303 	sbcs.w	r3, r1, r3
 80102ca:	d211      	bcs.n	80102f0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80102cc:	6a3b      	ldr	r3, [r7, #32]
 80102ce:	7858      	ldrb	r0, [r3, #1]
 80102d0:	69fb      	ldr	r3, [r7, #28]
 80102d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80102d6:	2301      	movs	r3, #1
 80102d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102da:	f7fb fff9 	bl	800c2d0 <disk_read>
 80102de:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d005      	beq.n	80102f0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80102ec:	2301      	movs	r3, #1
 80102ee:	e072      	b.n	80103d6 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102f4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80102f6:	6a3b      	ldr	r3, [r7, #32]
 80102f8:	899b      	ldrh	r3, [r3, #12]
 80102fa:	4618      	mov	r0, r3
 80102fc:	69fb      	ldr	r3, [r7, #28]
 80102fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	899b      	ldrh	r3, [r3, #12]
 8010306:	fbb2 f1f3 	udiv	r1, r2, r3
 801030a:	fb01 f303 	mul.w	r3, r1, r3
 801030e:	1ad3      	subs	r3, r2, r3
 8010310:	1ac3      	subs	r3, r0, r3
 8010312:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	429a      	cmp	r2, r3
 801031a:	d901      	bls.n	8010320 <f_write+0x2ee>
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8010326:	69fb      	ldr	r3, [r7, #28]
 8010328:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801032c:	6a3b      	ldr	r3, [r7, #32]
 801032e:	899b      	ldrh	r3, [r3, #12]
 8010330:	b29b      	uxth	r3, r3
 8010332:	2200      	movs	r2, #0
 8010334:	603b      	str	r3, [r7, #0]
 8010336:	607a      	str	r2, [r7, #4]
 8010338:	e9d7 2300 	ldrd	r2, r3, [r7]
 801033c:	f7f0 f828 	bl	8000390 <__aeabi_uldivmod>
 8010340:	4613      	mov	r3, r2
 8010342:	4423      	add	r3, r4
 8010344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010348:	4618      	mov	r0, r3
 801034a:	f7fc fa04 	bl	800c756 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010354:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010358:	b2da      	uxtb	r2, r3
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010364:	4413      	add	r3, r2
 8010366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801036e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010370:	2000      	movs	r0, #0
 8010372:	4688      	mov	r8, r1
 8010374:	4681      	mov	r9, r0
 8010376:	eb12 0a08 	adds.w	sl, r2, r8
 801037a:	eb43 0b09 	adc.w	fp, r3, r9
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8010384:	69fb      	ldr	r3, [r7, #28]
 8010386:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010390:	4290      	cmp	r0, r2
 8010392:	eb71 0403 	sbcs.w	r4, r1, r3
 8010396:	d201      	bcs.n	801039c <f_write+0x36a>
 8010398:	4610      	mov	r0, r2
 801039a:	4619      	mov	r1, r3
 801039c:	69fb      	ldr	r3, [r7, #28]
 801039e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	681a      	ldr	r2, [r3, #0]
 80103a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a8:	441a      	add	r2, r3
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	601a      	str	r2, [r3, #0]
 80103ae:	697a      	ldr	r2, [r7, #20]
 80103b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	f47f ae82 	bne.w	80100c2 <f_write+0x90>
 80103be:	e000      	b.n	80103c2 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80103c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80103c2:	69fb      	ldr	r3, [r7, #28]
 80103c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103cc:	b2da      	uxtb	r2, r3
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3744      	adds	r7, #68	; 0x44
 80103da:	46bd      	mov	sp, r7
 80103dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b09a      	sub	sp, #104	; 0x68
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80103ee:	4611      	mov	r1, r2
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff facf 	bl	800f994 <validate>
 80103f6:	4603      	mov	r3, r0
 80103f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80103fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010400:	2b00      	cmp	r3, #0
 8010402:	f040 8105 	bne.w	8010610 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801040c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010410:	2b00      	cmp	r3, #0
 8010412:	f000 80fd 	beq.w	8010610 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801041c:	b25b      	sxtb	r3, r3
 801041e:	2b00      	cmp	r3, #0
 8010420:	da17      	bge.n	8010452 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010422:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010424:	7858      	ldrb	r0, [r3, #1]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010430:	2301      	movs	r3, #1
 8010432:	f7fb ff6d 	bl	800c310 <disk_write>
 8010436:	4603      	mov	r3, r0
 8010438:	2b00      	cmp	r3, #0
 801043a:	d001      	beq.n	8010440 <f_sync+0x60>
 801043c:	2301      	movs	r3, #1
 801043e:	e0e9      	b.n	8010614 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801044a:	b2da      	uxtb	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010452:	f7fb fd61 	bl	800bf18 <get_fattime>
 8010456:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010458:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	2b04      	cmp	r3, #4
 801045e:	f040 808c 	bne.w	801057a <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	4618      	mov	r0, r3
 8010466:	f7fc ffd5 	bl	800d414 <fill_first_frag>
 801046a:	4603      	mov	r3, r0
 801046c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010470:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010474:	2b00      	cmp	r3, #0
 8010476:	d10a      	bne.n	801048e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801047e:	f04f 32ff 	mov.w	r2, #4294967295
 8010482:	4619      	mov	r1, r3
 8010484:	f7fc fff5 	bl	800d472 <fill_last_frag>
 8010488:	4603      	mov	r3, r0
 801048a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 801048e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010492:	2b00      	cmp	r3, #0
 8010494:	f040 80bc 	bne.w	8010610 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010498:	687a      	ldr	r2, [r7, #4]
 801049a:	f107 0308 	add.w	r3, r7, #8
 801049e:	4611      	mov	r1, r2
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7fd ff3d 	bl	800e320 <load_obj_dir>
 80104a6:	4603      	mov	r3, r0
 80104a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 80104ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f040 80ad 	bne.w	8010610 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80104b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104b8:	695b      	ldr	r3, [r3, #20]
 80104ba:	3304      	adds	r3, #4
 80104bc:	781a      	ldrb	r2, [r3, #0]
 80104be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104c0:	695b      	ldr	r3, [r3, #20]
 80104c2:	3304      	adds	r3, #4
 80104c4:	f042 0220 	orr.w	r2, r2, #32
 80104c8:	b2d2      	uxtb	r2, r2
 80104ca:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	79da      	ldrb	r2, [r3, #7]
 80104d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104d2:	695b      	ldr	r3, [r3, #20]
 80104d4:	3321      	adds	r3, #33	; 0x21
 80104d6:	f042 0201 	orr.w	r2, r2, #1
 80104da:	b2d2      	uxtb	r2, r2
 80104dc:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80104de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104e0:	695b      	ldr	r3, [r3, #20]
 80104e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	4619      	mov	r1, r3
 80104ec:	4610      	mov	r0, r2
 80104ee:	f7fc f87e 	bl	800c5ee <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80104f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010500:	4608      	mov	r0, r1
 8010502:	f7fc f8a0 	bl	800c646 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8010506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010514:	4608      	mov	r0, r1
 8010516:	f7fc f896 	bl	800c646 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 801051a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801051c:	695b      	ldr	r3, [r3, #20]
 801051e:	330c      	adds	r3, #12
 8010520:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010522:	4618      	mov	r0, r3
 8010524:	f7fc f863 	bl	800c5ee <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8010528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801052a:	695b      	ldr	r3, [r3, #20]
 801052c:	3315      	adds	r3, #21
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8010532:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010534:	695b      	ldr	r3, [r3, #20]
 8010536:	3310      	adds	r3, #16
 8010538:	2100      	movs	r1, #0
 801053a:	4618      	mov	r0, r3
 801053c:	f7fc f857 	bl	800c5ee <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010540:	f107 0308 	add.w	r3, r7, #8
 8010544:	4618      	mov	r0, r3
 8010546:	f7fd ff21 	bl	800e38c <store_xdir>
 801054a:	4603      	mov	r3, r0
 801054c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010554:	2b00      	cmp	r3, #0
 8010556:	d15b      	bne.n	8010610 <f_sync+0x230>
							res = sync_fs(fs);
 8010558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801055a:	4618      	mov	r0, r3
 801055c:	f7fc fb58 	bl	800cc10 <sync_fs>
 8010560:	4603      	mov	r3, r0
 8010562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801056c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010570:	b2da      	uxtb	r2, r3
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010578:	e04a      	b.n	8010610 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801057a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010580:	4619      	mov	r1, r3
 8010582:	4610      	mov	r0, r2
 8010584:	f7fc fb16 	bl	800cbb4 <move_window>
 8010588:	4603      	mov	r3, r0
 801058a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801058e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010592:	2b00      	cmp	r3, #0
 8010594:	d13c      	bne.n	8010610 <f_sync+0x230>
					dir = fp->dir_ptr;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801059a:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801059c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801059e:	330b      	adds	r3, #11
 80105a0:	781a      	ldrb	r2, [r3, #0]
 80105a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105a4:	330b      	adds	r3, #11
 80105a6:	f042 0220 	orr.w	r2, r2, #32
 80105aa:	b2d2      	uxtb	r2, r2
 80105ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6818      	ldr	r0, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	461a      	mov	r2, r3
 80105b8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80105ba:	f7fd fb81 	bl	800dcc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80105be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105c0:	f103 001c 	add.w	r0, r3, #28
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80105ca:	4613      	mov	r3, r2
 80105cc:	4619      	mov	r1, r3
 80105ce:	f7fc f80e 	bl	800c5ee <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80105d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105d4:	3316      	adds	r3, #22
 80105d6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80105d8:	4618      	mov	r0, r3
 80105da:	f7fc f808 	bl	800c5ee <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80105de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105e0:	3312      	adds	r3, #18
 80105e2:	2100      	movs	r1, #0
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fb ffe7 	bl	800c5b8 <st_word>
					fs->wflag = 1;
 80105ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105ec:	2201      	movs	r2, #1
 80105ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80105f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fc fb0c 	bl	800cc10 <sync_fs>
 80105f8:	4603      	mov	r3, r0
 80105fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010604:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010608:	b2da      	uxtb	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010614:	4618      	mov	r0, r3
 8010616:	3768      	adds	r7, #104	; 0x68
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7ff fedb 	bl	80103e0 <f_sync>
 801062a:	4603      	mov	r3, r0
 801062c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801062e:	7bfb      	ldrb	r3, [r7, #15]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d118      	bne.n	8010666 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f107 0208 	add.w	r2, r7, #8
 801063a:	4611      	mov	r1, r2
 801063c:	4618      	mov	r0, r3
 801063e:	f7ff f9a9 	bl	800f994 <validate>
 8010642:	4603      	mov	r3, r0
 8010644:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010646:	7bfb      	ldrb	r3, [r7, #15]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10c      	bne.n	8010666 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010650:	4618      	mov	r0, r3
 8010652:	f7fc fa0b 	bl	800ca6c <dec_lock>
 8010656:	4603      	mov	r3, r0
 8010658:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801065a:	7bfb      	ldrb	r3, [r7, #15]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d102      	bne.n	8010666 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2200      	movs	r2, #0
 8010664:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010666:	7bfb      	ldrb	r3, [r7, #15]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}

08010670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010670:	b480      	push	{r7}
 8010672:	b087      	sub	sp, #28
 8010674:	af00      	add	r7, sp, #0
 8010676:	60f8      	str	r0, [r7, #12]
 8010678:	60b9      	str	r1, [r7, #8]
 801067a:	4613      	mov	r3, r2
 801067c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801067e:	2301      	movs	r3, #1
 8010680:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010686:	4b1f      	ldr	r3, [pc, #124]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 8010688:	7a5b      	ldrb	r3, [r3, #9]
 801068a:	b2db      	uxtb	r3, r3
 801068c:	2b00      	cmp	r3, #0
 801068e:	d131      	bne.n	80106f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010690:	4b1c      	ldr	r3, [pc, #112]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 8010692:	7a5b      	ldrb	r3, [r3, #9]
 8010694:	b2db      	uxtb	r3, r3
 8010696:	461a      	mov	r2, r3
 8010698:	4b1a      	ldr	r3, [pc, #104]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 801069a:	2100      	movs	r1, #0
 801069c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801069e:	4b19      	ldr	r3, [pc, #100]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 80106a0:	7a5b      	ldrb	r3, [r3, #9]
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	4a17      	ldr	r2, [pc, #92]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4413      	add	r3, r2
 80106aa:	68fa      	ldr	r2, [r7, #12]
 80106ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80106ae:	4b15      	ldr	r3, [pc, #84]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 80106b0:	7a5b      	ldrb	r3, [r3, #9]
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	461a      	mov	r2, r3
 80106b6:	4b13      	ldr	r3, [pc, #76]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 80106b8:	4413      	add	r3, r2
 80106ba:	79fa      	ldrb	r2, [r7, #7]
 80106bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80106be:	4b11      	ldr	r3, [pc, #68]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 80106c0:	7a5b      	ldrb	r3, [r3, #9]
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	1c5a      	adds	r2, r3, #1
 80106c6:	b2d1      	uxtb	r1, r2
 80106c8:	4a0e      	ldr	r2, [pc, #56]	; (8010704 <FATFS_LinkDriverEx+0x94>)
 80106ca:	7251      	strb	r1, [r2, #9]
 80106cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80106ce:	7dbb      	ldrb	r3, [r7, #22]
 80106d0:	3330      	adds	r3, #48	; 0x30
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	68bb      	ldr	r3, [r7, #8]
 80106d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	3301      	adds	r3, #1
 80106dc:	223a      	movs	r2, #58	; 0x3a
 80106de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	3302      	adds	r3, #2
 80106e4:	222f      	movs	r2, #47	; 0x2f
 80106e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	3303      	adds	r3, #3
 80106ec:	2200      	movs	r2, #0
 80106ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80106f0:	2300      	movs	r3, #0
 80106f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80106f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80106f6:	4618      	mov	r0, r3
 80106f8:	371c      	adds	r7, #28
 80106fa:	46bd      	mov	sp, r7
 80106fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010700:	4770      	bx	lr
 8010702:	bf00      	nop
 8010704:	240027d0 	.word	0x240027d0

08010708 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010712:	2200      	movs	r2, #0
 8010714:	6839      	ldr	r1, [r7, #0]
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f7ff ffaa 	bl	8010670 <FATFS_LinkDriverEx>
 801071c:	4603      	mov	r3, r0
}
 801071e:	4618      	mov	r0, r3
 8010720:	3708      	adds	r7, #8
 8010722:	46bd      	mov	sp, r7
 8010724:	bd80      	pop	{r7, pc}
	...

08010728 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	6039      	str	r1, [r7, #0]
 8010732:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010734:	88fb      	ldrh	r3, [r7, #6]
 8010736:	2b7f      	cmp	r3, #127	; 0x7f
 8010738:	d802      	bhi.n	8010740 <ff_convert+0x18>
		c = chr;
 801073a:	88fb      	ldrh	r3, [r7, #6]
 801073c:	81fb      	strh	r3, [r7, #14]
 801073e:	e025      	b.n	801078c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d00b      	beq.n	801075e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010746:	88fb      	ldrh	r3, [r7, #6]
 8010748:	2bff      	cmp	r3, #255	; 0xff
 801074a:	d805      	bhi.n	8010758 <ff_convert+0x30>
 801074c:	88fb      	ldrh	r3, [r7, #6]
 801074e:	3b80      	subs	r3, #128	; 0x80
 8010750:	4a12      	ldr	r2, [pc, #72]	; (801079c <ff_convert+0x74>)
 8010752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010756:	e000      	b.n	801075a <ff_convert+0x32>
 8010758:	2300      	movs	r3, #0
 801075a:	81fb      	strh	r3, [r7, #14]
 801075c:	e016      	b.n	801078c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801075e:	2300      	movs	r3, #0
 8010760:	81fb      	strh	r3, [r7, #14]
 8010762:	e009      	b.n	8010778 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010764:	89fb      	ldrh	r3, [r7, #14]
 8010766:	4a0d      	ldr	r2, [pc, #52]	; (801079c <ff_convert+0x74>)
 8010768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801076c:	88fa      	ldrh	r2, [r7, #6]
 801076e:	429a      	cmp	r2, r3
 8010770:	d006      	beq.n	8010780 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010772:	89fb      	ldrh	r3, [r7, #14]
 8010774:	3301      	adds	r3, #1
 8010776:	81fb      	strh	r3, [r7, #14]
 8010778:	89fb      	ldrh	r3, [r7, #14]
 801077a:	2b7f      	cmp	r3, #127	; 0x7f
 801077c:	d9f2      	bls.n	8010764 <ff_convert+0x3c>
 801077e:	e000      	b.n	8010782 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010780:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010782:	89fb      	ldrh	r3, [r7, #14]
 8010784:	3380      	adds	r3, #128	; 0x80
 8010786:	b29b      	uxth	r3, r3
 8010788:	b2db      	uxtb	r3, r3
 801078a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801078c:	89fb      	ldrh	r3, [r7, #14]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3714      	adds	r7, #20
 8010792:	46bd      	mov	sp, r7
 8010794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010798:	4770      	bx	lr
 801079a:	bf00      	nop
 801079c:	08011eb0 	.word	0x08011eb0

080107a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b087      	sub	sp, #28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	4603      	mov	r3, r0
 80107a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80107aa:	88fb      	ldrh	r3, [r7, #6]
 80107ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80107b0:	d201      	bcs.n	80107b6 <ff_wtoupper+0x16>
 80107b2:	4b3e      	ldr	r3, [pc, #248]	; (80108ac <ff_wtoupper+0x10c>)
 80107b4:	e000      	b.n	80107b8 <ff_wtoupper+0x18>
 80107b6:	4b3e      	ldr	r3, [pc, #248]	; (80108b0 <ff_wtoupper+0x110>)
 80107b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	1c9a      	adds	r2, r3, #2
 80107be:	617a      	str	r2, [r7, #20]
 80107c0:	881b      	ldrh	r3, [r3, #0]
 80107c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80107c4:	8a7b      	ldrh	r3, [r7, #18]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d068      	beq.n	801089c <ff_wtoupper+0xfc>
 80107ca:	88fa      	ldrh	r2, [r7, #6]
 80107cc:	8a7b      	ldrh	r3, [r7, #18]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d364      	bcc.n	801089c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80107d2:	697b      	ldr	r3, [r7, #20]
 80107d4:	1c9a      	adds	r2, r3, #2
 80107d6:	617a      	str	r2, [r7, #20]
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	823b      	strh	r3, [r7, #16]
 80107dc:	8a3b      	ldrh	r3, [r7, #16]
 80107de:	0a1b      	lsrs	r3, r3, #8
 80107e0:	81fb      	strh	r3, [r7, #14]
 80107e2:	8a3b      	ldrh	r3, [r7, #16]
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80107e8:	88fa      	ldrh	r2, [r7, #6]
 80107ea:	8a79      	ldrh	r1, [r7, #18]
 80107ec:	8a3b      	ldrh	r3, [r7, #16]
 80107ee:	440b      	add	r3, r1
 80107f0:	429a      	cmp	r2, r3
 80107f2:	da49      	bge.n	8010888 <ff_wtoupper+0xe8>
			switch (cmd) {
 80107f4:	89fb      	ldrh	r3, [r7, #14]
 80107f6:	2b08      	cmp	r3, #8
 80107f8:	d84f      	bhi.n	801089a <ff_wtoupper+0xfa>
 80107fa:	a201      	add	r2, pc, #4	; (adr r2, 8010800 <ff_wtoupper+0x60>)
 80107fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010800:	08010825 	.word	0x08010825
 8010804:	08010837 	.word	0x08010837
 8010808:	0801084d 	.word	0x0801084d
 801080c:	08010855 	.word	0x08010855
 8010810:	0801085d 	.word	0x0801085d
 8010814:	08010865 	.word	0x08010865
 8010818:	0801086d 	.word	0x0801086d
 801081c:	08010875 	.word	0x08010875
 8010820:	0801087d 	.word	0x0801087d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010824:	88fa      	ldrh	r2, [r7, #6]
 8010826:	8a7b      	ldrh	r3, [r7, #18]
 8010828:	1ad3      	subs	r3, r2, r3
 801082a:	005b      	lsls	r3, r3, #1
 801082c:	697a      	ldr	r2, [r7, #20]
 801082e:	4413      	add	r3, r2
 8010830:	881b      	ldrh	r3, [r3, #0]
 8010832:	80fb      	strh	r3, [r7, #6]
 8010834:	e027      	b.n	8010886 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010836:	88fa      	ldrh	r2, [r7, #6]
 8010838:	8a7b      	ldrh	r3, [r7, #18]
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	b29b      	uxth	r3, r3
 801083e:	f003 0301 	and.w	r3, r3, #1
 8010842:	b29b      	uxth	r3, r3
 8010844:	88fa      	ldrh	r2, [r7, #6]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	80fb      	strh	r3, [r7, #6]
 801084a:	e01c      	b.n	8010886 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801084c:	88fb      	ldrh	r3, [r7, #6]
 801084e:	3b10      	subs	r3, #16
 8010850:	80fb      	strh	r3, [r7, #6]
 8010852:	e018      	b.n	8010886 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010854:	88fb      	ldrh	r3, [r7, #6]
 8010856:	3b20      	subs	r3, #32
 8010858:	80fb      	strh	r3, [r7, #6]
 801085a:	e014      	b.n	8010886 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801085c:	88fb      	ldrh	r3, [r7, #6]
 801085e:	3b30      	subs	r3, #48	; 0x30
 8010860:	80fb      	strh	r3, [r7, #6]
 8010862:	e010      	b.n	8010886 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010864:	88fb      	ldrh	r3, [r7, #6]
 8010866:	3b1a      	subs	r3, #26
 8010868:	80fb      	strh	r3, [r7, #6]
 801086a:	e00c      	b.n	8010886 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801086c:	88fb      	ldrh	r3, [r7, #6]
 801086e:	3308      	adds	r3, #8
 8010870:	80fb      	strh	r3, [r7, #6]
 8010872:	e008      	b.n	8010886 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010874:	88fb      	ldrh	r3, [r7, #6]
 8010876:	3b50      	subs	r3, #80	; 0x50
 8010878:	80fb      	strh	r3, [r7, #6]
 801087a:	e004      	b.n	8010886 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801087c:	88fb      	ldrh	r3, [r7, #6]
 801087e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010882:	80fb      	strh	r3, [r7, #6]
 8010884:	bf00      	nop
			}
			break;
 8010886:	e008      	b.n	801089a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010888:	89fb      	ldrh	r3, [r7, #14]
 801088a:	2b00      	cmp	r3, #0
 801088c:	d195      	bne.n	80107ba <ff_wtoupper+0x1a>
 801088e:	8a3b      	ldrh	r3, [r7, #16]
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	697a      	ldr	r2, [r7, #20]
 8010894:	4413      	add	r3, r2
 8010896:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010898:	e78f      	b.n	80107ba <ff_wtoupper+0x1a>
			break;
 801089a:	bf00      	nop
	}

	return chr;
 801089c:	88fb      	ldrh	r3, [r7, #6]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	371c      	adds	r7, #28
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	08011fb0 	.word	0x08011fb0
 80108b0:	080121a4 	.word	0x080121a4

080108b4 <__errno>:
 80108b4:	4b01      	ldr	r3, [pc, #4]	; (80108bc <__errno+0x8>)
 80108b6:	6818      	ldr	r0, [r3, #0]
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	24000010 	.word	0x24000010

080108c0 <__libc_init_array>:
 80108c0:	b570      	push	{r4, r5, r6, lr}
 80108c2:	4d0d      	ldr	r5, [pc, #52]	; (80108f8 <__libc_init_array+0x38>)
 80108c4:	4c0d      	ldr	r4, [pc, #52]	; (80108fc <__libc_init_array+0x3c>)
 80108c6:	1b64      	subs	r4, r4, r5
 80108c8:	10a4      	asrs	r4, r4, #2
 80108ca:	2600      	movs	r6, #0
 80108cc:	42a6      	cmp	r6, r4
 80108ce:	d109      	bne.n	80108e4 <__libc_init_array+0x24>
 80108d0:	4d0b      	ldr	r5, [pc, #44]	; (8010900 <__libc_init_array+0x40>)
 80108d2:	4c0c      	ldr	r4, [pc, #48]	; (8010904 <__libc_init_array+0x44>)
 80108d4:	f001 fa08 	bl	8011ce8 <_init>
 80108d8:	1b64      	subs	r4, r4, r5
 80108da:	10a4      	asrs	r4, r4, #2
 80108dc:	2600      	movs	r6, #0
 80108de:	42a6      	cmp	r6, r4
 80108e0:	d105      	bne.n	80108ee <__libc_init_array+0x2e>
 80108e2:	bd70      	pop	{r4, r5, r6, pc}
 80108e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80108e8:	4798      	blx	r3
 80108ea:	3601      	adds	r6, #1
 80108ec:	e7ee      	b.n	80108cc <__libc_init_array+0xc>
 80108ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80108f2:	4798      	blx	r3
 80108f4:	3601      	adds	r6, #1
 80108f6:	e7f2      	b.n	80108de <__libc_init_array+0x1e>
 80108f8:	08012300 	.word	0x08012300
 80108fc:	08012300 	.word	0x08012300
 8010900:	08012300 	.word	0x08012300
 8010904:	08012304 	.word	0x08012304

08010908 <malloc>:
 8010908:	4b02      	ldr	r3, [pc, #8]	; (8010914 <malloc+0xc>)
 801090a:	4601      	mov	r1, r0
 801090c:	6818      	ldr	r0, [r3, #0]
 801090e:	f000 b877 	b.w	8010a00 <_malloc_r>
 8010912:	bf00      	nop
 8010914:	24000010 	.word	0x24000010

08010918 <memset>:
 8010918:	4402      	add	r2, r0
 801091a:	4603      	mov	r3, r0
 801091c:	4293      	cmp	r3, r2
 801091e:	d100      	bne.n	8010922 <memset+0xa>
 8010920:	4770      	bx	lr
 8010922:	f803 1b01 	strb.w	r1, [r3], #1
 8010926:	e7f9      	b.n	801091c <memset+0x4>

08010928 <_free_r>:
 8010928:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801092a:	2900      	cmp	r1, #0
 801092c:	d044      	beq.n	80109b8 <_free_r+0x90>
 801092e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010932:	9001      	str	r0, [sp, #4]
 8010934:	2b00      	cmp	r3, #0
 8010936:	f1a1 0404 	sub.w	r4, r1, #4
 801093a:	bfb8      	it	lt
 801093c:	18e4      	addlt	r4, r4, r3
 801093e:	f000 fc71 	bl	8011224 <__malloc_lock>
 8010942:	4a1e      	ldr	r2, [pc, #120]	; (80109bc <_free_r+0x94>)
 8010944:	9801      	ldr	r0, [sp, #4]
 8010946:	6813      	ldr	r3, [r2, #0]
 8010948:	b933      	cbnz	r3, 8010958 <_free_r+0x30>
 801094a:	6063      	str	r3, [r4, #4]
 801094c:	6014      	str	r4, [r2, #0]
 801094e:	b003      	add	sp, #12
 8010950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010954:	f000 bc6c 	b.w	8011230 <__malloc_unlock>
 8010958:	42a3      	cmp	r3, r4
 801095a:	d908      	bls.n	801096e <_free_r+0x46>
 801095c:	6825      	ldr	r5, [r4, #0]
 801095e:	1961      	adds	r1, r4, r5
 8010960:	428b      	cmp	r3, r1
 8010962:	bf01      	itttt	eq
 8010964:	6819      	ldreq	r1, [r3, #0]
 8010966:	685b      	ldreq	r3, [r3, #4]
 8010968:	1949      	addeq	r1, r1, r5
 801096a:	6021      	streq	r1, [r4, #0]
 801096c:	e7ed      	b.n	801094a <_free_r+0x22>
 801096e:	461a      	mov	r2, r3
 8010970:	685b      	ldr	r3, [r3, #4]
 8010972:	b10b      	cbz	r3, 8010978 <_free_r+0x50>
 8010974:	42a3      	cmp	r3, r4
 8010976:	d9fa      	bls.n	801096e <_free_r+0x46>
 8010978:	6811      	ldr	r1, [r2, #0]
 801097a:	1855      	adds	r5, r2, r1
 801097c:	42a5      	cmp	r5, r4
 801097e:	d10b      	bne.n	8010998 <_free_r+0x70>
 8010980:	6824      	ldr	r4, [r4, #0]
 8010982:	4421      	add	r1, r4
 8010984:	1854      	adds	r4, r2, r1
 8010986:	42a3      	cmp	r3, r4
 8010988:	6011      	str	r1, [r2, #0]
 801098a:	d1e0      	bne.n	801094e <_free_r+0x26>
 801098c:	681c      	ldr	r4, [r3, #0]
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	6053      	str	r3, [r2, #4]
 8010992:	4421      	add	r1, r4
 8010994:	6011      	str	r1, [r2, #0]
 8010996:	e7da      	b.n	801094e <_free_r+0x26>
 8010998:	d902      	bls.n	80109a0 <_free_r+0x78>
 801099a:	230c      	movs	r3, #12
 801099c:	6003      	str	r3, [r0, #0]
 801099e:	e7d6      	b.n	801094e <_free_r+0x26>
 80109a0:	6825      	ldr	r5, [r4, #0]
 80109a2:	1961      	adds	r1, r4, r5
 80109a4:	428b      	cmp	r3, r1
 80109a6:	bf04      	itt	eq
 80109a8:	6819      	ldreq	r1, [r3, #0]
 80109aa:	685b      	ldreq	r3, [r3, #4]
 80109ac:	6063      	str	r3, [r4, #4]
 80109ae:	bf04      	itt	eq
 80109b0:	1949      	addeq	r1, r1, r5
 80109b2:	6021      	streq	r1, [r4, #0]
 80109b4:	6054      	str	r4, [r2, #4]
 80109b6:	e7ca      	b.n	801094e <_free_r+0x26>
 80109b8:	b003      	add	sp, #12
 80109ba:	bd30      	pop	{r4, r5, pc}
 80109bc:	240027dc 	.word	0x240027dc

080109c0 <sbrk_aligned>:
 80109c0:	b570      	push	{r4, r5, r6, lr}
 80109c2:	4e0e      	ldr	r6, [pc, #56]	; (80109fc <sbrk_aligned+0x3c>)
 80109c4:	460c      	mov	r4, r1
 80109c6:	6831      	ldr	r1, [r6, #0]
 80109c8:	4605      	mov	r5, r0
 80109ca:	b911      	cbnz	r1, 80109d2 <sbrk_aligned+0x12>
 80109cc:	f000 f91a 	bl	8010c04 <_sbrk_r>
 80109d0:	6030      	str	r0, [r6, #0]
 80109d2:	4621      	mov	r1, r4
 80109d4:	4628      	mov	r0, r5
 80109d6:	f000 f915 	bl	8010c04 <_sbrk_r>
 80109da:	1c43      	adds	r3, r0, #1
 80109dc:	d00a      	beq.n	80109f4 <sbrk_aligned+0x34>
 80109de:	1cc4      	adds	r4, r0, #3
 80109e0:	f024 0403 	bic.w	r4, r4, #3
 80109e4:	42a0      	cmp	r0, r4
 80109e6:	d007      	beq.n	80109f8 <sbrk_aligned+0x38>
 80109e8:	1a21      	subs	r1, r4, r0
 80109ea:	4628      	mov	r0, r5
 80109ec:	f000 f90a 	bl	8010c04 <_sbrk_r>
 80109f0:	3001      	adds	r0, #1
 80109f2:	d101      	bne.n	80109f8 <sbrk_aligned+0x38>
 80109f4:	f04f 34ff 	mov.w	r4, #4294967295
 80109f8:	4620      	mov	r0, r4
 80109fa:	bd70      	pop	{r4, r5, r6, pc}
 80109fc:	240027e0 	.word	0x240027e0

08010a00 <_malloc_r>:
 8010a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a04:	1ccd      	adds	r5, r1, #3
 8010a06:	f025 0503 	bic.w	r5, r5, #3
 8010a0a:	3508      	adds	r5, #8
 8010a0c:	2d0c      	cmp	r5, #12
 8010a0e:	bf38      	it	cc
 8010a10:	250c      	movcc	r5, #12
 8010a12:	2d00      	cmp	r5, #0
 8010a14:	4607      	mov	r7, r0
 8010a16:	db01      	blt.n	8010a1c <_malloc_r+0x1c>
 8010a18:	42a9      	cmp	r1, r5
 8010a1a:	d905      	bls.n	8010a28 <_malloc_r+0x28>
 8010a1c:	230c      	movs	r3, #12
 8010a1e:	603b      	str	r3, [r7, #0]
 8010a20:	2600      	movs	r6, #0
 8010a22:	4630      	mov	r0, r6
 8010a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a28:	4e2e      	ldr	r6, [pc, #184]	; (8010ae4 <_malloc_r+0xe4>)
 8010a2a:	f000 fbfb 	bl	8011224 <__malloc_lock>
 8010a2e:	6833      	ldr	r3, [r6, #0]
 8010a30:	461c      	mov	r4, r3
 8010a32:	bb34      	cbnz	r4, 8010a82 <_malloc_r+0x82>
 8010a34:	4629      	mov	r1, r5
 8010a36:	4638      	mov	r0, r7
 8010a38:	f7ff ffc2 	bl	80109c0 <sbrk_aligned>
 8010a3c:	1c43      	adds	r3, r0, #1
 8010a3e:	4604      	mov	r4, r0
 8010a40:	d14d      	bne.n	8010ade <_malloc_r+0xde>
 8010a42:	6834      	ldr	r4, [r6, #0]
 8010a44:	4626      	mov	r6, r4
 8010a46:	2e00      	cmp	r6, #0
 8010a48:	d140      	bne.n	8010acc <_malloc_r+0xcc>
 8010a4a:	6823      	ldr	r3, [r4, #0]
 8010a4c:	4631      	mov	r1, r6
 8010a4e:	4638      	mov	r0, r7
 8010a50:	eb04 0803 	add.w	r8, r4, r3
 8010a54:	f000 f8d6 	bl	8010c04 <_sbrk_r>
 8010a58:	4580      	cmp	r8, r0
 8010a5a:	d13a      	bne.n	8010ad2 <_malloc_r+0xd2>
 8010a5c:	6821      	ldr	r1, [r4, #0]
 8010a5e:	3503      	adds	r5, #3
 8010a60:	1a6d      	subs	r5, r5, r1
 8010a62:	f025 0503 	bic.w	r5, r5, #3
 8010a66:	3508      	adds	r5, #8
 8010a68:	2d0c      	cmp	r5, #12
 8010a6a:	bf38      	it	cc
 8010a6c:	250c      	movcc	r5, #12
 8010a6e:	4629      	mov	r1, r5
 8010a70:	4638      	mov	r0, r7
 8010a72:	f7ff ffa5 	bl	80109c0 <sbrk_aligned>
 8010a76:	3001      	adds	r0, #1
 8010a78:	d02b      	beq.n	8010ad2 <_malloc_r+0xd2>
 8010a7a:	6823      	ldr	r3, [r4, #0]
 8010a7c:	442b      	add	r3, r5
 8010a7e:	6023      	str	r3, [r4, #0]
 8010a80:	e00e      	b.n	8010aa0 <_malloc_r+0xa0>
 8010a82:	6822      	ldr	r2, [r4, #0]
 8010a84:	1b52      	subs	r2, r2, r5
 8010a86:	d41e      	bmi.n	8010ac6 <_malloc_r+0xc6>
 8010a88:	2a0b      	cmp	r2, #11
 8010a8a:	d916      	bls.n	8010aba <_malloc_r+0xba>
 8010a8c:	1961      	adds	r1, r4, r5
 8010a8e:	42a3      	cmp	r3, r4
 8010a90:	6025      	str	r5, [r4, #0]
 8010a92:	bf18      	it	ne
 8010a94:	6059      	strne	r1, [r3, #4]
 8010a96:	6863      	ldr	r3, [r4, #4]
 8010a98:	bf08      	it	eq
 8010a9a:	6031      	streq	r1, [r6, #0]
 8010a9c:	5162      	str	r2, [r4, r5]
 8010a9e:	604b      	str	r3, [r1, #4]
 8010aa0:	4638      	mov	r0, r7
 8010aa2:	f104 060b 	add.w	r6, r4, #11
 8010aa6:	f000 fbc3 	bl	8011230 <__malloc_unlock>
 8010aaa:	f026 0607 	bic.w	r6, r6, #7
 8010aae:	1d23      	adds	r3, r4, #4
 8010ab0:	1af2      	subs	r2, r6, r3
 8010ab2:	d0b6      	beq.n	8010a22 <_malloc_r+0x22>
 8010ab4:	1b9b      	subs	r3, r3, r6
 8010ab6:	50a3      	str	r3, [r4, r2]
 8010ab8:	e7b3      	b.n	8010a22 <_malloc_r+0x22>
 8010aba:	6862      	ldr	r2, [r4, #4]
 8010abc:	42a3      	cmp	r3, r4
 8010abe:	bf0c      	ite	eq
 8010ac0:	6032      	streq	r2, [r6, #0]
 8010ac2:	605a      	strne	r2, [r3, #4]
 8010ac4:	e7ec      	b.n	8010aa0 <_malloc_r+0xa0>
 8010ac6:	4623      	mov	r3, r4
 8010ac8:	6864      	ldr	r4, [r4, #4]
 8010aca:	e7b2      	b.n	8010a32 <_malloc_r+0x32>
 8010acc:	4634      	mov	r4, r6
 8010ace:	6876      	ldr	r6, [r6, #4]
 8010ad0:	e7b9      	b.n	8010a46 <_malloc_r+0x46>
 8010ad2:	230c      	movs	r3, #12
 8010ad4:	603b      	str	r3, [r7, #0]
 8010ad6:	4638      	mov	r0, r7
 8010ad8:	f000 fbaa 	bl	8011230 <__malloc_unlock>
 8010adc:	e7a1      	b.n	8010a22 <_malloc_r+0x22>
 8010ade:	6025      	str	r5, [r4, #0]
 8010ae0:	e7de      	b.n	8010aa0 <_malloc_r+0xa0>
 8010ae2:	bf00      	nop
 8010ae4:	240027dc 	.word	0x240027dc

08010ae8 <iprintf>:
 8010ae8:	b40f      	push	{r0, r1, r2, r3}
 8010aea:	4b0a      	ldr	r3, [pc, #40]	; (8010b14 <iprintf+0x2c>)
 8010aec:	b513      	push	{r0, r1, r4, lr}
 8010aee:	681c      	ldr	r4, [r3, #0]
 8010af0:	b124      	cbz	r4, 8010afc <iprintf+0x14>
 8010af2:	69a3      	ldr	r3, [r4, #24]
 8010af4:	b913      	cbnz	r3, 8010afc <iprintf+0x14>
 8010af6:	4620      	mov	r0, r4
 8010af8:	f000 fa8e 	bl	8011018 <__sinit>
 8010afc:	ab05      	add	r3, sp, #20
 8010afe:	9a04      	ldr	r2, [sp, #16]
 8010b00:	68a1      	ldr	r1, [r4, #8]
 8010b02:	9301      	str	r3, [sp, #4]
 8010b04:	4620      	mov	r0, r4
 8010b06:	f000 fd1f 	bl	8011548 <_vfiprintf_r>
 8010b0a:	b002      	add	sp, #8
 8010b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b10:	b004      	add	sp, #16
 8010b12:	4770      	bx	lr
 8010b14:	24000010 	.word	0x24000010

08010b18 <_puts_r>:
 8010b18:	b570      	push	{r4, r5, r6, lr}
 8010b1a:	460e      	mov	r6, r1
 8010b1c:	4605      	mov	r5, r0
 8010b1e:	b118      	cbz	r0, 8010b28 <_puts_r+0x10>
 8010b20:	6983      	ldr	r3, [r0, #24]
 8010b22:	b90b      	cbnz	r3, 8010b28 <_puts_r+0x10>
 8010b24:	f000 fa78 	bl	8011018 <__sinit>
 8010b28:	69ab      	ldr	r3, [r5, #24]
 8010b2a:	68ac      	ldr	r4, [r5, #8]
 8010b2c:	b913      	cbnz	r3, 8010b34 <_puts_r+0x1c>
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f000 fa72 	bl	8011018 <__sinit>
 8010b34:	4b2c      	ldr	r3, [pc, #176]	; (8010be8 <_puts_r+0xd0>)
 8010b36:	429c      	cmp	r4, r3
 8010b38:	d120      	bne.n	8010b7c <_puts_r+0x64>
 8010b3a:	686c      	ldr	r4, [r5, #4]
 8010b3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b3e:	07db      	lsls	r3, r3, #31
 8010b40:	d405      	bmi.n	8010b4e <_puts_r+0x36>
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	0598      	lsls	r0, r3, #22
 8010b46:	d402      	bmi.n	8010b4e <_puts_r+0x36>
 8010b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b4a:	f000 fb03 	bl	8011154 <__retarget_lock_acquire_recursive>
 8010b4e:	89a3      	ldrh	r3, [r4, #12]
 8010b50:	0719      	lsls	r1, r3, #28
 8010b52:	d51d      	bpl.n	8010b90 <_puts_r+0x78>
 8010b54:	6923      	ldr	r3, [r4, #16]
 8010b56:	b1db      	cbz	r3, 8010b90 <_puts_r+0x78>
 8010b58:	3e01      	subs	r6, #1
 8010b5a:	68a3      	ldr	r3, [r4, #8]
 8010b5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b60:	3b01      	subs	r3, #1
 8010b62:	60a3      	str	r3, [r4, #8]
 8010b64:	bb39      	cbnz	r1, 8010bb6 <_puts_r+0x9e>
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	da38      	bge.n	8010bdc <_puts_r+0xc4>
 8010b6a:	4622      	mov	r2, r4
 8010b6c:	210a      	movs	r1, #10
 8010b6e:	4628      	mov	r0, r5
 8010b70:	f000 f878 	bl	8010c64 <__swbuf_r>
 8010b74:	3001      	adds	r0, #1
 8010b76:	d011      	beq.n	8010b9c <_puts_r+0x84>
 8010b78:	250a      	movs	r5, #10
 8010b7a:	e011      	b.n	8010ba0 <_puts_r+0x88>
 8010b7c:	4b1b      	ldr	r3, [pc, #108]	; (8010bec <_puts_r+0xd4>)
 8010b7e:	429c      	cmp	r4, r3
 8010b80:	d101      	bne.n	8010b86 <_puts_r+0x6e>
 8010b82:	68ac      	ldr	r4, [r5, #8]
 8010b84:	e7da      	b.n	8010b3c <_puts_r+0x24>
 8010b86:	4b1a      	ldr	r3, [pc, #104]	; (8010bf0 <_puts_r+0xd8>)
 8010b88:	429c      	cmp	r4, r3
 8010b8a:	bf08      	it	eq
 8010b8c:	68ec      	ldreq	r4, [r5, #12]
 8010b8e:	e7d5      	b.n	8010b3c <_puts_r+0x24>
 8010b90:	4621      	mov	r1, r4
 8010b92:	4628      	mov	r0, r5
 8010b94:	f000 f8b8 	bl	8010d08 <__swsetup_r>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	d0dd      	beq.n	8010b58 <_puts_r+0x40>
 8010b9c:	f04f 35ff 	mov.w	r5, #4294967295
 8010ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ba2:	07da      	lsls	r2, r3, #31
 8010ba4:	d405      	bmi.n	8010bb2 <_puts_r+0x9a>
 8010ba6:	89a3      	ldrh	r3, [r4, #12]
 8010ba8:	059b      	lsls	r3, r3, #22
 8010baa:	d402      	bmi.n	8010bb2 <_puts_r+0x9a>
 8010bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bae:	f000 fad2 	bl	8011156 <__retarget_lock_release_recursive>
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	bd70      	pop	{r4, r5, r6, pc}
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	da04      	bge.n	8010bc4 <_puts_r+0xac>
 8010bba:	69a2      	ldr	r2, [r4, #24]
 8010bbc:	429a      	cmp	r2, r3
 8010bbe:	dc06      	bgt.n	8010bce <_puts_r+0xb6>
 8010bc0:	290a      	cmp	r1, #10
 8010bc2:	d004      	beq.n	8010bce <_puts_r+0xb6>
 8010bc4:	6823      	ldr	r3, [r4, #0]
 8010bc6:	1c5a      	adds	r2, r3, #1
 8010bc8:	6022      	str	r2, [r4, #0]
 8010bca:	7019      	strb	r1, [r3, #0]
 8010bcc:	e7c5      	b.n	8010b5a <_puts_r+0x42>
 8010bce:	4622      	mov	r2, r4
 8010bd0:	4628      	mov	r0, r5
 8010bd2:	f000 f847 	bl	8010c64 <__swbuf_r>
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	d1bf      	bne.n	8010b5a <_puts_r+0x42>
 8010bda:	e7df      	b.n	8010b9c <_puts_r+0x84>
 8010bdc:	6823      	ldr	r3, [r4, #0]
 8010bde:	250a      	movs	r5, #10
 8010be0:	1c5a      	adds	r2, r3, #1
 8010be2:	6022      	str	r2, [r4, #0]
 8010be4:	701d      	strb	r5, [r3, #0]
 8010be6:	e7db      	b.n	8010ba0 <_puts_r+0x88>
 8010be8:	08012284 	.word	0x08012284
 8010bec:	080122a4 	.word	0x080122a4
 8010bf0:	08012264 	.word	0x08012264

08010bf4 <puts>:
 8010bf4:	4b02      	ldr	r3, [pc, #8]	; (8010c00 <puts+0xc>)
 8010bf6:	4601      	mov	r1, r0
 8010bf8:	6818      	ldr	r0, [r3, #0]
 8010bfa:	f7ff bf8d 	b.w	8010b18 <_puts_r>
 8010bfe:	bf00      	nop
 8010c00:	24000010 	.word	0x24000010

08010c04 <_sbrk_r>:
 8010c04:	b538      	push	{r3, r4, r5, lr}
 8010c06:	4d06      	ldr	r5, [pc, #24]	; (8010c20 <_sbrk_r+0x1c>)
 8010c08:	2300      	movs	r3, #0
 8010c0a:	4604      	mov	r4, r0
 8010c0c:	4608      	mov	r0, r1
 8010c0e:	602b      	str	r3, [r5, #0]
 8010c10:	f7f1 f886 	bl	8001d20 <_sbrk>
 8010c14:	1c43      	adds	r3, r0, #1
 8010c16:	d102      	bne.n	8010c1e <_sbrk_r+0x1a>
 8010c18:	682b      	ldr	r3, [r5, #0]
 8010c1a:	b103      	cbz	r3, 8010c1e <_sbrk_r+0x1a>
 8010c1c:	6023      	str	r3, [r4, #0]
 8010c1e:	bd38      	pop	{r3, r4, r5, pc}
 8010c20:	240027e8 	.word	0x240027e8

08010c24 <siprintf>:
 8010c24:	b40e      	push	{r1, r2, r3}
 8010c26:	b500      	push	{lr}
 8010c28:	b09c      	sub	sp, #112	; 0x70
 8010c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8010c2c:	9002      	str	r0, [sp, #8]
 8010c2e:	9006      	str	r0, [sp, #24]
 8010c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010c34:	4809      	ldr	r0, [pc, #36]	; (8010c5c <siprintf+0x38>)
 8010c36:	9107      	str	r1, [sp, #28]
 8010c38:	9104      	str	r1, [sp, #16]
 8010c3a:	4909      	ldr	r1, [pc, #36]	; (8010c60 <siprintf+0x3c>)
 8010c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c40:	9105      	str	r1, [sp, #20]
 8010c42:	6800      	ldr	r0, [r0, #0]
 8010c44:	9301      	str	r3, [sp, #4]
 8010c46:	a902      	add	r1, sp, #8
 8010c48:	f000 fb54 	bl	80112f4 <_svfiprintf_r>
 8010c4c:	9b02      	ldr	r3, [sp, #8]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	701a      	strb	r2, [r3, #0]
 8010c52:	b01c      	add	sp, #112	; 0x70
 8010c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c58:	b003      	add	sp, #12
 8010c5a:	4770      	bx	lr
 8010c5c:	24000010 	.word	0x24000010
 8010c60:	ffff0208 	.word	0xffff0208

08010c64 <__swbuf_r>:
 8010c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c66:	460e      	mov	r6, r1
 8010c68:	4614      	mov	r4, r2
 8010c6a:	4605      	mov	r5, r0
 8010c6c:	b118      	cbz	r0, 8010c76 <__swbuf_r+0x12>
 8010c6e:	6983      	ldr	r3, [r0, #24]
 8010c70:	b90b      	cbnz	r3, 8010c76 <__swbuf_r+0x12>
 8010c72:	f000 f9d1 	bl	8011018 <__sinit>
 8010c76:	4b21      	ldr	r3, [pc, #132]	; (8010cfc <__swbuf_r+0x98>)
 8010c78:	429c      	cmp	r4, r3
 8010c7a:	d12b      	bne.n	8010cd4 <__swbuf_r+0x70>
 8010c7c:	686c      	ldr	r4, [r5, #4]
 8010c7e:	69a3      	ldr	r3, [r4, #24]
 8010c80:	60a3      	str	r3, [r4, #8]
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	071a      	lsls	r2, r3, #28
 8010c86:	d52f      	bpl.n	8010ce8 <__swbuf_r+0x84>
 8010c88:	6923      	ldr	r3, [r4, #16]
 8010c8a:	b36b      	cbz	r3, 8010ce8 <__swbuf_r+0x84>
 8010c8c:	6923      	ldr	r3, [r4, #16]
 8010c8e:	6820      	ldr	r0, [r4, #0]
 8010c90:	1ac0      	subs	r0, r0, r3
 8010c92:	6963      	ldr	r3, [r4, #20]
 8010c94:	b2f6      	uxtb	r6, r6
 8010c96:	4283      	cmp	r3, r0
 8010c98:	4637      	mov	r7, r6
 8010c9a:	dc04      	bgt.n	8010ca6 <__swbuf_r+0x42>
 8010c9c:	4621      	mov	r1, r4
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	f000 f926 	bl	8010ef0 <_fflush_r>
 8010ca4:	bb30      	cbnz	r0, 8010cf4 <__swbuf_r+0x90>
 8010ca6:	68a3      	ldr	r3, [r4, #8]
 8010ca8:	3b01      	subs	r3, #1
 8010caa:	60a3      	str	r3, [r4, #8]
 8010cac:	6823      	ldr	r3, [r4, #0]
 8010cae:	1c5a      	adds	r2, r3, #1
 8010cb0:	6022      	str	r2, [r4, #0]
 8010cb2:	701e      	strb	r6, [r3, #0]
 8010cb4:	6963      	ldr	r3, [r4, #20]
 8010cb6:	3001      	adds	r0, #1
 8010cb8:	4283      	cmp	r3, r0
 8010cba:	d004      	beq.n	8010cc6 <__swbuf_r+0x62>
 8010cbc:	89a3      	ldrh	r3, [r4, #12]
 8010cbe:	07db      	lsls	r3, r3, #31
 8010cc0:	d506      	bpl.n	8010cd0 <__swbuf_r+0x6c>
 8010cc2:	2e0a      	cmp	r6, #10
 8010cc4:	d104      	bne.n	8010cd0 <__swbuf_r+0x6c>
 8010cc6:	4621      	mov	r1, r4
 8010cc8:	4628      	mov	r0, r5
 8010cca:	f000 f911 	bl	8010ef0 <_fflush_r>
 8010cce:	b988      	cbnz	r0, 8010cf4 <__swbuf_r+0x90>
 8010cd0:	4638      	mov	r0, r7
 8010cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <__swbuf_r+0x9c>)
 8010cd6:	429c      	cmp	r4, r3
 8010cd8:	d101      	bne.n	8010cde <__swbuf_r+0x7a>
 8010cda:	68ac      	ldr	r4, [r5, #8]
 8010cdc:	e7cf      	b.n	8010c7e <__swbuf_r+0x1a>
 8010cde:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <__swbuf_r+0xa0>)
 8010ce0:	429c      	cmp	r4, r3
 8010ce2:	bf08      	it	eq
 8010ce4:	68ec      	ldreq	r4, [r5, #12]
 8010ce6:	e7ca      	b.n	8010c7e <__swbuf_r+0x1a>
 8010ce8:	4621      	mov	r1, r4
 8010cea:	4628      	mov	r0, r5
 8010cec:	f000 f80c 	bl	8010d08 <__swsetup_r>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	d0cb      	beq.n	8010c8c <__swbuf_r+0x28>
 8010cf4:	f04f 37ff 	mov.w	r7, #4294967295
 8010cf8:	e7ea      	b.n	8010cd0 <__swbuf_r+0x6c>
 8010cfa:	bf00      	nop
 8010cfc:	08012284 	.word	0x08012284
 8010d00:	080122a4 	.word	0x080122a4
 8010d04:	08012264 	.word	0x08012264

08010d08 <__swsetup_r>:
 8010d08:	4b32      	ldr	r3, [pc, #200]	; (8010dd4 <__swsetup_r+0xcc>)
 8010d0a:	b570      	push	{r4, r5, r6, lr}
 8010d0c:	681d      	ldr	r5, [r3, #0]
 8010d0e:	4606      	mov	r6, r0
 8010d10:	460c      	mov	r4, r1
 8010d12:	b125      	cbz	r5, 8010d1e <__swsetup_r+0x16>
 8010d14:	69ab      	ldr	r3, [r5, #24]
 8010d16:	b913      	cbnz	r3, 8010d1e <__swsetup_r+0x16>
 8010d18:	4628      	mov	r0, r5
 8010d1a:	f000 f97d 	bl	8011018 <__sinit>
 8010d1e:	4b2e      	ldr	r3, [pc, #184]	; (8010dd8 <__swsetup_r+0xd0>)
 8010d20:	429c      	cmp	r4, r3
 8010d22:	d10f      	bne.n	8010d44 <__swsetup_r+0x3c>
 8010d24:	686c      	ldr	r4, [r5, #4]
 8010d26:	89a3      	ldrh	r3, [r4, #12]
 8010d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d2c:	0719      	lsls	r1, r3, #28
 8010d2e:	d42c      	bmi.n	8010d8a <__swsetup_r+0x82>
 8010d30:	06dd      	lsls	r5, r3, #27
 8010d32:	d411      	bmi.n	8010d58 <__swsetup_r+0x50>
 8010d34:	2309      	movs	r3, #9
 8010d36:	6033      	str	r3, [r6, #0]
 8010d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010d3c:	81a3      	strh	r3, [r4, #12]
 8010d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d42:	e03e      	b.n	8010dc2 <__swsetup_r+0xba>
 8010d44:	4b25      	ldr	r3, [pc, #148]	; (8010ddc <__swsetup_r+0xd4>)
 8010d46:	429c      	cmp	r4, r3
 8010d48:	d101      	bne.n	8010d4e <__swsetup_r+0x46>
 8010d4a:	68ac      	ldr	r4, [r5, #8]
 8010d4c:	e7eb      	b.n	8010d26 <__swsetup_r+0x1e>
 8010d4e:	4b24      	ldr	r3, [pc, #144]	; (8010de0 <__swsetup_r+0xd8>)
 8010d50:	429c      	cmp	r4, r3
 8010d52:	bf08      	it	eq
 8010d54:	68ec      	ldreq	r4, [r5, #12]
 8010d56:	e7e6      	b.n	8010d26 <__swsetup_r+0x1e>
 8010d58:	0758      	lsls	r0, r3, #29
 8010d5a:	d512      	bpl.n	8010d82 <__swsetup_r+0x7a>
 8010d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d5e:	b141      	cbz	r1, 8010d72 <__swsetup_r+0x6a>
 8010d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d64:	4299      	cmp	r1, r3
 8010d66:	d002      	beq.n	8010d6e <__swsetup_r+0x66>
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7ff fddd 	bl	8010928 <_free_r>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	6363      	str	r3, [r4, #52]	; 0x34
 8010d72:	89a3      	ldrh	r3, [r4, #12]
 8010d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d78:	81a3      	strh	r3, [r4, #12]
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	6063      	str	r3, [r4, #4]
 8010d7e:	6923      	ldr	r3, [r4, #16]
 8010d80:	6023      	str	r3, [r4, #0]
 8010d82:	89a3      	ldrh	r3, [r4, #12]
 8010d84:	f043 0308 	orr.w	r3, r3, #8
 8010d88:	81a3      	strh	r3, [r4, #12]
 8010d8a:	6923      	ldr	r3, [r4, #16]
 8010d8c:	b94b      	cbnz	r3, 8010da2 <__swsetup_r+0x9a>
 8010d8e:	89a3      	ldrh	r3, [r4, #12]
 8010d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d98:	d003      	beq.n	8010da2 <__swsetup_r+0x9a>
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f000 fa01 	bl	80111a4 <__smakebuf_r>
 8010da2:	89a0      	ldrh	r0, [r4, #12]
 8010da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010da8:	f010 0301 	ands.w	r3, r0, #1
 8010dac:	d00a      	beq.n	8010dc4 <__swsetup_r+0xbc>
 8010dae:	2300      	movs	r3, #0
 8010db0:	60a3      	str	r3, [r4, #8]
 8010db2:	6963      	ldr	r3, [r4, #20]
 8010db4:	425b      	negs	r3, r3
 8010db6:	61a3      	str	r3, [r4, #24]
 8010db8:	6923      	ldr	r3, [r4, #16]
 8010dba:	b943      	cbnz	r3, 8010dce <__swsetup_r+0xc6>
 8010dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010dc0:	d1ba      	bne.n	8010d38 <__swsetup_r+0x30>
 8010dc2:	bd70      	pop	{r4, r5, r6, pc}
 8010dc4:	0781      	lsls	r1, r0, #30
 8010dc6:	bf58      	it	pl
 8010dc8:	6963      	ldrpl	r3, [r4, #20]
 8010dca:	60a3      	str	r3, [r4, #8]
 8010dcc:	e7f4      	b.n	8010db8 <__swsetup_r+0xb0>
 8010dce:	2000      	movs	r0, #0
 8010dd0:	e7f7      	b.n	8010dc2 <__swsetup_r+0xba>
 8010dd2:	bf00      	nop
 8010dd4:	24000010 	.word	0x24000010
 8010dd8:	08012284 	.word	0x08012284
 8010ddc:	080122a4 	.word	0x080122a4
 8010de0:	08012264 	.word	0x08012264

08010de4 <__sflush_r>:
 8010de4:	898a      	ldrh	r2, [r1, #12]
 8010de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dea:	4605      	mov	r5, r0
 8010dec:	0710      	lsls	r0, r2, #28
 8010dee:	460c      	mov	r4, r1
 8010df0:	d458      	bmi.n	8010ea4 <__sflush_r+0xc0>
 8010df2:	684b      	ldr	r3, [r1, #4]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	dc05      	bgt.n	8010e04 <__sflush_r+0x20>
 8010df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	dc02      	bgt.n	8010e04 <__sflush_r+0x20>
 8010dfe:	2000      	movs	r0, #0
 8010e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e06:	2e00      	cmp	r6, #0
 8010e08:	d0f9      	beq.n	8010dfe <__sflush_r+0x1a>
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e10:	682f      	ldr	r7, [r5, #0]
 8010e12:	602b      	str	r3, [r5, #0]
 8010e14:	d032      	beq.n	8010e7c <__sflush_r+0x98>
 8010e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e18:	89a3      	ldrh	r3, [r4, #12]
 8010e1a:	075a      	lsls	r2, r3, #29
 8010e1c:	d505      	bpl.n	8010e2a <__sflush_r+0x46>
 8010e1e:	6863      	ldr	r3, [r4, #4]
 8010e20:	1ac0      	subs	r0, r0, r3
 8010e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e24:	b10b      	cbz	r3, 8010e2a <__sflush_r+0x46>
 8010e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e28:	1ac0      	subs	r0, r0, r3
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	4602      	mov	r2, r0
 8010e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e30:	6a21      	ldr	r1, [r4, #32]
 8010e32:	4628      	mov	r0, r5
 8010e34:	47b0      	blx	r6
 8010e36:	1c43      	adds	r3, r0, #1
 8010e38:	89a3      	ldrh	r3, [r4, #12]
 8010e3a:	d106      	bne.n	8010e4a <__sflush_r+0x66>
 8010e3c:	6829      	ldr	r1, [r5, #0]
 8010e3e:	291d      	cmp	r1, #29
 8010e40:	d82c      	bhi.n	8010e9c <__sflush_r+0xb8>
 8010e42:	4a2a      	ldr	r2, [pc, #168]	; (8010eec <__sflush_r+0x108>)
 8010e44:	40ca      	lsrs	r2, r1
 8010e46:	07d6      	lsls	r6, r2, #31
 8010e48:	d528      	bpl.n	8010e9c <__sflush_r+0xb8>
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	6062      	str	r2, [r4, #4]
 8010e4e:	04d9      	lsls	r1, r3, #19
 8010e50:	6922      	ldr	r2, [r4, #16]
 8010e52:	6022      	str	r2, [r4, #0]
 8010e54:	d504      	bpl.n	8010e60 <__sflush_r+0x7c>
 8010e56:	1c42      	adds	r2, r0, #1
 8010e58:	d101      	bne.n	8010e5e <__sflush_r+0x7a>
 8010e5a:	682b      	ldr	r3, [r5, #0]
 8010e5c:	b903      	cbnz	r3, 8010e60 <__sflush_r+0x7c>
 8010e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8010e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e62:	602f      	str	r7, [r5, #0]
 8010e64:	2900      	cmp	r1, #0
 8010e66:	d0ca      	beq.n	8010dfe <__sflush_r+0x1a>
 8010e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e6c:	4299      	cmp	r1, r3
 8010e6e:	d002      	beq.n	8010e76 <__sflush_r+0x92>
 8010e70:	4628      	mov	r0, r5
 8010e72:	f7ff fd59 	bl	8010928 <_free_r>
 8010e76:	2000      	movs	r0, #0
 8010e78:	6360      	str	r0, [r4, #52]	; 0x34
 8010e7a:	e7c1      	b.n	8010e00 <__sflush_r+0x1c>
 8010e7c:	6a21      	ldr	r1, [r4, #32]
 8010e7e:	2301      	movs	r3, #1
 8010e80:	4628      	mov	r0, r5
 8010e82:	47b0      	blx	r6
 8010e84:	1c41      	adds	r1, r0, #1
 8010e86:	d1c7      	bne.n	8010e18 <__sflush_r+0x34>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d0c4      	beq.n	8010e18 <__sflush_r+0x34>
 8010e8e:	2b1d      	cmp	r3, #29
 8010e90:	d001      	beq.n	8010e96 <__sflush_r+0xb2>
 8010e92:	2b16      	cmp	r3, #22
 8010e94:	d101      	bne.n	8010e9a <__sflush_r+0xb6>
 8010e96:	602f      	str	r7, [r5, #0]
 8010e98:	e7b1      	b.n	8010dfe <__sflush_r+0x1a>
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ea0:	81a3      	strh	r3, [r4, #12]
 8010ea2:	e7ad      	b.n	8010e00 <__sflush_r+0x1c>
 8010ea4:	690f      	ldr	r7, [r1, #16]
 8010ea6:	2f00      	cmp	r7, #0
 8010ea8:	d0a9      	beq.n	8010dfe <__sflush_r+0x1a>
 8010eaa:	0793      	lsls	r3, r2, #30
 8010eac:	680e      	ldr	r6, [r1, #0]
 8010eae:	bf08      	it	eq
 8010eb0:	694b      	ldreq	r3, [r1, #20]
 8010eb2:	600f      	str	r7, [r1, #0]
 8010eb4:	bf18      	it	ne
 8010eb6:	2300      	movne	r3, #0
 8010eb8:	eba6 0807 	sub.w	r8, r6, r7
 8010ebc:	608b      	str	r3, [r1, #8]
 8010ebe:	f1b8 0f00 	cmp.w	r8, #0
 8010ec2:	dd9c      	ble.n	8010dfe <__sflush_r+0x1a>
 8010ec4:	6a21      	ldr	r1, [r4, #32]
 8010ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010ec8:	4643      	mov	r3, r8
 8010eca:	463a      	mov	r2, r7
 8010ecc:	4628      	mov	r0, r5
 8010ece:	47b0      	blx	r6
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	dc06      	bgt.n	8010ee2 <__sflush_r+0xfe>
 8010ed4:	89a3      	ldrh	r3, [r4, #12]
 8010ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eda:	81a3      	strh	r3, [r4, #12]
 8010edc:	f04f 30ff 	mov.w	r0, #4294967295
 8010ee0:	e78e      	b.n	8010e00 <__sflush_r+0x1c>
 8010ee2:	4407      	add	r7, r0
 8010ee4:	eba8 0800 	sub.w	r8, r8, r0
 8010ee8:	e7e9      	b.n	8010ebe <__sflush_r+0xda>
 8010eea:	bf00      	nop
 8010eec:	20400001 	.word	0x20400001

08010ef0 <_fflush_r>:
 8010ef0:	b538      	push	{r3, r4, r5, lr}
 8010ef2:	690b      	ldr	r3, [r1, #16]
 8010ef4:	4605      	mov	r5, r0
 8010ef6:	460c      	mov	r4, r1
 8010ef8:	b913      	cbnz	r3, 8010f00 <_fflush_r+0x10>
 8010efa:	2500      	movs	r5, #0
 8010efc:	4628      	mov	r0, r5
 8010efe:	bd38      	pop	{r3, r4, r5, pc}
 8010f00:	b118      	cbz	r0, 8010f0a <_fflush_r+0x1a>
 8010f02:	6983      	ldr	r3, [r0, #24]
 8010f04:	b90b      	cbnz	r3, 8010f0a <_fflush_r+0x1a>
 8010f06:	f000 f887 	bl	8011018 <__sinit>
 8010f0a:	4b14      	ldr	r3, [pc, #80]	; (8010f5c <_fflush_r+0x6c>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	d11b      	bne.n	8010f48 <_fflush_r+0x58>
 8010f10:	686c      	ldr	r4, [r5, #4]
 8010f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d0ef      	beq.n	8010efa <_fflush_r+0xa>
 8010f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f1c:	07d0      	lsls	r0, r2, #31
 8010f1e:	d404      	bmi.n	8010f2a <_fflush_r+0x3a>
 8010f20:	0599      	lsls	r1, r3, #22
 8010f22:	d402      	bmi.n	8010f2a <_fflush_r+0x3a>
 8010f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f26:	f000 f915 	bl	8011154 <__retarget_lock_acquire_recursive>
 8010f2a:	4628      	mov	r0, r5
 8010f2c:	4621      	mov	r1, r4
 8010f2e:	f7ff ff59 	bl	8010de4 <__sflush_r>
 8010f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f34:	07da      	lsls	r2, r3, #31
 8010f36:	4605      	mov	r5, r0
 8010f38:	d4e0      	bmi.n	8010efc <_fflush_r+0xc>
 8010f3a:	89a3      	ldrh	r3, [r4, #12]
 8010f3c:	059b      	lsls	r3, r3, #22
 8010f3e:	d4dd      	bmi.n	8010efc <_fflush_r+0xc>
 8010f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f42:	f000 f908 	bl	8011156 <__retarget_lock_release_recursive>
 8010f46:	e7d9      	b.n	8010efc <_fflush_r+0xc>
 8010f48:	4b05      	ldr	r3, [pc, #20]	; (8010f60 <_fflush_r+0x70>)
 8010f4a:	429c      	cmp	r4, r3
 8010f4c:	d101      	bne.n	8010f52 <_fflush_r+0x62>
 8010f4e:	68ac      	ldr	r4, [r5, #8]
 8010f50:	e7df      	b.n	8010f12 <_fflush_r+0x22>
 8010f52:	4b04      	ldr	r3, [pc, #16]	; (8010f64 <_fflush_r+0x74>)
 8010f54:	429c      	cmp	r4, r3
 8010f56:	bf08      	it	eq
 8010f58:	68ec      	ldreq	r4, [r5, #12]
 8010f5a:	e7da      	b.n	8010f12 <_fflush_r+0x22>
 8010f5c:	08012284 	.word	0x08012284
 8010f60:	080122a4 	.word	0x080122a4
 8010f64:	08012264 	.word	0x08012264

08010f68 <std>:
 8010f68:	2300      	movs	r3, #0
 8010f6a:	b510      	push	{r4, lr}
 8010f6c:	4604      	mov	r4, r0
 8010f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f76:	6083      	str	r3, [r0, #8]
 8010f78:	8181      	strh	r1, [r0, #12]
 8010f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f7c:	81c2      	strh	r2, [r0, #14]
 8010f7e:	6183      	str	r3, [r0, #24]
 8010f80:	4619      	mov	r1, r3
 8010f82:	2208      	movs	r2, #8
 8010f84:	305c      	adds	r0, #92	; 0x5c
 8010f86:	f7ff fcc7 	bl	8010918 <memset>
 8010f8a:	4b05      	ldr	r3, [pc, #20]	; (8010fa0 <std+0x38>)
 8010f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f8e:	4b05      	ldr	r3, [pc, #20]	; (8010fa4 <std+0x3c>)
 8010f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f92:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <std+0x40>)
 8010f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f96:	4b05      	ldr	r3, [pc, #20]	; (8010fac <std+0x44>)
 8010f98:	6224      	str	r4, [r4, #32]
 8010f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f9c:	bd10      	pop	{r4, pc}
 8010f9e:	bf00      	nop
 8010fa0:	08011ad1 	.word	0x08011ad1
 8010fa4:	08011af3 	.word	0x08011af3
 8010fa8:	08011b2b 	.word	0x08011b2b
 8010fac:	08011b4f 	.word	0x08011b4f

08010fb0 <_cleanup_r>:
 8010fb0:	4901      	ldr	r1, [pc, #4]	; (8010fb8 <_cleanup_r+0x8>)
 8010fb2:	f000 b8af 	b.w	8011114 <_fwalk_reent>
 8010fb6:	bf00      	nop
 8010fb8:	08010ef1 	.word	0x08010ef1

08010fbc <__sfmoreglue>:
 8010fbc:	b570      	push	{r4, r5, r6, lr}
 8010fbe:	2268      	movs	r2, #104	; 0x68
 8010fc0:	1e4d      	subs	r5, r1, #1
 8010fc2:	4355      	muls	r5, r2
 8010fc4:	460e      	mov	r6, r1
 8010fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010fca:	f7ff fd19 	bl	8010a00 <_malloc_r>
 8010fce:	4604      	mov	r4, r0
 8010fd0:	b140      	cbz	r0, 8010fe4 <__sfmoreglue+0x28>
 8010fd2:	2100      	movs	r1, #0
 8010fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8010fd8:	300c      	adds	r0, #12
 8010fda:	60a0      	str	r0, [r4, #8]
 8010fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fe0:	f7ff fc9a 	bl	8010918 <memset>
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	bd70      	pop	{r4, r5, r6, pc}

08010fe8 <__sfp_lock_acquire>:
 8010fe8:	4801      	ldr	r0, [pc, #4]	; (8010ff0 <__sfp_lock_acquire+0x8>)
 8010fea:	f000 b8b3 	b.w	8011154 <__retarget_lock_acquire_recursive>
 8010fee:	bf00      	nop
 8010ff0:	240027e5 	.word	0x240027e5

08010ff4 <__sfp_lock_release>:
 8010ff4:	4801      	ldr	r0, [pc, #4]	; (8010ffc <__sfp_lock_release+0x8>)
 8010ff6:	f000 b8ae 	b.w	8011156 <__retarget_lock_release_recursive>
 8010ffa:	bf00      	nop
 8010ffc:	240027e5 	.word	0x240027e5

08011000 <__sinit_lock_acquire>:
 8011000:	4801      	ldr	r0, [pc, #4]	; (8011008 <__sinit_lock_acquire+0x8>)
 8011002:	f000 b8a7 	b.w	8011154 <__retarget_lock_acquire_recursive>
 8011006:	bf00      	nop
 8011008:	240027e6 	.word	0x240027e6

0801100c <__sinit_lock_release>:
 801100c:	4801      	ldr	r0, [pc, #4]	; (8011014 <__sinit_lock_release+0x8>)
 801100e:	f000 b8a2 	b.w	8011156 <__retarget_lock_release_recursive>
 8011012:	bf00      	nop
 8011014:	240027e6 	.word	0x240027e6

08011018 <__sinit>:
 8011018:	b510      	push	{r4, lr}
 801101a:	4604      	mov	r4, r0
 801101c:	f7ff fff0 	bl	8011000 <__sinit_lock_acquire>
 8011020:	69a3      	ldr	r3, [r4, #24]
 8011022:	b11b      	cbz	r3, 801102c <__sinit+0x14>
 8011024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011028:	f7ff bff0 	b.w	801100c <__sinit_lock_release>
 801102c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011030:	6523      	str	r3, [r4, #80]	; 0x50
 8011032:	4b13      	ldr	r3, [pc, #76]	; (8011080 <__sinit+0x68>)
 8011034:	4a13      	ldr	r2, [pc, #76]	; (8011084 <__sinit+0x6c>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	62a2      	str	r2, [r4, #40]	; 0x28
 801103a:	42a3      	cmp	r3, r4
 801103c:	bf04      	itt	eq
 801103e:	2301      	moveq	r3, #1
 8011040:	61a3      	streq	r3, [r4, #24]
 8011042:	4620      	mov	r0, r4
 8011044:	f000 f820 	bl	8011088 <__sfp>
 8011048:	6060      	str	r0, [r4, #4]
 801104a:	4620      	mov	r0, r4
 801104c:	f000 f81c 	bl	8011088 <__sfp>
 8011050:	60a0      	str	r0, [r4, #8]
 8011052:	4620      	mov	r0, r4
 8011054:	f000 f818 	bl	8011088 <__sfp>
 8011058:	2200      	movs	r2, #0
 801105a:	60e0      	str	r0, [r4, #12]
 801105c:	2104      	movs	r1, #4
 801105e:	6860      	ldr	r0, [r4, #4]
 8011060:	f7ff ff82 	bl	8010f68 <std>
 8011064:	68a0      	ldr	r0, [r4, #8]
 8011066:	2201      	movs	r2, #1
 8011068:	2109      	movs	r1, #9
 801106a:	f7ff ff7d 	bl	8010f68 <std>
 801106e:	68e0      	ldr	r0, [r4, #12]
 8011070:	2202      	movs	r2, #2
 8011072:	2112      	movs	r1, #18
 8011074:	f7ff ff78 	bl	8010f68 <std>
 8011078:	2301      	movs	r3, #1
 801107a:	61a3      	str	r3, [r4, #24]
 801107c:	e7d2      	b.n	8011024 <__sinit+0xc>
 801107e:	bf00      	nop
 8011080:	08012260 	.word	0x08012260
 8011084:	08010fb1 	.word	0x08010fb1

08011088 <__sfp>:
 8011088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801108a:	4607      	mov	r7, r0
 801108c:	f7ff ffac 	bl	8010fe8 <__sfp_lock_acquire>
 8011090:	4b1e      	ldr	r3, [pc, #120]	; (801110c <__sfp+0x84>)
 8011092:	681e      	ldr	r6, [r3, #0]
 8011094:	69b3      	ldr	r3, [r6, #24]
 8011096:	b913      	cbnz	r3, 801109e <__sfp+0x16>
 8011098:	4630      	mov	r0, r6
 801109a:	f7ff ffbd 	bl	8011018 <__sinit>
 801109e:	3648      	adds	r6, #72	; 0x48
 80110a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80110a4:	3b01      	subs	r3, #1
 80110a6:	d503      	bpl.n	80110b0 <__sfp+0x28>
 80110a8:	6833      	ldr	r3, [r6, #0]
 80110aa:	b30b      	cbz	r3, 80110f0 <__sfp+0x68>
 80110ac:	6836      	ldr	r6, [r6, #0]
 80110ae:	e7f7      	b.n	80110a0 <__sfp+0x18>
 80110b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80110b4:	b9d5      	cbnz	r5, 80110ec <__sfp+0x64>
 80110b6:	4b16      	ldr	r3, [pc, #88]	; (8011110 <__sfp+0x88>)
 80110b8:	60e3      	str	r3, [r4, #12]
 80110ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80110be:	6665      	str	r5, [r4, #100]	; 0x64
 80110c0:	f000 f847 	bl	8011152 <__retarget_lock_init_recursive>
 80110c4:	f7ff ff96 	bl	8010ff4 <__sfp_lock_release>
 80110c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80110cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80110d0:	6025      	str	r5, [r4, #0]
 80110d2:	61a5      	str	r5, [r4, #24]
 80110d4:	2208      	movs	r2, #8
 80110d6:	4629      	mov	r1, r5
 80110d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110dc:	f7ff fc1c 	bl	8010918 <memset>
 80110e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110e8:	4620      	mov	r0, r4
 80110ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110ec:	3468      	adds	r4, #104	; 0x68
 80110ee:	e7d9      	b.n	80110a4 <__sfp+0x1c>
 80110f0:	2104      	movs	r1, #4
 80110f2:	4638      	mov	r0, r7
 80110f4:	f7ff ff62 	bl	8010fbc <__sfmoreglue>
 80110f8:	4604      	mov	r4, r0
 80110fa:	6030      	str	r0, [r6, #0]
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d1d5      	bne.n	80110ac <__sfp+0x24>
 8011100:	f7ff ff78 	bl	8010ff4 <__sfp_lock_release>
 8011104:	230c      	movs	r3, #12
 8011106:	603b      	str	r3, [r7, #0]
 8011108:	e7ee      	b.n	80110e8 <__sfp+0x60>
 801110a:	bf00      	nop
 801110c:	08012260 	.word	0x08012260
 8011110:	ffff0001 	.word	0xffff0001

08011114 <_fwalk_reent>:
 8011114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011118:	4606      	mov	r6, r0
 801111a:	4688      	mov	r8, r1
 801111c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011120:	2700      	movs	r7, #0
 8011122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011126:	f1b9 0901 	subs.w	r9, r9, #1
 801112a:	d505      	bpl.n	8011138 <_fwalk_reent+0x24>
 801112c:	6824      	ldr	r4, [r4, #0]
 801112e:	2c00      	cmp	r4, #0
 8011130:	d1f7      	bne.n	8011122 <_fwalk_reent+0xe>
 8011132:	4638      	mov	r0, r7
 8011134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011138:	89ab      	ldrh	r3, [r5, #12]
 801113a:	2b01      	cmp	r3, #1
 801113c:	d907      	bls.n	801114e <_fwalk_reent+0x3a>
 801113e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011142:	3301      	adds	r3, #1
 8011144:	d003      	beq.n	801114e <_fwalk_reent+0x3a>
 8011146:	4629      	mov	r1, r5
 8011148:	4630      	mov	r0, r6
 801114a:	47c0      	blx	r8
 801114c:	4307      	orrs	r7, r0
 801114e:	3568      	adds	r5, #104	; 0x68
 8011150:	e7e9      	b.n	8011126 <_fwalk_reent+0x12>

08011152 <__retarget_lock_init_recursive>:
 8011152:	4770      	bx	lr

08011154 <__retarget_lock_acquire_recursive>:
 8011154:	4770      	bx	lr

08011156 <__retarget_lock_release_recursive>:
 8011156:	4770      	bx	lr

08011158 <__swhatbuf_r>:
 8011158:	b570      	push	{r4, r5, r6, lr}
 801115a:	460e      	mov	r6, r1
 801115c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011160:	2900      	cmp	r1, #0
 8011162:	b096      	sub	sp, #88	; 0x58
 8011164:	4614      	mov	r4, r2
 8011166:	461d      	mov	r5, r3
 8011168:	da08      	bge.n	801117c <__swhatbuf_r+0x24>
 801116a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801116e:	2200      	movs	r2, #0
 8011170:	602a      	str	r2, [r5, #0]
 8011172:	061a      	lsls	r2, r3, #24
 8011174:	d410      	bmi.n	8011198 <__swhatbuf_r+0x40>
 8011176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801117a:	e00e      	b.n	801119a <__swhatbuf_r+0x42>
 801117c:	466a      	mov	r2, sp
 801117e:	f000 fd0d 	bl	8011b9c <_fstat_r>
 8011182:	2800      	cmp	r0, #0
 8011184:	dbf1      	blt.n	801116a <__swhatbuf_r+0x12>
 8011186:	9a01      	ldr	r2, [sp, #4]
 8011188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801118c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011190:	425a      	negs	r2, r3
 8011192:	415a      	adcs	r2, r3
 8011194:	602a      	str	r2, [r5, #0]
 8011196:	e7ee      	b.n	8011176 <__swhatbuf_r+0x1e>
 8011198:	2340      	movs	r3, #64	; 0x40
 801119a:	2000      	movs	r0, #0
 801119c:	6023      	str	r3, [r4, #0]
 801119e:	b016      	add	sp, #88	; 0x58
 80111a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080111a4 <__smakebuf_r>:
 80111a4:	898b      	ldrh	r3, [r1, #12]
 80111a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80111a8:	079d      	lsls	r5, r3, #30
 80111aa:	4606      	mov	r6, r0
 80111ac:	460c      	mov	r4, r1
 80111ae:	d507      	bpl.n	80111c0 <__smakebuf_r+0x1c>
 80111b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	6123      	str	r3, [r4, #16]
 80111b8:	2301      	movs	r3, #1
 80111ba:	6163      	str	r3, [r4, #20]
 80111bc:	b002      	add	sp, #8
 80111be:	bd70      	pop	{r4, r5, r6, pc}
 80111c0:	ab01      	add	r3, sp, #4
 80111c2:	466a      	mov	r2, sp
 80111c4:	f7ff ffc8 	bl	8011158 <__swhatbuf_r>
 80111c8:	9900      	ldr	r1, [sp, #0]
 80111ca:	4605      	mov	r5, r0
 80111cc:	4630      	mov	r0, r6
 80111ce:	f7ff fc17 	bl	8010a00 <_malloc_r>
 80111d2:	b948      	cbnz	r0, 80111e8 <__smakebuf_r+0x44>
 80111d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111d8:	059a      	lsls	r2, r3, #22
 80111da:	d4ef      	bmi.n	80111bc <__smakebuf_r+0x18>
 80111dc:	f023 0303 	bic.w	r3, r3, #3
 80111e0:	f043 0302 	orr.w	r3, r3, #2
 80111e4:	81a3      	strh	r3, [r4, #12]
 80111e6:	e7e3      	b.n	80111b0 <__smakebuf_r+0xc>
 80111e8:	4b0d      	ldr	r3, [pc, #52]	; (8011220 <__smakebuf_r+0x7c>)
 80111ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80111ec:	89a3      	ldrh	r3, [r4, #12]
 80111ee:	6020      	str	r0, [r4, #0]
 80111f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111f4:	81a3      	strh	r3, [r4, #12]
 80111f6:	9b00      	ldr	r3, [sp, #0]
 80111f8:	6163      	str	r3, [r4, #20]
 80111fa:	9b01      	ldr	r3, [sp, #4]
 80111fc:	6120      	str	r0, [r4, #16]
 80111fe:	b15b      	cbz	r3, 8011218 <__smakebuf_r+0x74>
 8011200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011204:	4630      	mov	r0, r6
 8011206:	f000 fcdb 	bl	8011bc0 <_isatty_r>
 801120a:	b128      	cbz	r0, 8011218 <__smakebuf_r+0x74>
 801120c:	89a3      	ldrh	r3, [r4, #12]
 801120e:	f023 0303 	bic.w	r3, r3, #3
 8011212:	f043 0301 	orr.w	r3, r3, #1
 8011216:	81a3      	strh	r3, [r4, #12]
 8011218:	89a0      	ldrh	r0, [r4, #12]
 801121a:	4305      	orrs	r5, r0
 801121c:	81a5      	strh	r5, [r4, #12]
 801121e:	e7cd      	b.n	80111bc <__smakebuf_r+0x18>
 8011220:	08010fb1 	.word	0x08010fb1

08011224 <__malloc_lock>:
 8011224:	4801      	ldr	r0, [pc, #4]	; (801122c <__malloc_lock+0x8>)
 8011226:	f7ff bf95 	b.w	8011154 <__retarget_lock_acquire_recursive>
 801122a:	bf00      	nop
 801122c:	240027e4 	.word	0x240027e4

08011230 <__malloc_unlock>:
 8011230:	4801      	ldr	r0, [pc, #4]	; (8011238 <__malloc_unlock+0x8>)
 8011232:	f7ff bf90 	b.w	8011156 <__retarget_lock_release_recursive>
 8011236:	bf00      	nop
 8011238:	240027e4 	.word	0x240027e4

0801123c <__ssputs_r>:
 801123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011240:	688e      	ldr	r6, [r1, #8]
 8011242:	429e      	cmp	r6, r3
 8011244:	4682      	mov	sl, r0
 8011246:	460c      	mov	r4, r1
 8011248:	4690      	mov	r8, r2
 801124a:	461f      	mov	r7, r3
 801124c:	d838      	bhi.n	80112c0 <__ssputs_r+0x84>
 801124e:	898a      	ldrh	r2, [r1, #12]
 8011250:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011254:	d032      	beq.n	80112bc <__ssputs_r+0x80>
 8011256:	6825      	ldr	r5, [r4, #0]
 8011258:	6909      	ldr	r1, [r1, #16]
 801125a:	eba5 0901 	sub.w	r9, r5, r1
 801125e:	6965      	ldr	r5, [r4, #20]
 8011260:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011264:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011268:	3301      	adds	r3, #1
 801126a:	444b      	add	r3, r9
 801126c:	106d      	asrs	r5, r5, #1
 801126e:	429d      	cmp	r5, r3
 8011270:	bf38      	it	cc
 8011272:	461d      	movcc	r5, r3
 8011274:	0553      	lsls	r3, r2, #21
 8011276:	d531      	bpl.n	80112dc <__ssputs_r+0xa0>
 8011278:	4629      	mov	r1, r5
 801127a:	f7ff fbc1 	bl	8010a00 <_malloc_r>
 801127e:	4606      	mov	r6, r0
 8011280:	b950      	cbnz	r0, 8011298 <__ssputs_r+0x5c>
 8011282:	230c      	movs	r3, #12
 8011284:	f8ca 3000 	str.w	r3, [sl]
 8011288:	89a3      	ldrh	r3, [r4, #12]
 801128a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801128e:	81a3      	strh	r3, [r4, #12]
 8011290:	f04f 30ff 	mov.w	r0, #4294967295
 8011294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011298:	6921      	ldr	r1, [r4, #16]
 801129a:	464a      	mov	r2, r9
 801129c:	f000 fcb2 	bl	8011c04 <memcpy>
 80112a0:	89a3      	ldrh	r3, [r4, #12]
 80112a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80112a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112aa:	81a3      	strh	r3, [r4, #12]
 80112ac:	6126      	str	r6, [r4, #16]
 80112ae:	6165      	str	r5, [r4, #20]
 80112b0:	444e      	add	r6, r9
 80112b2:	eba5 0509 	sub.w	r5, r5, r9
 80112b6:	6026      	str	r6, [r4, #0]
 80112b8:	60a5      	str	r5, [r4, #8]
 80112ba:	463e      	mov	r6, r7
 80112bc:	42be      	cmp	r6, r7
 80112be:	d900      	bls.n	80112c2 <__ssputs_r+0x86>
 80112c0:	463e      	mov	r6, r7
 80112c2:	6820      	ldr	r0, [r4, #0]
 80112c4:	4632      	mov	r2, r6
 80112c6:	4641      	mov	r1, r8
 80112c8:	f000 fcaa 	bl	8011c20 <memmove>
 80112cc:	68a3      	ldr	r3, [r4, #8]
 80112ce:	1b9b      	subs	r3, r3, r6
 80112d0:	60a3      	str	r3, [r4, #8]
 80112d2:	6823      	ldr	r3, [r4, #0]
 80112d4:	4433      	add	r3, r6
 80112d6:	6023      	str	r3, [r4, #0]
 80112d8:	2000      	movs	r0, #0
 80112da:	e7db      	b.n	8011294 <__ssputs_r+0x58>
 80112dc:	462a      	mov	r2, r5
 80112de:	f000 fcb9 	bl	8011c54 <_realloc_r>
 80112e2:	4606      	mov	r6, r0
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d1e1      	bne.n	80112ac <__ssputs_r+0x70>
 80112e8:	6921      	ldr	r1, [r4, #16]
 80112ea:	4650      	mov	r0, sl
 80112ec:	f7ff fb1c 	bl	8010928 <_free_r>
 80112f0:	e7c7      	b.n	8011282 <__ssputs_r+0x46>
	...

080112f4 <_svfiprintf_r>:
 80112f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f8:	4698      	mov	r8, r3
 80112fa:	898b      	ldrh	r3, [r1, #12]
 80112fc:	061b      	lsls	r3, r3, #24
 80112fe:	b09d      	sub	sp, #116	; 0x74
 8011300:	4607      	mov	r7, r0
 8011302:	460d      	mov	r5, r1
 8011304:	4614      	mov	r4, r2
 8011306:	d50e      	bpl.n	8011326 <_svfiprintf_r+0x32>
 8011308:	690b      	ldr	r3, [r1, #16]
 801130a:	b963      	cbnz	r3, 8011326 <_svfiprintf_r+0x32>
 801130c:	2140      	movs	r1, #64	; 0x40
 801130e:	f7ff fb77 	bl	8010a00 <_malloc_r>
 8011312:	6028      	str	r0, [r5, #0]
 8011314:	6128      	str	r0, [r5, #16]
 8011316:	b920      	cbnz	r0, 8011322 <_svfiprintf_r+0x2e>
 8011318:	230c      	movs	r3, #12
 801131a:	603b      	str	r3, [r7, #0]
 801131c:	f04f 30ff 	mov.w	r0, #4294967295
 8011320:	e0d1      	b.n	80114c6 <_svfiprintf_r+0x1d2>
 8011322:	2340      	movs	r3, #64	; 0x40
 8011324:	616b      	str	r3, [r5, #20]
 8011326:	2300      	movs	r3, #0
 8011328:	9309      	str	r3, [sp, #36]	; 0x24
 801132a:	2320      	movs	r3, #32
 801132c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011330:	f8cd 800c 	str.w	r8, [sp, #12]
 8011334:	2330      	movs	r3, #48	; 0x30
 8011336:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80114e0 <_svfiprintf_r+0x1ec>
 801133a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801133e:	f04f 0901 	mov.w	r9, #1
 8011342:	4623      	mov	r3, r4
 8011344:	469a      	mov	sl, r3
 8011346:	f813 2b01 	ldrb.w	r2, [r3], #1
 801134a:	b10a      	cbz	r2, 8011350 <_svfiprintf_r+0x5c>
 801134c:	2a25      	cmp	r2, #37	; 0x25
 801134e:	d1f9      	bne.n	8011344 <_svfiprintf_r+0x50>
 8011350:	ebba 0b04 	subs.w	fp, sl, r4
 8011354:	d00b      	beq.n	801136e <_svfiprintf_r+0x7a>
 8011356:	465b      	mov	r3, fp
 8011358:	4622      	mov	r2, r4
 801135a:	4629      	mov	r1, r5
 801135c:	4638      	mov	r0, r7
 801135e:	f7ff ff6d 	bl	801123c <__ssputs_r>
 8011362:	3001      	adds	r0, #1
 8011364:	f000 80aa 	beq.w	80114bc <_svfiprintf_r+0x1c8>
 8011368:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801136a:	445a      	add	r2, fp
 801136c:	9209      	str	r2, [sp, #36]	; 0x24
 801136e:	f89a 3000 	ldrb.w	r3, [sl]
 8011372:	2b00      	cmp	r3, #0
 8011374:	f000 80a2 	beq.w	80114bc <_svfiprintf_r+0x1c8>
 8011378:	2300      	movs	r3, #0
 801137a:	f04f 32ff 	mov.w	r2, #4294967295
 801137e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011382:	f10a 0a01 	add.w	sl, sl, #1
 8011386:	9304      	str	r3, [sp, #16]
 8011388:	9307      	str	r3, [sp, #28]
 801138a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801138e:	931a      	str	r3, [sp, #104]	; 0x68
 8011390:	4654      	mov	r4, sl
 8011392:	2205      	movs	r2, #5
 8011394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011398:	4851      	ldr	r0, [pc, #324]	; (80114e0 <_svfiprintf_r+0x1ec>)
 801139a:	f7ee ffa9 	bl	80002f0 <memchr>
 801139e:	9a04      	ldr	r2, [sp, #16]
 80113a0:	b9d8      	cbnz	r0, 80113da <_svfiprintf_r+0xe6>
 80113a2:	06d0      	lsls	r0, r2, #27
 80113a4:	bf44      	itt	mi
 80113a6:	2320      	movmi	r3, #32
 80113a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113ac:	0711      	lsls	r1, r2, #28
 80113ae:	bf44      	itt	mi
 80113b0:	232b      	movmi	r3, #43	; 0x2b
 80113b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113b6:	f89a 3000 	ldrb.w	r3, [sl]
 80113ba:	2b2a      	cmp	r3, #42	; 0x2a
 80113bc:	d015      	beq.n	80113ea <_svfiprintf_r+0xf6>
 80113be:	9a07      	ldr	r2, [sp, #28]
 80113c0:	4654      	mov	r4, sl
 80113c2:	2000      	movs	r0, #0
 80113c4:	f04f 0c0a 	mov.w	ip, #10
 80113c8:	4621      	mov	r1, r4
 80113ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113ce:	3b30      	subs	r3, #48	; 0x30
 80113d0:	2b09      	cmp	r3, #9
 80113d2:	d94e      	bls.n	8011472 <_svfiprintf_r+0x17e>
 80113d4:	b1b0      	cbz	r0, 8011404 <_svfiprintf_r+0x110>
 80113d6:	9207      	str	r2, [sp, #28]
 80113d8:	e014      	b.n	8011404 <_svfiprintf_r+0x110>
 80113da:	eba0 0308 	sub.w	r3, r0, r8
 80113de:	fa09 f303 	lsl.w	r3, r9, r3
 80113e2:	4313      	orrs	r3, r2
 80113e4:	9304      	str	r3, [sp, #16]
 80113e6:	46a2      	mov	sl, r4
 80113e8:	e7d2      	b.n	8011390 <_svfiprintf_r+0x9c>
 80113ea:	9b03      	ldr	r3, [sp, #12]
 80113ec:	1d19      	adds	r1, r3, #4
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	9103      	str	r1, [sp, #12]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	bfbb      	ittet	lt
 80113f6:	425b      	neglt	r3, r3
 80113f8:	f042 0202 	orrlt.w	r2, r2, #2
 80113fc:	9307      	strge	r3, [sp, #28]
 80113fe:	9307      	strlt	r3, [sp, #28]
 8011400:	bfb8      	it	lt
 8011402:	9204      	strlt	r2, [sp, #16]
 8011404:	7823      	ldrb	r3, [r4, #0]
 8011406:	2b2e      	cmp	r3, #46	; 0x2e
 8011408:	d10c      	bne.n	8011424 <_svfiprintf_r+0x130>
 801140a:	7863      	ldrb	r3, [r4, #1]
 801140c:	2b2a      	cmp	r3, #42	; 0x2a
 801140e:	d135      	bne.n	801147c <_svfiprintf_r+0x188>
 8011410:	9b03      	ldr	r3, [sp, #12]
 8011412:	1d1a      	adds	r2, r3, #4
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	9203      	str	r2, [sp, #12]
 8011418:	2b00      	cmp	r3, #0
 801141a:	bfb8      	it	lt
 801141c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011420:	3402      	adds	r4, #2
 8011422:	9305      	str	r3, [sp, #20]
 8011424:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80114f0 <_svfiprintf_r+0x1fc>
 8011428:	7821      	ldrb	r1, [r4, #0]
 801142a:	2203      	movs	r2, #3
 801142c:	4650      	mov	r0, sl
 801142e:	f7ee ff5f 	bl	80002f0 <memchr>
 8011432:	b140      	cbz	r0, 8011446 <_svfiprintf_r+0x152>
 8011434:	2340      	movs	r3, #64	; 0x40
 8011436:	eba0 000a 	sub.w	r0, r0, sl
 801143a:	fa03 f000 	lsl.w	r0, r3, r0
 801143e:	9b04      	ldr	r3, [sp, #16]
 8011440:	4303      	orrs	r3, r0
 8011442:	3401      	adds	r4, #1
 8011444:	9304      	str	r3, [sp, #16]
 8011446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801144a:	4826      	ldr	r0, [pc, #152]	; (80114e4 <_svfiprintf_r+0x1f0>)
 801144c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011450:	2206      	movs	r2, #6
 8011452:	f7ee ff4d 	bl	80002f0 <memchr>
 8011456:	2800      	cmp	r0, #0
 8011458:	d038      	beq.n	80114cc <_svfiprintf_r+0x1d8>
 801145a:	4b23      	ldr	r3, [pc, #140]	; (80114e8 <_svfiprintf_r+0x1f4>)
 801145c:	bb1b      	cbnz	r3, 80114a6 <_svfiprintf_r+0x1b2>
 801145e:	9b03      	ldr	r3, [sp, #12]
 8011460:	3307      	adds	r3, #7
 8011462:	f023 0307 	bic.w	r3, r3, #7
 8011466:	3308      	adds	r3, #8
 8011468:	9303      	str	r3, [sp, #12]
 801146a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801146c:	4433      	add	r3, r6
 801146e:	9309      	str	r3, [sp, #36]	; 0x24
 8011470:	e767      	b.n	8011342 <_svfiprintf_r+0x4e>
 8011472:	fb0c 3202 	mla	r2, ip, r2, r3
 8011476:	460c      	mov	r4, r1
 8011478:	2001      	movs	r0, #1
 801147a:	e7a5      	b.n	80113c8 <_svfiprintf_r+0xd4>
 801147c:	2300      	movs	r3, #0
 801147e:	3401      	adds	r4, #1
 8011480:	9305      	str	r3, [sp, #20]
 8011482:	4619      	mov	r1, r3
 8011484:	f04f 0c0a 	mov.w	ip, #10
 8011488:	4620      	mov	r0, r4
 801148a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801148e:	3a30      	subs	r2, #48	; 0x30
 8011490:	2a09      	cmp	r2, #9
 8011492:	d903      	bls.n	801149c <_svfiprintf_r+0x1a8>
 8011494:	2b00      	cmp	r3, #0
 8011496:	d0c5      	beq.n	8011424 <_svfiprintf_r+0x130>
 8011498:	9105      	str	r1, [sp, #20]
 801149a:	e7c3      	b.n	8011424 <_svfiprintf_r+0x130>
 801149c:	fb0c 2101 	mla	r1, ip, r1, r2
 80114a0:	4604      	mov	r4, r0
 80114a2:	2301      	movs	r3, #1
 80114a4:	e7f0      	b.n	8011488 <_svfiprintf_r+0x194>
 80114a6:	ab03      	add	r3, sp, #12
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	462a      	mov	r2, r5
 80114ac:	4b0f      	ldr	r3, [pc, #60]	; (80114ec <_svfiprintf_r+0x1f8>)
 80114ae:	a904      	add	r1, sp, #16
 80114b0:	4638      	mov	r0, r7
 80114b2:	f3af 8000 	nop.w
 80114b6:	1c42      	adds	r2, r0, #1
 80114b8:	4606      	mov	r6, r0
 80114ba:	d1d6      	bne.n	801146a <_svfiprintf_r+0x176>
 80114bc:	89ab      	ldrh	r3, [r5, #12]
 80114be:	065b      	lsls	r3, r3, #25
 80114c0:	f53f af2c 	bmi.w	801131c <_svfiprintf_r+0x28>
 80114c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114c6:	b01d      	add	sp, #116	; 0x74
 80114c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114cc:	ab03      	add	r3, sp, #12
 80114ce:	9300      	str	r3, [sp, #0]
 80114d0:	462a      	mov	r2, r5
 80114d2:	4b06      	ldr	r3, [pc, #24]	; (80114ec <_svfiprintf_r+0x1f8>)
 80114d4:	a904      	add	r1, sp, #16
 80114d6:	4638      	mov	r0, r7
 80114d8:	f000 f9d4 	bl	8011884 <_printf_i>
 80114dc:	e7eb      	b.n	80114b6 <_svfiprintf_r+0x1c2>
 80114de:	bf00      	nop
 80114e0:	080122c4 	.word	0x080122c4
 80114e4:	080122ce 	.word	0x080122ce
 80114e8:	00000000 	.word	0x00000000
 80114ec:	0801123d 	.word	0x0801123d
 80114f0:	080122ca 	.word	0x080122ca

080114f4 <__sfputc_r>:
 80114f4:	6893      	ldr	r3, [r2, #8]
 80114f6:	3b01      	subs	r3, #1
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	b410      	push	{r4}
 80114fc:	6093      	str	r3, [r2, #8]
 80114fe:	da08      	bge.n	8011512 <__sfputc_r+0x1e>
 8011500:	6994      	ldr	r4, [r2, #24]
 8011502:	42a3      	cmp	r3, r4
 8011504:	db01      	blt.n	801150a <__sfputc_r+0x16>
 8011506:	290a      	cmp	r1, #10
 8011508:	d103      	bne.n	8011512 <__sfputc_r+0x1e>
 801150a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801150e:	f7ff bba9 	b.w	8010c64 <__swbuf_r>
 8011512:	6813      	ldr	r3, [r2, #0]
 8011514:	1c58      	adds	r0, r3, #1
 8011516:	6010      	str	r0, [r2, #0]
 8011518:	7019      	strb	r1, [r3, #0]
 801151a:	4608      	mov	r0, r1
 801151c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011520:	4770      	bx	lr

08011522 <__sfputs_r>:
 8011522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011524:	4606      	mov	r6, r0
 8011526:	460f      	mov	r7, r1
 8011528:	4614      	mov	r4, r2
 801152a:	18d5      	adds	r5, r2, r3
 801152c:	42ac      	cmp	r4, r5
 801152e:	d101      	bne.n	8011534 <__sfputs_r+0x12>
 8011530:	2000      	movs	r0, #0
 8011532:	e007      	b.n	8011544 <__sfputs_r+0x22>
 8011534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011538:	463a      	mov	r2, r7
 801153a:	4630      	mov	r0, r6
 801153c:	f7ff ffda 	bl	80114f4 <__sfputc_r>
 8011540:	1c43      	adds	r3, r0, #1
 8011542:	d1f3      	bne.n	801152c <__sfputs_r+0xa>
 8011544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011548 <_vfiprintf_r>:
 8011548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801154c:	460d      	mov	r5, r1
 801154e:	b09d      	sub	sp, #116	; 0x74
 8011550:	4614      	mov	r4, r2
 8011552:	4698      	mov	r8, r3
 8011554:	4606      	mov	r6, r0
 8011556:	b118      	cbz	r0, 8011560 <_vfiprintf_r+0x18>
 8011558:	6983      	ldr	r3, [r0, #24]
 801155a:	b90b      	cbnz	r3, 8011560 <_vfiprintf_r+0x18>
 801155c:	f7ff fd5c 	bl	8011018 <__sinit>
 8011560:	4b89      	ldr	r3, [pc, #548]	; (8011788 <_vfiprintf_r+0x240>)
 8011562:	429d      	cmp	r5, r3
 8011564:	d11b      	bne.n	801159e <_vfiprintf_r+0x56>
 8011566:	6875      	ldr	r5, [r6, #4]
 8011568:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801156a:	07d9      	lsls	r1, r3, #31
 801156c:	d405      	bmi.n	801157a <_vfiprintf_r+0x32>
 801156e:	89ab      	ldrh	r3, [r5, #12]
 8011570:	059a      	lsls	r2, r3, #22
 8011572:	d402      	bmi.n	801157a <_vfiprintf_r+0x32>
 8011574:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011576:	f7ff fded 	bl	8011154 <__retarget_lock_acquire_recursive>
 801157a:	89ab      	ldrh	r3, [r5, #12]
 801157c:	071b      	lsls	r3, r3, #28
 801157e:	d501      	bpl.n	8011584 <_vfiprintf_r+0x3c>
 8011580:	692b      	ldr	r3, [r5, #16]
 8011582:	b9eb      	cbnz	r3, 80115c0 <_vfiprintf_r+0x78>
 8011584:	4629      	mov	r1, r5
 8011586:	4630      	mov	r0, r6
 8011588:	f7ff fbbe 	bl	8010d08 <__swsetup_r>
 801158c:	b1c0      	cbz	r0, 80115c0 <_vfiprintf_r+0x78>
 801158e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011590:	07dc      	lsls	r4, r3, #31
 8011592:	d50e      	bpl.n	80115b2 <_vfiprintf_r+0x6a>
 8011594:	f04f 30ff 	mov.w	r0, #4294967295
 8011598:	b01d      	add	sp, #116	; 0x74
 801159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159e:	4b7b      	ldr	r3, [pc, #492]	; (801178c <_vfiprintf_r+0x244>)
 80115a0:	429d      	cmp	r5, r3
 80115a2:	d101      	bne.n	80115a8 <_vfiprintf_r+0x60>
 80115a4:	68b5      	ldr	r5, [r6, #8]
 80115a6:	e7df      	b.n	8011568 <_vfiprintf_r+0x20>
 80115a8:	4b79      	ldr	r3, [pc, #484]	; (8011790 <_vfiprintf_r+0x248>)
 80115aa:	429d      	cmp	r5, r3
 80115ac:	bf08      	it	eq
 80115ae:	68f5      	ldreq	r5, [r6, #12]
 80115b0:	e7da      	b.n	8011568 <_vfiprintf_r+0x20>
 80115b2:	89ab      	ldrh	r3, [r5, #12]
 80115b4:	0598      	lsls	r0, r3, #22
 80115b6:	d4ed      	bmi.n	8011594 <_vfiprintf_r+0x4c>
 80115b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80115ba:	f7ff fdcc 	bl	8011156 <__retarget_lock_release_recursive>
 80115be:	e7e9      	b.n	8011594 <_vfiprintf_r+0x4c>
 80115c0:	2300      	movs	r3, #0
 80115c2:	9309      	str	r3, [sp, #36]	; 0x24
 80115c4:	2320      	movs	r3, #32
 80115c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80115ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80115ce:	2330      	movs	r3, #48	; 0x30
 80115d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011794 <_vfiprintf_r+0x24c>
 80115d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80115d8:	f04f 0901 	mov.w	r9, #1
 80115dc:	4623      	mov	r3, r4
 80115de:	469a      	mov	sl, r3
 80115e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115e4:	b10a      	cbz	r2, 80115ea <_vfiprintf_r+0xa2>
 80115e6:	2a25      	cmp	r2, #37	; 0x25
 80115e8:	d1f9      	bne.n	80115de <_vfiprintf_r+0x96>
 80115ea:	ebba 0b04 	subs.w	fp, sl, r4
 80115ee:	d00b      	beq.n	8011608 <_vfiprintf_r+0xc0>
 80115f0:	465b      	mov	r3, fp
 80115f2:	4622      	mov	r2, r4
 80115f4:	4629      	mov	r1, r5
 80115f6:	4630      	mov	r0, r6
 80115f8:	f7ff ff93 	bl	8011522 <__sfputs_r>
 80115fc:	3001      	adds	r0, #1
 80115fe:	f000 80aa 	beq.w	8011756 <_vfiprintf_r+0x20e>
 8011602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011604:	445a      	add	r2, fp
 8011606:	9209      	str	r2, [sp, #36]	; 0x24
 8011608:	f89a 3000 	ldrb.w	r3, [sl]
 801160c:	2b00      	cmp	r3, #0
 801160e:	f000 80a2 	beq.w	8011756 <_vfiprintf_r+0x20e>
 8011612:	2300      	movs	r3, #0
 8011614:	f04f 32ff 	mov.w	r2, #4294967295
 8011618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801161c:	f10a 0a01 	add.w	sl, sl, #1
 8011620:	9304      	str	r3, [sp, #16]
 8011622:	9307      	str	r3, [sp, #28]
 8011624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011628:	931a      	str	r3, [sp, #104]	; 0x68
 801162a:	4654      	mov	r4, sl
 801162c:	2205      	movs	r2, #5
 801162e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011632:	4858      	ldr	r0, [pc, #352]	; (8011794 <_vfiprintf_r+0x24c>)
 8011634:	f7ee fe5c 	bl	80002f0 <memchr>
 8011638:	9a04      	ldr	r2, [sp, #16]
 801163a:	b9d8      	cbnz	r0, 8011674 <_vfiprintf_r+0x12c>
 801163c:	06d1      	lsls	r1, r2, #27
 801163e:	bf44      	itt	mi
 8011640:	2320      	movmi	r3, #32
 8011642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011646:	0713      	lsls	r3, r2, #28
 8011648:	bf44      	itt	mi
 801164a:	232b      	movmi	r3, #43	; 0x2b
 801164c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011650:	f89a 3000 	ldrb.w	r3, [sl]
 8011654:	2b2a      	cmp	r3, #42	; 0x2a
 8011656:	d015      	beq.n	8011684 <_vfiprintf_r+0x13c>
 8011658:	9a07      	ldr	r2, [sp, #28]
 801165a:	4654      	mov	r4, sl
 801165c:	2000      	movs	r0, #0
 801165e:	f04f 0c0a 	mov.w	ip, #10
 8011662:	4621      	mov	r1, r4
 8011664:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011668:	3b30      	subs	r3, #48	; 0x30
 801166a:	2b09      	cmp	r3, #9
 801166c:	d94e      	bls.n	801170c <_vfiprintf_r+0x1c4>
 801166e:	b1b0      	cbz	r0, 801169e <_vfiprintf_r+0x156>
 8011670:	9207      	str	r2, [sp, #28]
 8011672:	e014      	b.n	801169e <_vfiprintf_r+0x156>
 8011674:	eba0 0308 	sub.w	r3, r0, r8
 8011678:	fa09 f303 	lsl.w	r3, r9, r3
 801167c:	4313      	orrs	r3, r2
 801167e:	9304      	str	r3, [sp, #16]
 8011680:	46a2      	mov	sl, r4
 8011682:	e7d2      	b.n	801162a <_vfiprintf_r+0xe2>
 8011684:	9b03      	ldr	r3, [sp, #12]
 8011686:	1d19      	adds	r1, r3, #4
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	9103      	str	r1, [sp, #12]
 801168c:	2b00      	cmp	r3, #0
 801168e:	bfbb      	ittet	lt
 8011690:	425b      	neglt	r3, r3
 8011692:	f042 0202 	orrlt.w	r2, r2, #2
 8011696:	9307      	strge	r3, [sp, #28]
 8011698:	9307      	strlt	r3, [sp, #28]
 801169a:	bfb8      	it	lt
 801169c:	9204      	strlt	r2, [sp, #16]
 801169e:	7823      	ldrb	r3, [r4, #0]
 80116a0:	2b2e      	cmp	r3, #46	; 0x2e
 80116a2:	d10c      	bne.n	80116be <_vfiprintf_r+0x176>
 80116a4:	7863      	ldrb	r3, [r4, #1]
 80116a6:	2b2a      	cmp	r3, #42	; 0x2a
 80116a8:	d135      	bne.n	8011716 <_vfiprintf_r+0x1ce>
 80116aa:	9b03      	ldr	r3, [sp, #12]
 80116ac:	1d1a      	adds	r2, r3, #4
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	9203      	str	r2, [sp, #12]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	bfb8      	it	lt
 80116b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80116ba:	3402      	adds	r4, #2
 80116bc:	9305      	str	r3, [sp, #20]
 80116be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80117a4 <_vfiprintf_r+0x25c>
 80116c2:	7821      	ldrb	r1, [r4, #0]
 80116c4:	2203      	movs	r2, #3
 80116c6:	4650      	mov	r0, sl
 80116c8:	f7ee fe12 	bl	80002f0 <memchr>
 80116cc:	b140      	cbz	r0, 80116e0 <_vfiprintf_r+0x198>
 80116ce:	2340      	movs	r3, #64	; 0x40
 80116d0:	eba0 000a 	sub.w	r0, r0, sl
 80116d4:	fa03 f000 	lsl.w	r0, r3, r0
 80116d8:	9b04      	ldr	r3, [sp, #16]
 80116da:	4303      	orrs	r3, r0
 80116dc:	3401      	adds	r4, #1
 80116de:	9304      	str	r3, [sp, #16]
 80116e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116e4:	482c      	ldr	r0, [pc, #176]	; (8011798 <_vfiprintf_r+0x250>)
 80116e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80116ea:	2206      	movs	r2, #6
 80116ec:	f7ee fe00 	bl	80002f0 <memchr>
 80116f0:	2800      	cmp	r0, #0
 80116f2:	d03f      	beq.n	8011774 <_vfiprintf_r+0x22c>
 80116f4:	4b29      	ldr	r3, [pc, #164]	; (801179c <_vfiprintf_r+0x254>)
 80116f6:	bb1b      	cbnz	r3, 8011740 <_vfiprintf_r+0x1f8>
 80116f8:	9b03      	ldr	r3, [sp, #12]
 80116fa:	3307      	adds	r3, #7
 80116fc:	f023 0307 	bic.w	r3, r3, #7
 8011700:	3308      	adds	r3, #8
 8011702:	9303      	str	r3, [sp, #12]
 8011704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011706:	443b      	add	r3, r7
 8011708:	9309      	str	r3, [sp, #36]	; 0x24
 801170a:	e767      	b.n	80115dc <_vfiprintf_r+0x94>
 801170c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011710:	460c      	mov	r4, r1
 8011712:	2001      	movs	r0, #1
 8011714:	e7a5      	b.n	8011662 <_vfiprintf_r+0x11a>
 8011716:	2300      	movs	r3, #0
 8011718:	3401      	adds	r4, #1
 801171a:	9305      	str	r3, [sp, #20]
 801171c:	4619      	mov	r1, r3
 801171e:	f04f 0c0a 	mov.w	ip, #10
 8011722:	4620      	mov	r0, r4
 8011724:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011728:	3a30      	subs	r2, #48	; 0x30
 801172a:	2a09      	cmp	r2, #9
 801172c:	d903      	bls.n	8011736 <_vfiprintf_r+0x1ee>
 801172e:	2b00      	cmp	r3, #0
 8011730:	d0c5      	beq.n	80116be <_vfiprintf_r+0x176>
 8011732:	9105      	str	r1, [sp, #20]
 8011734:	e7c3      	b.n	80116be <_vfiprintf_r+0x176>
 8011736:	fb0c 2101 	mla	r1, ip, r1, r2
 801173a:	4604      	mov	r4, r0
 801173c:	2301      	movs	r3, #1
 801173e:	e7f0      	b.n	8011722 <_vfiprintf_r+0x1da>
 8011740:	ab03      	add	r3, sp, #12
 8011742:	9300      	str	r3, [sp, #0]
 8011744:	462a      	mov	r2, r5
 8011746:	4b16      	ldr	r3, [pc, #88]	; (80117a0 <_vfiprintf_r+0x258>)
 8011748:	a904      	add	r1, sp, #16
 801174a:	4630      	mov	r0, r6
 801174c:	f3af 8000 	nop.w
 8011750:	4607      	mov	r7, r0
 8011752:	1c78      	adds	r0, r7, #1
 8011754:	d1d6      	bne.n	8011704 <_vfiprintf_r+0x1bc>
 8011756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011758:	07d9      	lsls	r1, r3, #31
 801175a:	d405      	bmi.n	8011768 <_vfiprintf_r+0x220>
 801175c:	89ab      	ldrh	r3, [r5, #12]
 801175e:	059a      	lsls	r2, r3, #22
 8011760:	d402      	bmi.n	8011768 <_vfiprintf_r+0x220>
 8011762:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011764:	f7ff fcf7 	bl	8011156 <__retarget_lock_release_recursive>
 8011768:	89ab      	ldrh	r3, [r5, #12]
 801176a:	065b      	lsls	r3, r3, #25
 801176c:	f53f af12 	bmi.w	8011594 <_vfiprintf_r+0x4c>
 8011770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011772:	e711      	b.n	8011598 <_vfiprintf_r+0x50>
 8011774:	ab03      	add	r3, sp, #12
 8011776:	9300      	str	r3, [sp, #0]
 8011778:	462a      	mov	r2, r5
 801177a:	4b09      	ldr	r3, [pc, #36]	; (80117a0 <_vfiprintf_r+0x258>)
 801177c:	a904      	add	r1, sp, #16
 801177e:	4630      	mov	r0, r6
 8011780:	f000 f880 	bl	8011884 <_printf_i>
 8011784:	e7e4      	b.n	8011750 <_vfiprintf_r+0x208>
 8011786:	bf00      	nop
 8011788:	08012284 	.word	0x08012284
 801178c:	080122a4 	.word	0x080122a4
 8011790:	08012264 	.word	0x08012264
 8011794:	080122c4 	.word	0x080122c4
 8011798:	080122ce 	.word	0x080122ce
 801179c:	00000000 	.word	0x00000000
 80117a0:	08011523 	.word	0x08011523
 80117a4:	080122ca 	.word	0x080122ca

080117a8 <_printf_common>:
 80117a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117ac:	4616      	mov	r6, r2
 80117ae:	4699      	mov	r9, r3
 80117b0:	688a      	ldr	r2, [r1, #8]
 80117b2:	690b      	ldr	r3, [r1, #16]
 80117b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80117b8:	4293      	cmp	r3, r2
 80117ba:	bfb8      	it	lt
 80117bc:	4613      	movlt	r3, r2
 80117be:	6033      	str	r3, [r6, #0]
 80117c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80117c4:	4607      	mov	r7, r0
 80117c6:	460c      	mov	r4, r1
 80117c8:	b10a      	cbz	r2, 80117ce <_printf_common+0x26>
 80117ca:	3301      	adds	r3, #1
 80117cc:	6033      	str	r3, [r6, #0]
 80117ce:	6823      	ldr	r3, [r4, #0]
 80117d0:	0699      	lsls	r1, r3, #26
 80117d2:	bf42      	ittt	mi
 80117d4:	6833      	ldrmi	r3, [r6, #0]
 80117d6:	3302      	addmi	r3, #2
 80117d8:	6033      	strmi	r3, [r6, #0]
 80117da:	6825      	ldr	r5, [r4, #0]
 80117dc:	f015 0506 	ands.w	r5, r5, #6
 80117e0:	d106      	bne.n	80117f0 <_printf_common+0x48>
 80117e2:	f104 0a19 	add.w	sl, r4, #25
 80117e6:	68e3      	ldr	r3, [r4, #12]
 80117e8:	6832      	ldr	r2, [r6, #0]
 80117ea:	1a9b      	subs	r3, r3, r2
 80117ec:	42ab      	cmp	r3, r5
 80117ee:	dc26      	bgt.n	801183e <_printf_common+0x96>
 80117f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80117f4:	1e13      	subs	r3, r2, #0
 80117f6:	6822      	ldr	r2, [r4, #0]
 80117f8:	bf18      	it	ne
 80117fa:	2301      	movne	r3, #1
 80117fc:	0692      	lsls	r2, r2, #26
 80117fe:	d42b      	bmi.n	8011858 <_printf_common+0xb0>
 8011800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011804:	4649      	mov	r1, r9
 8011806:	4638      	mov	r0, r7
 8011808:	47c0      	blx	r8
 801180a:	3001      	adds	r0, #1
 801180c:	d01e      	beq.n	801184c <_printf_common+0xa4>
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	68e5      	ldr	r5, [r4, #12]
 8011812:	6832      	ldr	r2, [r6, #0]
 8011814:	f003 0306 	and.w	r3, r3, #6
 8011818:	2b04      	cmp	r3, #4
 801181a:	bf08      	it	eq
 801181c:	1aad      	subeq	r5, r5, r2
 801181e:	68a3      	ldr	r3, [r4, #8]
 8011820:	6922      	ldr	r2, [r4, #16]
 8011822:	bf0c      	ite	eq
 8011824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011828:	2500      	movne	r5, #0
 801182a:	4293      	cmp	r3, r2
 801182c:	bfc4      	itt	gt
 801182e:	1a9b      	subgt	r3, r3, r2
 8011830:	18ed      	addgt	r5, r5, r3
 8011832:	2600      	movs	r6, #0
 8011834:	341a      	adds	r4, #26
 8011836:	42b5      	cmp	r5, r6
 8011838:	d11a      	bne.n	8011870 <_printf_common+0xc8>
 801183a:	2000      	movs	r0, #0
 801183c:	e008      	b.n	8011850 <_printf_common+0xa8>
 801183e:	2301      	movs	r3, #1
 8011840:	4652      	mov	r2, sl
 8011842:	4649      	mov	r1, r9
 8011844:	4638      	mov	r0, r7
 8011846:	47c0      	blx	r8
 8011848:	3001      	adds	r0, #1
 801184a:	d103      	bne.n	8011854 <_printf_common+0xac>
 801184c:	f04f 30ff 	mov.w	r0, #4294967295
 8011850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011854:	3501      	adds	r5, #1
 8011856:	e7c6      	b.n	80117e6 <_printf_common+0x3e>
 8011858:	18e1      	adds	r1, r4, r3
 801185a:	1c5a      	adds	r2, r3, #1
 801185c:	2030      	movs	r0, #48	; 0x30
 801185e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011862:	4422      	add	r2, r4
 8011864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801186c:	3302      	adds	r3, #2
 801186e:	e7c7      	b.n	8011800 <_printf_common+0x58>
 8011870:	2301      	movs	r3, #1
 8011872:	4622      	mov	r2, r4
 8011874:	4649      	mov	r1, r9
 8011876:	4638      	mov	r0, r7
 8011878:	47c0      	blx	r8
 801187a:	3001      	adds	r0, #1
 801187c:	d0e6      	beq.n	801184c <_printf_common+0xa4>
 801187e:	3601      	adds	r6, #1
 8011880:	e7d9      	b.n	8011836 <_printf_common+0x8e>
	...

08011884 <_printf_i>:
 8011884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011888:	7e0f      	ldrb	r7, [r1, #24]
 801188a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801188c:	2f78      	cmp	r7, #120	; 0x78
 801188e:	4691      	mov	r9, r2
 8011890:	4680      	mov	r8, r0
 8011892:	460c      	mov	r4, r1
 8011894:	469a      	mov	sl, r3
 8011896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801189a:	d807      	bhi.n	80118ac <_printf_i+0x28>
 801189c:	2f62      	cmp	r7, #98	; 0x62
 801189e:	d80a      	bhi.n	80118b6 <_printf_i+0x32>
 80118a0:	2f00      	cmp	r7, #0
 80118a2:	f000 80d8 	beq.w	8011a56 <_printf_i+0x1d2>
 80118a6:	2f58      	cmp	r7, #88	; 0x58
 80118a8:	f000 80a3 	beq.w	80119f2 <_printf_i+0x16e>
 80118ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80118b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80118b4:	e03a      	b.n	801192c <_printf_i+0xa8>
 80118b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80118ba:	2b15      	cmp	r3, #21
 80118bc:	d8f6      	bhi.n	80118ac <_printf_i+0x28>
 80118be:	a101      	add	r1, pc, #4	; (adr r1, 80118c4 <_printf_i+0x40>)
 80118c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80118c4:	0801191d 	.word	0x0801191d
 80118c8:	08011931 	.word	0x08011931
 80118cc:	080118ad 	.word	0x080118ad
 80118d0:	080118ad 	.word	0x080118ad
 80118d4:	080118ad 	.word	0x080118ad
 80118d8:	080118ad 	.word	0x080118ad
 80118dc:	08011931 	.word	0x08011931
 80118e0:	080118ad 	.word	0x080118ad
 80118e4:	080118ad 	.word	0x080118ad
 80118e8:	080118ad 	.word	0x080118ad
 80118ec:	080118ad 	.word	0x080118ad
 80118f0:	08011a3d 	.word	0x08011a3d
 80118f4:	08011961 	.word	0x08011961
 80118f8:	08011a1f 	.word	0x08011a1f
 80118fc:	080118ad 	.word	0x080118ad
 8011900:	080118ad 	.word	0x080118ad
 8011904:	08011a5f 	.word	0x08011a5f
 8011908:	080118ad 	.word	0x080118ad
 801190c:	08011961 	.word	0x08011961
 8011910:	080118ad 	.word	0x080118ad
 8011914:	080118ad 	.word	0x080118ad
 8011918:	08011a27 	.word	0x08011a27
 801191c:	682b      	ldr	r3, [r5, #0]
 801191e:	1d1a      	adds	r2, r3, #4
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	602a      	str	r2, [r5, #0]
 8011924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801192c:	2301      	movs	r3, #1
 801192e:	e0a3      	b.n	8011a78 <_printf_i+0x1f4>
 8011930:	6820      	ldr	r0, [r4, #0]
 8011932:	6829      	ldr	r1, [r5, #0]
 8011934:	0606      	lsls	r6, r0, #24
 8011936:	f101 0304 	add.w	r3, r1, #4
 801193a:	d50a      	bpl.n	8011952 <_printf_i+0xce>
 801193c:	680e      	ldr	r6, [r1, #0]
 801193e:	602b      	str	r3, [r5, #0]
 8011940:	2e00      	cmp	r6, #0
 8011942:	da03      	bge.n	801194c <_printf_i+0xc8>
 8011944:	232d      	movs	r3, #45	; 0x2d
 8011946:	4276      	negs	r6, r6
 8011948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801194c:	485e      	ldr	r0, [pc, #376]	; (8011ac8 <_printf_i+0x244>)
 801194e:	230a      	movs	r3, #10
 8011950:	e019      	b.n	8011986 <_printf_i+0x102>
 8011952:	680e      	ldr	r6, [r1, #0]
 8011954:	602b      	str	r3, [r5, #0]
 8011956:	f010 0f40 	tst.w	r0, #64	; 0x40
 801195a:	bf18      	it	ne
 801195c:	b236      	sxthne	r6, r6
 801195e:	e7ef      	b.n	8011940 <_printf_i+0xbc>
 8011960:	682b      	ldr	r3, [r5, #0]
 8011962:	6820      	ldr	r0, [r4, #0]
 8011964:	1d19      	adds	r1, r3, #4
 8011966:	6029      	str	r1, [r5, #0]
 8011968:	0601      	lsls	r1, r0, #24
 801196a:	d501      	bpl.n	8011970 <_printf_i+0xec>
 801196c:	681e      	ldr	r6, [r3, #0]
 801196e:	e002      	b.n	8011976 <_printf_i+0xf2>
 8011970:	0646      	lsls	r6, r0, #25
 8011972:	d5fb      	bpl.n	801196c <_printf_i+0xe8>
 8011974:	881e      	ldrh	r6, [r3, #0]
 8011976:	4854      	ldr	r0, [pc, #336]	; (8011ac8 <_printf_i+0x244>)
 8011978:	2f6f      	cmp	r7, #111	; 0x6f
 801197a:	bf0c      	ite	eq
 801197c:	2308      	moveq	r3, #8
 801197e:	230a      	movne	r3, #10
 8011980:	2100      	movs	r1, #0
 8011982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011986:	6865      	ldr	r5, [r4, #4]
 8011988:	60a5      	str	r5, [r4, #8]
 801198a:	2d00      	cmp	r5, #0
 801198c:	bfa2      	ittt	ge
 801198e:	6821      	ldrge	r1, [r4, #0]
 8011990:	f021 0104 	bicge.w	r1, r1, #4
 8011994:	6021      	strge	r1, [r4, #0]
 8011996:	b90e      	cbnz	r6, 801199c <_printf_i+0x118>
 8011998:	2d00      	cmp	r5, #0
 801199a:	d04d      	beq.n	8011a38 <_printf_i+0x1b4>
 801199c:	4615      	mov	r5, r2
 801199e:	fbb6 f1f3 	udiv	r1, r6, r3
 80119a2:	fb03 6711 	mls	r7, r3, r1, r6
 80119a6:	5dc7      	ldrb	r7, [r0, r7]
 80119a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80119ac:	4637      	mov	r7, r6
 80119ae:	42bb      	cmp	r3, r7
 80119b0:	460e      	mov	r6, r1
 80119b2:	d9f4      	bls.n	801199e <_printf_i+0x11a>
 80119b4:	2b08      	cmp	r3, #8
 80119b6:	d10b      	bne.n	80119d0 <_printf_i+0x14c>
 80119b8:	6823      	ldr	r3, [r4, #0]
 80119ba:	07de      	lsls	r6, r3, #31
 80119bc:	d508      	bpl.n	80119d0 <_printf_i+0x14c>
 80119be:	6923      	ldr	r3, [r4, #16]
 80119c0:	6861      	ldr	r1, [r4, #4]
 80119c2:	4299      	cmp	r1, r3
 80119c4:	bfde      	ittt	le
 80119c6:	2330      	movle	r3, #48	; 0x30
 80119c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80119cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80119d0:	1b52      	subs	r2, r2, r5
 80119d2:	6122      	str	r2, [r4, #16]
 80119d4:	f8cd a000 	str.w	sl, [sp]
 80119d8:	464b      	mov	r3, r9
 80119da:	aa03      	add	r2, sp, #12
 80119dc:	4621      	mov	r1, r4
 80119de:	4640      	mov	r0, r8
 80119e0:	f7ff fee2 	bl	80117a8 <_printf_common>
 80119e4:	3001      	adds	r0, #1
 80119e6:	d14c      	bne.n	8011a82 <_printf_i+0x1fe>
 80119e8:	f04f 30ff 	mov.w	r0, #4294967295
 80119ec:	b004      	add	sp, #16
 80119ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119f2:	4835      	ldr	r0, [pc, #212]	; (8011ac8 <_printf_i+0x244>)
 80119f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80119f8:	6829      	ldr	r1, [r5, #0]
 80119fa:	6823      	ldr	r3, [r4, #0]
 80119fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8011a00:	6029      	str	r1, [r5, #0]
 8011a02:	061d      	lsls	r5, r3, #24
 8011a04:	d514      	bpl.n	8011a30 <_printf_i+0x1ac>
 8011a06:	07df      	lsls	r7, r3, #31
 8011a08:	bf44      	itt	mi
 8011a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8011a0e:	6023      	strmi	r3, [r4, #0]
 8011a10:	b91e      	cbnz	r6, 8011a1a <_printf_i+0x196>
 8011a12:	6823      	ldr	r3, [r4, #0]
 8011a14:	f023 0320 	bic.w	r3, r3, #32
 8011a18:	6023      	str	r3, [r4, #0]
 8011a1a:	2310      	movs	r3, #16
 8011a1c:	e7b0      	b.n	8011980 <_printf_i+0xfc>
 8011a1e:	6823      	ldr	r3, [r4, #0]
 8011a20:	f043 0320 	orr.w	r3, r3, #32
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	2378      	movs	r3, #120	; 0x78
 8011a28:	4828      	ldr	r0, [pc, #160]	; (8011acc <_printf_i+0x248>)
 8011a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011a2e:	e7e3      	b.n	80119f8 <_printf_i+0x174>
 8011a30:	0659      	lsls	r1, r3, #25
 8011a32:	bf48      	it	mi
 8011a34:	b2b6      	uxthmi	r6, r6
 8011a36:	e7e6      	b.n	8011a06 <_printf_i+0x182>
 8011a38:	4615      	mov	r5, r2
 8011a3a:	e7bb      	b.n	80119b4 <_printf_i+0x130>
 8011a3c:	682b      	ldr	r3, [r5, #0]
 8011a3e:	6826      	ldr	r6, [r4, #0]
 8011a40:	6961      	ldr	r1, [r4, #20]
 8011a42:	1d18      	adds	r0, r3, #4
 8011a44:	6028      	str	r0, [r5, #0]
 8011a46:	0635      	lsls	r5, r6, #24
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	d501      	bpl.n	8011a50 <_printf_i+0x1cc>
 8011a4c:	6019      	str	r1, [r3, #0]
 8011a4e:	e002      	b.n	8011a56 <_printf_i+0x1d2>
 8011a50:	0670      	lsls	r0, r6, #25
 8011a52:	d5fb      	bpl.n	8011a4c <_printf_i+0x1c8>
 8011a54:	8019      	strh	r1, [r3, #0]
 8011a56:	2300      	movs	r3, #0
 8011a58:	6123      	str	r3, [r4, #16]
 8011a5a:	4615      	mov	r5, r2
 8011a5c:	e7ba      	b.n	80119d4 <_printf_i+0x150>
 8011a5e:	682b      	ldr	r3, [r5, #0]
 8011a60:	1d1a      	adds	r2, r3, #4
 8011a62:	602a      	str	r2, [r5, #0]
 8011a64:	681d      	ldr	r5, [r3, #0]
 8011a66:	6862      	ldr	r2, [r4, #4]
 8011a68:	2100      	movs	r1, #0
 8011a6a:	4628      	mov	r0, r5
 8011a6c:	f7ee fc40 	bl	80002f0 <memchr>
 8011a70:	b108      	cbz	r0, 8011a76 <_printf_i+0x1f2>
 8011a72:	1b40      	subs	r0, r0, r5
 8011a74:	6060      	str	r0, [r4, #4]
 8011a76:	6863      	ldr	r3, [r4, #4]
 8011a78:	6123      	str	r3, [r4, #16]
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a80:	e7a8      	b.n	80119d4 <_printf_i+0x150>
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	462a      	mov	r2, r5
 8011a86:	4649      	mov	r1, r9
 8011a88:	4640      	mov	r0, r8
 8011a8a:	47d0      	blx	sl
 8011a8c:	3001      	adds	r0, #1
 8011a8e:	d0ab      	beq.n	80119e8 <_printf_i+0x164>
 8011a90:	6823      	ldr	r3, [r4, #0]
 8011a92:	079b      	lsls	r3, r3, #30
 8011a94:	d413      	bmi.n	8011abe <_printf_i+0x23a>
 8011a96:	68e0      	ldr	r0, [r4, #12]
 8011a98:	9b03      	ldr	r3, [sp, #12]
 8011a9a:	4298      	cmp	r0, r3
 8011a9c:	bfb8      	it	lt
 8011a9e:	4618      	movlt	r0, r3
 8011aa0:	e7a4      	b.n	80119ec <_printf_i+0x168>
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	4632      	mov	r2, r6
 8011aa6:	4649      	mov	r1, r9
 8011aa8:	4640      	mov	r0, r8
 8011aaa:	47d0      	blx	sl
 8011aac:	3001      	adds	r0, #1
 8011aae:	d09b      	beq.n	80119e8 <_printf_i+0x164>
 8011ab0:	3501      	adds	r5, #1
 8011ab2:	68e3      	ldr	r3, [r4, #12]
 8011ab4:	9903      	ldr	r1, [sp, #12]
 8011ab6:	1a5b      	subs	r3, r3, r1
 8011ab8:	42ab      	cmp	r3, r5
 8011aba:	dcf2      	bgt.n	8011aa2 <_printf_i+0x21e>
 8011abc:	e7eb      	b.n	8011a96 <_printf_i+0x212>
 8011abe:	2500      	movs	r5, #0
 8011ac0:	f104 0619 	add.w	r6, r4, #25
 8011ac4:	e7f5      	b.n	8011ab2 <_printf_i+0x22e>
 8011ac6:	bf00      	nop
 8011ac8:	080122d5 	.word	0x080122d5
 8011acc:	080122e6 	.word	0x080122e6

08011ad0 <__sread>:
 8011ad0:	b510      	push	{r4, lr}
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ad8:	f000 f8ec 	bl	8011cb4 <_read_r>
 8011adc:	2800      	cmp	r0, #0
 8011ade:	bfab      	itete	ge
 8011ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8011ae4:	181b      	addge	r3, r3, r0
 8011ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011aea:	bfac      	ite	ge
 8011aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8011aee:	81a3      	strhlt	r3, [r4, #12]
 8011af0:	bd10      	pop	{r4, pc}

08011af2 <__swrite>:
 8011af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af6:	461f      	mov	r7, r3
 8011af8:	898b      	ldrh	r3, [r1, #12]
 8011afa:	05db      	lsls	r3, r3, #23
 8011afc:	4605      	mov	r5, r0
 8011afe:	460c      	mov	r4, r1
 8011b00:	4616      	mov	r6, r2
 8011b02:	d505      	bpl.n	8011b10 <__swrite+0x1e>
 8011b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b08:	2302      	movs	r3, #2
 8011b0a:	2200      	movs	r2, #0
 8011b0c:	f000 f868 	bl	8011be0 <_lseek_r>
 8011b10:	89a3      	ldrh	r3, [r4, #12]
 8011b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b1a:	81a3      	strh	r3, [r4, #12]
 8011b1c:	4632      	mov	r2, r6
 8011b1e:	463b      	mov	r3, r7
 8011b20:	4628      	mov	r0, r5
 8011b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b26:	f000 b817 	b.w	8011b58 <_write_r>

08011b2a <__sseek>:
 8011b2a:	b510      	push	{r4, lr}
 8011b2c:	460c      	mov	r4, r1
 8011b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b32:	f000 f855 	bl	8011be0 <_lseek_r>
 8011b36:	1c43      	adds	r3, r0, #1
 8011b38:	89a3      	ldrh	r3, [r4, #12]
 8011b3a:	bf15      	itete	ne
 8011b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011b46:	81a3      	strheq	r3, [r4, #12]
 8011b48:	bf18      	it	ne
 8011b4a:	81a3      	strhne	r3, [r4, #12]
 8011b4c:	bd10      	pop	{r4, pc}

08011b4e <__sclose>:
 8011b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b52:	f000 b813 	b.w	8011b7c <_close_r>
	...

08011b58 <_write_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4d07      	ldr	r5, [pc, #28]	; (8011b78 <_write_r+0x20>)
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	4608      	mov	r0, r1
 8011b60:	4611      	mov	r1, r2
 8011b62:	2200      	movs	r2, #0
 8011b64:	602a      	str	r2, [r5, #0]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f7f0 f889 	bl	8001c7e <_write>
 8011b6c:	1c43      	adds	r3, r0, #1
 8011b6e:	d102      	bne.n	8011b76 <_write_r+0x1e>
 8011b70:	682b      	ldr	r3, [r5, #0]
 8011b72:	b103      	cbz	r3, 8011b76 <_write_r+0x1e>
 8011b74:	6023      	str	r3, [r4, #0]
 8011b76:	bd38      	pop	{r3, r4, r5, pc}
 8011b78:	240027e8 	.word	0x240027e8

08011b7c <_close_r>:
 8011b7c:	b538      	push	{r3, r4, r5, lr}
 8011b7e:	4d06      	ldr	r5, [pc, #24]	; (8011b98 <_close_r+0x1c>)
 8011b80:	2300      	movs	r3, #0
 8011b82:	4604      	mov	r4, r0
 8011b84:	4608      	mov	r0, r1
 8011b86:	602b      	str	r3, [r5, #0]
 8011b88:	f7f0 f895 	bl	8001cb6 <_close>
 8011b8c:	1c43      	adds	r3, r0, #1
 8011b8e:	d102      	bne.n	8011b96 <_close_r+0x1a>
 8011b90:	682b      	ldr	r3, [r5, #0]
 8011b92:	b103      	cbz	r3, 8011b96 <_close_r+0x1a>
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	bd38      	pop	{r3, r4, r5, pc}
 8011b98:	240027e8 	.word	0x240027e8

08011b9c <_fstat_r>:
 8011b9c:	b538      	push	{r3, r4, r5, lr}
 8011b9e:	4d07      	ldr	r5, [pc, #28]	; (8011bbc <_fstat_r+0x20>)
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	4608      	mov	r0, r1
 8011ba6:	4611      	mov	r1, r2
 8011ba8:	602b      	str	r3, [r5, #0]
 8011baa:	f7f0 f890 	bl	8001cce <_fstat>
 8011bae:	1c43      	adds	r3, r0, #1
 8011bb0:	d102      	bne.n	8011bb8 <_fstat_r+0x1c>
 8011bb2:	682b      	ldr	r3, [r5, #0]
 8011bb4:	b103      	cbz	r3, 8011bb8 <_fstat_r+0x1c>
 8011bb6:	6023      	str	r3, [r4, #0]
 8011bb8:	bd38      	pop	{r3, r4, r5, pc}
 8011bba:	bf00      	nop
 8011bbc:	240027e8 	.word	0x240027e8

08011bc0 <_isatty_r>:
 8011bc0:	b538      	push	{r3, r4, r5, lr}
 8011bc2:	4d06      	ldr	r5, [pc, #24]	; (8011bdc <_isatty_r+0x1c>)
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	4608      	mov	r0, r1
 8011bca:	602b      	str	r3, [r5, #0]
 8011bcc:	f7f0 f88f 	bl	8001cee <_isatty>
 8011bd0:	1c43      	adds	r3, r0, #1
 8011bd2:	d102      	bne.n	8011bda <_isatty_r+0x1a>
 8011bd4:	682b      	ldr	r3, [r5, #0]
 8011bd6:	b103      	cbz	r3, 8011bda <_isatty_r+0x1a>
 8011bd8:	6023      	str	r3, [r4, #0]
 8011bda:	bd38      	pop	{r3, r4, r5, pc}
 8011bdc:	240027e8 	.word	0x240027e8

08011be0 <_lseek_r>:
 8011be0:	b538      	push	{r3, r4, r5, lr}
 8011be2:	4d07      	ldr	r5, [pc, #28]	; (8011c00 <_lseek_r+0x20>)
 8011be4:	4604      	mov	r4, r0
 8011be6:	4608      	mov	r0, r1
 8011be8:	4611      	mov	r1, r2
 8011bea:	2200      	movs	r2, #0
 8011bec:	602a      	str	r2, [r5, #0]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	f7f0 f888 	bl	8001d04 <_lseek>
 8011bf4:	1c43      	adds	r3, r0, #1
 8011bf6:	d102      	bne.n	8011bfe <_lseek_r+0x1e>
 8011bf8:	682b      	ldr	r3, [r5, #0]
 8011bfa:	b103      	cbz	r3, 8011bfe <_lseek_r+0x1e>
 8011bfc:	6023      	str	r3, [r4, #0]
 8011bfe:	bd38      	pop	{r3, r4, r5, pc}
 8011c00:	240027e8 	.word	0x240027e8

08011c04 <memcpy>:
 8011c04:	440a      	add	r2, r1
 8011c06:	4291      	cmp	r1, r2
 8011c08:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c0c:	d100      	bne.n	8011c10 <memcpy+0xc>
 8011c0e:	4770      	bx	lr
 8011c10:	b510      	push	{r4, lr}
 8011c12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c1a:	4291      	cmp	r1, r2
 8011c1c:	d1f9      	bne.n	8011c12 <memcpy+0xe>
 8011c1e:	bd10      	pop	{r4, pc}

08011c20 <memmove>:
 8011c20:	4288      	cmp	r0, r1
 8011c22:	b510      	push	{r4, lr}
 8011c24:	eb01 0402 	add.w	r4, r1, r2
 8011c28:	d902      	bls.n	8011c30 <memmove+0x10>
 8011c2a:	4284      	cmp	r4, r0
 8011c2c:	4623      	mov	r3, r4
 8011c2e:	d807      	bhi.n	8011c40 <memmove+0x20>
 8011c30:	1e43      	subs	r3, r0, #1
 8011c32:	42a1      	cmp	r1, r4
 8011c34:	d008      	beq.n	8011c48 <memmove+0x28>
 8011c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c3e:	e7f8      	b.n	8011c32 <memmove+0x12>
 8011c40:	4402      	add	r2, r0
 8011c42:	4601      	mov	r1, r0
 8011c44:	428a      	cmp	r2, r1
 8011c46:	d100      	bne.n	8011c4a <memmove+0x2a>
 8011c48:	bd10      	pop	{r4, pc}
 8011c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c52:	e7f7      	b.n	8011c44 <memmove+0x24>

08011c54 <_realloc_r>:
 8011c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c58:	4680      	mov	r8, r0
 8011c5a:	4614      	mov	r4, r2
 8011c5c:	460e      	mov	r6, r1
 8011c5e:	b921      	cbnz	r1, 8011c6a <_realloc_r+0x16>
 8011c60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c64:	4611      	mov	r1, r2
 8011c66:	f7fe becb 	b.w	8010a00 <_malloc_r>
 8011c6a:	b92a      	cbnz	r2, 8011c78 <_realloc_r+0x24>
 8011c6c:	f7fe fe5c 	bl	8010928 <_free_r>
 8011c70:	4625      	mov	r5, r4
 8011c72:	4628      	mov	r0, r5
 8011c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c78:	f000 f82e 	bl	8011cd8 <_malloc_usable_size_r>
 8011c7c:	4284      	cmp	r4, r0
 8011c7e:	4607      	mov	r7, r0
 8011c80:	d802      	bhi.n	8011c88 <_realloc_r+0x34>
 8011c82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c86:	d812      	bhi.n	8011cae <_realloc_r+0x5a>
 8011c88:	4621      	mov	r1, r4
 8011c8a:	4640      	mov	r0, r8
 8011c8c:	f7fe feb8 	bl	8010a00 <_malloc_r>
 8011c90:	4605      	mov	r5, r0
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d0ed      	beq.n	8011c72 <_realloc_r+0x1e>
 8011c96:	42bc      	cmp	r4, r7
 8011c98:	4622      	mov	r2, r4
 8011c9a:	4631      	mov	r1, r6
 8011c9c:	bf28      	it	cs
 8011c9e:	463a      	movcs	r2, r7
 8011ca0:	f7ff ffb0 	bl	8011c04 <memcpy>
 8011ca4:	4631      	mov	r1, r6
 8011ca6:	4640      	mov	r0, r8
 8011ca8:	f7fe fe3e 	bl	8010928 <_free_r>
 8011cac:	e7e1      	b.n	8011c72 <_realloc_r+0x1e>
 8011cae:	4635      	mov	r5, r6
 8011cb0:	e7df      	b.n	8011c72 <_realloc_r+0x1e>
	...

08011cb4 <_read_r>:
 8011cb4:	b538      	push	{r3, r4, r5, lr}
 8011cb6:	4d07      	ldr	r5, [pc, #28]	; (8011cd4 <_read_r+0x20>)
 8011cb8:	4604      	mov	r4, r0
 8011cba:	4608      	mov	r0, r1
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	602a      	str	r2, [r5, #0]
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	f7ef ffbe 	bl	8001c44 <_read>
 8011cc8:	1c43      	adds	r3, r0, #1
 8011cca:	d102      	bne.n	8011cd2 <_read_r+0x1e>
 8011ccc:	682b      	ldr	r3, [r5, #0]
 8011cce:	b103      	cbz	r3, 8011cd2 <_read_r+0x1e>
 8011cd0:	6023      	str	r3, [r4, #0]
 8011cd2:	bd38      	pop	{r3, r4, r5, pc}
 8011cd4:	240027e8 	.word	0x240027e8

08011cd8 <_malloc_usable_size_r>:
 8011cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cdc:	1f18      	subs	r0, r3, #4
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	bfbc      	itt	lt
 8011ce2:	580b      	ldrlt	r3, [r1, r0]
 8011ce4:	18c0      	addlt	r0, r0, r3
 8011ce6:	4770      	bx	lr

08011ce8 <_init>:
 8011ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cea:	bf00      	nop
 8011cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cee:	bc08      	pop	{r3}
 8011cf0:	469e      	mov	lr, r3
 8011cf2:	4770      	bx	lr

08011cf4 <_fini>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	bf00      	nop
 8011cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cfa:	bc08      	pop	{r3}
 8011cfc:	469e      	mov	lr, r3
 8011cfe:	4770      	bx	lr
