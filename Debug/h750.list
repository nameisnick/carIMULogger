
h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001394c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08013bec  08013bec  00023bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080141e4  080141e4  000241e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080141ec  080141ec  000241ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080141f0  080141f0  000241f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080141f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002864  24000078  08014268  00030078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240028dc  08014268  000328dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002691a  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004830  00000000  00000000  000569bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c98  00000000  00000000  0005b1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001ac0  00000000  00000000  0005ce88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003dc0a  00000000  00000000  0005e948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a93d  00000000  00000000  0009c552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017370f  00000000  00000000  000c6e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023a59e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000081a0  00000000  00000000  0023a5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013bd4 	.word	0x08013bd4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08013bd4 	.word	0x08013bd4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <createCQueue>:
 *      Author: IoT02
 */

#include "cQueue.h"

QueueType* createCQueue(){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  QueueType* cQ;
  cQ = (QueueType*)malloc(sizeof(QueueType));
 800068a:	f44f 70f2 	mov.w	r0, #484	; 0x1e4
 800068e:	f012 f8b1 	bl	80127f4 <malloc>
 8000692:	4603      	mov	r3, r0
 8000694:	607b      	str	r3, [r7, #4]
  cQ->front = 0;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2200      	movs	r2, #0
 800069a:	f883 21e0 	strb.w	r2, [r3, #480]	; 0x1e0
  cQ->rear = 0;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2200      	movs	r2, #0
 80006a2:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
}
 80006a6:	bf00      	nop
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <isCQueueFull>:
  }else{
    return 0;
  }
}
int isCQueueFull(QueueType* cQ)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  if(((cQ->rear + 1)%CQUEUE_SIZE) == cQ -> front){
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 80006be:	1c59      	adds	r1, r3, #1
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <isCQueueFull+0x44>)
 80006c2:	fb83 2301 	smull	r2, r3, r3, r1
 80006c6:	10da      	asrs	r2, r3, #3
 80006c8:	17cb      	asrs	r3, r1, #31
 80006ca:	1ad2      	subs	r2, r2, r3
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	1aca      	subs	r2, r1, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f893 31e0 	ldrb.w	r3, [r3, #480]	; 0x1e0
 80006dc:	429a      	cmp	r2, r3
 80006de:	d101      	bne.n	80006e4 <isCQueueFull+0x34>
    return 1;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e000      	b.n	80006e6 <isCQueueFull+0x36>
  }else{
    return 0;
 80006e4:	2300      	movs	r3, #0
  }
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	66666667 	.word	0x66666667

080006f8 <enCQueue>:
void enCQueue(QueueType* cQ,element item )
{
 80006f8:	b084      	sub	sp, #16
 80006fa:	b4b0      	push	{r4, r5, r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
 8000702:	f107 001c 	add.w	r0, r7, #28
 8000706:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  cQ->rear = (cQ->rear + 1) % CQUEUE_SIZE;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000710:	1c5a      	adds	r2, r3, #1
 8000712:	4b14      	ldr	r3, [pc, #80]	; (8000764 <enCQueue+0x6c>)
 8000714:	fb83 1302 	smull	r1, r3, r3, r2
 8000718:	10d9      	asrs	r1, r3, #3
 800071a:	17d3      	asrs	r3, r2, #31
 800071c:	1ac9      	subs	r1, r1, r3
 800071e:	460b      	mov	r3, r1
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	440b      	add	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	1ad1      	subs	r1, r2, r3
 8000728:	b2ca      	uxtb	r2, r1
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	f883 21e1 	strb.w	r2, [r3, #481]	; 0x1e1
  cQ->cQueue[cQ->rear] = item;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f893 31e1 	ldrb.w	r3, [r3, #481]	; 0x1e1
 8000736:	4619      	mov	r1, r3
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	440b      	add	r3, r1
 8000740:	00db      	lsls	r3, r3, #3
 8000742:	4413      	add	r3, r2
 8000744:	461d      	mov	r5, r3
 8000746:	f107 041c 	add.w	r4, r7, #28
 800074a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800074c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800074e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000752:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	bcb0      	pop	{r4, r5, r7}
 800075e:	b004      	add	sp, #16
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	66666667 	.word	0x66666667

08000768 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000770:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000774:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <MX_DMA_Init+0x4c>)
 8000780:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	200b      	movs	r0, #11
 8000792:	f001 ff30 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000796:	200b      	movs	r0, #11
 8000798:	f001 ff47 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	200c      	movs	r0, #12
 80007a2:	f001 ff28 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007a6:	200c      	movs	r0, #12
 80007a8:	f001 ff3f 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	58024400 	.word	0x58024400

080007b8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	4b54      	ldr	r3, [pc, #336]	; (8000920 <MX_GPIO_Init+0x168>)
 80007d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d4:	4a52      	ldr	r2, [pc, #328]	; (8000920 <MX_GPIO_Init+0x168>)
 80007d6:	f043 0308 	orr.w	r3, r3, #8
 80007da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007de:	4b50      	ldr	r3, [pc, #320]	; (8000920 <MX_GPIO_Init+0x168>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	4b4c      	ldr	r3, [pc, #304]	; (8000920 <MX_GPIO_Init+0x168>)
 80007ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f2:	4a4b      	ldr	r2, [pc, #300]	; (8000920 <MX_GPIO_Init+0x168>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007fc:	4b48      	ldr	r3, [pc, #288]	; (8000920 <MX_GPIO_Init+0x168>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800080a:	4b45      	ldr	r3, [pc, #276]	; (8000920 <MX_GPIO_Init+0x168>)
 800080c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000810:	4a43      	ldr	r2, [pc, #268]	; (8000920 <MX_GPIO_Init+0x168>)
 8000812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800081a:	4b41      	ldr	r3, [pc, #260]	; (8000920 <MX_GPIO_Init+0x168>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b3d      	ldr	r3, [pc, #244]	; (8000920 <MX_GPIO_Init+0x168>)
 800082a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082e:	4a3c      	ldr	r2, [pc, #240]	; (8000920 <MX_GPIO_Init+0x168>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000838:	4b39      	ldr	r3, [pc, #228]	; (8000920 <MX_GPIO_Init+0x168>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000846:	4b36      	ldr	r3, [pc, #216]	; (8000920 <MX_GPIO_Init+0x168>)
 8000848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084c:	4a34      	ldr	r2, [pc, #208]	; (8000920 <MX_GPIO_Init+0x168>)
 800084e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000852:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <MX_GPIO_Init+0x168>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	482e      	ldr	r0, [pc, #184]	; (8000924 <MX_GPIO_Init+0x16c>)
 800086c:	f004 face 	bl	8004e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000876:	482c      	ldr	r0, [pc, #176]	; (8000928 <MX_GPIO_Init+0x170>)
 8000878:	f004 fac8 	bl	8004e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800087c:	2320      	movs	r3, #32
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0314 	add.w	r3, r7, #20
 800088c:	4619      	mov	r1, r3
 800088e:	4826      	ldr	r0, [pc, #152]	; (8000928 <MX_GPIO_Init+0x170>)
 8000890:	f004 f90c 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM_INT_Pin;
 8000894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ICM_INT_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 0314 	add.w	r3, r7, #20
 80008a8:	4619      	mov	r1, r3
 80008aa:	4820      	ldr	r0, [pc, #128]	; (800092c <MX_GPIO_Init+0x174>)
 80008ac:	f004 f8fe 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 80008b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <MX_GPIO_Init+0x16c>)
 80008ca:	f004 f8ef 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 80008ce:	2310      	movs	r3, #16
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4812      	ldr	r0, [pc, #72]	; (800092c <MX_GPIO_Init+0x174>)
 80008e4:	f004 f8e2 	bl	8004aac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <MX_GPIO_Init+0x170>)
 8000902:	f004 f8d3 	bl	8004aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	200a      	movs	r0, #10
 800090c:	f001 fe73 	bl	80025f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000910:	200a      	movs	r0, #10
 8000912:	f001 fe8a 	bl	800262a <HAL_NVIC_EnableIRQ>

}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	; 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	58024400 	.word	0x58024400
 8000924:	58022000 	.word	0x58022000
 8000928:	58020c00 	.word	0x58020c00
 800092c:	58021c00 	.word	0x58021c00

08000930 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000934:	bf00      	nop
 8000936:	f000 f915 	bl	8000b64 <icm20948_who_am_i>
 800093a:	4603      	mov	r3, r0
 800093c:	f083 0301 	eor.w	r3, r3, #1
 8000940:	b2db      	uxtb	r3, r3
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1f7      	bne.n	8000936 <icm20948_init+0x6>

	icm20948_device_reset();
 8000946:	f000 f932 	bl	8000bae <icm20948_device_reset>
	icm20948_wakeup();
 800094a:	f000 f947 	bl	8000bdc <icm20948_wakeup>

	icm20948_clock_source(1);
 800094e:	2001      	movs	r0, #1
 8000950:	f000 f9bf 	bl	8000cd2 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000954:	f000 f9d6 	bl	8000d04 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 8000958:	f000 f95a 	bl	8000c10 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 800095c:	2000      	movs	r0, #0
 800095e:	f000 f9da 	bl	8000d16 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000962:	2000      	movs	r0, #0
 8000964:	f000 f9f4 	bl	8000d50 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0x03);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 fa0e 	bl	8000d8a <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0x03);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 fa29 	bl	8000dc6 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000974:	f000 fa56 	bl	8000e24 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000978:	f000 fad6 	bl	8000f28 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 fbc9 	bl	8001114 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000982:	2003      	movs	r0, #3
 8000984:	f000 fc10 	bl	80011a8 <icm20948_accel_full_scale_select>

	icm20948_data_ready_int_enable(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f000 fa0d 	bl	8000da8 <icm20948_data_ready_int_enable>


}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}

08000992 <ak09916_init>:

void ak09916_init()
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000996:	f000 f952 	bl	8000c3e <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 800099a:	f000 f967 	bl	8000c6c <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 800099e:	2007      	movs	r0, #7
 80009a0:	f000 f97e 	bl	8000ca0 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 80009a4:	bf00      	nop
 80009a6:	f000 f8f0 	bl	8000b8a <ak09916_who_am_i>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f083 0301 	eor.w	r3, r3, #1
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d1f7      	bne.n	80009a6 <ak09916_init+0x14>

	ak09916_soft_reset();
 80009b6:	f000 f906 	bl	8000bc6 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 80009ba:	2008      	movs	r0, #8
 80009bc:	f000 fa21 	bl	8000e02 <ak09916_operation_mode_setting>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80009cc:	2206      	movs	r2, #6
 80009ce:	2133      	movs	r1, #51	; 0x33
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 fcb1 	bl	8001338 <read_multiple_icm20948_reg>
 80009d6:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b21a      	sxth	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b21b      	sxth	r3, r3
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3302      	adds	r3, #2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	021b      	lsls	r3, r3, #8
 80009f8:	b21a      	sxth	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	3303      	adds	r3, #3
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21a      	sxth	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	b21a      	sxth	r2, r3
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3305      	adds	r3, #5
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	b21a      	sxth	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	809a      	strh	r2, [r3, #4]
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000a34:	2206      	movs	r2, #6
 8000a36:	212d      	movs	r1, #45	; 0x2d
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fc7d 	bl	8001338 <read_multiple_icm20948_reg>
 8000a3e:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	021b      	lsls	r3, r3, #8
 8000a46:	b21a      	sxth	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	3303      	adds	r3, #3
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);// + accel_scale_factor;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3304      	adds	r3, #4
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3305      	adds	r3, #5
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	809a      	strh	r2, [r3, #4]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <icm20948_accel_gyro_read>:

void icm20948_accel_gyro_read (IMU* data)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint8_t *temp = read_multiple_icm20948_reg (ub_0, B0_ACCEL_XOUT_H, 14);
 8000a9c:	220e      	movs	r2, #14
 8000a9e:	212d      	movs	r1, #45	; 0x2d
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fc49 	bl	8001338 <read_multiple_icm20948_reg>
 8000aa6:	60f8      	str	r0, [r7, #12]

  data->accel_x = (int16_t) (temp[0] << 8 | temp[1]);
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	021b      	lsls	r3, r3, #8
 8000aae:	b21a      	sxth	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	b21b      	sxth	r3, r3
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	809a      	strh	r2, [r3, #4]
  data->accel_y = (int16_t) (temp[2] << 8 | temp[3]);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3303      	adds	r3, #3
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	b21b      	sxth	r3, r3
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	b21a      	sxth	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	80da      	strh	r2, [r3, #6]
  data->accel_z = (int16_t) (temp[4] << 8 | temp[5]);	// + accel_scale_factor;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	3304      	adds	r3, #4
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	021b      	lsls	r3, r3, #8
 8000ae2:	b21a      	sxth	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3305      	adds	r3, #5
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b21b      	sxth	r3, r3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	b21a      	sxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	811a      	strh	r2, [r3, #8]
  data->temp    = (int16_t) (temp[6] << 8 | temp[7]);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3306      	adds	r3, #6
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	b21a      	sxth	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3307      	adds	r3, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21a      	sxth	r2, r3
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	82da      	strh	r2, [r3, #22]
  data->gyro_x  = (int16_t) (temp[8] << 8 | temp[9]);
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3308      	adds	r3, #8
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3309      	adds	r3, #9
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	4313      	orrs	r3, r2
 8000b22:	b21a      	sxth	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	815a      	strh	r2, [r3, #10]
  data->gyro_y  = (int16_t) (temp[10] << 8 | temp[11]);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	330a      	adds	r3, #10
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	021b      	lsls	r3, r3, #8
 8000b30:	b21a      	sxth	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	330b      	adds	r3, #11
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	b21a      	sxth	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	819a      	strh	r2, [r3, #12]
  data->gyro_z  = (int16_t) (temp[12] << 8 | temp[13]);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	330c      	adds	r3, #12
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	021b      	lsls	r3, r3, #8
 8000b4a:	b21a      	sxth	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	330d      	adds	r3, #13
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	81da      	strh	r2, [r3, #14]
}
 8000b5c:	bf00      	nop
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 fb93 	bl	8001298 <read_single_icm20948_reg>
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	2bea      	cmp	r3, #234	; 0xea
 8000b7a:	d101      	bne.n	8000b80 <icm20948_who_am_i+0x1c>
		return true;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e000      	b.n	8000b82 <icm20948_who_am_i+0x1e>
	else
		return false;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fc2d 	bl	80013f0 <read_single_ak09916_reg>
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	2b09      	cmp	r3, #9
 8000b9e:	d101      	bne.n	8000ba4 <ak09916_who_am_i+0x1a>
		return true;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <ak09916_who_am_i+0x1c>
	else
		return false;
 8000ba4:	2300      	movs	r3, #0
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000bb2:	22c1      	movs	r2, #193	; 0xc1
 8000bb4:	2106      	movs	r1, #6
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 fb9a 	bl	80012f0 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f001 fc0f 	bl	80023e0 <HAL_Delay>
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2032      	movs	r0, #50	; 0x32
 8000bce:	f000 fc30 	bl	8001432 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000bd2:	2064      	movs	r0, #100	; 0x64
 8000bd4:	f001 fc04 	bl	80023e0 <HAL_Delay>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000be2:	2106      	movs	r1, #6
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 fb57 	bl	8001298 <read_single_icm20948_reg>
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bf4:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	2106      	movs	r1, #6
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fb77 	bl	80012f0 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f001 fbec 	bl	80023e0 <HAL_Delay>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000c16:	2103      	movs	r1, #3
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f000 fb3d 	bl	8001298 <read_single_icm20948_reg>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	2103      	movs	r1, #3
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 fb5d 	bl	80012f0 <write_single_icm20948_reg>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000c44:	2103      	movs	r1, #3
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fb26 	bl	8001298 <read_single_icm20948_reg>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	2103      	movs	r1, #3
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fb46 	bl	80012f0 <write_single_icm20948_reg>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000c72:	2103      	movs	r1, #3
 8000c74:	2000      	movs	r0, #0
 8000c76:	f000 fb0f 	bl	8001298 <read_single_icm20948_reg>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	f043 0320 	orr.w	r3, r3, #32
 8000c84:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	f000 fb2f 	bl	80012f0 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f001 fba4 	bl	80023e0 <HAL_Delay>
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000caa:	2101      	movs	r1, #1
 8000cac:	2030      	movs	r0, #48	; 0x30
 8000cae:	f000 faf3 	bl	8001298 <read_single_icm20948_reg>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	2030      	movs	r0, #48	; 0x30
 8000cc6:	f000 fb13 	bl	80012f0 <write_single_icm20948_reg>
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b084      	sub	sp, #16
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000cdc:	2106      	movs	r1, #6
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 fada 	bl	8001298 <read_single_icm20948_reg>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	2106      	movs	r1, #6
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 fafa 	bl	80012f0 <write_single_icm20948_reg>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2109      	movs	r1, #9
 8000d0c:	2020      	movs	r0, #32
 8000d0e:	f000 faef 	bl	80012f0 <write_single_icm20948_reg>
}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b084      	sub	sp, #16
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000d20:	2101      	movs	r1, #1
 8000d22:	2020      	movs	r0, #32
 8000d24:	f000 fab8 	bl	8001298 <read_single_icm20948_reg>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	b25a      	sxtb	r2, r3
 8000d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2101      	movs	r1, #1
 8000d42:	2020      	movs	r0, #32
 8000d44:	f000 fad4 	bl	80012f0 <write_single_icm20948_reg>
}
 8000d48:	bf00      	nop
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000d5a:	2114      	movs	r1, #20
 8000d5c:	2020      	movs	r0, #32
 8000d5e:	f000 fa9b 	bl	8001298 <read_single_icm20948_reg>
 8000d62:	4603      	mov	r3, r0
 8000d64:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	b25a      	sxtb	r2, r3
 8000d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b25b      	sxtb	r3, r3
 8000d74:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2020      	movs	r0, #32
 8000d7e:	f000 fab7 	bl	80012f0 <write_single_icm20948_reg>
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000d94:	79fb      	ldrb	r3, [r7, #7]
 8000d96:	461a      	mov	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2020      	movs	r0, #32
 8000d9c:	f000 faa8 	bl	80012f0 <write_single_icm20948_reg>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <icm20948_data_ready_int_enable>:

void icm20948_data_ready_int_enable(uint8_t divider)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  write_single_icm20948_reg(ub_0,B0_INT_ENABLE_1 , divider);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	461a      	mov	r2, r3
 8000db6:	2111      	movs	r1, #17
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fa99 	bl	80012f0 <write_single_icm20948_reg>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b084      	sub	sp, #16
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	0a1b      	lsrs	r3, r3, #8
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000dd8:	88fb      	ldrh	r3, [r7, #6]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
 8000de4:	461a      	mov	r2, r3
 8000de6:	2110      	movs	r1, #16
 8000de8:	2020      	movs	r0, #32
 8000dea:	f000 fa81 	bl	80012f0 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000dee:	7bbb      	ldrb	r3, [r7, #14]
 8000df0:	461a      	mov	r2, r3
 8000df2:	2111      	movs	r1, #17
 8000df4:	2020      	movs	r0, #32
 8000df6:	f000 fa7b 	bl	80012f0 <write_single_icm20948_reg>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2031      	movs	r0, #49	; 0x31
 8000e12:	f000 fb0e 	bl	8001432 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000e16:	2064      	movs	r0, #100	; 0x64
 8000e18:	f001 fae2 	bl	80023e0 <HAL_Delay>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	80bb      	strh	r3, [r7, #4]

	for(int i = 0; i < 100; i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
 8000e42:	e016      	b.n	8000e72 <icm20948_gyro_calibration+0x4e>
	{
		icm20948_gyro_read(&temp);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fdbb 	bl	80009c4 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000e54:	4413      	add	r3, r2
 8000e56:	60bb      	str	r3, [r7, #8]
		gyro_bias[1] += temp.y;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000e5e:	4413      	add	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]
		gyro_bias[2] += temp.z;
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000e68:	4413      	add	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 100; i++)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	61fb      	str	r3, [r7, #28]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	2b63      	cmp	r3, #99	; 0x63
 8000e76:	dde5      	ble.n	8000e44 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4a2a      	ldr	r2, [pc, #168]	; (8000f24 <icm20948_gyro_calibration+0x100>)
 8000e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e80:	1152      	asrs	r2, r2, #5
 8000e82:	17db      	asrs	r3, r3, #31
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	60bb      	str	r3, [r7, #8]
	gyro_bias[1] /= 100;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4a26      	ldr	r2, [pc, #152]	; (8000f24 <icm20948_gyro_calibration+0x100>)
 8000e8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e90:	1152      	asrs	r2, r2, #5
 8000e92:	17db      	asrs	r3, r3, #31
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	60fb      	str	r3, [r7, #12]
	gyro_bias[2] /= 100;
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4a22      	ldr	r2, [pc, #136]	; (8000f24 <icm20948_gyro_calibration+0x100>)
 8000e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea0:	1152      	asrs	r2, r2, #5
 8000ea2:	17db      	asrs	r3, r3, #31
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	613b      	str	r3, [r7, #16]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	425b      	negs	r3, r3
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da00      	bge.n	8000eb2 <icm20948_gyro_calibration+0x8e>
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	109b      	asrs	r3, r3, #2
 8000eb4:	121b      	asrs	r3, r3, #8
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	703b      	strb	r3, [r7, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <icm20948_gyro_calibration+0xa0>
 8000ec2:	3303      	adds	r3, #3
 8000ec4:	109b      	asrs	r3, r3, #2
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	707b      	strb	r3, [r7, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	425b      	negs	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da00      	bge.n	8000ed4 <icm20948_gyro_calibration+0xb0>
 8000ed2:	3303      	adds	r3, #3
 8000ed4:	109b      	asrs	r3, r3, #2
 8000ed6:	121b      	asrs	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	70bb      	strb	r3, [r7, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	425b      	negs	r3, r3
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	da00      	bge.n	8000ee6 <icm20948_gyro_calibration+0xc2>
 8000ee4:	3303      	adds	r3, #3
 8000ee6:	109b      	asrs	r3, r3, #2
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	70fb      	strb	r3, [r7, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	da00      	bge.n	8000ef6 <icm20948_gyro_calibration+0xd2>
 8000ef4:	3303      	adds	r3, #3
 8000ef6:	109b      	asrs	r3, r3, #2
 8000ef8:	121b      	asrs	r3, r3, #8
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	713b      	strb	r3, [r7, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	425b      	negs	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da00      	bge.n	8000f08 <icm20948_gyro_calibration+0xe4>
 8000f06:	3303      	adds	r3, #3
 8000f08:	109b      	asrs	r3, r3, #2
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	717b      	strb	r3, [r7, #5]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8000f0e:	463a      	mov	r2, r7
 8000f10:	2306      	movs	r3, #6
 8000f12:	2103      	movs	r1, #3
 8000f14:	2020      	movs	r0, #32
 8000f16:	f000 fa3f 	bl	8001398 <write_multiple_icm20948_reg>
}
 8000f1a:	bf00      	nop
 8000f1c:	3720      	adds	r7, #32
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	51eb851f 	.word	0x51eb851f

08000f28 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	; 0x40
 8000f2c:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f52:	e016      	b.n	8000f82 <icm20948_accel_calibration+0x5a>
	{
		icm20948_accel_read(&temp);
 8000f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd67 	bl	8000a2c <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000f64:	4413      	add	r3, r2
 8000f66:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000f6e:	4413      	add	r3, r2
 8000f70:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000f78:	4413      	add	r3, r2
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8000f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f84:	2b63      	cmp	r3, #99	; 0x63
 8000f86:	dde5      	ble.n	8000f54 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	4a60      	ldr	r2, [pc, #384]	; (800110c <icm20948_accel_calibration+0x1e4>)
 8000f8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f90:	1152      	asrs	r2, r2, #5
 8000f92:	17db      	asrs	r3, r3, #31
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8000f98:	6a3b      	ldr	r3, [r7, #32]
 8000f9a:	4a5c      	ldr	r2, [pc, #368]	; (800110c <icm20948_accel_calibration+0x1e4>)
 8000f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000fa0:	1152      	asrs	r2, r2, #5
 8000fa2:	17db      	asrs	r3, r3, #31
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	4a58      	ldr	r2, [pc, #352]	; (800110c <icm20948_accel_calibration+0x1e4>)
 8000fac:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb0:	1152      	asrs	r2, r2, #5
 8000fb2:	17db      	asrs	r3, r3, #31
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8000fb8:	4a55      	ldr	r2, [pc, #340]	; (8001110 <icm20948_accel_calibration+0x1e8>)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	8019      	strh	r1, [r3, #0]
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	0c12      	lsrs	r2, r2, #16
 8000fc6:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8000fc8:	2202      	movs	r2, #2
 8000fca:	2114      	movs	r1, #20
 8000fcc:	2010      	movs	r0, #16
 8000fce:	f000 f9b3 	bl	8001338 <read_multiple_icm20948_reg>
 8000fd2:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8000fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	021b      	lsls	r3, r3, #8
 8000fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fdc:	3201      	adds	r2, #1
 8000fde:	7812      	ldrb	r2, [r2, #0]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8000fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	2117      	movs	r1, #23
 8000ff6:	2010      	movs	r0, #16
 8000ff8:	f000 f99e 	bl	8001338 <read_multiple_icm20948_reg>
 8000ffc:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8000ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001006:	3201      	adds	r2, #1
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	3301      	adds	r3, #1
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 800101c:	2202      	movs	r2, #2
 800101e:	211a      	movs	r1, #26
 8001020:	2010      	movs	r0, #16
 8001022:	f000 f989 	bl	8001338 <read_multiple_icm20948_reg>
 8001026:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8001028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001030:	3201      	adds	r2, #1
 8001032:	7812      	ldrb	r2, [r2, #0]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 8001038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800103a:	3301      	adds	r3, #1
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b00      	cmp	r3, #0
 800104c:	da00      	bge.n	8001050 <icm20948_accel_calibration+0x128>
 800104e:	3307      	adds	r3, #7
 8001050:	10db      	asrs	r3, r3, #3
 8001052:	425b      	negs	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	2b00      	cmp	r3, #0
 800105e:	da00      	bge.n	8001062 <icm20948_accel_calibration+0x13a>
 8001060:	3307      	adds	r3, #7
 8001062:	10db      	asrs	r3, r3, #3
 8001064:	425b      	negs	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	2b00      	cmp	r3, #0
 8001070:	da00      	bge.n	8001074 <icm20948_accel_calibration+0x14c>
 8001072:	3307      	adds	r3, #7
 8001074:	10db      	asrs	r3, r3, #3
 8001076:	425b      	negs	r3, r3
 8001078:	4413      	add	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	121b      	asrs	r3, r3, #8
 8001080:	b2db      	uxtb	r3, r3
 8001082:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f023 0301 	bic.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8001090:	7a7a      	ldrb	r2, [r7, #9]
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	4313      	orrs	r3, r2
 8001096:	b2db      	uxtb	r3, r3
 8001098:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	121b      	asrs	r3, r3, #8
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80010ae:	7afa      	ldrb	r2, [r7, #11]
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	121b      	asrs	r3, r3, #8
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	f023 0301 	bic.w	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80010cc:	7b7a      	ldrb	r2, [r7, #13]
 80010ce:	79bb      	ldrb	r3, [r7, #6]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80010d6:	f107 0208 	add.w	r2, r7, #8
 80010da:	2302      	movs	r3, #2
 80010dc:	2114      	movs	r1, #20
 80010de:	2010      	movs	r0, #16
 80010e0:	f000 f95a 	bl	8001398 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	1c9a      	adds	r2, r3, #2
 80010ea:	2302      	movs	r3, #2
 80010ec:	2117      	movs	r1, #23
 80010ee:	2010      	movs	r0, #16
 80010f0:	f000 f952 	bl	8001398 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80010f4:	f107 0308 	add.w	r3, r7, #8
 80010f8:	1d1a      	adds	r2, r3, #4
 80010fa:	2302      	movs	r3, #2
 80010fc:	211a      	movs	r1, #26
 80010fe:	2010      	movs	r0, #16
 8001100:	f000 f94a 	bl	8001398 <write_multiple_icm20948_reg>
}
 8001104:	bf00      	nop
 8001106:	3740      	adds	r7, #64	; 0x40
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	51eb851f 	.word	0x51eb851f
 8001110:	08013bec 	.word	0x08013bec

08001114 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800111e:	2101      	movs	r1, #1
 8001120:	2020      	movs	r0, #32
 8001122:	f000 f8b9 	bl	8001298 <read_single_icm20948_reg>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d827      	bhi.n	8001180 <icm20948_gyro_full_scale_select+0x6c>
 8001130:	a201      	add	r2, pc, #4	; (adr r2, 8001138 <icm20948_gyro_full_scale_select+0x24>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001149 	.word	0x08001149
 800113c:	08001151 	.word	0x08001151
 8001140:	08001161 	.word	0x08001161
 8001144:	08001171 	.word	0x08001171
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <icm20948_gyro_full_scale_select+0x80>)
 800114a:	4a13      	ldr	r2, [pc, #76]	; (8001198 <icm20948_gyro_full_scale_select+0x84>)
 800114c:	601a      	str	r2, [r3, #0]
			break;
 800114e:	e017      	b.n	8001180 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f043 0302 	orr.w	r3, r3, #2
 8001156:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <icm20948_gyro_full_scale_select+0x80>)
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <icm20948_gyro_full_scale_select+0x88>)
 800115c:	601a      	str	r2, [r3, #0]
			break;
 800115e:	e00f      	b.n	8001180 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <icm20948_gyro_full_scale_select+0x80>)
 800116a:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <icm20948_gyro_full_scale_select+0x8c>)
 800116c:	601a      	str	r2, [r3, #0]
			break;
 800116e:	e007      	b.n	8001180 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f043 0306 	orr.w	r3, r3, #6
 8001176:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <icm20948_gyro_full_scale_select+0x80>)
 800117a:	4a0a      	ldr	r2, [pc, #40]	; (80011a4 <icm20948_gyro_full_scale_select+0x90>)
 800117c:	601a      	str	r2, [r3, #0]
			break;
 800117e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	461a      	mov	r2, r3
 8001184:	2101      	movs	r1, #1
 8001186:	2020      	movs	r0, #32
 8001188:	f000 f8b2 	bl	80012f0 <write_single_icm20948_reg>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	24000094 	.word	0x24000094
 8001198:	43030000 	.word	0x43030000
 800119c:	42830000 	.word	0x42830000
 80011a0:	42033333 	.word	0x42033333
 80011a4:	41833333 	.word	0x41833333

080011a8 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80011b2:	2114      	movs	r1, #20
 80011b4:	2020      	movs	r0, #32
 80011b6:	f000 f86f 	bl	8001298 <read_single_icm20948_reg>
 80011ba:	4603      	mov	r3, r0
 80011bc:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	d82b      	bhi.n	800121c <icm20948_accel_full_scale_select+0x74>
 80011c4:	a201      	add	r2, pc, #4	; (adr r2, 80011cc <icm20948_accel_full_scale_select+0x24>)
 80011c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ca:	bf00      	nop
 80011cc:	080011dd 	.word	0x080011dd
 80011d0:	080011e7 	.word	0x080011e7
 80011d4:	080011f9 	.word	0x080011f9
 80011d8:	0800120b 	.word	0x0800120b
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <icm20948_accel_full_scale_select+0x88>)
 80011de:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 80011e2:	601a      	str	r2, [r3, #0]
			break;
 80011e4:	e01a      	b.n	800121c <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <icm20948_accel_full_scale_select+0x88>)
 80011f0:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 80011f4:	601a      	str	r2, [r3, #0]
			break;
 80011f6:	e011      	b.n	800121c <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <icm20948_accel_full_scale_select+0x88>)
 8001202:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001206:	601a      	str	r2, [r3, #0]
			break;
 8001208:	e008      	b.n	800121c <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	f043 0306 	orr.w	r3, r3, #6
 8001210:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <icm20948_accel_full_scale_select+0x88>)
 8001214:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001218:	601a      	str	r2, [r3, #0]
			break;
 800121a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800121c:	7bfb      	ldrb	r3, [r7, #15]
 800121e:	461a      	mov	r2, r3
 8001220:	2114      	movs	r1, #20
 8001222:	2020      	movs	r0, #32
 8001224:	f000 f864 	bl	80012f0 <write_single_icm20948_reg>
}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	24000098 	.word	0x24000098

08001234 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8001238:	2201      	movs	r2, #1
 800123a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123e:	4802      	ldr	r0, [pc, #8]	; (8001248 <cs_high+0x14>)
 8001240:	f003 fde4 	bl	8004e0c <HAL_GPIO_WritePin>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	58020c00 	.word	0x58020c00

0800124c <cs_low>:

static void cs_low()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001256:	4802      	ldr	r0, [pc, #8]	; (8001260 <cs_low+0x14>)
 8001258:	f003 fdd8 	bl	8004e0c <HAL_GPIO_WritePin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	58020c00 	.word	0x58020c00

08001264 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800126e:	237f      	movs	r3, #127	; 0x7f
 8001270:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	737b      	strb	r3, [r7, #13]

	cs_low();
 8001276:	f7ff ffe9 	bl	800124c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 800127a:	f107 010c 	add.w	r1, r7, #12
 800127e:	230a      	movs	r3, #10
 8001280:	2202      	movs	r2, #2
 8001282:	4804      	ldr	r0, [pc, #16]	; (8001294 <select_user_bank+0x30>)
 8001284:	f008 febc 	bl	800a000 <HAL_SPI_Transmit>
	cs_high();
 8001288:	f7ff ffd4 	bl	8001234 <cs_high>
}
 800128c:	bf00      	nop
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	24000140 	.word	0x24000140

08001298 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80012a8:	79bb      	ldrb	r3, [r7, #6]
 80012aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ffd5 	bl	8001264 <select_user_bank>

	cs_low();
 80012ba:	f7ff ffc7 	bl	800124c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80012be:	f107 010f 	add.w	r1, r7, #15
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	2201      	movs	r2, #1
 80012c8:	4808      	ldr	r0, [pc, #32]	; (80012ec <read_single_icm20948_reg+0x54>)
 80012ca:	f008 fe99 	bl	800a000 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80012ce:	f107 010e 	add.w	r1, r7, #14
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	2201      	movs	r2, #1
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <read_single_icm20948_reg+0x54>)
 80012da:	f009 f883 	bl	800a3e4 <HAL_SPI_Receive>
	cs_high();
 80012de:	f7ff ffa9 	bl	8001234 <cs_high>

	return reg_val;
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	24000140 	.word	0x24000140

080012f0 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
 80012fa:	460b      	mov	r3, r1
 80012fc:	71bb      	strb	r3, [r7, #6]
 80012fe:	4613      	mov	r3, r2
 8001300:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8001306:	797b      	ldrb	r3, [r7, #5]
 8001308:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ffa9 	bl	8001264 <select_user_bank>

	cs_low();
 8001312:	f7ff ff9b 	bl	800124c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001316:	f107 010c 	add.w	r1, r7, #12
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	2202      	movs	r2, #2
 8001320:	4804      	ldr	r0, [pc, #16]	; (8001334 <write_single_icm20948_reg+0x44>)
 8001322:	f008 fe6d 	bl	800a000 <HAL_SPI_Transmit>
	cs_high();
 8001326:	f7ff ff85 	bl	8001234 <cs_high>
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	24000140 	.word	0x24000140

08001338 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	460b      	mov	r3, r1
 8001344:	71bb      	strb	r3, [r7, #6]
 8001346:	4613      	mov	r3, r2
 8001348:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800134a:	79bb      	ldrb	r3, [r7, #6]
 800134c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001350:	b2db      	uxtb	r3, r3
 8001352:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ff84 	bl	8001264 <select_user_bank>

	cs_low();
 800135c:	f7ff ff76 	bl	800124c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001360:	f107 010f 	add.w	r1, r7, #15
 8001364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001368:	2201      	movs	r2, #1
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <read_multiple_icm20948_reg+0x58>)
 800136c:	f008 fe48 	bl	800a000 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001370:	797b      	ldrb	r3, [r7, #5]
 8001372:	b29a      	uxth	r2, r3
 8001374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001378:	4906      	ldr	r1, [pc, #24]	; (8001394 <read_multiple_icm20948_reg+0x5c>)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <read_multiple_icm20948_reg+0x58>)
 800137c:	f009 f832 	bl	800a3e4 <HAL_SPI_Receive>
	cs_high();
 8001380:	f7ff ff58 	bl	8001234 <cs_high>

	return reg_val;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <read_multiple_icm20948_reg+0x5c>)
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24000140 	.word	0x24000140
 8001394:	2400009c 	.word	0x2400009c

08001398 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	603a      	str	r2, [r7, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	460b      	mov	r3, r1
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	4613      	mov	r3, r2
 80013ac:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80013ae:	79bb      	ldrb	r3, [r7, #6]
 80013b0:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff55 	bl	8001264 <select_user_bank>

	cs_low();
 80013ba:	f7ff ff47 	bl	800124c <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80013be:	f107 010f 	add.w	r1, r7, #15
 80013c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c6:	2201      	movs	r2, #1
 80013c8:	4808      	ldr	r0, [pc, #32]	; (80013ec <write_multiple_icm20948_reg+0x54>)
 80013ca:	f008 fe19 	bl	800a000 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80013ce:	797b      	ldrb	r3, [r7, #5]
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	6839      	ldr	r1, [r7, #0]
 80013d8:	4804      	ldr	r0, [pc, #16]	; (80013ec <write_multiple_icm20948_reg+0x54>)
 80013da:	f008 fe11 	bl	800a000 <HAL_SPI_Transmit>
	cs_high();
 80013de:	f7ff ff29 	bl	8001234 <cs_high>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	24000140 	.word	0x24000140

080013f0 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80013fa:	228c      	movs	r2, #140	; 0x8c
 80013fc:	2103      	movs	r1, #3
 80013fe:	2030      	movs	r0, #48	; 0x30
 8001400:	f7ff ff76 	bl	80012f0 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	461a      	mov	r2, r3
 8001408:	2104      	movs	r1, #4
 800140a:	2030      	movs	r0, #48	; 0x30
 800140c:	f7ff ff70 	bl	80012f0 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001410:	2281      	movs	r2, #129	; 0x81
 8001412:	2105      	movs	r1, #5
 8001414:	2030      	movs	r0, #48	; 0x30
 8001416:	f7ff ff6b 	bl	80012f0 <write_single_icm20948_reg>

	HAL_Delay(1);
 800141a:	2001      	movs	r0, #1
 800141c:	f000 ffe0 	bl	80023e0 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001420:	213b      	movs	r1, #59	; 0x3b
 8001422:	2000      	movs	r0, #0
 8001424:	f7ff ff38 	bl	8001298 <read_single_icm20948_reg>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	460a      	mov	r2, r1
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	4613      	mov	r3, r2
 8001440:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001442:	220c      	movs	r2, #12
 8001444:	2103      	movs	r1, #3
 8001446:	2030      	movs	r0, #48	; 0x30
 8001448:	f7ff ff52 	bl	80012f0 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	461a      	mov	r2, r3
 8001450:	2104      	movs	r1, #4
 8001452:	2030      	movs	r0, #48	; 0x30
 8001454:	f7ff ff4c 	bl	80012f0 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 8001458:	79bb      	ldrb	r3, [r7, #6]
 800145a:	461a      	mov	r2, r3
 800145c:	2106      	movs	r1, #6
 800145e:	2030      	movs	r0, #48	; 0x30
 8001460:	f7ff ff46 	bl	80012f0 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001464:	2281      	movs	r2, #129	; 0x81
 8001466:	2105      	movs	r1, #5
 8001468:	2030      	movs	r0, #48	; 0x30
 800146a:	f7ff ff41 	bl	80012f0 <write_single_icm20948_reg>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_GPIO_EXTI_Callback>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4)
 8001482:	88fb      	ldrh	r3, [r7, #6]
 8001484:	2b10      	cmp	r3, #16
 8001486:	d102      	bne.n	800148e <HAL_GPIO_EXTI_Callback+0x16>
  {
    userKey1Flag = 1;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_GPIO_EXTI_Callback+0x68>)
 800148a:	2201      	movs	r2, #1
 800148c:	701a      	strb	r2, [r3, #0]

  }

  if (GPIO_Pin == GPIO_PIN_15)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001494:	d11f      	bne.n	80014d6 <HAL_GPIO_EXTI_Callback+0x5e>
  {
    dataReadyCount++;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800149e:	6013      	str	r3, [r2, #0]
    dataReadyFlag = 0;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_GPIO_EXTI_Callback+0x70>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    icm20948_accel_gyro_read(&imuData);
 80014a6:	4811      	ldr	r0, [pc, #68]	; (80014ec <HAL_GPIO_EXTI_Callback+0x74>)
 80014a8:	f7ff faf4 	bl	8000a94 <icm20948_accel_gyro_read>
    if(!isCQueueFull(cQ)) enCQueue(cQ, imuData);
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x78>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f8fd 	bl	80006b0 <isCQueueFull>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10c      	bne.n	80014d6 <HAL_GPIO_EXTI_Callback+0x5e>
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_GPIO_EXTI_Callback+0x78>)
 80014be:	681d      	ldr	r5, [r3, #0]
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_GPIO_EXTI_Callback+0x74>)
 80014c2:	466c      	mov	r4, sp
 80014c4:	f103 020c 	add.w	r2, r3, #12
 80014c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014d0:	4628      	mov	r0, r5
 80014d2:	f7ff f911 	bl	80006f8 <enCQueue>
  }
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bdb0      	pop	{r4, r5, r7, pc}
 80014de:	bf00      	nop
 80014e0:	240000a2 	.word	0x240000a2
 80014e4:	240000a4 	.word	0x240000a4
 80014e8:	240000a3 	.word	0x240000a3
 80014ec:	240000a8 	.word	0x240000a8
 80014f0:	240000c0 	.word	0x240000c0

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0a0      	sub	sp, #128	; 0x80
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char uart_buffer[100];
  cQ = createCQueue();
 80014fa:	f7ff f8c3 	bl	8000684 <createCQueue>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a80      	ldr	r2, [pc, #512]	; (8001704 <main+0x210>)
 8001502:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001504:	f000 feda 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001508:	f000 f922 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150c:	f7ff f954 	bl	80007b8 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8001510:	f000 f9ba 	bl	8001888 <MX_SDMMC1_SD_Init>
  MX_UART4_Init();
 8001514:	f000 fdc8 	bl	80020a8 <MX_UART4_Init>
  MX_SPI2_Init();
 8001518:	f000 fa78 	bl	8001a0c <MX_SPI2_Init>
  MX_DMA_Init();
 800151c:	f7ff f924 	bl	8000768 <MX_DMA_Init>
  MX_TIM7_Init();
 8001520:	f000 fd62 	bl	8001fe8 <MX_TIM7_Init>
  MX_FATFS_Init();
 8001524:	f00c fc5c 	bl	800dde0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  printf ("start main()\r\n");
 8001528:	4877      	ldr	r0, [pc, #476]	; (8001708 <main+0x214>)
 800152a:	f011 fad9 	bl	8012ae0 <puts>

  HAL_Delay (10);
 800152e:	200a      	movs	r0, #10
 8001530:	f000 ff56 	bl	80023e0 <HAL_Delay>
  icm20948_init();
 8001534:	f7ff f9fc 	bl	8000930 <icm20948_init>
  ak09916_init();
 8001538:	f7ff fa2b 	bl	8000992 <ak09916_init>
  HAL_Delay (10);
 800153c:	200a      	movs	r0, #10
 800153e:	f000 ff4f 	bl	80023e0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  char fileName[12];

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	4870      	ldr	r0, [pc, #448]	; (800170c <main+0x218>)
 800154a:	f003 fc5f 	bl	8004e0c <HAL_GPIO_WritePin>
  int i = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t bw, br;

  // 1.
  //printf("%c%c%c%c\r\n", SDPath[0], SDPath[1], SDPath[2], SDPath[3]);
  if ((retSD = f_mount (&SDFatFS, SDPath, 0)) == FR_OK)
 8001552:	2200      	movs	r2, #0
 8001554:	496e      	ldr	r1, [pc, #440]	; (8001710 <main+0x21c>)
 8001556:	486f      	ldr	r0, [pc, #444]	; (8001714 <main+0x220>)
 8001558:	f010 f9c8 	bl	80118ec <f_mount>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <main+0x224>)
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	4b6c      	ldr	r3, [pc, #432]	; (8001718 <main+0x224>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d106      	bne.n	800157a <main+0x86>
  {
    //sprintf(str, "f_mount OK %d", retSD);
    printf ("1. f_mount OK %d \r\n", retSD);
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <main+0x224>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	486a      	ldr	r0, [pc, #424]	; (800171c <main+0x228>)
 8001574:	f011 fa2e 	bl	80129d4 <iprintf>
 8001578:	e005      	b.n	8001586 <main+0x92>
  }
  else
  {
    printf ("1. f_mount OK failed %d\r\n", retSD);
 800157a:	4b67      	ldr	r3, [pc, #412]	; (8001718 <main+0x224>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4619      	mov	r1, r3
 8001580:	4867      	ldr	r0, [pc, #412]	; (8001720 <main+0x22c>)
 8001582:	f011 fa27 	bl	80129d4 <iprintf>
  }
  // 2.

  int fileIndex = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	67fb      	str	r3, [r7, #124]	; 0x7c

  do
  {
    fileIndex++;
 800158a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800158c:	3301      	adds	r3, #1
 800158e:	67fb      	str	r3, [r7, #124]	; 0x7c
    sprintf (fileName, "data%04d.bin", fileIndex);
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001594:	4963      	ldr	r1, [pc, #396]	; (8001724 <main+0x230>)
 8001596:	4618      	mov	r0, r3
 8001598:	f011 faba 	bl	8012b10 <siprintf>

    retSD = f_open (&SDFile, fileName, FA_OPEN_EXISTING | FA_READ);
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	2201      	movs	r2, #1
 80015a0:	4619      	mov	r1, r3
 80015a2:	4861      	ldr	r0, [pc, #388]	; (8001728 <main+0x234>)
 80015a4:	f010 f9e8 	bl	8011978 <f_open>
 80015a8:	4603      	mov	r3, r0
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <main+0x224>)
 80015ae:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit (&huart4, fileName, 12, HAL_MAX_DELAY);
 80015b0:	1d39      	adds	r1, r7, #4
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	220c      	movs	r2, #12
 80015b8:	485c      	ldr	r0, [pc, #368]	; (800172c <main+0x238>)
 80015ba:	f00a f90d 	bl	800b7d8 <HAL_UART_Transmit>
    printf ("  %d\r\n", retSD);
 80015be:	4b56      	ldr	r3, [pc, #344]	; (8001718 <main+0x224>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	485a      	ldr	r0, [pc, #360]	; (8001730 <main+0x23c>)
 80015c6:	f011 fa05 	bl	80129d4 <iprintf>
    HAL_Delay (100);
 80015ca:	2064      	movs	r0, #100	; 0x64
 80015cc:	f000 ff08 	bl	80023e0 <HAL_Delay>
    if (retSD == FR_OK)
 80015d0:	4b51      	ldr	r3, [pc, #324]	; (8001718 <main+0x224>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <main+0xea>
      f_close (&SDFile);
 80015d8:	4853      	ldr	r0, [pc, #332]	; (8001728 <main+0x234>)
 80015da:	f010 ff95 	bl	8012508 <f_close>
    if ( retSD == FR_NOT_READY)
 80015de:	4b4e      	ldr	r3, [pc, #312]	; (8001718 <main+0x224>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d100      	bne.n	80015e8 <main+0xf4>
      while(1);
 80015e6:	e7fe      	b.n	80015e6 <main+0xf2>
  }while (retSD != FR_NO_FILE);
 80015e8:	4b4b      	ldr	r3, [pc, #300]	; (8001718 <main+0x224>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d1cc      	bne.n	800158a <main+0x96>

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f6:	4845      	ldr	r0, [pc, #276]	; (800170c <main+0x218>)
 80015f8:	f003 fc08 	bl	8004e0c <HAL_GPIO_WritePin>

  uint8_t startFlag = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint8_t save_Count = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a


  while (1)
  {
    if (startFlag)
 8001608:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800160c:	2b00      	cmp	r3, #0
 800160e:	d026      	beq.n	800165e <main+0x16a>

      //HAL_UART_Transmit(&huart4, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
      //printf("%d\r\n", strlen(uart_buffer));


      f_write (&SDFile,  (uint8_t*)&imuData, 22 , &bw);
 8001610:	463b      	mov	r3, r7
 8001612:	2216      	movs	r2, #22
 8001614:	4947      	ldr	r1, [pc, #284]	; (8001734 <main+0x240>)
 8001616:	4844      	ldr	r0, [pc, #272]	; (8001728 <main+0x234>)
 8001618:	f010 fc81 	bl	8011f1e <f_write>
      if(save_Count++ == 5){
 800161c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	f887 207a 	strb.w	r2, [r7, #122]	; 0x7a
 8001626:	2b05      	cmp	r3, #5
 8001628:	d105      	bne.n	8001636 <main+0x142>
        save_Count = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
        f_sync (&SDFile);
 8001630:	483d      	ldr	r0, [pc, #244]	; (8001728 <main+0x234>)
 8001632:	f010 fe4b 	bl	80122cc <f_sync>
      }
      if( dataReadyCount%500 == 0){
 8001636:	4b40      	ldr	r3, [pc, #256]	; (8001738 <main+0x244>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b40      	ldr	r3, [pc, #256]	; (800173c <main+0x248>)
 800163c:	fb83 1302 	smull	r1, r3, r3, r2
 8001640:	1159      	asrs	r1, r3, #5
 8001642:	17d3      	asrs	r3, r2, #31
 8001644:	1acb      	subs	r3, r1, r3
 8001646:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800164a:	fb01 f303 	mul.w	r3, r1, r3
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d104      	bne.n	800165e <main+0x16a>
        HAL_GPIO_TogglePin (LED_B_GPIO_Port, LED_B_Pin);
 8001654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001658:	482c      	ldr	r0, [pc, #176]	; (800170c <main+0x218>)
 800165a:	f003 fbf0 	bl	8004e3e <HAL_GPIO_TogglePin>
      }

    }

    if (userKey1Flag)
 800165e:	4b38      	ldr	r3, [pc, #224]	; (8001740 <main+0x24c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0cf      	beq.n	8001608 <main+0x114>
    {
      if (startFlag == 1){
 8001668:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10c      	bne.n	800168a <main+0x196>
        f_close (&SDFile);
 8001670:	482d      	ldr	r0, [pc, #180]	; (8001728 <main+0x234>)
 8001672:	f010 ff49 	bl	8012508 <f_close>
        fileIndex++;
 8001676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001678:	3301      	adds	r3, #1
 800167a:	67fb      	str	r3, [r7, #124]	; 0x7c
        sprintf (fileName, "data%04d.bin", fileIndex);
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001680:	4928      	ldr	r1, [pc, #160]	; (8001724 <main+0x230>)
 8001682:	4618      	mov	r0, r3
 8001684:	f011 fa44 	bl	8012b10 <siprintf>
 8001688:	e017      	b.n	80016ba <main+0x1c6>
      }
      else
      {
        retSD = f_open (&SDFile, fileName, FA_OPEN_APPEND | FA_WRITE);
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2232      	movs	r2, #50	; 0x32
 800168e:	4619      	mov	r1, r3
 8001690:	4825      	ldr	r0, [pc, #148]	; (8001728 <main+0x234>)
 8001692:	f010 f971 	bl	8011978 <f_open>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <main+0x224>)
 800169c:	701a      	strb	r2, [r3, #0]

        if (retSD == FR_OK)
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <main+0x224>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d103      	bne.n	80016ae <main+0x1ba>
        {
          printf ("OK\r\n");
 80016a6:	4827      	ldr	r0, [pc, #156]	; (8001744 <main+0x250>)
 80016a8:	f011 fa1a 	bl	8012ae0 <puts>
 80016ac:	e005      	b.n	80016ba <main+0x1c6>
        }
        else
        {
          printf ("2. Failed %d \r\n", retSD);
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <main+0x224>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4824      	ldr	r0, [pc, #144]	; (8001748 <main+0x254>)
 80016b6:	f011 f98d 	bl	80129d4 <iprintf>
        }
      }

      printf ("asdf\r\n");
 80016ba:	4824      	ldr	r0, [pc, #144]	; (800174c <main+0x258>)
 80016bc:	f011 fa10 	bl	8012ae0 <puts>
      if(startFlag){
 80016c0:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <main+0x1e2>
        HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ce:	480f      	ldr	r0, [pc, #60]	; (800170c <main+0x218>)
 80016d0:	f003 fb9c 	bl	8004e0c <HAL_GPIO_WritePin>
 80016d4:	e005      	b.n	80016e2 <main+0x1ee>
      }else{
        HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <main+0x218>)
 80016de:	f003 fb95 	bl	8004e0c <HAL_GPIO_WritePin>
      }
      startFlag = !startFlag;
 80016e2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf0c      	ite	eq
 80016ea:	2301      	moveq	r3, #1
 80016ec:	2300      	movne	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
      HAL_Delay (500);
 80016f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f8:	f000 fe72 	bl	80023e0 <HAL_Delay>

      userKey1Flag = 0;
 80016fc:	4b10      	ldr	r3, [pc, #64]	; (8001740 <main+0x24c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	701a      	strb	r2, [r3, #0]
    if (startFlag)
 8001702:	e781      	b.n	8001608 <main+0x114>
 8001704:	240000c0 	.word	0x240000c0
 8001708:	08013bf0 	.word	0x08013bf0
 800170c:	58022000 	.word	0x58022000
 8001710:	240003a0 	.word	0x240003a0
 8001714:	240003a4 	.word	0x240003a4
 8001718:	2400039c 	.word	0x2400039c
 800171c:	08013c00 	.word	0x08013c00
 8001720:	08013c14 	.word	0x08013c14
 8001724:	08013c30 	.word	0x08013c30
 8001728:	240013e0 	.word	0x240013e0
 800172c:	24000308 	.word	0x24000308
 8001730:	08013c40 	.word	0x08013c40
 8001734:	240000a8 	.word	0x240000a8
 8001738:	240000a4 	.word	0x240000a4
 800173c:	10624dd3 	.word	0x10624dd3
 8001740:	240000a2 	.word	0x240000a2
 8001744:	08013c48 	.word	0x08013c48
 8001748:	08013c4c 	.word	0x08013c4c
 800174c:	08013c5c 	.word	0x08013c5c

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b09c      	sub	sp, #112	; 0x70
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175a:	224c      	movs	r2, #76	; 0x4c
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f011 f850 	bl	8012804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	2220      	movs	r2, #32
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f011 f84a 	bl	8012804 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001770:	2002      	movs	r0, #2
 8001772:	f003 fb99 	bl	8004ea8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001776:	2300      	movs	r3, #0
 8001778:	603b      	str	r3, [r7, #0]
 800177a:	4b34      	ldr	r3, [pc, #208]	; (800184c <SystemClock_Config+0xfc>)
 800177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177e:	4a33      	ldr	r2, [pc, #204]	; (800184c <SystemClock_Config+0xfc>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <SystemClock_Config+0xfc>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	603b      	str	r3, [r7, #0]
 8001790:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <SystemClock_Config+0x100>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	4a2e      	ldr	r2, [pc, #184]	; (8001850 <SystemClock_Config+0x100>)
 8001796:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800179a:	6193      	str	r3, [r2, #24]
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <SystemClock_Config+0x100>)
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017a8:	bf00      	nop
 80017aa:	4b29      	ldr	r3, [pc, #164]	; (8001850 <SystemClock_Config+0x100>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017b6:	d1f8      	bne.n	80017aa <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <SystemClock_Config+0x104>)
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	f023 0303 	bic.w	r3, r3, #3
 80017c0:	4a24      	ldr	r2, [pc, #144]	; (8001854 <SystemClock_Config+0x104>)
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c8:	2301      	movs	r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d6:	2302      	movs	r3, #2
 80017d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80017da:	2305      	movs	r3, #5
 80017dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80017de:	23a0      	movs	r3, #160	; 0xa0
 80017e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80017ee:	2308      	movs	r3, #8
 80017f0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4618      	mov	r0, r3
 8001800:	f003 fb8c 	bl	8004f1c <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800180a:	f000 f837 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180e:	233f      	movs	r3, #63	; 0x3f
 8001810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	2303      	movs	r3, #3
 8001814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800181a:	2308      	movs	r3, #8
 800181c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001822:	2340      	movs	r3, #64	; 0x40
 8001824:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800182c:	2340      	movs	r3, #64	; 0x40
 800182e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2102      	movs	r1, #2
 8001834:	4618      	mov	r0, r3
 8001836:	f003 ff9f 	bl	8005778 <HAL_RCC_ClockConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001840:	f000 f81c 	bl	800187c <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3770      	adds	r7, #112	; 0x70
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	58000400 	.word	0x58000400
 8001850:	58024800 	.word	0x58024800
 8001854:	58024400 	.word	0x58024400

08001858 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit (&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001860:	1d39      	adds	r1, r7, #4
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	2201      	movs	r2, #1
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <__io_putchar+0x20>)
 800186a:	f009 ffb5 	bl	800b7d8 <HAL_UART_Transmit>

  return ch;
 800186e:	687b      	ldr	r3, [r7, #4]
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24000308 	.word	0x24000308

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <MX_SDMMC1_SD_Init+0x34>)
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <MX_SDMMC1_SD_Init+0x38>)
 8001890:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <MX_SDMMC1_SD_Init+0x34>)
 8001894:	2200      	movs	r2, #0
 8001896:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <MX_SDMMC1_SD_Init+0x34>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <MX_SDMMC1_SD_Init+0x34>)
 80018a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018a4:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <MX_SDMMC1_SD_Init+0x34>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 80018ac:	4b03      	ldr	r3, [pc, #12]	; (80018bc <MX_SDMMC1_SD_Init+0x34>)
 80018ae:	2204      	movs	r2, #4
 80018b0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	240000c4 	.word	0x240000c4
 80018c0:	52007000 	.word	0x52007000

080018c4 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0ba      	sub	sp, #232	; 0xe8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	22bc      	movs	r2, #188	; 0xbc
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f010 ff8d 	bl	8012804 <memset>
  if(sdHandle->Instance==SDMMC1)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a43      	ldr	r2, [pc, #268]	; (80019fc <HAL_SD_MspInit+0x138>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d17f      	bne.n	80019f4 <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80018f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80018fa:	2305      	movs	r3, #5
 80018fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80018fe:	23c0      	movs	r3, #192	; 0xc0
 8001900:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 10;
 800190a:	230a      	movs	r3, #10
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 800190e:	2380      	movs	r3, #128	; 0x80
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001912:	2300      	movs	r3, #0
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800191a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800191e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4618      	mov	r0, r3
 8001926:	f004 fab3 	bl	8005e90 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 8001930:	f7ff ffa4 	bl	800187c <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001934:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001936:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800193a:	4a31      	ldr	r2, [pc, #196]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 800193c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001940:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001944:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001946:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	4a29      	ldr	r2, [pc, #164]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 800195a:	f043 0304 	orr.w	r3, r3, #4
 800195e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001970:	4b23      	ldr	r3, [pc, #140]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001972:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001976:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001978:	f043 0308 	orr.w	r3, r3, #8
 800197c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_SD_MspInit+0x13c>)
 8001982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001986:	f003 0308 	and.w	r3, r3, #8
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 800198e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001992:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199c:	2301      	movs	r3, #1
 800199e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019a8:	230c      	movs	r3, #12
 80019aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019b2:	4619      	mov	r1, r3
 80019b4:	4813      	ldr	r0, [pc, #76]	; (8001a04 <HAL_SD_MspInit+0x140>)
 80019b6:	f003 f879 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019ba:	2304      	movs	r3, #4
 80019bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80019d2:	230c      	movs	r3, #12
 80019d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019dc:	4619      	mov	r1, r3
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <HAL_SD_MspInit+0x144>)
 80019e0:	f003 f864 	bl	8004aac <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2031      	movs	r0, #49	; 0x31
 80019ea:	f000 fe04 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80019ee:	2031      	movs	r0, #49	; 0x31
 80019f0:	f000 fe1b 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80019f4:	bf00      	nop
 80019f6:	37e8      	adds	r7, #232	; 0xe8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	52007000 	.word	0x52007000
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58020800 	.word	0x58020800
 8001a08:	58020c00 	.word	0x58020c00

08001a0c <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001a10:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a12:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <MX_SPI2_Init+0xac>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a26:	2207      	movs	r2, #7
 8001a28:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a2a:	4b22      	ldr	r3, [pc, #136]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a3c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001a5c:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a68:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a8e:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a94:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001aa0:	4804      	ldr	r0, [pc, #16]	; (8001ab4 <MX_SPI2_Init+0xa8>)
 8001aa2:	f008 f9a7 	bl	8009df4 <HAL_SPI_Init>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001aac:	f7ff fee6 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	24000140 	.word	0x24000140
 8001ab8:	40003800 	.word	0x40003800

08001abc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0b8      	sub	sp, #224	; 0xe0
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	22bc      	movs	r2, #188	; 0xbc
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f010 fe91 	bl	8012804 <memset>
  if(spiHandle->Instance==SPI2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a5f      	ldr	r2, [pc, #380]	; (8001c64 <HAL_SPI_MspInit+0x1a8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	f040 80b6 	bne.w	8001c5a <HAL_SPI_MspInit+0x19e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001aee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8001af4:	2305      	movs	r3, #5
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001af8:	23c0      	movs	r3, #192	; 0xc0
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 20;
 8001afc:	2314      	movs	r3, #20
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001b00:	2302      	movs	r3, #2
 8001b02:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001b08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b0c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 f9b5 	bl	8005e90 <HAL_RCCEx_PeriphCLKConfig>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8001b2c:	f7ff fea6 	bl	800187c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b30:	4b4d      	ldr	r3, [pc, #308]	; (8001c68 <HAL_SPI_MspInit+0x1ac>)
 8001b32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b36:	4a4c      	ldr	r2, [pc, #304]	; (8001c68 <HAL_SPI_MspInit+0x1ac>)
 8001b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b40:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <HAL_SPI_MspInit+0x1ac>)
 8001b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b4e:	4b46      	ldr	r3, [pc, #280]	; (8001c68 <HAL_SPI_MspInit+0x1ac>)
 8001b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b54:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <HAL_SPI_MspInit+0x1ac>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5e:	4b42      	ldr	r3, [pc, #264]	; (8001c68 <HAL_SPI_MspInit+0x1ac>)
 8001b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b84:	2305      	movs	r3, #5
 8001b86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b8a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4836      	ldr	r0, [pc, #216]	; (8001c6c <HAL_SPI_MspInit+0x1b0>)
 8001b92:	f002 ff8b 	bl	8004aac <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8001b96:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001b98:	4a36      	ldr	r2, [pc, #216]	; (8001c74 <HAL_SPI_MspInit+0x1b8>)
 8001b9a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001b9c:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001b9e:	2227      	movs	r2, #39	; 0x27
 8001ba0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ba2:	4b33      	ldr	r3, [pc, #204]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ba8:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bae:	4b30      	ldr	r3, [pc, #192]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bb4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bb6:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001bd4:	4826      	ldr	r0, [pc, #152]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bd6:	f000 fd43 	bl	8002660 <HAL_DMA_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 8001be0:	f7ff fe4c 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001be8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bea:	4a21      	ldr	r2, [pc, #132]	; (8001c70 <HAL_SPI_MspInit+0x1b4>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream1;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001bf2:	4a22      	ldr	r2, [pc, #136]	; (8001c7c <HAL_SPI_MspInit+0x1c0>)
 8001bf4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001bf8:	2228      	movs	r2, #40	; 0x28
 8001bfa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001bfe:	2240      	movs	r2, #64	; 0x40
 8001c00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c16:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c30:	f000 fd16 	bl	8002660 <HAL_DMA_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_SPI_MspInit+0x182>
    {
      Error_Handler();
 8001c3a:	f7ff fe1f 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c42:	679a      	str	r2, [r3, #120]	; 0x78
 8001c44:	4a0c      	ldr	r2, [pc, #48]	; (8001c78 <HAL_SPI_MspInit+0x1bc>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2024      	movs	r0, #36	; 0x24
 8001c50:	f000 fcd1 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001c54:	2024      	movs	r0, #36	; 0x24
 8001c56:	f000 fce8 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	37e0      	adds	r7, #224	; 0xe0
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40003800 	.word	0x40003800
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	58022000 	.word	0x58022000
 8001c70:	240001c8 	.word	0x240001c8
 8001c74:	40020010 	.word	0x40020010
 8001c78:	24000240 	.word	0x24000240
 8001c7c:	40020028 	.word	0x40020028

08001c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <HAL_MspInit+0x30>)
 8001c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c8c:	4a08      	ldr	r2, [pc, #32]	; (8001cb0 <HAL_MspInit+0x30>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_MspInit+0x30>)
 8001c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	58024400 	.word	0x58024400

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <HardFault_Handler+0x4>

08001cc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <MemManage_Handler+0x4>

08001cc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <BusFault_Handler+0x4>

08001ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <UsageFault_Handler+0x4>

08001cd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d00:	f000 fb4e 	bl	80023a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_KEY_Pin);
 8001d0c:	2010      	movs	r0, #16
 8001d0e:	f003 f8b0 	bl	8004e72 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <DMA1_Stream0_IRQHandler+0x10>)
 8001d1e:	f001 fd5f 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	240001c8 	.word	0x240001c8

08001d2c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA1_Stream1_IRQHandler+0x10>)
 8001d32:	f001 fd55 	bl	80037e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	24000240 	.word	0x24000240

08001d40 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <SPI2_IRQHandler+0x10>)
 8001d46:	f008 ff11 	bl	800ab6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	24000140 	.word	0x24000140

08001d54 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <SDMMC1_IRQHandler+0x10>)
 8001d5a:	f006 fe57 	bl	8008a0c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	240000c4 	.word	0x240000c4

08001d68 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <UART4_IRQHandler+0x10>)
 8001d6e:	f009 fdc9 	bl	800b904 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	24000308 	.word	0x24000308

08001d7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d80:	4802      	ldr	r0, [pc, #8]	; (8001d8c <TIM7_IRQHandler+0x10>)
 8001d82:	f009 fa41 	bl	800b208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	240002bc 	.word	0x240002bc

08001d90 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e00a      	b.n	8001db8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001da2:	f3af 8000 	nop.w
 8001da6:	4601      	mov	r1, r0
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	60ba      	str	r2, [r7, #8]
 8001dae:	b2ca      	uxtb	r2, r1
 8001db0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	3301      	adds	r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	dbf0      	blt.n	8001da2 <_read+0x12>
	}

return len;
 8001dc0:	687b      	ldr	r3, [r7, #4]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e009      	b.n	8001df0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	1c5a      	adds	r2, r3, #1
 8001de0:	60ba      	str	r2, [r7, #8]
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fd37 	bl	8001858 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	3301      	adds	r3, #1
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	dbf1      	blt.n	8001ddc <_write+0x12>
	}
	return len;
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <_close>:

int _close(int file)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
	return -1;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_isatty>:

int _isatty(int file)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
	return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
	...

08001e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e74:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <_sbrk+0x5c>)
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <_sbrk+0x60>)
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <_sbrk+0x64>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d102      	bne.n	8001e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <_sbrk+0x64>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <_sbrk+0x68>)
 8001e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d207      	bcs.n	8001eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e9c:	f010 fc80 	bl	80127a0 <__errno>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	e009      	b.n	8001ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <_sbrk+0x64>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <_sbrk+0x64>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	4a05      	ldr	r2, [pc, #20]	; (8001ed0 <_sbrk+0x64>)
 8001ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	24080000 	.word	0x24080000
 8001ecc:	00000400 	.word	0x00000400
 8001ed0:	240002b8 	.word	0x240002b8
 8001ed4:	240028e0 	.word	0x240028e0

08001ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001edc:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <SystemInit+0xe4>)
 8001ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee2:	4a36      	ldr	r2, [pc, #216]	; (8001fbc <SystemInit+0xe4>)
 8001ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001eec:	4b34      	ldr	r3, [pc, #208]	; (8001fc0 <SystemInit+0xe8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	2b06      	cmp	r3, #6
 8001ef6:	d807      	bhi.n	8001f08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ef8:	4b31      	ldr	r3, [pc, #196]	; (8001fc0 <SystemInit+0xe8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 030f 	bic.w	r3, r3, #15
 8001f00:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <SystemInit+0xe8>)
 8001f02:	f043 0307 	orr.w	r3, r3, #7
 8001f06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f08:	4b2e      	ldr	r3, [pc, #184]	; (8001fc4 <SystemInit+0xec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a2d      	ldr	r2, [pc, #180]	; (8001fc4 <SystemInit+0xec>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f14:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <SystemInit+0xec>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001f1a:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <SystemInit+0xec>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4929      	ldr	r1, [pc, #164]	; (8001fc4 <SystemInit+0xec>)
 8001f20:	4b29      	ldr	r3, [pc, #164]	; (8001fc8 <SystemInit+0xf0>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <SystemInit+0xe8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d007      	beq.n	8001f42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <SystemInit+0xe8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 030f 	bic.w	r3, r3, #15
 8001f3a:	4a21      	ldr	r2, [pc, #132]	; (8001fc0 <SystemInit+0xe8>)
 8001f3c:	f043 0307 	orr.w	r3, r3, #7
 8001f40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001f42:	4b20      	ldr	r3, [pc, #128]	; (8001fc4 <SystemInit+0xec>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <SystemInit+0xec>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <SystemInit+0xec>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	; (8001fc4 <SystemInit+0xec>)
 8001f56:	4a1d      	ldr	r2, [pc, #116]	; (8001fcc <SystemInit+0xf4>)
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f5a:	4b1a      	ldr	r3, [pc, #104]	; (8001fc4 <SystemInit+0xec>)
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <SystemInit+0xf8>)
 8001f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f60:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <SystemInit+0xec>)
 8001f62:	4a1c      	ldr	r2, [pc, #112]	; (8001fd4 <SystemInit+0xfc>)
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f66:	4b17      	ldr	r3, [pc, #92]	; (8001fc4 <SystemInit+0xec>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <SystemInit+0xec>)
 8001f6e:	4a19      	ldr	r2, [pc, #100]	; (8001fd4 <SystemInit+0xfc>)
 8001f70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <SystemInit+0xec>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f78:	4b12      	ldr	r3, [pc, #72]	; (8001fc4 <SystemInit+0xec>)
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <SystemInit+0xfc>)
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <SystemInit+0xec>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	; (8001fc4 <SystemInit+0xec>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <SystemInit+0xec>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <SystemInit+0xec>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <SystemInit+0x100>)
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <SystemInit+0x104>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fa2:	d202      	bcs.n	8001faa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <SystemInit+0x108>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001faa:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <SystemInit+0x10c>)
 8001fac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001fb0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001fb2:	bf00      	nop
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00
 8001fc0:	52002000 	.word	0x52002000
 8001fc4:	58024400 	.word	0x58024400
 8001fc8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001fcc:	02020200 	.word	0x02020200
 8001fd0:	01ff0000 	.word	0x01ff0000
 8001fd4:	01010280 	.word	0x01010280
 8001fd8:	5c001000 	.word	0x5c001000
 8001fdc:	ffff0000 	.word	0xffff0000
 8001fe0:	51008108 	.word	0x51008108
 8001fe4:	52004000 	.word	0x52004000

08001fe8 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_TIM7_Init+0x68>)
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <MX_TIM7_Init+0x6c>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <MX_TIM7_Init+0x68>)
 8002000:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002004:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <MX_TIM7_Init+0x68>)
 8002008:	2200      	movs	r2, #0
 800200a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_TIM7_Init+0x68>)
 800200e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002012:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_TIM7_Init+0x68>)
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800201a:	480d      	ldr	r0, [pc, #52]	; (8002050 <MX_TIM7_Init+0x68>)
 800201c:	f009 f89d 	bl	800b15a <HAL_TIM_Base_Init>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002026:	f7ff fc29 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	; (8002050 <MX_TIM7_Init+0x68>)
 8002038:	f009 fad2 	bl	800b5e0 <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8002042:	f7ff fc1b 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	240002bc 	.word	0x240002bc
 8002054:	40001400 	.word	0x40001400

08002058 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <HAL_TIM_Base_MspInit+0x48>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d116      	bne.n	8002098 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <HAL_TIM_Base_MspInit+0x4c>)
 800206c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002070:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_TIM_Base_MspInit+0x4c>)
 8002072:	f043 0320 	orr.w	r3, r3, #32
 8002076:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_TIM_Base_MspInit+0x4c>)
 800207c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002080:	f003 0320 	and.w	r3, r3, #32
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8002088:	2200      	movs	r2, #0
 800208a:	2104      	movs	r1, #4
 800208c:	2037      	movs	r0, #55	; 0x37
 800208e:	f000 fab2 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002092:	2037      	movs	r0, #55	; 0x37
 8002094:	f000 fac9 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40001400 	.word	0x40001400
 80020a4:	58024400 	.word	0x58024400

080020a8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80020ac:	4b22      	ldr	r3, [pc, #136]	; (8002138 <MX_UART4_Init+0x90>)
 80020ae:	4a23      	ldr	r2, [pc, #140]	; (800213c <MX_UART4_Init+0x94>)
 80020b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <MX_UART4_Init+0x90>)
 80020b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80020ba:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <MX_UART4_Init+0x90>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <MX_UART4_Init+0x90>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80020c6:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <MX_UART4_Init+0x90>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80020cc:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <MX_UART4_Init+0x90>)
 80020ce:	220c      	movs	r2, #12
 80020d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <MX_UART4_Init+0x90>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020d8:	4b17      	ldr	r3, [pc, #92]	; (8002138 <MX_UART4_Init+0x90>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <MX_UART4_Init+0x90>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <MX_UART4_Init+0x90>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <MX_UART4_Init+0x90>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80020f0:	4811      	ldr	r0, [pc, #68]	; (8002138 <MX_UART4_Init+0x90>)
 80020f2:	f009 fb21 	bl	800b738 <HAL_UART_Init>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80020fc:	f7ff fbbe 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002100:	2100      	movs	r1, #0
 8002102:	480d      	ldr	r0, [pc, #52]	; (8002138 <MX_UART4_Init+0x90>)
 8002104:	f00a ffd8 	bl	800d0b8 <HAL_UARTEx_SetTxFifoThreshold>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800210e:	f7ff fbb5 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002112:	2100      	movs	r1, #0
 8002114:	4808      	ldr	r0, [pc, #32]	; (8002138 <MX_UART4_Init+0x90>)
 8002116:	f00b f80d 	bl	800d134 <HAL_UARTEx_SetRxFifoThreshold>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002120:	f7ff fbac 	bl	800187c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	; (8002138 <MX_UART4_Init+0x90>)
 8002126:	f00a ff8e 	bl	800d046 <HAL_UARTEx_DisableFifoMode>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002130:	f7ff fba4 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	24000308 	.word	0x24000308
 800213c:	40004c00 	.word	0x40004c00

08002140 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0ba      	sub	sp, #232	; 0xe8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002148:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0318 	add.w	r3, r7, #24
 800215c:	22bc      	movs	r2, #188	; 0xbc
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f010 fb4f 	bl	8012804 <memset>
  if(uartHandle->Instance==UART4)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_UART_MspInit+0x118>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d16e      	bne.n	800224e <HAL_UART_MspInit+0x10e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002170:	2302      	movs	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002174:	2300      	movs	r3, #0
 8002176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800217a:	f107 0318 	add.w	r3, r7, #24
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fe86 	bl	8005e90 <HAL_RCCEx_PeriphCLKConfig>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800218a:	f7ff fb77 	bl	800187c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800218e:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_UART_MspInit+0x11c>)
 8002190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002194:	4a31      	ldr	r2, [pc, #196]	; (800225c <HAL_UART_MspInit+0x11c>)
 8002196:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800219a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b2:	4a2a      	ldr	r2, [pc, #168]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021bc:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	613b      	str	r3, [r7, #16]
 80021c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d0:	4a22      	ldr	r2, [pc, #136]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_UART_MspInit+0x11c>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e0:	f003 0301 	and.w	r3, r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0_C     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002202:	2308      	movs	r3, #8
 8002204:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002208:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800220c:	4619      	mov	r1, r3
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <HAL_UART_MspInit+0x120>)
 8002210:	f002 fc4c 	bl	8004aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002214:	2301      	movs	r3, #1
 8002216:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221a:	2302      	movs	r3, #2
 800221c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800222c:	2308      	movs	r3, #8
 800222e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002236:	4619      	mov	r1, r3
 8002238:	480a      	ldr	r0, [pc, #40]	; (8002264 <HAL_UART_MspInit+0x124>)
 800223a:	f002 fc37 	bl	8004aac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2105      	movs	r1, #5
 8002242:	2034      	movs	r0, #52	; 0x34
 8002244:	f000 f9d7 	bl	80025f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002248:	2034      	movs	r0, #52	; 0x34
 800224a:	f000 f9ee 	bl	800262a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800224e:	bf00      	nop
 8002250:	37e8      	adds	r7, #232	; 0xe8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40004c00 	.word	0x40004c00
 800225c:	58024400 	.word	0x58024400
 8002260:	58022000 	.word	0x58022000
 8002264:	58020000 	.word	0x58020000

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800226c:	f7ff fe34 	bl	8001ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	; (80022a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	; (80022ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	; (80022b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002296:	f010 fa89 	bl	80127ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7ff f92b 	bl	80014f4 <main>
  bx  lr
 800229e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80022a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80022a8:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80022ac:	080141f4 	.word	0x080141f4
  ldr r2, =_sbss
 80022b0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80022b4:	240028dc 	.word	0x240028dc

080022b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC3_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c2:	2003      	movs	r0, #3
 80022c4:	f000 f98c 	bl	80025e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022c8:	f003 fc0c 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 80022cc:	4602      	mov	r2, r0
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_Init+0x68>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	0a1b      	lsrs	r3, r3, #8
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	4913      	ldr	r1, [pc, #76]	; (8002328 <HAL_Init+0x6c>)
 80022da:	5ccb      	ldrb	r3, [r1, r3]
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	fa22 f303 	lsr.w	r3, r2, r3
 80022e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_Init+0x68>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <HAL_Init+0x6c>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	fa22 f303 	lsr.w	r3, r2, r3
 80022fc:	4a0b      	ldr	r2, [pc, #44]	; (800232c <HAL_Init+0x70>)
 80022fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_Init+0x74>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002306:	200f      	movs	r0, #15
 8002308:	f000 f814 	bl	8002334 <HAL_InitTick>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e002      	b.n	800231c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002316:	f7ff fcb3 	bl	8001c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	58024400 	.word	0x58024400
 8002328:	08013cb8 	.word	0x08013cb8
 800232c:	24000004 	.word	0x24000004
 8002330:	24000000 	.word	0x24000000

08002334 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800233c:	4b15      	ldr	r3, [pc, #84]	; (8002394 <HAL_InitTick+0x60>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d101      	bne.n	8002348 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e021      	b.n	800238c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002348:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_InitTick+0x64>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_InitTick+0x60>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4619      	mov	r1, r3
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	fbb3 f3f1 	udiv	r3, r3, r1
 800235a:	fbb2 f3f3 	udiv	r3, r2, r3
 800235e:	4618      	mov	r0, r3
 8002360:	f000 f971 	bl	8002646 <HAL_SYSTICK_Config>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e00e      	b.n	800238c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b0f      	cmp	r3, #15
 8002372:	d80a      	bhi.n	800238a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002374:	2200      	movs	r2, #0
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f000 f93b 	bl	80025f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <HAL_InitTick+0x68>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2400000c 	.word	0x2400000c
 8002398:	24000000 	.word	0x24000000
 800239c:	24000008 	.word	0x24000008

080023a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HAL_IncTick+0x20>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_IncTick+0x24>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4413      	add	r3, r2
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_IncTick+0x24>)
 80023b2:	6013      	str	r3, [r2, #0]
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	2400000c 	.word	0x2400000c
 80023c4:	24000398 	.word	0x24000398

080023c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return uwTick;
 80023cc:	4b03      	ldr	r3, [pc, #12]	; (80023dc <HAL_GetTick+0x14>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	24000398 	.word	0x24000398

080023e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff ffee 	bl	80023c8 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f8:	d005      	beq.n	8002406 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_Delay+0x44>)
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002406:	bf00      	nop
 8002408:	f7ff ffde 	bl	80023c8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	429a      	cmp	r2, r3
 8002416:	d8f7      	bhi.n	8002408 <HAL_Delay+0x28>
  {
  }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	2400000c 	.word	0x2400000c

08002428 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_GetREVID+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0c1b      	lsrs	r3, r3, #16
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	5c001000 	.word	0x5c001000

08002440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800245c:	4013      	ands	r3, r2
 800245e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <__NVIC_SetPriorityGrouping+0x40>)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	60d3      	str	r3, [r2, #12]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	05fa0000 	.word	0x05fa0000

08002488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <__NVIC_GetPriorityGrouping+0x18>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	f003 0307 	and.w	r3, r3, #7
}
 8002496:	4618      	mov	r0, r3
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	db0b      	blt.n	80024ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	f003 021f 	and.w	r2, r3, #31
 80024bc:	4907      	ldr	r1, [pc, #28]	; (80024dc <__NVIC_EnableIRQ+0x38>)
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	2001      	movs	r0, #1
 80024c6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	e000e100 	.word	0xe000e100

080024e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	6039      	str	r1, [r7, #0]
 80024ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80024ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db0a      	blt.n	800250a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	490c      	ldr	r1, [pc, #48]	; (800252c <__NVIC_SetPriority+0x4c>)
 80024fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024fe:	0112      	lsls	r2, r2, #4
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	440b      	add	r3, r1
 8002504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002508:	e00a      	b.n	8002520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4908      	ldr	r1, [pc, #32]	; (8002530 <__NVIC_SetPriority+0x50>)
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	3b04      	subs	r3, #4
 8002518:	0112      	lsls	r2, r2, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	440b      	add	r3, r1
 800251e:	761a      	strb	r2, [r3, #24]
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	e000e100 	.word	0xe000e100
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002534:	b480      	push	{r7}
 8002536:	b089      	sub	sp, #36	; 0x24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f1c3 0307 	rsb	r3, r3, #7
 800254e:	2b04      	cmp	r3, #4
 8002550:	bf28      	it	cs
 8002552:	2304      	movcs	r3, #4
 8002554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3304      	adds	r3, #4
 800255a:	2b06      	cmp	r3, #6
 800255c:	d902      	bls.n	8002564 <NVIC_EncodePriority+0x30>
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3b03      	subs	r3, #3
 8002562:	e000      	b.n	8002566 <NVIC_EncodePriority+0x32>
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 32ff 	mov.w	r2, #4294967295
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43da      	mvns	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	401a      	ands	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800257c:	f04f 31ff 	mov.w	r1, #4294967295
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	fa01 f303 	lsl.w	r3, r1, r3
 8002586:	43d9      	mvns	r1, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800258c:	4313      	orrs	r3, r2
         );
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
	...

0800259c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ac:	d301      	bcc.n	80025b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ae:	2301      	movs	r3, #1
 80025b0:	e00f      	b.n	80025d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <SysTick_Config+0x40>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ba:	210f      	movs	r1, #15
 80025bc:	f04f 30ff 	mov.w	r0, #4294967295
 80025c0:	f7ff ff8e 	bl	80024e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c4:	4b05      	ldr	r3, [pc, #20]	; (80025dc <SysTick_Config+0x40>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ca:	4b04      	ldr	r3, [pc, #16]	; (80025dc <SysTick_Config+0x40>)
 80025cc:	2207      	movs	r2, #7
 80025ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	e000e010 	.word	0xe000e010

080025e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff ff29 	bl	8002440 <__NVIC_SetPriorityGrouping>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b086      	sub	sp, #24
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	4603      	mov	r3, r0
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002604:	f7ff ff40 	bl	8002488 <__NVIC_GetPriorityGrouping>
 8002608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	6978      	ldr	r0, [r7, #20]
 8002610:	f7ff ff90 	bl	8002534 <NVIC_EncodePriority>
 8002614:	4602      	mov	r2, r0
 8002616:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff5f 	bl	80024e0 <__NVIC_SetPriority>
}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff33 	bl	80024a4 <__NVIC_EnableIRQ>
}
 800263e:	bf00      	nop
 8002640:	3708      	adds	r7, #8
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff ffa4 	bl	800259c <SysTick_Config>
 8002654:	4603      	mov	r3, r0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002668:	f7ff feae 	bl	80023c8 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d101      	bne.n	8002678 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e316      	b.n	8002ca6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_DMA_Init+0x1b8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d04a      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_DMA_Init+0x1bc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d045      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a63      	ldr	r2, [pc, #396]	; (8002820 <HAL_DMA_Init+0x1c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d040      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_DMA_Init+0x1c4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d03b      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <HAL_DMA_Init+0x1c8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d036      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMA_Init+0x1cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d031      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5d      	ldr	r2, [pc, #372]	; (8002830 <HAL_DMA_Init+0x1d0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d02c      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_DMA_Init+0x1d4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d027      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <HAL_DMA_Init+0x1d8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d022      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_DMA_Init+0x1dc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d01d      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_DMA_Init+0x1e0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d018      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a56      	ldr	r2, [pc, #344]	; (8002844 <HAL_DMA_Init+0x1e4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d013      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_DMA_Init+0x1e8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00e      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a53      	ldr	r2, [pc, #332]	; (800284c <HAL_DMA_Init+0x1ec>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d009      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_DMA_Init+0x1f0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d004      	beq.n	8002718 <HAL_DMA_Init+0xb8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_DMA_Init+0x1f4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d101      	bne.n	800271c <HAL_DMA_Init+0xbc>
 8002718:	2301      	movs	r3, #1
 800271a:	e000      	b.n	800271e <HAL_DMA_Init+0xbe>
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 813b 	beq.w	800299a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a37      	ldr	r2, [pc, #220]	; (8002818 <HAL_DMA_Init+0x1b8>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04a      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_DMA_Init+0x1bc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d045      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a34      	ldr	r2, [pc, #208]	; (8002820 <HAL_DMA_Init+0x1c0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a33      	ldr	r2, [pc, #204]	; (8002824 <HAL_DMA_Init+0x1c4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d03b      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a31      	ldr	r2, [pc, #196]	; (8002828 <HAL_DMA_Init+0x1c8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d036      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a30      	ldr	r2, [pc, #192]	; (800282c <HAL_DMA_Init+0x1cc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d031      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2e      	ldr	r2, [pc, #184]	; (8002830 <HAL_DMA_Init+0x1d0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02c      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_DMA_Init+0x1d4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d027      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <HAL_DMA_Init+0x1d8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2a      	ldr	r2, [pc, #168]	; (800283c <HAL_DMA_Init+0x1dc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01d      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a28      	ldr	r2, [pc, #160]	; (8002840 <HAL_DMA_Init+0x1e0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d018      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a27      	ldr	r2, [pc, #156]	; (8002844 <HAL_DMA_Init+0x1e4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a25      	ldr	r2, [pc, #148]	; (8002848 <HAL_DMA_Init+0x1e8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a24      	ldr	r2, [pc, #144]	; (800284c <HAL_DMA_Init+0x1ec>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a22      	ldr	r2, [pc, #136]	; (8002850 <HAL_DMA_Init+0x1f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_Init+0x174>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_DMA_Init+0x1f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <HAL_DMA_Init+0x186>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0201 	bic.w	r2, r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e007      	b.n	80027f6 <HAL_DMA_Init+0x196>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0201 	bic.w	r2, r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80027f6:	e02f      	b.n	8002858 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f8:	f7ff fde6 	bl	80023c8 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b05      	cmp	r3, #5
 8002804:	d928      	bls.n	8002858 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2220      	movs	r2, #32
 800280a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2203      	movs	r2, #3
 8002810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e246      	b.n	8002ca6 <HAL_DMA_Init+0x646>
 8002818:	40020010 	.word	0x40020010
 800281c:	40020028 	.word	0x40020028
 8002820:	40020040 	.word	0x40020040
 8002824:	40020058 	.word	0x40020058
 8002828:	40020070 	.word	0x40020070
 800282c:	40020088 	.word	0x40020088
 8002830:	400200a0 	.word	0x400200a0
 8002834:	400200b8 	.word	0x400200b8
 8002838:	40020410 	.word	0x40020410
 800283c:	40020428 	.word	0x40020428
 8002840:	40020440 	.word	0x40020440
 8002844:	40020458 	.word	0x40020458
 8002848:	40020470 	.word	0x40020470
 800284c:	40020488 	.word	0x40020488
 8002850:	400204a0 	.word	0x400204a0
 8002854:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1c8      	bne.n	80027f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <HAL_DMA_Init+0x420>)
 8002872:	4013      	ands	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800287e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d107      	bne.n	80028bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4313      	orrs	r3, r2
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80028bc:	4b71      	ldr	r3, [pc, #452]	; (8002a84 <HAL_DMA_Init+0x424>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b71      	ldr	r3, [pc, #452]	; (8002a88 <HAL_DMA_Init+0x428>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c8:	d328      	bcc.n	800291c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b28      	cmp	r3, #40	; 0x28
 80028d0:	d903      	bls.n	80028da <HAL_DMA_Init+0x27a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b2e      	cmp	r3, #46	; 0x2e
 80028d8:	d917      	bls.n	800290a <HAL_DMA_Init+0x2aa>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b3e      	cmp	r3, #62	; 0x3e
 80028e0:	d903      	bls.n	80028ea <HAL_DMA_Init+0x28a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b42      	cmp	r3, #66	; 0x42
 80028e8:	d90f      	bls.n	800290a <HAL_DMA_Init+0x2aa>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b46      	cmp	r3, #70	; 0x46
 80028f0:	d903      	bls.n	80028fa <HAL_DMA_Init+0x29a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b48      	cmp	r3, #72	; 0x48
 80028f8:	d907      	bls.n	800290a <HAL_DMA_Init+0x2aa>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b4e      	cmp	r3, #78	; 0x4e
 8002900:	d905      	bls.n	800290e <HAL_DMA_Init+0x2ae>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	2b52      	cmp	r3, #82	; 0x52
 8002908:	d801      	bhi.n	800290e <HAL_DMA_Init+0x2ae>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_DMA_Init+0x2b0>
 800290e:	2300      	movs	r3, #0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800291a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	697a      	ldr	r2, [r7, #20]
 8002922:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f023 0307 	bic.w	r3, r3, #7
 8002932:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b04      	cmp	r3, #4
 8002944:	d117      	bne.n	8002976 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294a:	697a      	ldr	r2, [r7, #20]
 800294c:	4313      	orrs	r3, r2
 800294e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f001 ff1d 	bl	8004798 <DMA_CheckFifoParam>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2240      	movs	r2, #64	; 0x40
 8002968:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e197      	b.n	8002ca6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f001 fe58 	bl	8004634 <DMA_CalcBaseAndBitshift>
 8002984:	4603      	mov	r3, r0
 8002986:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298c:	f003 031f 	and.w	r3, r3, #31
 8002990:	223f      	movs	r2, #63	; 0x3f
 8002992:	409a      	lsls	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	e0cd      	b.n	8002b36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a3b      	ldr	r2, [pc, #236]	; (8002a8c <HAL_DMA_Init+0x42c>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d022      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a39      	ldr	r2, [pc, #228]	; (8002a90 <HAL_DMA_Init+0x430>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d01d      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a38      	ldr	r2, [pc, #224]	; (8002a94 <HAL_DMA_Init+0x434>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a36      	ldr	r2, [pc, #216]	; (8002a98 <HAL_DMA_Init+0x438>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d013      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <HAL_DMA_Init+0x43c>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_DMA_Init+0x440>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d009      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a32      	ldr	r2, [pc, #200]	; (8002aa4 <HAL_DMA_Init+0x444>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_DMA_Init+0x38a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <HAL_DMA_Init+0x448>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_Init+0x38e>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_DMA_Init+0x390>
 80029ee:	2300      	movs	r3, #0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8097 	beq.w	8002b24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <HAL_DMA_Init+0x42c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d021      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_DMA_Init+0x430>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01c      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <HAL_DMA_Init+0x434>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d017      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_DMA_Init+0x438>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d012      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <HAL_DMA_Init+0x43c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d00d      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_DMA_Init+0x440>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d008      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a1b      	ldr	r2, [pc, #108]	; (8002aa4 <HAL_DMA_Init+0x444>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d003      	beq.n	8002a44 <HAL_DMA_Init+0x3e4>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a19      	ldr	r2, [pc, #100]	; (8002aa8 <HAL_DMA_Init+0x448>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_DMA_Init+0x44c>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d020      	beq.n	8002ab0 <HAL_DMA_Init+0x450>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d102      	bne.n	8002a7c <HAL_DMA_Init+0x41c>
 8002a76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a7a:	e01a      	b.n	8002ab2 <HAL_DMA_Init+0x452>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e018      	b.n	8002ab2 <HAL_DMA_Init+0x452>
 8002a80:	fe10803f 	.word	0xfe10803f
 8002a84:	5c001000 	.word	0x5c001000
 8002a88:	ffff0000 	.word	0xffff0000
 8002a8c:	58025408 	.word	0x58025408
 8002a90:	5802541c 	.word	0x5802541c
 8002a94:	58025430 	.word	0x58025430
 8002a98:	58025444 	.word	0x58025444
 8002a9c:	58025458 	.word	0x58025458
 8002aa0:	5802546c 	.word	0x5802546c
 8002aa4:	58025480 	.word	0x58025480
 8002aa8:	58025494 	.word	0x58025494
 8002aac:	fffe000f 	.word	0xfffe000f
 8002ab0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	68d2      	ldr	r2, [r2, #12]
 8002ab6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ab8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002ac0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ac8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ad0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ad8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ae0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <HAL_DMA_Init+0x650>)
 8002af8:	4413      	add	r3, r2
 8002afa:	4a6e      	ldr	r2, [pc, #440]	; (8002cb4 <HAL_DMA_Init+0x654>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	009a      	lsls	r2, r3, #2
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f001 fd93 	bl	8004634 <DMA_CalcBaseAndBitshift>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	e008      	b.n	8002b36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e0b7      	b.n	8002ca6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a5f      	ldr	r2, [pc, #380]	; (8002cb8 <HAL_DMA_Init+0x658>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d072      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a5d      	ldr	r2, [pc, #372]	; (8002cbc <HAL_DMA_Init+0x65c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d06d      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a5c      	ldr	r2, [pc, #368]	; (8002cc0 <HAL_DMA_Init+0x660>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d068      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a5a      	ldr	r2, [pc, #360]	; (8002cc4 <HAL_DMA_Init+0x664>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d063      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a59      	ldr	r2, [pc, #356]	; (8002cc8 <HAL_DMA_Init+0x668>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d05e      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <HAL_DMA_Init+0x66c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d059      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a56      	ldr	r2, [pc, #344]	; (8002cd0 <HAL_DMA_Init+0x670>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d054      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a54      	ldr	r2, [pc, #336]	; (8002cd4 <HAL_DMA_Init+0x674>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d04f      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a53      	ldr	r2, [pc, #332]	; (8002cd8 <HAL_DMA_Init+0x678>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d04a      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a51      	ldr	r2, [pc, #324]	; (8002cdc <HAL_DMA_Init+0x67c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d045      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a50      	ldr	r2, [pc, #320]	; (8002ce0 <HAL_DMA_Init+0x680>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d040      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a4e      	ldr	r2, [pc, #312]	; (8002ce4 <HAL_DMA_Init+0x684>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d03b      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <HAL_DMA_Init+0x688>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d036      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a4b      	ldr	r2, [pc, #300]	; (8002cec <HAL_DMA_Init+0x68c>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a4a      	ldr	r2, [pc, #296]	; (8002cf0 <HAL_DMA_Init+0x690>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d02c      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_DMA_Init+0x694>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d027      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a47      	ldr	r2, [pc, #284]	; (8002cf8 <HAL_DMA_Init+0x698>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d022      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <HAL_DMA_Init+0x69c>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a44      	ldr	r2, [pc, #272]	; (8002d00 <HAL_DMA_Init+0x6a0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d018      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a42      	ldr	r2, [pc, #264]	; (8002d04 <HAL_DMA_Init+0x6a4>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a41      	ldr	r2, [pc, #260]	; (8002d08 <HAL_DMA_Init+0x6a8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d00e      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a3f      	ldr	r2, [pc, #252]	; (8002d0c <HAL_DMA_Init+0x6ac>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d009      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a3e      	ldr	r2, [pc, #248]	; (8002d10 <HAL_DMA_Init+0x6b0>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d004      	beq.n	8002c26 <HAL_DMA_Init+0x5c6>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3c      	ldr	r2, [pc, #240]	; (8002d14 <HAL_DMA_Init+0x6b4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_DMA_Init+0x5ca>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_DMA_Init+0x5cc>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d032      	beq.n	8002c96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 fe2d 	bl	8004890 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d102      	bne.n	8002c44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002c58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d010      	beq.n	8002c84 <HAL_DMA_Init+0x624>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d80c      	bhi.n	8002c84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f001 feaa 	bl	80049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c80:	605a      	str	r2, [r3, #4]
 8002c82:	e008      	b.n	8002c96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	a7fdabf8 	.word	0xa7fdabf8
 8002cb4:	cccccccd 	.word	0xcccccccd
 8002cb8:	40020010 	.word	0x40020010
 8002cbc:	40020028 	.word	0x40020028
 8002cc0:	40020040 	.word	0x40020040
 8002cc4:	40020058 	.word	0x40020058
 8002cc8:	40020070 	.word	0x40020070
 8002ccc:	40020088 	.word	0x40020088
 8002cd0:	400200a0 	.word	0x400200a0
 8002cd4:	400200b8 	.word	0x400200b8
 8002cd8:	40020410 	.word	0x40020410
 8002cdc:	40020428 	.word	0x40020428
 8002ce0:	40020440 	.word	0x40020440
 8002ce4:	40020458 	.word	0x40020458
 8002ce8:	40020470 	.word	0x40020470
 8002cec:	40020488 	.word	0x40020488
 8002cf0:	400204a0 	.word	0x400204a0
 8002cf4:	400204b8 	.word	0x400204b8
 8002cf8:	58025408 	.word	0x58025408
 8002cfc:	5802541c 	.word	0x5802541c
 8002d00:	58025430 	.word	0x58025430
 8002d04:	58025444 	.word	0x58025444
 8002d08:	58025458 	.word	0x58025458
 8002d0c:	5802546c 	.word	0x5802546c
 8002d10:	58025480 	.word	0x58025480
 8002d14:	58025494 	.word	0x58025494

08002d18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002d20:	f7ff fb52 	bl	80023c8 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e2dc      	b.n	80032ea <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d008      	beq.n	8002d4e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e2cd      	b.n	80032ea <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a76      	ldr	r2, [pc, #472]	; (8002f2c <HAL_DMA_Abort+0x214>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d04a      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a74      	ldr	r2, [pc, #464]	; (8002f30 <HAL_DMA_Abort+0x218>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d045      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a73      	ldr	r2, [pc, #460]	; (8002f34 <HAL_DMA_Abort+0x21c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d040      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a71      	ldr	r2, [pc, #452]	; (8002f38 <HAL_DMA_Abort+0x220>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d03b      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a70      	ldr	r2, [pc, #448]	; (8002f3c <HAL_DMA_Abort+0x224>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d036      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_DMA_Abort+0x228>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d031      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a6d      	ldr	r2, [pc, #436]	; (8002f44 <HAL_DMA_Abort+0x22c>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d02c      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a6b      	ldr	r2, [pc, #428]	; (8002f48 <HAL_DMA_Abort+0x230>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d027      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a6a      	ldr	r2, [pc, #424]	; (8002f4c <HAL_DMA_Abort+0x234>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d022      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a68      	ldr	r2, [pc, #416]	; (8002f50 <HAL_DMA_Abort+0x238>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d01d      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a67      	ldr	r2, [pc, #412]	; (8002f54 <HAL_DMA_Abort+0x23c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d018      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a65      	ldr	r2, [pc, #404]	; (8002f58 <HAL_DMA_Abort+0x240>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a64      	ldr	r2, [pc, #400]	; (8002f5c <HAL_DMA_Abort+0x244>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d00e      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a62      	ldr	r2, [pc, #392]	; (8002f60 <HAL_DMA_Abort+0x248>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d009      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a61      	ldr	r2, [pc, #388]	; (8002f64 <HAL_DMA_Abort+0x24c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_DMA_Abort+0xd6>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5f      	ldr	r2, [pc, #380]	; (8002f68 <HAL_DMA_Abort+0x250>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_DMA_Abort+0xda>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_DMA_Abort+0xdc>
 8002df2:	2300      	movs	r3, #0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 021e 	bic.w	r2, r2, #30
 8002e06:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e16:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	617b      	str	r3, [r7, #20]
 8002e1e:	e00a      	b.n	8002e36 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 020e 	bic.w	r2, r2, #14
 8002e2e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3c      	ldr	r2, [pc, #240]	; (8002f2c <HAL_DMA_Abort+0x214>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d072      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3a      	ldr	r2, [pc, #232]	; (8002f30 <HAL_DMA_Abort+0x218>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d06d      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a39      	ldr	r2, [pc, #228]	; (8002f34 <HAL_DMA_Abort+0x21c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d068      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a37      	ldr	r2, [pc, #220]	; (8002f38 <HAL_DMA_Abort+0x220>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d063      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a36      	ldr	r2, [pc, #216]	; (8002f3c <HAL_DMA_Abort+0x224>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d05e      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <HAL_DMA_Abort+0x228>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d059      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a33      	ldr	r2, [pc, #204]	; (8002f44 <HAL_DMA_Abort+0x22c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d054      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a31      	ldr	r2, [pc, #196]	; (8002f48 <HAL_DMA_Abort+0x230>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d04f      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a30      	ldr	r2, [pc, #192]	; (8002f4c <HAL_DMA_Abort+0x234>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d04a      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <HAL_DMA_Abort+0x238>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d045      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a2d      	ldr	r2, [pc, #180]	; (8002f54 <HAL_DMA_Abort+0x23c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d040      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a2b      	ldr	r2, [pc, #172]	; (8002f58 <HAL_DMA_Abort+0x240>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d03b      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a2a      	ldr	r2, [pc, #168]	; (8002f5c <HAL_DMA_Abort+0x244>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d036      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a28      	ldr	r2, [pc, #160]	; (8002f60 <HAL_DMA_Abort+0x248>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d031      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a27      	ldr	r2, [pc, #156]	; (8002f64 <HAL_DMA_Abort+0x24c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d02c      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <HAL_DMA_Abort+0x250>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d027      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a24      	ldr	r2, [pc, #144]	; (8002f6c <HAL_DMA_Abort+0x254>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d022      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_DMA_Abort+0x258>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d01d      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_DMA_Abort+0x25c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d018      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_DMA_Abort+0x260>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_DMA_Abort+0x264>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_DMA_Abort+0x268>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_DMA_Abort+0x26c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_DMA_Abort+0x20e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_DMA_Abort+0x270>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d132      	bne.n	8002f8c <HAL_DMA_Abort+0x274>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e031      	b.n	8002f8e <HAL_DMA_Abort+0x276>
 8002f2a:	bf00      	nop
 8002f2c:	40020010 	.word	0x40020010
 8002f30:	40020028 	.word	0x40020028
 8002f34:	40020040 	.word	0x40020040
 8002f38:	40020058 	.word	0x40020058
 8002f3c:	40020070 	.word	0x40020070
 8002f40:	40020088 	.word	0x40020088
 8002f44:	400200a0 	.word	0x400200a0
 8002f48:	400200b8 	.word	0x400200b8
 8002f4c:	40020410 	.word	0x40020410
 8002f50:	40020428 	.word	0x40020428
 8002f54:	40020440 	.word	0x40020440
 8002f58:	40020458 	.word	0x40020458
 8002f5c:	40020470 	.word	0x40020470
 8002f60:	40020488 	.word	0x40020488
 8002f64:	400204a0 	.word	0x400204a0
 8002f68:	400204b8 	.word	0x400204b8
 8002f6c:	58025408 	.word	0x58025408
 8002f70:	5802541c 	.word	0x5802541c
 8002f74:	58025430 	.word	0x58025430
 8002f78:	58025444 	.word	0x58025444
 8002f7c:	58025458 	.word	0x58025458
 8002f80:	5802546c 	.word	0x5802546c
 8002f84:	58025480 	.word	0x58025480
 8002f88:	58025494 	.word	0x58025494
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d007      	beq.n	8002fa2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6d      	ldr	r2, [pc, #436]	; (800315c <HAL_DMA_Abort+0x444>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d04a      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a6b      	ldr	r2, [pc, #428]	; (8003160 <HAL_DMA_Abort+0x448>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d045      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6a      	ldr	r2, [pc, #424]	; (8003164 <HAL_DMA_Abort+0x44c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d040      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a68      	ldr	r2, [pc, #416]	; (8003168 <HAL_DMA_Abort+0x450>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d03b      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a67      	ldr	r2, [pc, #412]	; (800316c <HAL_DMA_Abort+0x454>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d036      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a65      	ldr	r2, [pc, #404]	; (8003170 <HAL_DMA_Abort+0x458>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d031      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a64      	ldr	r2, [pc, #400]	; (8003174 <HAL_DMA_Abort+0x45c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d02c      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a62      	ldr	r2, [pc, #392]	; (8003178 <HAL_DMA_Abort+0x460>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d027      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a61      	ldr	r2, [pc, #388]	; (800317c <HAL_DMA_Abort+0x464>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d022      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a5f      	ldr	r2, [pc, #380]	; (8003180 <HAL_DMA_Abort+0x468>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01d      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a5e      	ldr	r2, [pc, #376]	; (8003184 <HAL_DMA_Abort+0x46c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d018      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a5c      	ldr	r2, [pc, #368]	; (8003188 <HAL_DMA_Abort+0x470>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a5b      	ldr	r2, [pc, #364]	; (800318c <HAL_DMA_Abort+0x474>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00e      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a59      	ldr	r2, [pc, #356]	; (8003190 <HAL_DMA_Abort+0x478>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d009      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a58      	ldr	r2, [pc, #352]	; (8003194 <HAL_DMA_Abort+0x47c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d004      	beq.n	8003042 <HAL_DMA_Abort+0x32a>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a56      	ldr	r2, [pc, #344]	; (8003198 <HAL_DMA_Abort+0x480>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <HAL_DMA_Abort+0x33c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e007      	b.n	8003064 <HAL_DMA_Abort+0x34c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003064:	e013      	b.n	800308e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003066:	f7ff f9af 	bl	80023c8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b05      	cmp	r3, #5
 8003072:	d90c      	bls.n	800308e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2203      	movs	r2, #3
 800307e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e12d      	b.n	80032ea <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1e5      	bne.n	8003066 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a2f      	ldr	r2, [pc, #188]	; (800315c <HAL_DMA_Abort+0x444>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d04a      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a2d      	ldr	r2, [pc, #180]	; (8003160 <HAL_DMA_Abort+0x448>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d045      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a2c      	ldr	r2, [pc, #176]	; (8003164 <HAL_DMA_Abort+0x44c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d040      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a2a      	ldr	r2, [pc, #168]	; (8003168 <HAL_DMA_Abort+0x450>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d03b      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a29      	ldr	r2, [pc, #164]	; (800316c <HAL_DMA_Abort+0x454>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d036      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <HAL_DMA_Abort+0x458>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d031      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a26      	ldr	r2, [pc, #152]	; (8003174 <HAL_DMA_Abort+0x45c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d02c      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a24      	ldr	r2, [pc, #144]	; (8003178 <HAL_DMA_Abort+0x460>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d027      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a23      	ldr	r2, [pc, #140]	; (800317c <HAL_DMA_Abort+0x464>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d022      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a21      	ldr	r2, [pc, #132]	; (8003180 <HAL_DMA_Abort+0x468>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d01d      	beq.n	800313a <HAL_DMA_Abort+0x422>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a20      	ldr	r2, [pc, #128]	; (8003184 <HAL_DMA_Abort+0x46c>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d018      	beq.n	800313a <HAL_DMA_Abort+0x422>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <HAL_DMA_Abort+0x470>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d013      	beq.n	800313a <HAL_DMA_Abort+0x422>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_DMA_Abort+0x474>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00e      	beq.n	800313a <HAL_DMA_Abort+0x422>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <HAL_DMA_Abort+0x478>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_DMA_Abort+0x422>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_DMA_Abort+0x47c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d004      	beq.n	800313a <HAL_DMA_Abort+0x422>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <HAL_DMA_Abort+0x480>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_DMA_Abort+0x426>
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_DMA_Abort+0x428>
 800313e:	2300      	movs	r3, #0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02b      	beq.n	800319c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003148:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	223f      	movs	r2, #63	; 0x3f
 8003154:	409a      	lsls	r2, r3
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	e02a      	b.n	80031b2 <HAL_DMA_Abort+0x49a>
 800315c:	40020010 	.word	0x40020010
 8003160:	40020028 	.word	0x40020028
 8003164:	40020040 	.word	0x40020040
 8003168:	40020058 	.word	0x40020058
 800316c:	40020070 	.word	0x40020070
 8003170:	40020088 	.word	0x40020088
 8003174:	400200a0 	.word	0x400200a0
 8003178:	400200b8 	.word	0x400200b8
 800317c:	40020410 	.word	0x40020410
 8003180:	40020428 	.word	0x40020428
 8003184:	40020440 	.word	0x40020440
 8003188:	40020458 	.word	0x40020458
 800318c:	40020470 	.word	0x40020470
 8003190:	40020488 	.word	0x40020488
 8003194:	400204a0 	.word	0x400204a0
 8003198:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	2201      	movs	r2, #1
 80031ac:	409a      	lsls	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a4f      	ldr	r2, [pc, #316]	; (80032f4 <HAL_DMA_Abort+0x5dc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d072      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4d      	ldr	r2, [pc, #308]	; (80032f8 <HAL_DMA_Abort+0x5e0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d06d      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4c      	ldr	r2, [pc, #304]	; (80032fc <HAL_DMA_Abort+0x5e4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d068      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_DMA_Abort+0x5e8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d063      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a49      	ldr	r2, [pc, #292]	; (8003304 <HAL_DMA_Abort+0x5ec>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d05e      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a47      	ldr	r2, [pc, #284]	; (8003308 <HAL_DMA_Abort+0x5f0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d059      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a46      	ldr	r2, [pc, #280]	; (800330c <HAL_DMA_Abort+0x5f4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d054      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a44      	ldr	r2, [pc, #272]	; (8003310 <HAL_DMA_Abort+0x5f8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04f      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a43      	ldr	r2, [pc, #268]	; (8003314 <HAL_DMA_Abort+0x5fc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d04a      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a41      	ldr	r2, [pc, #260]	; (8003318 <HAL_DMA_Abort+0x600>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d045      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a40      	ldr	r2, [pc, #256]	; (800331c <HAL_DMA_Abort+0x604>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d040      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a3e      	ldr	r2, [pc, #248]	; (8003320 <HAL_DMA_Abort+0x608>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d03b      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a3d      	ldr	r2, [pc, #244]	; (8003324 <HAL_DMA_Abort+0x60c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d036      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a3b      	ldr	r2, [pc, #236]	; (8003328 <HAL_DMA_Abort+0x610>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d031      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_DMA_Abort+0x614>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d02c      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a38      	ldr	r2, [pc, #224]	; (8003330 <HAL_DMA_Abort+0x618>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_DMA_Abort+0x61c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d022      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a35      	ldr	r2, [pc, #212]	; (8003338 <HAL_DMA_Abort+0x620>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d01d      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a34      	ldr	r2, [pc, #208]	; (800333c <HAL_DMA_Abort+0x624>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d018      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a32      	ldr	r2, [pc, #200]	; (8003340 <HAL_DMA_Abort+0x628>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d013      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_DMA_Abort+0x62c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <HAL_DMA_Abort+0x630>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d009      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a2e      	ldr	r2, [pc, #184]	; (800334c <HAL_DMA_Abort+0x634>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d004      	beq.n	80032a2 <HAL_DMA_Abort+0x58a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2c      	ldr	r2, [pc, #176]	; (8003350 <HAL_DMA_Abort+0x638>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d101      	bne.n	80032a6 <HAL_DMA_Abort+0x58e>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_Abort+0x590>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d015      	beq.n	80032d8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80032b4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00c      	beq.n	80032d8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032cc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032d6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	40020040 	.word	0x40020040
 8003300:	40020058 	.word	0x40020058
 8003304:	40020070 	.word	0x40020070
 8003308:	40020088 	.word	0x40020088
 800330c:	400200a0 	.word	0x400200a0
 8003310:	400200b8 	.word	0x400200b8
 8003314:	40020410 	.word	0x40020410
 8003318:	40020428 	.word	0x40020428
 800331c:	40020440 	.word	0x40020440
 8003320:	40020458 	.word	0x40020458
 8003324:	40020470 	.word	0x40020470
 8003328:	40020488 	.word	0x40020488
 800332c:	400204a0 	.word	0x400204a0
 8003330:	400204b8 	.word	0x400204b8
 8003334:	58025408 	.word	0x58025408
 8003338:	5802541c 	.word	0x5802541c
 800333c:	58025430 	.word	0x58025430
 8003340:	58025444 	.word	0x58025444
 8003344:	58025458 	.word	0x58025458
 8003348:	5802546c 	.word	0x5802546c
 800334c:	58025480 	.word	0x58025480
 8003350:	58025494 	.word	0x58025494

08003354 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e237      	b.n	80037d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2280      	movs	r2, #128	; 0x80
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e22c      	b.n	80037d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a5c      	ldr	r2, [pc, #368]	; (80034f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d04a      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_DMA_Abort_IT+0x1a4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d045      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a59      	ldr	r2, [pc, #356]	; (80034fc <HAL_DMA_Abort_IT+0x1a8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d040      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_DMA_Abort_IT+0x1ac>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d03b      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a56      	ldr	r2, [pc, #344]	; (8003504 <HAL_DMA_Abort_IT+0x1b0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d036      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a55      	ldr	r2, [pc, #340]	; (8003508 <HAL_DMA_Abort_IT+0x1b4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d031      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a53      	ldr	r2, [pc, #332]	; (800350c <HAL_DMA_Abort_IT+0x1b8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d02c      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a52      	ldr	r2, [pc, #328]	; (8003510 <HAL_DMA_Abort_IT+0x1bc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d027      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a50      	ldr	r2, [pc, #320]	; (8003514 <HAL_DMA_Abort_IT+0x1c0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d022      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4f      	ldr	r2, [pc, #316]	; (8003518 <HAL_DMA_Abort_IT+0x1c4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d01d      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a4d      	ldr	r2, [pc, #308]	; (800351c <HAL_DMA_Abort_IT+0x1c8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d018      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4c      	ldr	r2, [pc, #304]	; (8003520 <HAL_DMA_Abort_IT+0x1cc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d013      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4a      	ldr	r2, [pc, #296]	; (8003524 <HAL_DMA_Abort_IT+0x1d0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00e      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a49      	ldr	r2, [pc, #292]	; (8003528 <HAL_DMA_Abort_IT+0x1d4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a47      	ldr	r2, [pc, #284]	; (800352c <HAL_DMA_Abort_IT+0x1d8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d004      	beq.n	800341c <HAL_DMA_Abort_IT+0xc8>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a46      	ldr	r2, [pc, #280]	; (8003530 <HAL_DMA_Abort_IT+0x1dc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <HAL_DMA_Abort_IT+0xcc>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_DMA_Abort_IT+0xce>
 8003420:	2300      	movs	r3, #0
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8086 	beq.w	8003534 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2204      	movs	r2, #4
 800342c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <HAL_DMA_Abort_IT+0x1a0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04a      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2e      	ldr	r2, [pc, #184]	; (80034f8 <HAL_DMA_Abort_IT+0x1a4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d045      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <HAL_DMA_Abort_IT+0x1a8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d040      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2b      	ldr	r2, [pc, #172]	; (8003500 <HAL_DMA_Abort_IT+0x1ac>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d03b      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_DMA_Abort_IT+0x1b0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d036      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a28      	ldr	r2, [pc, #160]	; (8003508 <HAL_DMA_Abort_IT+0x1b4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d031      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a26      	ldr	r2, [pc, #152]	; (800350c <HAL_DMA_Abort_IT+0x1b8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02c      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a25      	ldr	r2, [pc, #148]	; (8003510 <HAL_DMA_Abort_IT+0x1bc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d027      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_DMA_Abort_IT+0x1c0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a22      	ldr	r2, [pc, #136]	; (8003518 <HAL_DMA_Abort_IT+0x1c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d01d      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a20      	ldr	r2, [pc, #128]	; (800351c <HAL_DMA_Abort_IT+0x1c8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1f      	ldr	r2, [pc, #124]	; (8003520 <HAL_DMA_Abort_IT+0x1cc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_DMA_Abort_IT+0x1d0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	; (8003528 <HAL_DMA_Abort_IT+0x1d4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a1a      	ldr	r2, [pc, #104]	; (800352c <HAL_DMA_Abort_IT+0x1d8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_DMA_Abort_IT+0x17c>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a19      	ldr	r2, [pc, #100]	; (8003530 <HAL_DMA_Abort_IT+0x1dc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d108      	bne.n	80034e2 <HAL_DMA_Abort_IT+0x18e>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e178      	b.n	80037d4 <HAL_DMA_Abort_IT+0x480>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0201 	bic.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	e16f      	b.n	80037d4 <HAL_DMA_Abort_IT+0x480>
 80034f4:	40020010 	.word	0x40020010
 80034f8:	40020028 	.word	0x40020028
 80034fc:	40020040 	.word	0x40020040
 8003500:	40020058 	.word	0x40020058
 8003504:	40020070 	.word	0x40020070
 8003508:	40020088 	.word	0x40020088
 800350c:	400200a0 	.word	0x400200a0
 8003510:	400200b8 	.word	0x400200b8
 8003514:	40020410 	.word	0x40020410
 8003518:	40020428 	.word	0x40020428
 800351c:	40020440 	.word	0x40020440
 8003520:	40020458 	.word	0x40020458
 8003524:	40020470 	.word	0x40020470
 8003528:	40020488 	.word	0x40020488
 800352c:	400204a0 	.word	0x400204a0
 8003530:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 020e 	bic.w	r2, r2, #14
 8003542:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a6c      	ldr	r2, [pc, #432]	; (80036fc <HAL_DMA_Abort_IT+0x3a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d04a      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a6b      	ldr	r2, [pc, #428]	; (8003700 <HAL_DMA_Abort_IT+0x3ac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d045      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_DMA_Abort_IT+0x3b0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d040      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a68      	ldr	r2, [pc, #416]	; (8003708 <HAL_DMA_Abort_IT+0x3b4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d03b      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a66      	ldr	r2, [pc, #408]	; (800370c <HAL_DMA_Abort_IT+0x3b8>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d036      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a65      	ldr	r2, [pc, #404]	; (8003710 <HAL_DMA_Abort_IT+0x3bc>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d031      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a63      	ldr	r2, [pc, #396]	; (8003714 <HAL_DMA_Abort_IT+0x3c0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d02c      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a62      	ldr	r2, [pc, #392]	; (8003718 <HAL_DMA_Abort_IT+0x3c4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d027      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a60      	ldr	r2, [pc, #384]	; (800371c <HAL_DMA_Abort_IT+0x3c8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d022      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5f      	ldr	r2, [pc, #380]	; (8003720 <HAL_DMA_Abort_IT+0x3cc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d01d      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a5d      	ldr	r2, [pc, #372]	; (8003724 <HAL_DMA_Abort_IT+0x3d0>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d018      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a5c      	ldr	r2, [pc, #368]	; (8003728 <HAL_DMA_Abort_IT+0x3d4>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d013      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a5a      	ldr	r2, [pc, #360]	; (800372c <HAL_DMA_Abort_IT+0x3d8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00e      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a59      	ldr	r2, [pc, #356]	; (8003730 <HAL_DMA_Abort_IT+0x3dc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d009      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a57      	ldr	r2, [pc, #348]	; (8003734 <HAL_DMA_Abort_IT+0x3e0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_DMA_Abort_IT+0x290>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a56      	ldr	r2, [pc, #344]	; (8003738 <HAL_DMA_Abort_IT+0x3e4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d108      	bne.n	80035f6 <HAL_DMA_Abort_IT+0x2a2>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0201 	bic.w	r2, r2, #1
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e007      	b.n	8003606 <HAL_DMA_Abort_IT+0x2b2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0201 	bic.w	r2, r2, #1
 8003604:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3c      	ldr	r2, [pc, #240]	; (80036fc <HAL_DMA_Abort_IT+0x3a8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d072      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3a      	ldr	r2, [pc, #232]	; (8003700 <HAL_DMA_Abort_IT+0x3ac>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d06d      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a39      	ldr	r2, [pc, #228]	; (8003704 <HAL_DMA_Abort_IT+0x3b0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d068      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a37      	ldr	r2, [pc, #220]	; (8003708 <HAL_DMA_Abort_IT+0x3b4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d063      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a36      	ldr	r2, [pc, #216]	; (800370c <HAL_DMA_Abort_IT+0x3b8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d05e      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a34      	ldr	r2, [pc, #208]	; (8003710 <HAL_DMA_Abort_IT+0x3bc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d059      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a33      	ldr	r2, [pc, #204]	; (8003714 <HAL_DMA_Abort_IT+0x3c0>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d054      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a31      	ldr	r2, [pc, #196]	; (8003718 <HAL_DMA_Abort_IT+0x3c4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d04f      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a30      	ldr	r2, [pc, #192]	; (800371c <HAL_DMA_Abort_IT+0x3c8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d04a      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a2e      	ldr	r2, [pc, #184]	; (8003720 <HAL_DMA_Abort_IT+0x3cc>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d045      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <HAL_DMA_Abort_IT+0x3d0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d040      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2b      	ldr	r2, [pc, #172]	; (8003728 <HAL_DMA_Abort_IT+0x3d4>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d03b      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2a      	ldr	r2, [pc, #168]	; (800372c <HAL_DMA_Abort_IT+0x3d8>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d036      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a28      	ldr	r2, [pc, #160]	; (8003730 <HAL_DMA_Abort_IT+0x3dc>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d031      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_DMA_Abort_IT+0x3e0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d02c      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a25      	ldr	r2, [pc, #148]	; (8003738 <HAL_DMA_Abort_IT+0x3e4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d027      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a24      	ldr	r2, [pc, #144]	; (800373c <HAL_DMA_Abort_IT+0x3e8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d022      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a22      	ldr	r2, [pc, #136]	; (8003740 <HAL_DMA_Abort_IT+0x3ec>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d01d      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a21      	ldr	r2, [pc, #132]	; (8003744 <HAL_DMA_Abort_IT+0x3f0>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d018      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <HAL_DMA_Abort_IT+0x3f4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1e      	ldr	r2, [pc, #120]	; (800374c <HAL_DMA_Abort_IT+0x3f8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1c      	ldr	r2, [pc, #112]	; (8003750 <HAL_DMA_Abort_IT+0x3fc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1b      	ldr	r2, [pc, #108]	; (8003754 <HAL_DMA_Abort_IT+0x400>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_DMA_Abort_IT+0x3a2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_DMA_Abort_IT+0x404>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d132      	bne.n	800375c <HAL_DMA_Abort_IT+0x408>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e031      	b.n	800375e <HAL_DMA_Abort_IT+0x40a>
 80036fa:	bf00      	nop
 80036fc:	40020010 	.word	0x40020010
 8003700:	40020028 	.word	0x40020028
 8003704:	40020040 	.word	0x40020040
 8003708:	40020058 	.word	0x40020058
 800370c:	40020070 	.word	0x40020070
 8003710:	40020088 	.word	0x40020088
 8003714:	400200a0 	.word	0x400200a0
 8003718:	400200b8 	.word	0x400200b8
 800371c:	40020410 	.word	0x40020410
 8003720:	40020428 	.word	0x40020428
 8003724:	40020440 	.word	0x40020440
 8003728:	40020458 	.word	0x40020458
 800372c:	40020470 	.word	0x40020470
 8003730:	40020488 	.word	0x40020488
 8003734:	400204a0 	.word	0x400204a0
 8003738:	400204b8 	.word	0x400204b8
 800373c:	58025408 	.word	0x58025408
 8003740:	5802541c 	.word	0x5802541c
 8003744:	58025430 	.word	0x58025430
 8003748:	58025444 	.word	0x58025444
 800374c:	58025458 	.word	0x58025458
 8003750:	5802546c 	.word	0x5802546c
 8003754:	58025480 	.word	0x58025480
 8003758:	58025494 	.word	0x58025494
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d028      	beq.n	80037b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800376c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003770:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	f003 031f 	and.w	r3, r3, #31
 8003780:	2201      	movs	r2, #1
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003790:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00c      	beq.n	80037b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80037b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop

080037e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08a      	sub	sp, #40	; 0x28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ec:	4b67      	ldr	r3, [pc, #412]	; (800398c <HAL_DMA_IRQHandler+0x1ac>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a67      	ldr	r2, [pc, #412]	; (8003990 <HAL_DMA_IRQHandler+0x1b0>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0a9b      	lsrs	r3, r3, #10
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003804:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a5f      	ldr	r2, [pc, #380]	; (8003994 <HAL_DMA_IRQHandler+0x1b4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d04a      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <HAL_DMA_IRQHandler+0x1b8>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d045      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a5c      	ldr	r2, [pc, #368]	; (800399c <HAL_DMA_IRQHandler+0x1bc>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d040      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_DMA_IRQHandler+0x1c0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d03b      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a59      	ldr	r2, [pc, #356]	; (80039a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d036      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_DMA_IRQHandler+0x1c8>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d031      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_DMA_IRQHandler+0x1cc>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d02c      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a54      	ldr	r2, [pc, #336]	; (80039b0 <HAL_DMA_IRQHandler+0x1d0>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d027      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a53      	ldr	r2, [pc, #332]	; (80039b4 <HAL_DMA_IRQHandler+0x1d4>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d022      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d01d      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_DMA_IRQHandler+0x1dc>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d018      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a4e      	ldr	r2, [pc, #312]	; (80039c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4d      	ldr	r2, [pc, #308]	; (80039c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00e      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4b      	ldr	r2, [pc, #300]	; (80039c8 <HAL_DMA_IRQHandler+0x1e8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a4a      	ldr	r2, [pc, #296]	; (80039cc <HAL_DMA_IRQHandler+0x1ec>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_IRQHandler+0xd2>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a48      	ldr	r2, [pc, #288]	; (80039d0 <HAL_DMA_IRQHandler+0x1f0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d101      	bne.n	80038b6 <HAL_DMA_IRQHandler+0xd6>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e000      	b.n	80038b8 <HAL_DMA_IRQHandler+0xd8>
 80038b6:	2300      	movs	r3, #0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 842b 	beq.w	8004114 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2208      	movs	r2, #8
 80038c8:	409a      	lsls	r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f000 80a2 	beq.w	8003a18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a2e      	ldr	r2, [pc, #184]	; (8003994 <HAL_DMA_IRQHandler+0x1b4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d04a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a2d      	ldr	r2, [pc, #180]	; (8003998 <HAL_DMA_IRQHandler+0x1b8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d045      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	; (800399c <HAL_DMA_IRQHandler+0x1bc>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d040      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <HAL_DMA_IRQHandler+0x1c0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d03b      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a28      	ldr	r2, [pc, #160]	; (80039a4 <HAL_DMA_IRQHandler+0x1c4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d036      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a27      	ldr	r2, [pc, #156]	; (80039a8 <HAL_DMA_IRQHandler+0x1c8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d031      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a25      	ldr	r2, [pc, #148]	; (80039ac <HAL_DMA_IRQHandler+0x1cc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d02c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <HAL_DMA_IRQHandler+0x1d0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d027      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a22      	ldr	r2, [pc, #136]	; (80039b4 <HAL_DMA_IRQHandler+0x1d4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d022      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a21      	ldr	r2, [pc, #132]	; (80039b8 <HAL_DMA_IRQHandler+0x1d8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d01d      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_DMA_IRQHandler+0x1dc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d018      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <HAL_DMA_IRQHandler+0x1e0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1c      	ldr	r2, [pc, #112]	; (80039c4 <HAL_DMA_IRQHandler+0x1e4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00e      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1b      	ldr	r2, [pc, #108]	; (80039c8 <HAL_DMA_IRQHandler+0x1e8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d009      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a19      	ldr	r2, [pc, #100]	; (80039cc <HAL_DMA_IRQHandler+0x1ec>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_DMA_IRQHandler+0x194>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_DMA_IRQHandler+0x1f0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d12f      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x1f4>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	bf14      	ite	ne
 8003982:	2301      	movne	r3, #1
 8003984:	2300      	moveq	r3, #0
 8003986:	b2db      	uxtb	r3, r3
 8003988:	e02e      	b.n	80039e8 <HAL_DMA_IRQHandler+0x208>
 800398a:	bf00      	nop
 800398c:	24000000 	.word	0x24000000
 8003990:	1b4e81b5 	.word	0x1b4e81b5
 8003994:	40020010 	.word	0x40020010
 8003998:	40020028 	.word	0x40020028
 800399c:	40020040 	.word	0x40020040
 80039a0:	40020058 	.word	0x40020058
 80039a4:	40020070 	.word	0x40020070
 80039a8:	40020088 	.word	0x40020088
 80039ac:	400200a0 	.word	0x400200a0
 80039b0:	400200b8 	.word	0x400200b8
 80039b4:	40020410 	.word	0x40020410
 80039b8:	40020428 	.word	0x40020428
 80039bc:	40020440 	.word	0x40020440
 80039c0:	40020458 	.word	0x40020458
 80039c4:	40020470 	.word	0x40020470
 80039c8:	40020488 	.word	0x40020488
 80039cc:	400204a0 	.word	0x400204a0
 80039d0:	400204b8 	.word	0x400204b8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d015      	beq.n	8003a18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0204 	bic.w	r2, r2, #4
 80039fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	2208      	movs	r2, #8
 8003a06:	409a      	lsls	r2, r3
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a10:	f043 0201 	orr.w	r2, r3, #1
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d06e      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a69      	ldr	r2, [pc, #420]	; (8003bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d04a      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a67      	ldr	r2, [pc, #412]	; (8003bdc <HAL_DMA_IRQHandler+0x3fc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d045      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a66      	ldr	r2, [pc, #408]	; (8003be0 <HAL_DMA_IRQHandler+0x400>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d040      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a64      	ldr	r2, [pc, #400]	; (8003be4 <HAL_DMA_IRQHandler+0x404>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d03b      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a63      	ldr	r2, [pc, #396]	; (8003be8 <HAL_DMA_IRQHandler+0x408>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d036      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a61      	ldr	r2, [pc, #388]	; (8003bec <HAL_DMA_IRQHandler+0x40c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d031      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a60      	ldr	r2, [pc, #384]	; (8003bf0 <HAL_DMA_IRQHandler+0x410>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d02c      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5e      	ldr	r2, [pc, #376]	; (8003bf4 <HAL_DMA_IRQHandler+0x414>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d027      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5d      	ldr	r2, [pc, #372]	; (8003bf8 <HAL_DMA_IRQHandler+0x418>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d022      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a5b      	ldr	r2, [pc, #364]	; (8003bfc <HAL_DMA_IRQHandler+0x41c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d01d      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <HAL_DMA_IRQHandler+0x420>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d018      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a58      	ldr	r2, [pc, #352]	; (8003c04 <HAL_DMA_IRQHandler+0x424>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a57      	ldr	r2, [pc, #348]	; (8003c08 <HAL_DMA_IRQHandler+0x428>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00e      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a55      	ldr	r2, [pc, #340]	; (8003c0c <HAL_DMA_IRQHandler+0x42c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d009      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a54      	ldr	r2, [pc, #336]	; (8003c10 <HAL_DMA_IRQHandler+0x430>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d004      	beq.n	8003ace <HAL_DMA_IRQHandler+0x2ee>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_DMA_IRQHandler+0x434>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d10a      	bne.n	8003ae4 <HAL_DMA_IRQHandler+0x304>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	e003      	b.n	8003aec <HAL_DMA_IRQHandler+0x30c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2201      	movs	r2, #1
 8003afa:	409a      	lsls	r2, r3
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b04:	f043 0202 	orr.w	r2, r3, #2
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2204      	movs	r2, #4
 8003b16:	409a      	lsls	r2, r3
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 808f 	beq.w	8003c40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a2c      	ldr	r2, [pc, #176]	; (8003bd8 <HAL_DMA_IRQHandler+0x3f8>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d04a      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a2a      	ldr	r2, [pc, #168]	; (8003bdc <HAL_DMA_IRQHandler+0x3fc>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d045      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	; (8003be0 <HAL_DMA_IRQHandler+0x400>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d040      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a27      	ldr	r2, [pc, #156]	; (8003be4 <HAL_DMA_IRQHandler+0x404>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d03b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a26      	ldr	r2, [pc, #152]	; (8003be8 <HAL_DMA_IRQHandler+0x408>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d036      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a24      	ldr	r2, [pc, #144]	; (8003bec <HAL_DMA_IRQHandler+0x40c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d031      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_DMA_IRQHandler+0x410>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d02c      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a21      	ldr	r2, [pc, #132]	; (8003bf4 <HAL_DMA_IRQHandler+0x414>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d027      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a20      	ldr	r2, [pc, #128]	; (8003bf8 <HAL_DMA_IRQHandler+0x418>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d022      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <HAL_DMA_IRQHandler+0x41c>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d01d      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <HAL_DMA_IRQHandler+0x420>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_DMA_IRQHandler+0x424>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d013      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	; (8003c08 <HAL_DMA_IRQHandler+0x428>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d00e      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <HAL_DMA_IRQHandler+0x42c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d009      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_DMA_IRQHandler+0x430>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d004      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x3e2>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_DMA_IRQHandler+0x434>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12a      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x438>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	e023      	b.n	8003c20 <HAL_DMA_IRQHandler+0x440>
 8003bd8:	40020010 	.word	0x40020010
 8003bdc:	40020028 	.word	0x40020028
 8003be0:	40020040 	.word	0x40020040
 8003be4:	40020058 	.word	0x40020058
 8003be8:	40020070 	.word	0x40020070
 8003bec:	40020088 	.word	0x40020088
 8003bf0:	400200a0 	.word	0x400200a0
 8003bf4:	400200b8 	.word	0x400200b8
 8003bf8:	40020410 	.word	0x40020410
 8003bfc:	40020428 	.word	0x40020428
 8003c00:	40020440 	.word	0x40020440
 8003c04:	40020458 	.word	0x40020458
 8003c08:	40020470 	.word	0x40020470
 8003c0c:	40020488 	.word	0x40020488
 8003c10:	400204a0 	.word	0x400204a0
 8003c14:	400204b8 	.word	0x400204b8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00d      	beq.n	8003c40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	409a      	lsls	r2, r3
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	f043 0204 	orr.w	r2, r3, #4
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c44:	f003 031f 	and.w	r3, r3, #31
 8003c48:	2210      	movs	r2, #16
 8003c4a:	409a      	lsls	r2, r3
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a6 	beq.w	8003da2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a85      	ldr	r2, [pc, #532]	; (8003e70 <HAL_DMA_IRQHandler+0x690>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d04a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a83      	ldr	r2, [pc, #524]	; (8003e74 <HAL_DMA_IRQHandler+0x694>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d045      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a82      	ldr	r2, [pc, #520]	; (8003e78 <HAL_DMA_IRQHandler+0x698>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d040      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a80      	ldr	r2, [pc, #512]	; (8003e7c <HAL_DMA_IRQHandler+0x69c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d03b      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7f      	ldr	r2, [pc, #508]	; (8003e80 <HAL_DMA_IRQHandler+0x6a0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d036      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a7d      	ldr	r2, [pc, #500]	; (8003e84 <HAL_DMA_IRQHandler+0x6a4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d031      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a7c      	ldr	r2, [pc, #496]	; (8003e88 <HAL_DMA_IRQHandler+0x6a8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d02c      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a7a      	ldr	r2, [pc, #488]	; (8003e8c <HAL_DMA_IRQHandler+0x6ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d027      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a79      	ldr	r2, [pc, #484]	; (8003e90 <HAL_DMA_IRQHandler+0x6b0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a77      	ldr	r2, [pc, #476]	; (8003e94 <HAL_DMA_IRQHandler+0x6b4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a76      	ldr	r2, [pc, #472]	; (8003e98 <HAL_DMA_IRQHandler+0x6b8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a74      	ldr	r2, [pc, #464]	; (8003e9c <HAL_DMA_IRQHandler+0x6bc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a73      	ldr	r2, [pc, #460]	; (8003ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a71      	ldr	r2, [pc, #452]	; (8003ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a70      	ldr	r2, [pc, #448]	; (8003ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0x516>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a6e      	ldr	r2, [pc, #440]	; (8003eac <HAL_DMA_IRQHandler+0x6cc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10a      	bne.n	8003d0c <HAL_DMA_IRQHandler+0x52c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf14      	ite	ne
 8003d04:	2301      	movne	r3, #1
 8003d06:	2300      	moveq	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	e009      	b.n	8003d20 <HAL_DMA_IRQHandler+0x540>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	bf14      	ite	ne
 8003d1a:	2301      	movne	r3, #1
 8003d1c:	2300      	moveq	r3, #0
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d03e      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d108      	bne.n	8003d62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d024      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4798      	blx	r3
 8003d60:	e01f      	b.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d01b      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	4798      	blx	r3
 8003d72:	e016      	b.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0208 	bic.w	r2, r2, #8
 8003d90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d003      	beq.n	8003da2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	2220      	movs	r2, #32
 8003dac:	409a      	lsls	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8110 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <HAL_DMA_IRQHandler+0x690>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04a      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <HAL_DMA_IRQHandler+0x694>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d045      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_DMA_IRQHandler+0x698>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d040      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <HAL_DMA_IRQHandler+0x69c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d03b      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_DMA_IRQHandler+0x6a0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d036      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <HAL_DMA_IRQHandler+0x6a4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d031      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a23      	ldr	r2, [pc, #140]	; (8003e88 <HAL_DMA_IRQHandler+0x6a8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02c      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <HAL_DMA_IRQHandler+0x6ac>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d027      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_DMA_IRQHandler+0x6b0>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_DMA_IRQHandler+0x6b4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01d      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_DMA_IRQHandler+0x6b8>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_DMA_IRQHandler+0x6bc>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_DMA_IRQHandler+0x6c0>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a19      	ldr	r2, [pc, #100]	; (8003ea4 <HAL_DMA_IRQHandler+0x6c4>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <HAL_DMA_IRQHandler+0x6c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x678>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a16      	ldr	r2, [pc, #88]	; (8003eac <HAL_DMA_IRQHandler+0x6cc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d12b      	bne.n	8003eb0 <HAL_DMA_IRQHandler+0x6d0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0310 	and.w	r3, r3, #16
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bf14      	ite	ne
 8003e66:	2301      	movne	r3, #1
 8003e68:	2300      	moveq	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	e02a      	b.n	8003ec4 <HAL_DMA_IRQHandler+0x6e4>
 8003e6e:	bf00      	nop
 8003e70:	40020010 	.word	0x40020010
 8003e74:	40020028 	.word	0x40020028
 8003e78:	40020040 	.word	0x40020040
 8003e7c:	40020058 	.word	0x40020058
 8003e80:	40020070 	.word	0x40020070
 8003e84:	40020088 	.word	0x40020088
 8003e88:	400200a0 	.word	0x400200a0
 8003e8c:	400200b8 	.word	0x400200b8
 8003e90:	40020410 	.word	0x40020410
 8003e94:	40020428 	.word	0x40020428
 8003e98:	40020440 	.word	0x40020440
 8003e9c:	40020458 	.word	0x40020458
 8003ea0:	40020470 	.word	0x40020470
 8003ea4:	40020488 	.word	0x40020488
 8003ea8:	400204a0 	.word	0x400204a0
 8003eac:	400204b8 	.word	0x400204b8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	bf14      	ite	ne
 8003ebe:	2301      	movne	r3, #1
 8003ec0:	2300      	moveq	r3, #0
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f000 8087 	beq.w	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b04      	cmp	r3, #4
 8003ee4:	d139      	bne.n	8003f5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0216 	bic.w	r2, r2, #22
 8003ef4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d103      	bne.n	8003f16 <HAL_DMA_IRQHandler+0x736>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0208 	bic.w	r2, r2, #8
 8003f24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	f003 031f 	and.w	r3, r3, #31
 8003f2e:	223f      	movs	r2, #63	; 0x3f
 8003f30:	409a      	lsls	r2, r3
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 834a 	beq.w	80045e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	4798      	blx	r3
          }
          return;
 8003f58:	e344      	b.n	80045e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d018      	beq.n	8003f9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d02c      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	4798      	blx	r3
 8003f86:	e027      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d023      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	e01e      	b.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10f      	bne.n	8003fc8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0210 	bic.w	r2, r2, #16
 8003fb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d003      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8306 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8088 	beq.w	8004100 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a7a      	ldr	r2, [pc, #488]	; (80041e8 <HAL_DMA_IRQHandler+0xa08>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d04a      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_DMA_IRQHandler+0xa0c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d045      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a77      	ldr	r2, [pc, #476]	; (80041f0 <HAL_DMA_IRQHandler+0xa10>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d040      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a76      	ldr	r2, [pc, #472]	; (80041f4 <HAL_DMA_IRQHandler+0xa14>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d03b      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a74      	ldr	r2, [pc, #464]	; (80041f8 <HAL_DMA_IRQHandler+0xa18>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d036      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a73      	ldr	r2, [pc, #460]	; (80041fc <HAL_DMA_IRQHandler+0xa1c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d031      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a71      	ldr	r2, [pc, #452]	; (8004200 <HAL_DMA_IRQHandler+0xa20>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d02c      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a70      	ldr	r2, [pc, #448]	; (8004204 <HAL_DMA_IRQHandler+0xa24>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d027      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6e      	ldr	r2, [pc, #440]	; (8004208 <HAL_DMA_IRQHandler+0xa28>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d022      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a6d      	ldr	r2, [pc, #436]	; (800420c <HAL_DMA_IRQHandler+0xa2c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d01d      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a6b      	ldr	r2, [pc, #428]	; (8004210 <HAL_DMA_IRQHandler+0xa30>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d018      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6a      	ldr	r2, [pc, #424]	; (8004214 <HAL_DMA_IRQHandler+0xa34>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a68      	ldr	r2, [pc, #416]	; (8004218 <HAL_DMA_IRQHandler+0xa38>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00e      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a67      	ldr	r2, [pc, #412]	; (800421c <HAL_DMA_IRQHandler+0xa3c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d009      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a65      	ldr	r2, [pc, #404]	; (8004220 <HAL_DMA_IRQHandler+0xa40>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d004      	beq.n	8004098 <HAL_DMA_IRQHandler+0x8b8>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a64      	ldr	r2, [pc, #400]	; (8004224 <HAL_DMA_IRQHandler+0xa44>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d108      	bne.n	80040aa <HAL_DMA_IRQHandler+0x8ca>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	e007      	b.n	80040ba <HAL_DMA_IRQHandler+0x8da>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	3301      	adds	r3, #1
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d307      	bcc.n	80040d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f2      	bne.n	80040ba <HAL_DMA_IRQHandler+0x8da>
 80040d4:	e000      	b.n	80040d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80040d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2203      	movs	r2, #3
 80040ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80040ee:	e003      	b.n	80040f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8272 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
 8004112:	e26c      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a43      	ldr	r2, [pc, #268]	; (8004228 <HAL_DMA_IRQHandler+0xa48>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d022      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a42      	ldr	r2, [pc, #264]	; (800422c <HAL_DMA_IRQHandler+0xa4c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d01d      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a40      	ldr	r2, [pc, #256]	; (8004230 <HAL_DMA_IRQHandler+0xa50>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d018      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3f      	ldr	r2, [pc, #252]	; (8004234 <HAL_DMA_IRQHandler+0xa54>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d013      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a3d      	ldr	r2, [pc, #244]	; (8004238 <HAL_DMA_IRQHandler+0xa58>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00e      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3c      	ldr	r2, [pc, #240]	; (800423c <HAL_DMA_IRQHandler+0xa5c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d009      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a3a      	ldr	r2, [pc, #232]	; (8004240 <HAL_DMA_IRQHandler+0xa60>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d004      	beq.n	8004164 <HAL_DMA_IRQHandler+0x984>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a39      	ldr	r2, [pc, #228]	; (8004244 <HAL_DMA_IRQHandler+0xa64>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d101      	bne.n	8004168 <HAL_DMA_IRQHandler+0x988>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <HAL_DMA_IRQHandler+0x98a>
 8004168:	2300      	movs	r3, #0
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 823f 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2204      	movs	r2, #4
 8004182:	409a      	lsls	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	4013      	ands	r3, r2
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80cd 	beq.w	8004328 <HAL_DMA_IRQHandler+0xb48>
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80c7 	beq.w	8004328 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	f003 031f 	and.w	r3, r3, #31
 80041a2:	2204      	movs	r2, #4
 80041a4:	409a      	lsls	r2, r3
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d049      	beq.n	8004248 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 8210 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041d0:	e20a      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8206 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80041e4:	e200      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe08>
 80041e6:	bf00      	nop
 80041e8:	40020010 	.word	0x40020010
 80041ec:	40020028 	.word	0x40020028
 80041f0:	40020040 	.word	0x40020040
 80041f4:	40020058 	.word	0x40020058
 80041f8:	40020070 	.word	0x40020070
 80041fc:	40020088 	.word	0x40020088
 8004200:	400200a0 	.word	0x400200a0
 8004204:	400200b8 	.word	0x400200b8
 8004208:	40020410 	.word	0x40020410
 800420c:	40020428 	.word	0x40020428
 8004210:	40020440 	.word	0x40020440
 8004214:	40020458 	.word	0x40020458
 8004218:	40020470 	.word	0x40020470
 800421c:	40020488 	.word	0x40020488
 8004220:	400204a0 	.word	0x400204a0
 8004224:	400204b8 	.word	0x400204b8
 8004228:	58025408 	.word	0x58025408
 800422c:	5802541c 	.word	0x5802541c
 8004230:	58025430 	.word	0x58025430
 8004234:	58025444 	.word	0x58025444
 8004238:	58025458 	.word	0x58025458
 800423c:	5802546c 	.word	0x5802546c
 8004240:	58025480 	.word	0x58025480
 8004244:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d160      	bne.n	8004314 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a7f      	ldr	r2, [pc, #508]	; (8004454 <HAL_DMA_IRQHandler+0xc74>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d04a      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a7d      	ldr	r2, [pc, #500]	; (8004458 <HAL_DMA_IRQHandler+0xc78>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d045      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a7c      	ldr	r2, [pc, #496]	; (800445c <HAL_DMA_IRQHandler+0xc7c>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a7a      	ldr	r2, [pc, #488]	; (8004460 <HAL_DMA_IRQHandler+0xc80>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d03b      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a79      	ldr	r2, [pc, #484]	; (8004464 <HAL_DMA_IRQHandler+0xc84>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d036      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a77      	ldr	r2, [pc, #476]	; (8004468 <HAL_DMA_IRQHandler+0xc88>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d031      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a76      	ldr	r2, [pc, #472]	; (800446c <HAL_DMA_IRQHandler+0xc8c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d02c      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a74      	ldr	r2, [pc, #464]	; (8004470 <HAL_DMA_IRQHandler+0xc90>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d027      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a73      	ldr	r2, [pc, #460]	; (8004474 <HAL_DMA_IRQHandler+0xc94>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d022      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a71      	ldr	r2, [pc, #452]	; (8004478 <HAL_DMA_IRQHandler+0xc98>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01d      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a70      	ldr	r2, [pc, #448]	; (800447c <HAL_DMA_IRQHandler+0xc9c>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d018      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a6e      	ldr	r2, [pc, #440]	; (8004480 <HAL_DMA_IRQHandler+0xca0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d013      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a6d      	ldr	r2, [pc, #436]	; (8004484 <HAL_DMA_IRQHandler+0xca4>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00e      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a6b      	ldr	r2, [pc, #428]	; (8004488 <HAL_DMA_IRQHandler+0xca8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d009      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6a      	ldr	r2, [pc, #424]	; (800448c <HAL_DMA_IRQHandler+0xcac>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d004      	beq.n	80042f2 <HAL_DMA_IRQHandler+0xb12>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a68      	ldr	r2, [pc, #416]	; (8004490 <HAL_DMA_IRQHandler+0xcb0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0xb24>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f022 0208 	bic.w	r2, r2, #8
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	e007      	b.n	8004314 <HAL_DMA_IRQHandler+0xb34>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8165 	beq.w	80045e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004326:	e15f      	b.n	80045e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2202      	movs	r2, #2
 8004332:	409a      	lsls	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	4013      	ands	r3, r2
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80c5 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xce8>
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 80bf 	beq.w	80044c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2202      	movs	r2, #2
 8004354:	409a      	lsls	r2, r3
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d018      	beq.n	8004396 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 813a 	beq.w	80045ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004380:	e134      	b.n	80045ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 8130 	beq.w	80045ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004394:	e12a      	b.n	80045ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8089 	bne.w	80044b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2b      	ldr	r2, [pc, #172]	; (8004454 <HAL_DMA_IRQHandler+0xc74>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d04a      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a29      	ldr	r2, [pc, #164]	; (8004458 <HAL_DMA_IRQHandler+0xc78>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d045      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a28      	ldr	r2, [pc, #160]	; (800445c <HAL_DMA_IRQHandler+0xc7c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d040      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a26      	ldr	r2, [pc, #152]	; (8004460 <HAL_DMA_IRQHandler+0xc80>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d03b      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a25      	ldr	r2, [pc, #148]	; (8004464 <HAL_DMA_IRQHandler+0xc84>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d036      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a23      	ldr	r2, [pc, #140]	; (8004468 <HAL_DMA_IRQHandler+0xc88>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d031      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a22      	ldr	r2, [pc, #136]	; (800446c <HAL_DMA_IRQHandler+0xc8c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d02c      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a20      	ldr	r2, [pc, #128]	; (8004470 <HAL_DMA_IRQHandler+0xc90>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d027      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <HAL_DMA_IRQHandler+0xc94>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d022      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_DMA_IRQHandler+0xc98>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01d      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1c      	ldr	r2, [pc, #112]	; (800447c <HAL_DMA_IRQHandler+0xc9c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d018      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1a      	ldr	r2, [pc, #104]	; (8004480 <HAL_DMA_IRQHandler+0xca0>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a19      	ldr	r2, [pc, #100]	; (8004484 <HAL_DMA_IRQHandler+0xca4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d00e      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <HAL_DMA_IRQHandler+0xca8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a16      	ldr	r2, [pc, #88]	; (800448c <HAL_DMA_IRQHandler+0xcac>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d004      	beq.n	8004442 <HAL_DMA_IRQHandler+0xc62>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <HAL_DMA_IRQHandler+0xcb0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d128      	bne.n	8004494 <HAL_DMA_IRQHandler+0xcb4>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f022 0214 	bic.w	r2, r2, #20
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	e027      	b.n	80044a4 <HAL_DMA_IRQHandler+0xcc4>
 8004454:	40020010 	.word	0x40020010
 8004458:	40020028 	.word	0x40020028
 800445c:	40020040 	.word	0x40020040
 8004460:	40020058 	.word	0x40020058
 8004464:	40020070 	.word	0x40020070
 8004468:	40020088 	.word	0x40020088
 800446c:	400200a0 	.word	0x400200a0
 8004470:	400200b8 	.word	0x400200b8
 8004474:	40020410 	.word	0x40020410
 8004478:	40020428 	.word	0x40020428
 800447c:	40020440 	.word	0x40020440
 8004480:	40020458 	.word	0x40020458
 8004484:	40020470 	.word	0x40020470
 8004488:	40020488 	.word	0x40020488
 800448c:	400204a0 	.word	0x400204a0
 8004490:	400204b8 	.word	0x400204b8
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 020a 	bic.w	r2, r2, #10
 80044a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 8097 	beq.w	80045ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c6:	e091      	b.n	80045ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	2208      	movs	r2, #8
 80044d2:	409a      	lsls	r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8088 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8082 	beq.w	80045ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a41      	ldr	r2, [pc, #260]	; (80045f4 <HAL_DMA_IRQHandler+0xe14>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d04a      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a3f      	ldr	r2, [pc, #252]	; (80045f8 <HAL_DMA_IRQHandler+0xe18>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d045      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a3e      	ldr	r2, [pc, #248]	; (80045fc <HAL_DMA_IRQHandler+0xe1c>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d040      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a3c      	ldr	r2, [pc, #240]	; (8004600 <HAL_DMA_IRQHandler+0xe20>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d03b      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <HAL_DMA_IRQHandler+0xe24>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d036      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a39      	ldr	r2, [pc, #228]	; (8004608 <HAL_DMA_IRQHandler+0xe28>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d031      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a38      	ldr	r2, [pc, #224]	; (800460c <HAL_DMA_IRQHandler+0xe2c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d02c      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a36      	ldr	r2, [pc, #216]	; (8004610 <HAL_DMA_IRQHandler+0xe30>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d027      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a35      	ldr	r2, [pc, #212]	; (8004614 <HAL_DMA_IRQHandler+0xe34>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a33      	ldr	r2, [pc, #204]	; (8004618 <HAL_DMA_IRQHandler+0xe38>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a32      	ldr	r2, [pc, #200]	; (800461c <HAL_DMA_IRQHandler+0xe3c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a30      	ldr	r2, [pc, #192]	; (8004620 <HAL_DMA_IRQHandler+0xe40>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a2f      	ldr	r2, [pc, #188]	; (8004624 <HAL_DMA_IRQHandler+0xe44>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2d      	ldr	r2, [pc, #180]	; (8004628 <HAL_DMA_IRQHandler+0xe48>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2c      	ldr	r2, [pc, #176]	; (800462c <HAL_DMA_IRQHandler+0xe4c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_DMA_IRQHandler+0xdaa>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2a      	ldr	r2, [pc, #168]	; (8004630 <HAL_DMA_IRQHandler+0xe50>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <HAL_DMA_IRQHandler+0xdbc>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 021c 	bic.w	r2, r2, #28
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e007      	b.n	80045ac <HAL_DMA_IRQHandler+0xdcc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 020e 	bic.w	r2, r2, #14
 80045aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	2201      	movs	r2, #1
 80045b6:	409a      	lsls	r2, r3
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
 80045e2:	e004      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80045e4:	bf00      	nop
 80045e6:	e002      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e8:	bf00      	nop
 80045ea:	e000      	b.n	80045ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80045ee:	3728      	adds	r7, #40	; 0x28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40020010 	.word	0x40020010
 80045f8:	40020028 	.word	0x40020028
 80045fc:	40020040 	.word	0x40020040
 8004600:	40020058 	.word	0x40020058
 8004604:	40020070 	.word	0x40020070
 8004608:	40020088 	.word	0x40020088
 800460c:	400200a0 	.word	0x400200a0
 8004610:	400200b8 	.word	0x400200b8
 8004614:	40020410 	.word	0x40020410
 8004618:	40020428 	.word	0x40020428
 800461c:	40020440 	.word	0x40020440
 8004620:	40020458 	.word	0x40020458
 8004624:	40020470 	.word	0x40020470
 8004628:	40020488 	.word	0x40020488
 800462c:	400204a0 	.word	0x400204a0
 8004630:	400204b8 	.word	0x400204b8

08004634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a42      	ldr	r2, [pc, #264]	; (800474c <DMA_CalcBaseAndBitshift+0x118>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d04a      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a41      	ldr	r2, [pc, #260]	; (8004750 <DMA_CalcBaseAndBitshift+0x11c>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d045      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a3f      	ldr	r2, [pc, #252]	; (8004754 <DMA_CalcBaseAndBitshift+0x120>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d040      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a3e      	ldr	r2, [pc, #248]	; (8004758 <DMA_CalcBaseAndBitshift+0x124>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d03b      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a3c      	ldr	r2, [pc, #240]	; (800475c <DMA_CalcBaseAndBitshift+0x128>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d036      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a3b      	ldr	r2, [pc, #236]	; (8004760 <DMA_CalcBaseAndBitshift+0x12c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d031      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a39      	ldr	r2, [pc, #228]	; (8004764 <DMA_CalcBaseAndBitshift+0x130>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d02c      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a38      	ldr	r2, [pc, #224]	; (8004768 <DMA_CalcBaseAndBitshift+0x134>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d027      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a36      	ldr	r2, [pc, #216]	; (800476c <DMA_CalcBaseAndBitshift+0x138>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d022      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a35      	ldr	r2, [pc, #212]	; (8004770 <DMA_CalcBaseAndBitshift+0x13c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d01d      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a33      	ldr	r2, [pc, #204]	; (8004774 <DMA_CalcBaseAndBitshift+0x140>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d018      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a32      	ldr	r2, [pc, #200]	; (8004778 <DMA_CalcBaseAndBitshift+0x144>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a30      	ldr	r2, [pc, #192]	; (800477c <DMA_CalcBaseAndBitshift+0x148>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00e      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a2f      	ldr	r2, [pc, #188]	; (8004780 <DMA_CalcBaseAndBitshift+0x14c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d009      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <DMA_CalcBaseAndBitshift+0x150>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <DMA_CalcBaseAndBitshift+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a2c      	ldr	r2, [pc, #176]	; (8004788 <DMA_CalcBaseAndBitshift+0x154>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <DMA_CalcBaseAndBitshift+0xac>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <DMA_CalcBaseAndBitshift+0xae>
 80046e0:	2300      	movs	r3, #0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d024      	beq.n	8004730 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	3b10      	subs	r3, #16
 80046ee:	4a27      	ldr	r2, [pc, #156]	; (800478c <DMA_CalcBaseAndBitshift+0x158>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	091b      	lsrs	r3, r3, #4
 80046f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	4a24      	ldr	r2, [pc, #144]	; (8004790 <DMA_CalcBaseAndBitshift+0x15c>)
 8004700:	5cd3      	ldrb	r3, [r2, r3]
 8004702:	461a      	mov	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2b03      	cmp	r3, #3
 800470c:	d908      	bls.n	8004720 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	461a      	mov	r2, r3
 8004714:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <DMA_CalcBaseAndBitshift+0x160>)
 8004716:	4013      	ands	r3, r2
 8004718:	1d1a      	adds	r2, r3, #4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	659a      	str	r2, [r3, #88]	; 0x58
 800471e:	e00d      	b.n	800473c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	4b1b      	ldr	r3, [pc, #108]	; (8004794 <DMA_CalcBaseAndBitshift+0x160>)
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6593      	str	r3, [r2, #88]	; 0x58
 800472e:	e005      	b.n	800473c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40020010 	.word	0x40020010
 8004750:	40020028 	.word	0x40020028
 8004754:	40020040 	.word	0x40020040
 8004758:	40020058 	.word	0x40020058
 800475c:	40020070 	.word	0x40020070
 8004760:	40020088 	.word	0x40020088
 8004764:	400200a0 	.word	0x400200a0
 8004768:	400200b8 	.word	0x400200b8
 800476c:	40020410 	.word	0x40020410
 8004770:	40020428 	.word	0x40020428
 8004774:	40020440 	.word	0x40020440
 8004778:	40020458 	.word	0x40020458
 800477c:	40020470 	.word	0x40020470
 8004780:	40020488 	.word	0x40020488
 8004784:	400204a0 	.word	0x400204a0
 8004788:	400204b8 	.word	0x400204b8
 800478c:	aaaaaaab 	.word	0xaaaaaaab
 8004790:	08013cc8 	.word	0x08013cc8
 8004794:	fffffc00 	.word	0xfffffc00

08004798 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d120      	bne.n	80047ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d858      	bhi.n	8004866 <DMA_CheckFifoParam+0xce>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <DMA_CheckFifoParam+0x24>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047cd 	.word	0x080047cd
 80047c0:	080047df 	.word	0x080047df
 80047c4:	080047cd 	.word	0x080047cd
 80047c8:	08004867 	.word	0x08004867
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d048      	beq.n	800486a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047dc:	e045      	b.n	800486a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047e6:	d142      	bne.n	800486e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047ec:	e03f      	b.n	800486e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f6:	d123      	bne.n	8004840 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d838      	bhi.n	8004872 <DMA_CheckFifoParam+0xda>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <DMA_CheckFifoParam+0x70>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004819 	.word	0x08004819
 800480c:	0800481f 	.word	0x0800481f
 8004810:	08004819 	.word	0x08004819
 8004814:	08004831 	.word	0x08004831
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	73fb      	strb	r3, [r7, #15]
        break;
 800481c:	e030      	b.n	8004880 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d025      	beq.n	8004876 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800482e:	e022      	b.n	8004876 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004838:	d11f      	bne.n	800487a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800483e:	e01c      	b.n	800487a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004844:	2b02      	cmp	r3, #2
 8004846:	d902      	bls.n	800484e <DMA_CheckFifoParam+0xb6>
 8004848:	2b03      	cmp	r3, #3
 800484a:	d003      	beq.n	8004854 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800484c:	e018      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
        break;
 8004852:	e015      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
    break;
 8004864:	e00b      	b.n	800487e <DMA_CheckFifoParam+0xe6>
        break;
 8004866:	bf00      	nop
 8004868:	e00a      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        break;
 800486a:	bf00      	nop
 800486c:	e008      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        break;
 800486e:	bf00      	nop
 8004870:	e006      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        break;
 8004872:	bf00      	nop
 8004874:	e004      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        break;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
        break;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <DMA_CheckFifoParam+0xe8>
    break;
 800487e:	bf00      	nop
    }
  }

  return status;
 8004880:	7bfb      	ldrb	r3, [r7, #15]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop

08004890 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a38      	ldr	r2, [pc, #224]	; (8004984 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a36      	ldr	r2, [pc, #216]	; (8004988 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a35      	ldr	r2, [pc, #212]	; (800498c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a33      	ldr	r2, [pc, #204]	; (8004990 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a32      	ldr	r2, [pc, #200]	; (8004994 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a30      	ldr	r2, [pc, #192]	; (8004998 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2f      	ldr	r2, [pc, #188]	; (800499c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a2d      	ldr	r2, [pc, #180]	; (80049a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80048f2:	2300      	movs	r3, #0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01a      	beq.n	800492e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	3b08      	subs	r3, #8
 8004900:	4a28      	ldr	r2, [pc, #160]	; (80049a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	091b      	lsrs	r3, r3, #4
 8004908:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	461a      	mov	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a24      	ldr	r2, [pc, #144]	; (80049ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800491c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2201      	movs	r2, #1
 8004926:	409a      	lsls	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800492c:	e024      	b.n	8004978 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3b10      	subs	r3, #16
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004938:	fba2 2303 	umull	r2, r3, r2, r3
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d806      	bhi.n	8004956 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d902      	bls.n	8004956 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3308      	adds	r3, #8
 8004954:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4b18      	ldr	r3, [pc, #96]	; (80049bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	461a      	mov	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004968:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 031f 	and.w	r3, r3, #31
 8004970:	2201      	movs	r2, #1
 8004972:	409a      	lsls	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004978:	bf00      	nop
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	58025408 	.word	0x58025408
 8004988:	5802541c 	.word	0x5802541c
 800498c:	58025430 	.word	0x58025430
 8004990:	58025444 	.word	0x58025444
 8004994:	58025458 	.word	0x58025458
 8004998:	5802546c 	.word	0x5802546c
 800499c:	58025480 	.word	0x58025480
 80049a0:	58025494 	.word	0x58025494
 80049a4:	cccccccd 	.word	0xcccccccd
 80049a8:	16009600 	.word	0x16009600
 80049ac:	58025880 	.word	0x58025880
 80049b0:	aaaaaaab 	.word	0xaaaaaaab
 80049b4:	400204b8 	.word	0x400204b8
 80049b8:	4002040f 	.word	0x4002040f
 80049bc:	10008200 	.word	0x10008200
 80049c0:	40020880 	.word	0x40020880

080049c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d04a      	beq.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b08      	cmp	r3, #8
 80049de:	d847      	bhi.n	8004a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d022      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d01d      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d018      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a21      	ldr	r2, [pc, #132]	; (8004a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d013      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d00e      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1e      	ldr	r2, [pc, #120]	; (8004a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d009      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1b      	ldr	r2, [pc, #108]	; (8004a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004a30:	2301      	movs	r3, #1
 8004a32:	e000      	b.n	8004a36 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004a34:	2300      	movs	r3, #0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4b17      	ldr	r3, [pc, #92]	; (8004a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	; (8004aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004a4c:	671a      	str	r2, [r3, #112]	; 0x70
 8004a4e:	e009      	b.n	8004a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	461a      	mov	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a11      	ldr	r2, [pc, #68]	; (8004aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004a62:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	2201      	movs	r2, #1
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	58025408 	.word	0x58025408
 8004a80:	5802541c 	.word	0x5802541c
 8004a84:	58025430 	.word	0x58025430
 8004a88:	58025444 	.word	0x58025444
 8004a8c:	58025458 	.word	0x58025458
 8004a90:	5802546c 	.word	0x5802546c
 8004a94:	58025480 	.word	0x58025480
 8004a98:	58025494 	.word	0x58025494
 8004a9c:	1600963f 	.word	0x1600963f
 8004aa0:	58025940 	.word	0x58025940
 8004aa4:	1000823f 	.word	0x1000823f
 8004aa8:	40020940 	.word	0x40020940

08004aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	; 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004aba:	4b89      	ldr	r3, [pc, #548]	; (8004ce0 <HAL_GPIO_Init+0x234>)
 8004abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004abe:	e194      	b.n	8004dea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8186 	beq.w	8004de4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d005      	beq.n	8004af0 <HAL_GPIO_Init+0x44>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d130      	bne.n	8004b52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	2203      	movs	r2, #3
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b26:	2201      	movs	r2, #1
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	091b      	lsrs	r3, r3, #4
 8004b3c:	f003 0201 	and.w	r2, r3, #1
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	2b03      	cmp	r3, #3
 8004b5c:	d017      	beq.n	8004b8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2203      	movs	r2, #3
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4013      	ands	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689a      	ldr	r2, [r3, #8]
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d123      	bne.n	8004be2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	220f      	movs	r2, #15
 8004bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	f003 0307 	and.w	r3, r3, #7
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	fa02 f303 	lsl.w	r3, r2, r3
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	08da      	lsrs	r2, r3, #3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3208      	adds	r2, #8
 8004bdc:	69b9      	ldr	r1, [r7, #24]
 8004bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	2203      	movs	r2, #3
 8004bee:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f003 0203 	and.w	r2, r3, #3
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0a:	69ba      	ldr	r2, [r7, #24]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	69ba      	ldr	r2, [r7, #24]
 8004c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80e0 	beq.w	8004de4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c24:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <HAL_GPIO_Init+0x238>)
 8004c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_GPIO_Init+0x238>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c34:	4b2b      	ldr	r3, [pc, #172]	; (8004ce4 <HAL_GPIO_Init+0x238>)
 8004c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c42:	4a29      	ldr	r2, [pc, #164]	; (8004ce8 <HAL_GPIO_Init+0x23c>)
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	089b      	lsrs	r3, r3, #2
 8004c48:	3302      	adds	r3, #2
 8004c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f003 0303 	and.w	r3, r3, #3
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	220f      	movs	r2, #15
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	4013      	ands	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a20      	ldr	r2, [pc, #128]	; (8004cec <HAL_GPIO_Init+0x240>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d052      	beq.n	8004d14 <HAL_GPIO_Init+0x268>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1f      	ldr	r2, [pc, #124]	; (8004cf0 <HAL_GPIO_Init+0x244>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d031      	beq.n	8004cda <HAL_GPIO_Init+0x22e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <HAL_GPIO_Init+0x248>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d02b      	beq.n	8004cd6 <HAL_GPIO_Init+0x22a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a1d      	ldr	r2, [pc, #116]	; (8004cf8 <HAL_GPIO_Init+0x24c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d025      	beq.n	8004cd2 <HAL_GPIO_Init+0x226>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a1c      	ldr	r2, [pc, #112]	; (8004cfc <HAL_GPIO_Init+0x250>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01f      	beq.n	8004cce <HAL_GPIO_Init+0x222>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	; (8004d00 <HAL_GPIO_Init+0x254>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d019      	beq.n	8004cca <HAL_GPIO_Init+0x21e>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <HAL_GPIO_Init+0x258>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d013      	beq.n	8004cc6 <HAL_GPIO_Init+0x21a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a19      	ldr	r2, [pc, #100]	; (8004d08 <HAL_GPIO_Init+0x25c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00d      	beq.n	8004cc2 <HAL_GPIO_Init+0x216>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a18      	ldr	r2, [pc, #96]	; (8004d0c <HAL_GPIO_Init+0x260>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d007      	beq.n	8004cbe <HAL_GPIO_Init+0x212>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	; (8004d10 <HAL_GPIO_Init+0x264>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d101      	bne.n	8004cba <HAL_GPIO_Init+0x20e>
 8004cb6:	2309      	movs	r3, #9
 8004cb8:	e02d      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cba:	230a      	movs	r3, #10
 8004cbc:	e02b      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cbe:	2308      	movs	r3, #8
 8004cc0:	e029      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cc2:	2307      	movs	r3, #7
 8004cc4:	e027      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cc6:	2306      	movs	r3, #6
 8004cc8:	e025      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cca:	2305      	movs	r3, #5
 8004ccc:	e023      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cce:	2304      	movs	r3, #4
 8004cd0:	e021      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e01f      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cd6:	2302      	movs	r3, #2
 8004cd8:	e01d      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e01b      	b.n	8004d16 <HAL_GPIO_Init+0x26a>
 8004cde:	bf00      	nop
 8004ce0:	58000080 	.word	0x58000080
 8004ce4:	58024400 	.word	0x58024400
 8004ce8:	58000400 	.word	0x58000400
 8004cec:	58020000 	.word	0x58020000
 8004cf0:	58020400 	.word	0x58020400
 8004cf4:	58020800 	.word	0x58020800
 8004cf8:	58020c00 	.word	0x58020c00
 8004cfc:	58021000 	.word	0x58021000
 8004d00:	58021400 	.word	0x58021400
 8004d04:	58021800 	.word	0x58021800
 8004d08:	58021c00 	.word	0x58021c00
 8004d0c:	58022000 	.word	0x58022000
 8004d10:	58022400 	.word	0x58022400
 8004d14:	2300      	movs	r3, #0
 8004d16:	69fa      	ldr	r2, [r7, #28]
 8004d18:	f002 0203 	and.w	r2, r2, #3
 8004d1c:	0092      	lsls	r2, r2, #2
 8004d1e:	4093      	lsls	r3, r2
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d26:	4938      	ldr	r1, [pc, #224]	; (8004e08 <HAL_GPIO_Init+0x35c>)
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	089b      	lsrs	r3, r3, #2
 8004d2c:	3302      	adds	r3, #2
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	43db      	mvns	r3, r3
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	4013      	ands	r3, r2
 8004d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	4013      	ands	r3, r2
 8004d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	3301      	adds	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa22 f303 	lsr.w	r3, r2, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f47f ae63 	bne.w	8004ac0 <HAL_GPIO_Init+0x14>
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	3724      	adds	r7, #36	; 0x24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	58000400 	.word	0x58000400

08004e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	807b      	strh	r3, [r7, #2]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e1c:	787b      	ldrb	r3, [r7, #1]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e22:	887a      	ldrh	r2, [r7, #2]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e28:	e003      	b.n	8004e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e2a:	887b      	ldrh	r3, [r7, #2]
 8004e2c:	041a      	lsls	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	619a      	str	r2, [r3, #24]
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b085      	sub	sp, #20
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	460b      	mov	r3, r1
 8004e48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e50:	887a      	ldrh	r2, [r7, #2]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4013      	ands	r3, r2
 8004e56:	041a      	lsls	r2, r3, #16
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	43d9      	mvns	r1, r3
 8004e5c:	887b      	ldrh	r3, [r7, #2]
 8004e5e:	400b      	ands	r3, r1
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
}
 8004e66:	bf00      	nop
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	4603      	mov	r3, r0
 8004e7a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d008      	beq.n	8004e9e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fc faed 	bl	8001478 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_PWREx_ConfigSupply+0x70>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d00a      	beq.n	8004ed2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ebc:	4b16      	ldr	r3, [pc, #88]	; (8004f18 <HAL_PWREx_ConfigSupply+0x70>)
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d001      	beq.n	8004ece <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e01f      	b.n	8004f0e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e01d      	b.n	8004f0e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ed2:	4b11      	ldr	r3, [pc, #68]	; (8004f18 <HAL_PWREx_ConfigSupply+0x70>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f023 0207 	bic.w	r2, r3, #7
 8004eda:	490f      	ldr	r1, [pc, #60]	; (8004f18 <HAL_PWREx_ConfigSupply+0x70>)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004ee2:	f7fd fa71 	bl	80023c8 <HAL_GetTick>
 8004ee6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004ee8:	e009      	b.n	8004efe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004eea:	f7fd fa6d 	bl	80023c8 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ef8:	d901      	bls.n	8004efe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e007      	b.n	8004f0e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_PWREx_ConfigSupply+0x70>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0a:	d1ee      	bne.n	8004eea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	58024800 	.word	0x58024800

08004f1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08c      	sub	sp, #48	; 0x30
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d102      	bne.n	8004f30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f000 bc1d 	b.w	800576a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 8087 	beq.w	800504c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3e:	4b99      	ldr	r3, [pc, #612]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004f48:	4b96      	ldr	r3, [pc, #600]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d007      	beq.n	8004f64 <HAL_RCC_OscConfig+0x48>
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b18      	cmp	r3, #24
 8004f58:	d110      	bne.n	8004f7c <HAL_RCC_OscConfig+0x60>
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d10b      	bne.n	8004f7c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	4b8f      	ldr	r3, [pc, #572]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d06c      	beq.n	800504a <HAL_RCC_OscConfig+0x12e>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d168      	bne.n	800504a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e3f6      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f84:	d106      	bne.n	8004f94 <HAL_RCC_OscConfig+0x78>
 8004f86:	4b87      	ldr	r3, [pc, #540]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a86      	ldr	r2, [pc, #536]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	e02e      	b.n	8004ff2 <HAL_RCC_OscConfig+0xd6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10c      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x9a>
 8004f9c:	4b81      	ldr	r3, [pc, #516]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a80      	ldr	r2, [pc, #512]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b7e      	ldr	r3, [pc, #504]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7d      	ldr	r2, [pc, #500]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	e01d      	b.n	8004ff2 <HAL_RCC_OscConfig+0xd6>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fbe:	d10c      	bne.n	8004fda <HAL_RCC_OscConfig+0xbe>
 8004fc0:	4b78      	ldr	r3, [pc, #480]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a77      	ldr	r2, [pc, #476]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	4b75      	ldr	r3, [pc, #468]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a74      	ldr	r2, [pc, #464]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fd6:	6013      	str	r3, [r2, #0]
 8004fd8:	e00b      	b.n	8004ff2 <HAL_RCC_OscConfig+0xd6>
 8004fda:	4b72      	ldr	r3, [pc, #456]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a71      	ldr	r2, [pc, #452]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	4b6f      	ldr	r3, [pc, #444]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a6e      	ldr	r2, [pc, #440]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8004fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d013      	beq.n	8005022 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fd f9e5 	bl	80023c8 <HAL_GetTick>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005002:	f7fd f9e1 	bl	80023c8 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b64      	cmp	r3, #100	; 0x64
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e3aa      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005014:	4b63      	ldr	r3, [pc, #396]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0xe6>
 8005020:	e014      	b.n	800504c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fd f9d1 	bl	80023c8 <HAL_GetTick>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800502a:	f7fd f9cd 	bl	80023c8 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b64      	cmp	r3, #100	; 0x64
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e396      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800503c:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x10e>
 8005048:	e000      	b.n	800504c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800504a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80cb 	beq.w	80051f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800505a:	4b52      	ldr	r3, [pc, #328]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005062:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005064:	4b4f      	ldr	r3, [pc, #316]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8005066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005068:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d007      	beq.n	8005080 <HAL_RCC_OscConfig+0x164>
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	2b18      	cmp	r3, #24
 8005074:	d156      	bne.n	8005124 <HAL_RCC_OscConfig+0x208>
 8005076:	69fb      	ldr	r3, [r7, #28]
 8005078:	f003 0303 	and.w	r3, r3, #3
 800507c:	2b00      	cmp	r3, #0
 800507e:	d151      	bne.n	8005124 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005080:	4b48      	ldr	r3, [pc, #288]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b00      	cmp	r3, #0
 800508a:	d005      	beq.n	8005098 <HAL_RCC_OscConfig+0x17c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e368      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005098:	4b42      	ldr	r3, [pc, #264]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 0219 	bic.w	r2, r3, #25
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	493f      	ldr	r1, [pc, #252]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050aa:	f7fd f98d 	bl	80023c8 <HAL_GetTick>
 80050ae:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b0:	e008      	b.n	80050c4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b2:	f7fd f989 	bl	80023c8 <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d901      	bls.n	80050c4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e352      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050c4:	4b37      	ldr	r3, [pc, #220]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f0      	beq.n	80050b2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050d0:	f7fd f9aa 	bl	8002428 <HAL_GetREVID>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f241 0203 	movw	r2, #4099	; 0x1003
 80050da:	4293      	cmp	r3, r2
 80050dc:	d817      	bhi.n	800510e <HAL_RCC_OscConfig+0x1f2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d108      	bne.n	80050f8 <HAL_RCC_OscConfig+0x1dc>
 80050e6:	4b2f      	ldr	r3, [pc, #188]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80050ee:	4a2d      	ldr	r2, [pc, #180]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f6:	e07b      	b.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f8:	4b2a      	ldr	r3, [pc, #168]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	031b      	lsls	r3, r3, #12
 8005106:	4927      	ldr	r1, [pc, #156]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8005108:	4313      	orrs	r3, r2
 800510a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800510c:	e070      	b.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800510e:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	061b      	lsls	r3, r3, #24
 800511c:	4921      	ldr	r1, [pc, #132]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800511e:	4313      	orrs	r3, r2
 8005120:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005122:	e065      	b.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d048      	beq.n	80051be <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800512c:	4b1d      	ldr	r3, [pc, #116]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f023 0219 	bic.w	r2, r3, #25
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	491a      	ldr	r1, [pc, #104]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800513a:	4313      	orrs	r3, r2
 800513c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800513e:	f7fd f943 	bl	80023c8 <HAL_GetTick>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005146:	f7fd f93f 	bl	80023c8 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e308      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005158:	4b12      	ldr	r3, [pc, #72]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005164:	f7fd f960 	bl	8002428 <HAL_GetREVID>
 8005168:	4603      	mov	r3, r0
 800516a:	f241 0203 	movw	r2, #4099	; 0x1003
 800516e:	4293      	cmp	r3, r2
 8005170:	d81a      	bhi.n	80051a8 <HAL_RCC_OscConfig+0x28c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d108      	bne.n	800518c <HAL_RCC_OscConfig+0x270>
 800517a:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 8005184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005188:	6053      	str	r3, [r2, #4]
 800518a:	e031      	b.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	031b      	lsls	r3, r3, #12
 800519a:	4902      	ldr	r1, [pc, #8]	; (80051a4 <HAL_RCC_OscConfig+0x288>)
 800519c:	4313      	orrs	r3, r2
 800519e:	604b      	str	r3, [r1, #4]
 80051a0:	e026      	b.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
 80051a2:	bf00      	nop
 80051a4:	58024400 	.word	0x58024400
 80051a8:	4b9a      	ldr	r3, [pc, #616]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	4997      	ldr	r1, [pc, #604]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	604b      	str	r3, [r1, #4]
 80051bc:	e018      	b.n	80051f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051be:	4b95      	ldr	r3, [pc, #596]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a94      	ldr	r2, [pc, #592]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051c4:	f023 0301 	bic.w	r3, r3, #1
 80051c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fd f8fd 	bl	80023c8 <HAL_GetTick>
 80051ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051d2:	f7fd f8f9 	bl	80023c8 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e2c2      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051e4:	4b8b      	ldr	r3, [pc, #556]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f0      	bne.n	80051d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a9 	beq.w	8005350 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051fe:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005206:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005208:	4b82      	ldr	r3, [pc, #520]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d007      	beq.n	8005224 <HAL_RCC_OscConfig+0x308>
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	2b18      	cmp	r3, #24
 8005218:	d13a      	bne.n	8005290 <HAL_RCC_OscConfig+0x374>
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d135      	bne.n	8005290 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005224:	4b7b      	ldr	r3, [pc, #492]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_RCC_OscConfig+0x320>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	2b80      	cmp	r3, #128	; 0x80
 8005236:	d001      	beq.n	800523c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e296      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800523c:	f7fd f8f4 	bl	8002428 <HAL_GetREVID>
 8005240:	4603      	mov	r3, r0
 8005242:	f241 0203 	movw	r2, #4099	; 0x1003
 8005246:	4293      	cmp	r3, r2
 8005248:	d817      	bhi.n	800527a <HAL_RCC_OscConfig+0x35e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	2b20      	cmp	r3, #32
 8005250:	d108      	bne.n	8005264 <HAL_RCC_OscConfig+0x348>
 8005252:	4b70      	ldr	r3, [pc, #448]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800525a:	4a6e      	ldr	r2, [pc, #440]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800525c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005260:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005262:	e075      	b.n	8005350 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005264:	4b6b      	ldr	r3, [pc, #428]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	069b      	lsls	r3, r3, #26
 8005272:	4968      	ldr	r1, [pc, #416]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005274:	4313      	orrs	r3, r2
 8005276:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005278:	e06a      	b.n	8005350 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800527a:	4b66      	ldr	r3, [pc, #408]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	061b      	lsls	r3, r3, #24
 8005288:	4962      	ldr	r1, [pc, #392]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800528a:	4313      	orrs	r3, r2
 800528c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800528e:	e05f      	b.n	8005350 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d042      	beq.n	800531e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005298:	4b5e      	ldr	r3, [pc, #376]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a5d      	ldr	r2, [pc, #372]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800529e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a4:	f7fd f890 	bl	80023c8 <HAL_GetTick>
 80052a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80052ac:	f7fd f88c 	bl	80023c8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e255      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052be:	4b55      	ldr	r3, [pc, #340]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80052ca:	f7fd f8ad 	bl	8002428 <HAL_GetREVID>
 80052ce:	4603      	mov	r3, r0
 80052d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d817      	bhi.n	8005308 <HAL_RCC_OscConfig+0x3ec>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d108      	bne.n	80052f2 <HAL_RCC_OscConfig+0x3d6>
 80052e0:	4b4c      	ldr	r3, [pc, #304]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80052e8:	4a4a      	ldr	r2, [pc, #296]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80052ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ee:	6053      	str	r3, [r2, #4]
 80052f0:	e02e      	b.n	8005350 <HAL_RCC_OscConfig+0x434>
 80052f2:	4b48      	ldr	r3, [pc, #288]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	069b      	lsls	r3, r3, #26
 8005300:	4944      	ldr	r1, [pc, #272]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
 8005306:	e023      	b.n	8005350 <HAL_RCC_OscConfig+0x434>
 8005308:	4b42      	ldr	r3, [pc, #264]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	061b      	lsls	r3, r3, #24
 8005316:	493f      	ldr	r1, [pc, #252]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	60cb      	str	r3, [r1, #12]
 800531c:	e018      	b.n	8005350 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800531e:	4b3d      	ldr	r3, [pc, #244]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3c      	ldr	r2, [pc, #240]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005324:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532a:	f7fd f84d 	bl	80023c8 <HAL_GetTick>
 800532e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005332:	f7fd f849 	bl	80023c8 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e212      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005344:	4b33      	ldr	r3, [pc, #204]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1f0      	bne.n	8005332 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d036      	beq.n	80053ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d019      	beq.n	8005398 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005364:	4b2b      	ldr	r3, [pc, #172]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005368:	4a2a      	ldr	r2, [pc, #168]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800536a:	f043 0301 	orr.w	r3, r3, #1
 800536e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005370:	f7fd f82a 	bl	80023c8 <HAL_GetTick>
 8005374:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005378:	f7fd f826 	bl	80023c8 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b02      	cmp	r3, #2
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e1ef      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800538a:	4b22      	ldr	r3, [pc, #136]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800538c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0f0      	beq.n	8005378 <HAL_RCC_OscConfig+0x45c>
 8005396:	e018      	b.n	80053ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005398:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800539a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd f810 	bl	80023c8 <HAL_GetTick>
 80053a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ac:	f7fd f80c 	bl	80023c8 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e1d5      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80053c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0320 	and.w	r3, r3, #32
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d039      	beq.n	800544a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d01c      	beq.n	8005418 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053de:	4b0d      	ldr	r3, [pc, #52]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a0c      	ldr	r2, [pc, #48]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 80053e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80053ea:	f7fc ffed 	bl	80023c8 <HAL_GetTick>
 80053ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80053f2:	f7fc ffe9 	bl	80023c8 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e1b2      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005404:	4b03      	ldr	r3, [pc, #12]	; (8005414 <HAL_RCC_OscConfig+0x4f8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCC_OscConfig+0x4d6>
 8005410:	e01b      	b.n	800544a <HAL_RCC_OscConfig+0x52e>
 8005412:	bf00      	nop
 8005414:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005418:	4b9b      	ldr	r3, [pc, #620]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a9a      	ldr	r2, [pc, #616]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800541e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005422:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005424:	f7fc ffd0 	bl	80023c8 <HAL_GetTick>
 8005428:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800542c:	f7fc ffcc 	bl	80023c8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e195      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800543e:	4b92      	ldr	r3, [pc, #584]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 8081 	beq.w	800555a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005458:	4b8c      	ldr	r3, [pc, #560]	; (800568c <HAL_RCC_OscConfig+0x770>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a8b      	ldr	r2, [pc, #556]	; (800568c <HAL_RCC_OscConfig+0x770>)
 800545e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005462:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005464:	f7fc ffb0 	bl	80023c8 <HAL_GetTick>
 8005468:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800546c:	f7fc ffac 	bl	80023c8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b64      	cmp	r3, #100	; 0x64
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e175      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800547e:	4b83      	ldr	r3, [pc, #524]	; (800568c <HAL_RCC_OscConfig+0x770>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d106      	bne.n	80054a0 <HAL_RCC_OscConfig+0x584>
 8005492:	4b7d      	ldr	r3, [pc, #500]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	4a7c      	ldr	r2, [pc, #496]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005498:	f043 0301 	orr.w	r3, r3, #1
 800549c:	6713      	str	r3, [r2, #112]	; 0x70
 800549e:	e02d      	b.n	80054fc <HAL_RCC_OscConfig+0x5e0>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10c      	bne.n	80054c2 <HAL_RCC_OscConfig+0x5a6>
 80054a8:	4b77      	ldr	r3, [pc, #476]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	4a76      	ldr	r2, [pc, #472]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054ae:	f023 0301 	bic.w	r3, r3, #1
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70
 80054b4:	4b74      	ldr	r3, [pc, #464]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	4a73      	ldr	r2, [pc, #460]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054ba:	f023 0304 	bic.w	r3, r3, #4
 80054be:	6713      	str	r3, [r2, #112]	; 0x70
 80054c0:	e01c      	b.n	80054fc <HAL_RCC_OscConfig+0x5e0>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	2b05      	cmp	r3, #5
 80054c8:	d10c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x5c8>
 80054ca:	4b6f      	ldr	r3, [pc, #444]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ce:	4a6e      	ldr	r2, [pc, #440]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054d0:	f043 0304 	orr.w	r3, r3, #4
 80054d4:	6713      	str	r3, [r2, #112]	; 0x70
 80054d6:	4b6c      	ldr	r3, [pc, #432]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054da:	4a6b      	ldr	r2, [pc, #428]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054dc:	f043 0301 	orr.w	r3, r3, #1
 80054e0:	6713      	str	r3, [r2, #112]	; 0x70
 80054e2:	e00b      	b.n	80054fc <HAL_RCC_OscConfig+0x5e0>
 80054e4:	4b68      	ldr	r3, [pc, #416]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e8:	4a67      	ldr	r2, [pc, #412]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054ea:	f023 0301 	bic.w	r3, r3, #1
 80054ee:	6713      	str	r3, [r2, #112]	; 0x70
 80054f0:	4b65      	ldr	r3, [pc, #404]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f4:	4a64      	ldr	r2, [pc, #400]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80054f6:	f023 0304 	bic.w	r3, r3, #4
 80054fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d015      	beq.n	8005530 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005504:	f7fc ff60 	bl	80023c8 <HAL_GetTick>
 8005508:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800550a:	e00a      	b.n	8005522 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800550c:	f7fc ff5c 	bl	80023c8 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	f241 3288 	movw	r2, #5000	; 0x1388
 800551a:	4293      	cmp	r3, r2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e123      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005522:	4b59      	ldr	r3, [pc, #356]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0ee      	beq.n	800550c <HAL_RCC_OscConfig+0x5f0>
 800552e:	e014      	b.n	800555a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005530:	f7fc ff4a 	bl	80023c8 <HAL_GetTick>
 8005534:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005536:	e00a      	b.n	800554e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fc ff46 	bl	80023c8 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e10d      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800554e:	4b4e      	ldr	r3, [pc, #312]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1ee      	bne.n	8005538 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8102 	beq.w	8005768 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005564:	4b48      	ldr	r3, [pc, #288]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800556c:	2b18      	cmp	r3, #24
 800556e:	f000 80bd 	beq.w	80056ec <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b02      	cmp	r3, #2
 8005578:	f040 809e 	bne.w	80056b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557c:	4b42      	ldr	r3, [pc, #264]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a41      	ldr	r2, [pc, #260]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fc ff1e 	bl	80023c8 <HAL_GetTick>
 800558c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005590:	f7fc ff1a 	bl	80023c8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0e3      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80055a2:	4b39      	ldr	r3, [pc, #228]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055ae:	4b36      	ldr	r3, [pc, #216]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80055b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055b2:	4b37      	ldr	r3, [pc, #220]	; (8005690 <HAL_RCC_OscConfig+0x774>)
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80055be:	0112      	lsls	r2, r2, #4
 80055c0:	430a      	orrs	r2, r1
 80055c2:	4931      	ldr	r1, [pc, #196]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	628b      	str	r3, [r1, #40]	; 0x28
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	3b01      	subs	r3, #1
 80055ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d6:	3b01      	subs	r3, #1
 80055d8:	025b      	lsls	r3, r3, #9
 80055da:	b29b      	uxth	r3, r3
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e2:	3b01      	subs	r3, #1
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80055ea:	431a      	orrs	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f0:	3b01      	subs	r3, #1
 80055f2:	061b      	lsls	r3, r3, #24
 80055f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80055f8:	4923      	ldr	r1, [pc, #140]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80055fe:	4b22      	ldr	r3, [pc, #136]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800560a:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800560c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800560e:	4b21      	ldr	r3, [pc, #132]	; (8005694 <HAL_RCC_OscConfig+0x778>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005616:	00d2      	lsls	r2, r2, #3
 8005618:	491b      	ldr	r1, [pc, #108]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800561a:	4313      	orrs	r3, r2
 800561c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	f023 020c 	bic.w	r2, r3, #12
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	4917      	ldr	r1, [pc, #92]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800562c:	4313      	orrs	r3, r2
 800562e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005630:	4b15      	ldr	r3, [pc, #84]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	f023 0202 	bic.w	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	4912      	ldr	r1, [pc, #72]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800563e:	4313      	orrs	r3, r2
 8005640:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	4a10      	ldr	r2, [pc, #64]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800564e:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005658:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	4a0a      	ldr	r2, [pc, #40]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005664:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005666:	4b08      	ldr	r3, [pc, #32]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	4a07      	ldr	r2, [pc, #28]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 800566c:	f043 0301 	orr.w	r3, r3, #1
 8005670:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005672:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a04      	ldr	r2, [pc, #16]	; (8005688 <HAL_RCC_OscConfig+0x76c>)
 8005678:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800567c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567e:	f7fc fea3 	bl	80023c8 <HAL_GetTick>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005684:	e011      	b.n	80056aa <HAL_RCC_OscConfig+0x78e>
 8005686:	bf00      	nop
 8005688:	58024400 	.word	0x58024400
 800568c:	58024800 	.word	0x58024800
 8005690:	fffffc0c 	.word	0xfffffc0c
 8005694:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005698:	f7fc fe96 	bl	80023c8 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e05f      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056aa:	4b32      	ldr	r3, [pc, #200]	; (8005774 <HAL_RCC_OscConfig+0x858>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d0f0      	beq.n	8005698 <HAL_RCC_OscConfig+0x77c>
 80056b6:	e057      	b.n	8005768 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b8:	4b2e      	ldr	r3, [pc, #184]	; (8005774 <HAL_RCC_OscConfig+0x858>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a2d      	ldr	r2, [pc, #180]	; (8005774 <HAL_RCC_OscConfig+0x858>)
 80056be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c4:	f7fc fe80 	bl	80023c8 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056cc:	f7fc fe7c 	bl	80023c8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e045      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056de:	4b25      	ldr	r3, [pc, #148]	; (8005774 <HAL_RCC_OscConfig+0x858>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_OscConfig+0x7b0>
 80056ea:	e03d      	b.n	8005768 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80056ec:	4b21      	ldr	r3, [pc, #132]	; (8005774 <HAL_RCC_OscConfig+0x858>)
 80056ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80056f2:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_RCC_OscConfig+0x858>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d031      	beq.n	8005764 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f003 0203 	and.w	r2, r3, #3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800570a:	429a      	cmp	r2, r3
 800570c:	d12a      	bne.n	8005764 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	091b      	lsrs	r3, r3, #4
 8005712:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800571a:	429a      	cmp	r2, r3
 800571c:	d122      	bne.n	8005764 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005728:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800572a:	429a      	cmp	r2, r3
 800572c:	d11a      	bne.n	8005764 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	0a5b      	lsrs	r3, r3, #9
 8005732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d111      	bne.n	8005764 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d108      	bne.n	8005764 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	0e1b      	lsrs	r3, r3, #24
 8005756:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005760:	429a      	cmp	r2, r3
 8005762:	d001      	beq.n	8005768 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3730      	adds	r7, #48	; 0x30
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	58024400 	.word	0x58024400

08005778 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d101      	bne.n	800578c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e19c      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800578c:	4b8a      	ldr	r3, [pc, #552]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d910      	bls.n	80057bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800579a:	4b87      	ldr	r3, [pc, #540]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 020f 	bic.w	r2, r3, #15
 80057a2:	4985      	ldr	r1, [pc, #532]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b83      	ldr	r3, [pc, #524]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e184      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d010      	beq.n	80057ea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	4b7b      	ldr	r3, [pc, #492]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d908      	bls.n	80057ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057d8:	4b78      	ldr	r3, [pc, #480]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	4975      	ldr	r1, [pc, #468]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695a      	ldr	r2, [r3, #20]
 80057fa:	4b70      	ldr	r3, [pc, #448]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005802:	429a      	cmp	r2, r3
 8005804:	d908      	bls.n	8005818 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005806:	4b6d      	ldr	r3, [pc, #436]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	496a      	ldr	r1, [pc, #424]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005814:	4313      	orrs	r3, r2
 8005816:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d010      	beq.n	8005846 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699a      	ldr	r2, [r3, #24]
 8005828:	4b64      	ldr	r3, [pc, #400]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005830:	429a      	cmp	r2, r3
 8005832:	d908      	bls.n	8005846 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005834:	4b61      	ldr	r3, [pc, #388]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005836:	69db      	ldr	r3, [r3, #28]
 8005838:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	495e      	ldr	r1, [pc, #376]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005842:	4313      	orrs	r3, r2
 8005844:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	d010      	beq.n	8005874 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	69da      	ldr	r2, [r3, #28]
 8005856:	4b59      	ldr	r3, [pc, #356]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800585e:	429a      	cmp	r2, r3
 8005860:	d908      	bls.n	8005874 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005862:	4b56      	ldr	r3, [pc, #344]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
 800586e:	4953      	ldr	r1, [pc, #332]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005870:	4313      	orrs	r3, r2
 8005872:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0302 	and.w	r3, r3, #2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68da      	ldr	r2, [r3, #12]
 8005884:	4b4d      	ldr	r3, [pc, #308]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	429a      	cmp	r2, r3
 800588e:	d908      	bls.n	80058a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005890:	4b4a      	ldr	r3, [pc, #296]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f023 020f 	bic.w	r2, r3, #15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	4947      	ldr	r1, [pc, #284]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d055      	beq.n	800595a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80058ae:	4b43      	ldr	r3, [pc, #268]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	4940      	ldr	r1, [pc, #256]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80058c8:	4b3c      	ldr	r3, [pc, #240]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d121      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0f6      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d107      	bne.n	80058f0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058e0:	4b36      	ldr	r3, [pc, #216]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d115      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e0ea      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d107      	bne.n	8005908 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d109      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0de      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005908:	4b2c      	ldr	r3, [pc, #176]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d101      	bne.n	8005918 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e0d6      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005918:	4b28      	ldr	r3, [pc, #160]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f023 0207 	bic.w	r2, r3, #7
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	4925      	ldr	r1, [pc, #148]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005926:	4313      	orrs	r3, r2
 8005928:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592a:	f7fc fd4d 	bl	80023c8 <HAL_GetTick>
 800592e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005930:	e00a      	b.n	8005948 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005932:	f7fc fd49 	bl	80023c8 <HAL_GetTick>
 8005936:	4602      	mov	r2, r0
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005940:	4293      	cmp	r3, r2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0be      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005948:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	00db      	lsls	r3, r3, #3
 8005956:	429a      	cmp	r2, r3
 8005958:	d1eb      	bne.n	8005932 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d010      	beq.n	8005988 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 030f 	and.w	r3, r3, #15
 8005972:	429a      	cmp	r2, r3
 8005974:	d208      	bcs.n	8005988 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005976:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f023 020f 	bic.w	r2, r3, #15
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	490e      	ldr	r1, [pc, #56]	; (80059bc <HAL_RCC_ClockConfig+0x244>)
 8005984:	4313      	orrs	r3, r2
 8005986:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005988:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	429a      	cmp	r2, r3
 8005994:	d214      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005996:	4b08      	ldr	r3, [pc, #32]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 020f 	bic.w	r2, r3, #15
 800599e:	4906      	ldr	r1, [pc, #24]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_RCC_ClockConfig+0x240>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e086      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x34e>
 80059b8:	52002000 	.word	0x52002000
 80059bc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d010      	beq.n	80059ee <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	691a      	ldr	r2, [r3, #16]
 80059d0:	4b3f      	ldr	r3, [pc, #252]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d8:	429a      	cmp	r2, r3
 80059da:	d208      	bcs.n	80059ee <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059dc:	4b3c      	ldr	r3, [pc, #240]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	4939      	ldr	r1, [pc, #228]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d010      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695a      	ldr	r2, [r3, #20]
 80059fe:	4b34      	ldr	r3, [pc, #208]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d208      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005a0a:	4b31      	ldr	r3, [pc, #196]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	492e      	ldr	r1, [pc, #184]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	699a      	ldr	r2, [r3, #24]
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d208      	bcs.n	8005a4a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a38:	4b25      	ldr	r3, [pc, #148]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	699b      	ldr	r3, [r3, #24]
 8005a44:	4922      	ldr	r1, [pc, #136]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d010      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d208      	bcs.n	8005a78 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005a66:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4917      	ldr	r1, [pc, #92]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a78:	f000 f834 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	0a1b      	lsrs	r3, r3, #8
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	4912      	ldr	r1, [pc, #72]	; (8005ad4 <HAL_RCC_ClockConfig+0x35c>)
 8005a8a:	5ccb      	ldrb	r3, [r1, r3]
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	fa22 f303 	lsr.w	r3, r2, r3
 8005a94:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a96:	4b0e      	ldr	r3, [pc, #56]	; (8005ad0 <HAL_RCC_ClockConfig+0x358>)
 8005a98:	699b      	ldr	r3, [r3, #24]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a0d      	ldr	r2, [pc, #52]	; (8005ad4 <HAL_RCC_ClockConfig+0x35c>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <HAL_RCC_ClockConfig+0x360>)
 8005aae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ab0:	4a0a      	ldr	r2, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x364>)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	; (8005ae0 <HAL_RCC_ClockConfig+0x368>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc fc3a 	bl	8002334 <HAL_InitTick>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	58024400 	.word	0x58024400
 8005ad4:	08013cb8 	.word	0x08013cb8
 8005ad8:	24000004 	.word	0x24000004
 8005adc:	24000000 	.word	0x24000000
 8005ae0:	24000008 	.word	0x24000008

08005ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b089      	sub	sp, #36	; 0x24
 8005ae8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aea:	4bb3      	ldr	r3, [pc, #716]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005af2:	2b18      	cmp	r3, #24
 8005af4:	f200 8155 	bhi.w	8005da2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005af8:	a201      	add	r2, pc, #4	; (adr r2, 8005b00 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afe:	bf00      	nop
 8005b00:	08005b65 	.word	0x08005b65
 8005b04:	08005da3 	.word	0x08005da3
 8005b08:	08005da3 	.word	0x08005da3
 8005b0c:	08005da3 	.word	0x08005da3
 8005b10:	08005da3 	.word	0x08005da3
 8005b14:	08005da3 	.word	0x08005da3
 8005b18:	08005da3 	.word	0x08005da3
 8005b1c:	08005da3 	.word	0x08005da3
 8005b20:	08005b8b 	.word	0x08005b8b
 8005b24:	08005da3 	.word	0x08005da3
 8005b28:	08005da3 	.word	0x08005da3
 8005b2c:	08005da3 	.word	0x08005da3
 8005b30:	08005da3 	.word	0x08005da3
 8005b34:	08005da3 	.word	0x08005da3
 8005b38:	08005da3 	.word	0x08005da3
 8005b3c:	08005da3 	.word	0x08005da3
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005da3 	.word	0x08005da3
 8005b48:	08005da3 	.word	0x08005da3
 8005b4c:	08005da3 	.word	0x08005da3
 8005b50:	08005da3 	.word	0x08005da3
 8005b54:	08005da3 	.word	0x08005da3
 8005b58:	08005da3 	.word	0x08005da3
 8005b5c:	08005da3 	.word	0x08005da3
 8005b60:	08005b97 	.word	0x08005b97
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b64:	4b94      	ldr	r3, [pc, #592]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d009      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005b70:	4b91      	ldr	r3, [pc, #580]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	08db      	lsrs	r3, r3, #3
 8005b76:	f003 0303 	and.w	r3, r3, #3
 8005b7a:	4a90      	ldr	r2, [pc, #576]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005b82:	e111      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b84:	4b8d      	ldr	r3, [pc, #564]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b86:	61bb      	str	r3, [r7, #24]
    break;
 8005b88:	e10e      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005b8a:	4b8d      	ldr	r3, [pc, #564]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b8c:	61bb      	str	r3, [r7, #24]
    break;
 8005b8e:	e10b      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005b90:	4b8c      	ldr	r3, [pc, #560]	; (8005dc4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b92:	61bb      	str	r3, [r7, #24]
    break;
 8005b94:	e108      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b96:	4b88      	ldr	r3, [pc, #544]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ba0:	4b85      	ldr	r3, [pc, #532]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005baa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005bac:	4b82      	ldr	r3, [pc, #520]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005bb6:	4b80      	ldr	r3, [pc, #512]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	08db      	lsrs	r3, r3, #3
 8005bbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	fb02 f303 	mul.w	r3, r2, r3
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bce:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80e1 	beq.w	8005d9c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	f000 8083 	beq.w	8005ce8 <HAL_RCC_GetSysClockFreq+0x204>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	f200 80a1 	bhi.w	8005d2c <HAL_RCC_GetSysClockFreq+0x248>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <HAL_RCC_GetSysClockFreq+0x114>
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d056      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bf6:	e099      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bf8:	4b6f      	ldr	r3, [pc, #444]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0320 	and.w	r3, r3, #32
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02d      	beq.n	8005c60 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c04:	4b6c      	ldr	r3, [pc, #432]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	08db      	lsrs	r3, r3, #3
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	4a6b      	ldr	r2, [pc, #428]	; (8005dbc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
 8005c14:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c2e:	4b62      	ldr	r3, [pc, #392]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c42:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005c5e:	e087      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005dcc <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c72:	4b51      	ldr	r3, [pc, #324]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c86:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca2:	e065      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	ee07 3a90 	vmov	s15, r3
 8005caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cae:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005cb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb6:	4b40      	ldr	r3, [pc, #256]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cca:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005cce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ce6:	e043      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005dd4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b2f      	ldr	r3, [pc, #188]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d2a:	e021      	b.n	8005d70 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	ee07 3a90 	vmov	s15, r3
 8005d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d36:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005dd0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3e:	4b1e      	ldr	r3, [pc, #120]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d46:	ee07 3a90 	vmov	s15, r3
 8005d4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d52:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005dc8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d6e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005d70:	4b11      	ldr	r3, [pc, #68]	; (8005db8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d74:	0a5b      	lsrs	r3, r3, #9
 8005d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	ee07 3a90 	vmov	s15, r3
 8005d84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d88:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d94:	ee17 3a90 	vmov	r3, s15
 8005d98:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005d9a:	e005      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
    break;
 8005da0:	e002      	b.n	8005da8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005da2:	4b07      	ldr	r3, [pc, #28]	; (8005dc0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005da4:	61bb      	str	r3, [r7, #24]
    break;
 8005da6:	bf00      	nop
  }

  return sysclockfreq;
 8005da8:	69bb      	ldr	r3, [r7, #24]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3724      	adds	r7, #36	; 0x24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	03d09000 	.word	0x03d09000
 8005dc0:	003d0900 	.word	0x003d0900
 8005dc4:	017d7840 	.word	0x017d7840
 8005dc8:	46000000 	.word	0x46000000
 8005dcc:	4c742400 	.word	0x4c742400
 8005dd0:	4a742400 	.word	0x4a742400
 8005dd4:	4bbebc20 	.word	0x4bbebc20

08005dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dde:	f7ff fe81 	bl	8005ae4 <HAL_RCC_GetSysClockFreq>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	490f      	ldr	r1, [pc, #60]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005df0:	5ccb      	ldrb	r3, [r1, r3]
 8005df2:	f003 031f 	and.w	r3, r3, #31
 8005df6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	4a09      	ldr	r2, [pc, #36]	; (8005e2c <HAL_RCC_GetHCLKFreq+0x54>)
 8005e06:	5cd3      	ldrb	r3, [r2, r3]
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	4a07      	ldr	r2, [pc, #28]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e14:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005e16:	4a07      	ldr	r2, [pc, #28]	; (8005e34 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005e1c:	4b04      	ldr	r3, [pc, #16]	; (8005e30 <HAL_RCC_GetHCLKFreq+0x58>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	08013cb8 	.word	0x08013cb8
 8005e30:	24000004 	.word	0x24000004
 8005e34:	24000000 	.word	0x24000000

08005e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e3c:	f7ff ffcc 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e40:	4602      	mov	r2, r0
 8005e42:	4b06      	ldr	r3, [pc, #24]	; (8005e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	4904      	ldr	r1, [pc, #16]	; (8005e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e4e:	5ccb      	ldrb	r3, [r1, r3]
 8005e50:	f003 031f 	and.w	r3, r3, #31
 8005e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	58024400 	.word	0x58024400
 8005e60:	08013cb8 	.word	0x08013cb8

08005e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005e68:	f7ff ffb6 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	4904      	ldr	r1, [pc, #16]	; (8005e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005e7a:	5ccb      	ldrb	r3, [r1, r3]
 8005e7c:	f003 031f 	and.w	r3, r3, #31
 8005e80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	58024400 	.word	0x58024400
 8005e8c:	08013cb8 	.word	0x08013cb8

08005e90 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005e98:	2300      	movs	r3, #0
 8005e9a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d03f      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eb4:	d02a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005eb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eba:	d824      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ebc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec0:	d018      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ec6:	d81e      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed0:	d007      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005ed2:	e018      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed4:	4ba3      	ldr	r3, [pc, #652]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4aa2      	ldr	r2, [pc, #648]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ee0:	e015      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	2102      	movs	r1, #2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 fff9 	bl	8007ee0 <RCCEx_PLL2_Config>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005ef2:	e00c      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3324      	adds	r3, #36	; 0x24
 8005ef8:	2102      	movs	r1, #2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f002 f8a2 	bl	8008044 <RCCEx_PLL3_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
      break;
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0e:	7dfb      	ldrb	r3, [r7, #23]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f14:	4b93      	ldr	r3, [pc, #588]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f20:	4990      	ldr	r1, [pc, #576]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	650b      	str	r3, [r1, #80]	; 0x50
 8005f26:	e001      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f28:	7dfb      	ldrb	r3, [r7, #23]
 8005f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d03d      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d826      	bhi.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f40:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f46:	bf00      	nop
 8005f48:	08005f5d 	.word	0x08005f5d
 8005f4c:	08005f6b 	.word	0x08005f6b
 8005f50:	08005f7d 	.word	0x08005f7d
 8005f54:	08005f95 	.word	0x08005f95
 8005f58:	08005f95 	.word	0x08005f95
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f5c:	4b81      	ldr	r3, [pc, #516]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4a80      	ldr	r2, [pc, #512]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f68:	e015      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	2100      	movs	r1, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 ffb5 	bl	8007ee0 <RCCEx_PLL2_Config>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f7a:	e00c      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3324      	adds	r3, #36	; 0x24
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f002 f85e 	bl	8008044 <RCCEx_PLL3_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005f8c:	e003      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	75fb      	strb	r3, [r7, #23]
      break;
 8005f92:	e000      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f96:	7dfb      	ldrb	r3, [r7, #23]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f9c:	4b71      	ldr	r3, [pc, #452]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa0:	f023 0207 	bic.w	r2, r3, #7
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa8:	496e      	ldr	r1, [pc, #440]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	650b      	str	r3, [r1, #80]	; 0x50
 8005fae:	e001      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb0:	7dfb      	ldrb	r3, [r7, #23]
 8005fb2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d042      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc8:	d02b      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fce:	d825      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fd0:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd2:	d028      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8005fd6:	d821      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fd8:	2b80      	cmp	r3, #128	; 0x80
 8005fda:	d016      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d81d      	bhi.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d007      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005fe8:	e018      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fea:	4b5e      	ldr	r3, [pc, #376]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	4a5d      	ldr	r2, [pc, #372]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005ff6:	e017      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 ff6e 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006004:	4603      	mov	r3, r0
 8006006:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006008:	e00e      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3324      	adds	r3, #36	; 0x24
 800600e:	2100      	movs	r1, #0
 8006010:	4618      	mov	r0, r3
 8006012:	f002 f817 	bl	8008044 <RCCEx_PLL3_Config>
 8006016:	4603      	mov	r3, r0
 8006018:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800601a:	e005      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	75fb      	strb	r3, [r7, #23]
      break;
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006028:	7dfb      	ldrb	r3, [r7, #23]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d109      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800602e:	4b4d      	ldr	r3, [pc, #308]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006032:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800603a:	494a      	ldr	r1, [pc, #296]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800603c:	4313      	orrs	r3, r2
 800603e:	650b      	str	r3, [r1, #80]	; 0x50
 8006040:	e001      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	2b00      	cmp	r3, #0
 8006050:	d049      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800605c:	d030      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800605e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006062:	d82a      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006064:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006068:	d02c      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800606a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800606e:	d824      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006074:	d018      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607a:	d81e      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006084:	d007      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006086:	e018      	b.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006088:	4b36      	ldr	r3, [pc, #216]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a35      	ldr	r2, [pc, #212]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800608e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006094:	e017      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	3304      	adds	r3, #4
 800609a:	2100      	movs	r1, #0
 800609c:	4618      	mov	r0, r3
 800609e:	f001 ff1f 	bl	8007ee0 <RCCEx_PLL2_Config>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80060a6:	e00e      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3324      	adds	r3, #36	; 0x24
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 ffc8 	bl	8008044 <RCCEx_PLL3_Config>
 80060b4:	4603      	mov	r3, r0
 80060b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060b8:	e005      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	75fb      	strb	r3, [r7, #23]
      break;
 80060be:	e002      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80060c0:	bf00      	nop
 80060c2:	e000      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80060c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80060cc:	4b25      	ldr	r3, [pc, #148]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060da:	4922      	ldr	r1, [pc, #136]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	658b      	str	r3, [r1, #88]	; 0x58
 80060e0:	e001      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e2:	7dfb      	ldrb	r3, [r7, #23]
 80060e4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d04b      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80060fc:	d030      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80060fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006102:	d82a      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006104:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006108:	d02e      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800610a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800610e:	d824      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006114:	d018      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800611a:	d81e      	bhi.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006124:	d007      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006126:	e018      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	4a0d      	ldr	r2, [pc, #52]	; (8006164 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800612e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006134:	e019      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3304      	adds	r3, #4
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f001 fecf 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006146:	e010      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3324      	adds	r3, #36	; 0x24
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f001 ff78 	bl	8008044 <RCCEx_PLL3_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006158:	e007      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	75fb      	strb	r3, [r7, #23]
      break;
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006164:	58024400 	.word	0x58024400
      break;
 8006168:	bf00      	nop
    }

    if(ret == HAL_OK)
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006170:	4b99      	ldr	r3, [pc, #612]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006174:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800617e:	4996      	ldr	r1, [pc, #600]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006180:	4313      	orrs	r3, r2
 8006182:	658b      	str	r3, [r1, #88]	; 0x58
 8006184:	e001      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006192:	2b00      	cmp	r3, #0
 8006194:	d032      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619a:	2b30      	cmp	r3, #48	; 0x30
 800619c:	d01c      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800619e:	2b30      	cmp	r3, #48	; 0x30
 80061a0:	d817      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061a2:	2b20      	cmp	r3, #32
 80061a4:	d00c      	beq.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d813      	bhi.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d10f      	bne.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b2:	4b89      	ldr	r3, [pc, #548]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	4a88      	ldr	r2, [pc, #544]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061be:	e00e      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	3304      	adds	r3, #4
 80061c4:	2102      	movs	r1, #2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 fe8a 	bl	8007ee0 <RCCEx_PLL2_Config>
 80061cc:	4603      	mov	r3, r0
 80061ce:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80061d0:	e005      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	75fb      	strb	r3, [r7, #23]
      break;
 80061d6:	e002      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80061d8:	bf00      	nop
 80061da:	e000      	b.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80061dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061e4:	4b7c      	ldr	r3, [pc, #496]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061f0:	4979      	ldr	r1, [pc, #484]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80061f6:	e001      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f8:	7dfb      	ldrb	r3, [r7, #23]
 80061fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d047      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006210:	d030      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006216:	d82a      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800621c:	d02c      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800621e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006222:	d824      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006228:	d018      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800622a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622e:	d81e      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d003      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006238:	d007      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800623a:	e018      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623c:	4b66      	ldr	r3, [pc, #408]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a65      	ldr	r2, [pc, #404]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006248:	e017      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 fe45 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800625a:	e00e      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 feee 	bl	8008044 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800626c:	e005      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
      break;
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d109      	bne.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006280:	4b55      	ldr	r3, [pc, #340]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628c:	4952      	ldr	r1, [pc, #328]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800628e:	4313      	orrs	r3, r2
 8006290:	650b      	str	r3, [r1, #80]	; 0x50
 8006292:	e001      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006294:	7dfb      	ldrb	r3, [r7, #23]
 8006296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d049      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ac:	d02e      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80062ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b2:	d828      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062b8:	d02a      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80062ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062be:	d822      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062c4:	d026      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80062c6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062ca:	d81c      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d0:	d010      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80062d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062d6:	d816      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01d      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80062dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e0:	d111      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2101      	movs	r1, #1
 80062e8:	4618      	mov	r0, r3
 80062ea:	f001 fdf9 	bl	8007ee0 <RCCEx_PLL2_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80062f2:	e012      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3324      	adds	r3, #36	; 0x24
 80062f8:	2101      	movs	r1, #1
 80062fa:	4618      	mov	r0, r3
 80062fc:	f001 fea2 	bl	8008044 <RCCEx_PLL3_Config>
 8006300:	4603      	mov	r3, r0
 8006302:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006304:	e009      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	e006      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800630c:	bf00      	nop
 800630e:	e004      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006318:	bf00      	nop
    }

    if(ret == HAL_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d109      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006320:	4b2d      	ldr	r3, [pc, #180]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632c:	492a      	ldr	r1, [pc, #168]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632e:	4313      	orrs	r3, r2
 8006330:	650b      	str	r3, [r1, #80]	; 0x50
 8006332:	e001      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006334:	7dfb      	ldrb	r3, [r7, #23]
 8006336:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d04d      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800634a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800634e:	d02e      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006350:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006354:	d828      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800635a:	d02a      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800635c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006360:	d822      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006362:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006366:	d026      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006368:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800636c:	d81c      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800636e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006372:	d010      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006378:	d816      	bhi.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800637a:	2b00      	cmp	r3, #0
 800637c:	d01d      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800637e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006382:	d111      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	2101      	movs	r1, #1
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fda8 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006390:	4603      	mov	r3, r0
 8006392:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006394:	e012      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	3324      	adds	r3, #36	; 0x24
 800639a:	2101      	movs	r1, #1
 800639c:	4618      	mov	r0, r3
 800639e:	f001 fe51 	bl	8008044 <RCCEx_PLL3_Config>
 80063a2:	4603      	mov	r3, r0
 80063a4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80063a6:	e009      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	75fb      	strb	r3, [r7, #23]
      break;
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063ae:	bf00      	nop
 80063b0:	e004      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063b2:	bf00      	nop
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80063ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10c      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80063c2:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80063d0:	4901      	ldr	r1, [pc, #4]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	658b      	str	r3, [r1, #88]	; 0x58
 80063d6:	e003      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80063d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	7dfb      	ldrb	r3, [r7, #23]
 80063de:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d02f      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f4:	d00e      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80063f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063fa:	d814      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d015      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006400:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006404:	d10f      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006406:	4baf      	ldr	r3, [pc, #700]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	4aae      	ldr	r2, [pc, #696]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800640c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006410:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006412:	e00c      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3304      	adds	r3, #4
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f001 fd60 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006424:	e003      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
      break;
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800642c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006434:	4ba3      	ldr	r3, [pc, #652]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006438:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006440:	49a0      	ldr	r1, [pc, #640]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006442:	4313      	orrs	r3, r2
 8006444:	650b      	str	r3, [r1, #80]	; 0x50
 8006446:	e001      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	7dfb      	ldrb	r3, [r7, #23]
 800644a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d032      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645c:	2b03      	cmp	r3, #3
 800645e:	d81b      	bhi.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	0800649f 	.word	0x0800649f
 800646c:	08006479 	.word	0x08006479
 8006470:	08006487 	.word	0x08006487
 8006474:	0800649f 	.word	0x0800649f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006478:	4b92      	ldr	r3, [pc, #584]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800647a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647c:	4a91      	ldr	r2, [pc, #580]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800647e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006482:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006484:	e00c      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3304      	adds	r3, #4
 800648a:	2102      	movs	r1, #2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fd27 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006496:	e003      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800649e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d109      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80064a6:	4b87      	ldr	r3, [pc, #540]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064aa:	f023 0203 	bic.w	r2, r3, #3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b2:	4984      	ldr	r1, [pc, #528]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064b8:	e001      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ba:	7dfb      	ldrb	r3, [r7, #23]
 80064bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 8086 	beq.w	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064cc:	4b7e      	ldr	r3, [pc, #504]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a7d      	ldr	r2, [pc, #500]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064d8:	f7fb ff76 	bl	80023c8 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064de:	e009      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064e0:	f7fb ff72 	bl	80023c8 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b64      	cmp	r3, #100	; 0x64
 80064ec:	d902      	bls.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	75fb      	strb	r3, [r7, #23]
        break;
 80064f2:	e005      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f4:	4b74      	ldr	r3, [pc, #464]	; (80066c8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ef      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d166      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006506:	4b6f      	ldr	r3, [pc, #444]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006508:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006510:	4053      	eors	r3, r2
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d013      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800651a:	4b6a      	ldr	r3, [pc, #424]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800651c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006522:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006524:	4b67      	ldr	r3, [pc, #412]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006528:	4a66      	ldr	r2, [pc, #408]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800652a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800652e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006530:	4b64      	ldr	r3, [pc, #400]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	4a63      	ldr	r2, [pc, #396]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800653c:	4a61      	ldr	r2, [pc, #388]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654c:	d115      	bne.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800654e:	f7fb ff3b 	bl	80023c8 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006554:	e00b      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006556:	f7fb ff37 	bl	80023c8 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f241 3288 	movw	r2, #5000	; 0x1388
 8006564:	4293      	cmp	r3, r2
 8006566:	d902      	bls.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	75fb      	strb	r3, [r7, #23]
            break;
 800656c:	e005      	b.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800656e:	4b55      	ldr	r3, [pc, #340]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0ed      	beq.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800657a:	7dfb      	ldrb	r3, [r7, #23]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d126      	bne.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006586:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800658a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006590:	4b4c      	ldr	r3, [pc, #304]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800659e:	0919      	lsrs	r1, r3, #4
 80065a0:	4b4a      	ldr	r3, [pc, #296]	; (80066cc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80065a2:	400b      	ands	r3, r1
 80065a4:	4947      	ldr	r1, [pc, #284]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	610b      	str	r3, [r1, #16]
 80065aa:	e005      	b.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80065ac:	4b45      	ldr	r3, [pc, #276]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	4a44      	ldr	r2, [pc, #272]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065b6:	6113      	str	r3, [r2, #16]
 80065b8:	4b42      	ldr	r3, [pc, #264]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065c6:	493f      	ldr	r1, [pc, #252]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	670b      	str	r3, [r1, #112]	; 0x70
 80065cc:	e004      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065ce:	7dfb      	ldrb	r3, [r7, #23]
 80065d0:	75bb      	strb	r3, [r7, #22]
 80065d2:	e001      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 8085 	beq.w	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ea:	2b28      	cmp	r3, #40	; 0x28
 80065ec:	d866      	bhi.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80065ee:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80065f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f4:	080066d1 	.word	0x080066d1
 80065f8:	080066bd 	.word	0x080066bd
 80065fc:	080066bd 	.word	0x080066bd
 8006600:	080066bd 	.word	0x080066bd
 8006604:	080066bd 	.word	0x080066bd
 8006608:	080066bd 	.word	0x080066bd
 800660c:	080066bd 	.word	0x080066bd
 8006610:	080066bd 	.word	0x080066bd
 8006614:	08006699 	.word	0x08006699
 8006618:	080066bd 	.word	0x080066bd
 800661c:	080066bd 	.word	0x080066bd
 8006620:	080066bd 	.word	0x080066bd
 8006624:	080066bd 	.word	0x080066bd
 8006628:	080066bd 	.word	0x080066bd
 800662c:	080066bd 	.word	0x080066bd
 8006630:	080066bd 	.word	0x080066bd
 8006634:	080066ab 	.word	0x080066ab
 8006638:	080066bd 	.word	0x080066bd
 800663c:	080066bd 	.word	0x080066bd
 8006640:	080066bd 	.word	0x080066bd
 8006644:	080066bd 	.word	0x080066bd
 8006648:	080066bd 	.word	0x080066bd
 800664c:	080066bd 	.word	0x080066bd
 8006650:	080066bd 	.word	0x080066bd
 8006654:	080066d1 	.word	0x080066d1
 8006658:	080066bd 	.word	0x080066bd
 800665c:	080066bd 	.word	0x080066bd
 8006660:	080066bd 	.word	0x080066bd
 8006664:	080066bd 	.word	0x080066bd
 8006668:	080066bd 	.word	0x080066bd
 800666c:	080066bd 	.word	0x080066bd
 8006670:	080066bd 	.word	0x080066bd
 8006674:	080066d1 	.word	0x080066d1
 8006678:	080066bd 	.word	0x080066bd
 800667c:	080066bd 	.word	0x080066bd
 8006680:	080066bd 	.word	0x080066bd
 8006684:	080066bd 	.word	0x080066bd
 8006688:	080066bd 	.word	0x080066bd
 800668c:	080066bd 	.word	0x080066bd
 8006690:	080066bd 	.word	0x080066bd
 8006694:	080066d1 	.word	0x080066d1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3304      	adds	r3, #4
 800669c:	2101      	movs	r1, #1
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 fc1e 	bl	8007ee0 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066a8:	e013      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3324      	adds	r3, #36	; 0x24
 80066ae:	2101      	movs	r1, #1
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 fcc7 	bl	8008044 <RCCEx_PLL3_Config>
 80066b6:	4603      	mov	r3, r0
 80066b8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80066ba:	e00a      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	75fb      	strb	r3, [r7, #23]
      break;
 80066c0:	e007      	b.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066c2:	bf00      	nop
 80066c4:	58024400 	.word	0x58024400
 80066c8:	58024800 	.word	0x58024800
 80066cc:	00ffffcf 	.word	0x00ffffcf
      break;
 80066d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d109      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80066d8:	4b96      	ldr	r3, [pc, #600]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066dc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e4:	4993      	ldr	r1, [pc, #588]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	654b      	str	r3, [r1, #84]	; 0x54
 80066ea:	e001      	b.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d038      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006700:	2b05      	cmp	r3, #5
 8006702:	d821      	bhi.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	0800674f 	.word	0x0800674f
 8006710:	08006725 	.word	0x08006725
 8006714:	08006737 	.word	0x08006737
 8006718:	0800674f 	.word	0x0800674f
 800671c:	0800674f 	.word	0x0800674f
 8006720:	0800674f 	.word	0x0800674f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	2101      	movs	r1, #1
 800672a:	4618      	mov	r0, r3
 800672c:	f001 fbd8 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006730:	4603      	mov	r3, r0
 8006732:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006734:	e00c      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3324      	adds	r3, #36	; 0x24
 800673a:	2101      	movs	r1, #1
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fc81 	bl	8008044 <RCCEx_PLL3_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006746:	e003      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]
      break;
 800674c:	e000      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800674e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d109      	bne.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006756:	4b77      	ldr	r3, [pc, #476]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675a:	f023 0207 	bic.w	r2, r3, #7
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006762:	4974      	ldr	r1, [pc, #464]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006764:	4313      	orrs	r3, r2
 8006766:	654b      	str	r3, [r1, #84]	; 0x54
 8006768:	e001      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	2b00      	cmp	r3, #0
 8006778:	d03a      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	2b05      	cmp	r3, #5
 8006782:	d821      	bhi.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067cf 	.word	0x080067cf
 8006790:	080067a5 	.word	0x080067a5
 8006794:	080067b7 	.word	0x080067b7
 8006798:	080067cf 	.word	0x080067cf
 800679c:	080067cf 	.word	0x080067cf
 80067a0:	080067cf 	.word	0x080067cf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3304      	adds	r3, #4
 80067a8:	2101      	movs	r1, #1
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 fb98 	bl	8007ee0 <RCCEx_PLL2_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067b4:	e00c      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3324      	adds	r3, #36	; 0x24
 80067ba:	2101      	movs	r1, #1
 80067bc:	4618      	mov	r0, r3
 80067be:	f001 fc41 	bl	8008044 <RCCEx_PLL3_Config>
 80067c2:	4603      	mov	r3, r0
 80067c4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80067c6:	e003      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
      break;
 80067cc:	e000      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80067ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067d0:	7dfb      	ldrb	r3, [r7, #23]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067d6:	4b57      	ldr	r3, [pc, #348]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	f023 0207 	bic.w	r2, r3, #7
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e4:	4953      	ldr	r1, [pc, #332]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80067e6:	4313      	orrs	r3, r2
 80067e8:	658b      	str	r3, [r1, #88]	; 0x58
 80067ea:	e001      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d04b      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006802:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006806:	d02e      	beq.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006808:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800680c:	d828      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800680e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006812:	d02a      	beq.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006818:	d822      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800681a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800681e:	d026      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006820:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006824:	d81c      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006826:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682a:	d010      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800682c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006830:	d816      	bhi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006832:	2b00      	cmp	r3, #0
 8006834:	d01d      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006836:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683a:	d111      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	3304      	adds	r3, #4
 8006840:	2100      	movs	r1, #0
 8006842:	4618      	mov	r0, r3
 8006844:	f001 fb4c 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006848:	4603      	mov	r3, r0
 800684a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800684c:	e012      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	3324      	adds	r3, #36	; 0x24
 8006852:	2102      	movs	r1, #2
 8006854:	4618      	mov	r0, r3
 8006856:	f001 fbf5 	bl	8008044 <RCCEx_PLL3_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800685e:	e009      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	75fb      	strb	r3, [r7, #23]
      break;
 8006864:	e006      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006866:	bf00      	nop
 8006868:	e004      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006872:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006874:	7dfb      	ldrb	r3, [r7, #23]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800687a:	4b2e      	ldr	r3, [pc, #184]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800687c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800687e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006888:	492a      	ldr	r1, [pc, #168]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800688a:	4313      	orrs	r3, r2
 800688c:	654b      	str	r3, [r1, #84]	; 0x54
 800688e:	e001      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800689c:	2b00      	cmp	r3, #0
 800689e:	d04d      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068a6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068aa:	d02e      	beq.n	800690a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80068ac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80068b0:	d828      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b6:	d02a      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	d822      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c2:	d026      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80068c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068c8:	d81c      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ce:	d010      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80068d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d4:	d816      	bhi.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d01d      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80068da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068de:	d111      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f001 fafa 	bl	8007ee0 <RCCEx_PLL2_Config>
 80068ec:	4603      	mov	r3, r0
 80068ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80068f0:	e012      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3324      	adds	r3, #36	; 0x24
 80068f6:	2102      	movs	r1, #2
 80068f8:	4618      	mov	r0, r3
 80068fa:	f001 fba3 	bl	8008044 <RCCEx_PLL3_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006902:	e009      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	75fb      	strb	r3, [r7, #23]
      break;
 8006908:	e006      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800690a:	bf00      	nop
 800690c:	e004      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800690e:	bf00      	nop
 8006910:	e002      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006912:	bf00      	nop
 8006914:	e000      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006918:	7dfb      	ldrb	r3, [r7, #23]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10c      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006922:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800692c:	4901      	ldr	r1, [pc, #4]	; (8006934 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800692e:	4313      	orrs	r3, r2
 8006930:	658b      	str	r3, [r1, #88]	; 0x58
 8006932:	e003      	b.n	800693c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006944:	2b00      	cmp	r3, #0
 8006946:	d04b      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800694e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006952:	d02e      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006954:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006958:	d828      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800695a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695e:	d02a      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006964:	d822      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006966:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800696a:	d026      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800696c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006970:	d81c      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006976:	d010      	beq.n	800699a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800697c:	d816      	bhi.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d01d      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006986:	d111      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3304      	adds	r3, #4
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f001 faa6 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006994:	4603      	mov	r3, r0
 8006996:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006998:	e012      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3324      	adds	r3, #36	; 0x24
 800699e:	2102      	movs	r1, #2
 80069a0:	4618      	mov	r0, r3
 80069a2:	f001 fb4f 	bl	8008044 <RCCEx_PLL3_Config>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80069aa:	e009      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	75fb      	strb	r3, [r7, #23]
      break;
 80069b0:	e006      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069b2:	bf00      	nop
 80069b4:	e004      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069b6:	bf00      	nop
 80069b8:	e002      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069ba:	bf00      	nop
 80069bc:	e000      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80069be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10a      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80069c6:	4b9d      	ldr	r3, [pc, #628]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069d4:	4999      	ldr	r1, [pc, #612]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	658b      	str	r3, [r1, #88]	; 0x58
 80069da:	e001      	b.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0308 	and.w	r3, r3, #8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01a      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069f6:	d10a      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3324      	adds	r3, #36	; 0x24
 80069fc:	2102      	movs	r1, #2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f001 fb20 	bl	8008044 <RCCEx_PLL3_Config>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006a0e:	4b8b      	ldr	r3, [pc, #556]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a1c:	4987      	ldr	r1, [pc, #540]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0310 	and.w	r3, r3, #16
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d01a      	beq.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a38:	d10a      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	3324      	adds	r3, #36	; 0x24
 8006a3e:	2102      	movs	r1, #2
 8006a40:	4618      	mov	r0, r3
 8006a42:	f001 faff 	bl	8008044 <RCCEx_PLL3_Config>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006a50:	4b7a      	ldr	r3, [pc, #488]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a5e:	4977      	ldr	r1, [pc, #476]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d034      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7a:	d01d      	beq.n	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a80:	d817      	bhi.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d003      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a8a:	d009      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006a8c:	e011      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3304      	adds	r3, #4
 8006a92:	2100      	movs	r1, #0
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fa23 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006a9e:	e00c      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3324      	adds	r3, #36	; 0x24
 8006aa4:	2102      	movs	r1, #2
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f001 facc 	bl	8008044 <RCCEx_PLL3_Config>
 8006aac:	4603      	mov	r3, r0
 8006aae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ab0:	e003      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab6:	e000      	b.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10a      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ac0:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ace:	495b      	ldr	r1, [pc, #364]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	658b      	str	r3, [r1, #88]	; 0x58
 8006ad4:	e001      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
 8006ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d033      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006aec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006af0:	d01c      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006af2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006af6:	d816      	bhi.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006af8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006afc:	d003      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b02:	d007      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006b04:	e00f      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b06:	4b4d      	ldr	r3, [pc, #308]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0a:	4a4c      	ldr	r2, [pc, #304]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b10:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b12:	e00c      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	3324      	adds	r3, #36	; 0x24
 8006b18:	2101      	movs	r1, #1
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 fa92 	bl	8008044 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006b24:	e003      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	75fb      	strb	r3, [r7, #23]
      break;
 8006b2a:	e000      	b.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b34:	4b41      	ldr	r3, [pc, #260]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b42:	493e      	ldr	r1, [pc, #248]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	654b      	str	r3, [r1, #84]	; 0x54
 8006b48:	e001      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4a:	7dfb      	ldrb	r3, [r7, #23]
 8006b4c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d029      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006b62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b66:	d007      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006b68:	e00f      	b.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6e:	4a33      	ldr	r2, [pc, #204]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b76:	e00b      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	2102      	movs	r1, #2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 f9ae 	bl	8007ee0 <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006b88:	e002      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b90:	7dfb      	ldrb	r3, [r7, #23]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d109      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006b96:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	4926      	ldr	r1, [pc, #152]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ba8:	e001      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006baa:	7dfb      	ldrb	r3, [r7, #23]
 8006bac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d00a      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3324      	adds	r3, #36	; 0x24
 8006bbe:	2102      	movs	r1, #2
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f001 fa3f 	bl	8008044 <RCCEx_PLL3_Config>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d033      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be4:	d017      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006be6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bea:	d811      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf0:	d013      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006bf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf6:	d80b      	bhi.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d010      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c00:	d106      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c02:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006c0e:	e007      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	75fb      	strb	r3, [r7, #23]
      break;
 8006c14:	e004      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c16:	bf00      	nop
 8006c18:	e002      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c1a:	bf00      	nop
 8006c1c:	e000      	b.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006c1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c32:	4902      	ldr	r1, [pc, #8]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c34:	4313      	orrs	r3, r2
 8006c36:	654b      	str	r3, [r1, #84]	; 0x54
 8006c38:	e004      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006c3a:	bf00      	nop
 8006c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
 8006c42:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d008      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c50:	4b31      	ldr	r3, [pc, #196]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c54:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5c:	492e      	ldr	r1, [pc, #184]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d009      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006c6e:	4b2a      	ldr	r3, [pc, #168]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c7c:	4926      	ldr	r1, [pc, #152]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d008      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c8e:	4b22      	ldr	r3, [pc, #136]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c92:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c9a:	491f      	ldr	r1, [pc, #124]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00d      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006cac:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	4a19      	ldr	r2, [pc, #100]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb6:	6113      	str	r3, [r2, #16]
 8006cb8:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006cc2:	4915      	ldr	r1, [pc, #84]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	da08      	bge.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006cd0:	4b11      	ldr	r3, [pc, #68]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cdc:	490e      	ldr	r1, [pc, #56]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d009      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006cee:	4b0a      	ldr	r3, [pc, #40]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfc:	4906      	ldr	r1, [pc, #24]	; (8006d18 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006d02:	7dbb      	ldrb	r3, [r7, #22]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d101      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	58024400 	.word	0x58024400

08006d1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b090      	sub	sp, #64	; 0x40
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2a:	f040 8095 	bne.w	8006e58 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006d2e:	4b97      	ldr	r3, [pc, #604]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	f200 8088 	bhi.w	8006e50 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d5d 	.word	0x08006d5d
 8006d4c:	08006d85 	.word	0x08006d85
 8006d50:	08006dad 	.word	0x08006dad
 8006d54:	08006e49 	.word	0x08006e49
 8006d58:	08006dd5 	.word	0x08006dd5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d5c:	4b8b      	ldr	r3, [pc, #556]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d68:	d108      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 ff64 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006d78:	f000 bc94 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d80:	f000 bc90 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d84:	4b81      	ldr	r3, [pc, #516]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d90:	d108      	bne.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d92:	f107 0318 	add.w	r3, r7, #24
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fca8 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006da0:	f000 bc80 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006da8:	f000 bc7c 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dac:	4b77      	ldr	r3, [pc, #476]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006db8:	d108      	bne.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dba:	f107 030c 	add.w	r3, r7, #12
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fde8 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006dc8:	f000 bc6c 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dd0:	f000 bc68 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006dd4:	4b6d      	ldr	r3, [pc, #436]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006dde:	4b6b      	ldr	r3, [pc, #428]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0304 	and.w	r3, r3, #4
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d10c      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8006dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d109      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006df0:	4b66      	ldr	r3, [pc, #408]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	08db      	lsrs	r3, r3, #3
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	4a65      	ldr	r2, [pc, #404]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8006e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e02:	e01f      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e04:	4b61      	ldr	r3, [pc, #388]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e10:	d106      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e18:	d102      	bne.n	8006e20 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006e1a:	4b5e      	ldr	r3, [pc, #376]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e1e:	e011      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e20:	4b5a      	ldr	r3, [pc, #360]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e2c:	d106      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e34:	d102      	bne.n	8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006e36:	4b58      	ldr	r3, [pc, #352]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006e38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3a:	e003      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006e40:	f000 bc30 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006e44:	f000 bc2e 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e48:	4b54      	ldr	r3, [pc, #336]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4c:	f000 bc2a 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e54:	f000 bc26 	b.w	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e5e:	f040 809f 	bne.w	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006e62:	4b4a      	ldr	r3, [pc, #296]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e66:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006e6a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e72:	d04d      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e7a:	f200 8084 	bhi.w	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2bc0      	cmp	r3, #192	; 0xc0
 8006e82:	d07d      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	2bc0      	cmp	r3, #192	; 0xc0
 8006e88:	d87d      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8c:	2b80      	cmp	r3, #128	; 0x80
 8006e8e:	d02d      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	2b80      	cmp	r3, #128	; 0x80
 8006e94:	d877      	bhi.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	2b40      	cmp	r3, #64	; 0x40
 8006ea0:	d012      	beq.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006ea2:	e070      	b.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ea4:	4b39      	ldr	r3, [pc, #228]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb0:	d107      	bne.n	8006ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 fec0 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ec0:	e3f0      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ec6:	e3ed      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ec8:	4b30      	ldr	r3, [pc, #192]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ed6:	f107 0318 	add.w	r3, r7, #24
 8006eda:	4618      	mov	r0, r3
 8006edc:	f000 fc06 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ee4:	e3de      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eea:	e3db      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006eec:	4b27      	ldr	r3, [pc, #156]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef8:	d107      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006efa:	f107 030c 	add.w	r3, r7, #12
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fd48 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006f08:	e3cc      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f0e:	e3c9      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f10:	4b1e      	ldr	r3, [pc, #120]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f1a:	4b1c      	ldr	r3, [pc, #112]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b04      	cmp	r3, #4
 8006f24:	d10c      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8006f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d109      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f2c:	4b17      	ldr	r3, [pc, #92]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	08db      	lsrs	r3, r3, #3
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	4a16      	ldr	r2, [pc, #88]	; (8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f3e:	e01e      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4c:	d106      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f54:	d102      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f5a:	e010      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f5c:	4b0b      	ldr	r3, [pc, #44]	; (8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f68:	d106      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f70:	d102      	bne.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f72:	4b09      	ldr	r3, [pc, #36]	; (8006f98 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f76:	e002      	b.n	8006f7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f7c:	e392      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006f7e:	e391      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f80:	4b06      	ldr	r3, [pc, #24]	; (8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f84:	e38e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f8a:	e38b      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	03d09000 	.word	0x03d09000
 8006f94:	003d0900 	.word	0x003d0900
 8006f98:	017d7840 	.word	0x017d7840
 8006f9c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa6:	f040 809c 	bne.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006faa:	4b9d      	ldr	r3, [pc, #628]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fba:	d054      	beq.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006fc2:	f200 808b 	bhi.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fcc:	f000 8083 	beq.w	80070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006fd6:	f200 8081 	bhi.w	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe0:	d02f      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fe8:	d878      	bhi.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d004      	beq.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ff6:	d012      	beq.n	800701e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 8006ff8:	e070      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ffa:	4b89      	ldr	r3, [pc, #548]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007006:	d107      	bne.n	8007018 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800700c:	4618      	mov	r0, r3
 800700e:	f000 fe15 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007016:	e345      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800701c:	e342      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800701e:	4b80      	ldr	r3, [pc, #512]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800702a:	d107      	bne.n	800703c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800702c:	f107 0318 	add.w	r3, r7, #24
 8007030:	4618      	mov	r0, r3
 8007032:	f000 fb5b 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800703a:	e333      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007040:	e330      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007042:	4b77      	ldr	r3, [pc, #476]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800704a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800704e:	d107      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f000 fc9d 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800705e:	e321      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007060:	2300      	movs	r3, #0
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007064:	e31e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007066:	4b6e      	ldr	r3, [pc, #440]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800706a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800706e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007070:	4b6b      	ldr	r3, [pc, #428]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	2b04      	cmp	r3, #4
 800707a:	d10c      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800707c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707e:	2b00      	cmp	r3, #0
 8007080:	d109      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007082:	4b67      	ldr	r3, [pc, #412]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	08db      	lsrs	r3, r3, #3
 8007088:	f003 0303 	and.w	r3, r3, #3
 800708c:	4a65      	ldr	r2, [pc, #404]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800708e:	fa22 f303 	lsr.w	r3, r2, r3
 8007092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007094:	e01e      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007096:	4b62      	ldr	r3, [pc, #392]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a2:	d106      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80070a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070aa:	d102      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80070ac:	4b5e      	ldr	r3, [pc, #376]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	e010      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070b2:	4b5b      	ldr	r3, [pc, #364]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070be:	d106      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070c6:	d102      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80070c8:	4b58      	ldr	r3, [pc, #352]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070cc:	e002      	b.n	80070d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80070ce:	2300      	movs	r3, #0
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80070d2:	e2e7      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80070d4:	e2e6      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80070d6:	4b56      	ldr	r3, [pc, #344]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80070d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070da:	e2e3      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80070dc:	2300      	movs	r3, #0
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070e0:	e2e0      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e8:	f040 80a7 	bne.w	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80070ec:	4b4c      	ldr	r3, [pc, #304]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80070ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80070f4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070fc:	d055      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007104:	f200 8096 	bhi.w	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800710e:	f000 8084 	beq.w	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8007112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007114:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007118:	f200 808c 	bhi.w	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007122:	d030      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800712a:	f200 8083 	bhi.w	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	2b00      	cmp	r3, #0
 8007132:	d004      	beq.n	800713e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8007134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007136:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800713a:	d012      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800713c:	e07a      	b.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800713e:	4b38      	ldr	r3, [pc, #224]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800714a:	d107      	bne.n	800715c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800714c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fd73 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800715a:	e2a3      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800715c:	2300      	movs	r3, #0
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007160:	e2a0      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007162:	4b2f      	ldr	r3, [pc, #188]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800716a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800716e:	d107      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007170:	f107 0318 	add.w	r3, r7, #24
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fab9 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800717e:	e291      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007184:	e28e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007186:	4b26      	ldr	r3, [pc, #152]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800718e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007192:	d107      	bne.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007194:	f107 030c 	add.w	r3, r7, #12
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fbfb 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80071a2:	e27f      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071a8:	e27c      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071aa:	4b1d      	ldr	r3, [pc, #116]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071b4:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0304 	and.w	r3, r3, #4
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d10c      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071c6:	4b16      	ldr	r3, [pc, #88]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	08db      	lsrs	r3, r3, #3
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	4a14      	ldr	r2, [pc, #80]	; (8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80071d2:	fa22 f303 	lsr.w	r3, r2, r3
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071d8:	e01e      	b.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071da:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e6:	d106      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ee:	d102      	bne.n	80071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80071f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071f4:	e010      	b.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007202:	d106      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8007204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800720a:	d102      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800720c:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007210:	e002      	b.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007216:	e245      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007218:	e244      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800721a:	4b05      	ldr	r3, [pc, #20]	; (8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800721c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800721e:	e241      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007220:	58024400 	.word	0x58024400
 8007224:	03d09000 	.word	0x03d09000
 8007228:	003d0900 	.word	0x003d0900
 800722c:	017d7840 	.word	0x017d7840
 8007230:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007238:	e234      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007240:	f040 809c 	bne.w	800737c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007244:	4b9b      	ldr	r3, [pc, #620]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007248:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800724c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007254:	d054      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800725c:	f200 808b 	bhi.w	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007266:	f000 8083 	beq.w	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800726a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007270:	f200 8081 	bhi.w	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800727a:	d02f      	beq.n	80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800727c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007282:	d878      	bhi.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8007284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800728a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800728c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007290:	d012      	beq.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8007292:	e070      	b.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007294:	4b87      	ldr	r3, [pc, #540]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800729c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072a0:	d107      	bne.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80072a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fcc8 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072b0:	e1f8      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80072b2:	2300      	movs	r3, #0
 80072b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b6:	e1f5      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80072b8:	4b7e      	ldr	r3, [pc, #504]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072c4:	d107      	bne.n	80072d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80072c6:	f107 0318 	add.w	r3, r7, #24
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fa0e 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072d4:	e1e6      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072da:	e1e3      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072dc:	4b75      	ldr	r3, [pc, #468]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072e8:	d107      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ea:	f107 030c 	add.w	r3, r7, #12
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fb50 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80072f8:	e1d4      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072fe:	e1d1      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007300:	4b6c      	ldr	r3, [pc, #432]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007308:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800730a:	4b6a      	ldr	r3, [pc, #424]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0304 	and.w	r3, r3, #4
 8007312:	2b04      	cmp	r3, #4
 8007314:	d10c      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8007316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800731c:	4b65      	ldr	r3, [pc, #404]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	08db      	lsrs	r3, r3, #3
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	4a64      	ldr	r2, [pc, #400]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8007328:	fa22 f303 	lsr.w	r3, r2, r3
 800732c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800732e:	e01e      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007330:	4b60      	ldr	r3, [pc, #384]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800733c:	d106      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007344:	d102      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007346:	4b5d      	ldr	r3, [pc, #372]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8007348:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734a:	e010      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800734c:	4b59      	ldr	r3, [pc, #356]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007358:	d106      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007360:	d102      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007362:	4b57      	ldr	r3, [pc, #348]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007366:	e002      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800736c:	e19a      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800736e:	e199      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007370:	4b54      	ldr	r3, [pc, #336]	; (80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8007372:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007374:	e196      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800737a:	e193      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007382:	d173      	bne.n	800746c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007384:	4b4b      	ldr	r3, [pc, #300]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800738c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007394:	d02f      	beq.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800739c:	d863      	bhi.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d004      	beq.n	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073aa:	d012      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 80073ac:	e05b      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80073ae:	4b41      	ldr	r3, [pc, #260]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ba:	d107      	bne.n	80073cc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073bc:	f107 0318 	add.w	r3, r7, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f000 f993 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073ca:	e16b      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d0:	e168      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80073d2:	4b38      	ldr	r3, [pc, #224]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073de:	d107      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073e0:	f107 030c 	add.w	r3, r7, #12
 80073e4:	4618      	mov	r0, r3
 80073e6:	f000 fad5 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80073ee:	e159      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80073f0:	2300      	movs	r3, #0
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f4:	e156      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80073f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007400:	4b2c      	ldr	r3, [pc, #176]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b04      	cmp	r3, #4
 800740a:	d10c      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007412:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	08db      	lsrs	r3, r3, #3
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800741e:	fa22 f303 	lsr.w	r3, r2, r3
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007424:	e01e      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007426:	4b23      	ldr	r3, [pc, #140]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007432:	d106      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8007434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007436:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800743a:	d102      	bne.n	8007442 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800743c:	4b1f      	ldr	r3, [pc, #124]	; (80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007440:	e010      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800744e:	d106      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007456:	d102      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007458:	4b19      	ldr	r3, [pc, #100]	; (80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800745c:	e002      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007462:	e11f      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8007464:	e11e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800746a:	e11b      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007472:	d13e      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007474:	4b0f      	ldr	r3, [pc, #60]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800747c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748a:	d01d      	beq.n	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800748c:	e02e      	b.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800749a:	d107      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800749c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074a0:	4618      	mov	r0, r3
 80074a2:	f000 fbcb 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074aa:	e0fb      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80074ac:	2300      	movs	r3, #0
 80074ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b0:	e0f8      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80074b2:	bf00      	nop
 80074b4:	58024400 	.word	0x58024400
 80074b8:	03d09000 	.word	0x03d09000
 80074bc:	003d0900 	.word	0x003d0900
 80074c0:	017d7840 	.word	0x017d7840
 80074c4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074c8:	4b79      	ldr	r3, [pc, #484]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074d4:	d107      	bne.n	80074e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074d6:	f107 0318 	add.w	r3, r7, #24
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f906 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80074e4:	e0de      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074ea:	e0db      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f0:	e0d8      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074f8:	f040 8085 	bne.w	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80074fc:	4b6c      	ldr	r3, [pc, #432]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007500:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007504:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800750c:	d06b      	beq.n	80075e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007514:	d874      	bhi.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751c:	d056      	beq.n	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800751e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007524:	d86c      	bhi.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007528:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800752c:	d03b      	beq.n	80075a6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800752e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007534:	d864      	bhi.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800753c:	d021      	beq.n	8007582 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007544:	d85c      	bhi.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d004      	beq.n	8007556 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007552:	d004      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8007554:	e054      	b.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007556:	f000 f8b3 	bl	80076c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800755a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800755c:	e0a2      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800755e:	4b54      	ldr	r3, [pc, #336]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800756a:	d107      	bne.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800756c:	f107 0318 	add.w	r3, r7, #24
 8007570:	4618      	mov	r0, r3
 8007572:	f000 f8bb 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800757a:	e093      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800757c:	2300      	movs	r3, #0
 800757e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007580:	e090      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007582:	4b4b      	ldr	r3, [pc, #300]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800758a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800758e:	d107      	bne.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007590:	f107 030c 	add.w	r3, r7, #12
 8007594:	4618      	mov	r0, r3
 8007596:	f000 f9fd 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800759e:	e081      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80075a0:	2300      	movs	r3, #0
 80075a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075a4:	e07e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80075a6:	4b42      	ldr	r3, [pc, #264]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0304 	and.w	r3, r3, #4
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d109      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b2:	4b3f      	ldr	r3, [pc, #252]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	08db      	lsrs	r3, r3, #3
 80075b8:	f003 0303 	and.w	r3, r3, #3
 80075bc:	4a3d      	ldr	r2, [pc, #244]	; (80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075c4:	e06e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ca:	e06b      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80075cc:	4b38      	ldr	r3, [pc, #224]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075d8:	d102      	bne.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 80075da:	4b37      	ldr	r3, [pc, #220]	; (80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80075dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075de:	e061      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80075e0:	2300      	movs	r3, #0
 80075e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075e4:	e05e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075e6:	4b32      	ldr	r3, [pc, #200]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075f2:	d102      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 80075f4:	4b31      	ldr	r3, [pc, #196]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80075f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075f8:	e054      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80075fa:	2300      	movs	r3, #0
 80075fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075fe:	e051      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007604:	e04e      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800760c:	d148      	bne.n	80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800760e:	4b28      	ldr	r3, [pc, #160]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007612:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007616:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761e:	d02a      	beq.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007626:	d838      	bhi.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007634:	d00d      	beq.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8007636:	e030      	b.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007638:	4b1d      	ldr	r3, [pc, #116]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007640:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007644:	d102      	bne.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8007646:	4b1d      	ldr	r3, [pc, #116]	; (80076bc <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800764a:	e02b      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007650:	e028      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007652:	4b17      	ldr	r3, [pc, #92]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800765e:	d107      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fae9 	bl	8007c3c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800766e:	e019      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007670:	2300      	movs	r3, #0
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007674:	e016      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007682:	d107      	bne.n	8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007684:	f107 0318 	add.w	r3, r7, #24
 8007688:	4618      	mov	r0, r3
 800768a:	f000 f82f 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007692:	e007      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8007694:	2300      	movs	r3, #0
 8007696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007698:	e004      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800769e:	e001      	b.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80076a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3740      	adds	r7, #64	; 0x40
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	58024400 	.word	0x58024400
 80076b4:	03d09000 	.word	0x03d09000
 80076b8:	003d0900 	.word	0x003d0900
 80076bc:	017d7840 	.word	0x017d7840

080076c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80076c4:	f7fe fb88 	bl	8005dd8 <HAL_RCC_GetHCLKFreq>
 80076c8:	4602      	mov	r2, r0
 80076ca:	4b06      	ldr	r3, [pc, #24]	; (80076e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	091b      	lsrs	r3, r3, #4
 80076d0:	f003 0307 	and.w	r3, r3, #7
 80076d4:	4904      	ldr	r1, [pc, #16]	; (80076e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80076d6:	5ccb      	ldrb	r3, [r1, r3]
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	58024400 	.word	0x58024400
 80076e8:	08013cb8 	.word	0x08013cb8

080076ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b089      	sub	sp, #36	; 0x24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80076f4:	4ba1      	ldr	r3, [pc, #644]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076f8:	f003 0303 	and.w	r3, r3, #3
 80076fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80076fe:	4b9f      	ldr	r3, [pc, #636]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007702:	0b1b      	lsrs	r3, r3, #12
 8007704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007708:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800770a:	4b9c      	ldr	r3, [pc, #624]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	091b      	lsrs	r3, r3, #4
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007716:	4b99      	ldr	r3, [pc, #612]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771a:	08db      	lsrs	r3, r3, #3
 800771c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	fb02 f303 	mul.w	r3, r2, r3
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	2b00      	cmp	r3, #0
 8007736:	f000 8111 	beq.w	800795c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b02      	cmp	r3, #2
 800773e:	f000 8083 	beq.w	8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2b02      	cmp	r3, #2
 8007746:	f200 80a1 	bhi.w	800788c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d003      	beq.n	8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d056      	beq.n	8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007756:	e099      	b.n	800788c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007758:	4b88      	ldr	r3, [pc, #544]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0320 	and.w	r3, r3, #32
 8007760:	2b00      	cmp	r3, #0
 8007762:	d02d      	beq.n	80077c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007764:	4b85      	ldr	r3, [pc, #532]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	08db      	lsrs	r3, r3, #3
 800776a:	f003 0303 	and.w	r3, r3, #3
 800776e:	4a84      	ldr	r2, [pc, #528]	; (8007980 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007770:	fa22 f303 	lsr.w	r3, r2, r3
 8007774:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	ee07 3a90 	vmov	s15, r3
 800777c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800778a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800778e:	4b7b      	ldr	r3, [pc, #492]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007796:	ee07 3a90 	vmov	s15, r3
 800779a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800779e:	ed97 6a03 	vldr	s12, [r7, #12]
 80077a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80077be:	e087      	b.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	ee07 3a90 	vmov	s15, r3
 80077c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007988 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80077ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077d2:	4b6a      	ldr	r3, [pc, #424]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077da:	ee07 3a90 	vmov	s15, r3
 80077de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007802:	e065      	b.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800798c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007816:	4b59      	ldr	r3, [pc, #356]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800781e:	ee07 3a90 	vmov	s15, r3
 8007822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007826:	ed97 6a03 	vldr	s12, [r7, #12]
 800782a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800782e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800783a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800783e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007842:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007846:	e043      	b.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007852:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007990 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800785a:	4b48      	ldr	r3, [pc, #288]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800785c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007862:	ee07 3a90 	vmov	s15, r3
 8007866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800786a:	ed97 6a03 	vldr	s12, [r7, #12]
 800786e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800787a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800787e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800788a:	e021      	b.n	80078d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	ee07 3a90 	vmov	s15, r3
 8007892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007896:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800798c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b37      	ldr	r3, [pc, #220]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007984 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80078d0:	4b2a      	ldr	r3, [pc, #168]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d4:	0a5b      	lsrs	r3, r3, #9
 80078d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078da:	ee07 3a90 	vmov	s15, r3
 80078de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f6:	ee17 2a90 	vmov	r2, s15
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80078fe:	4b1f      	ldr	r3, [pc, #124]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007902:	0c1b      	lsrs	r3, r3, #16
 8007904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007908:	ee07 3a90 	vmov	s15, r3
 800790c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007914:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007918:	edd7 6a07 	vldr	s13, [r7, #28]
 800791c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007920:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007924:	ee17 2a90 	vmov	r2, s15
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800792c:	4b13      	ldr	r3, [pc, #76]	; (800797c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	0e1b      	lsrs	r3, r3, #24
 8007932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007946:	edd7 6a07 	vldr	s13, [r7, #28]
 800794a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800794e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007952:	ee17 2a90 	vmov	r2, s15
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800795a:	e008      	b.n	800796e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	609a      	str	r2, [r3, #8]
}
 800796e:	bf00      	nop
 8007970:	3724      	adds	r7, #36	; 0x24
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	58024400 	.word	0x58024400
 8007980:	03d09000 	.word	0x03d09000
 8007984:	46000000 	.word	0x46000000
 8007988:	4c742400 	.word	0x4c742400
 800798c:	4a742400 	.word	0x4a742400
 8007990:	4bbebc20 	.word	0x4bbebc20

08007994 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007994:	b480      	push	{r7}
 8007996:	b089      	sub	sp, #36	; 0x24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800799c:	4ba1      	ldr	r3, [pc, #644]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800799e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a0:	f003 0303 	and.w	r3, r3, #3
 80079a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80079a6:	4b9f      	ldr	r3, [pc, #636]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	0d1b      	lsrs	r3, r3, #20
 80079ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80079b2:	4b9c      	ldr	r3, [pc, #624]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079b6:	0a1b      	lsrs	r3, r3, #8
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80079be:	4b99      	ldr	r3, [pc, #612]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c2:	08db      	lsrs	r3, r3, #3
 80079c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	fb02 f303 	mul.w	r3, r2, r3
 80079ce:	ee07 3a90 	vmov	s15, r3
 80079d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 8111 	beq.w	8007c04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	f000 8083 	beq.w	8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	f200 80a1 	bhi.w	8007b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d056      	beq.n	8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80079fe:	e099      	b.n	8007b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a00:	4b88      	ldr	r3, [pc, #544]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0320 	and.w	r3, r3, #32
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d02d      	beq.n	8007a68 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a0c:	4b85      	ldr	r3, [pc, #532]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	08db      	lsrs	r3, r3, #3
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	4a84      	ldr	r2, [pc, #528]	; (8007c28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	ee07 3a90 	vmov	s15, r3
 8007a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a36:	4b7b      	ldr	r3, [pc, #492]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a3e:	ee07 3a90 	vmov	s15, r3
 8007a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a4a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a62:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a66:	e087      	b.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007c30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7a:	4b6a      	ldr	r3, [pc, #424]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a8e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aa6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aaa:	e065      	b.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	ee07 3a90 	vmov	s15, r3
 8007ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007abe:	4b59      	ldr	r3, [pc, #356]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ad2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007aee:	e043      	b.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	ee07 3a90 	vmov	s15, r3
 8007af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007afa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007c38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b02:	4b48      	ldr	r3, [pc, #288]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b16:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b32:	e021      	b.n	8007b78 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	ee07 3a90 	vmov	s15, r3
 8007b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b3e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007c34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b46:	4b37      	ldr	r3, [pc, #220]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b5a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007c2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b76:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007b78:	4b2a      	ldr	r3, [pc, #168]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7c:	0a5b      	lsrs	r3, r3, #9
 8007b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b82:	ee07 3a90 	vmov	s15, r3
 8007b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b9e:	ee17 2a90 	vmov	r2, s15
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007ba6:	4b1f      	ldr	r3, [pc, #124]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	0c1b      	lsrs	r3, r3, #16
 8007bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb0:	ee07 3a90 	vmov	s15, r3
 8007bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bcc:	ee17 2a90 	vmov	r2, s15
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007bd4:	4b13      	ldr	r3, [pc, #76]	; (8007c24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd8:	0e1b      	lsrs	r3, r3, #24
 8007bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007bea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bee:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bfa:	ee17 2a90 	vmov	r2, s15
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007c02:	e008      	b.n	8007c16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	609a      	str	r2, [r3, #8]
}
 8007c16:	bf00      	nop
 8007c18:	3724      	adds	r7, #36	; 0x24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	58024400 	.word	0x58024400
 8007c28:	03d09000 	.word	0x03d09000
 8007c2c:	46000000 	.word	0x46000000
 8007c30:	4c742400 	.word	0x4c742400
 8007c34:	4a742400 	.word	0x4a742400
 8007c38:	4bbebc20 	.word	0x4bbebc20

08007c3c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b089      	sub	sp, #36	; 0x24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c44:	4ba0      	ldr	r3, [pc, #640]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007c4e:	4b9e      	ldr	r3, [pc, #632]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c52:	091b      	lsrs	r3, r3, #4
 8007c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c58:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007c5a:	4b9b      	ldr	r3, [pc, #620]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c64:	4b98      	ldr	r3, [pc, #608]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c68:	08db      	lsrs	r3, r3, #3
 8007c6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	fb02 f303 	mul.w	r3, r2, r3
 8007c74:	ee07 3a90 	vmov	s15, r3
 8007c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 8111 	beq.w	8007eaa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	f000 8083 	beq.w	8007d96 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	f200 80a1 	bhi.w	8007dda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d056      	beq.n	8007d52 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007ca4:	e099      	b.n	8007dda <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ca6:	4b88      	ldr	r3, [pc, #544]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d02d      	beq.n	8007d0e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cb2:	4b85      	ldr	r3, [pc, #532]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	08db      	lsrs	r3, r3, #3
 8007cb8:	f003 0303 	and.w	r3, r3, #3
 8007cbc:	4a83      	ldr	r2, [pc, #524]	; (8007ecc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	ee07 3a90 	vmov	s15, r3
 8007cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	ee07 3a90 	vmov	s15, r3
 8007cd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cdc:	4b7a      	ldr	r3, [pc, #488]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cec:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d08:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d0c:	e087      	b.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	ee07 3a90 	vmov	s15, r3
 8007d14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d20:	4b69      	ldr	r3, [pc, #420]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d28:	ee07 3a90 	vmov	s15, r3
 8007d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d34:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d50:	e065      	b.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	ee07 3a90 	vmov	s15, r3
 8007d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007ed8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d64:	4b58      	ldr	r3, [pc, #352]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6c:	ee07 3a90 	vmov	s15, r3
 8007d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d78:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d94:	e043      	b.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	ee07 3a90 	vmov	s15, r3
 8007d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007edc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da8:	4b47      	ldr	r3, [pc, #284]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	ee07 3a90 	vmov	s15, r3
 8007db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dbc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dd8:	e021      	b.n	8007e1e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	ee07 3a90 	vmov	s15, r3
 8007de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dec:	4b36      	ldr	r3, [pc, #216]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df4:	ee07 3a90 	vmov	s15, r3
 8007df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007ed0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e1c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007e1e:	4b2a      	ldr	r3, [pc, #168]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e22:	0a5b      	lsrs	r3, r3, #9
 8007e24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e44:	ee17 2a90 	vmov	r2, s15
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007e4c:	4b1e      	ldr	r3, [pc, #120]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	0c1b      	lsrs	r3, r3, #16
 8007e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e56:	ee07 3a90 	vmov	s15, r3
 8007e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e72:	ee17 2a90 	vmov	r2, s15
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007e7a:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	0e1b      	lsrs	r3, r3, #24
 8007e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e84:	ee07 3a90 	vmov	s15, r3
 8007e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e94:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea0:	ee17 2a90 	vmov	r2, s15
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007ea8:	e008      	b.n	8007ebc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	609a      	str	r2, [r3, #8]
}
 8007ebc:	bf00      	nop
 8007ebe:	3724      	adds	r7, #36	; 0x24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr
 8007ec8:	58024400 	.word	0x58024400
 8007ecc:	03d09000 	.word	0x03d09000
 8007ed0:	46000000 	.word	0x46000000
 8007ed4:	4c742400 	.word	0x4c742400
 8007ed8:	4a742400 	.word	0x4a742400
 8007edc:	4bbebc20 	.word	0x4bbebc20

08007ee0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007eea:	2300      	movs	r3, #0
 8007eec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007eee:	4b53      	ldr	r3, [pc, #332]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	f003 0303 	and.w	r3, r3, #3
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d101      	bne.n	8007efe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e099      	b.n	8008032 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007efe:	4b4f      	ldr	r3, [pc, #316]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a4e      	ldr	r2, [pc, #312]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f0a:	f7fa fa5d 	bl	80023c8 <HAL_GetTick>
 8007f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f10:	e008      	b.n	8007f24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f12:	f7fa fa59 	bl	80023c8 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d901      	bls.n	8007f24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e086      	b.n	8008032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f24:	4b45      	ldr	r3, [pc, #276]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1f0      	bne.n	8007f12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f30:	4b42      	ldr	r3, [pc, #264]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	031b      	lsls	r3, r3, #12
 8007f3e:	493f      	ldr	r1, [pc, #252]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	628b      	str	r3, [r1, #40]	; 0x28
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	025b      	lsls	r3, r3, #9
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	431a      	orrs	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	061b      	lsls	r3, r3, #24
 8007f70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f74:	4931      	ldr	r1, [pc, #196]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f76:	4313      	orrs	r3, r2
 8007f78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f7a:	4b30      	ldr	r3, [pc, #192]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	492d      	ldr	r1, [pc, #180]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f8c:	4b2b      	ldr	r3, [pc, #172]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	f023 0220 	bic.w	r2, r3, #32
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	4928      	ldr	r1, [pc, #160]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f9e:	4b27      	ldr	r3, [pc, #156]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	4a26      	ldr	r2, [pc, #152]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fa4:	f023 0310 	bic.w	r3, r3, #16
 8007fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007faa:	4b24      	ldr	r3, [pc, #144]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fae:	4b24      	ldr	r3, [pc, #144]	; (8008040 <RCCEx_PLL2_Config+0x160>)
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	69d2      	ldr	r2, [r2, #28]
 8007fb6:	00d2      	lsls	r2, r2, #3
 8007fb8:	4920      	ldr	r1, [pc, #128]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007fbe:	4b1f      	ldr	r3, [pc, #124]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	4a1e      	ldr	r2, [pc, #120]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fc4:	f043 0310 	orr.w	r3, r3, #16
 8007fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d106      	bne.n	8007fde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	4a19      	ldr	r2, [pc, #100]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007fdc:	e00f      	b.n	8007ffe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d106      	bne.n	8007ff2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007fe4:	4b15      	ldr	r3, [pc, #84]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4a14      	ldr	r2, [pc, #80]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007fee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ff0:	e005      	b.n	8007ffe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007ff2:	4b12      	ldr	r3, [pc, #72]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff6:	4a11      	ldr	r2, [pc, #68]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ffe:	4b0f      	ldr	r3, [pc, #60]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a0e      	ldr	r2, [pc, #56]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8008004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800a:	f7fa f9dd 	bl	80023c8 <HAL_GetTick>
 800800e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008010:	e008      	b.n	8008024 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008012:	f7fa f9d9 	bl	80023c8 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e006      	b.n	8008032 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <RCCEx_PLL2_Config+0x15c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d0f0      	beq.n	8008012 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008030:	7bfb      	ldrb	r3, [r7, #15]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	58024400 	.word	0x58024400
 8008040:	ffff0007 	.word	0xffff0007

08008044 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008052:	4b53      	ldr	r3, [pc, #332]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	f003 0303 	and.w	r3, r3, #3
 800805a:	2b03      	cmp	r3, #3
 800805c:	d101      	bne.n	8008062 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e099      	b.n	8008196 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008062:	4b4f      	ldr	r3, [pc, #316]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a4e      	ldr	r2, [pc, #312]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800806c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800806e:	f7fa f9ab 	bl	80023c8 <HAL_GetTick>
 8008072:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008074:	e008      	b.n	8008088 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008076:	f7fa f9a7 	bl	80023c8 <HAL_GetTick>
 800807a:	4602      	mov	r2, r0
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	1ad3      	subs	r3, r2, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d901      	bls.n	8008088 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008084:	2303      	movs	r3, #3
 8008086:	e086      	b.n	8008196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008088:	4b45      	ldr	r3, [pc, #276]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1f0      	bne.n	8008076 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008094:	4b42      	ldr	r3, [pc, #264]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008098:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	051b      	lsls	r3, r3, #20
 80080a2:	493f      	ldr	r1, [pc, #252]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 80080a4:	4313      	orrs	r3, r2
 80080a6:	628b      	str	r3, [r1, #40]	; 0x28
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	3b01      	subs	r3, #1
 80080ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	025b      	lsls	r3, r3, #9
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	041b      	lsls	r3, r3, #16
 80080c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080ca:	431a      	orrs	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	061b      	lsls	r3, r3, #24
 80080d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080d8:	4931      	ldr	r1, [pc, #196]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80080de:	4b30      	ldr	r3, [pc, #192]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 80080e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	492d      	ldr	r1, [pc, #180]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80080f0:	4b2b      	ldr	r3, [pc, #172]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	4928      	ldr	r1, [pc, #160]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008102:	4b27      	ldr	r3, [pc, #156]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800810c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800810e:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008112:	4b24      	ldr	r3, [pc, #144]	; (80081a4 <RCCEx_PLL3_Config+0x160>)
 8008114:	4013      	ands	r3, r2
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	69d2      	ldr	r2, [r2, #28]
 800811a:	00d2      	lsls	r2, r2, #3
 800811c:	4920      	ldr	r1, [pc, #128]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800811e:	4313      	orrs	r3, r2
 8008120:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008122:	4b1f      	ldr	r3, [pc, #124]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008126:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d106      	bne.n	8008142 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008134:	4b1a      	ldr	r3, [pc, #104]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008138:	4a19      	ldr	r2, [pc, #100]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800813a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800813e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008140:	e00f      	b.n	8008162 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d106      	bne.n	8008156 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800814c:	4a14      	ldr	r2, [pc, #80]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800814e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008152:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008154:	e005      	b.n	8008162 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008156:	4b12      	ldr	r3, [pc, #72]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	4a11      	ldr	r2, [pc, #68]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800815c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008160:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008162:	4b0f      	ldr	r3, [pc, #60]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a0e      	ldr	r2, [pc, #56]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 8008168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800816c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800816e:	f7fa f92b 	bl	80023c8 <HAL_GetTick>
 8008172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008174:	e008      	b.n	8008188 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008176:	f7fa f927 	bl	80023c8 <HAL_GetTick>
 800817a:	4602      	mov	r2, r0
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	2b02      	cmp	r3, #2
 8008182:	d901      	bls.n	8008188 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e006      	b.n	8008196 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <RCCEx_PLL3_Config+0x15c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0f0      	beq.n	8008176 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008194:	7bfb      	ldrb	r3, [r7, #15]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	58024400 	.word	0x58024400
 80081a4:	ffff0007 	.word	0xffff0007

080081a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e075      	b.n	80082a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d105      	bne.n	80081d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7f9 fb79 	bl	80018c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f868 	bl	80082b0 <HAL_SD_InitCard>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e05d      	b.n	80082a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80081ea:	f107 0308 	add.w	r3, r7, #8
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ff71 	bl	80090d8 <HAL_SD_GetCardStatus>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e052      	b.n	80082a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008200:	7e3b      	ldrb	r3, [r7, #24]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008206:	7e7b      	ldrb	r3, [r7, #25]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	2b01      	cmp	r3, #1
 8008212:	d10a      	bne.n	800822a <HAL_SD_Init+0x82>
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_SD_Init+0x78>
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008226:	659a      	str	r2, [r3, #88]	; 0x58
 8008228:	e00b      	b.n	8008242 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	2b01      	cmp	r3, #1
 8008230:	d104      	bne.n	800823c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008238:	659a      	str	r2, [r3, #88]	; 0x58
 800823a:	e002      	b.n	8008242 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 f82f 	bl	80092ac <HAL_SD_ConfigWideBusOperation>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e026      	b.n	80082a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008258:	f7fa f8b6 	bl	80023c8 <HAL_GetTick>
 800825c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800825e:	e011      	b.n	8008284 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008260:	f7fa f8b2 	bl	80023c8 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d109      	bne.n	8008284 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008276:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e010      	b.n	80082a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f001 f923 	bl	80094d0 <HAL_SD_GetCardState>
 800828a:	4603      	mov	r3, r0
 800828c:	2b04      	cmp	r3, #4
 800828e:	d1e7      	bne.n	8008260 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3728      	adds	r7, #40	; 0x28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082b0:	b590      	push	{r4, r7, lr}
 80082b2:	b08d      	sub	sp, #52	; 0x34
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80082b8:	2300      	movs	r3, #0
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082bc:	2300      	movs	r3, #0
 80082be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80082cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80082d0:	f7fe fd24 	bl	8006d1c <HAL_RCCEx_GetPeriphCLKFreq>
 80082d4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e06a      	b.n	80083c6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	4a36      	ldr	r2, [pc, #216]	; (80083d0 <HAL_SD_InitCard+0x120>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681c      	ldr	r4, [r3, #0]
 8008302:	466a      	mov	r2, sp
 8008304:	f107 0318 	add.w	r3, r7, #24
 8008308:	e893 0003 	ldmia.w	r3, {r0, r1}
 800830c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008316:	4620      	mov	r0, r4
 8008318:	f004 ff98 	bl	800d24c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f004 ffdb 	bl	800d2dc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008332:	4a28      	ldr	r2, [pc, #160]	; (80083d4 <HAL_SD_InitCard+0x124>)
 8008334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008336:	fbb2 f3f3 	udiv	r3, r2, r3
 800833a:	3301      	adds	r3, #1
 800833c:	4618      	mov	r0, r3
 800833e:	f7fa f84f 	bl	80023e0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f001 f9b2 	bl	80096ac <SD_PowerON>
 8008348:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800835c:	6a3b      	ldr	r3, [r7, #32]
 800835e:	431a      	orrs	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e02e      	b.n	80083c6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 f8d1 	bl	8009510 <SD_InitCard>
 800836e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d00b      	beq.n	800838e <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	431a      	orrs	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e01b      	b.n	80083c6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008396:	4618      	mov	r0, r3
 8008398:	f005 f836 	bl	800d408 <SDMMC_CmdBlockLength>
 800839c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00f      	beq.n	80083c4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a0b      	ldr	r2, [pc, #44]	; (80083d8 <HAL_SD_InitCard+0x128>)
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	431a      	orrs	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	e000      	b.n	80083c6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80083c4:	2300      	movs	r3, #0
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	372c      	adds	r7, #44	; 0x2c
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd90      	pop	{r4, r7, pc}
 80083ce:	bf00      	nop
 80083d0:	014f8b59 	.word	0x014f8b59
 80083d4:	00012110 	.word	0x00012110
 80083d8:	1fe00fff 	.word	0x1fe00fff

080083dc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b092      	sub	sp, #72	; 0x48
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083ea:	f7f9 ffed 	bl	80023c8 <HAL_GetTick>
 80083ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d107      	bne.n	800840e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e167      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b01      	cmp	r3, #1
 8008418:	f040 815a 	bne.w	80086d0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008422:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	441a      	add	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842c:	429a      	cmp	r2, r3
 800842e:	d907      	bls.n	8008440 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008434:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e14e      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2203      	movs	r2, #3
 8008444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2200      	movs	r2, #0
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	2b01      	cmp	r3, #1
 8008456:	d002      	beq.n	800845e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845a:	025b      	lsls	r3, r3, #9
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800845e:	f04f 33ff 	mov.w	r3, #4294967295
 8008462:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	025b      	lsls	r3, r3, #9
 8008468:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800846a:	2390      	movs	r3, #144	; 0x90
 800846c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800846e:	2302      	movs	r3, #2
 8008470:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008472:	2300      	movs	r3, #0
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008476:	2300      	movs	r3, #0
 8008478:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f107 0214 	add.w	r2, r7, #20
 8008482:	4611      	mov	r1, r2
 8008484:	4618      	mov	r0, r3
 8008486:	f004 ff93 	bl	800d3b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68da      	ldr	r2, [r3, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008498:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	2b01      	cmp	r3, #1
 800849e:	d90a      	bls.n	80084b6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2202      	movs	r2, #2
 80084a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084ac:	4618      	mov	r0, r3
 80084ae:	f004 fff1 	bl	800d494 <SDMMC_CmdReadMultiBlock>
 80084b2:	6478      	str	r0, [r7, #68]	; 0x44
 80084b4:	e009      	b.n	80084ca <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80084c2:	4618      	mov	r0, r3
 80084c4:	f004 ffc3 	bl	800d44e <SDMMC_CmdReadSingleBlock>
 80084c8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80084ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d012      	beq.n	80084f6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a84      	ldr	r2, [pc, #528]	; (80086e8 <HAL_SD_ReadBlocks+0x30c>)
 80084d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084de:	431a      	orrs	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e0f3      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80084fa:	e058      	b.n	80085ae <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d033      	beq.n	8008572 <HAL_SD_ReadBlocks+0x196>
 800850a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800850c:	2b1f      	cmp	r3, #31
 800850e:	d930      	bls.n	8008572 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008510:	2300      	movs	r3, #0
 8008512:	643b      	str	r3, [r7, #64]	; 0x40
 8008514:	e027      	b.n	8008566 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f004 fec0 	bl	800d2a0 <SDMMC_ReadFIFO>
 8008520:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	b2da      	uxtb	r2, r3
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800852a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800852c:	3301      	adds	r3, #1
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	0a1b      	lsrs	r3, r3, #8
 8008534:	b2da      	uxtb	r2, r3
 8008536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008538:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800853a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800853c:	3301      	adds	r3, #1
 800853e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008542:	0c1b      	lsrs	r3, r3, #16
 8008544:	b2da      	uxtb	r2, r3
 8008546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008548:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854c:	3301      	adds	r3, #1
 800854e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008552:	0e1b      	lsrs	r3, r3, #24
 8008554:	b2da      	uxtb	r2, r3
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	3301      	adds	r3, #1
 800855e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8008560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008562:	3301      	adds	r3, #1
 8008564:	643b      	str	r3, [r7, #64]	; 0x40
 8008566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008568:	2b07      	cmp	r3, #7
 800856a:	d9d4      	bls.n	8008516 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856e:	3b20      	subs	r3, #32
 8008570:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008572:	f7f9 ff29 	bl	80023c8 <HAL_GetTick>
 8008576:	4602      	mov	r2, r0
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800857e:	429a      	cmp	r2, r3
 8008580:	d902      	bls.n	8008588 <HAL_SD_ReadBlocks+0x1ac>
 8008582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008584:	2b00      	cmp	r3, #0
 8008586:	d112      	bne.n	80085ae <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a56      	ldr	r2, [pc, #344]	; (80086e8 <HAL_SD_ReadBlocks+0x30c>)
 800858e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008594:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e097      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d09f      	beq.n	80084fc <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68da      	ldr	r2, [r3, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ca:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d022      	beq.n	8008620 <HAL_SD_ReadBlocks+0x244>
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d91f      	bls.n	8008620 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e4:	2b03      	cmp	r3, #3
 80085e6:	d01b      	beq.n	8008620 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4618      	mov	r0, r3
 80085ee:	f004 ffbb 	bl	800d568 <SDMMC_CmdStopTransfer>
 80085f2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 80085f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d012      	beq.n	8008620 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a3a      	ldr	r2, [pc, #232]	; (80086e8 <HAL_SD_ReadBlocks+0x30c>)
 8008600:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008608:	431a      	orrs	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e05e      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008626:	f003 0308 	and.w	r3, r3, #8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d012      	beq.n	8008654 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a2d      	ldr	r2, [pc, #180]	; (80086e8 <HAL_SD_ReadBlocks+0x30c>)
 8008634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800863a:	f043 0208 	orr.w	r2, r3, #8
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e044      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	2b00      	cmp	r3, #0
 8008660:	d012      	beq.n	8008688 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a20      	ldr	r2, [pc, #128]	; (80086e8 <HAL_SD_ReadBlocks+0x30c>)
 8008668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866e:	f043 0202 	orr.w	r2, r3, #2
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	2201      	movs	r2, #1
 800867a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e02a      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800868e:	f003 0320 	and.w	r3, r3, #32
 8008692:	2b00      	cmp	r3, #0
 8008694:	d012      	beq.n	80086bc <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a13      	ldr	r2, [pc, #76]	; (80086e8 <HAL_SD_ReadBlocks+0x30c>)
 800869c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086a2:	f043 0220 	orr.w	r2, r3, #32
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e010      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <HAL_SD_ReadBlocks+0x310>)
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	e006      	b.n	80086de <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
  }
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3748      	adds	r7, #72	; 0x48
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	1fe00fff 	.word	0x1fe00fff
 80086ec:	18000f3a 	.word	0x18000f3a

080086f0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b092      	sub	sp, #72	; 0x48
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	607a      	str	r2, [r7, #4]
 80086fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80086fe:	f7f9 fe63 	bl	80023c8 <HAL_GetTick>
 8008702:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d107      	bne.n	8008722 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008716:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800871e:	2301      	movs	r3, #1
 8008720:	e16b      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008728:	b2db      	uxtb	r3, r3
 800872a:	2b01      	cmp	r3, #1
 800872c:	f040 815e 	bne.w	80089ec <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	441a      	add	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008740:	429a      	cmp	r2, r3
 8008742:	d907      	bls.n	8008754 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008748:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	e152      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2203      	movs	r2, #3
 8008758:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2200      	movs	r2, #0
 8008762:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008768:	2b01      	cmp	r3, #1
 800876a:	d002      	beq.n	8008772 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	025b      	lsls	r3, r3, #9
 8008770:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008772:	f04f 33ff 	mov.w	r3, #4294967295
 8008776:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	025b      	lsls	r3, r3, #9
 800877c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800877e:	2390      	movs	r3, #144	; 0x90
 8008780:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008782:	2300      	movs	r3, #0
 8008784:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008786:	2300      	movs	r3, #0
 8008788:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800878a:	2300      	movs	r3, #0
 800878c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f107 0218 	add.w	r2, r7, #24
 8008796:	4611      	mov	r1, r2
 8008798:	4618      	mov	r0, r3
 800879a:	f004 fe09 	bl	800d3b0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68da      	ldr	r2, [r3, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087ac:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d90a      	bls.n	80087ca <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087c0:	4618      	mov	r0, r3
 80087c2:	f004 fead 	bl	800d520 <SDMMC_CmdWriteMultiBlock>
 80087c6:	6478      	str	r0, [r7, #68]	; 0x44
 80087c8:	e009      	b.n	80087de <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2210      	movs	r2, #16
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087d6:	4618      	mov	r0, r3
 80087d8:	f004 fe7f 	bl	800d4da <SDMMC_CmdWriteSingleBlock>
 80087dc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80087de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d012      	beq.n	800880a <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a86      	ldr	r2, [pc, #536]	; (8008a04 <HAL_SD_WriteBlocks+0x314>)
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087f2:	431a      	orrs	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e0f7      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800880e:	e05c      	b.n	80088ca <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800881a:	2b00      	cmp	r3, #0
 800881c:	d037      	beq.n	800888e <HAL_SD_WriteBlocks+0x19e>
 800881e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008820:	2b1f      	cmp	r3, #31
 8008822:	d934      	bls.n	800888e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8008824:	2300      	movs	r3, #0
 8008826:	643b      	str	r3, [r7, #64]	; 0x40
 8008828:	e02b      	b.n	8008882 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800882a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008832:	3301      	adds	r3, #1
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	021a      	lsls	r2, r3, #8
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	3301      	adds	r3, #1
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	041a      	lsls	r2, r3, #16
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	4313      	orrs	r3, r2
 8008852:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008856:	3301      	adds	r3, #1
 8008858:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	061a      	lsls	r2, r3, #24
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	4313      	orrs	r3, r2
 8008864:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	3301      	adds	r3, #1
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f107 0214 	add.w	r2, r7, #20
 8008874:	4611      	mov	r1, r2
 8008876:	4618      	mov	r0, r3
 8008878:	f004 fd1f 	bl	800d2ba <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800887c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800887e:	3301      	adds	r3, #1
 8008880:	643b      	str	r3, [r7, #64]	; 0x40
 8008882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008884:	2b07      	cmp	r3, #7
 8008886:	d9d0      	bls.n	800882a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	3b20      	subs	r3, #32
 800888c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800888e:	f7f9 fd9b 	bl	80023c8 <HAL_GetTick>
 8008892:	4602      	mov	r2, r0
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	1ad3      	subs	r3, r2, r3
 8008898:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800889a:	429a      	cmp	r2, r3
 800889c:	d902      	bls.n	80088a4 <HAL_SD_WriteBlocks+0x1b4>
 800889e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d112      	bne.n	80088ca <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a56      	ldr	r2, [pc, #344]	; (8008a04 <HAL_SD_WriteBlocks+0x314>)
 80088aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088b2:	431a      	orrs	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80088c6:	2303      	movs	r3, #3
 80088c8:	e097      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d09b      	beq.n	8008810 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d022      	beq.n	800893c <HAL_SD_WriteBlocks+0x24c>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d91f      	bls.n	800893c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	2b03      	cmp	r3, #3
 8008902:	d01b      	beq.n	800893c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f004 fe2d 	bl	800d568 <SDMMC_CmdStopTransfer>
 800890e:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8008910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008912:	2b00      	cmp	r3, #0
 8008914:	d012      	beq.n	800893c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a3a      	ldr	r2, [pc, #232]	; (8008a04 <HAL_SD_WriteBlocks+0x314>)
 800891c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e05e      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	f003 0308 	and.w	r3, r3, #8
 8008946:	2b00      	cmp	r3, #0
 8008948:	d012      	beq.n	8008970 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a2d      	ldr	r2, [pc, #180]	; (8008a04 <HAL_SD_WriteBlocks+0x314>)
 8008950:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008956:	f043 0208 	orr.w	r2, r3, #8
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e044      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d012      	beq.n	80089a4 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a20      	ldr	r2, [pc, #128]	; (8008a04 <HAL_SD_WriteBlocks+0x314>)
 8008984:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898a:	f043 0202 	orr.w	r2, r3, #2
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e02a      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	f003 0310 	and.w	r3, r3, #16
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d012      	beq.n	80089d8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a13      	ldr	r2, [pc, #76]	; (8008a04 <HAL_SD_WriteBlocks+0x314>)
 80089b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089be:	f043 0210 	orr.w	r2, r3, #16
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2201      	movs	r2, #1
 80089ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e010      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a0a      	ldr	r2, [pc, #40]	; (8008a08 <HAL_SD_WriteBlocks+0x318>)
 80089de:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	e006      	b.n	80089fa <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3748      	adds	r7, #72	; 0x48
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	1fe00fff 	.word	0x1fe00fff
 8008a08:	18000f3a 	.word	0x18000f3a

08008a0c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d008      	beq.n	8008a3a <HAL_SD_IRQHandler+0x2e>
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f001 f926 	bl	8009c84 <SD_Read_IT>
 8008a38:	e19a      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 80ac 	beq.w	8008ba2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	4b59      	ldr	r3, [pc, #356]	; (8008bc4 <HAL_SD_IRQHandler+0x1b8>)
 8008a60:	400b      	ands	r3, r1
 8008a62:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008a72:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a82:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d038      	beq.n	8008b00 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d104      	bne.n	8008aa2 <HAL_SD_IRQHandler+0x96>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f003 0320 	and.w	r3, r3, #32
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d011      	beq.n	8008ac6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f004 fd5e 	bl	800d568 <SDMMC_CmdStopTransfer>
 8008aac:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d008      	beq.n	8008ac6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f95b 	bl	8008d7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a3f      	ldr	r2, [pc, #252]	; (8008bc8 <HAL_SD_IRQHandler+0x1bc>)
 8008acc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <HAL_SD_IRQHandler+0xe4>
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f005 fa19 	bl	800df28 <HAL_SD_RxCpltCallback>
 8008af6:	e13b      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f005 fa0b 	bl	800df14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008afe:	e137      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 8132 	beq.w	8008d70 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2200      	movs	r2, #0
 8008b12:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2200      	movs	r2, #0
 8008b22:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d104      	bne.n	8008b38 <HAL_SD_IRQHandler+0x12c>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d011      	beq.n	8008b5c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f004 fd13 	bl	800d568 <SDMMC_CmdStopTransfer>
 8008b42:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d008      	beq.n	8008b5c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f910 	bl	8008d7c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d104      	bne.n	8008b7e <HAL_SD_IRQHandler+0x172>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0320 	and.w	r3, r3, #32
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d002      	beq.n	8008b84 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f005 f9c8 	bl	800df14 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d105      	bne.n	8008b9a <HAL_SD_IRQHandler+0x18e>
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	f000 80eb 	beq.w	8008d70 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f005 f9c4 	bl	800df28 <HAL_SD_RxCpltCallback>
}
 8008ba0:	e0e6      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00d      	beq.n	8008bcc <HAL_SD_IRQHandler+0x1c0>
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f003 0308 	and.w	r3, r3, #8
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d008      	beq.n	8008bcc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 f8a8 	bl	8009d10 <SD_Write_IT>
 8008bc0:	e0d6      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
 8008bc2:	bf00      	nop
 8008bc4:	ffff3ec5 	.word	0xffff3ec5
 8008bc8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 809d 	beq.w	8008d16 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be2:	f003 0302 	and.w	r3, r3, #2
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d005      	beq.n	8008bf6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bee:	f043 0202 	orr.w	r2, r3, #2
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	f043 0208 	orr.w	r2, r3, #8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	f003 0320 	and.w	r3, r3, #32
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c22:	f043 0220 	orr.w	r2, r3, #32
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c30:	f003 0310 	and.w	r3, r3, #16
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3c:	f043 0210 	orr.w	r2, r3, #16
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a4b      	ldr	r2, [pc, #300]	; (8008d78 <HAL_SD_IRQHandler+0x36c>)
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c6a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c8a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f004 fc69 	bl	800d568 <SDMMC_CmdStopTransfer>
 8008c96:	4602      	mov	r2, r0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cb0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008cba:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f003 0308 	and.w	r3, r3, #8
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00a      	beq.n	8008cdc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2201      	movs	r2, #1
 8008cca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f851 	bl	8008d7c <HAL_SD_ErrorCallback>
}
 8008cda:	e049      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d044      	beq.n	8008d70 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d040      	beq.n	8008d70 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008cfc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2200      	movs	r2, #0
 8008d04:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2201      	movs	r2, #1
 8008d0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f834 	bl	8008d7c <HAL_SD_ErrorCallback>
}
 8008d14:	e02c      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d025      	beq.n	8008d70 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d34:	f003 0304 	and.w	r3, r3, #4
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10c      	bne.n	8008d56 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f001 f84a 	bl	8009de0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008d4c:	e010      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f001 f832 	bl	8009db8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008d54:	e00c      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d003      	beq.n	8008d68 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f001 f833 	bl	8009dcc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008d66:	e003      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f001 f81b 	bl	8009da4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008d6e:	e7ff      	b.n	8008d70 <HAL_SD_IRQHandler+0x364>
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	18000f3a 	.word	0x18000f3a

08008d7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d84:	bf00      	nop
 8008d86:	370c      	adds	r7, #12
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8e:	4770      	bx	lr

08008d90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9e:	0f9b      	lsrs	r3, r3, #30
 8008da0:	b2da      	uxtb	r2, r3
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008daa:	0e9b      	lsrs	r3, r3, #26
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dbc:	0e1b      	lsrs	r3, r3, #24
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	f003 0303 	and.w	r3, r3, #3
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dce:	0c1b      	lsrs	r3, r3, #16
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dda:	0a1b      	lsrs	r3, r3, #8
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df0:	0d1b      	lsrs	r3, r3, #20
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dfc:	0c1b      	lsrs	r3, r3, #16
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 030f 	and.w	r3, r3, #15
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e0e:	0bdb      	lsrs	r3, r3, #15
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e20:	0b9b      	lsrs	r3, r3, #14
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	f003 0301 	and.w	r3, r3, #1
 8008e28:	b2da      	uxtb	r2, r3
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e32:	0b5b      	lsrs	r3, r3, #13
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	f003 0301 	and.w	r3, r3, #1
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e44:	0b1b      	lsrs	r3, r3, #12
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	f003 0301 	and.w	r3, r3, #1
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2200      	movs	r2, #0
 8008e56:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d163      	bne.n	8008f28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e64:	009a      	lsls	r2, r3, #2
 8008e66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008e70:	0f92      	lsrs	r2, r2, #30
 8008e72:	431a      	orrs	r2, r3
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e7c:	0edb      	lsrs	r3, r3, #27
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	f003 0307 	and.w	r3, r3, #7
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e8e:	0e1b      	lsrs	r3, r3, #24
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea0:	0d5b      	lsrs	r3, r3, #21
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f003 0307 	and.w	r3, r3, #7
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb2:	0c9b      	lsrs	r3, r3, #18
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	f003 0307 	and.w	r3, r3, #7
 8008eba:	b2da      	uxtb	r2, r3
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ec4:	0bdb      	lsrs	r3, r3, #15
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	1c5a      	adds	r2, r3, #1
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	7e1b      	ldrb	r3, [r3, #24]
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	2201      	movs	r2, #1
 8008eea:	fa02 f303 	lsl.w	r3, r2, r3
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008ef2:	fb03 f202 	mul.w	r2, r3, r2
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	7a1b      	ldrb	r3, [r3, #8]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	f003 030f 	and.w	r3, r3, #15
 8008f04:	2201      	movs	r2, #1
 8008f06:	409a      	lsls	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008f14:	0a52      	lsrs	r2, r2, #9
 8008f16:	fb03 f202 	mul.w	r2, r3, r2
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f24:	655a      	str	r2, [r3, #84]	; 0x54
 8008f26:	e031      	b.n	8008f8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d11d      	bne.n	8008f6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f34:	041b      	lsls	r3, r3, #16
 8008f36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f3e:	0c1b      	lsrs	r3, r3, #16
 8008f40:	431a      	orrs	r2, r3
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	029a      	lsls	r2, r3, #10
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f60:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	655a      	str	r2, [r3, #84]	; 0x54
 8008f6a:	e00f      	b.n	8008f8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a58      	ldr	r2, [pc, #352]	; (80090d4 <HAL_SD_GetCardCSD+0x344>)
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	e09d      	b.n	80090c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f90:	0b9b      	lsrs	r3, r3, #14
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fa2:	09db      	lsrs	r3, r3, #7
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc4:	0fdb      	lsrs	r3, r3, #31
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd0:	0f5b      	lsrs	r3, r3, #29
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe2:	0e9b      	lsrs	r3, r3, #26
 8008fe4:	b2db      	uxtb	r3, r3
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	b2da      	uxtb	r2, r3
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ff4:	0d9b      	lsrs	r3, r3, #22
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 030f 	and.w	r3, r3, #15
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009006:	0d5b      	lsrs	r3, r3, #21
 8009008:	b2db      	uxtb	r3, r3
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	b2da      	uxtb	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	2200      	movs	r2, #0
 800901a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009022:	0c1b      	lsrs	r3, r3, #16
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	b2da      	uxtb	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009036:	0bdb      	lsrs	r3, r3, #15
 8009038:	b2db      	uxtb	r3, r3
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	b2da      	uxtb	r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800904a:	0b9b      	lsrs	r3, r3, #14
 800904c:	b2db      	uxtb	r3, r3
 800904e:	f003 0301 	and.w	r3, r3, #1
 8009052:	b2da      	uxtb	r2, r3
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800905e:	0b5b      	lsrs	r3, r3, #13
 8009060:	b2db      	uxtb	r3, r3
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	b2da      	uxtb	r2, r3
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009072:	0b1b      	lsrs	r3, r3, #12
 8009074:	b2db      	uxtb	r3, r3
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	b2da      	uxtb	r2, r3
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009086:	0a9b      	lsrs	r3, r3, #10
 8009088:	b2db      	uxtb	r3, r3
 800908a:	f003 0303 	and.w	r3, r3, #3
 800908e:	b2da      	uxtb	r2, r3
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800909a:	0a1b      	lsrs	r3, r3, #8
 800909c:	b2db      	uxtb	r3, r3
 800909e:	f003 0303 	and.w	r3, r3, #3
 80090a2:	b2da      	uxtb	r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ae:	085b      	lsrs	r3, r3, #1
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr
 80090d4:	1fe00fff 	.word	0x1fe00fff

080090d8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b094      	sub	sp, #80	; 0x50
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d101      	bne.n	80090f8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0a7      	b.n	8009248 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80090f8:	f107 0308 	add.w	r3, r7, #8
 80090fc:	4619      	mov	r1, r3
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb62 	bl	80097c8 <SD_SendSDStatus>
 8009104:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009108:	2b00      	cmp	r3, #0
 800910a:	d011      	beq.n	8009130 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a4f      	ldr	r2, [pc, #316]	; (8009250 <HAL_SD_GetCardStatus+0x178>)
 8009112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800912e:	e070      	b.n	8009212 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	099b      	lsrs	r3, r3, #6
 8009134:	b2db      	uxtb	r3, r3
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	b2da      	uxtb	r2, r3
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	095b      	lsrs	r3, r3, #5
 8009144:	b2db      	uxtb	r3, r3
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	b2da      	uxtb	r2, r3
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	0a1b      	lsrs	r3, r3, #8
 8009154:	b29b      	uxth	r3, r3
 8009156:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800915a:	b29a      	uxth	r2, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	0e1b      	lsrs	r3, r3, #24
 8009160:	b29b      	uxth	r3, r3
 8009162:	4313      	orrs	r3, r2
 8009164:	b29a      	uxth	r2, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	061a      	lsls	r2, r3, #24
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	021b      	lsls	r3, r3, #8
 8009172:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009176:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	0a1b      	lsrs	r3, r3, #8
 800917c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009180:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	0e1b      	lsrs	r3, r3, #24
 8009186:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	b2da      	uxtb	r2, r3
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	b2da      	uxtb	r2, r3
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	0d1b      	lsrs	r3, r3, #20
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	b2da      	uxtb	r2, r3
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	0c1b      	lsrs	r3, r3, #16
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	b29b      	uxth	r3, r3
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	4313      	orrs	r3, r2
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	0a9b      	lsrs	r3, r3, #10
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80091d4:	b2da      	uxtb	r2, r3
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	0a1b      	lsrs	r3, r3, #8
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	091b      	lsrs	r3, r3, #4
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	f003 030f 	and.w	r3, r3, #15
 80091f4:	b2da      	uxtb	r2, r3
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	f003 030f 	and.w	r3, r3, #15
 8009202:	b2da      	uxtb	r2, r3
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	0e1b      	lsrs	r3, r3, #24
 800920c:	b2da      	uxtb	r2, r3
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f44f 7100 	mov.w	r1, #512	; 0x200
 800921a:	4618      	mov	r0, r3
 800921c:	f004 f8f4 	bl	800d408 <SDMMC_CmdBlockLength>
 8009220:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8009222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00d      	beq.n	8009244 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a08      	ldr	r2, [pc, #32]	; (8009250 <HAL_SD_GetCardStatus+0x178>)
 800922e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009234:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8009244:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8009248:	4618      	mov	r0, r3
 800924a:	3750      	adds	r7, #80	; 0x50
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	1fe00fff 	.word	0x1fe00fff

08009254 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80092ac:	b590      	push	{r4, r7, lr}
 80092ae:	b08d      	sub	sp, #52	; 0x34
 80092b0:	af02      	add	r7, sp, #8
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2203      	movs	r2, #3
 80092c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092cc:	2b03      	cmp	r3, #3
 80092ce:	d02e      	beq.n	800932e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092d6:	d106      	bne.n	80092e6 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	635a      	str	r2, [r3, #52]	; 0x34
 80092e4:	e029      	b.n	800933a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092ec:	d10a      	bne.n	8009304 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fb62 	bl	80099b8 <SD_WideBus_Enable>
 80092f4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	635a      	str	r2, [r3, #52]	; 0x34
 8009302:	e01a      	b.n	800933a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d10a      	bne.n	8009320 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fb9f 	bl	8009a4e <SD_WideBus_Disable>
 8009310:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	431a      	orrs	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	635a      	str	r2, [r3, #52]	; 0x34
 800931e:	e00c      	b.n	800933a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009324:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	635a      	str	r2, [r3, #52]	; 0x34
 800932c:	e005      	b.n	800933a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009332:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	2b00      	cmp	r3, #0
 8009340:	d007      	beq.n	8009352 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a5e      	ldr	r2, [pc, #376]	; (80094c0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009348:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009350:	e094      	b.n	800947c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009352:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009356:	f7fd fce1 	bl	8006d1c <HAL_RCCEx_GetPeriphCLKFreq>
 800935a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	2b00      	cmp	r3, #0
 8009360:	f000 8083 	beq.w	800946a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	695a      	ldr	r2, [r3, #20]
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	4950      	ldr	r1, [pc, #320]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009382:	fba1 1303 	umull	r1, r3, r1, r3
 8009386:	0e1b      	lsrs	r3, r3, #24
 8009388:	429a      	cmp	r2, r3
 800938a:	d303      	bcc.n	8009394 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	61bb      	str	r3, [r7, #24]
 8009392:	e05a      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800939c:	d103      	bne.n	80093a6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	61bb      	str	r3, [r7, #24]
 80093a4:	e051      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ae:	d126      	bne.n	80093fe <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	695b      	ldr	r3, [r3, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10e      	bne.n	80093d6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80093b8:	6a3b      	ldr	r3, [r7, #32]
 80093ba:	4a43      	ldr	r2, [pc, #268]	; (80094c8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d906      	bls.n	80093ce <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	4a40      	ldr	r2, [pc, #256]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	0e5b      	lsrs	r3, r3, #25
 80093ca:	61bb      	str	r3, [r7, #24]
 80093cc:	e03d      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	695b      	ldr	r3, [r3, #20]
 80093d2:	61bb      	str	r3, [r7, #24]
 80093d4:	e039      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	695b      	ldr	r3, [r3, #20]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	6a3a      	ldr	r2, [r7, #32]
 80093de:	fbb2 f3f3 	udiv	r3, r2, r3
 80093e2:	4a39      	ldr	r2, [pc, #228]	; (80094c8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d906      	bls.n	80093f6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80093e8:	6a3b      	ldr	r3, [r7, #32]
 80093ea:	4a36      	ldr	r2, [pc, #216]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80093ec:	fba2 2303 	umull	r2, r3, r2, r3
 80093f0:	0e5b      	lsrs	r3, r3, #25
 80093f2:	61bb      	str	r3, [r7, #24]
 80093f4:	e029      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	e025      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10e      	bne.n	8009424 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	4a30      	ldr	r2, [pc, #192]	; (80094cc <HAL_SD_ConfigWideBusOperation+0x220>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d906      	bls.n	800941c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	4a2c      	ldr	r2, [pc, #176]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8009412:	fba2 2303 	umull	r2, r3, r2, r3
 8009416:	0e1b      	lsrs	r3, r3, #24
 8009418:	61bb      	str	r3, [r7, #24]
 800941a:	e016      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	61bb      	str	r3, [r7, #24]
 8009422:	e012      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	695b      	ldr	r3, [r3, #20]
 8009428:	005b      	lsls	r3, r3, #1
 800942a:	6a3a      	ldr	r2, [r7, #32]
 800942c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009430:	4a26      	ldr	r2, [pc, #152]	; (80094cc <HAL_SD_ConfigWideBusOperation+0x220>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d906      	bls.n	8009444 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	4a22      	ldr	r2, [pc, #136]	; (80094c4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	0e1b      	lsrs	r3, r3, #24
 8009440:	61bb      	str	r3, [r7, #24]
 8009442:	e002      	b.n	800944a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	695b      	ldr	r3, [r3, #20]
 8009448:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681c      	ldr	r4, [r3, #0]
 800944e:	466a      	mov	r2, sp
 8009450:	f107 0314 	add.w	r3, r7, #20
 8009454:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009458:	e882 0003 	stmia.w	r2, {r0, r1}
 800945c:	f107 0308 	add.w	r3, r7, #8
 8009460:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009462:	4620      	mov	r0, r4
 8009464:	f003 fef2 	bl	800d24c <SDMMC_Init>
 8009468:	e008      	b.n	800947c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009484:	4618      	mov	r0, r3
 8009486:	f003 ffbf 	bl	800d408 <SDMMC_CmdBlockLength>
 800948a:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00c      	beq.n	80094ac <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009498:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	431a      	orrs	r2, r3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80094b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	372c      	adds	r7, #44	; 0x2c
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd90      	pop	{r4, r7, pc}
 80094c0:	1fe00fff 	.word	0x1fe00fff
 80094c4:	55e63b89 	.word	0x55e63b89
 80094c8:	02faf080 	.word	0x02faf080
 80094cc:	017d7840 	.word	0x017d7840

080094d0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80094dc:	f107 030c 	add.w	r3, r7, #12
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fa40 	bl	8009968 <SD_SendStatus>
 80094e8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d005      	beq.n	80094fc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	0a5b      	lsrs	r3, r3, #9
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009506:	693b      	ldr	r3, [r7, #16]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b090      	sub	sp, #64	; 0x40
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800951c:	f7f8 ff54 	bl	80023c8 <HAL_GetTick>
 8009520:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4618      	mov	r0, r3
 8009528:	f003 fee9 	bl	800d2fe <SDMMC_GetPowerState>
 800952c:	4603      	mov	r3, r0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d102      	bne.n	8009538 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009532:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009536:	e0b5      	b.n	80096a4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953c:	2b03      	cmp	r3, #3
 800953e:	d02e      	beq.n	800959e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4618      	mov	r0, r3
 8009546:	f004 f934 	bl	800d7b2 <SDMMC_CmdSendCID>
 800954a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800954c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <SD_InitCard+0x46>
    {
      return errorstate;
 8009552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009554:	e0a6      	b.n	80096a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2100      	movs	r1, #0
 800955c:	4618      	mov	r0, r3
 800955e:	f003 ff14 	bl	800d38a <SDMMC_GetResponse>
 8009562:	4602      	mov	r2, r0
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2104      	movs	r1, #4
 800956e:	4618      	mov	r0, r3
 8009570:	f003 ff0b 	bl	800d38a <SDMMC_GetResponse>
 8009574:	4602      	mov	r2, r0
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2108      	movs	r1, #8
 8009580:	4618      	mov	r0, r3
 8009582:	f003 ff02 	bl	800d38a <SDMMC_GetResponse>
 8009586:	4602      	mov	r2, r0
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	210c      	movs	r1, #12
 8009592:	4618      	mov	r0, r3
 8009594:	f003 fef9 	bl	800d38a <SDMMC_GetResponse>
 8009598:	4602      	mov	r2, r0
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a2:	2b03      	cmp	r3, #3
 80095a4:	d01d      	beq.n	80095e2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80095a6:	e019      	b.n	80095dc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f107 020a 	add.w	r2, r7, #10
 80095b0:	4611      	mov	r1, r2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f004 f93c 	bl	800d830 <SDMMC_CmdSetRelAdd>
 80095b8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <SD_InitCard+0xb4>
      {
        return errorstate;
 80095c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c2:	e06f      	b.n	80096a4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80095c4:	f7f8 ff00 	bl	80023c8 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	f241 3287 	movw	r2, #4999	; 0x1387
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d902      	bls.n	80095dc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80095d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095da:	e063      	b.n	80096a4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80095dc:	897b      	ldrh	r3, [r7, #10]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0e2      	beq.n	80095a8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	2b03      	cmp	r3, #3
 80095e8:	d036      	beq.n	8009658 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80095ea:	897b      	ldrh	r3, [r7, #10]
 80095ec:	461a      	mov	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	4619      	mov	r1, r3
 80095fe:	4610      	mov	r0, r2
 8009600:	f004 f8f6 	bl	800d7f0 <SDMMC_CmdSendCSD>
 8009604:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8009606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <SD_InitCard+0x100>
    {
      return errorstate;
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	e049      	b.n	80096a4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2100      	movs	r1, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f003 feb7 	bl	800d38a <SDMMC_GetResponse>
 800961c:	4602      	mov	r2, r0
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2104      	movs	r1, #4
 8009628:	4618      	mov	r0, r3
 800962a:	f003 feae 	bl	800d38a <SDMMC_GetResponse>
 800962e:	4602      	mov	r2, r0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2108      	movs	r1, #8
 800963a:	4618      	mov	r0, r3
 800963c:	f003 fea5 	bl	800d38a <SDMMC_GetResponse>
 8009640:	4602      	mov	r2, r0
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	210c      	movs	r1, #12
 800964c:	4618      	mov	r0, r3
 800964e:	f003 fe9c 	bl	800d38a <SDMMC_GetResponse>
 8009652:	4602      	mov	r2, r0
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2104      	movs	r1, #4
 800965e:	4618      	mov	r0, r3
 8009660:	f003 fe93 	bl	800d38a <SDMMC_GetResponse>
 8009664:	4603      	mov	r3, r0
 8009666:	0d1a      	lsrs	r2, r3, #20
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800966c:	f107 030c 	add.w	r3, r7, #12
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7ff fb8c 	bl	8008d90 <HAL_SD_GetCardCSD>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800967e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009682:	e00f      	b.n	80096a4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968c:	041b      	lsls	r3, r3, #16
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f003 ffa5 	bl	800d5e0 <SDMMC_CmdSelDesel>
 8009696:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8009698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <SD_InitCard+0x192>
  {
    return errorstate;
 800969e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a0:	e000      	b.n	80096a4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80096a2:	2300      	movs	r3, #0
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3740      	adds	r7, #64	; 0x40
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b086      	sub	sp, #24
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80096b4:	2300      	movs	r3, #0
 80096b6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f003 ffae 	bl	800d626 <SDMMC_CmdGoIdleState>
 80096ca:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	e072      	b.n	80097bc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4618      	mov	r0, r3
 80096dc:	f003 ffc1 	bl	800d662 <SDMMC_CmdOperCond>
 80096e0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096e8:	d10d      	bne.n	8009706 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2200      	movs	r2, #0
 80096ee:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f003 ff96 	bl	800d626 <SDMMC_CmdGoIdleState>
 80096fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d004      	beq.n	800970c <SD_PowerON+0x60>
    {
      return errorstate;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	e05a      	b.n	80097bc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2201      	movs	r2, #1
 800970a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009710:	2b01      	cmp	r3, #1
 8009712:	d137      	bne.n	8009784 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2100      	movs	r1, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f003 ffc1 	bl	800d6a2 <SDMMC_CmdAppCommand>
 8009720:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d02d      	beq.n	8009784 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800972c:	e046      	b.n	80097bc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f003 ffb4 	bl	800d6a2 <SDMMC_CmdAppCommand>
 800973a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <SD_PowerON+0x9a>
    {
      return errorstate;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	e03a      	b.n	80097bc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	491e      	ldr	r1, [pc, #120]	; (80097c4 <SD_PowerON+0x118>)
 800974c:	4618      	mov	r0, r3
 800974e:	f003 ffcb 	bl	800d6e8 <SDMMC_CmdAppOperCommand>
 8009752:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d002      	beq.n	8009760 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800975a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800975e:	e02d      	b.n	80097bc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	2100      	movs	r1, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f003 fe0f 	bl	800d38a <SDMMC_GetResponse>
 800976c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	0fdb      	lsrs	r3, r3, #31
 8009772:	2b01      	cmp	r3, #1
 8009774:	d101      	bne.n	800977a <SD_PowerON+0xce>
 8009776:	2301      	movs	r3, #1
 8009778:	e000      	b.n	800977c <SD_PowerON+0xd0>
 800977a:	2300      	movs	r3, #0
 800977c:	613b      	str	r3, [r7, #16]

    count++;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	3301      	adds	r3, #1
 8009782:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800978a:	4293      	cmp	r3, r2
 800978c:	d802      	bhi.n	8009794 <SD_PowerON+0xe8>
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0cc      	beq.n	800972e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800979a:	4293      	cmp	r3, r2
 800979c:	d902      	bls.n	80097a4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800979e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80097a2:	e00b      	b.n	80097bc <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	c1100000 	.word	0xc1100000

080097c8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08c      	sub	sp, #48	; 0x30
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80097d2:	f7f8 fdf9 	bl	80023c8 <HAL_GetTick>
 80097d6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2100      	movs	r1, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f003 fdd1 	bl	800d38a <SDMMC_GetResponse>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097f2:	d102      	bne.n	80097fa <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80097f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80097f8:	e0b0      	b.n	800995c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2140      	movs	r1, #64	; 0x40
 8009800:	4618      	mov	r0, r3
 8009802:	f003 fe01 	bl	800d408 <SDMMC_CmdBlockLength>
 8009806:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009808:	6a3b      	ldr	r3, [r7, #32]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d005      	beq.n	800981a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009816:	6a3b      	ldr	r3, [r7, #32]
 8009818:	e0a0      	b.n	800995c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009822:	041b      	lsls	r3, r3, #16
 8009824:	4619      	mov	r1, r3
 8009826:	4610      	mov	r0, r2
 8009828:	f003 ff3b 	bl	800d6a2 <SDMMC_CmdAppCommand>
 800982c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d005      	beq.n	8009840 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800983c:	6a3b      	ldr	r3, [r7, #32]
 800983e:	e08d      	b.n	800995c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009840:	f04f 33ff 	mov.w	r3, #4294967295
 8009844:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009846:	2340      	movs	r3, #64	; 0x40
 8009848:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800984a:	2360      	movs	r3, #96	; 0x60
 800984c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800984e:	2302      	movs	r3, #2
 8009850:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009852:	2300      	movs	r3, #0
 8009854:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009856:	2301      	movs	r3, #1
 8009858:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f107 0208 	add.w	r2, r7, #8
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f003 fda3 	bl	800d3b0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f004 f823 	bl	800d8ba <SDMMC_CmdStatusRegister>
 8009874:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009876:	6a3b      	ldr	r3, [r7, #32]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d02b      	beq.n	80098d4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	e069      	b.n	800995c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d013      	beq.n	80098be <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8009896:	2300      	movs	r3, #0
 8009898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800989a:	e00d      	b.n	80098b8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f003 fcfd 	bl	800d2a0 <SDMMC_ReadFIFO>
 80098a6:	4602      	mov	r2, r0
 80098a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098aa:	601a      	str	r2, [r3, #0]
        pData++;
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	3304      	adds	r3, #4
 80098b0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80098b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b4:	3301      	adds	r3, #1
 80098b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	2b07      	cmp	r3, #7
 80098bc:	d9ee      	bls.n	800989c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098be:	f7f8 fd83 	bl	80023c8 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098cc:	d102      	bne.n	80098d4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80098ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098d2:	e043      	b.n	800995c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098da:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d0d2      	beq.n	8009888 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e8:	f003 0308 	and.w	r3, r3, #8
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80098f0:	2308      	movs	r3, #8
 80098f2:	e033      	b.n	800995c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fa:	f003 0302 	and.w	r3, r3, #2
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009902:	2302      	movs	r3, #2
 8009904:	e02a      	b.n	800995c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800990c:	f003 0320 	and.w	r3, r3, #32
 8009910:	2b00      	cmp	r3, #0
 8009912:	d017      	beq.n	8009944 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009914:	2320      	movs	r3, #32
 8009916:	e021      	b.n	800995c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4618      	mov	r0, r3
 800991e:	f003 fcbf 	bl	800d2a0 <SDMMC_ReadFIFO>
 8009922:	4602      	mov	r2, r0
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	601a      	str	r2, [r3, #0]
    pData++;
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	3304      	adds	r3, #4
 800992c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800992e:	f7f8 fd4b 	bl	80023c8 <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993c:	d102      	bne.n	8009944 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800993e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009942:	e00b      	b.n	800995c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1e2      	bne.n	8009918 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a03      	ldr	r2, [pc, #12]	; (8009964 <SD_SendSDStatus+0x19c>)
 8009958:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3730      	adds	r7, #48	; 0x30
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	18000f3a 	.word	0x18000f3a

08009968 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d102      	bne.n	800997e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009978:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800997c:	e018      	b.n	80099b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009986:	041b      	lsls	r3, r3, #16
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f003 ff72 	bl	800d874 <SDMMC_CmdSendStatus>
 8009990:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	e009      	b.n	80099b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	2100      	movs	r1, #0
 80099a2:	4618      	mov	r0, r3
 80099a4:	f003 fcf1 	bl	800d38a <SDMMC_GetResponse>
 80099a8:	4602      	mov	r2, r0
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3710      	adds	r7, #16
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b086      	sub	sp, #24
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80099c0:	2300      	movs	r3, #0
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	2300      	movs	r3, #0
 80099c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f003 fcdb 	bl	800d38a <SDMMC_GetResponse>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099de:	d102      	bne.n	80099e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80099e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099e4:	e02f      	b.n	8009a46 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80099e6:	f107 030c 	add.w	r3, r7, #12
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f879 	bl	8009ae4 <SD_FindSCR>
 80099f2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	e023      	b.n	8009a46 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01c      	beq.n	8009a42 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a10:	041b      	lsls	r3, r3, #16
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f003 fe44 	bl	800d6a2 <SDMMC_CmdAppCommand>
 8009a1a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	e00f      	b.n	8009a46 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2102      	movs	r1, #2
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f003 fe7b 	bl	800d728 <SDMMC_CmdBusWidth>
 8009a32:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	e003      	b.n	8009a46 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e001      	b.n	8009a46 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009a42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3718      	adds	r7, #24
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b086      	sub	sp, #24
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2100      	movs	r1, #0
 8009a64:	4618      	mov	r0, r3
 8009a66:	f003 fc90 	bl	800d38a <SDMMC_GetResponse>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a74:	d102      	bne.n	8009a7c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009a76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a7a:	e02f      	b.n	8009adc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009a7c:	f107 030c 	add.w	r3, r7, #12
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f82e 	bl	8009ae4 <SD_FindSCR>
 8009a88:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	e023      	b.n	8009adc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d01c      	beq.n	8009ad8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa6:	041b      	lsls	r3, r3, #16
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4610      	mov	r0, r2
 8009aac:	f003 fdf9 	bl	800d6a2 <SDMMC_CmdAppCommand>
 8009ab0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	e00f      	b.n	8009adc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f003 fe30 	bl	800d728 <SDMMC_CmdBusWidth>
 8009ac8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d001      	beq.n	8009ad4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	e003      	b.n	8009adc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	e001      	b.n	8009adc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009ad8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08e      	sub	sp, #56	; 0x38
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009aee:	f7f8 fc6b 	bl	80023c8 <HAL_GetTick>
 8009af2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009af4:	2300      	movs	r3, #0
 8009af6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009af8:	2300      	movs	r3, #0
 8009afa:	60bb      	str	r3, [r7, #8]
 8009afc:	2300      	movs	r3, #0
 8009afe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2108      	movs	r1, #8
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f003 fc7c 	bl	800d408 <SDMMC_CmdBlockLength>
 8009b10:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1a:	e0ad      	b.n	8009c78 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b24:	041b      	lsls	r3, r3, #16
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f003 fdba 	bl	800d6a2 <SDMMC_CmdAppCommand>
 8009b2e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d001      	beq.n	8009b3a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b38:	e09e      	b.n	8009c78 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009b3e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009b40:	2308      	movs	r3, #8
 8009b42:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009b44:	2330      	movs	r3, #48	; 0x30
 8009b46:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b48:	2302      	movs	r3, #2
 8009b4a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009b50:	2301      	movs	r3, #1
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f107 0210 	add.w	r2, r7, #16
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f003 fc26 	bl	800d3b0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f003 fe00 	bl	800d76e <SDMMC_CmdSendSCR>
 8009b6e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d027      	beq.n	8009bc6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b78:	e07e      	b.n	8009c78 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d113      	bne.n	8009bb0 <SD_FindSCR+0xcc>
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d110      	bne.n	8009bb0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f003 fb84 	bl	800d2a0 <SDMMC_ReadFIFO>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f003 fb7d 	bl	800d2a0 <SDMMC_ReadFIFO>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	60fb      	str	r3, [r7, #12]
      index++;
 8009baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bac:	3301      	adds	r3, #1
 8009bae:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bb0:	f7f8 fc0a 	bl	80023c8 <HAL_GetTick>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb8:	1ad3      	subs	r3, r2, r3
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	d102      	bne.n	8009bc6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc4:	e058      	b.n	8009c78 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bcc:	f240 532a 	movw	r3, #1322	; 0x52a
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d0d1      	beq.n	8009b7a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bdc:	f003 0308 	and.w	r3, r3, #8
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d005      	beq.n	8009bf0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2208      	movs	r2, #8
 8009bea:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009bec:	2308      	movs	r3, #8
 8009bee:	e043      	b.n	8009c78 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf6:	f003 0302 	and.w	r3, r3, #2
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d005      	beq.n	8009c0a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2202      	movs	r2, #2
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c06:	2302      	movs	r3, #2
 8009c08:	e036      	b.n	8009c78 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c10:	f003 0320 	and.w	r3, r3, #32
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d005      	beq.n	8009c24 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2220      	movs	r2, #32
 8009c1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009c20:	2320      	movs	r3, #32
 8009c22:	e029      	b.n	8009c78 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a15      	ldr	r2, [pc, #84]	; (8009c80 <SD_FindSCR+0x19c>)
 8009c2a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	061a      	lsls	r2, r3, #24
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	0a1b      	lsrs	r3, r3, #8
 8009c3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009c42:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	0e1b      	lsrs	r3, r3, #24
 8009c48:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c4c:	601a      	str	r2, [r3, #0]
    scr++;
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	3304      	adds	r3, #4
 8009c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	061a      	lsls	r2, r3, #24
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	021b      	lsls	r3, r3, #8
 8009c5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009c60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009c6a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	0e1b      	lsrs	r3, r3, #24
 8009c70:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3738      	adds	r7, #56	; 0x38
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	18000f3a 	.word	0x18000f3a

08009c84 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c96:	2b1f      	cmp	r3, #31
 8009c98:	d936      	bls.n	8009d08 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	e027      	b.n	8009cf0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f003 fafb 	bl	800d2a0 <SDMMC_ReadFIFO>
 8009caa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	0a1b      	lsrs	r3, r3, #8
 8009cbe:	b2da      	uxtb	r2, r3
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	0c1b      	lsrs	r3, r3, #16
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	0e1b      	lsrs	r3, r3, #24
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	3301      	adds	r3, #1
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	2b07      	cmp	r3, #7
 8009cf4:	d9d4      	bls.n	8009ca0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d00:	f1a3 0220 	sub.w	r2, r3, #32
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8009d08:	bf00      	nop
 8009d0a:	3718      	adds	r7, #24
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	69db      	ldr	r3, [r3, #28]
 8009d1c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6a1b      	ldr	r3, [r3, #32]
 8009d22:	2b1f      	cmp	r3, #31
 8009d24:	d93a      	bls.n	8009d9c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8009d26:	2300      	movs	r3, #0
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e02b      	b.n	8009d84 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	3301      	adds	r3, #1
 8009d36:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	021a      	lsls	r2, r3, #8
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	3301      	adds	r3, #1
 8009d48:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	041a      	lsls	r2, r3, #16
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	061a      	lsls	r2, r3, #24
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f107 020c 	add.w	r2, r7, #12
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f003 fa9e 	bl	800d2ba <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	3301      	adds	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2b07      	cmp	r3, #7
 8009d88:	d9d0      	bls.n	8009d2c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	f1a3 0220 	sub.w	r2, r3, #32
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	621a      	str	r2, [r3, #32]
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b083      	sub	sp, #12
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009dac:	bf00      	nop
 8009dae:	370c      	adds	r7, #12
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009de8:	bf00      	nop
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d101      	bne.n	8009e06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e02:	2301      	movs	r3, #1
 8009e04:	e0f1      	b.n	8009fea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a78      	ldr	r2, [pc, #480]	; (8009ff4 <HAL_SPI_Init+0x200>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d00f      	beq.n	8009e36 <HAL_SPI_Init+0x42>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a77      	ldr	r2, [pc, #476]	; (8009ff8 <HAL_SPI_Init+0x204>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d00a      	beq.n	8009e36 <HAL_SPI_Init+0x42>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a75      	ldr	r2, [pc, #468]	; (8009ffc <HAL_SPI_Init+0x208>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d005      	beq.n	8009e36 <HAL_SPI_Init+0x42>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	68db      	ldr	r3, [r3, #12]
 8009e2e:	2b0f      	cmp	r3, #15
 8009e30:	d901      	bls.n	8009e36 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e0d9      	b.n	8009fea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f001 f974 	bl	800b124 <SPI_GetPacketSize>
 8009e3c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a6c      	ldr	r2, [pc, #432]	; (8009ff4 <HAL_SPI_Init+0x200>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d00c      	beq.n	8009e62 <HAL_SPI_Init+0x6e>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a6a      	ldr	r2, [pc, #424]	; (8009ff8 <HAL_SPI_Init+0x204>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d007      	beq.n	8009e62 <HAL_SPI_Init+0x6e>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a69      	ldr	r2, [pc, #420]	; (8009ffc <HAL_SPI_Init+0x208>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d002      	beq.n	8009e62 <HAL_SPI_Init+0x6e>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b08      	cmp	r3, #8
 8009e60:	d811      	bhi.n	8009e86 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e66:	4a63      	ldr	r2, [pc, #396]	; (8009ff4 <HAL_SPI_Init+0x200>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d009      	beq.n	8009e80 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a61      	ldr	r2, [pc, #388]	; (8009ff8 <HAL_SPI_Init+0x204>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d004      	beq.n	8009e80 <HAL_SPI_Init+0x8c>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a60      	ldr	r2, [pc, #384]	; (8009ffc <HAL_SPI_Init+0x208>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d104      	bne.n	8009e8a <HAL_SPI_Init+0x96>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b10      	cmp	r3, #16
 8009e84:	d901      	bls.n	8009e8a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e0af      	b.n	8009fea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d106      	bne.n	8009ea4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f7f7 fe0c 	bl	8001abc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2202      	movs	r2, #2
 8009ea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f022 0201 	bic.w	r2, r2, #1
 8009eba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009ec6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	699b      	ldr	r3, [r3, #24]
 8009ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ed0:	d119      	bne.n	8009f06 <HAL_SPI_Init+0x112>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009eda:	d103      	bne.n	8009ee4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d008      	beq.n	8009ef6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10c      	bne.n	8009f06 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ef0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ef4:	d107      	bne.n	8009f06 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f04:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69da      	ldr	r2, [r3, #28]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	431a      	orrs	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f18:	ea42 0103 	orr.w	r1, r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	430a      	orrs	r2, r1
 8009f26:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	431a      	orrs	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a1b      	ldr	r3, [r3, #32]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5a:	431a      	orrs	r2, r3
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f66:	ea42 0103 	orr.w	r1, r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d113      	bne.n	8009fa6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f90:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689b      	ldr	r3, [r3, #8]
 8009f98:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fa4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f022 0201 	bic.w	r2, r2, #1
 8009fb4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3710      	adds	r7, #16
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	40013000 	.word	0x40013000
 8009ff8:	40003800 	.word	0x40003800
 8009ffc:	40003c00 	.word	0x40003c00

0800a000 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08a      	sub	sp, #40	; 0x28
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	603b      	str	r3, [r7, #0]
 800a00c:	4613      	mov	r3, r2
 800a00e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	3320      	adds	r3, #32
 800a016:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a022:	2b01      	cmp	r3, #1
 800a024:	d101      	bne.n	800a02a <HAL_SPI_Transmit+0x2a>
 800a026:	2302      	movs	r3, #2
 800a028:	e1d7      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2201      	movs	r2, #1
 800a02e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a032:	f7f8 f9c9 	bl	80023c8 <HAL_GetTick>
 800a036:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	2b01      	cmp	r3, #1
 800a042:	d007      	beq.n	800a054 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a044:	2302      	movs	r3, #2
 800a046:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a050:	7efb      	ldrb	r3, [r7, #27]
 800a052:	e1c2      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d002      	beq.n	800a060 <HAL_SPI_Transmit+0x60>
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d107      	bne.n	800a070 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a06c:	7efb      	ldrb	r3, [r7, #27]
 800a06e:	e1b4      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2203      	movs	r2, #3
 800a074:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2200      	movs	r2, #0
 800a07c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	68ba      	ldr	r2, [r7, #8]
 800a084:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	88fa      	ldrh	r2, [r7, #6]
 800a08a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	88fa      	ldrh	r2, [r7, #6]
 800a092:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a0c0:	d107      	bne.n	800a0d2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	4b96      	ldr	r3, [pc, #600]	; (800a334 <HAL_SPI_Transmit+0x334>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	88f9      	ldrh	r1, [r7, #6]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	6812      	ldr	r2, [r2, #0]
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f042 0201 	orr.w	r2, r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0fe:	d107      	bne.n	800a110 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a10e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	68db      	ldr	r3, [r3, #12]
 800a114:	2b0f      	cmp	r3, #15
 800a116:	d947      	bls.n	800a1a8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a118:	e03f      	b.n	800a19a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b02      	cmp	r3, #2
 800a126:	d114      	bne.n	800a152 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6812      	ldr	r2, [r2, #0]
 800a132:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a138:	1d1a      	adds	r2, r3, #4
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a144:	b29b      	uxth	r3, r3
 800a146:	3b01      	subs	r3, #1
 800a148:	b29a      	uxth	r2, r3
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a150:	e023      	b.n	800a19a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a152:	f7f8 f939 	bl	80023c8 <HAL_GetTick>
 800a156:	4602      	mov	r2, r0
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d803      	bhi.n	800a16a <HAL_SPI_Transmit+0x16a>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a168:	d102      	bne.n	800a170 <HAL_SPI_Transmit+0x170>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d114      	bne.n	800a19a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 ff09 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e11f      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1b9      	bne.n	800a11a <HAL_SPI_Transmit+0x11a>
 800a1a6:	e0f2      	b.n	800a38e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	2b07      	cmp	r3, #7
 800a1ae:	f240 80e7 	bls.w	800a380 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a1b2:	e05d      	b.n	800a270 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	f003 0302 	and.w	r3, r3, #2
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d132      	bne.n	800a228 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d918      	bls.n	800a200 <HAL_SPI_Transmit+0x200>
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d014      	beq.n	800a200 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e6:	1d1a      	adds	r2, r3, #4
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	3b02      	subs	r3, #2
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a1fe:	e037      	b.n	800a270 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a204:	881a      	ldrh	r2, [r3, #0]
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a20e:	1c9a      	adds	r2, r3, #2
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	3b01      	subs	r3, #1
 800a21e:	b29a      	uxth	r2, r3
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a226:	e023      	b.n	800a270 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a228:	f7f8 f8ce 	bl	80023c8 <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d803      	bhi.n	800a240 <HAL_SPI_Transmit+0x240>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d102      	bne.n	800a246 <HAL_SPI_Transmit+0x246>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d114      	bne.n	800a270 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 fe9e 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a25a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e0b4      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a276:	b29b      	uxth	r3, r3
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d19b      	bne.n	800a1b4 <HAL_SPI_Transmit+0x1b4>
 800a27c:	e087      	b.n	800a38e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	f003 0302 	and.w	r3, r3, #2
 800a288:	2b02      	cmp	r3, #2
 800a28a:	d155      	bne.n	800a338 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a292:	b29b      	uxth	r3, r3
 800a294:	2b03      	cmp	r3, #3
 800a296:	d918      	bls.n	800a2ca <HAL_SPI_Transmit+0x2ca>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a29c:	2b40      	cmp	r3, #64	; 0x40
 800a29e:	d914      	bls.n	800a2ca <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6812      	ldr	r2, [r2, #0]
 800a2aa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b0:	1d1a      	adds	r2, r3, #4
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	3b04      	subs	r3, #4
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2c8:	e05a      	b.n	800a380 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d917      	bls.n	800a306 <HAL_SPI_Transmit+0x306>
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d013      	beq.n	800a306 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e2:	881a      	ldrh	r2, [r3, #0]
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ec:	1c9a      	adds	r2, r3, #2
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	3b02      	subs	r3, #2
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a304:	e03c      	b.n	800a380 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	3320      	adds	r3, #32
 800a310:	7812      	ldrb	r2, [r2, #0]
 800a312:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a318:	1c5a      	adds	r2, r3, #1
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a324:	b29b      	uxth	r3, r3
 800a326:	3b01      	subs	r3, #1
 800a328:	b29a      	uxth	r2, r3
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a330:	e026      	b.n	800a380 <HAL_SPI_Transmit+0x380>
 800a332:	bf00      	nop
 800a334:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a338:	f7f8 f846 	bl	80023c8 <HAL_GetTick>
 800a33c:	4602      	mov	r2, r0
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	429a      	cmp	r2, r3
 800a346:	d803      	bhi.n	800a350 <HAL_SPI_Transmit+0x350>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34e:	d102      	bne.n	800a356 <HAL_SPI_Transmit+0x356>
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d114      	bne.n	800a380 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a356:	68f8      	ldr	r0, [r7, #12]
 800a358:	f000 fe16 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a36a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e02c      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a386:	b29b      	uxth	r3, r3
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f47f af78 	bne.w	800a27e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2200      	movs	r2, #0
 800a396:	2108      	movs	r1, #8
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 fe95 	bl	800b0c8 <SPI_WaitOnFlagUntilTimeout>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d007      	beq.n	800a3b4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3aa:	f043 0220 	orr.w	r2, r3, #32
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fde7 	bl	800af88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	e000      	b.n	800a3da <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a3d8:	7efb      	ldrb	r3, [r7, #27]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3720      	adds	r7, #32
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop

0800a3e4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	3330      	adds	r3, #48	; 0x30
 800a3fe:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a408:	d112      	bne.n	800a430 <HAL_SPI_Receive+0x4c>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10e      	bne.n	800a430 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2204      	movs	r2, #4
 800a416:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a41a:	88fa      	ldrh	r2, [r7, #6]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	4613      	mov	r3, r2
 800a422:	68ba      	ldr	r2, [r7, #8]
 800a424:	68b9      	ldr	r1, [r7, #8]
 800a426:	68f8      	ldr	r0, [r7, #12]
 800a428:	f000 f978 	bl	800a71c <HAL_SPI_TransmitReceive>
 800a42c:	4603      	mov	r3, r0
 800a42e:	e16f      	b.n	800a710 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <HAL_SPI_Receive+0x5a>
 800a43a:	2302      	movs	r3, #2
 800a43c:	e168      	b.n	800a710 <HAL_SPI_Receive+0x32c>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2201      	movs	r2, #1
 800a442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a446:	f7f7 ffbf 	bl	80023c8 <HAL_GetTick>
 800a44a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a452:	b2db      	uxtb	r3, r3
 800a454:	2b01      	cmp	r3, #1
 800a456:	d007      	beq.n	800a468 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800a458:	2302      	movs	r3, #2
 800a45a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a464:	7ffb      	ldrb	r3, [r7, #31]
 800a466:	e153      	b.n	800a710 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d002      	beq.n	800a474 <HAL_SPI_Receive+0x90>
 800a46e:	88fb      	ldrh	r3, [r7, #6]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d107      	bne.n	800a484 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800a474:	2301      	movs	r3, #1
 800a476:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a480:	7ffb      	ldrb	r3, [r7, #31]
 800a482:	e145      	b.n	800a710 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2204      	movs	r2, #4
 800a488:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2200      	movs	r2, #0
 800a490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	68ba      	ldr	r2, [r7, #8]
 800a498:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	88fa      	ldrh	r2, [r7, #6]
 800a49e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	88fa      	ldrh	r2, [r7, #6]
 800a4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a4d4:	d107      	bne.n	800a4e6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	685a      	ldr	r2, [r3, #4]
 800a4ec:	4b8a      	ldr	r3, [pc, #552]	; (800a718 <HAL_SPI_Receive+0x334>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	88f9      	ldrh	r1, [r7, #6]
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	6812      	ldr	r2, [r2, #0]
 800a4f6:	430b      	orrs	r3, r1
 800a4f8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f042 0201 	orr.w	r2, r2, #1
 800a508:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a512:	d107      	bne.n	800a524 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a522:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	68db      	ldr	r3, [r3, #12]
 800a528:	2b0f      	cmp	r3, #15
 800a52a:	d948      	bls.n	800a5be <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a52c:	e040      	b.n	800a5b0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	695a      	ldr	r2, [r3, #20]
 800a534:	f248 0308 	movw	r3, #32776	; 0x8008
 800a538:	4013      	ands	r3, r2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d014      	beq.n	800a568 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a546:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a548:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	3b01      	subs	r3, #1
 800a55e:	b29a      	uxth	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a566:	e023      	b.n	800a5b0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a568:	f7f7 ff2e 	bl	80023c8 <HAL_GetTick>
 800a56c:	4602      	mov	r2, r0
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	1ad3      	subs	r3, r2, r3
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	429a      	cmp	r2, r3
 800a576:	d803      	bhi.n	800a580 <HAL_SPI_Receive+0x19c>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57e:	d102      	bne.n	800a586 <HAL_SPI_Receive+0x1a2>
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d114      	bne.n	800a5b0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fcfe 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a59a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e0af      	b.n	800a710 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1b8      	bne.n	800a52e <HAL_SPI_Receive+0x14a>
 800a5bc:	e095      	b.n	800a6ea <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	2b07      	cmp	r3, #7
 800a5c4:	f240 808b 	bls.w	800a6de <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a5c8:	e03f      	b.n	800a64a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d114      	bne.n	800a602 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5dc:	69ba      	ldr	r2, [r7, #24]
 800a5de:	8812      	ldrh	r2, [r2, #0]
 800a5e0:	b292      	uxth	r2, r2
 800a5e2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e8:	1c9a      	adds	r2, r3, #2
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a600:	e023      	b.n	800a64a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a602:	f7f7 fee1 	bl	80023c8 <HAL_GetTick>
 800a606:	4602      	mov	r2, r0
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	1ad3      	subs	r3, r2, r3
 800a60c:	683a      	ldr	r2, [r7, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d803      	bhi.n	800a61a <HAL_SPI_Receive+0x236>
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a618:	d102      	bne.n	800a620 <HAL_SPI_Receive+0x23c>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d114      	bne.n	800a64a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f000 fcb1 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2200      	movs	r2, #0
 800a62a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a646:	2303      	movs	r3, #3
 800a648:	e062      	b.n	800a710 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a650:	b29b      	uxth	r3, r3
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1b9      	bne.n	800a5ca <HAL_SPI_Receive+0x1e6>
 800a656:	e048      	b.n	800a6ea <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	695b      	ldr	r3, [r3, #20]
 800a65e:	f003 0301 	and.w	r3, r3, #1
 800a662:	2b01      	cmp	r3, #1
 800a664:	d117      	bne.n	800a696 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a672:	7812      	ldrb	r2, [r2, #0]
 800a674:	b2d2      	uxtb	r2, r2
 800a676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a688:	b29b      	uxth	r3, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	b29a      	uxth	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a694:	e023      	b.n	800a6de <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a696:	f7f7 fe97 	bl	80023c8 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	683a      	ldr	r2, [r7, #0]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d803      	bhi.n	800a6ae <HAL_SPI_Receive+0x2ca>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ac:	d102      	bne.n	800a6b4 <HAL_SPI_Receive+0x2d0>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d114      	bne.n	800a6de <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a6b4:	68f8      	ldr	r0, [r7, #12]
 800a6b6:	f000 fc67 	bl	800af88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e018      	b.n	800a710 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d1b6      	bne.n	800a658 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a6ea:	68f8      	ldr	r0, [r7, #12]
 800a6ec:	f000 fc4c 	bl	800af88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2201      	movs	r2, #1
 800a6fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e000      	b.n	800a710 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 800a70e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3720      	adds	r7, #32
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	ffff0000 	.word	0xffff0000

0800a71c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b08e      	sub	sp, #56	; 0x38
 800a720:	af02      	add	r7, sp, #8
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	3320      	adds	r3, #32
 800a736:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	3330      	adds	r3, #48	; 0x30
 800a73e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_SPI_TransmitReceive+0x32>
 800a74a:	2302      	movs	r3, #2
 800a74c:	e209      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2201      	movs	r2, #1
 800a752:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a756:	f7f7 fe37 	bl	80023c8 <HAL_GetTick>
 800a75a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800a75c:	887b      	ldrh	r3, [r7, #2]
 800a75e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800a760:	887b      	ldrh	r3, [r7, #2]
 800a762:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a76a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a772:	7efb      	ldrb	r3, [r7, #27]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d014      	beq.n	800a7a2 <HAL_SPI_TransmitReceive+0x86>
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a77e:	d106      	bne.n	800a78e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800a788:	7efb      	ldrb	r3, [r7, #27]
 800a78a:	2b04      	cmp	r3, #4
 800a78c:	d009      	beq.n	800a7a2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800a78e:	2302      	movs	r3, #2
 800a790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2200      	movs	r2, #0
 800a798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a79c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7a0:	e1df      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d005      	beq.n	800a7b4 <HAL_SPI_TransmitReceive+0x98>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d002      	beq.n	800a7b4 <HAL_SPI_TransmitReceive+0x98>
 800a7ae:	887b      	ldrh	r3, [r7, #2]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d109      	bne.n	800a7c8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a7c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a7c6:	e1cc      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a7ce:	b2db      	uxtb	r3, r3
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d003      	beq.n	800a7dc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	2205      	movs	r2, #5
 800a7d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	887a      	ldrh	r2, [r7, #2]
 800a7ee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	887a      	ldrh	r2, [r7, #2]
 800a7f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	68ba      	ldr	r2, [r7, #8]
 800a7fe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	887a      	ldrh	r2, [r7, #2]
 800a804:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	887a      	ldrh	r2, [r7, #2]
 800a80c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685a      	ldr	r2, [r3, #4]
 800a822:	4b82      	ldr	r3, [pc, #520]	; (800aa2c <HAL_SPI_TransmitReceive+0x310>)
 800a824:	4013      	ands	r3, r2
 800a826:	8879      	ldrh	r1, [r7, #2]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	6812      	ldr	r2, [r2, #0]
 800a82c:	430b      	orrs	r3, r1
 800a82e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f042 0201 	orr.w	r2, r2, #1
 800a83e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a848:	d107      	bne.n	800a85a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	2b0f      	cmp	r3, #15
 800a860:	d970      	bls.n	800a944 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a862:	e068      	b.n	800a936 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	f003 0302 	and.w	r3, r3, #2
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d11a      	bne.n	800a8a8 <HAL_SPI_TransmitReceive+0x18c>
 800a872:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a874:	2b00      	cmp	r3, #0
 800a876:	d017      	beq.n	800a8a8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	6812      	ldr	r2, [r2, #0]
 800a882:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a888:	1d1a      	adds	r2, r3, #4
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a894:	b29b      	uxth	r3, r3
 800a896:	3b01      	subs	r3, #1
 800a898:	b29a      	uxth	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a8a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	695a      	ldr	r2, [r3, #20]
 800a8ae:	f248 0308 	movw	r3, #32776	; 0x8008
 800a8b2:	4013      	ands	r3, r2
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d01a      	beq.n	800a8ee <HAL_SPI_TransmitReceive+0x1d2>
 800a8b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d017      	beq.n	800a8ee <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a8c8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8ce:	1d1a      	adds	r2, r3, #4
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8ee:	f7f7 fd6b 	bl	80023c8 <HAL_GetTick>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d803      	bhi.n	800a906 <HAL_SPI_TransmitReceive+0x1ea>
 800a8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a904:	d102      	bne.n	800a90c <HAL_SPI_TransmitReceive+0x1f0>
 800a906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d114      	bne.n	800a936 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 fb3b 	bl	800af88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a920:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800a932:	2303      	movs	r3, #3
 800a934:	e115      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a936:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d193      	bne.n	800a864 <HAL_SPI_TransmitReceive+0x148>
 800a93c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d190      	bne.n	800a864 <HAL_SPI_TransmitReceive+0x148>
 800a942:	e0e7      	b.n	800ab14 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	2b07      	cmp	r3, #7
 800a94a:	f240 80dd 	bls.w	800ab08 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800a94e:	e066      	b.n	800aa1e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d119      	bne.n	800a992 <HAL_SPI_TransmitReceive+0x276>
 800a95e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a960:	2b00      	cmp	r3, #0
 800a962:	d016      	beq.n	800a992 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a968:	881a      	ldrh	r2, [r3, #0]
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a972:	1c9a      	adds	r2, r3, #2
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a97e:	b29b      	uxth	r3, r3
 800a980:	3b01      	subs	r3, #1
 800a982:	b29a      	uxth	r2, r3
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a990:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	695b      	ldr	r3, [r3, #20]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d11a      	bne.n	800a9d6 <HAL_SPI_TransmitReceive+0x2ba>
 800a9a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d017      	beq.n	800a9d6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9aa:	6a3a      	ldr	r2, [r7, #32]
 800a9ac:	8812      	ldrh	r2, [r2, #0]
 800a9ae:	b292      	uxth	r2, r2
 800a9b0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9b6:	1c9a      	adds	r2, r3, #2
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	b29a      	uxth	r2, r3
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a9d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9d6:	f7f7 fcf7 	bl	80023c8 <HAL_GetTick>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	1ad3      	subs	r3, r2, r3
 800a9e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d803      	bhi.n	800a9ee <HAL_SPI_TransmitReceive+0x2d2>
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ec:	d102      	bne.n	800a9f4 <HAL_SPI_TransmitReceive+0x2d8>
 800a9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d114      	bne.n	800aa1e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 fac7 	bl	800af88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e0a1      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800aa1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d195      	bne.n	800a950 <HAL_SPI_TransmitReceive+0x234>
 800aa24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d192      	bne.n	800a950 <HAL_SPI_TransmitReceive+0x234>
 800aa2a:	e073      	b.n	800ab14 <HAL_SPI_TransmitReceive+0x3f8>
 800aa2c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d11b      	bne.n	800aa76 <HAL_SPI_TransmitReceive+0x35a>
 800aa3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d018      	beq.n	800aa76 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	3320      	adds	r3, #32
 800aa4e:	7812      	ldrb	r2, [r2, #0]
 800aa50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa56:	1c5a      	adds	r2, r3, #1
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	3b01      	subs	r3, #1
 800aa66:	b29a      	uxth	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800aa74:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d11d      	bne.n	800aac0 <HAL_SPI_TransmitReceive+0x3a4>
 800aa84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d01a      	beq.n	800aac0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa96:	7812      	ldrb	r2, [r2, #0]
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaa0:	1c5a      	adds	r2, r3, #1
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800aabe:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aac0:	f7f7 fc82 	bl	80023c8 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aacc:	429a      	cmp	r2, r3
 800aace:	d803      	bhi.n	800aad8 <HAL_SPI_TransmitReceive+0x3bc>
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	d102      	bne.n	800aade <HAL_SPI_TransmitReceive+0x3c2>
 800aad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d114      	bne.n	800ab08 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f000 fa52 	bl	800af88 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e02c      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ab08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d190      	bne.n	800aa30 <HAL_SPI_TransmitReceive+0x314>
 800ab0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d18d      	bne.n	800aa30 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ab14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	2108      	movs	r1, #8
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f000 fad2 	bl	800b0c8 <SPI_WaitOnFlagUntilTimeout>
 800ab24:	4603      	mov	r3, r0
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d007      	beq.n	800ab3a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab30:	f043 0220 	orr.w	r2, r3, #32
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 fa24 	bl	800af88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d001      	beq.n	800ab5e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e001      	b.n	800ab62 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800ab5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3730      	adds	r7, #48	; 0x30
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop

0800ab6c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08a      	sub	sp, #40	; 0x28
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800ab84:	6a3a      	ldr	r2, [r7, #32]
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	4013      	ands	r3, r2
 800ab8a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	689b      	ldr	r3, [r3, #8]
 800ab92:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab9e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3330      	adds	r3, #48	; 0x30
 800aba6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d113      	bne.n	800abda <HAL_SPI_IRQHandler+0x6e>
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	f003 0320 	and.w	r3, r3, #32
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10e      	bne.n	800abda <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d009      	beq.n	800abda <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	4798      	blx	r3
    hspi->RxISR(hspi);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
    handled = 1UL;
 800abd6:	2301      	movs	r3, #1
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10f      	bne.n	800ac04 <HAL_SPI_IRQHandler+0x98>
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	f003 0301 	and.w	r3, r3, #1
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00a      	beq.n	800ac04 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d105      	bne.n	800ac04 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	4798      	blx	r3
    handled = 1UL;
 800ac00:	2301      	movs	r3, #1
 800ac02:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10f      	bne.n	800ac2e <HAL_SPI_IRQHandler+0xc2>
 800ac0e:	69bb      	ldr	r3, [r7, #24]
 800ac10:	f003 0302 	and.w	r3, r3, #2
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d00a      	beq.n	800ac2e <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	4798      	blx	r3
    handled = 1UL;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f040 815a 	bne.w	800aeea <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	f003 0308 	and.w	r3, r3, #8
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 808b 	beq.w	800ad58 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	699a      	ldr	r2, [r3, #24]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f042 0208 	orr.w	r2, r2, #8
 800ac50:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	699a      	ldr	r2, [r3, #24]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f042 0210 	orr.w	r2, r2, #16
 800ac60:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	699a      	ldr	r2, [r3, #24]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac70:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	691a      	ldr	r2, [r3, #16]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f022 0208 	bic.w	r2, r2, #8
 800ac80:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d13d      	bne.n	800ad0c <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ac90:	e036      	b.n	800ad00 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b0f      	cmp	r3, #15
 800ac98:	d90b      	bls.n	800acb2 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800aca4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acaa:	1d1a      	adds	r2, r3, #4
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	665a      	str	r2, [r3, #100]	; 0x64
 800acb0:	e01d      	b.n	800acee <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	2b07      	cmp	r3, #7
 800acb8:	d90b      	bls.n	800acd2 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	8812      	ldrh	r2, [r2, #0]
 800acc2:	b292      	uxth	r2, r2
 800acc4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acca:	1c9a      	adds	r2, r3, #2
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	665a      	str	r2, [r3, #100]	; 0x64
 800acd0:	e00d      	b.n	800acee <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acde:	7812      	ldrb	r2, [r2, #0]
 800ace0:	b2d2      	uxtb	r2, r2
 800ace2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	3b01      	subs	r3, #1
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1c2      	bne.n	800ac92 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f93b 	bl	800af88 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d003      	beq.n	800ad2c <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f90b 	bl	800af40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ad2a:	e0e3      	b.n	800aef4 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ad2c:	7cfb      	ldrb	r3, [r7, #19]
 800ad2e:	2b05      	cmp	r3, #5
 800ad30:	d103      	bne.n	800ad3a <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 f8fa 	bl	800af2c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ad38:	e0d9      	b.n	800aeee <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ad3a:	7cfb      	ldrb	r3, [r7, #19]
 800ad3c:	2b04      	cmp	r3, #4
 800ad3e:	d103      	bne.n	800ad48 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f000 f8e9 	bl	800af18 <HAL_SPI_RxCpltCallback>
    return;
 800ad46:	e0d2      	b.n	800aeee <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ad48:	7cfb      	ldrb	r3, [r7, #19]
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	f040 80cf 	bne.w	800aeee <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 f8d7 	bl	800af04 <HAL_SPI_TxCpltCallback>
    return;
 800ad56:	e0ca      	b.n	800aeee <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00d      	beq.n	800ad7e <HAL_SPI_IRQHandler+0x212>
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f003 0308 	and.w	r3, r3, #8
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d008      	beq.n	800ad7e <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad7a:	619a      	str	r2, [r3, #24]

    return;
 800ad7c:	e0ba      	b.n	800aef4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80b5 	beq.w	800aef4 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00f      	beq.n	800adb4 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad9a:	f043 0204 	orr.w	r2, r3, #4
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	699a      	ldr	r2, [r3, #24]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adb2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00f      	beq.n	800adde <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adc4:	f043 0201 	orr.w	r2, r3, #1
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	699a      	ldr	r2, [r3, #24]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800addc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d00f      	beq.n	800ae08 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adee:	f043 0208 	orr.w	r2, r3, #8
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	699a      	ldr	r2, [r3, #24]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae06:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ae08:	69bb      	ldr	r3, [r7, #24]
 800ae0a:	f003 0320 	and.w	r3, r3, #32
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00f      	beq.n	800ae32 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	699a      	ldr	r2, [r3, #24]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f042 0220 	orr.w	r2, r2, #32
 800ae30:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d05a      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f022 0201 	bic.w	r2, r2, #1
 800ae4a:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	6919      	ldr	r1, [r3, #16]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	4b29      	ldr	r3, [pc, #164]	; (800aefc <HAL_SPI_IRQHandler+0x390>)
 800ae58:	400b      	ands	r3, r1
 800ae5a:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae66:	d138      	bne.n	800aeda <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	689a      	ldr	r2, [r3, #8]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ae76:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d013      	beq.n	800aea8 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae84:	4a1e      	ldr	r2, [pc, #120]	; (800af00 <HAL_SPI_IRQHandler+0x394>)
 800ae86:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f8 fa61 	bl	8003354 <HAL_DMA_Abort_IT>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d007      	beq.n	800aea8 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d020      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aeb4:	4a12      	ldr	r2, [pc, #72]	; (800af00 <HAL_SPI_IRQHandler+0x394>)
 800aeb6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f8 fa49 	bl	8003354 <HAL_DMA_Abort_IT>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d014      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aed8:	e00b      	b.n	800aef2 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2201      	movs	r2, #1
 800aede:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f82c 	bl	800af40 <HAL_SPI_ErrorCallback>
    return;
 800aee8:	e003      	b.n	800aef2 <HAL_SPI_IRQHandler+0x386>
    return;
 800aeea:	bf00      	nop
 800aeec:	e002      	b.n	800aef4 <HAL_SPI_IRQHandler+0x388>
    return;
 800aeee:	bf00      	nop
 800aef0:	e000      	b.n	800aef4 <HAL_SPI_IRQHandler+0x388>
    return;
 800aef2:	bf00      	nop
  }
}
 800aef4:	3728      	adds	r7, #40	; 0x28
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	fffffc94 	.word	0xfffffc94
 800af00:	0800af55 	.word	0x0800af55

0800af04 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af60:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f7ff ffe0 	bl	800af40 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800af80:	bf00      	nop
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800af88:	b480      	push	{r7}
 800af8a:	b085      	sub	sp, #20
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f042 0208 	orr.w	r2, r2, #8
 800afa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f042 0210 	orr.w	r2, r2, #16
 800afb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f022 0201 	bic.w	r2, r2, #1
 800afc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6919      	ldr	r1, [r3, #16]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	4b3c      	ldr	r3, [pc, #240]	; (800b0c4 <SPI_CloseTransfer+0x13c>)
 800afd4:	400b      	ands	r3, r1
 800afd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689a      	ldr	r2, [r3, #8]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800afe6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d014      	beq.n	800b01e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b00      	cmp	r3, #0
 800affc:	d00f      	beq.n	800b01e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	699a      	ldr	r2, [r3, #24]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f042 0220 	orr.w	r2, r2, #32
 800b01c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b03      	cmp	r3, #3
 800b028:	d014      	beq.n	800b054 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b030:	2b00      	cmp	r3, #0
 800b032:	d00f      	beq.n	800b054 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b03a:	f043 0204 	orr.w	r2, r3, #4
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699a      	ldr	r2, [r3, #24]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b052:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00f      	beq.n	800b07e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b064:	f043 0201 	orr.w	r2, r3, #1
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	699a      	ldr	r2, [r3, #24]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b07c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00f      	beq.n	800b0a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b08e:	f043 0208 	orr.w	r2, r3, #8
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800b0b8:	bf00      	nop
 800b0ba:	3714      	adds	r7, #20
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	fffffc90 	.word	0xfffffc90

0800b0c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	603b      	str	r3, [r7, #0]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0d8:	e010      	b.n	800b0fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0da:	f7f7 f975 	bl	80023c8 <HAL_GetTick>
 800b0de:	4602      	mov	r2, r0
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	1ad3      	subs	r3, r2, r3
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d803      	bhi.n	800b0f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f0:	d102      	bne.n	800b0f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e00f      	b.n	800b11c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	695a      	ldr	r2, [r3, #20]
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	4013      	ands	r3, r2
 800b106:	68ba      	ldr	r2, [r7, #8]
 800b108:	429a      	cmp	r2, r3
 800b10a:	bf0c      	ite	eq
 800b10c:	2301      	moveq	r3, #1
 800b10e:	2300      	movne	r3, #0
 800b110:	b2db      	uxtb	r3, r3
 800b112:	461a      	mov	r2, r3
 800b114:	79fb      	ldrb	r3, [r7, #7]
 800b116:	429a      	cmp	r2, r3
 800b118:	d0df      	beq.n	800b0da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b130:	095b      	lsrs	r3, r3, #5
 800b132:	3301      	adds	r3, #1
 800b134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	68db      	ldr	r3, [r3, #12]
 800b13a:	3301      	adds	r3, #1
 800b13c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	3307      	adds	r3, #7
 800b142:	08db      	lsrs	r3, r3, #3
 800b144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	fb02 f303 	mul.w	r3, r2, r3
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3714      	adds	r7, #20
 800b152:	46bd      	mov	sp, r7
 800b154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b158:	4770      	bx	lr

0800b15a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b082      	sub	sp, #8
 800b15e:	af00      	add	r7, sp, #0
 800b160:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d101      	bne.n	800b16c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b168:	2301      	movs	r3, #1
 800b16a:	e049      	b.n	800b200 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b172:	b2db      	uxtb	r3, r3
 800b174:	2b00      	cmp	r3, #0
 800b176:	d106      	bne.n	800b186 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f7f6 ff69 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2202      	movs	r2, #2
 800b18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	f000 f987 	bl	800b4ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2201      	movs	r2, #1
 800b1b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2201      	movs	r2, #1
 800b1d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b082      	sub	sp, #8
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	691b      	ldr	r3, [r3, #16]
 800b216:	f003 0302 	and.w	r3, r3, #2
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d122      	bne.n	800b264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
 800b224:	f003 0302 	and.w	r3, r3, #2
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d11b      	bne.n	800b264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f06f 0202 	mvn.w	r2, #2
 800b234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2201      	movs	r2, #1
 800b23a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	699b      	ldr	r3, [r3, #24]
 800b242:	f003 0303 	and.w	r3, r3, #3
 800b246:	2b00      	cmp	r3, #0
 800b248:	d003      	beq.n	800b252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 f90f 	bl	800b46e <HAL_TIM_IC_CaptureCallback>
 800b250:	e005      	b.n	800b25e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f901 	bl	800b45a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f000 f912 	bl	800b482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	691b      	ldr	r3, [r3, #16]
 800b26a:	f003 0304 	and.w	r3, r3, #4
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68db      	ldr	r3, [r3, #12]
 800b278:	f003 0304 	and.w	r3, r3, #4
 800b27c:	2b04      	cmp	r3, #4
 800b27e:	d11b      	bne.n	800b2b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f06f 0204 	mvn.w	r2, #4
 800b288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2202      	movs	r2, #2
 800b28e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d003      	beq.n	800b2a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f8e5 	bl	800b46e <HAL_TIM_IC_CaptureCallback>
 800b2a4:	e005      	b.n	800b2b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f8d7 	bl	800b45a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f8e8 	bl	800b482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	f003 0308 	and.w	r3, r3, #8
 800b2c2:	2b08      	cmp	r3, #8
 800b2c4:	d122      	bne.n	800b30c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b08      	cmp	r3, #8
 800b2d2:	d11b      	bne.n	800b30c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f06f 0208 	mvn.w	r2, #8
 800b2dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2204      	movs	r2, #4
 800b2e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	69db      	ldr	r3, [r3, #28]
 800b2ea:	f003 0303 	and.w	r3, r3, #3
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d003      	beq.n	800b2fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f000 f8bb 	bl	800b46e <HAL_TIM_IC_CaptureCallback>
 800b2f8:	e005      	b.n	800b306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f000 f8ad 	bl	800b45a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f8be 	bl	800b482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691b      	ldr	r3, [r3, #16]
 800b312:	f003 0310 	and.w	r3, r3, #16
 800b316:	2b10      	cmp	r3, #16
 800b318:	d122      	bne.n	800b360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	f003 0310 	and.w	r3, r3, #16
 800b324:	2b10      	cmp	r3, #16
 800b326:	d11b      	bne.n	800b360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f06f 0210 	mvn.w	r2, #16
 800b330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	2208      	movs	r2, #8
 800b336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69db      	ldr	r3, [r3, #28]
 800b33e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b342:	2b00      	cmp	r3, #0
 800b344:	d003      	beq.n	800b34e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 f891 	bl	800b46e <HAL_TIM_IC_CaptureCallback>
 800b34c:	e005      	b.n	800b35a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 f883 	bl	800b45a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 f894 	bl	800b482 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d10e      	bne.n	800b38c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68db      	ldr	r3, [r3, #12]
 800b374:	f003 0301 	and.w	r3, r3, #1
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d107      	bne.n	800b38c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f06f 0201 	mvn.w	r2, #1
 800b384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f85d 	bl	800b446 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	691b      	ldr	r3, [r3, #16]
 800b392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b396:	2b80      	cmp	r3, #128	; 0x80
 800b398:	d10e      	bne.n	800b3b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3a4:	2b80      	cmp	r3, #128	; 0x80
 800b3a6:	d107      	bne.n	800b3b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b3b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f9ac 	bl	800b710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c6:	d10e      	bne.n	800b3e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3d2:	2b80      	cmp	r3, #128	; 0x80
 800b3d4:	d107      	bne.n	800b3e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 f99f 	bl	800b724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3f0:	2b40      	cmp	r3, #64	; 0x40
 800b3f2:	d10e      	bne.n	800b412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3fe:	2b40      	cmp	r3, #64	; 0x40
 800b400:	d107      	bne.n	800b412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f000 f842 	bl	800b496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	f003 0320 	and.w	r3, r3, #32
 800b41c:	2b20      	cmp	r3, #32
 800b41e:	d10e      	bne.n	800b43e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f003 0320 	and.w	r3, r3, #32
 800b42a:	2b20      	cmp	r3, #32
 800b42c:	d107      	bne.n	800b43e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f06f 0220 	mvn.w	r2, #32
 800b436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f95f 	bl	800b6fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}

0800b446 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b446:	b480      	push	{r7}
 800b448:	b083      	sub	sp, #12
 800b44a:	af00      	add	r7, sp, #0
 800b44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b44e:	bf00      	nop
 800b450:	370c      	adds	r7, #12
 800b452:	46bd      	mov	sp, r7
 800b454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b458:	4770      	bx	lr

0800b45a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b462:	bf00      	nop
 800b464:	370c      	adds	r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b46e:	b480      	push	{r7}
 800b470:	b083      	sub	sp, #12
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b476:	bf00      	nop
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr

0800b482 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b49e:	bf00      	nop
 800b4a0:	370c      	adds	r7, #12
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
	...

0800b4ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b085      	sub	sp, #20
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	4a40      	ldr	r2, [pc, #256]	; (800b5c0 <TIM_Base_SetConfig+0x114>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d013      	beq.n	800b4ec <TIM_Base_SetConfig+0x40>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ca:	d00f      	beq.n	800b4ec <TIM_Base_SetConfig+0x40>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	4a3d      	ldr	r2, [pc, #244]	; (800b5c4 <TIM_Base_SetConfig+0x118>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d00b      	beq.n	800b4ec <TIM_Base_SetConfig+0x40>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	4a3c      	ldr	r2, [pc, #240]	; (800b5c8 <TIM_Base_SetConfig+0x11c>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d007      	beq.n	800b4ec <TIM_Base_SetConfig+0x40>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	4a3b      	ldr	r2, [pc, #236]	; (800b5cc <TIM_Base_SetConfig+0x120>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d003      	beq.n	800b4ec <TIM_Base_SetConfig+0x40>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	4a3a      	ldr	r2, [pc, #232]	; (800b5d0 <TIM_Base_SetConfig+0x124>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d108      	bne.n	800b4fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a2f      	ldr	r2, [pc, #188]	; (800b5c0 <TIM_Base_SetConfig+0x114>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d01f      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50c:	d01b      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	4a2c      	ldr	r2, [pc, #176]	; (800b5c4 <TIM_Base_SetConfig+0x118>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d017      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	4a2b      	ldr	r2, [pc, #172]	; (800b5c8 <TIM_Base_SetConfig+0x11c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d013      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a2a      	ldr	r2, [pc, #168]	; (800b5cc <TIM_Base_SetConfig+0x120>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d00f      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a29      	ldr	r2, [pc, #164]	; (800b5d0 <TIM_Base_SetConfig+0x124>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d00b      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a28      	ldr	r2, [pc, #160]	; (800b5d4 <TIM_Base_SetConfig+0x128>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d007      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a27      	ldr	r2, [pc, #156]	; (800b5d8 <TIM_Base_SetConfig+0x12c>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d003      	beq.n	800b546 <TIM_Base_SetConfig+0x9a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	4a26      	ldr	r2, [pc, #152]	; (800b5dc <TIM_Base_SetConfig+0x130>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d108      	bne.n	800b558 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b54c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	4313      	orrs	r3, r2
 800b556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	4313      	orrs	r3, r2
 800b564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68fa      	ldr	r2, [r7, #12]
 800b56a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	681a      	ldr	r2, [r3, #0]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	4a10      	ldr	r2, [pc, #64]	; (800b5c0 <TIM_Base_SetConfig+0x114>)
 800b580:	4293      	cmp	r3, r2
 800b582:	d00f      	beq.n	800b5a4 <TIM_Base_SetConfig+0xf8>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4a12      	ldr	r2, [pc, #72]	; (800b5d0 <TIM_Base_SetConfig+0x124>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d00b      	beq.n	800b5a4 <TIM_Base_SetConfig+0xf8>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4a11      	ldr	r2, [pc, #68]	; (800b5d4 <TIM_Base_SetConfig+0x128>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d007      	beq.n	800b5a4 <TIM_Base_SetConfig+0xf8>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	4a10      	ldr	r2, [pc, #64]	; (800b5d8 <TIM_Base_SetConfig+0x12c>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d003      	beq.n	800b5a4 <TIM_Base_SetConfig+0xf8>
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	4a0f      	ldr	r2, [pc, #60]	; (800b5dc <TIM_Base_SetConfig+0x130>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d103      	bne.n	800b5ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	691a      	ldr	r2, [r3, #16]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	615a      	str	r2, [r3, #20]
}
 800b5b2:	bf00      	nop
 800b5b4:	3714      	adds	r7, #20
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr
 800b5be:	bf00      	nop
 800b5c0:	40010000 	.word	0x40010000
 800b5c4:	40000400 	.word	0x40000400
 800b5c8:	40000800 	.word	0x40000800
 800b5cc:	40000c00 	.word	0x40000c00
 800b5d0:	40010400 	.word	0x40010400
 800b5d4:	40014000 	.word	0x40014000
 800b5d8:	40014400 	.word	0x40014400
 800b5dc:	40014800 	.word	0x40014800

0800b5e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d101      	bne.n	800b5f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	e06d      	b.n	800b6d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2202      	movs	r2, #2
 800b604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	685b      	ldr	r3, [r3, #4]
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	689b      	ldr	r3, [r3, #8]
 800b616:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a30      	ldr	r2, [pc, #192]	; (800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d004      	beq.n	800b62c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a2f      	ldr	r2, [pc, #188]	; (800b6e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d108      	bne.n	800b63e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b632:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	68fa      	ldr	r2, [r7, #12]
 800b63a:	4313      	orrs	r3, r2
 800b63c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b644:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68fa      	ldr	r2, [r7, #12]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a20      	ldr	r2, [pc, #128]	; (800b6e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d022      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b66a:	d01d      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a1d      	ldr	r2, [pc, #116]	; (800b6e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d018      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a1c      	ldr	r2, [pc, #112]	; (800b6ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d013      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a1a      	ldr	r2, [pc, #104]	; (800b6f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d00e      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a15      	ldr	r2, [pc, #84]	; (800b6e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d009      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a16      	ldr	r2, [pc, #88]	; (800b6f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d004      	beq.n	800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a15      	ldr	r2, [pc, #84]	; (800b6f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d10c      	bne.n	800b6c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68ba      	ldr	r2, [r7, #8]
 800b6c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	40010000 	.word	0x40010000
 800b6e4:	40010400 	.word	0x40010400
 800b6e8:	40000400 	.word	0x40000400
 800b6ec:	40000800 	.word	0x40000800
 800b6f0:	40000c00 	.word	0x40000c00
 800b6f4:	40001800 	.word	0x40001800
 800b6f8:	40014000 	.word	0x40014000

0800b6fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b704:	bf00      	nop
 800b706:	370c      	adds	r7, #12
 800b708:	46bd      	mov	sp, r7
 800b70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70e:	4770      	bx	lr

0800b710 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b718:	bf00      	nop
 800b71a:	370c      	adds	r7, #12
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d101      	bne.n	800b74a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b746:	2301      	movs	r3, #1
 800b748:	e042      	b.n	800b7d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b750:	2b00      	cmp	r3, #0
 800b752:	d106      	bne.n	800b762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7f6 fcef 	bl	8002140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2224      	movs	r2, #36	; 0x24
 800b766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0201 	bic.w	r2, r2, #1
 800b778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 fc80 	bl	800c080 <UART_SetConfig>
 800b780:	4603      	mov	r3, r0
 800b782:	2b01      	cmp	r3, #1
 800b784:	d101      	bne.n	800b78a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e022      	b.n	800b7d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f001 f9dc 	bl	800cb50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	685a      	ldr	r2, [r3, #4]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	689a      	ldr	r2, [r3, #8]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f042 0201 	orr.w	r2, r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f001 fa63 	bl	800cc94 <UART_CheckIdleState>
 800b7ce:	4603      	mov	r3, r0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08a      	sub	sp, #40	; 0x28
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	603b      	str	r3, [r7, #0]
 800b7e4:	4613      	mov	r3, r2
 800b7e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7ee:	2b20      	cmp	r3, #32
 800b7f0:	f040 8083 	bne.w	800b8fa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <HAL_UART_Transmit+0x28>
 800b7fa:	88fb      	ldrh	r3, [r7, #6]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d101      	bne.n	800b804 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e07b      	b.n	800b8fc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b80a:	2b01      	cmp	r3, #1
 800b80c:	d101      	bne.n	800b812 <HAL_UART_Transmit+0x3a>
 800b80e:	2302      	movs	r3, #2
 800b810:	e074      	b.n	800b8fc <HAL_UART_Transmit+0x124>
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2201      	movs	r2, #1
 800b816:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2200      	movs	r2, #0
 800b81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2221      	movs	r2, #33	; 0x21
 800b826:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b82a:	f7f6 fdcd 	bl	80023c8 <HAL_GetTick>
 800b82e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	88fa      	ldrh	r2, [r7, #6]
 800b834:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	88fa      	ldrh	r2, [r7, #6]
 800b83c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b848:	d108      	bne.n	800b85c <HAL_UART_Transmit+0x84>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d104      	bne.n	800b85c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b852:	2300      	movs	r3, #0
 800b854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	61bb      	str	r3, [r7, #24]
 800b85a:	e003      	b.n	800b864 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b860:	2300      	movs	r3, #0
 800b862:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b86c:	e02c      	b.n	800b8c8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2200      	movs	r2, #0
 800b876:	2180      	movs	r1, #128	; 0x80
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	f001 fa56 	bl	800cd2a <UART_WaitOnFlagUntilTimeout>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e039      	b.n	800b8fc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10b      	bne.n	800b8a6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	881b      	ldrh	r3, [r3, #0]
 800b892:	461a      	mov	r2, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b89c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	3302      	adds	r3, #2
 800b8a2:	61bb      	str	r3, [r7, #24]
 800b8a4:	e007      	b.n	800b8b6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	781a      	ldrb	r2, [r3, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1cc      	bne.n	800b86e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2140      	movs	r1, #64	; 0x40
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f001 fa23 	bl	800cd2a <UART_WaitOnFlagUntilTimeout>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d001      	beq.n	800b8ee <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b8ea:	2303      	movs	r3, #3
 800b8ec:	e006      	b.n	800b8fc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2220      	movs	r2, #32
 800b8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e000      	b.n	800b8fc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b8fa:	2302      	movs	r3, #2
  }
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b0ba      	sub	sp, #232	; 0xe8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	69db      	ldr	r3, [r3, #28]
 800b912:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b92a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b92e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b932:	4013      	ands	r3, r2
 800b934:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b938:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d11b      	bne.n	800b978 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b944:	f003 0320 	and.w	r3, r3, #32
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d015      	beq.n	800b978 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b94c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b950:	f003 0320 	and.w	r3, r3, #32
 800b954:	2b00      	cmp	r3, #0
 800b956:	d105      	bne.n	800b964 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b95c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b960:	2b00      	cmp	r3, #0
 800b962:	d009      	beq.n	800b978 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 835a 	beq.w	800c022 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	4798      	blx	r3
      }
      return;
 800b976:	e354      	b.n	800c022 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 811f 	beq.w	800bbc0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b982:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b986:	4b8b      	ldr	r3, [pc, #556]	; (800bbb4 <HAL_UART_IRQHandler+0x2b0>)
 800b988:	4013      	ands	r3, r2
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d106      	bne.n	800b99c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b98e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b992:	4b89      	ldr	r3, [pc, #548]	; (800bbb8 <HAL_UART_IRQHandler+0x2b4>)
 800b994:	4013      	ands	r3, r2
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8112 	beq.w	800bbc0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a0:	f003 0301 	and.w	r3, r3, #1
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d011      	beq.n	800b9cc <HAL_UART_IRQHandler+0xc8>
 800b9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9c2:	f043 0201 	orr.w	r2, r3, #1
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d0:	f003 0302 	and.w	r3, r3, #2
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d011      	beq.n	800b9fc <HAL_UART_IRQHandler+0xf8>
 800b9d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d00b      	beq.n	800b9fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9f2:	f043 0204 	orr.w	r2, r3, #4
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b9fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba00:	f003 0304 	and.w	r3, r3, #4
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d011      	beq.n	800ba2c <HAL_UART_IRQHandler+0x128>
 800ba08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00b      	beq.n	800ba2c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2204      	movs	r2, #4
 800ba1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba22:	f043 0202 	orr.w	r2, r3, #2
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ba2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba30:	f003 0308 	and.w	r3, r3, #8
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d017      	beq.n	800ba68 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba3c:	f003 0320 	and.w	r3, r3, #32
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d105      	bne.n	800ba50 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ba44:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ba48:	4b5a      	ldr	r3, [pc, #360]	; (800bbb4 <HAL_UART_IRQHandler+0x2b0>)
 800ba4a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00b      	beq.n	800ba68 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2208      	movs	r2, #8
 800ba56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba5e:	f043 0208 	orr.w	r2, r3, #8
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ba68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d012      	beq.n	800ba9a <HAL_UART_IRQHandler+0x196>
 800ba74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d00c      	beq.n	800ba9a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ba88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba90:	f043 0220 	orr.w	r2, r3, #32
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 82c0 	beq.w	800c026 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800baa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d013      	beq.n	800bada <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab6:	f003 0320 	and.w	r3, r3, #32
 800baba:	2b00      	cmp	r3, #0
 800babc:	d105      	bne.n	800baca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800babe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	689b      	ldr	r3, [r3, #8]
 800baea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baee:	2b40      	cmp	r3, #64	; 0x40
 800baf0:	d005      	beq.n	800bafe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800baf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800baf6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d04f      	beq.n	800bb9e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f001 f9dc 	bl	800cebc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb0e:	2b40      	cmp	r3, #64	; 0x40
 800bb10:	d141      	bne.n	800bb96 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	3308      	adds	r3, #8
 800bb18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bb20:	e853 3f00 	ldrex	r3, [r3]
 800bb24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bb28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bb2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	3308      	adds	r3, #8
 800bb3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bb3e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bb42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bb4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bb56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1d9      	bne.n	800bb12 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d013      	beq.n	800bb8e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb6a:	4a14      	ldr	r2, [pc, #80]	; (800bbbc <HAL_UART_IRQHandler+0x2b8>)
 800bb6c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7f7 fbee 	bl	8003354 <HAL_DMA_Abort_IT>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d017      	beq.n	800bbae <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800bb88:	4610      	mov	r0, r2
 800bb8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb8c:	e00f      	b.n	800bbae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fa60 	bl	800c054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb94:	e00b      	b.n	800bbae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa5c 	bl	800c054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb9c:	e007      	b.n	800bbae <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa58 	bl	800c054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800bbac:	e23b      	b.n	800c026 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbae:	bf00      	nop
    return;
 800bbb0:	e239      	b.n	800c026 <HAL_UART_IRQHandler+0x722>
 800bbb2:	bf00      	nop
 800bbb4:	10000001 	.word	0x10000001
 800bbb8:	04000120 	.word	0x04000120
 800bbbc:	0800cf89 	.word	0x0800cf89

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	f040 81ce 	bne.w	800bf66 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bbca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f000 81c7 	beq.w	800bf66 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bbd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbdc:	f003 0310 	and.w	r3, r3, #16
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f000 81c0 	beq.w	800bf66 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2210      	movs	r2, #16
 800bbec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf8:	2b40      	cmp	r3, #64	; 0x40
 800bbfa:	f040 813b 	bne.w	800be74 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	4a8b      	ldr	r2, [pc, #556]	; (800be34 <HAL_UART_IRQHandler+0x530>)
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d059      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a89      	ldr	r2, [pc, #548]	; (800be38 <HAL_UART_IRQHandler+0x534>)
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d053      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a87      	ldr	r2, [pc, #540]	; (800be3c <HAL_UART_IRQHandler+0x538>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d04d      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a85      	ldr	r2, [pc, #532]	; (800be40 <HAL_UART_IRQHandler+0x53c>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d047      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a83      	ldr	r2, [pc, #524]	; (800be44 <HAL_UART_IRQHandler+0x540>)
 800bc36:	4293      	cmp	r3, r2
 800bc38:	d041      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a81      	ldr	r2, [pc, #516]	; (800be48 <HAL_UART_IRQHandler+0x544>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d03b      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a7f      	ldr	r2, [pc, #508]	; (800be4c <HAL_UART_IRQHandler+0x548>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d035      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a7d      	ldr	r2, [pc, #500]	; (800be50 <HAL_UART_IRQHandler+0x54c>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d02f      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a7b      	ldr	r2, [pc, #492]	; (800be54 <HAL_UART_IRQHandler+0x550>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d029      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a79      	ldr	r2, [pc, #484]	; (800be58 <HAL_UART_IRQHandler+0x554>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d023      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a77      	ldr	r2, [pc, #476]	; (800be5c <HAL_UART_IRQHandler+0x558>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d01d      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a75      	ldr	r2, [pc, #468]	; (800be60 <HAL_UART_IRQHandler+0x55c>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d017      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a73      	ldr	r2, [pc, #460]	; (800be64 <HAL_UART_IRQHandler+0x560>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d011      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a71      	ldr	r2, [pc, #452]	; (800be68 <HAL_UART_IRQHandler+0x564>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d00b      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a6f      	ldr	r2, [pc, #444]	; (800be6c <HAL_UART_IRQHandler+0x568>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d005      	beq.n	800bcbe <HAL_UART_IRQHandler+0x3ba>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a6d      	ldr	r2, [pc, #436]	; (800be70 <HAL_UART_IRQHandler+0x56c>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d105      	bne.n	800bcca <HAL_UART_IRQHandler+0x3c6>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	e004      	b.n	800bcd4 <HAL_UART_IRQHandler+0x3d0>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bcd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 81a4 	beq.w	800c02a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bce8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcec:	429a      	cmp	r2, r3
 800bcee:	f080 819c 	bcs.w	800c02a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bcf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd00:	69db      	ldr	r3, [r3, #28]
 800bd02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd06:	f000 8086 	beq.w	800be16 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd16:	e853 3f00 	ldrex	r3, [r3]
 800bd1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd44:	e841 2300 	strex	r3, r2, [r1]
 800bd48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1da      	bne.n	800bd0a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3308      	adds	r3, #8
 800bd5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bd78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bd7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bd80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bd84:	e841 2300 	strex	r3, r2, [r1]
 800bd88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bd8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d1e1      	bne.n	800bd54 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3308      	adds	r3, #8
 800bd96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bda0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bda2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3308      	adds	r3, #8
 800bdb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bdb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bdba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bdbc:	e841 2300 	strex	r3, r2, [r1]
 800bdc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1e3      	bne.n	800bd90 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2220      	movs	r2, #32
 800bdcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdde:	e853 3f00 	ldrex	r3, [r3]
 800bde2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bde4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bde6:	f023 0310 	bic.w	r3, r3, #16
 800bdea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bdf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800bdfa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bdfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be00:	e841 2300 	strex	r3, r2, [r1]
 800be04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d1e4      	bne.n	800bdd6 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be10:	4618      	mov	r0, r3
 800be12:	f7f6 ff81 	bl	8002d18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be22:	b29b      	uxth	r3, r3
 800be24:	1ad3      	subs	r3, r2, r3
 800be26:	b29b      	uxth	r3, r3
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 f91c 	bl	800c068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be30:	e0fb      	b.n	800c02a <HAL_UART_IRQHandler+0x726>
 800be32:	bf00      	nop
 800be34:	40020010 	.word	0x40020010
 800be38:	40020028 	.word	0x40020028
 800be3c:	40020040 	.word	0x40020040
 800be40:	40020058 	.word	0x40020058
 800be44:	40020070 	.word	0x40020070
 800be48:	40020088 	.word	0x40020088
 800be4c:	400200a0 	.word	0x400200a0
 800be50:	400200b8 	.word	0x400200b8
 800be54:	40020410 	.word	0x40020410
 800be58:	40020428 	.word	0x40020428
 800be5c:	40020440 	.word	0x40020440
 800be60:	40020458 	.word	0x40020458
 800be64:	40020470 	.word	0x40020470
 800be68:	40020488 	.word	0x40020488
 800be6c:	400204a0 	.word	0x400204a0
 800be70:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be80:	b29b      	uxth	r3, r3
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be8e:	b29b      	uxth	r3, r3
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 80cc 	beq.w	800c02e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800be96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f000 80c7 	beq.w	800c02e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800beae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800beb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	461a      	mov	r2, r3
 800bebe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bec2:	647b      	str	r3, [r7, #68]	; 0x44
 800bec4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e4      	bne.n	800bea0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	3308      	adds	r3, #8
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	e853 3f00 	ldrex	r3, [r3]
 800bee4:	623b      	str	r3, [r7, #32]
   return(result);
 800bee6:	6a3a      	ldr	r2, [r7, #32]
 800bee8:	4b54      	ldr	r3, [pc, #336]	; (800c03c <HAL_UART_IRQHandler+0x738>)
 800beea:	4013      	ands	r3, r2
 800beec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	3308      	adds	r3, #8
 800bef6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800befa:	633a      	str	r2, [r7, #48]	; 0x30
 800befc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf02:	e841 2300 	strex	r3, r2, [r1]
 800bf06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e3      	bne.n	800bed6 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2220      	movs	r2, #32
 800bf12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 0310 	bic.w	r3, r3, #16
 800bf36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf44:	61fb      	str	r3, [r7, #28]
 800bf46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	69fa      	ldr	r2, [r7, #28]
 800bf4c:	e841 2300 	strex	r3, r2, [r1]
 800bf50:	617b      	str	r3, [r7, #20]
   return(result);
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1e4      	bne.n	800bf22 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f882 	bl	800c068 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf64:	e063      	b.n	800c02e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d00e      	beq.n	800bf90 <HAL_UART_IRQHandler+0x68c>
 800bf72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d008      	beq.n	800bf90 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bf86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f001 f83e 	bl	800d00a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf8e:	e051      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bf90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d014      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bf9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d105      	bne.n	800bfb4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bfa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bfac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d008      	beq.n	800bfc6 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d03a      	beq.n	800c032 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	4798      	blx	r3
    }
    return;
 800bfc4:	e035      	b.n	800c032 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bfc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d009      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x6e2>
 800bfd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d003      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 ffe8 	bl	800cfb4 <UART_EndTransmit_IT>
    return;
 800bfe4:	e026      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bfe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d009      	beq.n	800c006 <HAL_UART_IRQHandler+0x702>
 800bff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bff6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f001 f817 	bl	800d032 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c004:	e016      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c00a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d010      	beq.n	800c034 <HAL_UART_IRQHandler+0x730>
 800c012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c016:	2b00      	cmp	r3, #0
 800c018:	da0c      	bge.n	800c034 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 ffff 	bl	800d01e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c020:	e008      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
      return;
 800c022:	bf00      	nop
 800c024:	e006      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
    return;
 800c026:	bf00      	nop
 800c028:	e004      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
      return;
 800c02a:	bf00      	nop
 800c02c:	e002      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
      return;
 800c02e:	bf00      	nop
 800c030:	e000      	b.n	800c034 <HAL_UART_IRQHandler+0x730>
    return;
 800c032:	bf00      	nop
  }
}
 800c034:	37e8      	adds	r7, #232	; 0xe8
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	effffffe 	.word	0xeffffffe

0800c040 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c040:	b480      	push	{r7}
 800c042:	b083      	sub	sp, #12
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c048:	bf00      	nop
 800c04a:	370c      	adds	r7, #12
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c084:	b092      	sub	sp, #72	; 0x48
 800c086:	af00      	add	r7, sp, #0
 800c088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	689a      	ldr	r2, [r3, #8]
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	431a      	orrs	r2, r3
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	431a      	orrs	r2, r3
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	69db      	ldr	r3, [r3, #28]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	4bbe      	ldr	r3, [pc, #760]	; (800c3a8 <UART_SetConfig+0x328>)
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	6812      	ldr	r2, [r2, #0]
 800c0b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0b8:	430b      	orrs	r3, r1
 800c0ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	699b      	ldr	r3, [r3, #24]
 800c0d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4ab3      	ldr	r2, [pc, #716]	; (800c3ac <UART_SetConfig+0x32c>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d004      	beq.n	800c0ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	689a      	ldr	r2, [r3, #8]
 800c0f2:	4baf      	ldr	r3, [pc, #700]	; (800c3b0 <UART_SetConfig+0x330>)
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	6812      	ldr	r2, [r2, #0]
 800c0fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0fc:	430b      	orrs	r3, r1
 800c0fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c106:	f023 010f 	bic.w	r1, r3, #15
 800c10a:	697b      	ldr	r3, [r7, #20]
 800c10c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	430a      	orrs	r2, r1
 800c114:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4aa6      	ldr	r2, [pc, #664]	; (800c3b4 <UART_SetConfig+0x334>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d177      	bne.n	800c210 <UART_SetConfig+0x190>
 800c120:	4ba5      	ldr	r3, [pc, #660]	; (800c3b8 <UART_SetConfig+0x338>)
 800c122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c128:	2b28      	cmp	r3, #40	; 0x28
 800c12a:	d86d      	bhi.n	800c208 <UART_SetConfig+0x188>
 800c12c:	a201      	add	r2, pc, #4	; (adr r2, 800c134 <UART_SetConfig+0xb4>)
 800c12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c132:	bf00      	nop
 800c134:	0800c1d9 	.word	0x0800c1d9
 800c138:	0800c209 	.word	0x0800c209
 800c13c:	0800c209 	.word	0x0800c209
 800c140:	0800c209 	.word	0x0800c209
 800c144:	0800c209 	.word	0x0800c209
 800c148:	0800c209 	.word	0x0800c209
 800c14c:	0800c209 	.word	0x0800c209
 800c150:	0800c209 	.word	0x0800c209
 800c154:	0800c1e1 	.word	0x0800c1e1
 800c158:	0800c209 	.word	0x0800c209
 800c15c:	0800c209 	.word	0x0800c209
 800c160:	0800c209 	.word	0x0800c209
 800c164:	0800c209 	.word	0x0800c209
 800c168:	0800c209 	.word	0x0800c209
 800c16c:	0800c209 	.word	0x0800c209
 800c170:	0800c209 	.word	0x0800c209
 800c174:	0800c1e9 	.word	0x0800c1e9
 800c178:	0800c209 	.word	0x0800c209
 800c17c:	0800c209 	.word	0x0800c209
 800c180:	0800c209 	.word	0x0800c209
 800c184:	0800c209 	.word	0x0800c209
 800c188:	0800c209 	.word	0x0800c209
 800c18c:	0800c209 	.word	0x0800c209
 800c190:	0800c209 	.word	0x0800c209
 800c194:	0800c1f1 	.word	0x0800c1f1
 800c198:	0800c209 	.word	0x0800c209
 800c19c:	0800c209 	.word	0x0800c209
 800c1a0:	0800c209 	.word	0x0800c209
 800c1a4:	0800c209 	.word	0x0800c209
 800c1a8:	0800c209 	.word	0x0800c209
 800c1ac:	0800c209 	.word	0x0800c209
 800c1b0:	0800c209 	.word	0x0800c209
 800c1b4:	0800c1f9 	.word	0x0800c1f9
 800c1b8:	0800c209 	.word	0x0800c209
 800c1bc:	0800c209 	.word	0x0800c209
 800c1c0:	0800c209 	.word	0x0800c209
 800c1c4:	0800c209 	.word	0x0800c209
 800c1c8:	0800c209 	.word	0x0800c209
 800c1cc:	0800c209 	.word	0x0800c209
 800c1d0:	0800c209 	.word	0x0800c209
 800c1d4:	0800c201 	.word	0x0800c201
 800c1d8:	2301      	movs	r3, #1
 800c1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1de:	e222      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c1e0:	2304      	movs	r3, #4
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e21e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c1e8:	2308      	movs	r3, #8
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e21a      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c1f0:	2310      	movs	r3, #16
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e216      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c1f8:	2320      	movs	r3, #32
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e212      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c200:	2340      	movs	r3, #64	; 0x40
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e20e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c208:	2380      	movs	r3, #128	; 0x80
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e20a      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a69      	ldr	r2, [pc, #420]	; (800c3bc <UART_SetConfig+0x33c>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d130      	bne.n	800c27c <UART_SetConfig+0x1fc>
 800c21a:	4b67      	ldr	r3, [pc, #412]	; (800c3b8 <UART_SetConfig+0x338>)
 800c21c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c21e:	f003 0307 	and.w	r3, r3, #7
 800c222:	2b05      	cmp	r3, #5
 800c224:	d826      	bhi.n	800c274 <UART_SetConfig+0x1f4>
 800c226:	a201      	add	r2, pc, #4	; (adr r2, 800c22c <UART_SetConfig+0x1ac>)
 800c228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c22c:	0800c245 	.word	0x0800c245
 800c230:	0800c24d 	.word	0x0800c24d
 800c234:	0800c255 	.word	0x0800c255
 800c238:	0800c25d 	.word	0x0800c25d
 800c23c:	0800c265 	.word	0x0800c265
 800c240:	0800c26d 	.word	0x0800c26d
 800c244:	2300      	movs	r3, #0
 800c246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24a:	e1ec      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c24c:	2304      	movs	r3, #4
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e1e8      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c254:	2308      	movs	r3, #8
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e1e4      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c25c:	2310      	movs	r3, #16
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e1e0      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c264:	2320      	movs	r3, #32
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e1dc      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c26c:	2340      	movs	r3, #64	; 0x40
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e1d8      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c274:	2380      	movs	r3, #128	; 0x80
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e1d4      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	4a4f      	ldr	r2, [pc, #316]	; (800c3c0 <UART_SetConfig+0x340>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d130      	bne.n	800c2e8 <UART_SetConfig+0x268>
 800c286:	4b4c      	ldr	r3, [pc, #304]	; (800c3b8 <UART_SetConfig+0x338>)
 800c288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c28a:	f003 0307 	and.w	r3, r3, #7
 800c28e:	2b05      	cmp	r3, #5
 800c290:	d826      	bhi.n	800c2e0 <UART_SetConfig+0x260>
 800c292:	a201      	add	r2, pc, #4	; (adr r2, 800c298 <UART_SetConfig+0x218>)
 800c294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c298:	0800c2b1 	.word	0x0800c2b1
 800c29c:	0800c2b9 	.word	0x0800c2b9
 800c2a0:	0800c2c1 	.word	0x0800c2c1
 800c2a4:	0800c2c9 	.word	0x0800c2c9
 800c2a8:	0800c2d1 	.word	0x0800c2d1
 800c2ac:	0800c2d9 	.word	0x0800c2d9
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2b6:	e1b6      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2b8:	2304      	movs	r3, #4
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e1b2      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2c0:	2308      	movs	r3, #8
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e1ae      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2c8:	2310      	movs	r3, #16
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e1aa      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2d0:	2320      	movs	r3, #32
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e1a6      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2d8:	2340      	movs	r3, #64	; 0x40
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2de:	e1a2      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2e0:	2380      	movs	r3, #128	; 0x80
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e19e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	4a35      	ldr	r2, [pc, #212]	; (800c3c4 <UART_SetConfig+0x344>)
 800c2ee:	4293      	cmp	r3, r2
 800c2f0:	d130      	bne.n	800c354 <UART_SetConfig+0x2d4>
 800c2f2:	4b31      	ldr	r3, [pc, #196]	; (800c3b8 <UART_SetConfig+0x338>)
 800c2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2f6:	f003 0307 	and.w	r3, r3, #7
 800c2fa:	2b05      	cmp	r3, #5
 800c2fc:	d826      	bhi.n	800c34c <UART_SetConfig+0x2cc>
 800c2fe:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <UART_SetConfig+0x284>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c31d 	.word	0x0800c31d
 800c308:	0800c325 	.word	0x0800c325
 800c30c:	0800c32d 	.word	0x0800c32d
 800c310:	0800c335 	.word	0x0800c335
 800c314:	0800c33d 	.word	0x0800c33d
 800c318:	0800c345 	.word	0x0800c345
 800c31c:	2300      	movs	r3, #0
 800c31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c322:	e180      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c324:	2304      	movs	r3, #4
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e17c      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c32c:	2308      	movs	r3, #8
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e178      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c334:	2310      	movs	r3, #16
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e174      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c33c:	2320      	movs	r3, #32
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c342:	e170      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c344:	2340      	movs	r3, #64	; 0x40
 800c346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34a:	e16c      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c34c:	2380      	movs	r3, #128	; 0x80
 800c34e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c352:	e168      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a1b      	ldr	r2, [pc, #108]	; (800c3c8 <UART_SetConfig+0x348>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d142      	bne.n	800c3e4 <UART_SetConfig+0x364>
 800c35e:	4b16      	ldr	r3, [pc, #88]	; (800c3b8 <UART_SetConfig+0x338>)
 800c360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c362:	f003 0307 	and.w	r3, r3, #7
 800c366:	2b05      	cmp	r3, #5
 800c368:	d838      	bhi.n	800c3dc <UART_SetConfig+0x35c>
 800c36a:	a201      	add	r2, pc, #4	; (adr r2, 800c370 <UART_SetConfig+0x2f0>)
 800c36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c370:	0800c389 	.word	0x0800c389
 800c374:	0800c391 	.word	0x0800c391
 800c378:	0800c399 	.word	0x0800c399
 800c37c:	0800c3a1 	.word	0x0800c3a1
 800c380:	0800c3cd 	.word	0x0800c3cd
 800c384:	0800c3d5 	.word	0x0800c3d5
 800c388:	2300      	movs	r3, #0
 800c38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c38e:	e14a      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c390:	2304      	movs	r3, #4
 800c392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c396:	e146      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c398:	2308      	movs	r3, #8
 800c39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39e:	e142      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c3a0:	2310      	movs	r3, #16
 800c3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a6:	e13e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c3a8:	cfff69f3 	.word	0xcfff69f3
 800c3ac:	58000c00 	.word	0x58000c00
 800c3b0:	11fff4ff 	.word	0x11fff4ff
 800c3b4:	40011000 	.word	0x40011000
 800c3b8:	58024400 	.word	0x58024400
 800c3bc:	40004400 	.word	0x40004400
 800c3c0:	40004800 	.word	0x40004800
 800c3c4:	40004c00 	.word	0x40004c00
 800c3c8:	40005000 	.word	0x40005000
 800c3cc:	2320      	movs	r3, #32
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e128      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c3d4:	2340      	movs	r3, #64	; 0x40
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3da:	e124      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c3dc:	2380      	movs	r3, #128	; 0x80
 800c3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3e2:	e120      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4acb      	ldr	r2, [pc, #812]	; (800c718 <UART_SetConfig+0x698>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d176      	bne.n	800c4dc <UART_SetConfig+0x45c>
 800c3ee:	4bcb      	ldr	r3, [pc, #812]	; (800c71c <UART_SetConfig+0x69c>)
 800c3f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3f6:	2b28      	cmp	r3, #40	; 0x28
 800c3f8:	d86c      	bhi.n	800c4d4 <UART_SetConfig+0x454>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <UART_SetConfig+0x380>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c4a5 	.word	0x0800c4a5
 800c404:	0800c4d5 	.word	0x0800c4d5
 800c408:	0800c4d5 	.word	0x0800c4d5
 800c40c:	0800c4d5 	.word	0x0800c4d5
 800c410:	0800c4d5 	.word	0x0800c4d5
 800c414:	0800c4d5 	.word	0x0800c4d5
 800c418:	0800c4d5 	.word	0x0800c4d5
 800c41c:	0800c4d5 	.word	0x0800c4d5
 800c420:	0800c4ad 	.word	0x0800c4ad
 800c424:	0800c4d5 	.word	0x0800c4d5
 800c428:	0800c4d5 	.word	0x0800c4d5
 800c42c:	0800c4d5 	.word	0x0800c4d5
 800c430:	0800c4d5 	.word	0x0800c4d5
 800c434:	0800c4d5 	.word	0x0800c4d5
 800c438:	0800c4d5 	.word	0x0800c4d5
 800c43c:	0800c4d5 	.word	0x0800c4d5
 800c440:	0800c4b5 	.word	0x0800c4b5
 800c444:	0800c4d5 	.word	0x0800c4d5
 800c448:	0800c4d5 	.word	0x0800c4d5
 800c44c:	0800c4d5 	.word	0x0800c4d5
 800c450:	0800c4d5 	.word	0x0800c4d5
 800c454:	0800c4d5 	.word	0x0800c4d5
 800c458:	0800c4d5 	.word	0x0800c4d5
 800c45c:	0800c4d5 	.word	0x0800c4d5
 800c460:	0800c4bd 	.word	0x0800c4bd
 800c464:	0800c4d5 	.word	0x0800c4d5
 800c468:	0800c4d5 	.word	0x0800c4d5
 800c46c:	0800c4d5 	.word	0x0800c4d5
 800c470:	0800c4d5 	.word	0x0800c4d5
 800c474:	0800c4d5 	.word	0x0800c4d5
 800c478:	0800c4d5 	.word	0x0800c4d5
 800c47c:	0800c4d5 	.word	0x0800c4d5
 800c480:	0800c4c5 	.word	0x0800c4c5
 800c484:	0800c4d5 	.word	0x0800c4d5
 800c488:	0800c4d5 	.word	0x0800c4d5
 800c48c:	0800c4d5 	.word	0x0800c4d5
 800c490:	0800c4d5 	.word	0x0800c4d5
 800c494:	0800c4d5 	.word	0x0800c4d5
 800c498:	0800c4d5 	.word	0x0800c4d5
 800c49c:	0800c4d5 	.word	0x0800c4d5
 800c4a0:	0800c4cd 	.word	0x0800c4cd
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4aa:	e0bc      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4ac:	2304      	movs	r3, #4
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b2:	e0b8      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4b4:	2308      	movs	r3, #8
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ba:	e0b4      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4bc:	2310      	movs	r3, #16
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c2:	e0b0      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4c4:	2320      	movs	r3, #32
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ca:	e0ac      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4cc:	2340      	movs	r3, #64	; 0x40
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d2:	e0a8      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4d4:	2380      	movs	r3, #128	; 0x80
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e0a4      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a8f      	ldr	r2, [pc, #572]	; (800c720 <UART_SetConfig+0x6a0>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d130      	bne.n	800c548 <UART_SetConfig+0x4c8>
 800c4e6:	4b8d      	ldr	r3, [pc, #564]	; (800c71c <UART_SetConfig+0x69c>)
 800c4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4ea:	f003 0307 	and.w	r3, r3, #7
 800c4ee:	2b05      	cmp	r3, #5
 800c4f0:	d826      	bhi.n	800c540 <UART_SetConfig+0x4c0>
 800c4f2:	a201      	add	r2, pc, #4	; (adr r2, 800c4f8 <UART_SetConfig+0x478>)
 800c4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4f8:	0800c511 	.word	0x0800c511
 800c4fc:	0800c519 	.word	0x0800c519
 800c500:	0800c521 	.word	0x0800c521
 800c504:	0800c529 	.word	0x0800c529
 800c508:	0800c531 	.word	0x0800c531
 800c50c:	0800c539 	.word	0x0800c539
 800c510:	2300      	movs	r3, #0
 800c512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c516:	e086      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c518:	2304      	movs	r3, #4
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51e:	e082      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c520:	2308      	movs	r3, #8
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c526:	e07e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c528:	2310      	movs	r3, #16
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52e:	e07a      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c530:	2320      	movs	r3, #32
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c536:	e076      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c538:	2340      	movs	r3, #64	; 0x40
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53e:	e072      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c540:	2380      	movs	r3, #128	; 0x80
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c546:	e06e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a75      	ldr	r2, [pc, #468]	; (800c724 <UART_SetConfig+0x6a4>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d130      	bne.n	800c5b4 <UART_SetConfig+0x534>
 800c552:	4b72      	ldr	r3, [pc, #456]	; (800c71c <UART_SetConfig+0x69c>)
 800c554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c556:	f003 0307 	and.w	r3, r3, #7
 800c55a:	2b05      	cmp	r3, #5
 800c55c:	d826      	bhi.n	800c5ac <UART_SetConfig+0x52c>
 800c55e:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <UART_SetConfig+0x4e4>)
 800c560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c564:	0800c57d 	.word	0x0800c57d
 800c568:	0800c585 	.word	0x0800c585
 800c56c:	0800c58d 	.word	0x0800c58d
 800c570:	0800c595 	.word	0x0800c595
 800c574:	0800c59d 	.word	0x0800c59d
 800c578:	0800c5a5 	.word	0x0800c5a5
 800c57c:	2300      	movs	r3, #0
 800c57e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c582:	e050      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c584:	2304      	movs	r3, #4
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58a:	e04c      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c58c:	2308      	movs	r3, #8
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c592:	e048      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c594:	2310      	movs	r3, #16
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59a:	e044      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c59c:	2320      	movs	r3, #32
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a2:	e040      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c5a4:	2340      	movs	r3, #64	; 0x40
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5aa:	e03c      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c5ac:	2380      	movs	r3, #128	; 0x80
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e038      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c5b4:	697b      	ldr	r3, [r7, #20]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a5b      	ldr	r2, [pc, #364]	; (800c728 <UART_SetConfig+0x6a8>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d130      	bne.n	800c620 <UART_SetConfig+0x5a0>
 800c5be:	4b57      	ldr	r3, [pc, #348]	; (800c71c <UART_SetConfig+0x69c>)
 800c5c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5c2:	f003 0307 	and.w	r3, r3, #7
 800c5c6:	2b05      	cmp	r3, #5
 800c5c8:	d826      	bhi.n	800c618 <UART_SetConfig+0x598>
 800c5ca:	a201      	add	r2, pc, #4	; (adr r2, 800c5d0 <UART_SetConfig+0x550>)
 800c5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d0:	0800c5e9 	.word	0x0800c5e9
 800c5d4:	0800c5f1 	.word	0x0800c5f1
 800c5d8:	0800c5f9 	.word	0x0800c5f9
 800c5dc:	0800c601 	.word	0x0800c601
 800c5e0:	0800c609 	.word	0x0800c609
 800c5e4:	0800c611 	.word	0x0800c611
 800c5e8:	2302      	movs	r3, #2
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ee:	e01a      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c5f0:	2304      	movs	r3, #4
 800c5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5f6:	e016      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c5f8:	2308      	movs	r3, #8
 800c5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5fe:	e012      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c600:	2310      	movs	r3, #16
 800c602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c606:	e00e      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c608:	2320      	movs	r3, #32
 800c60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c60e:	e00a      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c610:	2340      	movs	r3, #64	; 0x40
 800c612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c616:	e006      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c618:	2380      	movs	r3, #128	; 0x80
 800c61a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c61e:	e002      	b.n	800c626 <UART_SetConfig+0x5a6>
 800c620:	2380      	movs	r3, #128	; 0x80
 800c622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a3f      	ldr	r2, [pc, #252]	; (800c728 <UART_SetConfig+0x6a8>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	f040 80f8 	bne.w	800c822 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c632:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c636:	2b20      	cmp	r3, #32
 800c638:	dc46      	bgt.n	800c6c8 <UART_SetConfig+0x648>
 800c63a:	2b02      	cmp	r3, #2
 800c63c:	f2c0 8082 	blt.w	800c744 <UART_SetConfig+0x6c4>
 800c640:	3b02      	subs	r3, #2
 800c642:	2b1e      	cmp	r3, #30
 800c644:	d87e      	bhi.n	800c744 <UART_SetConfig+0x6c4>
 800c646:	a201      	add	r2, pc, #4	; (adr r2, 800c64c <UART_SetConfig+0x5cc>)
 800c648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c64c:	0800c6cf 	.word	0x0800c6cf
 800c650:	0800c745 	.word	0x0800c745
 800c654:	0800c6d7 	.word	0x0800c6d7
 800c658:	0800c745 	.word	0x0800c745
 800c65c:	0800c745 	.word	0x0800c745
 800c660:	0800c745 	.word	0x0800c745
 800c664:	0800c6e7 	.word	0x0800c6e7
 800c668:	0800c745 	.word	0x0800c745
 800c66c:	0800c745 	.word	0x0800c745
 800c670:	0800c745 	.word	0x0800c745
 800c674:	0800c745 	.word	0x0800c745
 800c678:	0800c745 	.word	0x0800c745
 800c67c:	0800c745 	.word	0x0800c745
 800c680:	0800c745 	.word	0x0800c745
 800c684:	0800c6f7 	.word	0x0800c6f7
 800c688:	0800c745 	.word	0x0800c745
 800c68c:	0800c745 	.word	0x0800c745
 800c690:	0800c745 	.word	0x0800c745
 800c694:	0800c745 	.word	0x0800c745
 800c698:	0800c745 	.word	0x0800c745
 800c69c:	0800c745 	.word	0x0800c745
 800c6a0:	0800c745 	.word	0x0800c745
 800c6a4:	0800c745 	.word	0x0800c745
 800c6a8:	0800c745 	.word	0x0800c745
 800c6ac:	0800c745 	.word	0x0800c745
 800c6b0:	0800c745 	.word	0x0800c745
 800c6b4:	0800c745 	.word	0x0800c745
 800c6b8:	0800c745 	.word	0x0800c745
 800c6bc:	0800c745 	.word	0x0800c745
 800c6c0:	0800c745 	.word	0x0800c745
 800c6c4:	0800c737 	.word	0x0800c737
 800c6c8:	2b40      	cmp	r3, #64	; 0x40
 800c6ca:	d037      	beq.n	800c73c <UART_SetConfig+0x6bc>
 800c6cc:	e03a      	b.n	800c744 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c6ce:	f7fa fff7 	bl	80076c0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c6d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6d4:	e03c      	b.n	800c750 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fb f806 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e034      	b.n	800c750 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6e6:	f107 0318 	add.w	r3, r7, #24
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fb f952 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f4:	e02c      	b.n	800c750 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6f6:	4b09      	ldr	r3, [pc, #36]	; (800c71c <UART_SetConfig+0x69c>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 0320 	and.w	r3, r3, #32
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d016      	beq.n	800c730 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c702:	4b06      	ldr	r3, [pc, #24]	; (800c71c <UART_SetConfig+0x69c>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	08db      	lsrs	r3, r3, #3
 800c708:	f003 0303 	and.w	r3, r3, #3
 800c70c:	4a07      	ldr	r2, [pc, #28]	; (800c72c <UART_SetConfig+0x6ac>)
 800c70e:	fa22 f303 	lsr.w	r3, r2, r3
 800c712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c714:	e01c      	b.n	800c750 <UART_SetConfig+0x6d0>
 800c716:	bf00      	nop
 800c718:	40011400 	.word	0x40011400
 800c71c:	58024400 	.word	0x58024400
 800c720:	40007800 	.word	0x40007800
 800c724:	40007c00 	.word	0x40007c00
 800c728:	58000c00 	.word	0x58000c00
 800c72c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c730:	4b9d      	ldr	r3, [pc, #628]	; (800c9a8 <UART_SetConfig+0x928>)
 800c732:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c734:	e00c      	b.n	800c750 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c736:	4b9d      	ldr	r3, [pc, #628]	; (800c9ac <UART_SetConfig+0x92c>)
 800c738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c73a:	e009      	b.n	800c750 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c73c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c742:	e005      	b.n	800c750 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c744:	2300      	movs	r3, #0
 800c746:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c748:	2301      	movs	r3, #1
 800c74a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c74e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c752:	2b00      	cmp	r3, #0
 800c754:	f000 81de 	beq.w	800cb14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c75c:	4a94      	ldr	r2, [pc, #592]	; (800c9b0 <UART_SetConfig+0x930>)
 800c75e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c762:	461a      	mov	r2, r3
 800c764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c766:	fbb3 f3f2 	udiv	r3, r3, r2
 800c76a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c778:	429a      	cmp	r2, r3
 800c77a:	d305      	bcc.n	800c788 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c782:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c784:	429a      	cmp	r2, r3
 800c786:	d903      	bls.n	800c790 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c788:	2301      	movs	r3, #1
 800c78a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c78e:	e1c1      	b.n	800cb14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c792:	2200      	movs	r2, #0
 800c794:	60bb      	str	r3, [r7, #8]
 800c796:	60fa      	str	r2, [r7, #12]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79c:	4a84      	ldr	r2, [pc, #528]	; (800c9b0 <UART_SetConfig+0x930>)
 800c79e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c7a2:	b29b      	uxth	r3, r3
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	603b      	str	r3, [r7, #0]
 800c7a8:	607a      	str	r2, [r7, #4]
 800c7aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c7b2:	f7f3 fde5 	bl	8000380 <__aeabi_uldivmod>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	4619      	mov	r1, r3
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	f04f 0300 	mov.w	r3, #0
 800c7c6:	020b      	lsls	r3, r1, #8
 800c7c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c7cc:	0202      	lsls	r2, r0, #8
 800c7ce:	6979      	ldr	r1, [r7, #20]
 800c7d0:	6849      	ldr	r1, [r1, #4]
 800c7d2:	0849      	lsrs	r1, r1, #1
 800c7d4:	2000      	movs	r0, #0
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	4605      	mov	r5, r0
 800c7da:	eb12 0804 	adds.w	r8, r2, r4
 800c7de:	eb43 0905 	adc.w	r9, r3, r5
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	469a      	mov	sl, r3
 800c7ea:	4693      	mov	fp, r2
 800c7ec:	4652      	mov	r2, sl
 800c7ee:	465b      	mov	r3, fp
 800c7f0:	4640      	mov	r0, r8
 800c7f2:	4649      	mov	r1, r9
 800c7f4:	f7f3 fdc4 	bl	8000380 <__aeabi_uldivmod>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	460b      	mov	r3, r1
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c806:	d308      	bcc.n	800c81a <UART_SetConfig+0x79a>
 800c808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c80e:	d204      	bcs.n	800c81a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c816:	60da      	str	r2, [r3, #12]
 800c818:	e17c      	b.n	800cb14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c81a:	2301      	movs	r3, #1
 800c81c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c820:	e178      	b.n	800cb14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c82a:	f040 80c5 	bne.w	800c9b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c82e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c832:	2b20      	cmp	r3, #32
 800c834:	dc48      	bgt.n	800c8c8 <UART_SetConfig+0x848>
 800c836:	2b00      	cmp	r3, #0
 800c838:	db7b      	blt.n	800c932 <UART_SetConfig+0x8b2>
 800c83a:	2b20      	cmp	r3, #32
 800c83c:	d879      	bhi.n	800c932 <UART_SetConfig+0x8b2>
 800c83e:	a201      	add	r2, pc, #4	; (adr r2, 800c844 <UART_SetConfig+0x7c4>)
 800c840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c844:	0800c8cf 	.word	0x0800c8cf
 800c848:	0800c8d7 	.word	0x0800c8d7
 800c84c:	0800c933 	.word	0x0800c933
 800c850:	0800c933 	.word	0x0800c933
 800c854:	0800c8df 	.word	0x0800c8df
 800c858:	0800c933 	.word	0x0800c933
 800c85c:	0800c933 	.word	0x0800c933
 800c860:	0800c933 	.word	0x0800c933
 800c864:	0800c8ef 	.word	0x0800c8ef
 800c868:	0800c933 	.word	0x0800c933
 800c86c:	0800c933 	.word	0x0800c933
 800c870:	0800c933 	.word	0x0800c933
 800c874:	0800c933 	.word	0x0800c933
 800c878:	0800c933 	.word	0x0800c933
 800c87c:	0800c933 	.word	0x0800c933
 800c880:	0800c933 	.word	0x0800c933
 800c884:	0800c8ff 	.word	0x0800c8ff
 800c888:	0800c933 	.word	0x0800c933
 800c88c:	0800c933 	.word	0x0800c933
 800c890:	0800c933 	.word	0x0800c933
 800c894:	0800c933 	.word	0x0800c933
 800c898:	0800c933 	.word	0x0800c933
 800c89c:	0800c933 	.word	0x0800c933
 800c8a0:	0800c933 	.word	0x0800c933
 800c8a4:	0800c933 	.word	0x0800c933
 800c8a8:	0800c933 	.word	0x0800c933
 800c8ac:	0800c933 	.word	0x0800c933
 800c8b0:	0800c933 	.word	0x0800c933
 800c8b4:	0800c933 	.word	0x0800c933
 800c8b8:	0800c933 	.word	0x0800c933
 800c8bc:	0800c933 	.word	0x0800c933
 800c8c0:	0800c933 	.word	0x0800c933
 800c8c4:	0800c925 	.word	0x0800c925
 800c8c8:	2b40      	cmp	r3, #64	; 0x40
 800c8ca:	d02e      	beq.n	800c92a <UART_SetConfig+0x8aa>
 800c8cc:	e031      	b.n	800c932 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c8ce:	f7f9 fab3 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 800c8d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8d4:	e033      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c8d6:	f7f9 fac5 	bl	8005e64 <HAL_RCC_GetPCLK2Freq>
 800c8da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8dc:	e02f      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fa ff02 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ec:	e027      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8ee:	f107 0318 	add.w	r3, r7, #24
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fb f84e 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8fc:	e01f      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8fe:	4b2d      	ldr	r3, [pc, #180]	; (800c9b4 <UART_SetConfig+0x934>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f003 0320 	and.w	r3, r3, #32
 800c906:	2b00      	cmp	r3, #0
 800c908:	d009      	beq.n	800c91e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c90a:	4b2a      	ldr	r3, [pc, #168]	; (800c9b4 <UART_SetConfig+0x934>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	08db      	lsrs	r3, r3, #3
 800c910:	f003 0303 	and.w	r3, r3, #3
 800c914:	4a24      	ldr	r2, [pc, #144]	; (800c9a8 <UART_SetConfig+0x928>)
 800c916:	fa22 f303 	lsr.w	r3, r2, r3
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c91c:	e00f      	b.n	800c93e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c91e:	4b22      	ldr	r3, [pc, #136]	; (800c9a8 <UART_SetConfig+0x928>)
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c922:	e00c      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c924:	4b21      	ldr	r3, [pc, #132]	; (800c9ac <UART_SetConfig+0x92c>)
 800c926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c928:	e009      	b.n	800c93e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c92a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c930:	e005      	b.n	800c93e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c932:	2300      	movs	r3, #0
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c936:	2301      	movs	r3, #1
 800c938:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c93c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c940:	2b00      	cmp	r3, #0
 800c942:	f000 80e7 	beq.w	800cb14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	4a19      	ldr	r2, [pc, #100]	; (800c9b0 <UART_SetConfig+0x930>)
 800c94c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c950:	461a      	mov	r2, r3
 800c952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c954:	fbb3 f3f2 	udiv	r3, r3, r2
 800c958:	005a      	lsls	r2, r3, #1
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	085b      	lsrs	r3, r3, #1
 800c960:	441a      	add	r2, r3
 800c962:	697b      	ldr	r3, [r7, #20]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	fbb2 f3f3 	udiv	r3, r2, r3
 800c96a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96e:	2b0f      	cmp	r3, #15
 800c970:	d916      	bls.n	800c9a0 <UART_SetConfig+0x920>
 800c972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c978:	d212      	bcs.n	800c9a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97c:	b29b      	uxth	r3, r3
 800c97e:	f023 030f 	bic.w	r3, r3, #15
 800c982:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c986:	085b      	lsrs	r3, r3, #1
 800c988:	b29b      	uxth	r3, r3
 800c98a:	f003 0307 	and.w	r3, r3, #7
 800c98e:	b29a      	uxth	r2, r3
 800c990:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c992:	4313      	orrs	r3, r2
 800c994:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c99c:	60da      	str	r2, [r3, #12]
 800c99e:	e0b9      	b.n	800cb14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c9a6:	e0b5      	b.n	800cb14 <UART_SetConfig+0xa94>
 800c9a8:	03d09000 	.word	0x03d09000
 800c9ac:	003d0900 	.word	0x003d0900
 800c9b0:	08013cd0 	.word	0x08013cd0
 800c9b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c9bc:	2b20      	cmp	r3, #32
 800c9be:	dc49      	bgt.n	800ca54 <UART_SetConfig+0x9d4>
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	db7c      	blt.n	800cabe <UART_SetConfig+0xa3e>
 800c9c4:	2b20      	cmp	r3, #32
 800c9c6:	d87a      	bhi.n	800cabe <UART_SetConfig+0xa3e>
 800c9c8:	a201      	add	r2, pc, #4	; (adr r2, 800c9d0 <UART_SetConfig+0x950>)
 800c9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ce:	bf00      	nop
 800c9d0:	0800ca5b 	.word	0x0800ca5b
 800c9d4:	0800ca63 	.word	0x0800ca63
 800c9d8:	0800cabf 	.word	0x0800cabf
 800c9dc:	0800cabf 	.word	0x0800cabf
 800c9e0:	0800ca6b 	.word	0x0800ca6b
 800c9e4:	0800cabf 	.word	0x0800cabf
 800c9e8:	0800cabf 	.word	0x0800cabf
 800c9ec:	0800cabf 	.word	0x0800cabf
 800c9f0:	0800ca7b 	.word	0x0800ca7b
 800c9f4:	0800cabf 	.word	0x0800cabf
 800c9f8:	0800cabf 	.word	0x0800cabf
 800c9fc:	0800cabf 	.word	0x0800cabf
 800ca00:	0800cabf 	.word	0x0800cabf
 800ca04:	0800cabf 	.word	0x0800cabf
 800ca08:	0800cabf 	.word	0x0800cabf
 800ca0c:	0800cabf 	.word	0x0800cabf
 800ca10:	0800ca8b 	.word	0x0800ca8b
 800ca14:	0800cabf 	.word	0x0800cabf
 800ca18:	0800cabf 	.word	0x0800cabf
 800ca1c:	0800cabf 	.word	0x0800cabf
 800ca20:	0800cabf 	.word	0x0800cabf
 800ca24:	0800cabf 	.word	0x0800cabf
 800ca28:	0800cabf 	.word	0x0800cabf
 800ca2c:	0800cabf 	.word	0x0800cabf
 800ca30:	0800cabf 	.word	0x0800cabf
 800ca34:	0800cabf 	.word	0x0800cabf
 800ca38:	0800cabf 	.word	0x0800cabf
 800ca3c:	0800cabf 	.word	0x0800cabf
 800ca40:	0800cabf 	.word	0x0800cabf
 800ca44:	0800cabf 	.word	0x0800cabf
 800ca48:	0800cabf 	.word	0x0800cabf
 800ca4c:	0800cabf 	.word	0x0800cabf
 800ca50:	0800cab1 	.word	0x0800cab1
 800ca54:	2b40      	cmp	r3, #64	; 0x40
 800ca56:	d02e      	beq.n	800cab6 <UART_SetConfig+0xa36>
 800ca58:	e031      	b.n	800cabe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca5a:	f7f9 f9ed 	bl	8005e38 <HAL_RCC_GetPCLK1Freq>
 800ca5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca60:	e033      	b.n	800caca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca62:	f7f9 f9ff 	bl	8005e64 <HAL_RCC_GetPCLK2Freq>
 800ca66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca68:	e02f      	b.n	800caca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fa fe3c 	bl	80076ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca78:	e027      	b.n	800caca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca7a:	f107 0318 	add.w	r3, r7, #24
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7fa ff88 	bl	8007994 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca88:	e01f      	b.n	800caca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca8a:	4b2d      	ldr	r3, [pc, #180]	; (800cb40 <UART_SetConfig+0xac0>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 0320 	and.w	r3, r3, #32
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d009      	beq.n	800caaa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca96:	4b2a      	ldr	r3, [pc, #168]	; (800cb40 <UART_SetConfig+0xac0>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	08db      	lsrs	r3, r3, #3
 800ca9c:	f003 0303 	and.w	r3, r3, #3
 800caa0:	4a28      	ldr	r2, [pc, #160]	; (800cb44 <UART_SetConfig+0xac4>)
 800caa2:	fa22 f303 	lsr.w	r3, r2, r3
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800caa8:	e00f      	b.n	800caca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800caaa:	4b26      	ldr	r3, [pc, #152]	; (800cb44 <UART_SetConfig+0xac4>)
 800caac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caae:	e00c      	b.n	800caca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cab0:	4b25      	ldr	r3, [pc, #148]	; (800cb48 <UART_SetConfig+0xac8>)
 800cab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cab4:	e009      	b.n	800caca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800caba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cabc:	e005      	b.n	800caca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800cabe:	2300      	movs	r3, #0
 800cac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cac2:	2301      	movs	r3, #1
 800cac4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cac8:	bf00      	nop
    }

    if (pclk != 0U)
 800caca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d021      	beq.n	800cb14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cad4:	4a1d      	ldr	r2, [pc, #116]	; (800cb4c <UART_SetConfig+0xacc>)
 800cad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cada:	461a      	mov	r2, r3
 800cadc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cade:	fbb3 f2f2 	udiv	r2, r3, r2
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	085b      	lsrs	r3, r3, #1
 800cae8:	441a      	add	r2, r3
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	fbb2 f3f3 	udiv	r3, r2, r3
 800caf2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	2b0f      	cmp	r3, #15
 800caf8:	d909      	bls.n	800cb0e <UART_SetConfig+0xa8e>
 800cafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb00:	d205      	bcs.n	800cb0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	60da      	str	r2, [r3, #12]
 800cb0c:	e002      	b.n	800cb14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2201      	movs	r2, #1
 800cb20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	2200      	movs	r2, #0
 800cb28:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cb30:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3748      	adds	r7, #72	; 0x48
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb3e:	bf00      	nop
 800cb40:	58024400 	.word	0x58024400
 800cb44:	03d09000 	.word	0x03d09000
 800cb48:	003d0900 	.word	0x003d0900
 800cb4c:	08013cd0 	.word	0x08013cd0

0800cb50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5c:	f003 0301 	and.w	r3, r3, #1
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d00a      	beq.n	800cb7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb7e:	f003 0302 	and.w	r3, r3, #2
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d00a      	beq.n	800cb9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	430a      	orrs	r2, r1
 800cb9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d00a      	beq.n	800cbbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc2:	f003 0308 	and.w	r3, r3, #8
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	430a      	orrs	r2, r1
 800cbde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe4:	f003 0310 	and.w	r3, r3, #16
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d00a      	beq.n	800cc02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc06:	f003 0320 	and.w	r3, r3, #32
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00a      	beq.n	800cc24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	689b      	ldr	r3, [r3, #8]
 800cc14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	430a      	orrs	r2, r1
 800cc22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d01a      	beq.n	800cc66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	430a      	orrs	r2, r1
 800cc44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc4e:	d10a      	bne.n	800cc66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	430a      	orrs	r2, r1
 800cc64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d00a      	beq.n	800cc88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	430a      	orrs	r2, r1
 800cc86:	605a      	str	r2, [r3, #4]
  }
}
 800cc88:	bf00      	nop
 800cc8a:	370c      	adds	r7, #12
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc92:	4770      	bx	lr

0800cc94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af02      	add	r7, sp, #8
 800cc9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cca4:	f7f5 fb90 	bl	80023c8 <HAL_GetTick>
 800cca8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0308 	and.w	r3, r3, #8
 800ccb4:	2b08      	cmp	r3, #8
 800ccb6:	d10e      	bne.n	800ccd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 f82f 	bl	800cd2a <UART_WaitOnFlagUntilTimeout>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e025      	b.n	800cd22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 0304 	and.w	r3, r3, #4
 800cce0:	2b04      	cmp	r3, #4
 800cce2:	d10e      	bne.n	800cd02 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cce8:	9300      	str	r3, [sp, #0]
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2200      	movs	r2, #0
 800ccee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 f819 	bl	800cd2a <UART_WaitOnFlagUntilTimeout>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d001      	beq.n	800cd02 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e00f      	b.n	800cd22 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2220      	movs	r2, #32
 800cd06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2220      	movs	r2, #32
 800cd0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2200      	movs	r2, #0
 800cd16:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd20:	2300      	movs	r3, #0
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3710      	adds	r7, #16
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b09c      	sub	sp, #112	; 0x70
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	603b      	str	r3, [r7, #0]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd3a:	e0a9      	b.n	800ce90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd42:	f000 80a5 	beq.w	800ce90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd46:	f7f5 fb3f 	bl	80023c8 <HAL_GetTick>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	1ad3      	subs	r3, r2, r3
 800cd50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d302      	bcc.n	800cd5c <UART_WaitOnFlagUntilTimeout+0x32>
 800cd56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d140      	bne.n	800cdde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd64:	e853 3f00 	ldrex	r3, [r3]
 800cd68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cd70:	667b      	str	r3, [r7, #100]	; 0x64
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	461a      	mov	r2, r3
 800cd78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cd80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cd82:	e841 2300 	strex	r3, r2, [r1]
 800cd86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cd88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d1e6      	bne.n	800cd5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3308      	adds	r3, #8
 800cd94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd98:	e853 3f00 	ldrex	r3, [r3]
 800cd9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda0:	f023 0301 	bic.w	r3, r3, #1
 800cda4:	663b      	str	r3, [r7, #96]	; 0x60
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	3308      	adds	r3, #8
 800cdac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cdae:	64ba      	str	r2, [r7, #72]	; 0x48
 800cdb0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cdb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cdb6:	e841 2300 	strex	r3, r2, [r1]
 800cdba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cdbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e5      	bne.n	800cd8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2220      	movs	r2, #32
 800cdc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2220      	movs	r2, #32
 800cdce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cdda:	2303      	movs	r3, #3
 800cddc:	e069      	b.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 0304 	and.w	r3, r3, #4
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d051      	beq.n	800ce90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	69db      	ldr	r3, [r3, #28]
 800cdf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cdf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cdfa:	d149      	bne.n	800ce90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce0e:	e853 3f00 	ldrex	r3, [r3]
 800ce12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ce1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	461a      	mov	r2, r3
 800ce22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce24:	637b      	str	r3, [r7, #52]	; 0x34
 800ce26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce2c:	e841 2300 	strex	r3, r2, [r1]
 800ce30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ce32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1e6      	bne.n	800ce06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	3308      	adds	r3, #8
 800ce3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	e853 3f00 	ldrex	r3, [r3]
 800ce46:	613b      	str	r3, [r7, #16]
   return(result);
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	f023 0301 	bic.w	r3, r3, #1
 800ce4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3308      	adds	r3, #8
 800ce56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ce58:	623a      	str	r2, [r7, #32]
 800ce5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5c:	69f9      	ldr	r1, [r7, #28]
 800ce5e:	6a3a      	ldr	r2, [r7, #32]
 800ce60:	e841 2300 	strex	r3, r2, [r1]
 800ce64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce66:	69bb      	ldr	r3, [r7, #24]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1e5      	bne.n	800ce38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	2220      	movs	r2, #32
 800ce70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	2220      	movs	r2, #32
 800ce78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2220      	movs	r2, #32
 800ce80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2200      	movs	r2, #0
 800ce88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ce8c:	2303      	movs	r3, #3
 800ce8e:	e010      	b.n	800ceb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	69da      	ldr	r2, [r3, #28]
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	4013      	ands	r3, r2
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	bf0c      	ite	eq
 800cea0:	2301      	moveq	r3, #1
 800cea2:	2300      	movne	r3, #0
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	461a      	mov	r2, r3
 800cea8:	79fb      	ldrb	r3, [r7, #7]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	f43f af46 	beq.w	800cd3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ceb0:	2300      	movs	r3, #0
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3770      	adds	r7, #112	; 0x70
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
	...

0800cebc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b095      	sub	sp, #84	; 0x54
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cecc:	e853 3f00 	ldrex	r3, [r3]
 800ced0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ced8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	461a      	mov	r2, r3
 800cee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cee2:	643b      	str	r3, [r7, #64]	; 0x40
 800cee4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cee8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ceea:	e841 2300 	strex	r3, r2, [r1]
 800ceee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1e6      	bne.n	800cec4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3308      	adds	r3, #8
 800cefc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	e853 3f00 	ldrex	r3, [r3]
 800cf04:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf06:	69fa      	ldr	r2, [r7, #28]
 800cf08:	4b1e      	ldr	r3, [pc, #120]	; (800cf84 <UART_EndRxTransfer+0xc8>)
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	3308      	adds	r3, #8
 800cf14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf1e:	e841 2300 	strex	r3, r2, [r1]
 800cf22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d1e5      	bne.n	800cef6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d118      	bne.n	800cf64 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	e853 3f00 	ldrex	r3, [r3]
 800cf3e:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f023 0310 	bic.w	r3, r3, #16
 800cf46:	647b      	str	r3, [r7, #68]	; 0x44
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	461a      	mov	r2, r3
 800cf4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf50:	61bb      	str	r3, [r7, #24]
 800cf52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf54:	6979      	ldr	r1, [r7, #20]
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	e841 2300 	strex	r3, r2, [r1]
 800cf5c:	613b      	str	r3, [r7, #16]
   return(result);
 800cf5e:	693b      	ldr	r3, [r7, #16]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d1e6      	bne.n	800cf32 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	2220      	movs	r2, #32
 800cf68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	671a      	str	r2, [r3, #112]	; 0x70
}
 800cf78:	bf00      	nop
 800cf7a:	3754      	adds	r7, #84	; 0x54
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf82:	4770      	bx	lr
 800cf84:	effffffe 	.word	0xeffffffe

0800cf88 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cfa6:	68f8      	ldr	r0, [r7, #12]
 800cfa8:	f7ff f854 	bl	800c054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cfac:	bf00      	nop
 800cfae:	3710      	adds	r7, #16
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bd80      	pop	{r7, pc}

0800cfb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	e853 3f00 	ldrex	r3, [r3]
 800cfc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfca:	68bb      	ldr	r3, [r7, #8]
 800cfcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfd0:	61fb      	str	r3, [r7, #28]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	69fb      	ldr	r3, [r7, #28]
 800cfda:	61bb      	str	r3, [r7, #24]
 800cfdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfde:	6979      	ldr	r1, [r7, #20]
 800cfe0:	69ba      	ldr	r2, [r7, #24]
 800cfe2:	e841 2300 	strex	r3, r2, [r1]
 800cfe6:	613b      	str	r3, [r7, #16]
   return(result);
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d1e6      	bne.n	800cfbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2220      	movs	r2, #32
 800cff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff f81f 	bl	800c040 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d002:	bf00      	nop
 800d004:	3720      	adds	r7, #32
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d00a:	b480      	push	{r7}
 800d00c:	b083      	sub	sp, #12
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d012:	bf00      	nop
 800d014:	370c      	adds	r7, #12
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr

0800d01e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d01e:	b480      	push	{r7}
 800d020:	b083      	sub	sp, #12
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d026:	bf00      	nop
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d03a:	bf00      	nop
 800d03c:	370c      	adds	r7, #12
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d054:	2b01      	cmp	r3, #1
 800d056:	d101      	bne.n	800d05c <HAL_UARTEx_DisableFifoMode+0x16>
 800d058:	2302      	movs	r3, #2
 800d05a:	e027      	b.n	800d0ac <HAL_UARTEx_DisableFifoMode+0x66>
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2201      	movs	r2, #1
 800d060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2224      	movs	r2, #36	; 0x24
 800d068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 0201 	bic.w	r2, r2, #1
 800d082:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d08a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2220      	movs	r2, #32
 800d09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d101      	bne.n	800d0d0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d0cc:	2302      	movs	r3, #2
 800d0ce:	e02d      	b.n	800d12c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2224      	movs	r2, #36	; 0x24
 800d0dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f022 0201 	bic.w	r2, r2, #1
 800d0f6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	683a      	ldr	r2, [r7, #0]
 800d108:	430a      	orrs	r2, r1
 800d10a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f84f 	bl	800d1b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2220      	movs	r2, #32
 800d11e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2200      	movs	r2, #0
 800d126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d144:	2b01      	cmp	r3, #1
 800d146:	d101      	bne.n	800d14c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d148:	2302      	movs	r3, #2
 800d14a:	e02d      	b.n	800d1a8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2224      	movs	r2, #36	; 0x24
 800d158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f022 0201 	bic.w	r2, r2, #1
 800d172:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	689b      	ldr	r3, [r3, #8]
 800d17a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	430a      	orrs	r2, r1
 800d186:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f811 	bl	800d1b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68fa      	ldr	r2, [r7, #12]
 800d194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2220      	movs	r2, #32
 800d19a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d1a6:	2300      	movs	r3, #0
}
 800d1a8:	4618      	mov	r0, r3
 800d1aa:	3710      	adds	r7, #16
 800d1ac:	46bd      	mov	sp, r7
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d108      	bne.n	800d1d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d1d0:	e031      	b.n	800d236 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d1d2:	2310      	movs	r3, #16
 800d1d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d1d6:	2310      	movs	r3, #16
 800d1d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	0e5b      	lsrs	r3, r3, #25
 800d1e2:	b2db      	uxtb	r3, r3
 800d1e4:	f003 0307 	and.w	r3, r3, #7
 800d1e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	689b      	ldr	r3, [r3, #8]
 800d1f0:	0f5b      	lsrs	r3, r3, #29
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1fa:	7bbb      	ldrb	r3, [r7, #14]
 800d1fc:	7b3a      	ldrb	r2, [r7, #12]
 800d1fe:	4911      	ldr	r1, [pc, #68]	; (800d244 <UARTEx_SetNbDataToProcess+0x94>)
 800d200:	5c8a      	ldrb	r2, [r1, r2]
 800d202:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d206:	7b3a      	ldrb	r2, [r7, #12]
 800d208:	490f      	ldr	r1, [pc, #60]	; (800d248 <UARTEx_SetNbDataToProcess+0x98>)
 800d20a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d20c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d210:	b29a      	uxth	r2, r3
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d218:	7bfb      	ldrb	r3, [r7, #15]
 800d21a:	7b7a      	ldrb	r2, [r7, #13]
 800d21c:	4909      	ldr	r1, [pc, #36]	; (800d244 <UARTEx_SetNbDataToProcess+0x94>)
 800d21e:	5c8a      	ldrb	r2, [r1, r2]
 800d220:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d224:	7b7a      	ldrb	r2, [r7, #13]
 800d226:	4908      	ldr	r1, [pc, #32]	; (800d248 <UARTEx_SetNbDataToProcess+0x98>)
 800d228:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d22a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d22e:	b29a      	uxth	r2, r3
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d236:	bf00      	nop
 800d238:	3714      	adds	r7, #20
 800d23a:	46bd      	mov	sp, r7
 800d23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d240:	4770      	bx	lr
 800d242:	bf00      	nop
 800d244:	08013ce8 	.word	0x08013ce8
 800d248:	08013cf0 	.word	0x08013cf0

0800d24c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d24c:	b084      	sub	sp, #16
 800d24e:	b480      	push	{r7}
 800d250:	b085      	sub	sp, #20
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	f107 001c 	add.w	r0, r7, #28
 800d25a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d262:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d264:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d266:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800d26a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800d26e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800d272:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685a      	ldr	r2, [r3, #4]
 800d27e:	4b07      	ldr	r3, [pc, #28]	; (800d29c <SDMMC_Init+0x50>)
 800d280:	4013      	ands	r3, r2
 800d282:	68fa      	ldr	r2, [r7, #12]
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d28a:	2300      	movs	r3, #0
}
 800d28c:	4618      	mov	r0, r3
 800d28e:	3714      	adds	r7, #20
 800d290:	46bd      	mov	sp, r7
 800d292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d296:	b004      	add	sp, #16
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	ffc02c00 	.word	0xffc02c00

0800d2a0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	370c      	adds	r7, #12
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr

0800d2ba <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d2ba:	b480      	push	{r7}
 800d2bc:	b083      	sub	sp, #12
 800d2be:	af00      	add	r7, sp, #0
 800d2c0:	6078      	str	r0, [r7, #4]
 800d2c2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d2ce:	2300      	movs	r3, #0
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr

0800d2dc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	b083      	sub	sp, #12
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f043 0203 	orr.w	r2, r3, #3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	370c      	adds	r7, #12
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b083      	sub	sp, #12
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f003 0303 	and.w	r3, r3, #3
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
	...

0800d31c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d31c:	b480      	push	{r7}
 800d31e:	b085      	sub	sp, #20
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	681a      	ldr	r2, [r3, #0]
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d33a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d340:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d346:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	68da      	ldr	r2, [r3, #12]
 800d352:	4b06      	ldr	r3, [pc, #24]	; (800d36c <SDMMC_SendCommand+0x50>)
 800d354:	4013      	ands	r3, r2
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	431a      	orrs	r2, r3
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	3714      	adds	r7, #20
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr
 800d36c:	fffee0c0 	.word	0xfffee0c0

0800d370 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	b2db      	uxtb	r3, r3
}
 800d37e:	4618      	mov	r0, r3
 800d380:	370c      	adds	r7, #12
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d38a:	b480      	push	{r7}
 800d38c:	b085      	sub	sp, #20
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
 800d392:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3314      	adds	r3, #20
 800d398:	461a      	mov	r2, r3
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	4413      	add	r3, r2
 800d39e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3714      	adds	r7, #20
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b085      	sub	sp, #20
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
 800d3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	685a      	ldr	r2, [r3, #4]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d3d6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d3dc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d3e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d3fa:	2300      	movs	r3, #0

}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr

0800d408 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b088      	sub	sp, #32
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
 800d410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d416:	2310      	movs	r3, #16
 800d418:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d41a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d41e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d420:	2300      	movs	r3, #0
 800d422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f7ff ff73 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d436:	f241 3288 	movw	r2, #5000	; 0x1388
 800d43a:	2110      	movs	r1, #16
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fa5f 	bl	800d900 <SDMMC_GetCmdResp1>
 800d442:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d444:	69fb      	ldr	r3, [r7, #28]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3720      	adds	r7, #32
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}

0800d44e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b088      	sub	sp, #32
 800d452:	af00      	add	r7, sp, #0
 800d454:	6078      	str	r0, [r7, #4]
 800d456:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d45c:	2311      	movs	r3, #17
 800d45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d460:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d466:	2300      	movs	r3, #0
 800d468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d46e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d470:	f107 0308 	add.w	r3, r7, #8
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7ff ff50 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d47c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d480:	2111      	movs	r1, #17
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 fa3c 	bl	800d900 <SDMMC_GetCmdResp1>
 800d488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d48a:	69fb      	ldr	r3, [r7, #28]
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3720      	adds	r7, #32
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b088      	sub	sp, #32
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d4a2:	2312      	movs	r3, #18
 800d4a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4b6:	f107 0308 	add.w	r3, r7, #8
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7ff ff2d 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4c6:	2112      	movs	r1, #18
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 fa19 	bl	800d900 <SDMMC_GetCmdResp1>
 800d4ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3720      	adds	r7, #32
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b088      	sub	sp, #32
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d4e8:	2318      	movs	r3, #24
 800d4ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d4f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4fc:	f107 0308 	add.w	r3, r7, #8
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff ff0a 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d508:	f241 3288 	movw	r2, #5000	; 0x1388
 800d50c:	2118      	movs	r1, #24
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 f9f6 	bl	800d900 <SDMMC_GetCmdResp1>
 800d514:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d516:	69fb      	ldr	r3, [r7, #28]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3720      	adds	r7, #32
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}

0800d520 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b088      	sub	sp, #32
 800d524:	af00      	add	r7, sp, #0
 800d526:	6078      	str	r0, [r7, #4]
 800d528:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d52e:	2319      	movs	r3, #25
 800d530:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d532:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d536:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d538:	2300      	movs	r3, #0
 800d53a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d53c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d540:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d542:	f107 0308 	add.w	r3, r7, #8
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff fee7 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d552:	2119      	movs	r1, #25
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f9d3 	bl	800d900 <SDMMC_GetCmdResp1>
 800d55a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d55c:	69fb      	ldr	r3, [r7, #28]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3720      	adds	r7, #32
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
	...

0800d568 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b088      	sub	sp, #32
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d570:	2300      	movs	r3, #0
 800d572:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d574:	230c      	movs	r3, #12
 800d576:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d57c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d57e:	2300      	movs	r3, #0
 800d580:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d586:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5a0:	f107 0308 	add.w	r3, r7, #8
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7ff feb8 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d5ac:	4a0b      	ldr	r2, [pc, #44]	; (800d5dc <SDMMC_CmdStopTransfer+0x74>)
 800d5ae:	210c      	movs	r1, #12
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f9a5 	bl	800d900 <SDMMC_GetCmdResp1>
 800d5b6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	68db      	ldr	r3, [r3, #12]
 800d5bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d5c4:	69fb      	ldr	r3, [r7, #28]
 800d5c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d5ca:	d101      	bne.n	800d5d0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d5d0:	69fb      	ldr	r3, [r7, #28]
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3720      	adds	r7, #32
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	05f5e100 	.word	0x05f5e100

0800d5e0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b088      	sub	sp, #32
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d5ee:	2307      	movs	r3, #7
 800d5f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d600:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d602:	f107 0308 	add.w	r3, r7, #8
 800d606:	4619      	mov	r1, r3
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f7ff fe87 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d612:	2107      	movs	r1, #7
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 f973 	bl	800d900 <SDMMC_GetCmdResp1>
 800d61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d61c:	69fb      	ldr	r3, [r7, #28]
}
 800d61e:	4618      	mov	r0, r3
 800d620:	3720      	adds	r7, #32
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b088      	sub	sp, #32
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d62e:	2300      	movs	r3, #0
 800d630:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d632:	2300      	movs	r3, #0
 800d634:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d636:	2300      	movs	r3, #0
 800d638:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d63a:	2300      	movs	r3, #0
 800d63c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d63e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d642:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d644:	f107 0308 	add.w	r3, r7, #8
 800d648:	4619      	mov	r1, r3
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff fe66 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fb97 	bl	800dd84 <SDMMC_GetCmdError>
 800d656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d658:	69fb      	ldr	r3, [r7, #28]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3720      	adds	r7, #32
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b088      	sub	sp, #32
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d66a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d66e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d670:	2308      	movs	r3, #8
 800d672:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d674:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d67a:	2300      	movs	r3, #0
 800d67c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d67e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d682:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d684:	f107 0308 	add.w	r3, r7, #8
 800d688:	4619      	mov	r1, r3
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff fe46 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fb29 	bl	800dce8 <SDMMC_GetCmdResp7>
 800d696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d698:	69fb      	ldr	r3, [r7, #28]
}
 800d69a:	4618      	mov	r0, r3
 800d69c:	3720      	adds	r7, #32
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6a2:	b580      	push	{r7, lr}
 800d6a4:	b088      	sub	sp, #32
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
 800d6aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d6b0:	2337      	movs	r3, #55	; 0x37
 800d6b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6c4:	f107 0308 	add.w	r3, r7, #8
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7ff fe26 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d4:	2137      	movs	r1, #55	; 0x37
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 f912 	bl	800d900 <SDMMC_GetCmdResp1>
 800d6dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6de:	69fb      	ldr	r3, [r7, #28]
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3720      	adds	r7, #32
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}

0800d6e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b088      	sub	sp, #32
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d6f6:	2329      	movs	r3, #41	; 0x29
 800d6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d6fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d6fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d700:	2300      	movs	r3, #0
 800d702:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d708:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d70a:	f107 0308 	add.w	r3, r7, #8
 800d70e:	4619      	mov	r1, r3
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f7ff fe03 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fa2e 	bl	800db78 <SDMMC_GetCmdResp3>
 800d71c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d71e:	69fb      	ldr	r3, [r7, #28]
}
 800d720:	4618      	mov	r0, r3
 800d722:	3720      	adds	r7, #32
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d736:	2306      	movs	r3, #6
 800d738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d73a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d73e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d740:	2300      	movs	r3, #0
 800d742:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d748:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d74a:	f107 0308 	add.w	r3, r7, #8
 800d74e:	4619      	mov	r1, r3
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f7ff fde3 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d756:	f241 3288 	movw	r2, #5000	; 0x1388
 800d75a:	2106      	movs	r1, #6
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 f8cf 	bl	800d900 <SDMMC_GetCmdResp1>
 800d762:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d764:	69fb      	ldr	r3, [r7, #28]
}
 800d766:	4618      	mov	r0, r3
 800d768:	3720      	adds	r7, #32
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b088      	sub	sp, #32
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d776:	2300      	movs	r3, #0
 800d778:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d77a:	2333      	movs	r3, #51	; 0x33
 800d77c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d77e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d782:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d784:	2300      	movs	r3, #0
 800d786:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d78c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d78e:	f107 0308 	add.w	r3, r7, #8
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff fdc1 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d79a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d79e:	2133      	movs	r1, #51	; 0x33
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 f8ad 	bl	800d900 <SDMMC_GetCmdResp1>
 800d7a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3720      	adds	r7, #32
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b088      	sub	sp, #32
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d7be:	2302      	movs	r3, #2
 800d7c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d7c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d7c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d7d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7d2:	f107 0308 	add.w	r3, r7, #8
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f7ff fd9f 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 f980 	bl	800dae4 <SDMMC_GetCmdResp2>
 800d7e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e6:	69fb      	ldr	r3, [r7, #28]
}
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	3720      	adds	r7, #32
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	bd80      	pop	{r7, pc}

0800d7f0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b088      	sub	sp, #32
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d7fe:	2309      	movs	r3, #9
 800d800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d802:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d806:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d808:	2300      	movs	r3, #0
 800d80a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d80c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d810:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d812:	f107 0308 	add.w	r3, r7, #8
 800d816:	4619      	mov	r1, r3
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff fd7f 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f960 	bl	800dae4 <SDMMC_GetCmdResp2>
 800d824:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d826:	69fb      	ldr	r3, [r7, #28]
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3720      	adds	r7, #32
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}

0800d830 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b088      	sub	sp, #32
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
 800d838:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d83a:	2300      	movs	r3, #0
 800d83c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d83e:	2303      	movs	r3, #3
 800d840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d842:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d848:	2300      	movs	r3, #0
 800d84a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d84c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d850:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d852:	f107 0308 	add.w	r3, r7, #8
 800d856:	4619      	mov	r1, r3
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f7ff fd5f 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d85e:	683a      	ldr	r2, [r7, #0]
 800d860:	2103      	movs	r1, #3
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f000 f9c8 	bl	800dbf8 <SDMMC_GetCmdResp6>
 800d868:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d86a:	69fb      	ldr	r3, [r7, #28]
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3720      	adds	r7, #32
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}

0800d874 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d882:	230d      	movs	r3, #13
 800d884:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d88a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d88c:	2300      	movs	r3, #0
 800d88e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d894:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d896:	f107 0308 	add.w	r3, r7, #8
 800d89a:	4619      	mov	r1, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f7ff fd3d 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d8a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8a6:	210d      	movs	r1, #13
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f829 	bl	800d900 <SDMMC_GetCmdResp1>
 800d8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8b0:	69fb      	ldr	r3, [r7, #28]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3720      	adds	r7, #32
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b088      	sub	sp, #32
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d8c6:	230d      	movs	r3, #13
 800d8c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d8ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d8d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d8da:	f107 0308 	add.w	r3, r7, #8
 800d8de:	4619      	mov	r1, r3
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fd1b 	bl	800d31c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d8e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8ea:	210d      	movs	r1, #13
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 f807 	bl	800d900 <SDMMC_GetCmdResp1>
 800d8f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8f4:	69fb      	ldr	r3, [r7, #28]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3720      	adds	r7, #32
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b088      	sub	sp, #32
 800d904:	af00      	add	r7, sp, #0
 800d906:	60f8      	str	r0, [r7, #12]
 800d908:	460b      	mov	r3, r1
 800d90a:	607a      	str	r2, [r7, #4]
 800d90c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d90e:	4b70      	ldr	r3, [pc, #448]	; (800dad0 <SDMMC_GetCmdResp1+0x1d0>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	4a70      	ldr	r2, [pc, #448]	; (800dad4 <SDMMC_GetCmdResp1+0x1d4>)
 800d914:	fba2 2303 	umull	r2, r3, r2, r3
 800d918:	0a5a      	lsrs	r2, r3, #9
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	fb02 f303 	mul.w	r3, r2, r3
 800d920:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d922:	69fb      	ldr	r3, [r7, #28]
 800d924:	1e5a      	subs	r2, r3, #1
 800d926:	61fa      	str	r2, [r7, #28]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d102      	bne.n	800d932 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d92c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d930:	e0c9      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d936:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	4b67      	ldr	r3, [pc, #412]	; (800dad8 <SDMMC_GetCmdResp1+0x1d8>)
 800d93c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0ef      	beq.n	800d922 <SDMMC_GetCmdResp1+0x22>
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d1ea      	bne.n	800d922 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d950:	f003 0304 	and.w	r3, r3, #4
 800d954:	2b00      	cmp	r3, #0
 800d956:	d004      	beq.n	800d962 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2204      	movs	r2, #4
 800d95c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d95e:	2304      	movs	r3, #4
 800d960:	e0b1      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d004      	beq.n	800d978 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	2201      	movs	r2, #1
 800d972:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d974:	2301      	movs	r3, #1
 800d976:	e0a6      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	4a58      	ldr	r2, [pc, #352]	; (800dadc <SDMMC_GetCmdResp1+0x1dc>)
 800d97c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d97e:	68f8      	ldr	r0, [r7, #12]
 800d980:	f7ff fcf6 	bl	800d370 <SDMMC_GetCommandResponse>
 800d984:	4603      	mov	r3, r0
 800d986:	461a      	mov	r2, r3
 800d988:	7afb      	ldrb	r3, [r7, #11]
 800d98a:	4293      	cmp	r3, r2
 800d98c:	d001      	beq.n	800d992 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d98e:	2301      	movs	r3, #1
 800d990:	e099      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d992:	2100      	movs	r1, #0
 800d994:	68f8      	ldr	r0, [r7, #12]
 800d996:	f7ff fcf8 	bl	800d38a <SDMMC_GetResponse>
 800d99a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d99c:	697a      	ldr	r2, [r7, #20]
 800d99e:	4b50      	ldr	r3, [pc, #320]	; (800dae0 <SDMMC_GetCmdResp1+0x1e0>)
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d101      	bne.n	800d9aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	e08d      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da02      	bge.n	800d9b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d9b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d9b4:	e087      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d001      	beq.n	800d9c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d9c0:	2340      	movs	r3, #64	; 0x40
 800d9c2:	e080      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d001      	beq.n	800d9d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d9ce:	2380      	movs	r3, #128	; 0x80
 800d9d0:	e079      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d002      	beq.n	800d9e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d9dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d9e0:	e071      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d002      	beq.n	800d9f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d9ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d9f0:	e069      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d9f2:	697b      	ldr	r3, [r7, #20]
 800d9f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d9fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da00:	e061      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d002      	beq.n	800da12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800da0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800da10:	e059      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d002      	beq.n	800da22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800da1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800da20:	e051      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d002      	beq.n	800da32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800da2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800da30:	e049      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d002      	beq.n	800da42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800da3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800da40:	e041      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800da4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da50:	e039      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800da5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800da60:	e031      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d002      	beq.n	800da72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800da6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800da70:	e029      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d002      	beq.n	800da82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800da7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800da80:	e021      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d002      	beq.n	800da92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800da8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800da90:	e019      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d002      	beq.n	800daa2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800da9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800daa0:	e011      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d002      	beq.n	800dab2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800daac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dab0:	e009      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	f003 0308 	and.w	r3, r3, #8
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800dabc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800dac0:	e001      	b.n	800dac6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3720      	adds	r7, #32
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	24000000 	.word	0x24000000
 800dad4:	10624dd3 	.word	0x10624dd3
 800dad8:	00200045 	.word	0x00200045
 800dadc:	002000c5 	.word	0x002000c5
 800dae0:	fdffe008 	.word	0xfdffe008

0800dae4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800daec:	4b1f      	ldr	r3, [pc, #124]	; (800db6c <SDMMC_GetCmdResp2+0x88>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4a1f      	ldr	r2, [pc, #124]	; (800db70 <SDMMC_GetCmdResp2+0x8c>)
 800daf2:	fba2 2303 	umull	r2, r3, r2, r3
 800daf6:	0a5b      	lsrs	r3, r3, #9
 800daf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800dafc:	fb02 f303 	mul.w	r3, r2, r3
 800db00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	1e5a      	subs	r2, r3, #1
 800db06:	60fa      	str	r2, [r7, #12]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d102      	bne.n	800db12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800db10:	e026      	b.n	800db60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db16:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d0ef      	beq.n	800db02 <SDMMC_GetCmdResp2+0x1e>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1ea      	bne.n	800db02 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db30:	f003 0304 	and.w	r3, r3, #4
 800db34:	2b00      	cmp	r3, #0
 800db36:	d004      	beq.n	800db42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2204      	movs	r2, #4
 800db3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db3e:	2304      	movs	r3, #4
 800db40:	e00e      	b.n	800db60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db46:	f003 0301 	and.w	r3, r3, #1
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d004      	beq.n	800db58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2201      	movs	r2, #1
 800db52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db54:	2301      	movs	r3, #1
 800db56:	e003      	b.n	800db60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	4a06      	ldr	r2, [pc, #24]	; (800db74 <SDMMC_GetCmdResp2+0x90>)
 800db5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800db5e:	2300      	movs	r3, #0
}
 800db60:	4618      	mov	r0, r3
 800db62:	3714      	adds	r7, #20
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	24000000 	.word	0x24000000
 800db70:	10624dd3 	.word	0x10624dd3
 800db74:	002000c5 	.word	0x002000c5

0800db78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800db80:	4b1a      	ldr	r3, [pc, #104]	; (800dbec <SDMMC_GetCmdResp3+0x74>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	4a1a      	ldr	r2, [pc, #104]	; (800dbf0 <SDMMC_GetCmdResp3+0x78>)
 800db86:	fba2 2303 	umull	r2, r3, r2, r3
 800db8a:	0a5b      	lsrs	r3, r3, #9
 800db8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800db90:	fb02 f303 	mul.w	r3, r2, r3
 800db94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	1e5a      	subs	r2, r3, #1
 800db9a:	60fa      	str	r2, [r7, #12]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d102      	bne.n	800dba6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dba0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dba4:	e01b      	b.n	800dbde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbaa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d0ef      	beq.n	800db96 <SDMMC_GetCmdResp3+0x1e>
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1ea      	bne.n	800db96 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc4:	f003 0304 	and.w	r3, r3, #4
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d004      	beq.n	800dbd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2204      	movs	r2, #4
 800dbd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbd2:	2304      	movs	r3, #4
 800dbd4:	e003      	b.n	800dbde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	4a06      	ldr	r2, [pc, #24]	; (800dbf4 <SDMMC_GetCmdResp3+0x7c>)
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dbdc:	2300      	movs	r3, #0
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3714      	adds	r7, #20
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	24000000 	.word	0x24000000
 800dbf0:	10624dd3 	.word	0x10624dd3
 800dbf4:	002000c5 	.word	0x002000c5

0800dbf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b088      	sub	sp, #32
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	60f8      	str	r0, [r7, #12]
 800dc00:	460b      	mov	r3, r1
 800dc02:	607a      	str	r2, [r7, #4]
 800dc04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dc06:	4b35      	ldr	r3, [pc, #212]	; (800dcdc <SDMMC_GetCmdResp6+0xe4>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a35      	ldr	r2, [pc, #212]	; (800dce0 <SDMMC_GetCmdResp6+0xe8>)
 800dc0c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc10:	0a5b      	lsrs	r3, r3, #9
 800dc12:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc16:	fb02 f303 	mul.w	r3, r2, r3
 800dc1a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	1e5a      	subs	r2, r3, #1
 800dc20:	61fa      	str	r2, [r7, #28]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d102      	bne.n	800dc2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc2a:	e052      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc30:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d0ef      	beq.n	800dc1c <SDMMC_GetCmdResp6+0x24>
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d1ea      	bne.n	800dc1c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d004      	beq.n	800dc5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2204      	movs	r2, #4
 800dc56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc58:	2304      	movs	r3, #4
 800dc5a:	e03a      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc60:	f003 0301 	and.w	r3, r3, #1
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d004      	beq.n	800dc72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e02f      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800dc72:	68f8      	ldr	r0, [r7, #12]
 800dc74:	f7ff fb7c 	bl	800d370 <SDMMC_GetCommandResponse>
 800dc78:	4603      	mov	r3, r0
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	7afb      	ldrb	r3, [r7, #11]
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d001      	beq.n	800dc86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc82:	2301      	movs	r3, #1
 800dc84:	e025      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	4a16      	ldr	r2, [pc, #88]	; (800dce4 <SDMMC_GetCmdResp6+0xec>)
 800dc8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f7ff fb7b 	bl	800d38a <SDMMC_GetResponse>
 800dc94:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d106      	bne.n	800dcae <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	0c1b      	lsrs	r3, r3, #16
 800dca4:	b29a      	uxth	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e011      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d002      	beq.n	800dcbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dcb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dcbc:	e009      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dcbe:	697b      	ldr	r3, [r7, #20]
 800dcc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d002      	beq.n	800dcce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dcc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dccc:	e001      	b.n	800dcd2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dcce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3720      	adds	r7, #32
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	24000000 	.word	0x24000000
 800dce0:	10624dd3 	.word	0x10624dd3
 800dce4:	002000c5 	.word	0x002000c5

0800dce8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dcf0:	4b22      	ldr	r3, [pc, #136]	; (800dd7c <SDMMC_GetCmdResp7+0x94>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a22      	ldr	r2, [pc, #136]	; (800dd80 <SDMMC_GetCmdResp7+0x98>)
 800dcf6:	fba2 2303 	umull	r2, r3, r2, r3
 800dcfa:	0a5b      	lsrs	r3, r3, #9
 800dcfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd00:	fb02 f303 	mul.w	r3, r2, r3
 800dd04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	1e5a      	subs	r2, r3, #1
 800dd0a:	60fa      	str	r2, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d102      	bne.n	800dd16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd14:	e02c      	b.n	800dd70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0ef      	beq.n	800dd06 <SDMMC_GetCmdResp7+0x1e>
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d1ea      	bne.n	800dd06 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd34:	f003 0304 	and.w	r3, r3, #4
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d004      	beq.n	800dd46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2204      	movs	r2, #4
 800dd40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dd42:	2304      	movs	r3, #4
 800dd44:	e014      	b.n	800dd70 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d004      	beq.n	800dd5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	2201      	movs	r2, #1
 800dd56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd58:	2301      	movs	r3, #1
 800dd5a:	e009      	b.n	800dd70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d002      	beq.n	800dd6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2240      	movs	r2, #64	; 0x40
 800dd6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dd6e:	2300      	movs	r3, #0

}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3714      	adds	r7, #20
 800dd74:	46bd      	mov	sp, r7
 800dd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7a:	4770      	bx	lr
 800dd7c:	24000000 	.word	0x24000000
 800dd80:	10624dd3 	.word	0x10624dd3

0800dd84 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dd84:	b480      	push	{r7}
 800dd86:	b085      	sub	sp, #20
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dd8c:	4b11      	ldr	r3, [pc, #68]	; (800ddd4 <SDMMC_GetCmdError+0x50>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a11      	ldr	r2, [pc, #68]	; (800ddd8 <SDMMC_GetCmdError+0x54>)
 800dd92:	fba2 2303 	umull	r2, r3, r2, r3
 800dd96:	0a5b      	lsrs	r3, r3, #9
 800dd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd9c:	fb02 f303 	mul.w	r3, r2, r3
 800dda0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	1e5a      	subs	r2, r3, #1
 800dda6:	60fa      	str	r2, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d102      	bne.n	800ddb2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ddac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ddb0:	e009      	b.n	800ddc6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0f1      	beq.n	800dda2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	4a06      	ldr	r2, [pc, #24]	; (800dddc <SDMMC_GetCmdError+0x58>)
 800ddc2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ddc4:	2300      	movs	r3, #0
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	3714      	adds	r7, #20
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop
 800ddd4:	24000000 	.word	0x24000000
 800ddd8:	10624dd3 	.word	0x10624dd3
 800dddc:	002000c5 	.word	0x002000c5

0800dde0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800dde4:	4904      	ldr	r1, [pc, #16]	; (800ddf8 <MX_FATFS_Init+0x18>)
 800dde6:	4805      	ldr	r0, [pc, #20]	; (800ddfc <MX_FATFS_Init+0x1c>)
 800dde8:	f004 fc04 	bl	80125f4 <FATFS_LinkDriver>
 800ddec:	4603      	mov	r3, r0
 800ddee:	461a      	mov	r2, r3
 800ddf0:	4b03      	ldr	r3, [pc, #12]	; (800de00 <MX_FATFS_Init+0x20>)
 800ddf2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ddf4:	bf00      	nop
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	240003a0 	.word	0x240003a0
 800ddfc:	08013cf8 	.word	0x08013cf8
 800de00:	2400039c 	.word	0x2400039c

0800de04 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800de04:	b480      	push	{r7}
 800de06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800de08:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de1a:	2300      	movs	r3, #0
 800de1c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de1e:	f000 f89b 	bl	800df58 <BSP_SD_IsDetected>
 800de22:	4603      	mov	r3, r0
 800de24:	2b01      	cmp	r3, #1
 800de26:	d001      	beq.n	800de2c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800de28:	2302      	movs	r3, #2
 800de2a:	e012      	b.n	800de52 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800de2c:	480b      	ldr	r0, [pc, #44]	; (800de5c <BSP_SD_Init+0x48>)
 800de2e:	f7fa f9bb 	bl	80081a8 <HAL_SD_Init>
 800de32:	4603      	mov	r3, r0
 800de34:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800de36:	79fb      	ldrb	r3, [r7, #7]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d109      	bne.n	800de50 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800de3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800de40:	4806      	ldr	r0, [pc, #24]	; (800de5c <BSP_SD_Init+0x48>)
 800de42:	f7fb fa33 	bl	80092ac <HAL_SD_ConfigWideBusOperation>
 800de46:	4603      	mov	r3, r0
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800de4c:	2301      	movs	r3, #1
 800de4e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800de50:	79fb      	ldrb	r3, [r7, #7]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	240000c4 	.word	0x240000c4

0800de60 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b088      	sub	sp, #32
 800de64:	af02      	add	r7, sp, #8
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800de6e:	2300      	movs	r3, #0
 800de70:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	68f9      	ldr	r1, [r7, #12]
 800de7c:	4806      	ldr	r0, [pc, #24]	; (800de98 <BSP_SD_ReadBlocks+0x38>)
 800de7e:	f7fa faad 	bl	80083dc <HAL_SD_ReadBlocks>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d001      	beq.n	800de8c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800de8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3718      	adds	r7, #24
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	240000c4 	.word	0x240000c4

0800de9c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b088      	sub	sp, #32
 800dea0:	af02      	add	r7, sp, #8
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
 800dea8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800deaa:	2300      	movs	r3, #0
 800deac:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	9300      	str	r3, [sp, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	68f9      	ldr	r1, [r7, #12]
 800deb8:	4806      	ldr	r0, [pc, #24]	; (800ded4 <BSP_SD_WriteBlocks+0x38>)
 800deba:	f7fa fc19 	bl	80086f0 <HAL_SD_WriteBlocks>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d001      	beq.n	800dec8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dec4:	2301      	movs	r3, #1
 800dec6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dec8:	7dfb      	ldrb	r3, [r7, #23]
}
 800deca:	4618      	mov	r0, r3
 800decc:	3718      	adds	r7, #24
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	240000c4 	.word	0x240000c4

0800ded8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800dedc:	4805      	ldr	r0, [pc, #20]	; (800def4 <BSP_SD_GetCardState+0x1c>)
 800dede:	f7fb faf7 	bl	80094d0 <HAL_SD_GetCardState>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b04      	cmp	r3, #4
 800dee6:	bf14      	ite	ne
 800dee8:	2301      	movne	r3, #1
 800deea:	2300      	moveq	r3, #0
 800deec:	b2db      	uxtb	r3, r3
}
 800deee:	4618      	mov	r0, r3
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	240000c4 	.word	0x240000c4

0800def8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800df00:	6879      	ldr	r1, [r7, #4]
 800df02:	4803      	ldr	r0, [pc, #12]	; (800df10 <BSP_SD_GetCardInfo+0x18>)
 800df04:	f7fb f9a6 	bl	8009254 <HAL_SD_GetCardInfo>
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	240000c4 	.word	0x240000c4

0800df14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b082      	sub	sp, #8
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800df1c:	f000 f80e 	bl	800df3c <BSP_SD_WriteCpltCallback>
}
 800df20:	bf00      	nop
 800df22:	3708      	adds	r7, #8
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800df30:	f000 f80b 	bl	800df4a <BSP_SD_ReadCpltCallback>
}
 800df34:	bf00      	nop
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0

}
 800df40:	bf00      	nop
 800df42:	46bd      	mov	sp, r7
 800df44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df48:	4770      	bx	lr

0800df4a <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800df4a:	b480      	push	{r7}
 800df4c:	af00      	add	r7, sp, #0

}
 800df4e:	bf00      	nop
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800df5e:	2301      	movs	r3, #1
 800df60:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	b2db      	uxtb	r3, r3
}
 800df66:	4618      	mov	r0, r3
 800df68:	370c      	adds	r7, #12
 800df6a:	46bd      	mov	sp, r7
 800df6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df70:	4770      	bx	lr
	...

0800df74 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b082      	sub	sp, #8
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800df7e:	4b0b      	ldr	r3, [pc, #44]	; (800dfac <SD_CheckStatus+0x38>)
 800df80:	2201      	movs	r2, #1
 800df82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800df84:	f7ff ffa8 	bl	800ded8 <BSP_SD_GetCardState>
 800df88:	4603      	mov	r3, r0
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d107      	bne.n	800df9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800df8e:	4b07      	ldr	r3, [pc, #28]	; (800dfac <SD_CheckStatus+0x38>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f023 0301 	bic.w	r3, r3, #1
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	4b04      	ldr	r3, [pc, #16]	; (800dfac <SD_CheckStatus+0x38>)
 800df9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800df9e:	4b03      	ldr	r3, [pc, #12]	; (800dfac <SD_CheckStatus+0x38>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	b2db      	uxtb	r3, r3
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3708      	adds	r7, #8
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}
 800dfac:	2400000d 	.word	0x2400000d

0800dfb0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dfba:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <SD_initialize+0x38>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dfc0:	f7ff ff28 	bl	800de14 <BSP_SD_Init>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d107      	bne.n	800dfda <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dfca:	79fb      	ldrb	r3, [r7, #7]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff ffd1 	bl	800df74 <SD_CheckStatus>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	4b04      	ldr	r3, [pc, #16]	; (800dfe8 <SD_initialize+0x38>)
 800dfd8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dfda:	4b03      	ldr	r3, [pc, #12]	; (800dfe8 <SD_initialize+0x38>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b2db      	uxtb	r3, r3
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	2400000d 	.word	0x2400000d

0800dfec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7ff ffbb 	bl	800df74 <SD_CheckStatus>
 800dffe:	4603      	mov	r3, r0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3708      	adds	r7, #8
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b086      	sub	sp, #24
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
 800e012:	603b      	str	r3, [r7, #0]
 800e014:	4603      	mov	r3, r0
 800e016:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e018:	2301      	movs	r3, #1
 800e01a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800e01c:	f04f 33ff 	mov.w	r3, #4294967295
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	6879      	ldr	r1, [r7, #4]
 800e024:	68b8      	ldr	r0, [r7, #8]
 800e026:	f7ff ff1b 	bl	800de60 <BSP_SD_ReadBlocks>
 800e02a:	4603      	mov	r3, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d107      	bne.n	800e040 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800e030:	bf00      	nop
 800e032:	f7ff ff51 	bl	800ded8 <BSP_SD_GetCardState>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d1fa      	bne.n	800e032 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800e03c:	2300      	movs	r3, #0
 800e03e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e040:	7dfb      	ldrb	r3, [r7, #23]
}
 800e042:	4618      	mov	r0, r3
 800e044:	3718      	adds	r7, #24
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}

0800e04a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b086      	sub	sp, #24
 800e04e:	af00      	add	r7, sp, #0
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
 800e054:	603b      	str	r3, [r7, #0]
 800e056:	4603      	mov	r3, r0
 800e058:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e05a:	2301      	movs	r3, #1
 800e05c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800e05e:	f04f 33ff 	mov.w	r3, #4294967295
 800e062:	683a      	ldr	r2, [r7, #0]
 800e064:	6879      	ldr	r1, [r7, #4]
 800e066:	68b8      	ldr	r0, [r7, #8]
 800e068:	f7ff ff18 	bl	800de9c <BSP_SD_WriteBlocks>
 800e06c:	4603      	mov	r3, r0
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d107      	bne.n	800e082 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800e072:	bf00      	nop
 800e074:	f7ff ff30 	bl	800ded8 <BSP_SD_GetCardState>
 800e078:	4603      	mov	r3, r0
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1fa      	bne.n	800e074 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800e07e:	2300      	movs	r3, #0
 800e080:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800e082:	7dfb      	ldrb	r3, [r7, #23]
}
 800e084:	4618      	mov	r0, r3
 800e086:	3718      	adds	r7, #24
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b08c      	sub	sp, #48	; 0x30
 800e090:	af00      	add	r7, sp, #0
 800e092:	4603      	mov	r3, r0
 800e094:	603a      	str	r2, [r7, #0]
 800e096:	71fb      	strb	r3, [r7, #7]
 800e098:	460b      	mov	r3, r1
 800e09a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e0a2:	4b25      	ldr	r3, [pc, #148]	; (800e138 <SD_ioctl+0xac>)
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	b2db      	uxtb	r3, r3
 800e0a8:	f003 0301 	and.w	r3, r3, #1
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <SD_ioctl+0x28>
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e03c      	b.n	800e12e <SD_ioctl+0xa2>

  switch (cmd)
 800e0b4:	79bb      	ldrb	r3, [r7, #6]
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d834      	bhi.n	800e124 <SD_ioctl+0x98>
 800e0ba:	a201      	add	r2, pc, #4	; (adr r2, 800e0c0 <SD_ioctl+0x34>)
 800e0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c0:	0800e0d1 	.word	0x0800e0d1
 800e0c4:	0800e0d9 	.word	0x0800e0d9
 800e0c8:	0800e0f1 	.word	0x0800e0f1
 800e0cc:	0800e10b 	.word	0x0800e10b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0d6:	e028      	b.n	800e12a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0d8:	f107 0308 	add.w	r3, r7, #8
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7ff ff0b 	bl	800def8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e0e2:	6a3a      	ldr	r2, [r7, #32]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e0ee:	e01c      	b.n	800e12a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e0f0:	f107 0308 	add.w	r3, r7, #8
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7ff feff 	bl	800def8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e108:	e00f      	b.n	800e12a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e10a:	f107 0308 	add.w	r3, r7, #8
 800e10e:	4618      	mov	r0, r3
 800e110:	f7ff fef2 	bl	800def8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e116:	0a5a      	lsrs	r2, r3, #9
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e11c:	2300      	movs	r3, #0
 800e11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e122:	e002      	b.n	800e12a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e124:	2304      	movs	r3, #4
 800e126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e12a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3730      	adds	r7, #48	; 0x30
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	2400000d 	.word	0x2400000d

0800e13c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	4603      	mov	r3, r0
 800e144:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e146:	79fb      	ldrb	r3, [r7, #7]
 800e148:	4a08      	ldr	r2, [pc, #32]	; (800e16c <disk_status+0x30>)
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	685b      	ldr	r3, [r3, #4]
 800e152:	79fa      	ldrb	r2, [r7, #7]
 800e154:	4905      	ldr	r1, [pc, #20]	; (800e16c <disk_status+0x30>)
 800e156:	440a      	add	r2, r1
 800e158:	7a12      	ldrb	r2, [r2, #8]
 800e15a:	4610      	mov	r0, r2
 800e15c:	4798      	blx	r3
 800e15e:	4603      	mov	r3, r0
 800e160:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e162:	7bfb      	ldrb	r3, [r7, #15]
}
 800e164:	4618      	mov	r0, r3
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	240028c0 	.word	0x240028c0

0800e170 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b084      	sub	sp, #16
 800e174:	af00      	add	r7, sp, #0
 800e176:	4603      	mov	r3, r0
 800e178:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e17a:	2300      	movs	r3, #0
 800e17c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e17e:	79fb      	ldrb	r3, [r7, #7]
 800e180:	4a0d      	ldr	r2, [pc, #52]	; (800e1b8 <disk_initialize+0x48>)
 800e182:	5cd3      	ldrb	r3, [r2, r3]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d111      	bne.n	800e1ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e188:	79fb      	ldrb	r3, [r7, #7]
 800e18a:	4a0b      	ldr	r2, [pc, #44]	; (800e1b8 <disk_initialize+0x48>)
 800e18c:	2101      	movs	r1, #1
 800e18e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e190:	79fb      	ldrb	r3, [r7, #7]
 800e192:	4a09      	ldr	r2, [pc, #36]	; (800e1b8 <disk_initialize+0x48>)
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4413      	add	r3, r2
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	79fa      	ldrb	r2, [r7, #7]
 800e19e:	4906      	ldr	r1, [pc, #24]	; (800e1b8 <disk_initialize+0x48>)
 800e1a0:	440a      	add	r2, r1
 800e1a2:	7a12      	ldrb	r2, [r2, #8]
 800e1a4:	4610      	mov	r0, r2
 800e1a6:	4798      	blx	r3
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	240028c0 	.word	0x240028c0

0800e1bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b087      	sub	sp, #28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	60b9      	str	r1, [r7, #8]
 800e1c4:	607a      	str	r2, [r7, #4]
 800e1c6:	603b      	str	r3, [r7, #0]
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	4a0a      	ldr	r2, [pc, #40]	; (800e1f8 <disk_read+0x3c>)
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	4413      	add	r3, r2
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	689c      	ldr	r4, [r3, #8]
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
 800e1da:	4a07      	ldr	r2, [pc, #28]	; (800e1f8 <disk_read+0x3c>)
 800e1dc:	4413      	add	r3, r2
 800e1de:	7a18      	ldrb	r0, [r3, #8]
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	68b9      	ldr	r1, [r7, #8]
 800e1e6:	47a0      	blx	r4
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800e1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	371c      	adds	r7, #28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd90      	pop	{r4, r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	240028c0 	.word	0x240028c0

0800e1fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e1fc:	b590      	push	{r4, r7, lr}
 800e1fe:	b087      	sub	sp, #28
 800e200:	af00      	add	r7, sp, #0
 800e202:	60b9      	str	r1, [r7, #8]
 800e204:	607a      	str	r2, [r7, #4]
 800e206:	603b      	str	r3, [r7, #0]
 800e208:	4603      	mov	r3, r0
 800e20a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e20c:	7bfb      	ldrb	r3, [r7, #15]
 800e20e:	4a0a      	ldr	r2, [pc, #40]	; (800e238 <disk_write+0x3c>)
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	4413      	add	r3, r2
 800e214:	685b      	ldr	r3, [r3, #4]
 800e216:	68dc      	ldr	r4, [r3, #12]
 800e218:	7bfb      	ldrb	r3, [r7, #15]
 800e21a:	4a07      	ldr	r2, [pc, #28]	; (800e238 <disk_write+0x3c>)
 800e21c:	4413      	add	r3, r2
 800e21e:	7a18      	ldrb	r0, [r3, #8]
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	68b9      	ldr	r1, [r7, #8]
 800e226:	47a0      	blx	r4
 800e228:	4603      	mov	r3, r0
 800e22a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	371c      	adds	r7, #28
 800e232:	46bd      	mov	sp, r7
 800e234:	bd90      	pop	{r4, r7, pc}
 800e236:	bf00      	nop
 800e238:	240028c0 	.word	0x240028c0

0800e23c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	603a      	str	r2, [r7, #0]
 800e246:	71fb      	strb	r3, [r7, #7]
 800e248:	460b      	mov	r3, r1
 800e24a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e24c:	79fb      	ldrb	r3, [r7, #7]
 800e24e:	4a09      	ldr	r2, [pc, #36]	; (800e274 <disk_ioctl+0x38>)
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	4413      	add	r3, r2
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	79fa      	ldrb	r2, [r7, #7]
 800e25a:	4906      	ldr	r1, [pc, #24]	; (800e274 <disk_ioctl+0x38>)
 800e25c:	440a      	add	r2, r1
 800e25e:	7a10      	ldrb	r0, [r2, #8]
 800e260:	79b9      	ldrb	r1, [r7, #6]
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	4798      	blx	r3
 800e266:	4603      	mov	r3, r0
 800e268:	73fb      	strb	r3, [r7, #15]
  return res;
 800e26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26c:	4618      	mov	r0, r3
 800e26e:	3710      	adds	r7, #16
 800e270:	46bd      	mov	sp, r7
 800e272:	bd80      	pop	{r7, pc}
 800e274:	240028c0 	.word	0x240028c0

0800e278 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e278:	b480      	push	{r7}
 800e27a:	b085      	sub	sp, #20
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3301      	adds	r3, #1
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e288:	89fb      	ldrh	r3, [r7, #14]
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	b21a      	sxth	r2, r3
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	b21b      	sxth	r3, r3
 800e294:	4313      	orrs	r3, r2
 800e296:	b21b      	sxth	r3, r3
 800e298:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e29a:	89fb      	ldrh	r3, [r7, #14]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3714      	adds	r7, #20
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr

0800e2a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	b085      	sub	sp, #20
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	3303      	adds	r3, #3
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	021b      	lsls	r3, r3, #8
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	3202      	adds	r2, #2
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	021b      	lsls	r3, r3, #8
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	3201      	adds	r2, #1
 800e2ce:	7812      	ldrb	r2, [r2, #0]
 800e2d0:	4313      	orrs	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	021b      	lsls	r3, r3, #8
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	7812      	ldrb	r2, [r2, #0]
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	60fb      	str	r3, [r7, #12]
	return rv;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
}
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	3714      	adds	r7, #20
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ec:	4770      	bx	lr

0800e2ee <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800e2ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e2f2:	b09d      	sub	sp, #116	; 0x74
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800e2f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2fa:	3307      	adds	r3, #7
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	2200      	movs	r2, #0
 800e302:	469a      	mov	sl, r3
 800e304:	4693      	mov	fp, r2
 800e306:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800e30a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e30e:	f04f 0000 	mov.w	r0, #0
 800e312:	f04f 0100 	mov.w	r1, #0
 800e316:	0219      	lsls	r1, r3, #8
 800e318:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e31c:	0210      	lsls	r0, r2, #8
 800e31e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e320:	3306      	adds	r3, #6
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2200      	movs	r2, #0
 800e328:	461c      	mov	r4, r3
 800e32a:	4615      	mov	r5, r2
 800e32c:	ea40 0804 	orr.w	r8, r0, r4
 800e330:	ea41 0905 	orr.w	r9, r1, r5
 800e334:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800e338:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e33c:	f04f 0000 	mov.w	r0, #0
 800e340:	f04f 0100 	mov.w	r1, #0
 800e344:	0219      	lsls	r1, r3, #8
 800e346:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e34a:	0210      	lsls	r0, r2, #8
 800e34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e34e:	3305      	adds	r3, #5
 800e350:	781b      	ldrb	r3, [r3, #0]
 800e352:	b2db      	uxtb	r3, r3
 800e354:	2200      	movs	r2, #0
 800e356:	65bb      	str	r3, [r7, #88]	; 0x58
 800e358:	65fa      	str	r2, [r7, #92]	; 0x5c
 800e35a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800e35e:	4623      	mov	r3, r4
 800e360:	4303      	orrs	r3, r0
 800e362:	62bb      	str	r3, [r7, #40]	; 0x28
 800e364:	462b      	mov	r3, r5
 800e366:	430b      	orrs	r3, r1
 800e368:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e36a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800e36e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800e372:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e376:	f04f 0000 	mov.w	r0, #0
 800e37a:	f04f 0100 	mov.w	r1, #0
 800e37e:	0219      	lsls	r1, r3, #8
 800e380:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e384:	0210      	lsls	r0, r2, #8
 800e386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e388:	3304      	adds	r3, #4
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2200      	movs	r2, #0
 800e390:	653b      	str	r3, [r7, #80]	; 0x50
 800e392:	657a      	str	r2, [r7, #84]	; 0x54
 800e394:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800e398:	4623      	mov	r3, r4
 800e39a:	4303      	orrs	r3, r0
 800e39c:	623b      	str	r3, [r7, #32]
 800e39e:	462b      	mov	r3, r5
 800e3a0:	430b      	orrs	r3, r1
 800e3a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e3a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800e3a8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800e3ac:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e3b0:	f04f 0000 	mov.w	r0, #0
 800e3b4:	f04f 0100 	mov.w	r1, #0
 800e3b8:	0219      	lsls	r1, r3, #8
 800e3ba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e3be:	0210      	lsls	r0, r2, #8
 800e3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3c2:	3303      	adds	r3, #3
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	64bb      	str	r3, [r7, #72]	; 0x48
 800e3cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e3ce:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800e3d2:	4623      	mov	r3, r4
 800e3d4:	4303      	orrs	r3, r0
 800e3d6:	61bb      	str	r3, [r7, #24]
 800e3d8:	462b      	mov	r3, r5
 800e3da:	430b      	orrs	r3, r1
 800e3dc:	61fb      	str	r3, [r7, #28]
 800e3de:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e3e2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800e3e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800e3ea:	f04f 0000 	mov.w	r0, #0
 800e3ee:	f04f 0100 	mov.w	r1, #0
 800e3f2:	0219      	lsls	r1, r3, #8
 800e3f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800e3f8:	0210      	lsls	r0, r2, #8
 800e3fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3fc:	3302      	adds	r3, #2
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	b2db      	uxtb	r3, r3
 800e402:	2200      	movs	r2, #0
 800e404:	643b      	str	r3, [r7, #64]	; 0x40
 800e406:	647a      	str	r2, [r7, #68]	; 0x44
 800e408:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800e40c:	4623      	mov	r3, r4
 800e40e:	4303      	orrs	r3, r0
 800e410:	613b      	str	r3, [r7, #16]
 800e412:	462b      	mov	r3, r5
 800e414:	430b      	orrs	r3, r1
 800e416:	617b      	str	r3, [r7, #20]
 800e418:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e41c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800e420:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e424:	f04f 0200 	mov.w	r2, #0
 800e428:	f04f 0300 	mov.w	r3, #0
 800e42c:	020b      	lsls	r3, r1, #8
 800e42e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e432:	0202      	lsls	r2, r0, #8
 800e434:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e436:	3101      	adds	r1, #1
 800e438:	7809      	ldrb	r1, [r1, #0]
 800e43a:	b2c9      	uxtb	r1, r1
 800e43c:	2000      	movs	r0, #0
 800e43e:	63b9      	str	r1, [r7, #56]	; 0x38
 800e440:	63f8      	str	r0, [r7, #60]	; 0x3c
 800e442:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800e446:	4621      	mov	r1, r4
 800e448:	4311      	orrs	r1, r2
 800e44a:	60b9      	str	r1, [r7, #8]
 800e44c:	4629      	mov	r1, r5
 800e44e:	4319      	orrs	r1, r3
 800e450:	60f9      	str	r1, [r7, #12]
 800e452:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e456:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800e45a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e45e:	f04f 0200 	mov.w	r2, #0
 800e462:	f04f 0300 	mov.w	r3, #0
 800e466:	020b      	lsls	r3, r1, #8
 800e468:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e46c:	0202      	lsls	r2, r0, #8
 800e46e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e470:	7809      	ldrb	r1, [r1, #0]
 800e472:	b2c9      	uxtb	r1, r1
 800e474:	2000      	movs	r0, #0
 800e476:	6339      	str	r1, [r7, #48]	; 0x30
 800e478:	6378      	str	r0, [r7, #52]	; 0x34
 800e47a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800e47e:	4621      	mov	r1, r4
 800e480:	4311      	orrs	r1, r2
 800e482:	6039      	str	r1, [r7, #0]
 800e484:	4629      	mov	r1, r5
 800e486:	4319      	orrs	r1, r3
 800e488:	6079      	str	r1, [r7, #4]
 800e48a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e48e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800e492:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800e496:	4610      	mov	r0, r2
 800e498:	4619      	mov	r1, r3
 800e49a:	3774      	adds	r7, #116	; 0x74
 800e49c:	46bd      	mov	sp, r7
 800e49e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e4a2:	4770      	bx	lr

0800e4a4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	607a      	str	r2, [r7, #4]
 800e4b6:	887a      	ldrh	r2, [r7, #2]
 800e4b8:	b2d2      	uxtb	r2, r2
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	887b      	ldrh	r3, [r7, #2]
 800e4be:	0a1b      	lsrs	r3, r3, #8
 800e4c0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	607a      	str	r2, [r7, #4]
 800e4c8:	887a      	ldrh	r2, [r7, #2]
 800e4ca:	b2d2      	uxtb	r2, r2
 800e4cc:	701a      	strb	r2, [r3, #0]
}
 800e4ce:	bf00      	nop
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e4da:	b480      	push	{r7}
 800e4dc:	b083      	sub	sp, #12
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	1c5a      	adds	r2, r3, #1
 800e4e8:	607a      	str	r2, [r7, #4]
 800e4ea:	683a      	ldr	r2, [r7, #0]
 800e4ec:	b2d2      	uxtb	r2, r2
 800e4ee:	701a      	strb	r2, [r3, #0]
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	0a1b      	lsrs	r3, r3, #8
 800e4f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	1c5a      	adds	r2, r3, #1
 800e4fa:	607a      	str	r2, [r7, #4]
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	b2d2      	uxtb	r2, r2
 800e500:	701a      	strb	r2, [r3, #0]
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	0a1b      	lsrs	r3, r3, #8
 800e506:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	1c5a      	adds	r2, r3, #1
 800e50c:	607a      	str	r2, [r7, #4]
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	b2d2      	uxtb	r2, r2
 800e512:	701a      	strb	r2, [r3, #0]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	0a1b      	lsrs	r3, r3, #8
 800e518:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	683a      	ldr	r2, [r7, #0]
 800e522:	b2d2      	uxtb	r2, r2
 800e524:	701a      	strb	r2, [r3, #0]
}
 800e526:	bf00      	nop
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800e532:	b480      	push	{r7}
 800e534:	b085      	sub	sp, #20
 800e536:	af00      	add	r7, sp, #0
 800e538:	60f8      	str	r0, [r7, #12]
 800e53a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	60fa      	str	r2, [r7, #12]
 800e544:	783a      	ldrb	r2, [r7, #0]
 800e546:	701a      	strb	r2, [r3, #0]
 800e548:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e54c:	f04f 0200 	mov.w	r2, #0
 800e550:	f04f 0300 	mov.w	r3, #0
 800e554:	0a02      	lsrs	r2, r0, #8
 800e556:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e55a:	0a0b      	lsrs	r3, r1, #8
 800e55c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	1c5a      	adds	r2, r3, #1
 800e564:	60fa      	str	r2, [r7, #12]
 800e566:	783a      	ldrb	r2, [r7, #0]
 800e568:	701a      	strb	r2, [r3, #0]
 800e56a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e56e:	f04f 0200 	mov.w	r2, #0
 800e572:	f04f 0300 	mov.w	r3, #0
 800e576:	0a02      	lsrs	r2, r0, #8
 800e578:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e57c:	0a0b      	lsrs	r3, r1, #8
 800e57e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	1c5a      	adds	r2, r3, #1
 800e586:	60fa      	str	r2, [r7, #12]
 800e588:	783a      	ldrb	r2, [r7, #0]
 800e58a:	701a      	strb	r2, [r3, #0]
 800e58c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e590:	f04f 0200 	mov.w	r2, #0
 800e594:	f04f 0300 	mov.w	r3, #0
 800e598:	0a02      	lsrs	r2, r0, #8
 800e59a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e59e:	0a0b      	lsrs	r3, r1, #8
 800e5a0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	1c5a      	adds	r2, r3, #1
 800e5a8:	60fa      	str	r2, [r7, #12]
 800e5aa:	783a      	ldrb	r2, [r7, #0]
 800e5ac:	701a      	strb	r2, [r3, #0]
 800e5ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5b2:	f04f 0200 	mov.w	r2, #0
 800e5b6:	f04f 0300 	mov.w	r3, #0
 800e5ba:	0a02      	lsrs	r2, r0, #8
 800e5bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e5c0:	0a0b      	lsrs	r3, r1, #8
 800e5c2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	1c5a      	adds	r2, r3, #1
 800e5ca:	60fa      	str	r2, [r7, #12]
 800e5cc:	783a      	ldrb	r2, [r7, #0]
 800e5ce:	701a      	strb	r2, [r3, #0]
 800e5d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5d4:	f04f 0200 	mov.w	r2, #0
 800e5d8:	f04f 0300 	mov.w	r3, #0
 800e5dc:	0a02      	lsrs	r2, r0, #8
 800e5de:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e5e2:	0a0b      	lsrs	r3, r1, #8
 800e5e4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	60fa      	str	r2, [r7, #12]
 800e5ee:	783a      	ldrb	r2, [r7, #0]
 800e5f0:	701a      	strb	r2, [r3, #0]
 800e5f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e5f6:	f04f 0200 	mov.w	r2, #0
 800e5fa:	f04f 0300 	mov.w	r3, #0
 800e5fe:	0a02      	lsrs	r2, r0, #8
 800e600:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e604:	0a0b      	lsrs	r3, r1, #8
 800e606:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	1c5a      	adds	r2, r3, #1
 800e60e:	60fa      	str	r2, [r7, #12]
 800e610:	783a      	ldrb	r2, [r7, #0]
 800e612:	701a      	strb	r2, [r3, #0]
 800e614:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e618:	f04f 0200 	mov.w	r2, #0
 800e61c:	f04f 0300 	mov.w	r3, #0
 800e620:	0a02      	lsrs	r2, r0, #8
 800e622:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800e626:	0a0b      	lsrs	r3, r1, #8
 800e628:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	1c5a      	adds	r2, r3, #1
 800e630:	60fa      	str	r2, [r7, #12]
 800e632:	783a      	ldrb	r2, [r7, #0]
 800e634:	701a      	strb	r2, [r3, #0]
}
 800e636:	bf00      	nop
 800e638:	3714      	adds	r7, #20
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e642:	b480      	push	{r7}
 800e644:	b087      	sub	sp, #28
 800e646:	af00      	add	r7, sp, #0
 800e648:	60f8      	str	r0, [r7, #12]
 800e64a:	60b9      	str	r1, [r7, #8]
 800e64c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e652:	68bb      	ldr	r3, [r7, #8]
 800e654:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00d      	beq.n	800e678 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e65c:	693a      	ldr	r2, [r7, #16]
 800e65e:	1c53      	adds	r3, r2, #1
 800e660:	613b      	str	r3, [r7, #16]
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	1c59      	adds	r1, r3, #1
 800e666:	6179      	str	r1, [r7, #20]
 800e668:	7812      	ldrb	r2, [r2, #0]
 800e66a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3b01      	subs	r3, #1
 800e670:	607b      	str	r3, [r7, #4]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1f1      	bne.n	800e65c <mem_cpy+0x1a>
	}
}
 800e678:	bf00      	nop
 800e67a:	371c      	adds	r7, #28
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr

0800e684 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e684:	b480      	push	{r7}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	1c5a      	adds	r2, r3, #1
 800e698:	617a      	str	r2, [r7, #20]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	b2d2      	uxtb	r2, r2
 800e69e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	3b01      	subs	r3, #1
 800e6a4:	607b      	str	r3, [r7, #4]
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d1f3      	bne.n	800e694 <mem_set+0x10>
}
 800e6ac:	bf00      	nop
 800e6ae:	bf00      	nop
 800e6b0:	371c      	adds	r7, #28
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b8:	4770      	bx	lr

0800e6ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6ba:	b480      	push	{r7}
 800e6bc:	b089      	sub	sp, #36	; 0x24
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	60f8      	str	r0, [r7, #12]
 800e6c2:	60b9      	str	r1, [r7, #8]
 800e6c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	61fb      	str	r3, [r7, #28]
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	61fa      	str	r2, [r7, #28]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	4619      	mov	r1, r3
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	1c5a      	adds	r2, r3, #1
 800e6e0:	61ba      	str	r2, [r7, #24]
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	1acb      	subs	r3, r1, r3
 800e6e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	3b01      	subs	r3, #1
 800e6ec:	607b      	str	r3, [r7, #4]
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d002      	beq.n	800e6fa <mem_cmp+0x40>
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d0eb      	beq.n	800e6d2 <mem_cmp+0x18>

	return r;
 800e6fa:	697b      	ldr	r3, [r7, #20]
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3724      	adds	r7, #36	; 0x24
 800e700:	46bd      	mov	sp, r7
 800e702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e706:	4770      	bx	lr

0800e708 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e708:	b480      	push	{r7}
 800e70a:	b083      	sub	sp, #12
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	6078      	str	r0, [r7, #4]
 800e710:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e712:	e002      	b.n	800e71a <chk_chr+0x12>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	3301      	adds	r3, #1
 800e718:	607b      	str	r3, [r7, #4]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <chk_chr+0x26>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	781b      	ldrb	r3, [r3, #0]
 800e726:	461a      	mov	r2, r3
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d1f2      	bne.n	800e714 <chk_chr+0xc>
	return *str;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	781b      	ldrb	r3, [r3, #0]
}
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
	...

0800e740 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e740:	b480      	push	{r7}
 800e742:	b085      	sub	sp, #20
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e74a:	2300      	movs	r3, #0
 800e74c:	60bb      	str	r3, [r7, #8]
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	60fb      	str	r3, [r7, #12]
 800e752:	e029      	b.n	800e7a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e754:	4a27      	ldr	r2, [pc, #156]	; (800e7f4 <chk_lock+0xb4>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	011b      	lsls	r3, r3, #4
 800e75a:	4413      	add	r3, r2
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d01d      	beq.n	800e79e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e762:	4a24      	ldr	r2, [pc, #144]	; (800e7f4 <chk_lock+0xb4>)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	011b      	lsls	r3, r3, #4
 800e768:	4413      	add	r3, r2
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	429a      	cmp	r2, r3
 800e772:	d116      	bne.n	800e7a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e774:	4a1f      	ldr	r2, [pc, #124]	; (800e7f4 <chk_lock+0xb4>)
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	011b      	lsls	r3, r3, #4
 800e77a:	4413      	add	r3, r2
 800e77c:	3304      	adds	r3, #4
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e784:	429a      	cmp	r2, r3
 800e786:	d10c      	bne.n	800e7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e788:	4a1a      	ldr	r2, [pc, #104]	; (800e7f4 <chk_lock+0xb4>)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	011b      	lsls	r3, r3, #4
 800e78e:	4413      	add	r3, r2
 800e790:	3308      	adds	r3, #8
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800e798:	429a      	cmp	r2, r3
 800e79a:	d102      	bne.n	800e7a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e79c:	e007      	b.n	800e7ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e79e:	2301      	movs	r3, #1
 800e7a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d9d2      	bls.n	800e754 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2b02      	cmp	r3, #2
 800e7b2:	d109      	bne.n	800e7c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d102      	bne.n	800e7c0 <chk_lock+0x80>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b02      	cmp	r3, #2
 800e7be:	d101      	bne.n	800e7c4 <chk_lock+0x84>
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	e010      	b.n	800e7e6 <chk_lock+0xa6>
 800e7c4:	2312      	movs	r3, #18
 800e7c6:	e00e      	b.n	800e7e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d108      	bne.n	800e7e0 <chk_lock+0xa0>
 800e7ce:	4a09      	ldr	r2, [pc, #36]	; (800e7f4 <chk_lock+0xb4>)
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	011b      	lsls	r3, r3, #4
 800e7d4:	4413      	add	r3, r2
 800e7d6:	330c      	adds	r3, #12
 800e7d8:	881b      	ldrh	r3, [r3, #0]
 800e7da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7de:	d101      	bne.n	800e7e4 <chk_lock+0xa4>
 800e7e0:	2310      	movs	r3, #16
 800e7e2:	e000      	b.n	800e7e6 <chk_lock+0xa6>
 800e7e4:	2300      	movs	r3, #0
}
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3714      	adds	r7, #20
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr
 800e7f2:	bf00      	nop
 800e7f4:	24002440 	.word	0x24002440

0800e7f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e7fe:	2300      	movs	r3, #0
 800e800:	607b      	str	r3, [r7, #4]
 800e802:	e002      	b.n	800e80a <enq_lock+0x12>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3301      	adds	r3, #1
 800e808:	607b      	str	r3, [r7, #4]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d806      	bhi.n	800e81e <enq_lock+0x26>
 800e810:	4a09      	ldr	r2, [pc, #36]	; (800e838 <enq_lock+0x40>)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	011b      	lsls	r3, r3, #4
 800e816:	4413      	add	r3, r2
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d1f2      	bne.n	800e804 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2b02      	cmp	r3, #2
 800e822:	bf14      	ite	ne
 800e824:	2301      	movne	r3, #1
 800e826:	2300      	moveq	r3, #0
 800e828:	b2db      	uxtb	r3, r3
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	370c      	adds	r7, #12
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	24002440 	.word	0x24002440

0800e83c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e846:	2300      	movs	r3, #0
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e01f      	b.n	800e88c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e84c:	4a41      	ldr	r2, [pc, #260]	; (800e954 <inc_lock+0x118>)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	011b      	lsls	r3, r3, #4
 800e852:	4413      	add	r3, r2
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d113      	bne.n	800e886 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e85e:	4a3d      	ldr	r2, [pc, #244]	; (800e954 <inc_lock+0x118>)
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	011b      	lsls	r3, r3, #4
 800e864:	4413      	add	r3, r2
 800e866:	3304      	adds	r3, #4
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e86e:	429a      	cmp	r2, r3
 800e870:	d109      	bne.n	800e886 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e872:	4a38      	ldr	r2, [pc, #224]	; (800e954 <inc_lock+0x118>)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	011b      	lsls	r3, r3, #4
 800e878:	4413      	add	r3, r2
 800e87a:	3308      	adds	r3, #8
 800e87c:	681a      	ldr	r2, [r3, #0]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800e882:	429a      	cmp	r2, r3
 800e884:	d006      	beq.n	800e894 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	3301      	adds	r3, #1
 800e88a:	60fb      	str	r3, [r7, #12]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d9dc      	bls.n	800e84c <inc_lock+0x10>
 800e892:	e000      	b.n	800e896 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e894:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	2b02      	cmp	r3, #2
 800e89a:	d132      	bne.n	800e902 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e89c:	2300      	movs	r3, #0
 800e89e:	60fb      	str	r3, [r7, #12]
 800e8a0:	e002      	b.n	800e8a8 <inc_lock+0x6c>
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	60fb      	str	r3, [r7, #12]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d806      	bhi.n	800e8bc <inc_lock+0x80>
 800e8ae:	4a29      	ldr	r2, [pc, #164]	; (800e954 <inc_lock+0x118>)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	4413      	add	r3, r2
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d1f2      	bne.n	800e8a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2b02      	cmp	r3, #2
 800e8c0:	d101      	bne.n	800e8c6 <inc_lock+0x8a>
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	e040      	b.n	800e948 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	4922      	ldr	r1, [pc, #136]	; (800e954 <inc_lock+0x118>)
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	440b      	add	r3, r1
 800e8d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	689a      	ldr	r2, [r3, #8]
 800e8d8:	491e      	ldr	r1, [pc, #120]	; (800e954 <inc_lock+0x118>)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	011b      	lsls	r3, r3, #4
 800e8de:	440b      	add	r3, r1
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8e8:	491a      	ldr	r1, [pc, #104]	; (800e954 <inc_lock+0x118>)
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	011b      	lsls	r3, r3, #4
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e8f4:	4a17      	ldr	r2, [pc, #92]	; (800e954 <inc_lock+0x118>)
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	011b      	lsls	r3, r3, #4
 800e8fa:	4413      	add	r3, r2
 800e8fc:	330c      	adds	r3, #12
 800e8fe:	2200      	movs	r2, #0
 800e900:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d009      	beq.n	800e91c <inc_lock+0xe0>
 800e908:	4a12      	ldr	r2, [pc, #72]	; (800e954 <inc_lock+0x118>)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	011b      	lsls	r3, r3, #4
 800e90e:	4413      	add	r3, r2
 800e910:	330c      	adds	r3, #12
 800e912:	881b      	ldrh	r3, [r3, #0]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <inc_lock+0xe0>
 800e918:	2300      	movs	r3, #0
 800e91a:	e015      	b.n	800e948 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d108      	bne.n	800e934 <inc_lock+0xf8>
 800e922:	4a0c      	ldr	r2, [pc, #48]	; (800e954 <inc_lock+0x118>)
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	011b      	lsls	r3, r3, #4
 800e928:	4413      	add	r3, r2
 800e92a:	330c      	adds	r3, #12
 800e92c:	881b      	ldrh	r3, [r3, #0]
 800e92e:	3301      	adds	r3, #1
 800e930:	b29a      	uxth	r2, r3
 800e932:	e001      	b.n	800e938 <inc_lock+0xfc>
 800e934:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e938:	4906      	ldr	r1, [pc, #24]	; (800e954 <inc_lock+0x118>)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	011b      	lsls	r3, r3, #4
 800e93e:	440b      	add	r3, r1
 800e940:	330c      	adds	r3, #12
 800e942:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	3301      	adds	r3, #1
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3714      	adds	r7, #20
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr
 800e954:	24002440 	.word	0x24002440

0800e958 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e958:	b480      	push	{r7}
 800e95a:	b085      	sub	sp, #20
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	3b01      	subs	r3, #1
 800e964:	607b      	str	r3, [r7, #4]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d825      	bhi.n	800e9b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e96c:	4a17      	ldr	r2, [pc, #92]	; (800e9cc <dec_lock+0x74>)
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	011b      	lsls	r3, r3, #4
 800e972:	4413      	add	r3, r2
 800e974:	330c      	adds	r3, #12
 800e976:	881b      	ldrh	r3, [r3, #0]
 800e978:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e97a:	89fb      	ldrh	r3, [r7, #14]
 800e97c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e980:	d101      	bne.n	800e986 <dec_lock+0x2e>
 800e982:	2300      	movs	r3, #0
 800e984:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e986:	89fb      	ldrh	r3, [r7, #14]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d002      	beq.n	800e992 <dec_lock+0x3a>
 800e98c:	89fb      	ldrh	r3, [r7, #14]
 800e98e:	3b01      	subs	r3, #1
 800e990:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e992:	4a0e      	ldr	r2, [pc, #56]	; (800e9cc <dec_lock+0x74>)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	011b      	lsls	r3, r3, #4
 800e998:	4413      	add	r3, r2
 800e99a:	330c      	adds	r3, #12
 800e99c:	89fa      	ldrh	r2, [r7, #14]
 800e99e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e9a0:	89fb      	ldrh	r3, [r7, #14]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d105      	bne.n	800e9b2 <dec_lock+0x5a>
 800e9a6:	4a09      	ldr	r2, [pc, #36]	; (800e9cc <dec_lock+0x74>)
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	011b      	lsls	r3, r3, #4
 800e9ac:	4413      	add	r3, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	737b      	strb	r3, [r7, #13]
 800e9b6:	e001      	b.n	800e9bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e9b8:	2302      	movs	r3, #2
 800e9ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e9bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3714      	adds	r7, #20
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c8:	4770      	bx	lr
 800e9ca:	bf00      	nop
 800e9cc:	24002440 	.word	0x24002440

0800e9d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e9d0:	b480      	push	{r7}
 800e9d2:	b085      	sub	sp, #20
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e9d8:	2300      	movs	r3, #0
 800e9da:	60fb      	str	r3, [r7, #12]
 800e9dc:	e010      	b.n	800ea00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e9de:	4a0d      	ldr	r2, [pc, #52]	; (800ea14 <clear_lock+0x44>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	011b      	lsls	r3, r3, #4
 800e9e4:	4413      	add	r3, r2
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d105      	bne.n	800e9fa <clear_lock+0x2a>
 800e9ee:	4a09      	ldr	r2, [pc, #36]	; (800ea14 <clear_lock+0x44>)
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	011b      	lsls	r3, r3, #4
 800e9f4:	4413      	add	r3, r2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	60fb      	str	r3, [r7, #12]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d9eb      	bls.n	800e9de <clear_lock+0xe>
	}
}
 800ea06:	bf00      	nop
 800ea08:	bf00      	nop
 800ea0a:	3714      	adds	r7, #20
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	24002440 	.word	0x24002440

0800ea18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b086      	sub	sp, #24
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	78db      	ldrb	r3, [r3, #3]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d034      	beq.n	800ea96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7858      	ldrb	r0, [r3, #1]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	f7ff fbdc 	bl	800e1fc <disk_write>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	73fb      	strb	r3, [r7, #15]
 800ea4e:	e022      	b.n	800ea96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	1ad2      	subs	r2, r2, r3
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d217      	bcs.n	800ea96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	789b      	ldrb	r3, [r3, #2]
 800ea6a:	613b      	str	r3, [r7, #16]
 800ea6c:	e010      	b.n	800ea90 <sync_window+0x78>
					wsect += fs->fsize;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	4413      	add	r3, r2
 800ea76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7858      	ldrb	r0, [r3, #1]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ea82:	2301      	movs	r3, #1
 800ea84:	697a      	ldr	r2, [r7, #20]
 800ea86:	f7ff fbb9 	bl	800e1fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ea8a:	693b      	ldr	r3, [r7, #16]
 800ea8c:	3b01      	subs	r3, #1
 800ea8e:	613b      	str	r3, [r7, #16]
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d8eb      	bhi.n	800ea6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ea96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eaaa:	2300      	movs	r3, #0
 800eaac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d01b      	beq.n	800eaf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7ff ffad 	bl	800ea18 <sync_window>
 800eabe:	4603      	mov	r3, r0
 800eac0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eac2:	7bfb      	ldrb	r3, [r7, #15]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d113      	bne.n	800eaf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	7858      	ldrb	r0, [r3, #1]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ead2:	2301      	movs	r3, #1
 800ead4:	683a      	ldr	r2, [r7, #0]
 800ead6:	f7ff fb71 	bl	800e1bc <disk_read>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d004      	beq.n	800eaea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eae0:	f04f 33ff 	mov.w	r3, #4294967295
 800eae4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eae6:	2301      	movs	r3, #1
 800eae8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800eaf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
	...

0800eafc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7ff ff87 	bl	800ea18 <sync_window>
 800eb0a:	4603      	mov	r3, r0
 800eb0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb0e:	7bfb      	ldrb	r3, [r7, #15]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d159      	bne.n	800ebc8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	2b03      	cmp	r3, #3
 800eb1a:	d149      	bne.n	800ebb0 <sync_fs+0xb4>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	791b      	ldrb	r3, [r3, #4]
 800eb20:	2b01      	cmp	r3, #1
 800eb22:	d145      	bne.n	800ebb0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	899b      	ldrh	r3, [r3, #12]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	2100      	movs	r1, #0
 800eb32:	f7ff fda7 	bl	800e684 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	333c      	adds	r3, #60	; 0x3c
 800eb3a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800eb3e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fcae 	bl	800e4a4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	333c      	adds	r3, #60	; 0x3c
 800eb4c:	4921      	ldr	r1, [pc, #132]	; (800ebd4 <sync_fs+0xd8>)
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7ff fcc3 	bl	800e4da <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	333c      	adds	r3, #60	; 0x3c
 800eb58:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eb5c:	491e      	ldr	r1, [pc, #120]	; (800ebd8 <sync_fs+0xdc>)
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7ff fcbb 	bl	800e4da <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	333c      	adds	r3, #60	; 0x3c
 800eb68:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	4619      	mov	r1, r3
 800eb72:	4610      	mov	r0, r2
 800eb74:	f7ff fcb1 	bl	800e4da <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	333c      	adds	r3, #60	; 0x3c
 800eb7c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	699b      	ldr	r3, [r3, #24]
 800eb84:	4619      	mov	r1, r3
 800eb86:	4610      	mov	r0, r2
 800eb88:	f7ff fca7 	bl	800e4da <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb90:	1c5a      	adds	r2, r3, #1
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7858      	ldrb	r0, [r3, #1]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eba4:	2301      	movs	r3, #1
 800eba6:	f7ff fb29 	bl	800e1fc <disk_write>
			fs->fsi_flag = 0;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2200      	movs	r2, #0
 800ebae:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	785b      	ldrb	r3, [r3, #1]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7ff fb3f 	bl	800e23c <disk_ioctl>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <sync_fs+0xcc>
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ebc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebca:	4618      	mov	r0, r3
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}
 800ebd2:	bf00      	nop
 800ebd4:	41615252 	.word	0x41615252
 800ebd8:	61417272 	.word	0x61417272

0800ebdc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	3b02      	subs	r3, #2
 800ebea:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a1b      	ldr	r3, [r3, #32]
 800ebf0:	3b02      	subs	r3, #2
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	429a      	cmp	r2, r3
 800ebf6:	d301      	bcc.n	800ebfc <clust2sect+0x20>
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	e008      	b.n	800ec0e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	895b      	ldrh	r3, [r3, #10]
 800ec00:	461a      	mov	r2, r3
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	fb03 f202 	mul.w	r2, r3, r2
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec0c:	4413      	add	r3, r2
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	370c      	adds	r7, #12
 800ec12:	46bd      	mov	sp, r7
 800ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec18:	4770      	bx	lr
	...

0800ec1c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ec1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ec20:	b088      	sub	sp, #32
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d904      	bls.n	800ec3e <get_fat+0x22>
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	6a1b      	ldr	r3, [r3, #32]
 800ec38:	683a      	ldr	r2, [r7, #0]
 800ec3a:	429a      	cmp	r2, r3
 800ec3c:	d302      	bcc.n	800ec44 <get_fat+0x28>
		val = 1;	/* Internal error */
 800ec3e:	2301      	movs	r3, #1
 800ec40:	61fb      	str	r3, [r7, #28]
 800ec42:	e13a      	b.n	800eeba <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ec44:	f04f 33ff 	mov.w	r3, #4294967295
 800ec48:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	3b01      	subs	r3, #1
 800ec50:	2b03      	cmp	r3, #3
 800ec52:	f200 8126 	bhi.w	800eea2 <get_fat+0x286>
 800ec56:	a201      	add	r2, pc, #4	; (adr r2, 800ec5c <get_fat+0x40>)
 800ec58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5c:	0800ec6d 	.word	0x0800ec6d
 800ec60:	0800ed1b 	.word	0x0800ed1b
 800ec64:	0800ed67 	.word	0x0800ed67
 800ec68:	0800edb7 	.word	0x0800edb7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	60fb      	str	r3, [r7, #12]
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	085b      	lsrs	r3, r3, #1
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	4413      	add	r3, r2
 800ec78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec7a:	69bb      	ldr	r3, [r7, #24]
 800ec7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	899b      	ldrh	r3, [r3, #12]
 800ec82:	4619      	mov	r1, r3
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec8a:	4413      	add	r3, r2
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	69b8      	ldr	r0, [r7, #24]
 800ec90:	f7ff ff06 	bl	800eaa0 <move_window>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	f040 8106 	bne.w	800eea8 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	1c5a      	adds	r2, r3, #1
 800eca0:	60fa      	str	r2, [r7, #12]
 800eca2:	69ba      	ldr	r2, [r7, #24]
 800eca4:	8992      	ldrh	r2, [r2, #12]
 800eca6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecaa:	fb01 f202 	mul.w	r2, r1, r2
 800ecae:	1a9b      	subs	r3, r3, r2
 800ecb0:	69ba      	ldr	r2, [r7, #24]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecba:	69bb      	ldr	r3, [r7, #24]
 800ecbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	899b      	ldrh	r3, [r3, #12]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecca:	4413      	add	r3, r2
 800eccc:	4619      	mov	r1, r3
 800ecce:	69b8      	ldr	r0, [r7, #24]
 800ecd0:	f7ff fee6 	bl	800eaa0 <move_window>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f040 80e8 	bne.w	800eeac <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	899b      	ldrh	r3, [r3, #12]
 800ece0:	461a      	mov	r2, r3
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	fbb3 f1f2 	udiv	r1, r3, r2
 800ece8:	fb01 f202 	mul.w	r2, r1, r2
 800ecec:	1a9b      	subs	r3, r3, r2
 800ecee:	69ba      	ldr	r2, [r7, #24]
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ecf6:	021b      	lsls	r3, r3, #8
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	4313      	orrs	r3, r2
 800ecfe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	f003 0301 	and.w	r3, r3, #1
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d002      	beq.n	800ed10 <get_fat+0xf4>
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	091b      	lsrs	r3, r3, #4
 800ed0e:	e002      	b.n	800ed16 <get_fat+0xfa>
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed16:	61fb      	str	r3, [r7, #28]
			break;
 800ed18:	e0cf      	b.n	800eeba <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed1e:	69bb      	ldr	r3, [r7, #24]
 800ed20:	899b      	ldrh	r3, [r3, #12]
 800ed22:	085b      	lsrs	r3, r3, #1
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	4619      	mov	r1, r3
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed2e:	4413      	add	r3, r2
 800ed30:	4619      	mov	r1, r3
 800ed32:	69b8      	ldr	r0, [r7, #24]
 800ed34:	f7ff feb4 	bl	800eaa0 <move_window>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	f040 80b8 	bne.w	800eeb0 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	005b      	lsls	r3, r3, #1
 800ed4a:	69ba      	ldr	r2, [r7, #24]
 800ed4c:	8992      	ldrh	r2, [r2, #12]
 800ed4e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed52:	fb00 f202 	mul.w	r2, r0, r2
 800ed56:	1a9b      	subs	r3, r3, r2
 800ed58:	440b      	add	r3, r1
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7ff fa8c 	bl	800e278 <ld_word>
 800ed60:	4603      	mov	r3, r0
 800ed62:	61fb      	str	r3, [r7, #28]
			break;
 800ed64:	e0a9      	b.n	800eeba <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ed66:	69bb      	ldr	r3, [r7, #24]
 800ed68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	899b      	ldrh	r3, [r3, #12]
 800ed6e:	089b      	lsrs	r3, r3, #2
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	4619      	mov	r1, r3
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	69b8      	ldr	r0, [r7, #24]
 800ed80:	f7ff fe8e 	bl	800eaa0 <move_window>
 800ed84:	4603      	mov	r3, r0
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f040 8094 	bne.w	800eeb4 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	69ba      	ldr	r2, [r7, #24]
 800ed98:	8992      	ldrh	r2, [r2, #12]
 800ed9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed9e:	fb00 f202 	mul.w	r2, r0, r2
 800eda2:	1a9b      	subs	r3, r3, r2
 800eda4:	440b      	add	r3, r1
 800eda6:	4618      	mov	r0, r3
 800eda8:	f7ff fa7e 	bl	800e2a8 <ld_dword>
 800edac:	4603      	mov	r3, r0
 800edae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800edb2:	61fb      	str	r3, [r7, #28]
			break;
 800edb4:	e081      	b.n	800eeba <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800edbc:	4313      	orrs	r3, r2
 800edbe:	d070      	beq.n	800eea2 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	683a      	ldr	r2, [r7, #0]
 800edc6:	1ad3      	subs	r3, r2, r3
 800edc8:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800edd0:	1e54      	subs	r4, r2, #1
 800edd2:	f143 35ff 	adc.w	r5, r3, #4294967295
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	899b      	ldrh	r3, [r3, #12]
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2200      	movs	r2, #0
 800edde:	4698      	mov	r8, r3
 800ede0:	4691      	mov	r9, r2
 800ede2:	4642      	mov	r2, r8
 800ede4:	464b      	mov	r3, r9
 800ede6:	4620      	mov	r0, r4
 800ede8:	4629      	mov	r1, r5
 800edea:	f7f1 fac9 	bl	8000380 <__aeabi_uldivmod>
 800edee:	4602      	mov	r2, r0
 800edf0:	460b      	mov	r3, r1
 800edf2:	69bb      	ldr	r3, [r7, #24]
 800edf4:	895b      	ldrh	r3, [r3, #10]
 800edf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800edfa:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	79db      	ldrb	r3, [r3, #7]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d10e      	bne.n	800ee22 <get_fat+0x206>
					if (cofs <= clen) {
 800ee04:	697a      	ldr	r2, [r7, #20]
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d80a      	bhi.n	800ee22 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ee0c:	697a      	ldr	r2, [r7, #20]
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d002      	beq.n	800ee1a <get_fat+0x1fe>
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	3301      	adds	r3, #1
 800ee18:	e001      	b.n	800ee1e <get_fat+0x202>
 800ee1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee1e:	61fb      	str	r3, [r7, #28]
						break;
 800ee20:	e04b      	b.n	800eeba <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	79db      	ldrb	r3, [r3, #7]
 800ee26:	2b03      	cmp	r3, #3
 800ee28:	d108      	bne.n	800ee3c <get_fat+0x220>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	699b      	ldr	r3, [r3, #24]
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d203      	bcs.n	800ee3c <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	3301      	adds	r3, #1
 800ee38:	61fb      	str	r3, [r7, #28]
					break;
 800ee3a:	e03e      	b.n	800eeba <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	79db      	ldrb	r3, [r3, #7]
 800ee40:	2b02      	cmp	r3, #2
 800ee42:	d02e      	beq.n	800eea2 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	69db      	ldr	r3, [r3, #28]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d003      	beq.n	800ee54 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ee4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee50:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ee52:	e032      	b.n	800eeba <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ee54:	69bb      	ldr	r3, [r7, #24]
 800ee56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	899b      	ldrh	r3, [r3, #12]
 800ee5c:	089b      	lsrs	r3, r3, #2
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	4619      	mov	r1, r3
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee68:	4413      	add	r3, r2
 800ee6a:	4619      	mov	r1, r3
 800ee6c:	69b8      	ldr	r0, [r7, #24]
 800ee6e:	f7ff fe17 	bl	800eaa0 <move_window>
 800ee72:	4603      	mov	r3, r0
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d11f      	bne.n	800eeb8 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ee78:	69bb      	ldr	r3, [r7, #24]
 800ee7a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	69ba      	ldr	r2, [r7, #24]
 800ee84:	8992      	ldrh	r2, [r2, #12]
 800ee86:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee8a:	fb00 f202 	mul.w	r2, r0, r2
 800ee8e:	1a9b      	subs	r3, r3, r2
 800ee90:	440b      	add	r3, r1
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7ff fa08 	bl	800e2a8 <ld_dword>
 800ee98:	4603      	mov	r3, r0
 800ee9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee9e:	61fb      	str	r3, [r7, #28]
					break;
 800eea0:	e00b      	b.n	800eeba <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eea2:	2301      	movs	r3, #1
 800eea4:	61fb      	str	r3, [r7, #28]
 800eea6:	e008      	b.n	800eeba <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eea8:	bf00      	nop
 800eeaa:	e006      	b.n	800eeba <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eeac:	bf00      	nop
 800eeae:	e004      	b.n	800eeba <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800eeb0:	bf00      	nop
 800eeb2:	e002      	b.n	800eeba <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eeb4:	bf00      	nop
 800eeb6:	e000      	b.n	800eeba <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800eeb8:	bf00      	nop
		}
	}

	return val;
 800eeba:	69fb      	ldr	r3, [r7, #28]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3720      	adds	r7, #32
 800eec0:	46bd      	mov	sp, r7
 800eec2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eec6:	bf00      	nop

0800eec8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eec8:	b590      	push	{r4, r7, lr}
 800eeca:	b089      	sub	sp, #36	; 0x24
 800eecc:	af00      	add	r7, sp, #0
 800eece:	60f8      	str	r0, [r7, #12]
 800eed0:	60b9      	str	r1, [r7, #8]
 800eed2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eed4:	2302      	movs	r3, #2
 800eed6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	f240 8106 	bls.w	800f0ec <put_fat+0x224>
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6a1b      	ldr	r3, [r3, #32]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	429a      	cmp	r2, r3
 800eee8:	f080 8100 	bcs.w	800f0ec <put_fat+0x224>
		switch (fs->fs_type) {
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	2b04      	cmp	r3, #4
 800eef2:	f300 8104 	bgt.w	800f0fe <put_fat+0x236>
 800eef6:	2b03      	cmp	r3, #3
 800eef8:	f280 80b3 	bge.w	800f062 <put_fat+0x19a>
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d003      	beq.n	800ef08 <put_fat+0x40>
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	f000 8083 	beq.w	800f00c <put_fat+0x144>
 800ef06:	e0fa      	b.n	800f0fe <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	61bb      	str	r3, [r7, #24]
 800ef0c:	69bb      	ldr	r3, [r7, #24]
 800ef0e:	085b      	lsrs	r3, r3, #1
 800ef10:	69ba      	ldr	r2, [r7, #24]
 800ef12:	4413      	add	r3, r2
 800ef14:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
 800ef1e:	4619      	mov	r1, r3
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef26:	4413      	add	r3, r2
 800ef28:	4619      	mov	r1, r3
 800ef2a:	68f8      	ldr	r0, [r7, #12]
 800ef2c:	f7ff fdb8 	bl	800eaa0 <move_window>
 800ef30:	4603      	mov	r3, r0
 800ef32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef34:	7ffb      	ldrb	r3, [r7, #31]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	f040 80da 	bne.w	800f0f0 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	61ba      	str	r2, [r7, #24]
 800ef48:	68fa      	ldr	r2, [r7, #12]
 800ef4a:	8992      	ldrh	r2, [r2, #12]
 800ef4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef50:	fb00 f202 	mul.w	r2, r0, r2
 800ef54:	1a9b      	subs	r3, r3, r2
 800ef56:	440b      	add	r3, r1
 800ef58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	f003 0301 	and.w	r3, r3, #1
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d00d      	beq.n	800ef80 <put_fat+0xb8>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	b25b      	sxtb	r3, r3
 800ef6a:	f003 030f 	and.w	r3, r3, #15
 800ef6e:	b25a      	sxtb	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	b25b      	sxtb	r3, r3
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	b25b      	sxtb	r3, r3
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	e001      	b.n	800ef84 <put_fat+0xbc>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	697a      	ldr	r2, [r7, #20]
 800ef86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	899b      	ldrh	r3, [r3, #12]
 800ef96:	4619      	mov	r1, r3
 800ef98:	69bb      	ldr	r3, [r7, #24]
 800ef9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef9e:	4413      	add	r3, r2
 800efa0:	4619      	mov	r1, r3
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f7ff fd7c 	bl	800eaa0 <move_window>
 800efa8:	4603      	mov	r3, r0
 800efaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800efac:	7ffb      	ldrb	r3, [r7, #31]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	f040 80a0 	bne.w	800f0f4 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	899b      	ldrh	r3, [r3, #12]
 800efbe:	461a      	mov	r2, r3
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	fbb3 f0f2 	udiv	r0, r3, r2
 800efc6:	fb00 f202 	mul.w	r2, r0, r2
 800efca:	1a9b      	subs	r3, r3, r2
 800efcc:	440b      	add	r3, r1
 800efce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	f003 0301 	and.w	r3, r3, #1
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d003      	beq.n	800efe2 <put_fat+0x11a>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	091b      	lsrs	r3, r3, #4
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	e00e      	b.n	800f000 <put_fat+0x138>
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	b25b      	sxtb	r3, r3
 800efe8:	f023 030f 	bic.w	r3, r3, #15
 800efec:	b25a      	sxtb	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	0a1b      	lsrs	r3, r3, #8
 800eff2:	b25b      	sxtb	r3, r3
 800eff4:	f003 030f 	and.w	r3, r3, #15
 800eff8:	b25b      	sxtb	r3, r3
 800effa:	4313      	orrs	r3, r2
 800effc:	b25b      	sxtb	r3, r3
 800effe:	b2db      	uxtb	r3, r3
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2201      	movs	r2, #1
 800f008:	70da      	strb	r2, [r3, #3]
			break;
 800f00a:	e078      	b.n	800f0fe <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	899b      	ldrh	r3, [r3, #12]
 800f014:	085b      	lsrs	r3, r3, #1
 800f016:	b29b      	uxth	r3, r3
 800f018:	4619      	mov	r1, r3
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f020:	4413      	add	r3, r2
 800f022:	4619      	mov	r1, r3
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f7ff fd3b 	bl	800eaa0 <move_window>
 800f02a:	4603      	mov	r3, r0
 800f02c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f02e:	7ffb      	ldrb	r3, [r7, #31]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d161      	bne.n	800f0f8 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	005b      	lsls	r3, r3, #1
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	8992      	ldrh	r2, [r2, #12]
 800f042:	fbb3 f0f2 	udiv	r0, r3, r2
 800f046:	fb00 f202 	mul.w	r2, r0, r2
 800f04a:	1a9b      	subs	r3, r3, r2
 800f04c:	440b      	add	r3, r1
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	b292      	uxth	r2, r2
 800f052:	4611      	mov	r1, r2
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fa25 	bl	800e4a4 <st_word>
			fs->wflag = 1;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	2201      	movs	r2, #1
 800f05e:	70da      	strb	r2, [r3, #3]
			break;
 800f060:	e04d      	b.n	800f0fe <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	899b      	ldrh	r3, [r3, #12]
 800f06a:	089b      	lsrs	r3, r3, #2
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	4619      	mov	r1, r3
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	fbb3 f3f1 	udiv	r3, r3, r1
 800f076:	4413      	add	r3, r2
 800f078:	4619      	mov	r1, r3
 800f07a:	68f8      	ldr	r0, [r7, #12]
 800f07c:	f7ff fd10 	bl	800eaa0 <move_window>
 800f080:	4603      	mov	r3, r0
 800f082:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f084:	7ffb      	ldrb	r3, [r7, #31]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d138      	bne.n	800f0fc <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	781b      	ldrb	r3, [r3, #0]
 800f08e:	2b04      	cmp	r3, #4
 800f090:	d017      	beq.n	800f0c2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	009b      	lsls	r3, r3, #2
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	8992      	ldrh	r2, [r2, #12]
 800f0a6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0aa:	fb00 f202 	mul.w	r2, r0, r2
 800f0ae:	1a9b      	subs	r3, r3, r2
 800f0b0:	440b      	add	r3, r1
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff f8f8 	bl	800e2a8 <ld_dword>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f0be:	4323      	orrs	r3, r4
 800f0c0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	8992      	ldrh	r2, [r2, #12]
 800f0d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0d4:	fb00 f202 	mul.w	r2, r0, r2
 800f0d8:	1a9b      	subs	r3, r3, r2
 800f0da:	440b      	add	r3, r1
 800f0dc:	6879      	ldr	r1, [r7, #4]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff f9fb 	bl	800e4da <st_dword>
			fs->wflag = 1;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	70da      	strb	r2, [r3, #3]
			break;
 800f0ea:	e008      	b.n	800f0fe <put_fat+0x236>
		}
	}
 800f0ec:	bf00      	nop
 800f0ee:	e006      	b.n	800f0fe <put_fat+0x236>
			if (res != FR_OK) break;
 800f0f0:	bf00      	nop
 800f0f2:	e004      	b.n	800f0fe <put_fat+0x236>
			if (res != FR_OK) break;
 800f0f4:	bf00      	nop
 800f0f6:	e002      	b.n	800f0fe <put_fat+0x236>
			if (res != FR_OK) break;
 800f0f8:	bf00      	nop
 800f0fa:	e000      	b.n	800f0fe <put_fat+0x236>
			if (res != FR_OK) break;
 800f0fc:	bf00      	nop
	return res;
 800f0fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3724      	adds	r7, #36	; 0x24
 800f104:	46bd      	mov	sp, r7
 800f106:	bd90      	pop	{r4, r7, pc}

0800f108 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b08a      	sub	sp, #40	; 0x28
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	3b02      	subs	r3, #2
 800f118:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	6a1b      	ldr	r3, [r3, #32]
 800f11e:	3b02      	subs	r3, #2
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	429a      	cmp	r2, r3
 800f124:	d301      	bcc.n	800f12a <find_bitmap+0x22>
 800f126:	2300      	movs	r3, #0
 800f128:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	61fb      	str	r3, [r7, #28]
 800f12e:	69fb      	ldr	r3, [r7, #28]
 800f130:	61bb      	str	r3, [r7, #24]
 800f132:	2300      	movs	r3, #0
 800f134:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f13a:	69fb      	ldr	r3, [r7, #28]
 800f13c:	08db      	lsrs	r3, r3, #3
 800f13e:	68f9      	ldr	r1, [r7, #12]
 800f140:	8989      	ldrh	r1, [r1, #12]
 800f142:	fbb3 f3f1 	udiv	r3, r3, r1
 800f146:	4413      	add	r3, r2
 800f148:	4619      	mov	r1, r3
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f7ff fca8 	bl	800eaa0 <move_window>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	d002      	beq.n	800f15c <find_bitmap+0x54>
 800f156:	f04f 33ff 	mov.w	r3, #4294967295
 800f15a:	e058      	b.n	800f20e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	08db      	lsrs	r3, r3, #3
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	8992      	ldrh	r2, [r2, #12]
 800f164:	fbb3 f1f2 	udiv	r1, r3, r2
 800f168:	fb01 f202 	mul.w	r2, r1, r2
 800f16c:	1a9b      	subs	r3, r3, r2
 800f16e:	623b      	str	r3, [r7, #32]
 800f170:	69fb      	ldr	r3, [r7, #28]
 800f172:	f003 0307 	and.w	r3, r3, #7
 800f176:	2201      	movs	r2, #1
 800f178:	fa02 f303 	lsl.w	r3, r2, r3
 800f17c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	6a3b      	ldr	r3, [r7, #32]
 800f184:	4413      	add	r3, r2
 800f186:	333c      	adds	r3, #60	; 0x3c
 800f188:	781a      	ldrb	r2, [r3, #0]
 800f18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f18e:	4013      	ands	r3, r2
 800f190:	74fb      	strb	r3, [r7, #19]
 800f192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f196:	005b      	lsls	r3, r3, #1
 800f198:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	61fb      	str	r3, [r7, #28]
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6a1b      	ldr	r3, [r3, #32]
 800f1a6:	3b02      	subs	r3, #2
 800f1a8:	69fa      	ldr	r2, [r7, #28]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d307      	bcc.n	800f1be <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	61fb      	str	r3, [r7, #28]
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	899b      	ldrh	r3, [r3, #12]
 800f1bc:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800f1be:	7cfb      	ldrb	r3, [r7, #19]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d109      	bne.n	800f1d8 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	617b      	str	r3, [r7, #20]
 800f1ca:	697a      	ldr	r2, [r7, #20]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	429a      	cmp	r2, r3
 800f1d0:	d106      	bne.n	800f1e0 <find_bitmap+0xd8>
 800f1d2:	69bb      	ldr	r3, [r7, #24]
 800f1d4:	3302      	adds	r3, #2
 800f1d6:	e01a      	b.n	800f20e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	61bb      	str	r3, [r7, #24]
 800f1dc:	2300      	movs	r3, #0
 800f1de:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800f1e0:	69fa      	ldr	r2, [r7, #28]
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d101      	bne.n	800f1ec <find_bitmap+0xe4>
 800f1e8:	2300      	movs	r3, #0
 800f1ea:	e010      	b.n	800f20e <find_bitmap+0x106>
			} while (bm);
 800f1ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1c5      	bne.n	800f180 <find_bitmap+0x78>
			bm = 1;
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	623b      	str	r3, [r7, #32]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	899b      	ldrh	r3, [r3, #12]
 800f204:	461a      	mov	r2, r3
 800f206:	6a3b      	ldr	r3, [r7, #32]
 800f208:	4293      	cmp	r3, r2
 800f20a:	d3b9      	bcc.n	800f180 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800f20c:	e793      	b.n	800f136 <find_bitmap+0x2e>
	}
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3728      	adds	r7, #40	; 0x28
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b088      	sub	sp, #32
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	60f8      	str	r0, [r7, #12]
 800f21e:	60b9      	str	r1, [r7, #8]
 800f220:	607a      	str	r2, [r7, #4]
 800f222:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	3b02      	subs	r3, #2
 800f228:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	08db      	lsrs	r3, r3, #3
 800f232:	68f9      	ldr	r1, [r7, #12]
 800f234:	8989      	ldrh	r1, [r1, #12]
 800f236:	fbb3 f3f1 	udiv	r3, r3, r1
 800f23a:	4413      	add	r3, r2
 800f23c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	08db      	lsrs	r3, r3, #3
 800f242:	68fa      	ldr	r2, [r7, #12]
 800f244:	8992      	ldrh	r2, [r2, #12]
 800f246:	fbb3 f1f2 	udiv	r1, r3, r2
 800f24a:	fb01 f202 	mul.w	r2, r1, r2
 800f24e:	1a9b      	subs	r3, r3, r2
 800f250:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	f003 0307 	and.w	r3, r3, #7
 800f258:	2201      	movs	r2, #1
 800f25a:	fa02 f303 	lsl.w	r3, r2, r3
 800f25e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800f260:	697b      	ldr	r3, [r7, #20]
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	617a      	str	r2, [r7, #20]
 800f266:	4619      	mov	r1, r3
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f7ff fc19 	bl	800eaa0 <move_window>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <change_bitmap+0x62>
 800f274:	2301      	movs	r3, #1
 800f276:	e03f      	b.n	800f2f8 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	4413      	add	r3, r2
 800f27e:	333c      	adds	r3, #60	; 0x3c
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	7ffb      	ldrb	r3, [r7, #31]
 800f284:	4013      	ands	r3, r2
 800f286:	b2db      	uxtb	r3, r3
 800f288:	2b00      	cmp	r3, #0
 800f28a:	bf14      	ite	ne
 800f28c:	2301      	movne	r3, #1
 800f28e:	2300      	moveq	r3, #0
 800f290:	b2db      	uxtb	r3, r3
 800f292:	461a      	mov	r2, r3
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	4293      	cmp	r3, r2
 800f298:	d101      	bne.n	800f29e <change_bitmap+0x88>
 800f29a:	2302      	movs	r3, #2
 800f29c:	e02c      	b.n	800f2f8 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	333c      	adds	r3, #60	; 0x3c
 800f2a6:	781a      	ldrb	r2, [r3, #0]
 800f2a8:	7ffb      	ldrb	r3, [r7, #31]
 800f2aa:	4053      	eors	r3, r2
 800f2ac:	b2d9      	uxtb	r1, r3
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	4413      	add	r3, r2
 800f2b4:	333c      	adds	r3, #60	; 0x3c
 800f2b6:	460a      	mov	r2, r1
 800f2b8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2201      	movs	r2, #1
 800f2be:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	607b      	str	r3, [r7, #4]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <change_bitmap+0xba>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	e013      	b.n	800f2f8 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800f2d0:	7ffb      	ldrb	r3, [r7, #31]
 800f2d2:	005b      	lsls	r3, r3, #1
 800f2d4:	77fb      	strb	r3, [r7, #31]
 800f2d6:	7ffb      	ldrb	r3, [r7, #31]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1cd      	bne.n	800f278 <change_bitmap+0x62>
			bm = 1;
 800f2dc:	2301      	movs	r3, #1
 800f2de:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	61bb      	str	r3, [r7, #24]
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	899b      	ldrh	r3, [r3, #12]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d3c2      	bcc.n	800f278 <change_bitmap+0x62>
		i = 0;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800f2f6:	e7b3      	b.n	800f260 <change_bitmap+0x4a>
	}
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3720      	adds	r7, #32
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}

0800f300 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b086      	sub	sp, #24
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	79db      	ldrb	r3, [r3, #7]
 800f30c:	2b03      	cmp	r3, #3
 800f30e:	d121      	bne.n	800f354 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	617b      	str	r3, [r7, #20]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	613b      	str	r3, [r7, #16]
 800f31c:	e014      	b.n	800f348 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6818      	ldr	r0, [r3, #0]
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	3301      	adds	r3, #1
 800f326:	461a      	mov	r2, r3
 800f328:	6979      	ldr	r1, [r7, #20]
 800f32a:	f7ff fdcd 	bl	800eec8 <put_fat>
 800f32e:	4603      	mov	r3, r0
 800f330:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <fill_first_frag+0x3c>
 800f338:	7bfb      	ldrb	r3, [r7, #15]
 800f33a:	e00c      	b.n	800f356 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	3301      	adds	r3, #1
 800f340:	617b      	str	r3, [r7, #20]
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	3b01      	subs	r3, #1
 800f346:	613b      	str	r3, [r7, #16]
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d1e7      	bne.n	800f31e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2200      	movs	r2, #0
 800f352:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800f354:	2300      	movs	r3, #0
}
 800f356:	4618      	mov	r0, r3
 800f358:	3718      	adds	r7, #24
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	af00      	add	r7, sp, #0
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	60b9      	str	r1, [r7, #8]
 800f368:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800f36a:	e020      	b.n	800f3ae <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6818      	ldr	r0, [r3, #0]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	69db      	ldr	r3, [r3, #28]
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	1c59      	adds	r1, r3, #1
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	69db      	ldr	r3, [r3, #28]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d905      	bls.n	800f38e <fill_last_frag+0x30>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	69db      	ldr	r3, [r3, #28]
 800f386:	68ba      	ldr	r2, [r7, #8]
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	3302      	adds	r3, #2
 800f38c:	e000      	b.n	800f390 <fill_last_frag+0x32>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	461a      	mov	r2, r3
 800f392:	f7ff fd99 	bl	800eec8 <put_fat>
 800f396:	4603      	mov	r3, r0
 800f398:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800f39a:	7dfb      	ldrb	r3, [r7, #23]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d001      	beq.n	800f3a4 <fill_last_frag+0x46>
 800f3a0:	7dfb      	ldrb	r3, [r7, #23]
 800f3a2:	e009      	b.n	800f3b8 <fill_last_frag+0x5a>
		obj->n_frag--;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	69db      	ldr	r3, [r3, #28]
 800f3a8:	1e5a      	subs	r2, r3, #1
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	69db      	ldr	r3, [r3, #28]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d1da      	bne.n	800f36c <fill_last_frag+0xe>
	}
	return FR_OK;
 800f3b6:	2300      	movs	r3, #0
}
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	3718      	adds	r7, #24
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}

0800f3c0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b08a      	sub	sp, #40	; 0x28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d904      	bls.n	800f3ee <remove_chain+0x2e>
 800f3e4:	69bb      	ldr	r3, [r7, #24]
 800f3e6:	6a1b      	ldr	r3, [r3, #32]
 800f3e8:	68ba      	ldr	r2, [r7, #8]
 800f3ea:	429a      	cmp	r2, r3
 800f3ec:	d301      	bcc.n	800f3f2 <remove_chain+0x32>
 800f3ee:	2302      	movs	r3, #2
 800f3f0:	e096      	b.n	800f520 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d014      	beq.n	800f422 <remove_chain+0x62>
 800f3f8:	69bb      	ldr	r3, [r7, #24]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	2b04      	cmp	r3, #4
 800f3fe:	d103      	bne.n	800f408 <remove_chain+0x48>
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	79db      	ldrb	r3, [r3, #7]
 800f404:	2b02      	cmp	r3, #2
 800f406:	d00c      	beq.n	800f422 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f408:	f04f 32ff 	mov.w	r2, #4294967295
 800f40c:	6879      	ldr	r1, [r7, #4]
 800f40e:	69b8      	ldr	r0, [r7, #24]
 800f410:	f7ff fd5a 	bl	800eec8 <put_fat>
 800f414:	4603      	mov	r3, r0
 800f416:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f418:	7ffb      	ldrb	r3, [r7, #31]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d001      	beq.n	800f422 <remove_chain+0x62>
 800f41e:	7ffb      	ldrb	r3, [r7, #31]
 800f420:	e07e      	b.n	800f520 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f422:	68b9      	ldr	r1, [r7, #8]
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f7ff fbf9 	bl	800ec1c <get_fat>
 800f42a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d055      	beq.n	800f4de <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f432:	697b      	ldr	r3, [r7, #20]
 800f434:	2b01      	cmp	r3, #1
 800f436:	d101      	bne.n	800f43c <remove_chain+0x7c>
 800f438:	2302      	movs	r3, #2
 800f43a:	e071      	b.n	800f520 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f442:	d101      	bne.n	800f448 <remove_chain+0x88>
 800f444:	2301      	movs	r3, #1
 800f446:	e06b      	b.n	800f520 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	2b04      	cmp	r3, #4
 800f44e:	d00b      	beq.n	800f468 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f450:	2200      	movs	r2, #0
 800f452:	68b9      	ldr	r1, [r7, #8]
 800f454:	69b8      	ldr	r0, [r7, #24]
 800f456:	f7ff fd37 	bl	800eec8 <put_fat>
 800f45a:	4603      	mov	r3, r0
 800f45c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f45e:	7ffb      	ldrb	r3, [r7, #31]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <remove_chain+0xa8>
 800f464:	7ffb      	ldrb	r3, [r7, #31]
 800f466:	e05b      	b.n	800f520 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	69da      	ldr	r2, [r3, #28]
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	6a1b      	ldr	r3, [r3, #32]
 800f470:	3b02      	subs	r3, #2
 800f472:	429a      	cmp	r2, r3
 800f474:	d20b      	bcs.n	800f48e <remove_chain+0xce>
			fs->free_clst++;
 800f476:	69bb      	ldr	r3, [r7, #24]
 800f478:	69db      	ldr	r3, [r3, #28]
 800f47a:	1c5a      	adds	r2, r3, #1
 800f47c:	69bb      	ldr	r3, [r7, #24]
 800f47e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	791b      	ldrb	r3, [r3, #4]
 800f484:	f043 0301 	orr.w	r3, r3, #1
 800f488:	b2da      	uxtb	r2, r3
 800f48a:	69bb      	ldr	r3, [r7, #24]
 800f48c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	3301      	adds	r3, #1
 800f492:	697a      	ldr	r2, [r7, #20]
 800f494:	429a      	cmp	r2, r3
 800f496:	d102      	bne.n	800f49e <remove_chain+0xde>
			ecl = nxt;
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	623b      	str	r3, [r7, #32]
 800f49c:	e017      	b.n	800f4ce <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	2b04      	cmp	r3, #4
 800f4a4:	d10f      	bne.n	800f4c6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800f4a6:	6a3a      	ldr	r2, [r7, #32]
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	1ad3      	subs	r3, r2, r3
 800f4ac:	1c5a      	adds	r2, r3, #1
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f4b2:	69b8      	ldr	r0, [r7, #24]
 800f4b4:	f7ff feaf 	bl	800f216 <change_bitmap>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800f4bc:	7ffb      	ldrb	r3, [r7, #31]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d001      	beq.n	800f4c6 <remove_chain+0x106>
 800f4c2:	7ffb      	ldrb	r3, [r7, #31]
 800f4c4:	e02c      	b.n	800f520 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	623b      	str	r3, [r7, #32]
 800f4ca:	6a3b      	ldr	r3, [r7, #32]
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	6a1b      	ldr	r3, [r3, #32]
 800f4d6:	68ba      	ldr	r2, [r7, #8]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d3a2      	bcc.n	800f422 <remove_chain+0x62>
 800f4dc:	e000      	b.n	800f4e0 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800f4de:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800f4e0:	69bb      	ldr	r3, [r7, #24]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b04      	cmp	r3, #4
 800f4e6:	d11a      	bne.n	800f51e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d103      	bne.n	800f4f6 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	71da      	strb	r2, [r3, #7]
 800f4f4:	e013      	b.n	800f51e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	79db      	ldrb	r3, [r3, #7]
 800f4fa:	2b03      	cmp	r3, #3
 800f4fc:	d10f      	bne.n	800f51e <remove_chain+0x15e>
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	689b      	ldr	r3, [r3, #8]
 800f502:	687a      	ldr	r2, [r7, #4]
 800f504:	429a      	cmp	r2, r3
 800f506:	d30a      	bcc.n	800f51e <remove_chain+0x15e>
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	689a      	ldr	r2, [r3, #8]
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	699b      	ldr	r3, [r3, #24]
 800f510:	4413      	add	r3, r2
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	429a      	cmp	r2, r3
 800f516:	d802      	bhi.n	800f51e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2202      	movs	r2, #2
 800f51c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800f51e:	2300      	movs	r3, #0
}
 800f520:	4618      	mov	r0, r3
 800f522:	3728      	adds	r7, #40	; 0x28
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b088      	sub	sp, #32
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d10d      	bne.n	800f55a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d004      	beq.n	800f554 <create_chain+0x2c>
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	69ba      	ldr	r2, [r7, #24]
 800f550:	429a      	cmp	r2, r3
 800f552:	d31b      	bcc.n	800f58c <create_chain+0x64>
 800f554:	2301      	movs	r3, #1
 800f556:	61bb      	str	r3, [r7, #24]
 800f558:	e018      	b.n	800f58c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f55a:	6839      	ldr	r1, [r7, #0]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff fb5d 	bl	800ec1c <get_fat>
 800f562:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2b01      	cmp	r3, #1
 800f568:	d801      	bhi.n	800f56e <create_chain+0x46>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e0d9      	b.n	800f722 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f574:	d101      	bne.n	800f57a <create_chain+0x52>
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	e0d3      	b.n	800f722 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f57a:	693b      	ldr	r3, [r7, #16]
 800f57c:	6a1b      	ldr	r3, [r3, #32]
 800f57e:	68fa      	ldr	r2, [r7, #12]
 800f580:	429a      	cmp	r2, r3
 800f582:	d201      	bcs.n	800f588 <create_chain+0x60>
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	e0cc      	b.n	800f722 <create_chain+0x1fa>
		scl = clst;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	2b04      	cmp	r3, #4
 800f592:	d164      	bne.n	800f65e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800f594:	2201      	movs	r2, #1
 800f596:	69b9      	ldr	r1, [r7, #24]
 800f598:	6938      	ldr	r0, [r7, #16]
 800f59a:	f7ff fdb5 	bl	800f108 <find_bitmap>
 800f59e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800f5a0:	69fb      	ldr	r3, [r7, #28]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d003      	beq.n	800f5ae <create_chain+0x86>
 800f5a6:	69fb      	ldr	r3, [r7, #28]
 800f5a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ac:	d101      	bne.n	800f5b2 <create_chain+0x8a>
 800f5ae:	69fb      	ldr	r3, [r7, #28]
 800f5b0:	e0b7      	b.n	800f722 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	69f9      	ldr	r1, [r7, #28]
 800f5b8:	6938      	ldr	r0, [r7, #16]
 800f5ba:	f7ff fe2c 	bl	800f216 <change_bitmap>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d101      	bne.n	800f5cc <create_chain+0xa4>
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e0aa      	b.n	800f722 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d102      	bne.n	800f5d8 <create_chain+0xb0>
 800f5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d6:	e0a4      	b.n	800f722 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d103      	bne.n	800f5e6 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	2202      	movs	r2, #2
 800f5e2:	71da      	strb	r2, [r3, #7]
 800f5e4:	e011      	b.n	800f60a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	79db      	ldrb	r3, [r3, #7]
 800f5ea:	2b02      	cmp	r3, #2
 800f5ec:	d10d      	bne.n	800f60a <create_chain+0xe2>
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	69fa      	ldr	r2, [r7, #28]
 800f5f4:	429a      	cmp	r2, r3
 800f5f6:	d008      	beq.n	800f60a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	69ba      	ldr	r2, [r7, #24]
 800f5fe:	1ad2      	subs	r2, r2, r3
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2203      	movs	r2, #3
 800f608:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	79db      	ldrb	r3, [r3, #7]
 800f60e:	2b02      	cmp	r3, #2
 800f610:	d064      	beq.n	800f6dc <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	3301      	adds	r3, #1
 800f616:	69fa      	ldr	r2, [r7, #28]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d10b      	bne.n	800f634 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	69db      	ldr	r3, [r3, #28]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d003      	beq.n	800f62c <create_chain+0x104>
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	69db      	ldr	r3, [r3, #28]
 800f628:	3301      	adds	r3, #1
 800f62a:	e000      	b.n	800f62e <create_chain+0x106>
 800f62c:	2302      	movs	r3, #2
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	61d3      	str	r3, [r2, #28]
 800f632:	e053      	b.n	800f6dc <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	69db      	ldr	r3, [r3, #28]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d102      	bne.n	800f642 <create_chain+0x11a>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2201      	movs	r2, #1
 800f640:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800f642:	69fa      	ldr	r2, [r7, #28]
 800f644:	6839      	ldr	r1, [r7, #0]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f7ff fe89 	bl	800f35e <fill_last_frag>
 800f64c:	4603      	mov	r3, r0
 800f64e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800f650:	7dfb      	ldrb	r3, [r7, #23]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d142      	bne.n	800f6dc <create_chain+0x1b4>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	2201      	movs	r2, #1
 800f65a:	61da      	str	r2, [r3, #28]
 800f65c:	e03e      	b.n	800f6dc <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f65e:	69bb      	ldr	r3, [r7, #24]
 800f660:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	3301      	adds	r3, #1
 800f666:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	6a1b      	ldr	r3, [r3, #32]
 800f66c:	69fa      	ldr	r2, [r7, #28]
 800f66e:	429a      	cmp	r2, r3
 800f670:	d307      	bcc.n	800f682 <create_chain+0x15a>
				ncl = 2;
 800f672:	2302      	movs	r3, #2
 800f674:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f676:	69fa      	ldr	r2, [r7, #28]
 800f678:	69bb      	ldr	r3, [r7, #24]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d901      	bls.n	800f682 <create_chain+0x15a>
 800f67e:	2300      	movs	r3, #0
 800f680:	e04f      	b.n	800f722 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f682:	69f9      	ldr	r1, [r7, #28]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f7ff fac9 	bl	800ec1c <get_fat>
 800f68a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00e      	beq.n	800f6b0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d003      	beq.n	800f6a0 <create_chain+0x178>
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69e:	d101      	bne.n	800f6a4 <create_chain+0x17c>
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	e03e      	b.n	800f722 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800f6a4:	69fa      	ldr	r2, [r7, #28]
 800f6a6:	69bb      	ldr	r3, [r7, #24]
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d1da      	bne.n	800f662 <create_chain+0x13a>
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	e038      	b.n	800f722 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800f6b0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f6b2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b6:	69f9      	ldr	r1, [r7, #28]
 800f6b8:	6938      	ldr	r0, [r7, #16]
 800f6ba:	f7ff fc05 	bl	800eec8 <put_fat>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f6c2:	7dfb      	ldrb	r3, [r7, #23]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d109      	bne.n	800f6dc <create_chain+0x1b4>
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d006      	beq.n	800f6dc <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f6ce:	69fa      	ldr	r2, [r7, #28]
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	6938      	ldr	r0, [r7, #16]
 800f6d4:	f7ff fbf8 	bl	800eec8 <put_fat>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f6dc:	7dfb      	ldrb	r3, [r7, #23]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d116      	bne.n	800f710 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	69fa      	ldr	r2, [r7, #28]
 800f6e6:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	69da      	ldr	r2, [r3, #28]
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	6a1b      	ldr	r3, [r3, #32]
 800f6f0:	3b02      	subs	r3, #2
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d804      	bhi.n	800f700 <create_chain+0x1d8>
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	69db      	ldr	r3, [r3, #28]
 800f6fa:	1e5a      	subs	r2, r3, #1
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	791b      	ldrb	r3, [r3, #4]
 800f704:	f043 0301 	orr.w	r3, r3, #1
 800f708:	b2da      	uxtb	r2, r3
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	711a      	strb	r2, [r3, #4]
 800f70e:	e007      	b.n	800f720 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	2b01      	cmp	r3, #1
 800f714:	d102      	bne.n	800f71c <create_chain+0x1f4>
 800f716:	f04f 33ff 	mov.w	r3, #4294967295
 800f71a:	e000      	b.n	800f71e <create_chain+0x1f6>
 800f71c:	2301      	movs	r3, #1
 800f71e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f720:	69fb      	ldr	r3, [r7, #28]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3720      	adds	r7, #32
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f72a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f72e:	b088      	sub	sp, #32
 800f730:	af00      	add	r7, sp, #0
 800f732:	60f8      	str	r0, [r7, #12]
 800f734:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f742:	3304      	adds	r3, #4
 800f744:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	899b      	ldrh	r3, [r3, #12]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	2200      	movs	r2, #0
 800f74e:	4698      	mov	r8, r3
 800f750:	4691      	mov	r9, r2
 800f752:	4642      	mov	r2, r8
 800f754:	464b      	mov	r3, r9
 800f756:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f75a:	f7f0 fe11 	bl	8000380 <__aeabi_uldivmod>
 800f75e:	4602      	mov	r2, r0
 800f760:	460b      	mov	r3, r1
 800f762:	4610      	mov	r0, r2
 800f764:	4619      	mov	r1, r3
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	895b      	ldrh	r3, [r3, #10]
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	2200      	movs	r2, #0
 800f76e:	461c      	mov	r4, r3
 800f770:	4615      	mov	r5, r2
 800f772:	4622      	mov	r2, r4
 800f774:	462b      	mov	r3, r5
 800f776:	f7f0 fe03 	bl	8000380 <__aeabi_uldivmod>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4613      	mov	r3, r2
 800f780:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f782:	69bb      	ldr	r3, [r7, #24]
 800f784:	1d1a      	adds	r2, r3, #4
 800f786:	61ba      	str	r2, [r7, #24]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <clmt_clust+0x6c>
 800f792:	2300      	movs	r3, #0
 800f794:	e010      	b.n	800f7b8 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800f796:	69fa      	ldr	r2, [r7, #28]
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d307      	bcc.n	800f7ae <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800f79e:	69fa      	ldr	r2, [r7, #28]
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	1ad3      	subs	r3, r2, r3
 800f7a4:	61fb      	str	r3, [r7, #28]
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	3304      	adds	r3, #4
 800f7aa:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f7ac:	e7e9      	b.n	800f782 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800f7ae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	4413      	add	r3, r2
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3720      	adds	r7, #32
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800f7c2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f7c2:	b580      	push	{r7, lr}
 800f7c4:	b086      	sub	sp, #24
 800f7c6:	af00      	add	r7, sp, #0
 800f7c8:	6078      	str	r0, [r7, #4]
 800f7ca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f7d2:	693b      	ldr	r3, [r7, #16]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	2b04      	cmp	r3, #4
 800f7d8:	d102      	bne.n	800f7e0 <dir_sdi+0x1e>
 800f7da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f7de:	e001      	b.n	800f7e4 <dir_sdi+0x22>
 800f7e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	429a      	cmp	r2, r3
 800f7e8:	d904      	bls.n	800f7f4 <dir_sdi+0x32>
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	f003 031f 	and.w	r3, r3, #31
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d001      	beq.n	800f7f8 <dir_sdi+0x36>
		return FR_INT_ERR;
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	e074      	b.n	800f8e2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	683a      	ldr	r2, [r7, #0]
 800f7fc:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d109      	bne.n	800f81e <dir_sdi+0x5c>
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	2b02      	cmp	r3, #2
 800f810:	d905      	bls.n	800f81e <dir_sdi+0x5c>
		clst = fs->dirbase;
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f816:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d10c      	bne.n	800f83e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f824:	683b      	ldr	r3, [r7, #0]
 800f826:	095b      	lsrs	r3, r3, #5
 800f828:	693a      	ldr	r2, [r7, #16]
 800f82a:	8912      	ldrh	r2, [r2, #8]
 800f82c:	4293      	cmp	r3, r2
 800f82e:	d301      	bcc.n	800f834 <dir_sdi+0x72>
 800f830:	2302      	movs	r3, #2
 800f832:	e056      	b.n	800f8e2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	639a      	str	r2, [r3, #56]	; 0x38
 800f83c:	e02d      	b.n	800f89a <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	895b      	ldrh	r3, [r3, #10]
 800f842:	461a      	mov	r2, r3
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	899b      	ldrh	r3, [r3, #12]
 800f848:	fb02 f303 	mul.w	r3, r2, r3
 800f84c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f84e:	e019      	b.n	800f884 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6979      	ldr	r1, [r7, #20]
 800f854:	4618      	mov	r0, r3
 800f856:	f7ff f9e1 	bl	800ec1c <get_fat>
 800f85a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f862:	d101      	bne.n	800f868 <dir_sdi+0xa6>
 800f864:	2301      	movs	r3, #1
 800f866:	e03c      	b.n	800f8e2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f868:	697b      	ldr	r3, [r7, #20]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d904      	bls.n	800f878 <dir_sdi+0xb6>
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	6a1b      	ldr	r3, [r3, #32]
 800f872:	697a      	ldr	r2, [r7, #20]
 800f874:	429a      	cmp	r2, r3
 800f876:	d301      	bcc.n	800f87c <dir_sdi+0xba>
 800f878:	2302      	movs	r3, #2
 800f87a:	e032      	b.n	800f8e2 <dir_sdi+0x120>
			ofs -= csz;
 800f87c:	683a      	ldr	r2, [r7, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	1ad3      	subs	r3, r2, r3
 800f882:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	429a      	cmp	r2, r3
 800f88a:	d2e1      	bcs.n	800f850 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800f88c:	6979      	ldr	r1, [r7, #20]
 800f88e:	6938      	ldr	r0, [r7, #16]
 800f890:	f7ff f9a4 	bl	800ebdc <clust2sect>
 800f894:	4602      	mov	r2, r0
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	697a      	ldr	r2, [r7, #20]
 800f89e:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d101      	bne.n	800f8ac <dir_sdi+0xea>
 800f8a8:	2302      	movs	r3, #2
 800f8aa:	e01a      	b.n	800f8e2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	899b      	ldrh	r3, [r3, #12]
 800f8b4:	4619      	mov	r1, r3
 800f8b6:	683b      	ldr	r3, [r7, #0]
 800f8b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8bc:	441a      	add	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	899b      	ldrh	r3, [r3, #12]
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8d4:	fb00 f202 	mul.w	r2, r0, r2
 800f8d8:	1a9b      	subs	r3, r3, r2
 800f8da:	18ca      	adds	r2, r1, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800f8e0:	2300      	movs	r3, #0
}
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	3718      	adds	r7, #24
 800f8e6:	46bd      	mov	sp, r7
 800f8e8:	bd80      	pop	{r7, pc}

0800f8ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f8ea:	b580      	push	{r7, lr}
 800f8ec:	b086      	sub	sp, #24
 800f8ee:	af00      	add	r7, sp, #0
 800f8f0:	6078      	str	r0, [r7, #4]
 800f8f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fe:	3320      	adds	r3, #32
 800f900:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00b      	beq.n	800f922 <dir_next+0x38>
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	2b04      	cmp	r3, #4
 800f910:	d102      	bne.n	800f918 <dir_next+0x2e>
 800f912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f916:	e001      	b.n	800f91c <dir_next+0x32>
 800f918:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	429a      	cmp	r2, r3
 800f920:	d801      	bhi.n	800f926 <dir_next+0x3c>
 800f922:	2304      	movs	r3, #4
 800f924:	e0c3      	b.n	800faae <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	899b      	ldrh	r3, [r3, #12]
 800f92a:	461a      	mov	r2, r3
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f932:	fb01 f202 	mul.w	r2, r1, r2
 800f936:	1a9b      	subs	r3, r3, r2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	f040 80a5 	bne.w	800fa88 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f942:	1c5a      	adds	r2, r3, #1
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d10b      	bne.n	800f968 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	095b      	lsrs	r3, r3, #5
 800f954:	68fa      	ldr	r2, [r7, #12]
 800f956:	8912      	ldrh	r2, [r2, #8]
 800f958:	4293      	cmp	r3, r2
 800f95a:	f0c0 8095 	bcc.w	800fa88 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2200      	movs	r2, #0
 800f962:	639a      	str	r2, [r3, #56]	; 0x38
 800f964:	2304      	movs	r3, #4
 800f966:	e0a2      	b.n	800faae <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	899b      	ldrh	r3, [r3, #12]
 800f96c:	461a      	mov	r2, r3
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	fbb3 f3f2 	udiv	r3, r3, r2
 800f974:	68fa      	ldr	r2, [r7, #12]
 800f976:	8952      	ldrh	r2, [r2, #10]
 800f978:	3a01      	subs	r2, #1
 800f97a:	4013      	ands	r3, r2
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	f040 8083 	bne.w	800fa88 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f988:	4619      	mov	r1, r3
 800f98a:	4610      	mov	r0, r2
 800f98c:	f7ff f946 	bl	800ec1c <get_fat>
 800f990:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d801      	bhi.n	800f99c <dir_next+0xb2>
 800f998:	2302      	movs	r3, #2
 800f99a:	e088      	b.n	800faae <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a2:	d101      	bne.n	800f9a8 <dir_next+0xbe>
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	e082      	b.n	800faae <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6a1b      	ldr	r3, [r3, #32]
 800f9ac:	697a      	ldr	r2, [r7, #20]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d360      	bcc.n	800fa74 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d104      	bne.n	800f9c2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	639a      	str	r2, [r3, #56]	; 0x38
 800f9be:	2304      	movs	r3, #4
 800f9c0:	e075      	b.n	800faae <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f9c2:	687a      	ldr	r2, [r7, #4]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	4610      	mov	r0, r2
 800f9cc:	f7ff fdac 	bl	800f528 <create_chain>
 800f9d0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d101      	bne.n	800f9dc <dir_next+0xf2>
 800f9d8:	2307      	movs	r3, #7
 800f9da:	e068      	b.n	800faae <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d101      	bne.n	800f9e6 <dir_next+0xfc>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	e063      	b.n	800faae <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ec:	d101      	bne.n	800f9f2 <dir_next+0x108>
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	e05d      	b.n	800faae <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	79db      	ldrb	r3, [r3, #7]
 800f9f6:	f043 0304 	orr.w	r3, r3, #4
 800f9fa:	b2da      	uxtb	r2, r3
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fa00:	68f8      	ldr	r0, [r7, #12]
 800fa02:	f7ff f809 	bl	800ea18 <sync_window>
 800fa06:	4603      	mov	r3, r0
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d001      	beq.n	800fa10 <dir_next+0x126>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e04e      	b.n	800faae <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	899b      	ldrh	r3, [r3, #12]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	2100      	movs	r1, #0
 800fa1e:	f7fe fe31 	bl	800e684 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa22:	2300      	movs	r3, #0
 800fa24:	613b      	str	r3, [r7, #16]
 800fa26:	6979      	ldr	r1, [r7, #20]
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f7ff f8d7 	bl	800ebdc <clust2sect>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	639a      	str	r2, [r3, #56]	; 0x38
 800fa34:	e012      	b.n	800fa5c <dir_next+0x172>
						fs->wflag = 1;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2201      	movs	r2, #1
 800fa3a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fa3c:	68f8      	ldr	r0, [r7, #12]
 800fa3e:	f7fe ffeb 	bl	800ea18 <sync_window>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d001      	beq.n	800fa4c <dir_next+0x162>
 800fa48:	2301      	movs	r3, #1
 800fa4a:	e030      	b.n	800faae <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	613b      	str	r3, [r7, #16]
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa56:	1c5a      	adds	r2, r3, #1
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	639a      	str	r2, [r3, #56]	; 0x38
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	895b      	ldrh	r3, [r3, #10]
 800fa60:	461a      	mov	r2, r3
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	4293      	cmp	r3, r2
 800fa66:	d3e6      	bcc.n	800fa36 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	1ad2      	subs	r2, r2, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	697a      	ldr	r2, [r7, #20]
 800fa78:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800fa7a:	6979      	ldr	r1, [r7, #20]
 800fa7c:	68f8      	ldr	r0, [r7, #12]
 800fa7e:	f7ff f8ad 	bl	800ebdc <clust2sect>
 800fa82:	4602      	mov	r2, r0
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	68ba      	ldr	r2, [r7, #8]
 800fa8c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	899b      	ldrh	r3, [r3, #12]
 800fa98:	461a      	mov	r2, r3
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800faa0:	fb00 f202 	mul.w	r2, r0, r2
 800faa4:	1a9b      	subs	r3, r3, r2
 800faa6:	18ca      	adds	r2, r1, r3
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800faac:	2300      	movs	r3, #0
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3718      	adds	r7, #24
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b086      	sub	sp, #24
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
 800fabe:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fac6:	2100      	movs	r1, #0
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f7ff fe7a 	bl	800f7c2 <dir_sdi>
 800face:	4603      	mov	r3, r0
 800fad0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fad2:	7dfb      	ldrb	r3, [r7, #23]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d140      	bne.n	800fb5a <dir_alloc+0xa4>
		n = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fae0:	4619      	mov	r1, r3
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f7fe ffdc 	bl	800eaa0 <move_window>
 800fae8:	4603      	mov	r3, r0
 800faea:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800faec:	7dfb      	ldrb	r3, [r7, #23]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d132      	bne.n	800fb58 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	781b      	ldrb	r3, [r3, #0]
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	d108      	bne.n	800fb0c <dir_alloc+0x56>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	b25b      	sxtb	r3, r3
 800fb02:	43db      	mvns	r3, r3
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	09db      	lsrs	r3, r3, #7
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	e00f      	b.n	800fb2c <dir_alloc+0x76>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	2be5      	cmp	r3, #229	; 0xe5
 800fb14:	d004      	beq.n	800fb20 <dir_alloc+0x6a>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d101      	bne.n	800fb24 <dir_alloc+0x6e>
 800fb20:	2301      	movs	r3, #1
 800fb22:	e000      	b.n	800fb26 <dir_alloc+0x70>
 800fb24:	2300      	movs	r3, #0
 800fb26:	f003 0301 	and.w	r3, r3, #1
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d007      	beq.n	800fb40 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	3301      	adds	r3, #1
 800fb34:	613b      	str	r3, [r7, #16]
 800fb36:	693a      	ldr	r2, [r7, #16]
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d102      	bne.n	800fb44 <dir_alloc+0x8e>
 800fb3e:	e00c      	b.n	800fb5a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fb40:	2300      	movs	r3, #0
 800fb42:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fb44:	2101      	movs	r1, #1
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7ff fecf 	bl	800f8ea <dir_next>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fb50:	7dfb      	ldrb	r3, [r7, #23]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d0c2      	beq.n	800fadc <dir_alloc+0x26>
 800fb56:	e000      	b.n	800fb5a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800fb58:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
 800fb5c:	2b04      	cmp	r3, #4
 800fb5e:	d101      	bne.n	800fb64 <dir_alloc+0xae>
 800fb60:	2307      	movs	r3, #7
 800fb62:	75fb      	strb	r3, [r7, #23]
	return res;
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb66:	4618      	mov	r0, r3
 800fb68:	3718      	adds	r7, #24
 800fb6a:	46bd      	mov	sp, r7
 800fb6c:	bd80      	pop	{r7, pc}

0800fb6e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b084      	sub	sp, #16
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	331a      	adds	r3, #26
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	f7fe fb7b 	bl	800e278 <ld_word>
 800fb82:	4603      	mov	r3, r0
 800fb84:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d109      	bne.n	800fba2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	3314      	adds	r3, #20
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fe fb70 	bl	800e278 <ld_word>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	041b      	lsls	r3, r3, #16
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fba2:	68fb      	ldr	r3, [r7, #12]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b084      	sub	sp, #16
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	60f8      	str	r0, [r7, #12]
 800fbb4:	60b9      	str	r1, [r7, #8]
 800fbb6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	331a      	adds	r3, #26
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	b292      	uxth	r2, r2
 800fbc0:	4611      	mov	r1, r2
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fe fc6e 	bl	800e4a4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	2b03      	cmp	r3, #3
 800fbce:	d109      	bne.n	800fbe4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	f103 0214 	add.w	r2, r3, #20
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	0c1b      	lsrs	r3, r3, #16
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	4619      	mov	r1, r3
 800fbde:	4610      	mov	r0, r2
 800fbe0:	f7fe fc60 	bl	800e4a4 <st_word>
	}
}
 800fbe4:	bf00      	nop
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800fbec:	b590      	push	{r4, r7, lr}
 800fbee:	b087      	sub	sp, #28
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	331a      	adds	r3, #26
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe fb3c 	bl	800e278 <ld_word>
 800fc00:	4603      	mov	r3, r0
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d001      	beq.n	800fc0a <cmp_lfn+0x1e>
 800fc06:	2300      	movs	r3, #0
 800fc08:	e059      	b.n	800fcbe <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	781b      	ldrb	r3, [r3, #0]
 800fc0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fc12:	1e5a      	subs	r2, r3, #1
 800fc14:	4613      	mov	r3, r2
 800fc16:	005b      	lsls	r3, r3, #1
 800fc18:	4413      	add	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4413      	add	r3, r2
 800fc1e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fc20:	2301      	movs	r3, #1
 800fc22:	81fb      	strh	r3, [r7, #14]
 800fc24:	2300      	movs	r3, #0
 800fc26:	613b      	str	r3, [r7, #16]
 800fc28:	e033      	b.n	800fc92 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fc2a:	4a27      	ldr	r2, [pc, #156]	; (800fcc8 <cmp_lfn+0xdc>)
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	4413      	add	r3, r2
 800fc30:	781b      	ldrb	r3, [r3, #0]
 800fc32:	461a      	mov	r2, r3
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	4413      	add	r3, r2
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7fe fb1d 	bl	800e278 <ld_word>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fc42:	89fb      	ldrh	r3, [r7, #14]
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d01a      	beq.n	800fc7e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	2bfe      	cmp	r3, #254	; 0xfe
 800fc4c:	d812      	bhi.n	800fc74 <cmp_lfn+0x88>
 800fc4e:	89bb      	ldrh	r3, [r7, #12]
 800fc50:	4618      	mov	r0, r3
 800fc52:	f002 fd1b 	bl	801268c <ff_wtoupper>
 800fc56:	4603      	mov	r3, r0
 800fc58:	461c      	mov	r4, r3
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	1c5a      	adds	r2, r3, #1
 800fc5e:	617a      	str	r2, [r7, #20]
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	4413      	add	r3, r2
 800fc66:	881b      	ldrh	r3, [r3, #0]
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f002 fd0f 	bl	801268c <ff_wtoupper>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	429c      	cmp	r4, r3
 800fc72:	d001      	beq.n	800fc78 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800fc74:	2300      	movs	r3, #0
 800fc76:	e022      	b.n	800fcbe <cmp_lfn+0xd2>
			}
			wc = uc;
 800fc78:	89bb      	ldrh	r3, [r7, #12]
 800fc7a:	81fb      	strh	r3, [r7, #14]
 800fc7c:	e006      	b.n	800fc8c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fc7e:	89bb      	ldrh	r3, [r7, #12]
 800fc80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d001      	beq.n	800fc8c <cmp_lfn+0xa0>
 800fc88:	2300      	movs	r3, #0
 800fc8a:	e018      	b.n	800fcbe <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	613b      	str	r3, [r7, #16]
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	2b0c      	cmp	r3, #12
 800fc96:	d9c8      	bls.n	800fc2a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00b      	beq.n	800fcbc <cmp_lfn+0xd0>
 800fca4:	89fb      	ldrh	r3, [r7, #14]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d008      	beq.n	800fcbc <cmp_lfn+0xd0>
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	005b      	lsls	r3, r3, #1
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	881b      	ldrh	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d001      	beq.n	800fcbc <cmp_lfn+0xd0>
 800fcb8:	2300      	movs	r3, #0
 800fcba:	e000      	b.n	800fcbe <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800fcbc:	2301      	movs	r3, #1
}
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	371c      	adds	r7, #28
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd90      	pop	{r4, r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	08013d8c 	.word	0x08013d8c

0800fccc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b086      	sub	sp, #24
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
 800fcd4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	331a      	adds	r3, #26
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fe facc 	bl	800e278 <ld_word>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d001      	beq.n	800fcea <pick_lfn+0x1e>
 800fce6:	2300      	movs	r3, #0
 800fce8:	e04d      	b.n	800fd86 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcf2:	1e5a      	subs	r2, r3, #1
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	005b      	lsls	r3, r3, #1
 800fcf8:	4413      	add	r3, r2
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	4413      	add	r3, r2
 800fcfe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fd00:	2301      	movs	r3, #1
 800fd02:	81fb      	strh	r3, [r7, #14]
 800fd04:	2300      	movs	r3, #0
 800fd06:	613b      	str	r3, [r7, #16]
 800fd08:	e028      	b.n	800fd5c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800fd0a:	4a21      	ldr	r2, [pc, #132]	; (800fd90 <pick_lfn+0xc4>)
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	4413      	add	r3, r2
 800fd10:	781b      	ldrb	r3, [r3, #0]
 800fd12:	461a      	mov	r2, r3
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	4413      	add	r3, r2
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe faad 	bl	800e278 <ld_word>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800fd22:	89fb      	ldrh	r3, [r7, #14]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00f      	beq.n	800fd48 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	2bfe      	cmp	r3, #254	; 0xfe
 800fd2c:	d901      	bls.n	800fd32 <pick_lfn+0x66>
 800fd2e:	2300      	movs	r3, #0
 800fd30:	e029      	b.n	800fd86 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800fd32:	89bb      	ldrh	r3, [r7, #12]
 800fd34:	81fb      	strh	r3, [r7, #14]
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	1c5a      	adds	r2, r3, #1
 800fd3a:	617a      	str	r2, [r7, #20]
 800fd3c:	005b      	lsls	r3, r3, #1
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	4413      	add	r3, r2
 800fd42:	89fa      	ldrh	r2, [r7, #14]
 800fd44:	801a      	strh	r2, [r3, #0]
 800fd46:	e006      	b.n	800fd56 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800fd48:	89bb      	ldrh	r3, [r7, #12]
 800fd4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d001      	beq.n	800fd56 <pick_lfn+0x8a>
 800fd52:	2300      	movs	r3, #0
 800fd54:	e017      	b.n	800fd86 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	613b      	str	r3, [r7, #16]
 800fd5c:	693b      	ldr	r3, [r7, #16]
 800fd5e:	2b0c      	cmp	r3, #12
 800fd60:	d9d3      	bls.n	800fd0a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00a      	beq.n	800fd84 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800fd6e:	697b      	ldr	r3, [r7, #20]
 800fd70:	2bfe      	cmp	r3, #254	; 0xfe
 800fd72:	d901      	bls.n	800fd78 <pick_lfn+0xac>
 800fd74:	2300      	movs	r3, #0
 800fd76:	e006      	b.n	800fd86 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	005b      	lsls	r3, r3, #1
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	4413      	add	r3, r2
 800fd80:	2200      	movs	r2, #0
 800fd82:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800fd84:	2301      	movs	r3, #1
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3718      	adds	r7, #24
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	08013d8c 	.word	0x08013d8c

0800fd94 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	60b9      	str	r1, [r7, #8]
 800fd9e:	4611      	mov	r1, r2
 800fda0:	461a      	mov	r2, r3
 800fda2:	460b      	mov	r3, r1
 800fda4:	71fb      	strb	r3, [r7, #7]
 800fda6:	4613      	mov	r3, r2
 800fda8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	330d      	adds	r3, #13
 800fdae:	79ba      	ldrb	r2, [r7, #6]
 800fdb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	330b      	adds	r3, #11
 800fdb6:	220f      	movs	r2, #15
 800fdb8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	330c      	adds	r3, #12
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	331a      	adds	r3, #26
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7fe fb6b 	bl	800e4a4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800fdce:	79fb      	ldrb	r3, [r7, #7]
 800fdd0:	1e5a      	subs	r2, r3, #1
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	005b      	lsls	r3, r3, #1
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	4413      	add	r3, r2
 800fddc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800fdde:	2300      	movs	r3, #0
 800fde0:	82fb      	strh	r3, [r7, #22]
 800fde2:	2300      	movs	r3, #0
 800fde4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800fde6:	8afb      	ldrh	r3, [r7, #22]
 800fde8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d007      	beq.n	800fe00 <put_lfn+0x6c>
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	1c5a      	adds	r2, r3, #1
 800fdf4:	61fa      	str	r2, [r7, #28]
 800fdf6:	005b      	lsls	r3, r3, #1
 800fdf8:	68fa      	ldr	r2, [r7, #12]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	881b      	ldrh	r3, [r3, #0]
 800fdfe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800fe00:	4a17      	ldr	r2, [pc, #92]	; (800fe60 <put_lfn+0xcc>)
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	4413      	add	r3, r2
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	461a      	mov	r2, r3
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	8afa      	ldrh	r2, [r7, #22]
 800fe10:	4611      	mov	r1, r2
 800fe12:	4618      	mov	r0, r3
 800fe14:	f7fe fb46 	bl	800e4a4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800fe18:	8afb      	ldrh	r3, [r7, #22]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d102      	bne.n	800fe24 <put_lfn+0x90>
 800fe1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe22:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	3301      	adds	r3, #1
 800fe28:	61bb      	str	r3, [r7, #24]
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	2b0c      	cmp	r3, #12
 800fe2e:	d9da      	bls.n	800fde6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800fe30:	8afb      	ldrh	r3, [r7, #22]
 800fe32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe36:	4293      	cmp	r3, r2
 800fe38:	d006      	beq.n	800fe48 <put_lfn+0xb4>
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	68fa      	ldr	r2, [r7, #12]
 800fe40:	4413      	add	r3, r2
 800fe42:	881b      	ldrh	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d103      	bne.n	800fe50 <put_lfn+0xbc>
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe4e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	79fa      	ldrb	r2, [r7, #7]
 800fe54:	701a      	strb	r2, [r3, #0]
}
 800fe56:	bf00      	nop
 800fe58:	3720      	adds	r7, #32
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	08013d8c 	.word	0x08013d8c

0800fe64 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08c      	sub	sp, #48	; 0x30
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	60f8      	str	r0, [r7, #12]
 800fe6c:	60b9      	str	r1, [r7, #8]
 800fe6e:	607a      	str	r2, [r7, #4]
 800fe70:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800fe72:	220b      	movs	r2, #11
 800fe74:	68b9      	ldr	r1, [r7, #8]
 800fe76:	68f8      	ldr	r0, [r7, #12]
 800fe78:	f7fe fbe3 	bl	800e642 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800fe7c:	683b      	ldr	r3, [r7, #0]
 800fe7e:	2b05      	cmp	r3, #5
 800fe80:	d929      	bls.n	800fed6 <gen_numname+0x72>
		sr = seq;
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800fe86:	e020      	b.n	800feca <gen_numname+0x66>
			wc = *lfn++;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	1c9a      	adds	r2, r3, #2
 800fe8c:	607a      	str	r2, [r7, #4]
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800fe92:	2300      	movs	r3, #0
 800fe94:	62bb      	str	r3, [r7, #40]	; 0x28
 800fe96:	e015      	b.n	800fec4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	005a      	lsls	r2, r3, #1
 800fe9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fe9e:	f003 0301 	and.w	r3, r3, #1
 800fea2:	4413      	add	r3, r2
 800fea4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800fea6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fea8:	085b      	lsrs	r3, r3, #1
 800feaa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800feac:	69fb      	ldr	r3, [r7, #28]
 800feae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d003      	beq.n	800febe <gen_numname+0x5a>
 800feb6:	69fa      	ldr	r2, [r7, #28]
 800feb8:	4b30      	ldr	r3, [pc, #192]	; (800ff7c <gen_numname+0x118>)
 800feba:	4053      	eors	r3, r2
 800febc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	3301      	adds	r3, #1
 800fec2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	2b0f      	cmp	r3, #15
 800fec8:	d9e6      	bls.n	800fe98 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d1da      	bne.n	800fe88 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800fed6:	2307      	movs	r3, #7
 800fed8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	b2db      	uxtb	r3, r3
 800fede:	f003 030f 	and.w	r3, r3, #15
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	3330      	adds	r3, #48	; 0x30
 800fee6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800feea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800feee:	2b39      	cmp	r3, #57	; 0x39
 800fef0:	d904      	bls.n	800fefc <gen_numname+0x98>
 800fef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fef6:	3307      	adds	r3, #7
 800fef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800fefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefe:	1e5a      	subs	r2, r3, #1
 800ff00:	62ba      	str	r2, [r7, #40]	; 0x28
 800ff02:	3330      	adds	r3, #48	; 0x30
 800ff04:	443b      	add	r3, r7
 800ff06:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ff0a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	091b      	lsrs	r3, r3, #4
 800ff12:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d1df      	bne.n	800feda <gen_numname+0x76>
	ns[i] = '~';
 800ff1a:	f107 0214 	add.w	r2, r7, #20
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	4413      	add	r3, r2
 800ff22:	227e      	movs	r2, #126	; 0x7e
 800ff24:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ff26:	2300      	movs	r3, #0
 800ff28:	627b      	str	r3, [r7, #36]	; 0x24
 800ff2a:	e002      	b.n	800ff32 <gen_numname+0xce>
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	3301      	adds	r3, #1
 800ff30:	627b      	str	r3, [r7, #36]	; 0x24
 800ff32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff36:	429a      	cmp	r2, r3
 800ff38:	d205      	bcs.n	800ff46 <gen_numname+0xe2>
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	4413      	add	r3, r2
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	2b20      	cmp	r3, #32
 800ff44:	d1f2      	bne.n	800ff2c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ff46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff48:	2b07      	cmp	r3, #7
 800ff4a:	d807      	bhi.n	800ff5c <gen_numname+0xf8>
 800ff4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	62ba      	str	r2, [r7, #40]	; 0x28
 800ff52:	3330      	adds	r3, #48	; 0x30
 800ff54:	443b      	add	r3, r7
 800ff56:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ff5a:	e000      	b.n	800ff5e <gen_numname+0xfa>
 800ff5c:	2120      	movs	r1, #32
 800ff5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff60:	1c5a      	adds	r2, r3, #1
 800ff62:	627a      	str	r2, [r7, #36]	; 0x24
 800ff64:	68fa      	ldr	r2, [r7, #12]
 800ff66:	4413      	add	r3, r2
 800ff68:	460a      	mov	r2, r1
 800ff6a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ff6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6e:	2b07      	cmp	r3, #7
 800ff70:	d9e9      	bls.n	800ff46 <gen_numname+0xe2>
}
 800ff72:	bf00      	nop
 800ff74:	bf00      	nop
 800ff76:	3730      	adds	r7, #48	; 0x30
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	00011021 	.word	0x00011021

0800ff80 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ff80:	b480      	push	{r7}
 800ff82:	b085      	sub	sp, #20
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ff8c:	230b      	movs	r3, #11
 800ff8e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ff90:	7bfb      	ldrb	r3, [r7, #15]
 800ff92:	b2da      	uxtb	r2, r3
 800ff94:	0852      	lsrs	r2, r2, #1
 800ff96:	01db      	lsls	r3, r3, #7
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	b2da      	uxtb	r2, r3
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	1c59      	adds	r1, r3, #1
 800ffa0:	6079      	str	r1, [r7, #4]
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	60bb      	str	r3, [r7, #8]
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1ed      	bne.n	800ff90 <sum_sfn+0x10>
	return sum;
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr

0800ffc2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ffc2:	b480      	push	{r7}
 800ffc4:	b087      	sub	sp, #28
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	781b      	ldrb	r3, [r3, #0]
 800ffd0:	3301      	adds	r3, #1
 800ffd2:	015b      	lsls	r3, r3, #5
 800ffd4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	827b      	strh	r3, [r7, #18]
 800ffda:	2300      	movs	r3, #0
 800ffdc:	617b      	str	r3, [r7, #20]
 800ffde:	e018      	b.n	8010012 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	2b02      	cmp	r3, #2
 800ffe4:	d103      	bne.n	800ffee <xdir_sum+0x2c>
			i++;
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	617b      	str	r3, [r7, #20]
 800ffec:	e00e      	b.n	801000c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ffee:	8a7b      	ldrh	r3, [r7, #18]
 800fff0:	03db      	lsls	r3, r3, #15
 800fff2:	b29a      	uxth	r2, r3
 800fff4:	8a7b      	ldrh	r3, [r7, #18]
 800fff6:	085b      	lsrs	r3, r3, #1
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4413      	add	r3, r2
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	6879      	ldr	r1, [r7, #4]
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	440b      	add	r3, r1
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	b29b      	uxth	r3, r3
 8010008:	4413      	add	r3, r2
 801000a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 801000c:	697b      	ldr	r3, [r7, #20]
 801000e:	3301      	adds	r3, #1
 8010010:	617b      	str	r3, [r7, #20]
 8010012:	697a      	ldr	r2, [r7, #20]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	429a      	cmp	r2, r3
 8010018:	d3e2      	bcc.n	800ffe0 <xdir_sum+0x1e>
		}
	}
	return sum;
 801001a:	8a7b      	ldrh	r3, [r7, #18]
}
 801001c:	4618      	mov	r0, r3
 801001e:	371c      	adds	r7, #28
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr

08010028 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8010028:	b580      	push	{r7, lr}
 801002a:	b084      	sub	sp, #16
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8010030:	2300      	movs	r3, #0
 8010032:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8010034:	e01f      	b.n	8010076 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8010036:	89bb      	ldrh	r3, [r7, #12]
 8010038:	4618      	mov	r0, r3
 801003a:	f002 fb27 	bl	801268c <ff_wtoupper>
 801003e:	4603      	mov	r3, r0
 8010040:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8010042:	89fb      	ldrh	r3, [r7, #14]
 8010044:	03db      	lsls	r3, r3, #15
 8010046:	b29a      	uxth	r2, r3
 8010048:	89fb      	ldrh	r3, [r7, #14]
 801004a:	085b      	lsrs	r3, r3, #1
 801004c:	b29b      	uxth	r3, r3
 801004e:	4413      	add	r3, r2
 8010050:	b29a      	uxth	r2, r3
 8010052:	89bb      	ldrh	r3, [r7, #12]
 8010054:	b2db      	uxtb	r3, r3
 8010056:	b29b      	uxth	r3, r3
 8010058:	4413      	add	r3, r2
 801005a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 801005c:	89fb      	ldrh	r3, [r7, #14]
 801005e:	03db      	lsls	r3, r3, #15
 8010060:	b29a      	uxth	r2, r3
 8010062:	89fb      	ldrh	r3, [r7, #14]
 8010064:	085b      	lsrs	r3, r3, #1
 8010066:	b29b      	uxth	r3, r3
 8010068:	4413      	add	r3, r2
 801006a:	b29a      	uxth	r2, r3
 801006c:	89bb      	ldrh	r3, [r7, #12]
 801006e:	0a1b      	lsrs	r3, r3, #8
 8010070:	b29b      	uxth	r3, r3
 8010072:	4413      	add	r3, r2
 8010074:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	1c9a      	adds	r2, r3, #2
 801007a:	607a      	str	r2, [r7, #4]
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	81bb      	strh	r3, [r7, #12]
 8010080:	89bb      	ldrh	r3, [r7, #12]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d1d7      	bne.n	8010036 <xname_sum+0xe>
	}
	return sum;
 8010086:	89fb      	ldrh	r3, [r7, #14]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3710      	adds	r7, #16
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8010090:	b590      	push	{r4, r7, lr}
 8010092:	b087      	sub	sp, #28
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	695b      	ldr	r3, [r3, #20]
 801009e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681a      	ldr	r2, [r3, #0]
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a8:	4619      	mov	r1, r3
 80100aa:	4610      	mov	r0, r2
 80100ac:	f7fe fcf8 	bl	800eaa0 <move_window>
 80100b0:	4603      	mov	r3, r0
 80100b2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <load_xdir+0x2e>
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
 80100bc:	e09f      	b.n	80101fe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100c2:	781b      	ldrb	r3, [r3, #0]
 80100c4:	2b85      	cmp	r3, #133	; 0x85
 80100c6:	d001      	beq.n	80100cc <load_xdir+0x3c>
 80100c8:	2302      	movs	r3, #2
 80100ca:	e098      	b.n	80101fe <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100d0:	2220      	movs	r2, #32
 80100d2:	4619      	mov	r1, r3
 80100d4:	6938      	ldr	r0, [r7, #16]
 80100d6:	f7fe fab4 	bl	800e642 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80100da:	693b      	ldr	r3, [r7, #16]
 80100dc:	3301      	adds	r3, #1
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	3301      	adds	r3, #1
 80100e2:	015b      	lsls	r3, r3, #5
 80100e4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	2b5f      	cmp	r3, #95	; 0x5f
 80100ea:	d903      	bls.n	80100f4 <load_xdir+0x64>
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80100f2:	d901      	bls.n	80100f8 <load_xdir+0x68>
 80100f4:	2302      	movs	r3, #2
 80100f6:	e082      	b.n	80101fe <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 80100f8:	2100      	movs	r1, #0
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff fbf5 	bl	800f8ea <dir_next>
 8010100:	4603      	mov	r3, r0
 8010102:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8010104:	7bfb      	ldrb	r3, [r7, #15]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <load_xdir+0x7e>
 801010a:	7bfb      	ldrb	r3, [r7, #15]
 801010c:	e077      	b.n	80101fe <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681a      	ldr	r2, [r3, #0]
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010116:	4619      	mov	r1, r3
 8010118:	4610      	mov	r0, r2
 801011a:	f7fe fcc1 	bl	800eaa0 <move_window>
 801011e:	4603      	mov	r3, r0
 8010120:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8010122:	7bfb      	ldrb	r3, [r7, #15]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d001      	beq.n	801012c <load_xdir+0x9c>
 8010128:	7bfb      	ldrb	r3, [r7, #15]
 801012a:	e068      	b.n	80101fe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	2bc0      	cmp	r3, #192	; 0xc0
 8010134:	d001      	beq.n	801013a <load_xdir+0xaa>
 8010136:	2302      	movs	r3, #2
 8010138:	e061      	b.n	80101fe <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	f103 0020 	add.w	r0, r3, #32
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010144:	2220      	movs	r2, #32
 8010146:	4619      	mov	r1, r3
 8010148:	f7fe fa7b 	bl	800e642 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 801014c:	693b      	ldr	r3, [r7, #16]
 801014e:	3323      	adds	r3, #35	; 0x23
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	332c      	adds	r3, #44	; 0x2c
 8010154:	4a2c      	ldr	r2, [pc, #176]	; (8010208 <load_xdir+0x178>)
 8010156:	fba2 2303 	umull	r2, r3, r2, r3
 801015a:	08db      	lsrs	r3, r3, #3
 801015c:	015b      	lsls	r3, r3, #5
 801015e:	68ba      	ldr	r2, [r7, #8]
 8010160:	429a      	cmp	r2, r3
 8010162:	d201      	bcs.n	8010168 <load_xdir+0xd8>
 8010164:	2302      	movs	r3, #2
 8010166:	e04a      	b.n	80101fe <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8010168:	2340      	movs	r3, #64	; 0x40
 801016a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 801016c:	2100      	movs	r1, #0
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fbbb 	bl	800f8ea <dir_next>
 8010174:	4603      	mov	r3, r0
 8010176:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8010178:	7bfb      	ldrb	r3, [r7, #15]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d001      	beq.n	8010182 <load_xdir+0xf2>
 801017e:	7bfb      	ldrb	r3, [r7, #15]
 8010180:	e03d      	b.n	80101fe <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681a      	ldr	r2, [r3, #0]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801018a:	4619      	mov	r1, r3
 801018c:	4610      	mov	r0, r2
 801018e:	f7fe fc87 	bl	800eaa0 <move_window>
 8010192:	4603      	mov	r3, r0
 8010194:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8010196:	7bfb      	ldrb	r3, [r7, #15]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d001      	beq.n	80101a0 <load_xdir+0x110>
 801019c:	7bfb      	ldrb	r3, [r7, #15]
 801019e:	e02e      	b.n	80101fe <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	2bc1      	cmp	r3, #193	; 0xc1
 80101a8:	d001      	beq.n	80101ae <load_xdir+0x11e>
 80101aa:	2302      	movs	r3, #2
 80101ac:	e027      	b.n	80101fe <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80101b4:	d208      	bcs.n	80101c8 <load_xdir+0x138>
 80101b6:	693a      	ldr	r2, [r7, #16]
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	18d0      	adds	r0, r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101c0:	2220      	movs	r2, #32
 80101c2:	4619      	mov	r1, r3
 80101c4:	f7fe fa3d 	bl	800e642 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	3320      	adds	r3, #32
 80101cc:	617b      	str	r3, [r7, #20]
 80101ce:	697a      	ldr	r2, [r7, #20]
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	429a      	cmp	r2, r3
 80101d4:	d3ca      	bcc.n	801016c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80101dc:	d80e      	bhi.n	80101fc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80101de:	6938      	ldr	r0, [r7, #16]
 80101e0:	f7ff feef 	bl	800ffc2 <xdir_sum>
 80101e4:	4603      	mov	r3, r0
 80101e6:	461c      	mov	r4, r3
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	3302      	adds	r3, #2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe f843 	bl	800e278 <ld_word>
 80101f2:	4603      	mov	r3, r0
 80101f4:	429c      	cmp	r4, r3
 80101f6:	d001      	beq.n	80101fc <load_xdir+0x16c>
 80101f8:	2302      	movs	r3, #2
 80101fa:	e000      	b.n	80101fe <load_xdir+0x16e>
	}
	return FR_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	371c      	adds	r7, #28
 8010202:	46bd      	mov	sp, r7
 8010204:	bd90      	pop	{r4, r7, pc}
 8010206:	bf00      	nop
 8010208:	88888889 	.word	0x88888889

0801020c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 801020c:	b5b0      	push	{r4, r5, r7, lr}
 801020e:	b084      	sub	sp, #16
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8010216:	6839      	ldr	r1, [r7, #0]
 8010218:	6808      	ldr	r0, [r1, #0]
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 801021e:	6839      	ldr	r1, [r7, #0]
 8010220:	6a08      	ldr	r0, [r1, #32]
 8010222:	6879      	ldr	r1, [r7, #4]
 8010224:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8010226:	6839      	ldr	r1, [r7, #0]
 8010228:	6a49      	ldr	r1, [r1, #36]	; 0x24
 801022a:	b2c8      	uxtb	r0, r1
 801022c:	6879      	ldr	r1, [r7, #4]
 801022e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8010230:	6839      	ldr	r1, [r7, #0]
 8010232:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8010234:	2000      	movs	r0, #0
 8010236:	460c      	mov	r4, r1
 8010238:	4605      	mov	r5, r0
 801023a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 801023e:	2300      	movs	r3, #0
 8010240:	6879      	ldr	r1, [r7, #4]
 8010242:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8010246:	683b      	ldr	r3, [r7, #0]
 8010248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010252:	4619      	mov	r1, r3
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f7ff fab4 	bl	800f7c2 <dir_sdi>
 801025a:	4603      	mov	r3, r0
 801025c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801025e:	7bfb      	ldrb	r3, [r7, #15]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d104      	bne.n	801026e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f7ff ff13 	bl	8010090 <load_xdir>
 801026a:	4603      	mov	r3, r0
 801026c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 801026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bdb0      	pop	{r4, r5, r7, pc}

08010278 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8010278:	b590      	push	{r4, r7, lr}
 801027a:	b087      	sub	sp, #28
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	695b      	ldr	r3, [r3, #20]
 8010286:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	1c9c      	adds	r4, r3, #2
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f7ff fe98 	bl	800ffc2 <xdir_sum>
 8010292:	4603      	mov	r3, r0
 8010294:	4619      	mov	r1, r3
 8010296:	4620      	mov	r0, r4
 8010298:	f7fe f904 	bl	800e4a4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	3301      	adds	r3, #1
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	3301      	adds	r3, #1
 80102a4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102aa:	4619      	mov	r1, r3
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff fa88 	bl	800f7c2 <dir_sdi>
 80102b2:	4603      	mov	r3, r0
 80102b4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80102b6:	e026      	b.n	8010306 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	f7fe fbec 	bl	800eaa0 <move_window>
 80102c8:	4603      	mov	r3, r0
 80102ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80102cc:	7dfb      	ldrb	r3, [r7, #23]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d11d      	bne.n	801030e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102d6:	2220      	movs	r2, #32
 80102d8:	68f9      	ldr	r1, [r7, #12]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fe f9b1 	bl	800e642 <mem_cpy>
		dp->obj.fs->wflag = 1;
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	2201      	movs	r2, #1
 80102e6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 80102e8:	693b      	ldr	r3, [r7, #16]
 80102ea:	3b01      	subs	r3, #1
 80102ec:	613b      	str	r3, [r7, #16]
 80102ee:	693b      	ldr	r3, [r7, #16]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00e      	beq.n	8010312 <store_xdir+0x9a>
		dirb += SZDIRE;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	3320      	adds	r3, #32
 80102f8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 80102fa:	2100      	movs	r1, #0
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7ff faf4 	bl	800f8ea <dir_next>
 8010302:	4603      	mov	r3, r0
 8010304:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8010306:	7dfb      	ldrb	r3, [r7, #23]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d0d5      	beq.n	80102b8 <store_xdir+0x40>
 801030c:	e002      	b.n	8010314 <store_xdir+0x9c>
		if (res != FR_OK) break;
 801030e:	bf00      	nop
 8010310:	e000      	b.n	8010314 <store_xdir+0x9c>
		if (--nent == 0) break;
 8010312:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8010314:	7dfb      	ldrb	r3, [r7, #23]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d002      	beq.n	8010320 <store_xdir+0xa8>
 801031a:	7dfb      	ldrb	r3, [r7, #23]
 801031c:	2b01      	cmp	r3, #1
 801031e:	d101      	bne.n	8010324 <store_xdir+0xac>
 8010320:	7dfb      	ldrb	r3, [r7, #23]
 8010322:	e000      	b.n	8010326 <store_xdir+0xae>
 8010324:	2302      	movs	r3, #2
}
 8010326:	4618      	mov	r0, r3
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	bd90      	pop	{r4, r7, pc}

0801032e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 801032e:	b590      	push	{r4, r7, lr}
 8010330:	b085      	sub	sp, #20
 8010332:	af00      	add	r7, sp, #0
 8010334:	6078      	str	r0, [r7, #4]
 8010336:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8010338:	2240      	movs	r2, #64	; 0x40
 801033a:	2100      	movs	r1, #0
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f7fe f9a1 	bl	800e684 <mem_set>
	dirb[XDIR_Type] = 0x85;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2285      	movs	r2, #133	; 0x85
 8010346:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	3320      	adds	r3, #32
 801034c:	22c0      	movs	r2, #192	; 0xc0
 801034e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8010350:	2300      	movs	r3, #0
 8010352:	72bb      	strb	r3, [r7, #10]
 8010354:	2301      	movs	r3, #1
 8010356:	72fb      	strb	r3, [r7, #11]
 8010358:	2301      	movs	r3, #1
 801035a:	813b      	strh	r3, [r7, #8]
 801035c:	2340      	movs	r3, #64	; 0x40
 801035e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	1c5a      	adds	r2, r3, #1
 8010364:	60fa      	str	r2, [r7, #12]
 8010366:	687a      	ldr	r2, [r7, #4]
 8010368:	4413      	add	r3, r2
 801036a:	22c1      	movs	r2, #193	; 0xc1
 801036c:	701a      	strb	r2, [r3, #0]
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	1c5a      	adds	r2, r3, #1
 8010372:	60fa      	str	r2, [r7, #12]
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	4413      	add	r3, r2
 8010378:	2200      	movs	r2, #0
 801037a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 801037c:	893b      	ldrh	r3, [r7, #8]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00b      	beq.n	801039a <create_xdir+0x6c>
 8010382:	7abb      	ldrb	r3, [r7, #10]
 8010384:	005b      	lsls	r3, r3, #1
 8010386:	683a      	ldr	r2, [r7, #0]
 8010388:	4413      	add	r3, r2
 801038a:	881b      	ldrh	r3, [r3, #0]
 801038c:	813b      	strh	r3, [r7, #8]
 801038e:	893b      	ldrh	r3, [r7, #8]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d002      	beq.n	801039a <create_xdir+0x6c>
 8010394:	7abb      	ldrb	r3, [r7, #10]
 8010396:	3301      	adds	r3, #1
 8010398:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	4413      	add	r3, r2
 80103a0:	893a      	ldrh	r2, [r7, #8]
 80103a2:	4611      	mov	r1, r2
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fe f87d 	bl	800e4a4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	3302      	adds	r3, #2
 80103ae:	60fb      	str	r3, [r7, #12]
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	f003 031f 	and.w	r3, r3, #31
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d1e0      	bne.n	801037c <create_xdir+0x4e>
		nb++;
 80103ba:	7afb      	ldrb	r3, [r7, #11]
 80103bc:	3301      	adds	r3, #1
 80103be:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80103c0:	7abb      	ldrb	r3, [r7, #10]
 80103c2:	005b      	lsls	r3, r3, #1
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	4413      	add	r3, r2
 80103c8:	881b      	ldrh	r3, [r3, #0]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1c8      	bne.n	8010360 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	3323      	adds	r3, #35	; 0x23
 80103d2:	7aba      	ldrb	r2, [r7, #10]
 80103d4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	3301      	adds	r3, #1
 80103da:	7afa      	ldrb	r2, [r7, #11]
 80103dc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80103e4:	6838      	ldr	r0, [r7, #0]
 80103e6:	f7ff fe1f 	bl	8010028 <xname_sum>
 80103ea:	4603      	mov	r3, r0
 80103ec:	4619      	mov	r1, r3
 80103ee:	4620      	mov	r0, r4
 80103f0:	f7fe f858 	bl	800e4a4 <st_word>
}
 80103f4:	bf00      	nop
 80103f6:	3714      	adds	r7, #20
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd90      	pop	{r4, r7, pc}

080103fc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b086      	sub	sp, #24
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
 8010404:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010406:	2304      	movs	r3, #4
 8010408:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8010410:	23ff      	movs	r3, #255	; 0xff
 8010412:	757b      	strb	r3, [r7, #21]
 8010414:	23ff      	movs	r3, #255	; 0xff
 8010416:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8010418:	e09f      	b.n	801055a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801041e:	4619      	mov	r1, r3
 8010420:	6938      	ldr	r0, [r7, #16]
 8010422:	f7fe fb3d 	bl	800eaa0 <move_window>
 8010426:	4603      	mov	r3, r0
 8010428:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801042a:	7dfb      	ldrb	r3, [r7, #23]
 801042c:	2b00      	cmp	r3, #0
 801042e:	f040 809a 	bne.w	8010566 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 801043a:	7dbb      	ldrb	r3, [r7, #22]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d102      	bne.n	8010446 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010440:	2304      	movs	r3, #4
 8010442:	75fb      	strb	r3, [r7, #23]
 8010444:	e096      	b.n	8010574 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	2b04      	cmp	r3, #4
 801044c:	d118      	bne.n	8010480 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 801044e:	7dbb      	ldrb	r3, [r7, #22]
 8010450:	2b85      	cmp	r3, #133	; 0x85
 8010452:	d179      	bne.n	8010548 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7ff fe17 	bl	8010090 <load_xdir>
 8010462:	4603      	mov	r3, r0
 8010464:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8010466:	7dfb      	ldrb	r3, [r7, #23]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d17e      	bne.n	801056a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	695b      	ldr	r3, [r3, #20]
 8010470:	3304      	adds	r3, #4
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010478:	b2da      	uxtb	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	719a      	strb	r2, [r3, #6]
					}
					break;
 801047e:	e074      	b.n	801056a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010484:	330b      	adds	r3, #11
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801048c:	73fb      	strb	r3, [r7, #15]
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	7bfa      	ldrb	r2, [r7, #15]
 8010492:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8010494:	7dbb      	ldrb	r3, [r7, #22]
 8010496:	2be5      	cmp	r3, #229	; 0xe5
 8010498:	d00e      	beq.n	80104b8 <dir_read+0xbc>
 801049a:	7dbb      	ldrb	r3, [r7, #22]
 801049c:	2b2e      	cmp	r3, #46	; 0x2e
 801049e:	d00b      	beq.n	80104b8 <dir_read+0xbc>
 80104a0:	7bfb      	ldrb	r3, [r7, #15]
 80104a2:	f023 0320 	bic.w	r3, r3, #32
 80104a6:	2b08      	cmp	r3, #8
 80104a8:	bf0c      	ite	eq
 80104aa:	2301      	moveq	r3, #1
 80104ac:	2300      	movne	r3, #0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	461a      	mov	r2, r3
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d002      	beq.n	80104be <dir_read+0xc2>
				ord = 0xFF;
 80104b8:	23ff      	movs	r3, #255	; 0xff
 80104ba:	757b      	strb	r3, [r7, #21]
 80104bc:	e044      	b.n	8010548 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80104be:	7bfb      	ldrb	r3, [r7, #15]
 80104c0:	2b0f      	cmp	r3, #15
 80104c2:	d12f      	bne.n	8010524 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80104c4:	7dbb      	ldrb	r3, [r7, #22]
 80104c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d00d      	beq.n	80104ea <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104d2:	7b5b      	ldrb	r3, [r3, #13]
 80104d4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80104d6:	7dbb      	ldrb	r3, [r7, #22]
 80104d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80104dc:	75bb      	strb	r3, [r7, #22]
 80104de:	7dbb      	ldrb	r3, [r7, #22]
 80104e0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80104ea:	7dba      	ldrb	r2, [r7, #22]
 80104ec:	7d7b      	ldrb	r3, [r7, #21]
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d115      	bne.n	801051e <dir_read+0x122>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104f6:	330d      	adds	r3, #13
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	7d3a      	ldrb	r2, [r7, #20]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d10e      	bne.n	801051e <dir_read+0x122>
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	691a      	ldr	r2, [r3, #16]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010508:	4619      	mov	r1, r3
 801050a:	4610      	mov	r0, r2
 801050c:	f7ff fbde 	bl	800fccc <pick_lfn>
 8010510:	4603      	mov	r3, r0
 8010512:	2b00      	cmp	r3, #0
 8010514:	d003      	beq.n	801051e <dir_read+0x122>
 8010516:	7d7b      	ldrb	r3, [r7, #21]
 8010518:	3b01      	subs	r3, #1
 801051a:	b2db      	uxtb	r3, r3
 801051c:	e000      	b.n	8010520 <dir_read+0x124>
 801051e:	23ff      	movs	r3, #255	; 0xff
 8010520:	757b      	strb	r3, [r7, #21]
 8010522:	e011      	b.n	8010548 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8010524:	7d7b      	ldrb	r3, [r7, #21]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d109      	bne.n	801053e <dir_read+0x142>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801052e:	4618      	mov	r0, r3
 8010530:	f7ff fd26 	bl	800ff80 <sum_sfn>
 8010534:	4603      	mov	r3, r0
 8010536:	461a      	mov	r2, r3
 8010538:	7d3b      	ldrb	r3, [r7, #20]
 801053a:	4293      	cmp	r3, r2
 801053c:	d017      	beq.n	801056e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	f04f 32ff 	mov.w	r2, #4294967295
 8010544:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8010546:	e012      	b.n	801056e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010548:	2100      	movs	r1, #0
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7ff f9cd 	bl	800f8ea <dir_next>
 8010550:	4603      	mov	r3, r0
 8010552:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010554:	7dfb      	ldrb	r3, [r7, #23]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d10b      	bne.n	8010572 <dir_read+0x176>
	while (dp->sect) {
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801055e:	2b00      	cmp	r3, #0
 8010560:	f47f af5b 	bne.w	801041a <dir_read+0x1e>
 8010564:	e006      	b.n	8010574 <dir_read+0x178>
		if (res != FR_OK) break;
 8010566:	bf00      	nop
 8010568:	e004      	b.n	8010574 <dir_read+0x178>
					break;
 801056a:	bf00      	nop
 801056c:	e002      	b.n	8010574 <dir_read+0x178>
					break;
 801056e:	bf00      	nop
 8010570:	e000      	b.n	8010574 <dir_read+0x178>
		if (res != FR_OK) break;
 8010572:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010574:	7dfb      	ldrb	r3, [r7, #23]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d002      	beq.n	8010580 <dir_read+0x184>
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2200      	movs	r2, #0
 801057e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8010580:	7dfb      	ldrb	r3, [r7, #23]
}
 8010582:	4618      	mov	r0, r3
 8010584:	3718      	adds	r7, #24
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}

0801058a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801058a:	b590      	push	{r4, r7, lr}
 801058c:	b089      	sub	sp, #36	; 0x24
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010598:	2100      	movs	r1, #0
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f7ff f911 	bl	800f7c2 <dir_sdi>
 80105a0:	4603      	mov	r3, r0
 80105a2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80105a4:	7ffb      	ldrb	r3, [r7, #31]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d001      	beq.n	80105ae <dir_find+0x24>
 80105aa:	7ffb      	ldrb	r3, [r7, #31]
 80105ac:	e112      	b.n	80107d4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	781b      	ldrb	r3, [r3, #0]
 80105b2:	2b04      	cmp	r3, #4
 80105b4:	d164      	bne.n	8010680 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	691b      	ldr	r3, [r3, #16]
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7ff fd34 	bl	8010028 <xname_sum>
 80105c0:	4603      	mov	r3, r0
 80105c2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80105c4:	e04f      	b.n	8010666 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	695b      	ldr	r3, [r3, #20]
 80105ca:	3324      	adds	r3, #36	; 0x24
 80105cc:	4618      	mov	r0, r3
 80105ce:	f7fd fe53 	bl	800e278 <ld_word>
 80105d2:	4603      	mov	r3, r0
 80105d4:	461a      	mov	r2, r3
 80105d6:	893b      	ldrh	r3, [r7, #8]
 80105d8:	4293      	cmp	r3, r2
 80105da:	d000      	beq.n	80105de <dir_find+0x54>
 80105dc:	e043      	b.n	8010666 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	695b      	ldr	r3, [r3, #20]
 80105e2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80105e6:	76fb      	strb	r3, [r7, #27]
 80105e8:	2340      	movs	r3, #64	; 0x40
 80105ea:	617b      	str	r3, [r7, #20]
 80105ec:	2300      	movs	r3, #0
 80105ee:	613b      	str	r3, [r7, #16]
 80105f0:	e029      	b.n	8010646 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	f003 031f 	and.w	r3, r3, #31
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d102      	bne.n	8010602 <dir_find+0x78>
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	3302      	adds	r3, #2
 8010600:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	695a      	ldr	r2, [r3, #20]
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	4413      	add	r3, r2
 801060a:	4618      	mov	r0, r3
 801060c:	f7fd fe34 	bl	800e278 <ld_word>
 8010610:	4603      	mov	r3, r0
 8010612:	4618      	mov	r0, r3
 8010614:	f002 f83a 	bl	801268c <ff_wtoupper>
 8010618:	4603      	mov	r3, r0
 801061a:	461c      	mov	r4, r3
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	691a      	ldr	r2, [r3, #16]
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4413      	add	r3, r2
 8010626:	881b      	ldrh	r3, [r3, #0]
 8010628:	4618      	mov	r0, r3
 801062a:	f002 f82f 	bl	801268c <ff_wtoupper>
 801062e:	4603      	mov	r3, r0
 8010630:	429c      	cmp	r4, r3
 8010632:	d10c      	bne.n	801064e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8010634:	7efb      	ldrb	r3, [r7, #27]
 8010636:	3b01      	subs	r3, #1
 8010638:	76fb      	strb	r3, [r7, #27]
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	3302      	adds	r3, #2
 801063e:	617b      	str	r3, [r7, #20]
 8010640:	693b      	ldr	r3, [r7, #16]
 8010642:	3301      	adds	r3, #1
 8010644:	613b      	str	r3, [r7, #16]
 8010646:	7efb      	ldrb	r3, [r7, #27]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d1d2      	bne.n	80105f2 <dir_find+0x68>
 801064c:	e000      	b.n	8010650 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 801064e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8010650:	7efb      	ldrb	r3, [r7, #27]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d107      	bne.n	8010666 <dir_find+0xdc>
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	691a      	ldr	r2, [r3, #16]
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	005b      	lsls	r3, r3, #1
 801065e:	4413      	add	r3, r2
 8010660:	881b      	ldrh	r3, [r3, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d009      	beq.n	801067a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8010666:	2100      	movs	r1, #0
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7ff fec7 	bl	80103fc <dir_read>
 801066e:	4603      	mov	r3, r0
 8010670:	77fb      	strb	r3, [r7, #31]
 8010672:	7ffb      	ldrb	r3, [r7, #31]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d0a6      	beq.n	80105c6 <dir_find+0x3c>
 8010678:	e000      	b.n	801067c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 801067a:	bf00      	nop
		}
		return res;
 801067c:	7ffb      	ldrb	r3, [r7, #31]
 801067e:	e0a9      	b.n	80107d4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010680:	23ff      	movs	r3, #255	; 0xff
 8010682:	773b      	strb	r3, [r7, #28]
 8010684:	7f3b      	ldrb	r3, [r7, #28]
 8010686:	777b      	strb	r3, [r7, #29]
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f04f 32ff 	mov.w	r2, #4294967295
 801068e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010694:	4619      	mov	r1, r3
 8010696:	68f8      	ldr	r0, [r7, #12]
 8010698:	f7fe fa02 	bl	800eaa0 <move_window>
 801069c:	4603      	mov	r3, r0
 801069e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80106a0:	7ffb      	ldrb	r3, [r7, #31]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	f040 8090 	bne.w	80107c8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106ac:	781b      	ldrb	r3, [r3, #0]
 80106ae:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80106b0:	7fbb      	ldrb	r3, [r7, #30]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d102      	bne.n	80106bc <dir_find+0x132>
 80106b6:	2304      	movs	r3, #4
 80106b8:	77fb      	strb	r3, [r7, #31]
 80106ba:	e08a      	b.n	80107d2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106c0:	330b      	adds	r3, #11
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106c8:	72fb      	strb	r3, [r7, #11]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	7afa      	ldrb	r2, [r7, #11]
 80106ce:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80106d0:	7fbb      	ldrb	r3, [r7, #30]
 80106d2:	2be5      	cmp	r3, #229	; 0xe5
 80106d4:	d007      	beq.n	80106e6 <dir_find+0x15c>
 80106d6:	7afb      	ldrb	r3, [r7, #11]
 80106d8:	f003 0308 	and.w	r3, r3, #8
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d009      	beq.n	80106f4 <dir_find+0x16a>
 80106e0:	7afb      	ldrb	r3, [r7, #11]
 80106e2:	2b0f      	cmp	r3, #15
 80106e4:	d006      	beq.n	80106f4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80106e6:	23ff      	movs	r3, #255	; 0xff
 80106e8:	777b      	strb	r3, [r7, #29]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f04f 32ff 	mov.w	r2, #4294967295
 80106f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80106f2:	e05e      	b.n	80107b2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80106f4:	7afb      	ldrb	r3, [r7, #11]
 80106f6:	2b0f      	cmp	r3, #15
 80106f8:	d136      	bne.n	8010768 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010704:	2b00      	cmp	r3, #0
 8010706:	d154      	bne.n	80107b2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010708:	7fbb      	ldrb	r3, [r7, #30]
 801070a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00d      	beq.n	801072e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010716:	7b5b      	ldrb	r3, [r3, #13]
 8010718:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801071a:	7fbb      	ldrb	r3, [r7, #30]
 801071c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010720:	77bb      	strb	r3, [r7, #30]
 8010722:	7fbb      	ldrb	r3, [r7, #30]
 8010724:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801072e:	7fba      	ldrb	r2, [r7, #30]
 8010730:	7f7b      	ldrb	r3, [r7, #29]
 8010732:	429a      	cmp	r2, r3
 8010734:	d115      	bne.n	8010762 <dir_find+0x1d8>
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801073a:	330d      	adds	r3, #13
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	7f3a      	ldrb	r2, [r7, #28]
 8010740:	429a      	cmp	r2, r3
 8010742:	d10e      	bne.n	8010762 <dir_find+0x1d8>
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	691a      	ldr	r2, [r3, #16]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801074c:	4619      	mov	r1, r3
 801074e:	4610      	mov	r0, r2
 8010750:	f7ff fa4c 	bl	800fbec <cmp_lfn>
 8010754:	4603      	mov	r3, r0
 8010756:	2b00      	cmp	r3, #0
 8010758:	d003      	beq.n	8010762 <dir_find+0x1d8>
 801075a:	7f7b      	ldrb	r3, [r7, #29]
 801075c:	3b01      	subs	r3, #1
 801075e:	b2db      	uxtb	r3, r3
 8010760:	e000      	b.n	8010764 <dir_find+0x1da>
 8010762:	23ff      	movs	r3, #255	; 0xff
 8010764:	777b      	strb	r3, [r7, #29]
 8010766:	e024      	b.n	80107b2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010768:	7f7b      	ldrb	r3, [r7, #29]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d109      	bne.n	8010782 <dir_find+0x1f8>
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010772:	4618      	mov	r0, r3
 8010774:	f7ff fc04 	bl	800ff80 <sum_sfn>
 8010778:	4603      	mov	r3, r0
 801077a:	461a      	mov	r2, r3
 801077c:	7f3b      	ldrb	r3, [r7, #28]
 801077e:	4293      	cmp	r3, r2
 8010780:	d024      	beq.n	80107cc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010788:	f003 0301 	and.w	r3, r3, #1
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10a      	bne.n	80107a6 <dir_find+0x21c>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	3340      	adds	r3, #64	; 0x40
 8010798:	220b      	movs	r2, #11
 801079a:	4619      	mov	r1, r3
 801079c:	f7fd ff8d 	bl	800e6ba <mem_cmp>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d014      	beq.n	80107d0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80107a6:	23ff      	movs	r3, #255	; 0xff
 80107a8:	777b      	strb	r3, [r7, #29]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f04f 32ff 	mov.w	r2, #4294967295
 80107b0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80107b2:	2100      	movs	r1, #0
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f7ff f898 	bl	800f8ea <dir_next>
 80107ba:	4603      	mov	r3, r0
 80107bc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80107be:	7ffb      	ldrb	r3, [r7, #31]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	f43f af65 	beq.w	8010690 <dir_find+0x106>
 80107c6:	e004      	b.n	80107d2 <dir_find+0x248>
		if (res != FR_OK) break;
 80107c8:	bf00      	nop
 80107ca:	e002      	b.n	80107d2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80107cc:	bf00      	nop
 80107ce:	e000      	b.n	80107d2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80107d0:	bf00      	nop

	return res;
 80107d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3724      	adds	r7, #36	; 0x24
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd90      	pop	{r4, r7, pc}

080107dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80107dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80107e0:	b0a0      	sub	sp, #128	; 0x80
 80107e2:	af00      	add	r7, sp, #0
 80107e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80107f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <dir_register+0x22>
 80107fa:	2306      	movs	r3, #6
 80107fc:	e192      	b.n	8010b24 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80107fe:	2300      	movs	r3, #0
 8010800:	677b      	str	r3, [r7, #116]	; 0x74
 8010802:	e002      	b.n	801080a <dir_register+0x2e>
 8010804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010806:	3301      	adds	r3, #1
 8010808:	677b      	str	r3, [r7, #116]	; 0x74
 801080a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801080c:	691a      	ldr	r2, [r3, #16]
 801080e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	4413      	add	r3, r2
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d1f4      	bne.n	8010804 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 801081a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	2b04      	cmp	r3, #4
 8010820:	f040 80a3 	bne.w	801096a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8010824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010826:	330e      	adds	r3, #14
 8010828:	4aa4      	ldr	r2, [pc, #656]	; (8010abc <dir_register+0x2e0>)
 801082a:	fba2 2303 	umull	r2, r3, r2, r3
 801082e:	08db      	lsrs	r3, r3, #3
 8010830:	3302      	adds	r3, #2
 8010832:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8010834:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7ff f93d 	bl	800fab6 <dir_alloc>
 801083c:	4603      	mov	r3, r0
 801083e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8010842:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010846:	2b00      	cmp	r3, #0
 8010848:	d002      	beq.n	8010850 <dir_register+0x74>
 801084a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801084e:	e169      	b.n	8010b24 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010854:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010856:	3b01      	subs	r3, #1
 8010858:	015b      	lsls	r3, r3, #5
 801085a:	1ad2      	subs	r2, r2, r3
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d076      	beq.n	8010956 <dir_register+0x17a>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	79db      	ldrb	r3, [r3, #7]
 801086c:	f003 0304 	and.w	r3, r3, #4
 8010870:	2b00      	cmp	r3, #0
 8010872:	d070      	beq.n	8010956 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801087a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801087c:	8949      	ldrh	r1, [r1, #10]
 801087e:	4608      	mov	r0, r1
 8010880:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010882:	8989      	ldrh	r1, [r1, #12]
 8010884:	fb00 f101 	mul.w	r1, r0, r1
 8010888:	2000      	movs	r0, #0
 801088a:	460c      	mov	r4, r1
 801088c:	4605      	mov	r5, r0
 801088e:	eb12 0804 	adds.w	r8, r2, r4
 8010892:	eb43 0905 	adc.w	r9, r3, r5
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	4618      	mov	r0, r3
 80108a0:	f7fe fd2e 	bl	800f300 <fill_first_frag>
 80108a4:	4603      	mov	r3, r0
 80108a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80108aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d002      	beq.n	80108b8 <dir_register+0xdc>
 80108b2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108b6:	e135      	b.n	8010b24 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108be:	f04f 32ff 	mov.w	r2, #4294967295
 80108c2:	4619      	mov	r1, r3
 80108c4:	f7fe fd4b 	bl	800f35e <fill_last_frag>
 80108c8:	4603      	mov	r3, r0
 80108ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80108ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d002      	beq.n	80108dc <dir_register+0x100>
 80108d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108da:	e123      	b.n	8010b24 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	f107 0308 	add.w	r3, r7, #8
 80108e2:	4611      	mov	r1, r2
 80108e4:	4618      	mov	r0, r3
 80108e6:	f7ff fc91 	bl	801020c <load_obj_dir>
 80108ea:	4603      	mov	r3, r0
 80108ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 80108f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d002      	beq.n	80108fe <dir_register+0x122>
 80108f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80108fc:	e112      	b.n	8010b24 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80108fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010900:	695b      	ldr	r3, [r3, #20]
 8010902:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801090c:	4608      	mov	r0, r1
 801090e:	f7fd fe10 	bl	800e532 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8010912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010914:	695b      	ldr	r3, [r3, #20]
 8010916:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010920:	4608      	mov	r0, r1
 8010922:	f7fd fe06 	bl	800e532 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	79da      	ldrb	r2, [r3, #7]
 801092a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801092c:	695b      	ldr	r3, [r3, #20]
 801092e:	3321      	adds	r3, #33	; 0x21
 8010930:	f042 0201 	orr.w	r2, r2, #1
 8010934:	b2d2      	uxtb	r2, r2
 8010936:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8010938:	f107 0308 	add.w	r3, r7, #8
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff fc9b 	bl	8010278 <store_xdir>
 8010942:	4603      	mov	r3, r0
 8010944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8010948:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <dir_register+0x17a>
 8010950:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010954:	e0e6      	b.n	8010b24 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8010956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010958:	695a      	ldr	r2, [r3, #20]
 801095a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	4619      	mov	r1, r3
 8010960:	4610      	mov	r0, r2
 8010962:	f7ff fce4 	bl	801032e <create_xdir>
		return FR_OK;
 8010966:	2300      	movs	r3, #0
 8010968:	e0dc      	b.n	8010b24 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8010970:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010974:	220c      	movs	r2, #12
 8010976:	4618      	mov	r0, r3
 8010978:	f7fd fe63 	bl	800e642 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801097c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010980:	f003 0301 	and.w	r3, r3, #1
 8010984:	2b00      	cmp	r3, #0
 8010986:	d033      	beq.n	80109f0 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2240      	movs	r2, #64	; 0x40
 801098c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8010990:	2301      	movs	r3, #1
 8010992:	67bb      	str	r3, [r7, #120]	; 0x78
 8010994:	e016      	b.n	80109c4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801099c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801099e:	691a      	ldr	r2, [r3, #16]
 80109a0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80109a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109a6:	f7ff fa5d 	bl	800fe64 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f7ff fded 	bl	801058a <dir_find>
 80109b0:	4603      	mov	r3, r0
 80109b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80109b6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d106      	bne.n	80109cc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 80109be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109c0:	3301      	adds	r3, #1
 80109c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80109c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109c6:	2b63      	cmp	r3, #99	; 0x63
 80109c8:	d9e5      	bls.n	8010996 <dir_register+0x1ba>
 80109ca:	e000      	b.n	80109ce <dir_register+0x1f2>
			if (res != FR_OK) break;
 80109cc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80109ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80109d0:	2b64      	cmp	r3, #100	; 0x64
 80109d2:	d101      	bne.n	80109d8 <dir_register+0x1fc>
 80109d4:	2307      	movs	r3, #7
 80109d6:	e0a5      	b.n	8010b24 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80109d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80109dc:	2b04      	cmp	r3, #4
 80109de:	d002      	beq.n	80109e6 <dir_register+0x20a>
 80109e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80109e4:	e09e      	b.n	8010b24 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80109e6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80109f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80109f4:	f003 0302 	and.w	r3, r3, #2
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d007      	beq.n	8010a0c <dir_register+0x230>
 80109fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80109fe:	330c      	adds	r3, #12
 8010a00:	4a2f      	ldr	r2, [pc, #188]	; (8010ac0 <dir_register+0x2e4>)
 8010a02:	fba2 2303 	umull	r2, r3, r2, r3
 8010a06:	089b      	lsrs	r3, r3, #2
 8010a08:	3301      	adds	r3, #1
 8010a0a:	e000      	b.n	8010a0e <dir_register+0x232>
 8010a0c:	2301      	movs	r3, #1
 8010a0e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010a10:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f7ff f84f 	bl	800fab6 <dir_alloc>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010a1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d14f      	bne.n	8010ac6 <dir_register+0x2ea>
 8010a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8010a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d049      	beq.n	8010ac6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a38:	015b      	lsls	r3, r3, #5
 8010a3a:	1ad3      	subs	r3, r2, r3
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7fe febf 	bl	800f7c2 <dir_sdi>
 8010a44:	4603      	mov	r3, r0
 8010a46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8010a4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d139      	bne.n	8010ac6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	3340      	adds	r3, #64	; 0x40
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7ff fa92 	bl	800ff80 <sum_sfn>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a66:	4619      	mov	r1, r3
 8010a68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010a6a:	f7fe f819 	bl	800eaa0 <move_window>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8010a74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d123      	bne.n	8010ac4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a7e:	6918      	ldr	r0, [r3, #16]
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8010a84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010a8c:	f7ff f982 	bl	800fd94 <put_lfn>
				fs->wflag = 1;
 8010a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010a92:	2201      	movs	r2, #1
 8010a94:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010a96:	2100      	movs	r1, #0
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7fe ff26 	bl	800f8ea <dir_next>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8010aa4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d10c      	bne.n	8010ac6 <dir_register+0x2ea>
 8010aac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	673b      	str	r3, [r7, #112]	; 0x70
 8010ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d1d4      	bne.n	8010a62 <dir_register+0x286>
 8010ab8:	e005      	b.n	8010ac6 <dir_register+0x2ea>
 8010aba:	bf00      	nop
 8010abc:	88888889 	.word	0x88888889
 8010ac0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8010ac4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010ac6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d128      	bne.n	8010b20 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010ad6:	f7fd ffe3 	bl	800eaa0 <move_window>
 8010ada:	4603      	mov	r3, r0
 8010adc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8010ae0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d11b      	bne.n	8010b20 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010aec:	2220      	movs	r2, #32
 8010aee:	2100      	movs	r1, #0
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7fd fdc7 	bl	800e684 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	3340      	adds	r3, #64	; 0x40
 8010afe:	220b      	movs	r2, #11
 8010b00:	4619      	mov	r1, r3
 8010b02:	f7fd fd9e 	bl	800e642 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b10:	330c      	adds	r3, #12
 8010b12:	f002 0218 	and.w	r2, r2, #24
 8010b16:	b2d2      	uxtb	r2, r2
 8010b18:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010b20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8010b24:	4618      	mov	r0, r3
 8010b26:	3780      	adds	r7, #128	; 0x80
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010b2e:	bf00      	nop

08010b30 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b08a      	sub	sp, #40	; 0x28
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	613b      	str	r3, [r7, #16]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	691b      	ldr	r3, [r3, #16]
 8010b46:	60fb      	str	r3, [r7, #12]
 8010b48:	2300      	movs	r3, #0
 8010b4a:	617b      	str	r3, [r7, #20]
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010b50:	69bb      	ldr	r3, [r7, #24]
 8010b52:	1c5a      	adds	r2, r3, #1
 8010b54:	61ba      	str	r2, [r7, #24]
 8010b56:	693a      	ldr	r2, [r7, #16]
 8010b58:	4413      	add	r3, r2
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b60:	2b1f      	cmp	r3, #31
 8010b62:	d940      	bls.n	8010be6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010b64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b66:	2b2f      	cmp	r3, #47	; 0x2f
 8010b68:	d006      	beq.n	8010b78 <create_name+0x48>
 8010b6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b6c:	2b5c      	cmp	r3, #92	; 0x5c
 8010b6e:	d110      	bne.n	8010b92 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010b70:	e002      	b.n	8010b78 <create_name+0x48>
 8010b72:	69bb      	ldr	r3, [r7, #24]
 8010b74:	3301      	adds	r3, #1
 8010b76:	61bb      	str	r3, [r7, #24]
 8010b78:	693a      	ldr	r2, [r7, #16]
 8010b7a:	69bb      	ldr	r3, [r7, #24]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	781b      	ldrb	r3, [r3, #0]
 8010b80:	2b2f      	cmp	r3, #47	; 0x2f
 8010b82:	d0f6      	beq.n	8010b72 <create_name+0x42>
 8010b84:	693a      	ldr	r2, [r7, #16]
 8010b86:	69bb      	ldr	r3, [r7, #24]
 8010b88:	4413      	add	r3, r2
 8010b8a:	781b      	ldrb	r3, [r3, #0]
 8010b8c:	2b5c      	cmp	r3, #92	; 0x5c
 8010b8e:	d0f0      	beq.n	8010b72 <create_name+0x42>
			break;
 8010b90:	e02a      	b.n	8010be8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010b92:	697b      	ldr	r3, [r7, #20]
 8010b94:	2bfe      	cmp	r3, #254	; 0xfe
 8010b96:	d901      	bls.n	8010b9c <create_name+0x6c>
 8010b98:	2306      	movs	r3, #6
 8010b9a:	e17d      	b.n	8010e98 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010ba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ba4:	2101      	movs	r1, #1
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f001 fd34 	bl	8012614 <ff_convert>
 8010bac:	4603      	mov	r3, r0
 8010bae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d101      	bne.n	8010bba <create_name+0x8a>
 8010bb6:	2306      	movs	r3, #6
 8010bb8:	e16e      	b.n	8010e98 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bbc:	2b7f      	cmp	r3, #127	; 0x7f
 8010bbe:	d809      	bhi.n	8010bd4 <create_name+0xa4>
 8010bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	488d      	ldr	r0, [pc, #564]	; (8010dfc <create_name+0x2cc>)
 8010bc6:	f7fd fd9f 	bl	800e708 <chk_chr>
 8010bca:	4603      	mov	r3, r0
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d001      	beq.n	8010bd4 <create_name+0xa4>
 8010bd0:	2306      	movs	r3, #6
 8010bd2:	e161      	b.n	8010e98 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010bd4:	697b      	ldr	r3, [r7, #20]
 8010bd6:	1c5a      	adds	r2, r3, #1
 8010bd8:	617a      	str	r2, [r7, #20]
 8010bda:	005b      	lsls	r3, r3, #1
 8010bdc:	68fa      	ldr	r2, [r7, #12]
 8010bde:	4413      	add	r3, r2
 8010be0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010be2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010be4:	e7b4      	b.n	8010b50 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010be6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010be8:	693a      	ldr	r2, [r7, #16]
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	441a      	add	r2, r3
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010bf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010bf4:	2b1f      	cmp	r3, #31
 8010bf6:	d801      	bhi.n	8010bfc <create_name+0xcc>
 8010bf8:	2304      	movs	r3, #4
 8010bfa:	e000      	b.n	8010bfe <create_name+0xce>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010c02:	e011      	b.n	8010c28 <create_name+0xf8>
		w = lfn[di - 1];
 8010c04:	697a      	ldr	r2, [r7, #20]
 8010c06:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c0a:	4413      	add	r3, r2
 8010c0c:	005b      	lsls	r3, r3, #1
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	4413      	add	r3, r2
 8010c12:	881b      	ldrh	r3, [r3, #0]
 8010c14:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8010c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c18:	2b20      	cmp	r3, #32
 8010c1a:	d002      	beq.n	8010c22 <create_name+0xf2>
 8010c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8010c20:	d106      	bne.n	8010c30 <create_name+0x100>
		di--;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	3b01      	subs	r3, #1
 8010c26:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1ea      	bne.n	8010c04 <create_name+0xd4>
 8010c2e:	e000      	b.n	8010c32 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010c30:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	005b      	lsls	r3, r3, #1
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	4413      	add	r3, r2
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d101      	bne.n	8010c48 <create_name+0x118>
 8010c44:	2306      	movs	r3, #6
 8010c46:	e127      	b.n	8010e98 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	3340      	adds	r3, #64	; 0x40
 8010c4c:	220b      	movs	r2, #11
 8010c4e:	2120      	movs	r1, #32
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fd fd17 	bl	800e684 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010c56:	2300      	movs	r3, #0
 8010c58:	61bb      	str	r3, [r7, #24]
 8010c5a:	e002      	b.n	8010c62 <create_name+0x132>
 8010c5c:	69bb      	ldr	r3, [r7, #24]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	61bb      	str	r3, [r7, #24]
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	4413      	add	r3, r2
 8010c6a:	881b      	ldrh	r3, [r3, #0]
 8010c6c:	2b20      	cmp	r3, #32
 8010c6e:	d0f5      	beq.n	8010c5c <create_name+0x12c>
 8010c70:	69bb      	ldr	r3, [r7, #24]
 8010c72:	005b      	lsls	r3, r3, #1
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	4413      	add	r3, r2
 8010c78:	881b      	ldrh	r3, [r3, #0]
 8010c7a:	2b2e      	cmp	r3, #46	; 0x2e
 8010c7c:	d0ee      	beq.n	8010c5c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010c7e:	69bb      	ldr	r3, [r7, #24]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d009      	beq.n	8010c98 <create_name+0x168>
 8010c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c88:	f043 0303 	orr.w	r3, r3, #3
 8010c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010c90:	e002      	b.n	8010c98 <create_name+0x168>
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	3b01      	subs	r3, #1
 8010c96:	617b      	str	r3, [r7, #20]
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d009      	beq.n	8010cb2 <create_name+0x182>
 8010c9e:	697a      	ldr	r2, [r7, #20]
 8010ca0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010ca4:	4413      	add	r3, r2
 8010ca6:	005b      	lsls	r3, r3, #1
 8010ca8:	68fa      	ldr	r2, [r7, #12]
 8010caa:	4413      	add	r3, r2
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	2b2e      	cmp	r3, #46	; 0x2e
 8010cb0:	d1ef      	bne.n	8010c92 <create_name+0x162>

	i = b = 0; ni = 8;
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010cb8:	2300      	movs	r3, #0
 8010cba:	623b      	str	r3, [r7, #32]
 8010cbc:	2308      	movs	r3, #8
 8010cbe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010cc0:	69bb      	ldr	r3, [r7, #24]
 8010cc2:	1c5a      	adds	r2, r3, #1
 8010cc4:	61ba      	str	r2, [r7, #24]
 8010cc6:	005b      	lsls	r3, r3, #1
 8010cc8:	68fa      	ldr	r2, [r7, #12]
 8010cca:	4413      	add	r3, r2
 8010ccc:	881b      	ldrh	r3, [r3, #0]
 8010cce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010cd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f000 8090 	beq.w	8010df8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010cd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010cda:	2b20      	cmp	r3, #32
 8010cdc:	d006      	beq.n	8010cec <create_name+0x1bc>
 8010cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ce0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ce2:	d10a      	bne.n	8010cfa <create_name+0x1ca>
 8010ce4:	69ba      	ldr	r2, [r7, #24]
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d006      	beq.n	8010cfa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cf0:	f043 0303 	orr.w	r3, r3, #3
 8010cf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010cf8:	e07d      	b.n	8010df6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010cfa:	6a3a      	ldr	r2, [r7, #32]
 8010cfc:	69fb      	ldr	r3, [r7, #28]
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d203      	bcs.n	8010d0a <create_name+0x1da>
 8010d02:	69ba      	ldr	r2, [r7, #24]
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d123      	bne.n	8010d52 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010d0a:	69fb      	ldr	r3, [r7, #28]
 8010d0c:	2b0b      	cmp	r3, #11
 8010d0e:	d106      	bne.n	8010d1e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010d10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d14:	f043 0303 	orr.w	r3, r3, #3
 8010d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d1c:	e075      	b.n	8010e0a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010d1e:	69ba      	ldr	r2, [r7, #24]
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d005      	beq.n	8010d32 <create_name+0x202>
 8010d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d2a:	f043 0303 	orr.w	r3, r3, #3
 8010d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8010d32:	69ba      	ldr	r2, [r7, #24]
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d866      	bhi.n	8010e08 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	61bb      	str	r3, [r7, #24]
 8010d3e:	2308      	movs	r3, #8
 8010d40:	623b      	str	r3, [r7, #32]
 8010d42:	230b      	movs	r3, #11
 8010d44:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010d46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010d50:	e051      	b.n	8010df6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010d52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d54:	2b7f      	cmp	r3, #127	; 0x7f
 8010d56:	d914      	bls.n	8010d82 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010d58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	f001 fc59 	bl	8012614 <ff_convert>
 8010d62:	4603      	mov	r3, r0
 8010d64:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010d66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d004      	beq.n	8010d76 <create_name+0x246>
 8010d6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d6e:	3b80      	subs	r3, #128	; 0x80
 8010d70:	4a23      	ldr	r2, [pc, #140]	; (8010e00 <create_name+0x2d0>)
 8010d72:	5cd3      	ldrb	r3, [r2, r3]
 8010d74:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d7a:	f043 0302 	orr.w	r3, r3, #2
 8010d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010d82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d007      	beq.n	8010d98 <create_name+0x268>
 8010d88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	481d      	ldr	r0, [pc, #116]	; (8010e04 <create_name+0x2d4>)
 8010d8e:	f7fd fcbb 	bl	800e708 <chk_chr>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d008      	beq.n	8010daa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010d98:	235f      	movs	r3, #95	; 0x5f
 8010d9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010da0:	f043 0303 	orr.w	r3, r3, #3
 8010da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010da8:	e01b      	b.n	8010de2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010daa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dac:	2b40      	cmp	r3, #64	; 0x40
 8010dae:	d909      	bls.n	8010dc4 <create_name+0x294>
 8010db0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010db2:	2b5a      	cmp	r3, #90	; 0x5a
 8010db4:	d806      	bhi.n	8010dc4 <create_name+0x294>
					b |= 2;
 8010db6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010dba:	f043 0302 	orr.w	r3, r3, #2
 8010dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010dc2:	e00e      	b.n	8010de2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010dc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dc6:	2b60      	cmp	r3, #96	; 0x60
 8010dc8:	d90b      	bls.n	8010de2 <create_name+0x2b2>
 8010dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dcc:	2b7a      	cmp	r3, #122	; 0x7a
 8010dce:	d808      	bhi.n	8010de2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010dd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010dd4:	f043 0301 	orr.w	r3, r3, #1
 8010dd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dde:	3b20      	subs	r3, #32
 8010de0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010de2:	6a3b      	ldr	r3, [r7, #32]
 8010de4:	1c5a      	adds	r2, r3, #1
 8010de6:	623a      	str	r2, [r7, #32]
 8010de8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010dea:	b2d1      	uxtb	r1, r2
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	4413      	add	r3, r2
 8010df0:	460a      	mov	r2, r1
 8010df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8010df6:	e763      	b.n	8010cc0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010df8:	bf00      	nop
 8010dfa:	e006      	b.n	8010e0a <create_name+0x2da>
 8010dfc:	08013c64 	.word	0x08013c64
 8010e00:	08013d0c 	.word	0x08013d0c
 8010e04:	08013c70 	.word	0x08013c70
			if (si > di) break;			/* No extension */
 8010e08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010e10:	2be5      	cmp	r3, #229	; 0xe5
 8010e12:	d103      	bne.n	8010e1c <create_name+0x2ec>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2205      	movs	r2, #5
 8010e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	2b08      	cmp	r3, #8
 8010e20:	d104      	bne.n	8010e2c <create_name+0x2fc>
 8010e22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e26:	009b      	lsls	r3, r3, #2
 8010e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e30:	f003 030c 	and.w	r3, r3, #12
 8010e34:	2b0c      	cmp	r3, #12
 8010e36:	d005      	beq.n	8010e44 <create_name+0x314>
 8010e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e3c:	f003 0303 	and.w	r3, r3, #3
 8010e40:	2b03      	cmp	r3, #3
 8010e42:	d105      	bne.n	8010e50 <create_name+0x320>
 8010e44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e48:	f043 0302 	orr.w	r3, r3, #2
 8010e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e54:	f003 0302 	and.w	r3, r3, #2
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d117      	bne.n	8010e8c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e60:	f003 0303 	and.w	r3, r3, #3
 8010e64:	2b01      	cmp	r3, #1
 8010e66:	d105      	bne.n	8010e74 <create_name+0x344>
 8010e68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e6c:	f043 0310 	orr.w	r3, r3, #16
 8010e70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010e74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010e78:	f003 030c 	and.w	r3, r3, #12
 8010e7c:	2b04      	cmp	r3, #4
 8010e7e:	d105      	bne.n	8010e8c <create_name+0x35c>
 8010e80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e84:	f043 0308 	orr.w	r3, r3, #8
 8010e88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010e92:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8010e96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3728      	adds	r7, #40	; 0x28
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}

08010ea0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010eb4:	e002      	b.n	8010ebc <follow_path+0x1c>
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	603b      	str	r3, [r7, #0]
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	781b      	ldrb	r3, [r3, #0]
 8010ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8010ec2:	d0f8      	beq.n	8010eb6 <follow_path+0x16>
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	2b5c      	cmp	r3, #92	; 0x5c
 8010eca:	d0f4      	beq.n	8010eb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	2b1f      	cmp	r3, #31
 8010ede:	d80a      	bhi.n	8010ef6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2280      	movs	r2, #128	; 0x80
 8010ee4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8010ee8:	2100      	movs	r1, #0
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f7fe fc69 	bl	800f7c2 <dir_sdi>
 8010ef0:	4603      	mov	r3, r0
 8010ef2:	75fb      	strb	r3, [r7, #23]
 8010ef4:	e07d      	b.n	8010ff2 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010ef6:	463b      	mov	r3, r7
 8010ef8:	4619      	mov	r1, r3
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f7ff fe18 	bl	8010b30 <create_name>
 8010f00:	4603      	mov	r3, r0
 8010f02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010f04:	7dfb      	ldrb	r3, [r7, #23]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d16e      	bne.n	8010fe8 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f7ff fb3d 	bl	801058a <dir_find>
 8010f10:	4603      	mov	r3, r0
 8010f12:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8010f1a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010f1c:	7dfb      	ldrb	r3, [r7, #23]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d00a      	beq.n	8010f38 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010f22:	7dfb      	ldrb	r3, [r7, #23]
 8010f24:	2b04      	cmp	r3, #4
 8010f26:	d161      	bne.n	8010fec <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010f28:	7afb      	ldrb	r3, [r7, #11]
 8010f2a:	f003 0304 	and.w	r3, r3, #4
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d15c      	bne.n	8010fec <follow_path+0x14c>
 8010f32:	2305      	movs	r3, #5
 8010f34:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010f36:	e059      	b.n	8010fec <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010f38:	7afb      	ldrb	r3, [r7, #11]
 8010f3a:	f003 0304 	and.w	r3, r3, #4
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d156      	bne.n	8010ff0 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	799b      	ldrb	r3, [r3, #6]
 8010f46:	f003 0310 	and.w	r3, r3, #16
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d102      	bne.n	8010f54 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8010f4e:	2305      	movs	r3, #5
 8010f50:	75fb      	strb	r3, [r7, #23]
 8010f52:	e04e      	b.n	8010ff2 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	2b04      	cmp	r3, #4
 8010f5a:	d130      	bne.n	8010fbe <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	689a      	ldr	r2, [r3, #8]
 8010f60:	693b      	ldr	r3, [r7, #16]
 8010f62:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8010f64:	693b      	ldr	r3, [r7, #16]
 8010f66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010f70:	693a      	ldr	r2, [r7, #16]
 8010f72:	79d2      	ldrb	r2, [r2, #7]
 8010f74:	431a      	orrs	r2, r3
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f7e:	693b      	ldr	r3, [r7, #16]
 8010f80:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	695b      	ldr	r3, [r3, #20]
 8010f86:	3334      	adds	r3, #52	; 0x34
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7fd f98d 	bl	800e2a8 <ld_dword>
 8010f8e:	4602      	mov	r2, r0
 8010f90:	693b      	ldr	r3, [r7, #16]
 8010f92:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	695b      	ldr	r3, [r3, #20]
 8010f98:	3321      	adds	r3, #33	; 0x21
 8010f9a:	781b      	ldrb	r3, [r3, #0]
 8010f9c:	f003 0302 	and.w	r3, r3, #2
 8010fa0:	b2da      	uxtb	r2, r3
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	695b      	ldr	r3, [r3, #20]
 8010faa:	3338      	adds	r3, #56	; 0x38
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fd f99e 	bl	800e2ee <ld_qword>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	460b      	mov	r3, r1
 8010fb6:	6939      	ldr	r1, [r7, #16]
 8010fb8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8010fbc:	e79b      	b.n	8010ef6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc8:	68fa      	ldr	r2, [r7, #12]
 8010fca:	8992      	ldrh	r2, [r2, #12]
 8010fcc:	fbb3 f0f2 	udiv	r0, r3, r2
 8010fd0:	fb00 f202 	mul.w	r2, r0, r2
 8010fd4:	1a9b      	subs	r3, r3, r2
 8010fd6:	440b      	add	r3, r1
 8010fd8:	4619      	mov	r1, r3
 8010fda:	68f8      	ldr	r0, [r7, #12]
 8010fdc:	f7fe fdc7 	bl	800fb6e <ld_clust>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010fe6:	e786      	b.n	8010ef6 <follow_path+0x56>
			if (res != FR_OK) break;
 8010fe8:	bf00      	nop
 8010fea:	e002      	b.n	8010ff2 <follow_path+0x152>
				break;
 8010fec:	bf00      	nop
 8010fee:	e000      	b.n	8010ff2 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010ff0:	bf00      	nop
			}
		}
	}

	return res;
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3718      	adds	r7, #24
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}

08010ffc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010ffc:	b480      	push	{r7}
 8010ffe:	b087      	sub	sp, #28
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011004:	f04f 33ff 	mov.w	r3, #4294967295
 8011008:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d031      	beq.n	8011076 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	617b      	str	r3, [r7, #20]
 8011018:	e002      	b.n	8011020 <get_ldnumber+0x24>
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	3301      	adds	r3, #1
 801101e:	617b      	str	r3, [r7, #20]
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	2b1f      	cmp	r3, #31
 8011026:	d903      	bls.n	8011030 <get_ldnumber+0x34>
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	2b3a      	cmp	r3, #58	; 0x3a
 801102e:	d1f4      	bne.n	801101a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011030:	697b      	ldr	r3, [r7, #20]
 8011032:	781b      	ldrb	r3, [r3, #0]
 8011034:	2b3a      	cmp	r3, #58	; 0x3a
 8011036:	d11c      	bne.n	8011072 <get_ldnumber+0x76>
			tp = *path;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	1c5a      	adds	r2, r3, #1
 8011042:	60fa      	str	r2, [r7, #12]
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	3b30      	subs	r3, #48	; 0x30
 8011048:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	2b09      	cmp	r3, #9
 801104e:	d80e      	bhi.n	801106e <get_ldnumber+0x72>
 8011050:	68fa      	ldr	r2, [r7, #12]
 8011052:	697b      	ldr	r3, [r7, #20]
 8011054:	429a      	cmp	r2, r3
 8011056:	d10a      	bne.n	801106e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d107      	bne.n	801106e <get_ldnumber+0x72>
					vol = (int)i;
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	3301      	adds	r3, #1
 8011066:	617b      	str	r3, [r7, #20]
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	697a      	ldr	r2, [r7, #20]
 801106c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	e002      	b.n	8011078 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011072:	2300      	movs	r3, #0
 8011074:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011076:	693b      	ldr	r3, [r7, #16]
}
 8011078:	4618      	mov	r0, r3
 801107a:	371c      	adds	r7, #28
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr

08011084 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2200      	movs	r2, #0
 8011092:	70da      	strb	r2, [r3, #3]
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f04f 32ff 	mov.w	r2, #4294967295
 801109a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801109c:	6839      	ldr	r1, [r7, #0]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7fd fcfe 	bl	800eaa0 <move_window>
 80110a4:	4603      	mov	r3, r0
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d001      	beq.n	80110ae <check_fs+0x2a>
 80110aa:	2304      	movs	r3, #4
 80110ac:	e044      	b.n	8011138 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	333c      	adds	r3, #60	; 0x3c
 80110b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fd f8de 	bl	800e278 <ld_word>
 80110bc:	4603      	mov	r3, r0
 80110be:	461a      	mov	r2, r3
 80110c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d001      	beq.n	80110cc <check_fs+0x48>
 80110c8:	2303      	movs	r3, #3
 80110ca:	e035      	b.n	8011138 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110d2:	2be9      	cmp	r3, #233	; 0xe9
 80110d4:	d009      	beq.n	80110ea <check_fs+0x66>
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80110dc:	2beb      	cmp	r3, #235	; 0xeb
 80110de:	d11e      	bne.n	801111e <check_fs+0x9a>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80110e6:	2b90      	cmp	r3, #144	; 0x90
 80110e8:	d119      	bne.n	801111e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	333c      	adds	r3, #60	; 0x3c
 80110ee:	3336      	adds	r3, #54	; 0x36
 80110f0:	4618      	mov	r0, r3
 80110f2:	f7fd f8d9 	bl	800e2a8 <ld_dword>
 80110f6:	4603      	mov	r3, r0
 80110f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80110fc:	4a10      	ldr	r2, [pc, #64]	; (8011140 <check_fs+0xbc>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d101      	bne.n	8011106 <check_fs+0x82>
 8011102:	2300      	movs	r3, #0
 8011104:	e018      	b.n	8011138 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	333c      	adds	r3, #60	; 0x3c
 801110a:	3352      	adds	r3, #82	; 0x52
 801110c:	4618      	mov	r0, r3
 801110e:	f7fd f8cb 	bl	800e2a8 <ld_dword>
 8011112:	4603      	mov	r3, r0
 8011114:	4a0b      	ldr	r2, [pc, #44]	; (8011144 <check_fs+0xc0>)
 8011116:	4293      	cmp	r3, r2
 8011118:	d101      	bne.n	801111e <check_fs+0x9a>
 801111a:	2300      	movs	r3, #0
 801111c:	e00c      	b.n	8011138 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	333c      	adds	r3, #60	; 0x3c
 8011122:	220b      	movs	r2, #11
 8011124:	4908      	ldr	r1, [pc, #32]	; (8011148 <check_fs+0xc4>)
 8011126:	4618      	mov	r0, r3
 8011128:	f7fd fac7 	bl	800e6ba <mem_cmp>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d101      	bne.n	8011136 <check_fs+0xb2>
 8011132:	2301      	movs	r3, #1
 8011134:	e000      	b.n	8011138 <check_fs+0xb4>
#endif
	return 2;
 8011136:	2302      	movs	r3, #2
}
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	00544146 	.word	0x00544146
 8011144:	33544146 	.word	0x33544146
 8011148:	08013c78 	.word	0x08013c78

0801114c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801114c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011150:	b09c      	sub	sp, #112	; 0x70
 8011152:	af00      	add	r7, sp, #0
 8011154:	61f8      	str	r0, [r7, #28]
 8011156:	61b9      	str	r1, [r7, #24]
 8011158:	4613      	mov	r3, r2
 801115a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801115c:	69bb      	ldr	r3, [r7, #24]
 801115e:	2200      	movs	r2, #0
 8011160:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011162:	69f8      	ldr	r0, [r7, #28]
 8011164:	f7ff ff4a 	bl	8010ffc <get_ldnumber>
 8011168:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 801116a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801116c:	2b00      	cmp	r3, #0
 801116e:	da01      	bge.n	8011174 <find_volume+0x28>
 8011170:	230b      	movs	r3, #11
 8011172:	e376      	b.n	8011862 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011174:	4aa6      	ldr	r2, [pc, #664]	; (8011410 <find_volume+0x2c4>)
 8011176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801117c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801117e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <find_volume+0x3c>
 8011184:	230c      	movs	r3, #12
 8011186:	e36c      	b.n	8011862 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801118c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801118e:	7dfb      	ldrb	r3, [r7, #23]
 8011190:	f023 0301 	bic.w	r3, r3, #1
 8011194:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011198:	781b      	ldrb	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d01a      	beq.n	80111d4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 801119e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111a0:	785b      	ldrb	r3, [r3, #1]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fc ffca 	bl	800e13c <disk_status>
 80111a8:	4603      	mov	r3, r0
 80111aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80111ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80111b2:	f003 0301 	and.w	r3, r3, #1
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10c      	bne.n	80111d4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80111ba:	7dfb      	ldrb	r3, [r7, #23]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d007      	beq.n	80111d0 <find_volume+0x84>
 80111c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80111c4:	f003 0304 	and.w	r3, r3, #4
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80111cc:	230a      	movs	r3, #10
 80111ce:	e348      	b.n	8011862 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 80111d0:	2300      	movs	r3, #0
 80111d2:	e346      	b.n	8011862 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80111d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111d6:	2200      	movs	r2, #0
 80111d8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80111da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111dc:	b2da      	uxtb	r2, r3
 80111de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80111e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111e4:	785b      	ldrb	r3, [r3, #1]
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fc ffc2 	bl	800e170 <disk_initialize>
 80111ec:	4603      	mov	r3, r0
 80111ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80111f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80111f6:	f003 0301 	and.w	r3, r3, #1
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d001      	beq.n	8011202 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80111fe:	2303      	movs	r3, #3
 8011200:	e32f      	b.n	8011862 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011202:	7dfb      	ldrb	r3, [r7, #23]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d007      	beq.n	8011218 <find_volume+0xcc>
 8011208:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801120c:	f003 0304 	and.w	r3, r3, #4
 8011210:	2b00      	cmp	r3, #0
 8011212:	d001      	beq.n	8011218 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8011214:	230a      	movs	r3, #10
 8011216:	e324      	b.n	8011862 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801121a:	7858      	ldrb	r0, [r3, #1]
 801121c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801121e:	330c      	adds	r3, #12
 8011220:	461a      	mov	r2, r3
 8011222:	2102      	movs	r1, #2
 8011224:	f7fd f80a 	bl	800e23c <disk_ioctl>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d001      	beq.n	8011232 <find_volume+0xe6>
 801122e:	2301      	movs	r3, #1
 8011230:	e317      	b.n	8011862 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011234:	899b      	ldrh	r3, [r3, #12]
 8011236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801123a:	d80d      	bhi.n	8011258 <find_volume+0x10c>
 801123c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801123e:	899b      	ldrh	r3, [r3, #12]
 8011240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011244:	d308      	bcc.n	8011258 <find_volume+0x10c>
 8011246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011248:	899b      	ldrh	r3, [r3, #12]
 801124a:	461a      	mov	r2, r3
 801124c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801124e:	899b      	ldrh	r3, [r3, #12]
 8011250:	3b01      	subs	r3, #1
 8011252:	4013      	ands	r3, r2
 8011254:	2b00      	cmp	r3, #0
 8011256:	d001      	beq.n	801125c <find_volume+0x110>
 8011258:	2301      	movs	r3, #1
 801125a:	e302      	b.n	8011862 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801125c:	2300      	movs	r3, #0
 801125e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011260:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011262:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8011264:	f7ff ff0e 	bl	8011084 <check_fs>
 8011268:	4603      	mov	r3, r0
 801126a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801126e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011272:	2b02      	cmp	r3, #2
 8011274:	d14d      	bne.n	8011312 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011276:	2300      	movs	r3, #0
 8011278:	65bb      	str	r3, [r7, #88]	; 0x58
 801127a:	e020      	b.n	80112be <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801127c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801127e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8011282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011284:	011b      	lsls	r3, r3, #4
 8011286:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801128a:	4413      	add	r3, r2
 801128c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801128e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011290:	3304      	adds	r3, #4
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d006      	beq.n	80112a6 <find_volume+0x15a>
 8011298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801129a:	3308      	adds	r3, #8
 801129c:	4618      	mov	r0, r3
 801129e:	f7fd f803 	bl	800e2a8 <ld_dword>
 80112a2:	4602      	mov	r2, r0
 80112a4:	e000      	b.n	80112a8 <find_volume+0x15c>
 80112a6:	2200      	movs	r2, #0
 80112a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112aa:	009b      	lsls	r3, r3, #2
 80112ac:	3360      	adds	r3, #96	; 0x60
 80112ae:	f107 0110 	add.w	r1, r7, #16
 80112b2:	440b      	add	r3, r1
 80112b4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80112b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112ba:	3301      	adds	r3, #1
 80112bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80112be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112c0:	2b03      	cmp	r3, #3
 80112c2:	d9db      	bls.n	801127c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80112c4:	2300      	movs	r3, #0
 80112c6:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 80112c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <find_volume+0x188>
 80112ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112d0:	3b01      	subs	r3, #1
 80112d2:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80112d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	3360      	adds	r3, #96	; 0x60
 80112da:	f107 0210 	add.w	r2, r7, #16
 80112de:	4413      	add	r3, r2
 80112e0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80112e4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80112e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d005      	beq.n	80112f8 <find_volume+0x1ac>
 80112ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80112ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80112f0:	f7ff fec8 	bl	8011084 <check_fs>
 80112f4:	4603      	mov	r3, r0
 80112f6:	e000      	b.n	80112fa <find_volume+0x1ae>
 80112f8:	2303      	movs	r3, #3
 80112fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80112fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011302:	2b01      	cmp	r3, #1
 8011304:	d905      	bls.n	8011312 <find_volume+0x1c6>
 8011306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011308:	3301      	adds	r3, #1
 801130a:	65bb      	str	r3, [r7, #88]	; 0x58
 801130c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801130e:	2b03      	cmp	r3, #3
 8011310:	d9e0      	bls.n	80112d4 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011312:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011316:	2b04      	cmp	r3, #4
 8011318:	d101      	bne.n	801131e <find_volume+0x1d2>
 801131a:	2301      	movs	r3, #1
 801131c:	e2a1      	b.n	8011862 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801131e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011322:	2b01      	cmp	r3, #1
 8011324:	d901      	bls.n	801132a <find_volume+0x1de>
 8011326:	230d      	movs	r3, #13
 8011328:	e29b      	b.n	8011862 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 801132a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801132e:	2b01      	cmp	r3, #1
 8011330:	f040 8101 	bne.w	8011536 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8011334:	230b      	movs	r3, #11
 8011336:	65bb      	str	r3, [r7, #88]	; 0x58
 8011338:	e002      	b.n	8011340 <find_volume+0x1f4>
 801133a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801133c:	3301      	adds	r3, #1
 801133e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011342:	2b3f      	cmp	r3, #63	; 0x3f
 8011344:	d806      	bhi.n	8011354 <find_volume+0x208>
 8011346:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801134a:	4413      	add	r3, r2
 801134c:	333c      	adds	r3, #60	; 0x3c
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d0f2      	beq.n	801133a <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8011354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011356:	2b3f      	cmp	r3, #63	; 0x3f
 8011358:	d801      	bhi.n	801135e <find_volume+0x212>
 801135a:	230d      	movs	r3, #13
 801135c:	e281      	b.n	8011862 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 801135e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011360:	333c      	adds	r3, #60	; 0x3c
 8011362:	3368      	adds	r3, #104	; 0x68
 8011364:	4618      	mov	r0, r3
 8011366:	f7fc ff87 	bl	800e278 <ld_word>
 801136a:	4603      	mov	r3, r0
 801136c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011370:	d001      	beq.n	8011376 <find_volume+0x22a>
 8011372:	230d      	movs	r3, #13
 8011374:	e275      	b.n	8011862 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8011376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011378:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 801137c:	461a      	mov	r2, r3
 801137e:	2301      	movs	r3, #1
 8011380:	4093      	lsls	r3, r2
 8011382:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011384:	8992      	ldrh	r2, [r2, #12]
 8011386:	4293      	cmp	r3, r2
 8011388:	d001      	beq.n	801138e <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 801138a:	230d      	movs	r3, #13
 801138c:	e269      	b.n	8011862 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 801138e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011390:	333c      	adds	r3, #60	; 0x3c
 8011392:	3348      	adds	r3, #72	; 0x48
 8011394:	4618      	mov	r0, r3
 8011396:	f7fc ffaa 	bl	800e2ee <ld_qword>
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80113a0:	2000      	movs	r0, #0
 80113a2:	60b9      	str	r1, [r7, #8]
 80113a4:	60f8      	str	r0, [r7, #12]
 80113a6:	68b9      	ldr	r1, [r7, #8]
 80113a8:	1851      	adds	r1, r2, r1
 80113aa:	6039      	str	r1, [r7, #0]
 80113ac:	68f9      	ldr	r1, [r7, #12]
 80113ae:	eb43 0101 	adc.w	r1, r3, r1
 80113b2:	6079      	str	r1, [r7, #4]
 80113b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80113b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 80113bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d301      	bcc.n	80113c8 <find_volume+0x27c>
 80113c4:	230d      	movs	r3, #13
 80113c6:	e24c      	b.n	8011862 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 80113c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ca:	333c      	adds	r3, #60	; 0x3c
 80113cc:	3354      	adds	r3, #84	; 0x54
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7fc ff6a 	bl	800e2a8 <ld_dword>
 80113d4:	4602      	mov	r2, r0
 80113d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d8:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 80113da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113dc:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80113e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 80113e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113e6:	789b      	ldrb	r3, [r3, #2]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d001      	beq.n	80113f0 <find_volume+0x2a4>
 80113ec:	230d      	movs	r3, #13
 80113ee:	e238      	b.n	8011862 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 80113f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f2:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 80113f6:	461a      	mov	r2, r3
 80113f8:	2301      	movs	r3, #1
 80113fa:	4093      	lsls	r3, r2
 80113fc:	b29a      	uxth	r2, r3
 80113fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011400:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8011402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011404:	895b      	ldrh	r3, [r3, #10]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d104      	bne.n	8011414 <find_volume+0x2c8>
 801140a:	230d      	movs	r3, #13
 801140c:	e229      	b.n	8011862 <find_volume+0x716>
 801140e:	bf00      	nop
 8011410:	24002438 	.word	0x24002438

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8011414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011416:	333c      	adds	r3, #60	; 0x3c
 8011418:	335c      	adds	r3, #92	; 0x5c
 801141a:	4618      	mov	r0, r3
 801141c:	f7fc ff44 	bl	800e2a8 <ld_dword>
 8011420:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8011422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011424:	4a99      	ldr	r2, [pc, #612]	; (801168c <find_volume+0x540>)
 8011426:	4293      	cmp	r3, r2
 8011428:	d901      	bls.n	801142e <find_volume+0x2e2>
 801142a:	230d      	movs	r3, #13
 801142c:	e219      	b.n	8011862 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 801142e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011430:	1c9a      	adds	r2, r3, #2
 8011432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011434:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8011436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011438:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801143a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 801143c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801143e:	333c      	adds	r3, #60	; 0x3c
 8011440:	3358      	adds	r3, #88	; 0x58
 8011442:	4618      	mov	r0, r3
 8011444:	f7fc ff30 	bl	800e2a8 <ld_dword>
 8011448:	4602      	mov	r2, r0
 801144a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801144c:	441a      	add	r2, r3
 801144e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011450:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8011452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011454:	333c      	adds	r3, #60	; 0x3c
 8011456:	3350      	adds	r3, #80	; 0x50
 8011458:	4618      	mov	r0, r3
 801145a:	f7fc ff25 	bl	800e2a8 <ld_dword>
 801145e:	4602      	mov	r2, r0
 8011460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011462:	441a      	add	r2, r3
 8011464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011466:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8011468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801146c:	2200      	movs	r2, #0
 801146e:	469a      	mov	sl, r3
 8011470:	4693      	mov	fp, r2
 8011472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011474:	895b      	ldrh	r3, [r3, #10]
 8011476:	461a      	mov	r2, r3
 8011478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147a:	fb02 f303 	mul.w	r3, r2, r3
 801147e:	2200      	movs	r2, #0
 8011480:	4698      	mov	r8, r3
 8011482:	4691      	mov	r9, r2
 8011484:	eb1a 0408 	adds.w	r4, sl, r8
 8011488:	eb4b 0509 	adc.w	r5, fp, r9
 801148c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8011490:	42a2      	cmp	r2, r4
 8011492:	41ab      	sbcs	r3, r5
 8011494:	d201      	bcs.n	801149a <find_volume+0x34e>
 8011496:	230d      	movs	r3, #13
 8011498:	e1e3      	b.n	8011862 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 801149a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801149c:	333c      	adds	r3, #60	; 0x3c
 801149e:	3360      	adds	r3, #96	; 0x60
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fc ff01 	bl	800e2a8 <ld_dword>
 80114a6:	4602      	mov	r2, r0
 80114a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114aa:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 80114ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114b0:	4619      	mov	r1, r3
 80114b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80114b4:	f7fd fb92 	bl	800ebdc <clust2sect>
 80114b8:	4603      	mov	r3, r0
 80114ba:	4619      	mov	r1, r3
 80114bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80114be:	f7fd faef 	bl	800eaa0 <move_window>
 80114c2:	4603      	mov	r3, r0
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d001      	beq.n	80114cc <find_volume+0x380>
 80114c8:	2301      	movs	r3, #1
 80114ca:	e1ca      	b.n	8011862 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80114cc:	2300      	movs	r3, #0
 80114ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80114d0:	e015      	b.n	80114fe <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80114d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114d6:	4413      	add	r3, r2
 80114d8:	333c      	adds	r3, #60	; 0x3c
 80114da:	781b      	ldrb	r3, [r3, #0]
 80114dc:	2b81      	cmp	r3, #129	; 0x81
 80114de:	d10b      	bne.n	80114f8 <find_volume+0x3ac>
 80114e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114e2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80114e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114e8:	3314      	adds	r3, #20
 80114ea:	4413      	add	r3, r2
 80114ec:	4618      	mov	r0, r3
 80114ee:	f7fc fedb 	bl	800e2a8 <ld_dword>
 80114f2:	4603      	mov	r3, r0
 80114f4:	2b02      	cmp	r3, #2
 80114f6:	d009      	beq.n	801150c <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80114f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80114fa:	3320      	adds	r3, #32
 80114fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80114fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011500:	899b      	ldrh	r3, [r3, #12]
 8011502:	461a      	mov	r2, r3
 8011504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011506:	4293      	cmp	r3, r2
 8011508:	d3e3      	bcc.n	80114d2 <find_volume+0x386>
 801150a:	e000      	b.n	801150e <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 801150c:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 801150e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011510:	899b      	ldrh	r3, [r3, #12]
 8011512:	461a      	mov	r2, r3
 8011514:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011516:	4293      	cmp	r3, r2
 8011518:	d101      	bne.n	801151e <find_volume+0x3d2>
 801151a:	230d      	movs	r3, #13
 801151c:	e1a1      	b.n	8011862 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801151e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011520:	f04f 32ff 	mov.w	r2, #4294967295
 8011524:	61da      	str	r2, [r3, #28]
 8011526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011528:	69da      	ldr	r2, [r3, #28]
 801152a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801152c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 801152e:	2304      	movs	r3, #4
 8011530:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8011534:	e17d      	b.n	8011832 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011538:	333c      	adds	r3, #60	; 0x3c
 801153a:	330b      	adds	r3, #11
 801153c:	4618      	mov	r0, r3
 801153e:	f7fc fe9b 	bl	800e278 <ld_word>
 8011542:	4603      	mov	r3, r0
 8011544:	461a      	mov	r2, r3
 8011546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011548:	899b      	ldrh	r3, [r3, #12]
 801154a:	429a      	cmp	r2, r3
 801154c:	d001      	beq.n	8011552 <find_volume+0x406>
 801154e:	230d      	movs	r3, #13
 8011550:	e187      	b.n	8011862 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011554:	333c      	adds	r3, #60	; 0x3c
 8011556:	3316      	adds	r3, #22
 8011558:	4618      	mov	r0, r3
 801155a:	f7fc fe8d 	bl	800e278 <ld_word>
 801155e:	4603      	mov	r3, r0
 8011560:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011564:	2b00      	cmp	r3, #0
 8011566:	d106      	bne.n	8011576 <find_volume+0x42a>
 8011568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801156a:	333c      	adds	r3, #60	; 0x3c
 801156c:	3324      	adds	r3, #36	; 0x24
 801156e:	4618      	mov	r0, r3
 8011570:	f7fc fe9a 	bl	800e2a8 <ld_dword>
 8011574:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8011576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011578:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801157a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801157c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801157e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011584:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011588:	789b      	ldrb	r3, [r3, #2]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d005      	beq.n	801159a <find_volume+0x44e>
 801158e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011590:	789b      	ldrb	r3, [r3, #2]
 8011592:	2b02      	cmp	r3, #2
 8011594:	d001      	beq.n	801159a <find_volume+0x44e>
 8011596:	230d      	movs	r3, #13
 8011598:	e163      	b.n	8011862 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801159a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801159c:	789b      	ldrb	r3, [r3, #2]
 801159e:	461a      	mov	r2, r3
 80115a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80115a2:	fb02 f303 	mul.w	r3, r2, r3
 80115a6:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80115a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115aa:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80115b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b6:	895b      	ldrh	r3, [r3, #10]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d008      	beq.n	80115ce <find_volume+0x482>
 80115bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115be:	895b      	ldrh	r3, [r3, #10]
 80115c0:	461a      	mov	r2, r3
 80115c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115c4:	895b      	ldrh	r3, [r3, #10]
 80115c6:	3b01      	subs	r3, #1
 80115c8:	4013      	ands	r3, r2
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d001      	beq.n	80115d2 <find_volume+0x486>
 80115ce:	230d      	movs	r3, #13
 80115d0:	e147      	b.n	8011862 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80115d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115d4:	333c      	adds	r3, #60	; 0x3c
 80115d6:	3311      	adds	r3, #17
 80115d8:	4618      	mov	r0, r3
 80115da:	f7fc fe4d 	bl	800e278 <ld_word>
 80115de:	4603      	mov	r3, r0
 80115e0:	461a      	mov	r2, r3
 80115e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80115e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115e8:	891b      	ldrh	r3, [r3, #8]
 80115ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115ec:	8992      	ldrh	r2, [r2, #12]
 80115ee:	0952      	lsrs	r2, r2, #5
 80115f0:	b292      	uxth	r2, r2
 80115f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80115f6:	fb01 f202 	mul.w	r2, r1, r2
 80115fa:	1a9b      	subs	r3, r3, r2
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <find_volume+0x4ba>
 8011602:	230d      	movs	r3, #13
 8011604:	e12d      	b.n	8011862 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011608:	333c      	adds	r3, #60	; 0x3c
 801160a:	3313      	adds	r3, #19
 801160c:	4618      	mov	r0, r3
 801160e:	f7fc fe33 	bl	800e278 <ld_word>
 8011612:	4603      	mov	r3, r0
 8011614:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011618:	2b00      	cmp	r3, #0
 801161a:	d106      	bne.n	801162a <find_volume+0x4de>
 801161c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801161e:	333c      	adds	r3, #60	; 0x3c
 8011620:	3320      	adds	r3, #32
 8011622:	4618      	mov	r0, r3
 8011624:	f7fc fe40 	bl	800e2a8 <ld_dword>
 8011628:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801162a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801162c:	333c      	adds	r3, #60	; 0x3c
 801162e:	330e      	adds	r3, #14
 8011630:	4618      	mov	r0, r3
 8011632:	f7fc fe21 	bl	800e278 <ld_word>
 8011636:	4603      	mov	r3, r0
 8011638:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801163c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011640:	2b00      	cmp	r3, #0
 8011642:	d101      	bne.n	8011648 <find_volume+0x4fc>
 8011644:	230d      	movs	r3, #13
 8011646:	e10c      	b.n	8011862 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011648:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801164c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801164e:	4413      	add	r3, r2
 8011650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011652:	8911      	ldrh	r1, [r2, #8]
 8011654:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011656:	8992      	ldrh	r2, [r2, #12]
 8011658:	0952      	lsrs	r2, r2, #5
 801165a:	b292      	uxth	r2, r2
 801165c:	fbb1 f2f2 	udiv	r2, r1, r2
 8011660:	b292      	uxth	r2, r2
 8011662:	4413      	add	r3, r2
 8011664:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011666:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011668:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801166a:	429a      	cmp	r2, r3
 801166c:	d201      	bcs.n	8011672 <find_volume+0x526>
 801166e:	230d      	movs	r3, #13
 8011670:	e0f7      	b.n	8011862 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011676:	1ad3      	subs	r3, r2, r3
 8011678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801167a:	8952      	ldrh	r2, [r2, #10]
 801167c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011680:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <find_volume+0x544>
 8011688:	230d      	movs	r3, #13
 801168a:	e0ea      	b.n	8011862 <find_volume+0x716>
 801168c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8011690:	2303      	movs	r3, #3
 8011692:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011698:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801169c:	4293      	cmp	r3, r2
 801169e:	d802      	bhi.n	80116a6 <find_volume+0x55a>
 80116a0:	2302      	movs	r3, #2
 80116a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80116a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d802      	bhi.n	80116b6 <find_volume+0x56a>
 80116b0:	2301      	movs	r3, #1
 80116b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80116b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116b8:	1c9a      	adds	r2, r3, #2
 80116ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116bc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80116be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116c2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80116c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80116c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80116ca:	441a      	add	r2, r3
 80116cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116ce:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80116d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116d4:	441a      	add	r2, r3
 80116d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116d8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80116da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d11e      	bne.n	8011720 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80116e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116e4:	333c      	adds	r3, #60	; 0x3c
 80116e6:	332a      	adds	r3, #42	; 0x2a
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fc fdc5 	bl	800e278 <ld_word>
 80116ee:	4603      	mov	r3, r0
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d001      	beq.n	80116f8 <find_volume+0x5ac>
 80116f4:	230d      	movs	r3, #13
 80116f6:	e0b4      	b.n	8011862 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80116f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116fa:	891b      	ldrh	r3, [r3, #8]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d001      	beq.n	8011704 <find_volume+0x5b8>
 8011700:	230d      	movs	r3, #13
 8011702:	e0ae      	b.n	8011862 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011706:	333c      	adds	r3, #60	; 0x3c
 8011708:	332c      	adds	r3, #44	; 0x2c
 801170a:	4618      	mov	r0, r3
 801170c:	f7fc fdcc 	bl	800e2a8 <ld_dword>
 8011710:	4602      	mov	r2, r0
 8011712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011714:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011718:	6a1b      	ldr	r3, [r3, #32]
 801171a:	009b      	lsls	r3, r3, #2
 801171c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801171e:	e01f      	b.n	8011760 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011722:	891b      	ldrh	r3, [r3, #8]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d101      	bne.n	801172c <find_volume+0x5e0>
 8011728:	230d      	movs	r3, #13
 801172a:	e09a      	b.n	8011862 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801172c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801172e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011732:	441a      	add	r2, r3
 8011734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011736:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011738:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801173c:	2b02      	cmp	r3, #2
 801173e:	d103      	bne.n	8011748 <find_volume+0x5fc>
 8011740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011742:	6a1b      	ldr	r3, [r3, #32]
 8011744:	005b      	lsls	r3, r3, #1
 8011746:	e00a      	b.n	801175e <find_volume+0x612>
 8011748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801174a:	6a1a      	ldr	r2, [r3, #32]
 801174c:	4613      	mov	r3, r2
 801174e:	005b      	lsls	r3, r3, #1
 8011750:	4413      	add	r3, r2
 8011752:	085a      	lsrs	r2, r3, #1
 8011754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011756:	6a1b      	ldr	r3, [r3, #32]
 8011758:	f003 0301 	and.w	r3, r3, #1
 801175c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801175e:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011762:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011766:	899b      	ldrh	r3, [r3, #12]
 8011768:	4619      	mov	r1, r3
 801176a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801176c:	440b      	add	r3, r1
 801176e:	3b01      	subs	r3, #1
 8011770:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011772:	8989      	ldrh	r1, [r1, #12]
 8011774:	fbb3 f3f1 	udiv	r3, r3, r1
 8011778:	429a      	cmp	r2, r3
 801177a:	d201      	bcs.n	8011780 <find_volume+0x634>
 801177c:	230d      	movs	r3, #13
 801177e:	e070      	b.n	8011862 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011782:	f04f 32ff 	mov.w	r2, #4294967295
 8011786:	61da      	str	r2, [r3, #28]
 8011788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801178a:	69da      	ldr	r2, [r3, #28]
 801178c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801178e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8011790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011792:	2280      	movs	r2, #128	; 0x80
 8011794:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011796:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801179a:	2b03      	cmp	r3, #3
 801179c:	d149      	bne.n	8011832 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801179e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117a0:	333c      	adds	r3, #60	; 0x3c
 80117a2:	3330      	adds	r3, #48	; 0x30
 80117a4:	4618      	mov	r0, r3
 80117a6:	f7fc fd67 	bl	800e278 <ld_word>
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d140      	bne.n	8011832 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 80117b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117b2:	3301      	adds	r3, #1
 80117b4:	4619      	mov	r1, r3
 80117b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80117b8:	f7fd f972 	bl	800eaa0 <move_window>
 80117bc:	4603      	mov	r3, r0
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d137      	bne.n	8011832 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 80117c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117c4:	2200      	movs	r2, #0
 80117c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80117c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117ca:	333c      	adds	r3, #60	; 0x3c
 80117cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7fc fd51 	bl	800e278 <ld_word>
 80117d6:	4603      	mov	r3, r0
 80117d8:	461a      	mov	r2, r3
 80117da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80117de:	429a      	cmp	r2, r3
 80117e0:	d127      	bne.n	8011832 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80117e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117e4:	333c      	adds	r3, #60	; 0x3c
 80117e6:	4618      	mov	r0, r3
 80117e8:	f7fc fd5e 	bl	800e2a8 <ld_dword>
 80117ec:	4603      	mov	r3, r0
 80117ee:	4a1f      	ldr	r2, [pc, #124]	; (801186c <find_volume+0x720>)
 80117f0:	4293      	cmp	r3, r2
 80117f2:	d11e      	bne.n	8011832 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80117f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117f6:	333c      	adds	r3, #60	; 0x3c
 80117f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7fc fd53 	bl	800e2a8 <ld_dword>
 8011802:	4603      	mov	r3, r0
 8011804:	4a1a      	ldr	r2, [pc, #104]	; (8011870 <find_volume+0x724>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d113      	bne.n	8011832 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801180a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801180c:	333c      	adds	r3, #60	; 0x3c
 801180e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011812:	4618      	mov	r0, r3
 8011814:	f7fc fd48 	bl	800e2a8 <ld_dword>
 8011818:	4602      	mov	r2, r0
 801181a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801181c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801181e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011820:	333c      	adds	r3, #60	; 0x3c
 8011822:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011826:	4618      	mov	r0, r3
 8011828:	f7fc fd3e 	bl	800e2a8 <ld_dword>
 801182c:	4602      	mov	r2, r0
 801182e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011830:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011834:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8011838:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801183a:	4b0e      	ldr	r3, [pc, #56]	; (8011874 <find_volume+0x728>)
 801183c:	881b      	ldrh	r3, [r3, #0]
 801183e:	3301      	adds	r3, #1
 8011840:	b29a      	uxth	r2, r3
 8011842:	4b0c      	ldr	r3, [pc, #48]	; (8011874 <find_volume+0x728>)
 8011844:	801a      	strh	r2, [r3, #0]
 8011846:	4b0b      	ldr	r3, [pc, #44]	; (8011874 <find_volume+0x728>)
 8011848:	881a      	ldrh	r2, [r3, #0]
 801184a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801184c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801184e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011850:	4a09      	ldr	r2, [pc, #36]	; (8011878 <find_volume+0x72c>)
 8011852:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8011854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011856:	4a09      	ldr	r2, [pc, #36]	; (801187c <find_volume+0x730>)
 8011858:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801185a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801185c:	f7fd f8b8 	bl	800e9d0 <clear_lock>
#endif
	return FR_OK;
 8011860:	2300      	movs	r3, #0
}
 8011862:	4618      	mov	r0, r3
 8011864:	3770      	adds	r7, #112	; 0x70
 8011866:	46bd      	mov	sp, r7
 8011868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801186c:	41615252 	.word	0x41615252
 8011870:	61417272 	.word	0x61417272
 8011874:	2400243c 	.word	0x2400243c
 8011878:	240026c0 	.word	0x240026c0
 801187c:	24002460 	.word	0x24002460

08011880 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b084      	sub	sp, #16
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
 8011888:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801188a:	2309      	movs	r3, #9
 801188c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d01c      	beq.n	80118ce <validate+0x4e>
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d018      	beq.n	80118ce <validate+0x4e>
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d013      	beq.n	80118ce <validate+0x4e>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	889a      	ldrh	r2, [r3, #4]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	88db      	ldrh	r3, [r3, #6]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d10c      	bne.n	80118ce <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	785b      	ldrb	r3, [r3, #1]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fc fc3e 	bl	800e13c <disk_status>
 80118c0:	4603      	mov	r3, r0
 80118c2:	f003 0301 	and.w	r3, r3, #1
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d101      	bne.n	80118ce <validate+0x4e>
			res = FR_OK;
 80118ca:	2300      	movs	r3, #0
 80118cc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80118ce:	7bfb      	ldrb	r3, [r7, #15]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d102      	bne.n	80118da <validate+0x5a>
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	e000      	b.n	80118dc <validate+0x5c>
 80118da:	2300      	movs	r3, #0
 80118dc:	683a      	ldr	r2, [r7, #0]
 80118de:	6013      	str	r3, [r2, #0]
	return res;
 80118e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3710      	adds	r7, #16
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
	...

080118ec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b088      	sub	sp, #32
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	60f8      	str	r0, [r7, #12]
 80118f4:	60b9      	str	r1, [r7, #8]
 80118f6:	4613      	mov	r3, r2
 80118f8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80118fa:	68bb      	ldr	r3, [r7, #8]
 80118fc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80118fe:	f107 0310 	add.w	r3, r7, #16
 8011902:	4618      	mov	r0, r3
 8011904:	f7ff fb7a 	bl	8010ffc <get_ldnumber>
 8011908:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	2b00      	cmp	r3, #0
 801190e:	da01      	bge.n	8011914 <f_mount+0x28>
 8011910:	230b      	movs	r3, #11
 8011912:	e02b      	b.n	801196c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011914:	4a17      	ldr	r2, [pc, #92]	; (8011974 <f_mount+0x88>)
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801191c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801191e:	69bb      	ldr	r3, [r7, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d005      	beq.n	8011930 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011924:	69b8      	ldr	r0, [r7, #24]
 8011926:	f7fd f853 	bl	800e9d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801192a:	69bb      	ldr	r3, [r7, #24]
 801192c:	2200      	movs	r2, #0
 801192e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d002      	beq.n	801193c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2200      	movs	r2, #0
 801193a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801193c:	68fa      	ldr	r2, [r7, #12]
 801193e:	490d      	ldr	r1, [pc, #52]	; (8011974 <f_mount+0x88>)
 8011940:	69fb      	ldr	r3, [r7, #28]
 8011942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d002      	beq.n	8011952 <f_mount+0x66>
 801194c:	79fb      	ldrb	r3, [r7, #7]
 801194e:	2b01      	cmp	r3, #1
 8011950:	d001      	beq.n	8011956 <f_mount+0x6a>
 8011952:	2300      	movs	r3, #0
 8011954:	e00a      	b.n	801196c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011956:	f107 010c 	add.w	r1, r7, #12
 801195a:	f107 0308 	add.w	r3, r7, #8
 801195e:	2200      	movs	r2, #0
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fbf3 	bl	801114c <find_volume>
 8011966:	4603      	mov	r3, r0
 8011968:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801196a:	7dfb      	ldrb	r3, [r7, #23]
}
 801196c:	4618      	mov	r0, r3
 801196e:	3720      	adds	r7, #32
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}
 8011974:	24002438 	.word	0x24002438

08011978 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801197c:	b0a8      	sub	sp, #160	; 0xa0
 801197e:	af00      	add	r7, sp, #0
 8011980:	6278      	str	r0, [r7, #36]	; 0x24
 8011982:	6239      	str	r1, [r7, #32]
 8011984:	4613      	mov	r3, r2
 8011986:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <f_open+0x1a>
 801198e:	2309      	movs	r3, #9
 8011990:	e2c0      	b.n	8011f14 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011992:	7ffb      	ldrb	r3, [r7, #31]
 8011994:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011998:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 801199a:	7ffb      	ldrb	r3, [r7, #31]
 801199c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80119a0:	f107 0020 	add.w	r0, r7, #32
 80119a4:	461a      	mov	r2, r3
 80119a6:	f7ff fbd1 	bl	801114c <find_volume>
 80119aa:	4603      	mov	r3, r0
 80119ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 80119b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	f040 82a4 	bne.w	8011f02 <f_open+0x58a>
		dj.obj.fs = fs;
 80119ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119bc:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80119be:	6a3b      	ldr	r3, [r7, #32]
 80119c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80119c4:	4619      	mov	r1, r3
 80119c6:	4610      	mov	r0, r2
 80119c8:	f7ff fa6a 	bl	8010ea0 <follow_path>
 80119cc:	4603      	mov	r3, r0
 80119ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80119d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d11a      	bne.n	8011a10 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80119da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80119de:	b25b      	sxtb	r3, r3
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	da03      	bge.n	80119ec <f_open+0x74>
				res = FR_INVALID_NAME;
 80119e4:	2306      	movs	r3, #6
 80119e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80119ea:	e011      	b.n	8011a10 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80119ec:	7ffb      	ldrb	r3, [r7, #31]
 80119ee:	f023 0301 	bic.w	r3, r3, #1
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	bf14      	ite	ne
 80119f6:	2301      	movne	r3, #1
 80119f8:	2300      	moveq	r3, #0
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	461a      	mov	r2, r3
 80119fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011a02:	4611      	mov	r1, r2
 8011a04:	4618      	mov	r0, r3
 8011a06:	f7fc fe9b 	bl	800e740 <chk_lock>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011a10:	7ffb      	ldrb	r3, [r7, #31]
 8011a12:	f003 031c 	and.w	r3, r3, #28
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f000 8117 	beq.w	8011c4a <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 8011a1c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d017      	beq.n	8011a54 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011a24:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011a28:	2b04      	cmp	r3, #4
 8011a2a:	d10e      	bne.n	8011a4a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011a2c:	f7fc fee4 	bl	800e7f8 <enq_lock>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d006      	beq.n	8011a44 <f_open+0xcc>
 8011a36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fe fece 	bl	80107dc <dir_register>
 8011a40:	4603      	mov	r3, r0
 8011a42:	e000      	b.n	8011a46 <f_open+0xce>
 8011a44:	2312      	movs	r3, #18
 8011a46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011a4a:	7ffb      	ldrb	r3, [r7, #31]
 8011a4c:	f043 0308 	orr.w	r3, r3, #8
 8011a50:	77fb      	strb	r3, [r7, #31]
 8011a52:	e011      	b.n	8011a78 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011a54:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011a58:	f003 0311 	and.w	r3, r3, #17
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d003      	beq.n	8011a68 <f_open+0xf0>
					res = FR_DENIED;
 8011a60:	2307      	movs	r3, #7
 8011a62:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011a66:	e007      	b.n	8011a78 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011a68:	7ffb      	ldrb	r3, [r7, #31]
 8011a6a:	f003 0304 	and.w	r3, r3, #4
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d002      	beq.n	8011a78 <f_open+0x100>
 8011a72:	2308      	movs	r3, #8
 8011a74:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011a78:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	f040 8100 	bne.w	8011c82 <f_open+0x30a>
 8011a82:	7ffb      	ldrb	r3, [r7, #31]
 8011a84:	f003 0308 	and.w	r3, r3, #8
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	f000 80fa 	beq.w	8011c82 <f_open+0x30a>
				dw = GET_FATTIME();
 8011a8e:	f7fc f9b9 	bl	800de04 <get_fattime>
 8011a92:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	781b      	ldrb	r3, [r3, #0]
 8011a9a:	2b04      	cmp	r3, #4
 8011a9c:	f040 8085 	bne.w	8011baa <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8011aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8011aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa8:	695b      	ldr	r3, [r3, #20]
 8011aaa:	3334      	adds	r3, #52	; 0x34
 8011aac:	4618      	mov	r0, r3
 8011aae:	f7fc fbfb 	bl	800e2a8 <ld_dword>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8011ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aba:	695b      	ldr	r3, [r3, #20]
 8011abc:	3338      	adds	r3, #56	; 0x38
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7fc fc15 	bl	800e2ee <ld_qword>
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8011aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011acc:	695b      	ldr	r3, [r3, #20]
 8011ace:	3321      	adds	r3, #33	; 0x21
 8011ad0:	781b      	ldrb	r3, [r3, #0]
 8011ad2:	f003 0302 	and.w	r3, r3, #2
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ada:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 8011adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ade:	2200      	movs	r2, #0
 8011ae0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8011ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae4:	695b      	ldr	r3, [r3, #20]
 8011ae6:	3308      	adds	r3, #8
 8011ae8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fc fcf4 	bl	800e4da <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8011af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011af4:	695b      	ldr	r3, [r3, #20]
 8011af6:	f103 0214 	add.w	r2, r3, #20
 8011afa:	2300      	movs	r3, #0
 8011afc:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8011afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b00:	695b      	ldr	r3, [r3, #20]
 8011b02:	330c      	adds	r3, #12
 8011b04:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fc fce6 	bl	800e4da <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8011b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b10:	695b      	ldr	r3, [r3, #20]
 8011b12:	f103 0215 	add.w	r2, r3, #21
 8011b16:	2300      	movs	r3, #0
 8011b18:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8011b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1c:	695b      	ldr	r3, [r3, #20]
 8011b1e:	1d1a      	adds	r2, r3, #4
 8011b20:	2320      	movs	r3, #32
 8011b22:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8011b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b26:	695b      	ldr	r3, [r3, #20]
 8011b28:	3334      	adds	r3, #52	; 0x34
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f7fc fcd4 	bl	800e4da <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8011b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b3a:	f04f 0200 	mov.w	r2, #0
 8011b3e:	f04f 0300 	mov.w	r3, #0
 8011b42:	4608      	mov	r0, r1
 8011b44:	f7fc fcf5 	bl	800e532 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8011b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4a:	695b      	ldr	r3, [r3, #20]
 8011b4c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8011b50:	f04f 0200 	mov.w	r2, #0
 8011b54:	f04f 0300 	mov.w	r3, #0
 8011b58:	4608      	mov	r0, r1
 8011b5a:	f7fc fcea 	bl	800e532 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8011b66:	2301      	movs	r3, #1
 8011b68:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8011b6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011b6e:	4618      	mov	r0, r3
 8011b70:	f7fe fb82 	bl	8010278 <store_xdir>
 8011b74:	4603      	mov	r3, r0
 8011b76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8011b7a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d17f      	bne.n	8011c82 <f_open+0x30a>
 8011b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b84:	689b      	ldr	r3, [r3, #8]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d07b      	beq.n	8011c82 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8011b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8e:	689b      	ldr	r3, [r3, #8]
 8011b90:	2200      	movs	r2, #0
 8011b92:	4619      	mov	r1, r3
 8011b94:	f7fd fc14 	bl	800f3c0 <remove_chain>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8011b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ba0:	689b      	ldr	r3, [r3, #8]
 8011ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ba4:	3b01      	subs	r3, #1
 8011ba6:	6193      	str	r3, [r2, #24]
 8011ba8:	e06b      	b.n	8011c82 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bac:	330e      	adds	r3, #14
 8011bae:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fc fc91 	bl	800e4da <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bba:	3316      	adds	r3, #22
 8011bbc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7fc fc8a 	bl	800e4da <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bc8:	f103 020b 	add.w	r2, r3, #11
 8011bcc:	2320      	movs	r3, #32
 8011bce:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7fd ffc9 	bl	800fb6e <ld_clust>
 8011bdc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011be0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011be4:	2200      	movs	r2, #0
 8011be6:	4619      	mov	r1, r3
 8011be8:	f7fd ffe0 	bl	800fbac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011bee:	331c      	adds	r3, #28
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7fc fc71 	bl	800e4da <st_dword>
					fs->wflag = 1;
 8011bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bfa:	2301      	movs	r3, #1
 8011bfc:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d03d      	beq.n	8011c82 <f_open+0x30a>
						dw = fs->winsect;
 8011c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 8011c0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011c12:	2200      	movs	r2, #0
 8011c14:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fd fbd1 	bl	800f3c0 <remove_chain>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 8011c24:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d12a      	bne.n	8011c82 <f_open+0x30a>
							res = move_window(fs, dw);
 8011c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fc ff34 	bl	800eaa0 <move_window>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c44:	3b01      	subs	r3, #1
 8011c46:	6193      	str	r3, [r2, #24]
 8011c48:	e01b      	b.n	8011c82 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011c4a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d117      	bne.n	8011c82 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011c52:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c56:	f003 0310 	and.w	r3, r3, #16
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d003      	beq.n	8011c66 <f_open+0x2ee>
					res = FR_NO_FILE;
 8011c5e:	2304      	movs	r3, #4
 8011c60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011c64:	e00d      	b.n	8011c82 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011c66:	7ffb      	ldrb	r3, [r7, #31]
 8011c68:	f003 0302 	and.w	r3, r3, #2
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d008      	beq.n	8011c82 <f_open+0x30a>
 8011c70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8011c74:	f003 0301 	and.w	r3, r3, #1
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d002      	beq.n	8011c82 <f_open+0x30a>
						res = FR_DENIED;
 8011c7c:	2307      	movs	r3, #7
 8011c7e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011c82:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d128      	bne.n	8011cdc <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011c8a:	7ffb      	ldrb	r3, [r7, #31]
 8011c8c:	f003 0308 	and.w	r3, r3, #8
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d003      	beq.n	8011c9c <f_open+0x324>
				mode |= FA_MODIFIED;
 8011c94:	7ffb      	ldrb	r3, [r7, #31]
 8011c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c9a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8011ca4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011caa:	7ffb      	ldrb	r3, [r7, #31]
 8011cac:	f023 0301 	bic.w	r3, r3, #1
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	bf14      	ite	ne
 8011cb4:	2301      	movne	r3, #1
 8011cb6:	2300      	moveq	r3, #0
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	461a      	mov	r2, r3
 8011cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f7fc fdba 	bl	800e83c <inc_lock>
 8011cc8:	4602      	mov	r2, r0
 8011cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ccc:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d102      	bne.n	8011cdc <f_open+0x364>
 8011cd6:	2302      	movs	r3, #2
 8011cd8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011cdc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f040 810e 	bne.w	8011f02 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8011ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce8:	781b      	ldrb	r3, [r3, #0]
 8011cea:	2b04      	cmp	r3, #4
 8011cec:	d12d      	bne.n	8011d4a <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8011cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf2:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8011cf4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011cfe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011d02:	431a      	orrs	r2, r3
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8011d08:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d0c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8011d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d10:	695b      	ldr	r3, [r3, #20]
 8011d12:	3334      	adds	r3, #52	; 0x34
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7fc fac7 	bl	800e2a8 <ld_dword>
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8011d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d22:	695b      	ldr	r3, [r3, #20]
 8011d24:	3338      	adds	r3, #56	; 0x38
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7fc fae1 	bl	800e2ee <ld_qword>
 8011d2c:	4602      	mov	r2, r0
 8011d2e:	460b      	mov	r3, r1
 8011d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d32:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8011d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d38:	695b      	ldr	r3, [r3, #20]
 8011d3a:	3321      	adds	r3, #33	; 0x21
 8011d3c:	781b      	ldrb	r3, [r3, #0]
 8011d3e:	f003 0302 	and.w	r3, r3, #2
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d46:	71da      	strb	r2, [r3, #7]
 8011d48:	e016      	b.n	8011d78 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d4e:	4619      	mov	r1, r3
 8011d50:	4610      	mov	r0, r2
 8011d52:	f7fd ff0c 	bl	800fb6e <ld_clust>
 8011d56:	4602      	mov	r2, r0
 8011d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011d5e:	331c      	adds	r3, #28
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fc faa1 	bl	800e2a8 <ld_dword>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2200      	movs	r2, #0
 8011d6a:	613b      	str	r3, [r7, #16]
 8011d6c:	617a      	str	r2, [r7, #20]
 8011d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d70:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011d74:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d86:	88da      	ldrh	r2, [r3, #6]
 8011d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8e:	7ffa      	ldrb	r2, [r7, #31]
 8011d90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	2200      	movs	r2, #0
 8011da0:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011da4:	f04f 0200 	mov.w	r2, #0
 8011da8:	f04f 0300 	mov.w	r3, #0
 8011dac:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011db2:	3354      	adds	r3, #84	; 0x54
 8011db4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011db8:	2100      	movs	r1, #0
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f7fc fc62 	bl	800e684 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011dc0:	7ffb      	ldrb	r3, [r7, #31]
 8011dc2:	f003 0320 	and.w	r3, r3, #32
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f000 809b 	beq.w	8011f02 <f_open+0x58a>
 8011dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011dd2:	4313      	orrs	r3, r2
 8011dd4:	f000 8095 	beq.w	8011f02 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dda:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011dde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011de0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	895b      	ldrh	r3, [r3, #10]
 8011de8:	461a      	mov	r2, r3
 8011dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dec:	899b      	ldrh	r3, [r3, #12]
 8011dee:	fb02 f303 	mul.w	r3, r2, r3
 8011df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011df8:	689b      	ldr	r3, [r3, #8]
 8011dfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011e04:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8011e08:	e023      	b.n	8011e52 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011e10:	4618      	mov	r0, r3
 8011e12:	f7fc ff03 	bl	800ec1c <get_fat>
 8011e16:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8011e1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e1e:	2b01      	cmp	r3, #1
 8011e20:	d802      	bhi.n	8011e28 <f_open+0x4b0>
 8011e22:	2302      	movs	r3, #2
 8011e24:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011e28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e30:	d102      	bne.n	8011e38 <f_open+0x4c0>
 8011e32:	2301      	movs	r3, #1
 8011e34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011e38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	4698      	mov	r8, r3
 8011e40:	4691      	mov	r9, r2
 8011e42:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011e46:	ebb2 0a08 	subs.w	sl, r2, r8
 8011e4a:	eb63 0b09 	sbc.w	fp, r3, r9
 8011e4e:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 8011e52:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d10a      	bne.n	8011e70 <f_open+0x4f8>
 8011e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011e5e:	2200      	movs	r2, #0
 8011e60:	461c      	mov	r4, r3
 8011e62:	4615      	mov	r5, r2
 8011e64:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8011e68:	4294      	cmp	r4, r2
 8011e6a:	eb75 0303 	sbcs.w	r3, r5, r3
 8011e6e:	d3cc      	bcc.n	8011e0a <f_open+0x492>
				}
				fp->clust = clst;
 8011e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011e76:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011e78:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d140      	bne.n	8011f02 <f_open+0x58a>
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	899b      	ldrh	r3, [r3, #12]
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	2200      	movs	r2, #0
 8011e88:	60bb      	str	r3, [r7, #8]
 8011e8a:	60fa      	str	r2, [r7, #12]
 8011e8c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8011e90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011e94:	f7ee fa74 	bl	8000380 <__aeabi_uldivmod>
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	d032      	beq.n	8011f02 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fc fe9a 	bl	800ebdc <clust2sect>
 8011ea8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8011eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d103      	bne.n	8011ebc <f_open+0x544>
						res = FR_INT_ERR;
 8011eb4:	2302      	movs	r3, #2
 8011eb6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8011eba:	e022      	b.n	8011f02 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	899b      	ldrh	r3, [r3, #12]
 8011ec0:	b29b      	uxth	r3, r3
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	603b      	str	r3, [r7, #0]
 8011ec6:	607a      	str	r2, [r7, #4]
 8011ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011ecc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8011ed0:	f7ee fa56 	bl	8000380 <__aeabi_uldivmod>
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011edc:	441a      	add	r2, r3
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee4:	7858      	ldrb	r0, [r3, #1]
 8011ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	f7fc f963 	bl	800e1bc <disk_read>
 8011ef6:	4603      	mov	r3, r0
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d002      	beq.n	8011f02 <f_open+0x58a>
 8011efc:	2301      	movs	r3, #1
 8011efe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011f02:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d002      	beq.n	8011f10 <f_open+0x598>
 8011f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011f10:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	37a0      	adds	r7, #160	; 0xa0
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011f1e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011f1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f22:	b091      	sub	sp, #68	; 0x44
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	61f8      	str	r0, [r7, #28]
 8011f28:	61b9      	str	r1, [r7, #24]
 8011f2a:	617a      	str	r2, [r7, #20]
 8011f2c:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	2200      	movs	r2, #0
 8011f36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011f38:	69fb      	ldr	r3, [r7, #28]
 8011f3a:	f107 0220 	add.w	r2, r7, #32
 8011f3e:	4611      	mov	r1, r2
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff fc9d 	bl	8011880 <validate>
 8011f46:	4603      	mov	r3, r0
 8011f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d108      	bne.n	8011f66 <f_write+0x48>
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011f5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d002      	beq.n	8011f6c <f_write+0x4e>
 8011f66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011f6a:	e1aa      	b.n	80122c2 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011f6c:	69fb      	ldr	r3, [r7, #28]
 8011f6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011f72:	f003 0302 	and.w	r3, r3, #2
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d101      	bne.n	8011f7e <f_write+0x60>
 8011f7a:	2307      	movs	r3, #7
 8011f7c:	e1a1      	b.n	80122c2 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011f7e:	6a3b      	ldr	r3, [r7, #32]
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	2b04      	cmp	r3, #4
 8011f84:	f000 818d 	beq.w	80122a2 <f_write+0x384>
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011f8e:	697b      	ldr	r3, [r7, #20]
 8011f90:	18d1      	adds	r1, r2, r3
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011f98:	4613      	mov	r3, r2
 8011f9a:	4299      	cmp	r1, r3
 8011f9c:	f080 8181 	bcs.w	80122a2 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	43db      	mvns	r3, r3
 8011faa:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011fac:	e179      	b.n	80122a2 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011fb4:	6a3b      	ldr	r3, [r7, #32]
 8011fb6:	899b      	ldrh	r3, [r3, #12]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	2200      	movs	r2, #0
 8011fbc:	461d      	mov	r5, r3
 8011fbe:	4616      	mov	r6, r2
 8011fc0:	462a      	mov	r2, r5
 8011fc2:	4633      	mov	r3, r6
 8011fc4:	f7ee f9dc 	bl	8000380 <__aeabi_uldivmod>
 8011fc8:	4313      	orrs	r3, r2
 8011fca:	f040 810a 	bne.w	80121e2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011fce:	69fb      	ldr	r3, [r7, #28]
 8011fd0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011fd4:	6a3b      	ldr	r3, [r7, #32]
 8011fd6:	899b      	ldrh	r3, [r3, #12]
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	2200      	movs	r2, #0
 8011fdc:	60bb      	str	r3, [r7, #8]
 8011fde:	60fa      	str	r2, [r7, #12]
 8011fe0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8011fe4:	f7ee f9cc 	bl	8000380 <__aeabi_uldivmod>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	6a3b      	ldr	r3, [r7, #32]
 8011fee:	895b      	ldrh	r3, [r3, #10]
 8011ff0:	3b01      	subs	r3, #1
 8011ff2:	4013      	ands	r3, r2
 8011ff4:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 8011ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d146      	bne.n	801208a <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011ffc:	69fb      	ldr	r3, [r7, #28]
 8011ffe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012002:	4313      	orrs	r3, r2
 8012004:	d10c      	bne.n	8012020 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	689b      	ldr	r3, [r3, #8]
 801200a:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 801200c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801200e:	2b00      	cmp	r3, #0
 8012010:	d11a      	bne.n	8012048 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	2100      	movs	r1, #0
 8012016:	4618      	mov	r0, r3
 8012018:	f7fd fa86 	bl	800f528 <create_chain>
 801201c:	63b8      	str	r0, [r7, #56]	; 0x38
 801201e:	e013      	b.n	8012048 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012024:	2b00      	cmp	r3, #0
 8012026:	d007      	beq.n	8012038 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801202e:	69f8      	ldr	r0, [r7, #28]
 8012030:	f7fd fb7b 	bl	800f72a <clmt_clust>
 8012034:	63b8      	str	r0, [r7, #56]	; 0x38
 8012036:	e007      	b.n	8012048 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012038:	69fa      	ldr	r2, [r7, #28]
 801203a:	69fb      	ldr	r3, [r7, #28]
 801203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801203e:	4619      	mov	r1, r3
 8012040:	4610      	mov	r0, r2
 8012042:	f7fd fa71 	bl	800f528 <create_chain>
 8012046:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204a:	2b00      	cmp	r3, #0
 801204c:	f000 812e 	beq.w	80122ac <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012052:	2b01      	cmp	r3, #1
 8012054:	d105      	bne.n	8012062 <f_write+0x144>
 8012056:	69fb      	ldr	r3, [r7, #28]
 8012058:	2202      	movs	r2, #2
 801205a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801205e:	2302      	movs	r3, #2
 8012060:	e12f      	b.n	80122c2 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012068:	d105      	bne.n	8012076 <f_write+0x158>
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	2201      	movs	r2, #1
 801206e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8012072:	2301      	movs	r3, #1
 8012074:	e125      	b.n	80122c2 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801207a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801207c:	69fb      	ldr	r3, [r7, #28]
 801207e:	689b      	ldr	r3, [r3, #8]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d102      	bne.n	801208a <f_write+0x16c>
 8012084:	69fb      	ldr	r3, [r7, #28]
 8012086:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012088:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801208a:	69fb      	ldr	r3, [r7, #28]
 801208c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012090:	b25b      	sxtb	r3, r3
 8012092:	2b00      	cmp	r3, #0
 8012094:	da1b      	bge.n	80120ce <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012096:	6a3b      	ldr	r3, [r7, #32]
 8012098:	7858      	ldrb	r0, [r3, #1]
 801209a:	69fb      	ldr	r3, [r7, #28]
 801209c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80120a0:	69fb      	ldr	r3, [r7, #28]
 80120a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120a4:	2301      	movs	r3, #1
 80120a6:	f7fc f8a9 	bl	800e1fc <disk_write>
 80120aa:	4603      	mov	r3, r0
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d005      	beq.n	80120bc <f_write+0x19e>
 80120b0:	69fb      	ldr	r3, [r7, #28]
 80120b2:	2201      	movs	r2, #1
 80120b4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80120b8:	2301      	movs	r3, #1
 80120ba:	e102      	b.n	80122c2 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80120bc:	69fb      	ldr	r3, [r7, #28]
 80120be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80120c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80120ce:	6a3a      	ldr	r2, [r7, #32]
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120d4:	4619      	mov	r1, r3
 80120d6:	4610      	mov	r0, r2
 80120d8:	f7fc fd80 	bl	800ebdc <clust2sect>
 80120dc:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 80120de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d105      	bne.n	80120f0 <f_write+0x1d2>
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	2202      	movs	r2, #2
 80120e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80120ec:	2302      	movs	r3, #2
 80120ee:	e0e8      	b.n	80122c2 <f_write+0x3a4>
			sect += csect;
 80120f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120f4:	4413      	add	r3, r2
 80120f6:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80120f8:	6a3b      	ldr	r3, [r7, #32]
 80120fa:	899b      	ldrh	r3, [r3, #12]
 80120fc:	461a      	mov	r2, r3
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	fbb3 f3f2 	udiv	r3, r3, r2
 8012104:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012108:	2b00      	cmp	r3, #0
 801210a:	d046      	beq.n	801219a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801210c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	4413      	add	r3, r2
 8012112:	6a3a      	ldr	r2, [r7, #32]
 8012114:	8952      	ldrh	r2, [r2, #10]
 8012116:	4293      	cmp	r3, r2
 8012118:	d905      	bls.n	8012126 <f_write+0x208>
					cc = fs->csize - csect;
 801211a:	6a3b      	ldr	r3, [r7, #32]
 801211c:	895b      	ldrh	r3, [r3, #10]
 801211e:	461a      	mov	r2, r3
 8012120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012122:	1ad3      	subs	r3, r2, r3
 8012124:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012126:	6a3b      	ldr	r3, [r7, #32]
 8012128:	7858      	ldrb	r0, [r3, #1]
 801212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801212e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012130:	f7fc f864 	bl	800e1fc <disk_write>
 8012134:	4603      	mov	r3, r0
 8012136:	2b00      	cmp	r3, #0
 8012138:	d005      	beq.n	8012146 <f_write+0x228>
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	2201      	movs	r2, #1
 801213e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8012142:	2301      	movs	r3, #1
 8012144:	e0bd      	b.n	80122c2 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012146:	69fb      	ldr	r3, [r7, #28]
 8012148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801214a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214c:	1ad3      	subs	r3, r2, r3
 801214e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012150:	429a      	cmp	r2, r3
 8012152:	d91a      	bls.n	801218a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012160:	1ad3      	subs	r3, r2, r3
 8012162:	6a3a      	ldr	r2, [r7, #32]
 8012164:	8992      	ldrh	r2, [r2, #12]
 8012166:	fb02 f303 	mul.w	r3, r2, r3
 801216a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801216c:	18d1      	adds	r1, r2, r3
 801216e:	6a3b      	ldr	r3, [r7, #32]
 8012170:	899b      	ldrh	r3, [r3, #12]
 8012172:	461a      	mov	r2, r3
 8012174:	f7fc fa65 	bl	800e642 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801217e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012182:	b2da      	uxtb	r2, r3
 8012184:	69fb      	ldr	r3, [r7, #28]
 8012186:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801218a:	6a3b      	ldr	r3, [r7, #32]
 801218c:	899b      	ldrh	r3, [r3, #12]
 801218e:	461a      	mov	r2, r3
 8012190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012192:	fb02 f303 	mul.w	r3, r2, r3
 8012196:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 8012198:	e058      	b.n	801224c <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d01b      	beq.n	80121dc <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80121b0:	4290      	cmp	r0, r2
 80121b2:	eb71 0303 	sbcs.w	r3, r1, r3
 80121b6:	d211      	bcs.n	80121dc <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80121b8:	6a3b      	ldr	r3, [r7, #32]
 80121ba:	7858      	ldrb	r0, [r3, #1]
 80121bc:	69fb      	ldr	r3, [r7, #28]
 80121be:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80121c2:	2301      	movs	r3, #1
 80121c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121c6:	f7fb fff9 	bl	800e1bc <disk_read>
 80121ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d005      	beq.n	80121dc <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80121d0:	69fb      	ldr	r3, [r7, #28]
 80121d2:	2201      	movs	r2, #1
 80121d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80121d8:	2301      	movs	r3, #1
 80121da:	e072      	b.n	80122c2 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121e0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80121e2:	6a3b      	ldr	r3, [r7, #32]
 80121e4:	899b      	ldrh	r3, [r3, #12]
 80121e6:	4618      	mov	r0, r3
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	899b      	ldrh	r3, [r3, #12]
 80121f2:	fbb2 f1f3 	udiv	r1, r2, r3
 80121f6:	fb01 f303 	mul.w	r3, r1, r3
 80121fa:	1ad3      	subs	r3, r2, r3
 80121fc:	1ac3      	subs	r3, r0, r3
 80121fe:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8012200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012202:	697b      	ldr	r3, [r7, #20]
 8012204:	429a      	cmp	r2, r3
 8012206:	d901      	bls.n	801220c <f_write+0x2ee>
 8012208:	697b      	ldr	r3, [r7, #20]
 801220a:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801220c:	69fb      	ldr	r3, [r7, #28]
 801220e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8012212:	69fb      	ldr	r3, [r7, #28]
 8012214:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8012218:	6a3b      	ldr	r3, [r7, #32]
 801221a:	899b      	ldrh	r3, [r3, #12]
 801221c:	b29b      	uxth	r3, r3
 801221e:	2200      	movs	r2, #0
 8012220:	603b      	str	r3, [r7, #0]
 8012222:	607a      	str	r2, [r7, #4]
 8012224:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012228:	f7ee f8aa 	bl	8000380 <__aeabi_uldivmod>
 801222c:	4613      	mov	r3, r2
 801222e:	4423      	add	r3, r4
 8012230:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012234:	4618      	mov	r0, r3
 8012236:	f7fc fa04 	bl	800e642 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801223a:	69fb      	ldr	r3, [r7, #28]
 801223c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012240:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012244:	b2da      	uxtb	r2, r3
 8012246:	69fb      	ldr	r3, [r7, #28]
 8012248:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801224c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012250:	4413      	add	r3, r2
 8012252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012254:	69fb      	ldr	r3, [r7, #28]
 8012256:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801225a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801225c:	2000      	movs	r0, #0
 801225e:	4688      	mov	r8, r1
 8012260:	4681      	mov	r9, r0
 8012262:	eb12 0a08 	adds.w	sl, r2, r8
 8012266:	eb43 0b09 	adc.w	fp, r3, r9
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8012270:	69fb      	ldr	r3, [r7, #28]
 8012272:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8012276:	69fb      	ldr	r3, [r7, #28]
 8012278:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801227c:	4290      	cmp	r0, r2
 801227e:	eb71 0403 	sbcs.w	r4, r1, r3
 8012282:	d201      	bcs.n	8012288 <f_write+0x36a>
 8012284:	4610      	mov	r0, r2
 8012286:	4619      	mov	r1, r3
 8012288:	69fb      	ldr	r3, [r7, #28]
 801228a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012294:	441a      	add	r2, r3
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	601a      	str	r2, [r3, #0]
 801229a:	697a      	ldr	r2, [r7, #20]
 801229c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801229e:	1ad3      	subs	r3, r2, r3
 80122a0:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f47f ae82 	bne.w	8011fae <f_write+0x90>
 80122aa:	e000      	b.n	80122ae <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80122ac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122b8:	b2da      	uxtb	r2, r3
 80122ba:	69fb      	ldr	r3, [r7, #28]
 80122bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80122c0:	2300      	movs	r3, #0
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3744      	adds	r7, #68	; 0x44
 80122c6:	46bd      	mov	sp, r7
 80122c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122cc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b09a      	sub	sp, #104	; 0x68
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80122da:	4611      	mov	r1, r2
 80122dc:	4618      	mov	r0, r3
 80122de:	f7ff facf 	bl	8011880 <validate>
 80122e2:	4603      	mov	r3, r0
 80122e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80122e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f040 8105 	bne.w	80124fc <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80122f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 80fd 	beq.w	80124fc <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012308:	b25b      	sxtb	r3, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	da17      	bge.n	801233e <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801230e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012310:	7858      	ldrb	r0, [r3, #1]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801231c:	2301      	movs	r3, #1
 801231e:	f7fb ff6d 	bl	800e1fc <disk_write>
 8012322:	4603      	mov	r3, r0
 8012324:	2b00      	cmp	r3, #0
 8012326:	d001      	beq.n	801232c <f_sync+0x60>
 8012328:	2301      	movs	r3, #1
 801232a:	e0e9      	b.n	8012500 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012332:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012336:	b2da      	uxtb	r2, r3
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801233e:	f7fb fd61 	bl	800de04 <get_fattime>
 8012342:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8012344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	2b04      	cmp	r3, #4
 801234a:	f040 808c 	bne.w	8012466 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	f7fc ffd5 	bl	800f300 <fill_first_frag>
 8012356:	4603      	mov	r3, r0
 8012358:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801235c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012360:	2b00      	cmp	r3, #0
 8012362:	d10a      	bne.n	801237a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801236a:	f04f 32ff 	mov.w	r2, #4294967295
 801236e:	4619      	mov	r1, r3
 8012370:	f7fc fff5 	bl	800f35e <fill_last_frag>
 8012374:	4603      	mov	r3, r0
 8012376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 801237a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801237e:	2b00      	cmp	r3, #0
 8012380:	f040 80bc 	bne.w	80124fc <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	f107 0308 	add.w	r3, r7, #8
 801238a:	4611      	mov	r1, r2
 801238c:	4618      	mov	r0, r3
 801238e:	f7fd ff3d 	bl	801020c <load_obj_dir>
 8012392:	4603      	mov	r3, r0
 8012394:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8012398:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801239c:	2b00      	cmp	r3, #0
 801239e:	f040 80ad 	bne.w	80124fc <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80123a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123a4:	695b      	ldr	r3, [r3, #20]
 80123a6:	3304      	adds	r3, #4
 80123a8:	781a      	ldrb	r2, [r3, #0]
 80123aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123ac:	695b      	ldr	r3, [r3, #20]
 80123ae:	3304      	adds	r3, #4
 80123b0:	f042 0220 	orr.w	r2, r2, #32
 80123b4:	b2d2      	uxtb	r2, r2
 80123b6:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	79da      	ldrb	r2, [r3, #7]
 80123bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123be:	695b      	ldr	r3, [r3, #20]
 80123c0:	3321      	adds	r3, #33	; 0x21
 80123c2:	f042 0201 	orr.w	r2, r2, #1
 80123c6:	b2d2      	uxtb	r2, r2
 80123c8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80123ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123cc:	695b      	ldr	r3, [r3, #20]
 80123ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	4619      	mov	r1, r3
 80123d8:	4610      	mov	r0, r2
 80123da:	f7fc f87e 	bl	800e4da <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80123de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123e0:	695b      	ldr	r3, [r3, #20]
 80123e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80123ec:	4608      	mov	r0, r1
 80123ee:	f7fc f8a0 	bl	800e532 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80123f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80123f4:	695b      	ldr	r3, [r3, #20]
 80123f6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8012400:	4608      	mov	r0, r1
 8012402:	f7fc f896 	bl	800e532 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8012406:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012408:	695b      	ldr	r3, [r3, #20]
 801240a:	330c      	adds	r3, #12
 801240c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801240e:	4618      	mov	r0, r3
 8012410:	f7fc f863 	bl	800e4da <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8012414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	3315      	adds	r3, #21
 801241a:	2200      	movs	r2, #0
 801241c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 801241e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012420:	695b      	ldr	r3, [r3, #20]
 8012422:	3310      	adds	r3, #16
 8012424:	2100      	movs	r1, #0
 8012426:	4618      	mov	r0, r3
 8012428:	f7fc f857 	bl	800e4da <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801242c:	f107 0308 	add.w	r3, r7, #8
 8012430:	4618      	mov	r0, r3
 8012432:	f7fd ff21 	bl	8010278 <store_xdir>
 8012436:	4603      	mov	r3, r0
 8012438:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801243c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8012440:	2b00      	cmp	r3, #0
 8012442:	d15b      	bne.n	80124fc <f_sync+0x230>
							res = sync_fs(fs);
 8012444:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012446:	4618      	mov	r0, r3
 8012448:	f7fc fb58 	bl	800eafc <sync_fs>
 801244c:	4603      	mov	r3, r0
 801244e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801245c:	b2da      	uxtb	r2, r3
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8012464:	e04a      	b.n	80124fc <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012466:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801246c:	4619      	mov	r1, r3
 801246e:	4610      	mov	r0, r2
 8012470:	f7fc fb16 	bl	800eaa0 <move_window>
 8012474:	4603      	mov	r3, r0
 8012476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801247a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801247e:	2b00      	cmp	r3, #0
 8012480:	d13c      	bne.n	80124fc <f_sync+0x230>
					dir = fp->dir_ptr;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012486:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801248a:	330b      	adds	r3, #11
 801248c:	781a      	ldrb	r2, [r3, #0]
 801248e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012490:	330b      	adds	r3, #11
 8012492:	f042 0220 	orr.w	r2, r2, #32
 8012496:	b2d2      	uxtb	r2, r2
 8012498:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	6818      	ldr	r0, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	461a      	mov	r2, r3
 80124a4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80124a6:	f7fd fb81 	bl	800fbac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80124aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124ac:	f103 001c 	add.w	r0, r3, #28
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80124b6:	4613      	mov	r3, r2
 80124b8:	4619      	mov	r1, r3
 80124ba:	f7fc f80e 	bl	800e4da <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80124be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124c0:	3316      	adds	r3, #22
 80124c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7fc f808 	bl	800e4da <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80124ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80124cc:	3312      	adds	r3, #18
 80124ce:	2100      	movs	r1, #0
 80124d0:	4618      	mov	r0, r3
 80124d2:	f7fb ffe7 	bl	800e4a4 <st_word>
					fs->wflag = 1;
 80124d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124d8:	2201      	movs	r2, #1
 80124da:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80124dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80124de:	4618      	mov	r0, r3
 80124e0:	f7fc fb0c 	bl	800eafc <sync_fs>
 80124e4:	4603      	mov	r3, r0
 80124e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80124f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80124f4:	b2da      	uxtb	r2, r3
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80124fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012500:	4618      	mov	r0, r3
 8012502:	3768      	adds	r7, #104	; 0x68
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f7ff fedb 	bl	80122cc <f_sync>
 8012516:	4603      	mov	r3, r0
 8012518:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801251a:	7bfb      	ldrb	r3, [r7, #15]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d118      	bne.n	8012552 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f107 0208 	add.w	r2, r7, #8
 8012526:	4611      	mov	r1, r2
 8012528:	4618      	mov	r0, r3
 801252a:	f7ff f9a9 	bl	8011880 <validate>
 801252e:	4603      	mov	r3, r0
 8012530:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012532:	7bfb      	ldrb	r3, [r7, #15]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10c      	bne.n	8012552 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801253c:	4618      	mov	r0, r3
 801253e:	f7fc fa0b 	bl	800e958 <dec_lock>
 8012542:	4603      	mov	r3, r0
 8012544:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012546:	7bfb      	ldrb	r3, [r7, #15]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d102      	bne.n	8012552 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012552:	7bfb      	ldrb	r3, [r7, #15]
}
 8012554:	4618      	mov	r0, r3
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}

0801255c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801255c:	b480      	push	{r7}
 801255e:	b087      	sub	sp, #28
 8012560:	af00      	add	r7, sp, #0
 8012562:	60f8      	str	r0, [r7, #12]
 8012564:	60b9      	str	r1, [r7, #8]
 8012566:	4613      	mov	r3, r2
 8012568:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801256a:	2301      	movs	r3, #1
 801256c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012572:	4b1f      	ldr	r3, [pc, #124]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 8012574:	7a5b      	ldrb	r3, [r3, #9]
 8012576:	b2db      	uxtb	r3, r3
 8012578:	2b00      	cmp	r3, #0
 801257a:	d131      	bne.n	80125e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801257c:	4b1c      	ldr	r3, [pc, #112]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 801257e:	7a5b      	ldrb	r3, [r3, #9]
 8012580:	b2db      	uxtb	r3, r3
 8012582:	461a      	mov	r2, r3
 8012584:	4b1a      	ldr	r3, [pc, #104]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 8012586:	2100      	movs	r1, #0
 8012588:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801258a:	4b19      	ldr	r3, [pc, #100]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 801258c:	7a5b      	ldrb	r3, [r3, #9]
 801258e:	b2db      	uxtb	r3, r3
 8012590:	4a17      	ldr	r2, [pc, #92]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	4413      	add	r3, r2
 8012596:	68fa      	ldr	r2, [r7, #12]
 8012598:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801259a:	4b15      	ldr	r3, [pc, #84]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 801259c:	7a5b      	ldrb	r3, [r3, #9]
 801259e:	b2db      	uxtb	r3, r3
 80125a0:	461a      	mov	r2, r3
 80125a2:	4b13      	ldr	r3, [pc, #76]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 80125a4:	4413      	add	r3, r2
 80125a6:	79fa      	ldrb	r2, [r7, #7]
 80125a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80125aa:	4b11      	ldr	r3, [pc, #68]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 80125ac:	7a5b      	ldrb	r3, [r3, #9]
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	1c5a      	adds	r2, r3, #1
 80125b2:	b2d1      	uxtb	r1, r2
 80125b4:	4a0e      	ldr	r2, [pc, #56]	; (80125f0 <FATFS_LinkDriverEx+0x94>)
 80125b6:	7251      	strb	r1, [r2, #9]
 80125b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80125ba:	7dbb      	ldrb	r3, [r7, #22]
 80125bc:	3330      	adds	r3, #48	; 0x30
 80125be:	b2da      	uxtb	r2, r3
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	3301      	adds	r3, #1
 80125c8:	223a      	movs	r2, #58	; 0x3a
 80125ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	3302      	adds	r3, #2
 80125d0:	222f      	movs	r2, #47	; 0x2f
 80125d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	3303      	adds	r3, #3
 80125d8:	2200      	movs	r2, #0
 80125da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80125dc:	2300      	movs	r3, #0
 80125de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80125e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80125e2:	4618      	mov	r0, r3
 80125e4:	371c      	adds	r7, #28
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop
 80125f0:	240028c0 	.word	0x240028c0

080125f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b082      	sub	sp, #8
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80125fe:	2200      	movs	r2, #0
 8012600:	6839      	ldr	r1, [r7, #0]
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ff ffaa 	bl	801255c <FATFS_LinkDriverEx>
 8012608:	4603      	mov	r3, r0
}
 801260a:	4618      	mov	r0, r3
 801260c:	3708      	adds	r7, #8
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
	...

08012614 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	4603      	mov	r3, r0
 801261c:	6039      	str	r1, [r7, #0]
 801261e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012620:	88fb      	ldrh	r3, [r7, #6]
 8012622:	2b7f      	cmp	r3, #127	; 0x7f
 8012624:	d802      	bhi.n	801262c <ff_convert+0x18>
		c = chr;
 8012626:	88fb      	ldrh	r3, [r7, #6]
 8012628:	81fb      	strh	r3, [r7, #14]
 801262a:	e025      	b.n	8012678 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801262c:	683b      	ldr	r3, [r7, #0]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d00b      	beq.n	801264a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012632:	88fb      	ldrh	r3, [r7, #6]
 8012634:	2bff      	cmp	r3, #255	; 0xff
 8012636:	d805      	bhi.n	8012644 <ff_convert+0x30>
 8012638:	88fb      	ldrh	r3, [r7, #6]
 801263a:	3b80      	subs	r3, #128	; 0x80
 801263c:	4a12      	ldr	r2, [pc, #72]	; (8012688 <ff_convert+0x74>)
 801263e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012642:	e000      	b.n	8012646 <ff_convert+0x32>
 8012644:	2300      	movs	r3, #0
 8012646:	81fb      	strh	r3, [r7, #14]
 8012648:	e016      	b.n	8012678 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801264a:	2300      	movs	r3, #0
 801264c:	81fb      	strh	r3, [r7, #14]
 801264e:	e009      	b.n	8012664 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012650:	89fb      	ldrh	r3, [r7, #14]
 8012652:	4a0d      	ldr	r2, [pc, #52]	; (8012688 <ff_convert+0x74>)
 8012654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012658:	88fa      	ldrh	r2, [r7, #6]
 801265a:	429a      	cmp	r2, r3
 801265c:	d006      	beq.n	801266c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801265e:	89fb      	ldrh	r3, [r7, #14]
 8012660:	3301      	adds	r3, #1
 8012662:	81fb      	strh	r3, [r7, #14]
 8012664:	89fb      	ldrh	r3, [r7, #14]
 8012666:	2b7f      	cmp	r3, #127	; 0x7f
 8012668:	d9f2      	bls.n	8012650 <ff_convert+0x3c>
 801266a:	e000      	b.n	801266e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801266c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801266e:	89fb      	ldrh	r3, [r7, #14]
 8012670:	3380      	adds	r3, #128	; 0x80
 8012672:	b29b      	uxth	r3, r3
 8012674:	b2db      	uxtb	r3, r3
 8012676:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012678:	89fb      	ldrh	r3, [r7, #14]
}
 801267a:	4618      	mov	r0, r3
 801267c:	3714      	adds	r7, #20
 801267e:	46bd      	mov	sp, r7
 8012680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012684:	4770      	bx	lr
 8012686:	bf00      	nop
 8012688:	08013d9c 	.word	0x08013d9c

0801268c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801268c:	b480      	push	{r7}
 801268e:	b087      	sub	sp, #28
 8012690:	af00      	add	r7, sp, #0
 8012692:	4603      	mov	r3, r0
 8012694:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012696:	88fb      	ldrh	r3, [r7, #6]
 8012698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801269c:	d201      	bcs.n	80126a2 <ff_wtoupper+0x16>
 801269e:	4b3e      	ldr	r3, [pc, #248]	; (8012798 <ff_wtoupper+0x10c>)
 80126a0:	e000      	b.n	80126a4 <ff_wtoupper+0x18>
 80126a2:	4b3e      	ldr	r3, [pc, #248]	; (801279c <ff_wtoupper+0x110>)
 80126a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	1c9a      	adds	r2, r3, #2
 80126aa:	617a      	str	r2, [r7, #20]
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80126b0:	8a7b      	ldrh	r3, [r7, #18]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d068      	beq.n	8012788 <ff_wtoupper+0xfc>
 80126b6:	88fa      	ldrh	r2, [r7, #6]
 80126b8:	8a7b      	ldrh	r3, [r7, #18]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d364      	bcc.n	8012788 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80126be:	697b      	ldr	r3, [r7, #20]
 80126c0:	1c9a      	adds	r2, r3, #2
 80126c2:	617a      	str	r2, [r7, #20]
 80126c4:	881b      	ldrh	r3, [r3, #0]
 80126c6:	823b      	strh	r3, [r7, #16]
 80126c8:	8a3b      	ldrh	r3, [r7, #16]
 80126ca:	0a1b      	lsrs	r3, r3, #8
 80126cc:	81fb      	strh	r3, [r7, #14]
 80126ce:	8a3b      	ldrh	r3, [r7, #16]
 80126d0:	b2db      	uxtb	r3, r3
 80126d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80126d4:	88fa      	ldrh	r2, [r7, #6]
 80126d6:	8a79      	ldrh	r1, [r7, #18]
 80126d8:	8a3b      	ldrh	r3, [r7, #16]
 80126da:	440b      	add	r3, r1
 80126dc:	429a      	cmp	r2, r3
 80126de:	da49      	bge.n	8012774 <ff_wtoupper+0xe8>
			switch (cmd) {
 80126e0:	89fb      	ldrh	r3, [r7, #14]
 80126e2:	2b08      	cmp	r3, #8
 80126e4:	d84f      	bhi.n	8012786 <ff_wtoupper+0xfa>
 80126e6:	a201      	add	r2, pc, #4	; (adr r2, 80126ec <ff_wtoupper+0x60>)
 80126e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126ec:	08012711 	.word	0x08012711
 80126f0:	08012723 	.word	0x08012723
 80126f4:	08012739 	.word	0x08012739
 80126f8:	08012741 	.word	0x08012741
 80126fc:	08012749 	.word	0x08012749
 8012700:	08012751 	.word	0x08012751
 8012704:	08012759 	.word	0x08012759
 8012708:	08012761 	.word	0x08012761
 801270c:	08012769 	.word	0x08012769
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012710:	88fa      	ldrh	r2, [r7, #6]
 8012712:	8a7b      	ldrh	r3, [r7, #18]
 8012714:	1ad3      	subs	r3, r2, r3
 8012716:	005b      	lsls	r3, r3, #1
 8012718:	697a      	ldr	r2, [r7, #20]
 801271a:	4413      	add	r3, r2
 801271c:	881b      	ldrh	r3, [r3, #0]
 801271e:	80fb      	strh	r3, [r7, #6]
 8012720:	e027      	b.n	8012772 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012722:	88fa      	ldrh	r2, [r7, #6]
 8012724:	8a7b      	ldrh	r3, [r7, #18]
 8012726:	1ad3      	subs	r3, r2, r3
 8012728:	b29b      	uxth	r3, r3
 801272a:	f003 0301 	and.w	r3, r3, #1
 801272e:	b29b      	uxth	r3, r3
 8012730:	88fa      	ldrh	r2, [r7, #6]
 8012732:	1ad3      	subs	r3, r2, r3
 8012734:	80fb      	strh	r3, [r7, #6]
 8012736:	e01c      	b.n	8012772 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012738:	88fb      	ldrh	r3, [r7, #6]
 801273a:	3b10      	subs	r3, #16
 801273c:	80fb      	strh	r3, [r7, #6]
 801273e:	e018      	b.n	8012772 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012740:	88fb      	ldrh	r3, [r7, #6]
 8012742:	3b20      	subs	r3, #32
 8012744:	80fb      	strh	r3, [r7, #6]
 8012746:	e014      	b.n	8012772 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012748:	88fb      	ldrh	r3, [r7, #6]
 801274a:	3b30      	subs	r3, #48	; 0x30
 801274c:	80fb      	strh	r3, [r7, #6]
 801274e:	e010      	b.n	8012772 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012750:	88fb      	ldrh	r3, [r7, #6]
 8012752:	3b1a      	subs	r3, #26
 8012754:	80fb      	strh	r3, [r7, #6]
 8012756:	e00c      	b.n	8012772 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012758:	88fb      	ldrh	r3, [r7, #6]
 801275a:	3308      	adds	r3, #8
 801275c:	80fb      	strh	r3, [r7, #6]
 801275e:	e008      	b.n	8012772 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012760:	88fb      	ldrh	r3, [r7, #6]
 8012762:	3b50      	subs	r3, #80	; 0x50
 8012764:	80fb      	strh	r3, [r7, #6]
 8012766:	e004      	b.n	8012772 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012768:	88fb      	ldrh	r3, [r7, #6]
 801276a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801276e:	80fb      	strh	r3, [r7, #6]
 8012770:	bf00      	nop
			}
			break;
 8012772:	e008      	b.n	8012786 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012774:	89fb      	ldrh	r3, [r7, #14]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d195      	bne.n	80126a6 <ff_wtoupper+0x1a>
 801277a:	8a3b      	ldrh	r3, [r7, #16]
 801277c:	005b      	lsls	r3, r3, #1
 801277e:	697a      	ldr	r2, [r7, #20]
 8012780:	4413      	add	r3, r2
 8012782:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012784:	e78f      	b.n	80126a6 <ff_wtoupper+0x1a>
			break;
 8012786:	bf00      	nop
	}

	return chr;
 8012788:	88fb      	ldrh	r3, [r7, #6]
}
 801278a:	4618      	mov	r0, r3
 801278c:	371c      	adds	r7, #28
 801278e:	46bd      	mov	sp, r7
 8012790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop
 8012798:	08013e9c 	.word	0x08013e9c
 801279c:	08014090 	.word	0x08014090

080127a0 <__errno>:
 80127a0:	4b01      	ldr	r3, [pc, #4]	; (80127a8 <__errno+0x8>)
 80127a2:	6818      	ldr	r0, [r3, #0]
 80127a4:	4770      	bx	lr
 80127a6:	bf00      	nop
 80127a8:	24000010 	.word	0x24000010

080127ac <__libc_init_array>:
 80127ac:	b570      	push	{r4, r5, r6, lr}
 80127ae:	4d0d      	ldr	r5, [pc, #52]	; (80127e4 <__libc_init_array+0x38>)
 80127b0:	4c0d      	ldr	r4, [pc, #52]	; (80127e8 <__libc_init_array+0x3c>)
 80127b2:	1b64      	subs	r4, r4, r5
 80127b4:	10a4      	asrs	r4, r4, #2
 80127b6:	2600      	movs	r6, #0
 80127b8:	42a6      	cmp	r6, r4
 80127ba:	d109      	bne.n	80127d0 <__libc_init_array+0x24>
 80127bc:	4d0b      	ldr	r5, [pc, #44]	; (80127ec <__libc_init_array+0x40>)
 80127be:	4c0c      	ldr	r4, [pc, #48]	; (80127f0 <__libc_init_array+0x44>)
 80127c0:	f001 fa08 	bl	8013bd4 <_init>
 80127c4:	1b64      	subs	r4, r4, r5
 80127c6:	10a4      	asrs	r4, r4, #2
 80127c8:	2600      	movs	r6, #0
 80127ca:	42a6      	cmp	r6, r4
 80127cc:	d105      	bne.n	80127da <__libc_init_array+0x2e>
 80127ce:	bd70      	pop	{r4, r5, r6, pc}
 80127d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80127d4:	4798      	blx	r3
 80127d6:	3601      	adds	r6, #1
 80127d8:	e7ee      	b.n	80127b8 <__libc_init_array+0xc>
 80127da:	f855 3b04 	ldr.w	r3, [r5], #4
 80127de:	4798      	blx	r3
 80127e0:	3601      	adds	r6, #1
 80127e2:	e7f2      	b.n	80127ca <__libc_init_array+0x1e>
 80127e4:	080141ec 	.word	0x080141ec
 80127e8:	080141ec 	.word	0x080141ec
 80127ec:	080141ec 	.word	0x080141ec
 80127f0:	080141f0 	.word	0x080141f0

080127f4 <malloc>:
 80127f4:	4b02      	ldr	r3, [pc, #8]	; (8012800 <malloc+0xc>)
 80127f6:	4601      	mov	r1, r0
 80127f8:	6818      	ldr	r0, [r3, #0]
 80127fa:	f000 b877 	b.w	80128ec <_malloc_r>
 80127fe:	bf00      	nop
 8012800:	24000010 	.word	0x24000010

08012804 <memset>:
 8012804:	4402      	add	r2, r0
 8012806:	4603      	mov	r3, r0
 8012808:	4293      	cmp	r3, r2
 801280a:	d100      	bne.n	801280e <memset+0xa>
 801280c:	4770      	bx	lr
 801280e:	f803 1b01 	strb.w	r1, [r3], #1
 8012812:	e7f9      	b.n	8012808 <memset+0x4>

08012814 <_free_r>:
 8012814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012816:	2900      	cmp	r1, #0
 8012818:	d044      	beq.n	80128a4 <_free_r+0x90>
 801281a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801281e:	9001      	str	r0, [sp, #4]
 8012820:	2b00      	cmp	r3, #0
 8012822:	f1a1 0404 	sub.w	r4, r1, #4
 8012826:	bfb8      	it	lt
 8012828:	18e4      	addlt	r4, r4, r3
 801282a:	f000 fc71 	bl	8013110 <__malloc_lock>
 801282e:	4a1e      	ldr	r2, [pc, #120]	; (80128a8 <_free_r+0x94>)
 8012830:	9801      	ldr	r0, [sp, #4]
 8012832:	6813      	ldr	r3, [r2, #0]
 8012834:	b933      	cbnz	r3, 8012844 <_free_r+0x30>
 8012836:	6063      	str	r3, [r4, #4]
 8012838:	6014      	str	r4, [r2, #0]
 801283a:	b003      	add	sp, #12
 801283c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012840:	f000 bc6c 	b.w	801311c <__malloc_unlock>
 8012844:	42a3      	cmp	r3, r4
 8012846:	d908      	bls.n	801285a <_free_r+0x46>
 8012848:	6825      	ldr	r5, [r4, #0]
 801284a:	1961      	adds	r1, r4, r5
 801284c:	428b      	cmp	r3, r1
 801284e:	bf01      	itttt	eq
 8012850:	6819      	ldreq	r1, [r3, #0]
 8012852:	685b      	ldreq	r3, [r3, #4]
 8012854:	1949      	addeq	r1, r1, r5
 8012856:	6021      	streq	r1, [r4, #0]
 8012858:	e7ed      	b.n	8012836 <_free_r+0x22>
 801285a:	461a      	mov	r2, r3
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	b10b      	cbz	r3, 8012864 <_free_r+0x50>
 8012860:	42a3      	cmp	r3, r4
 8012862:	d9fa      	bls.n	801285a <_free_r+0x46>
 8012864:	6811      	ldr	r1, [r2, #0]
 8012866:	1855      	adds	r5, r2, r1
 8012868:	42a5      	cmp	r5, r4
 801286a:	d10b      	bne.n	8012884 <_free_r+0x70>
 801286c:	6824      	ldr	r4, [r4, #0]
 801286e:	4421      	add	r1, r4
 8012870:	1854      	adds	r4, r2, r1
 8012872:	42a3      	cmp	r3, r4
 8012874:	6011      	str	r1, [r2, #0]
 8012876:	d1e0      	bne.n	801283a <_free_r+0x26>
 8012878:	681c      	ldr	r4, [r3, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	6053      	str	r3, [r2, #4]
 801287e:	4421      	add	r1, r4
 8012880:	6011      	str	r1, [r2, #0]
 8012882:	e7da      	b.n	801283a <_free_r+0x26>
 8012884:	d902      	bls.n	801288c <_free_r+0x78>
 8012886:	230c      	movs	r3, #12
 8012888:	6003      	str	r3, [r0, #0]
 801288a:	e7d6      	b.n	801283a <_free_r+0x26>
 801288c:	6825      	ldr	r5, [r4, #0]
 801288e:	1961      	adds	r1, r4, r5
 8012890:	428b      	cmp	r3, r1
 8012892:	bf04      	itt	eq
 8012894:	6819      	ldreq	r1, [r3, #0]
 8012896:	685b      	ldreq	r3, [r3, #4]
 8012898:	6063      	str	r3, [r4, #4]
 801289a:	bf04      	itt	eq
 801289c:	1949      	addeq	r1, r1, r5
 801289e:	6021      	streq	r1, [r4, #0]
 80128a0:	6054      	str	r4, [r2, #4]
 80128a2:	e7ca      	b.n	801283a <_free_r+0x26>
 80128a4:	b003      	add	sp, #12
 80128a6:	bd30      	pop	{r4, r5, pc}
 80128a8:	240028cc 	.word	0x240028cc

080128ac <sbrk_aligned>:
 80128ac:	b570      	push	{r4, r5, r6, lr}
 80128ae:	4e0e      	ldr	r6, [pc, #56]	; (80128e8 <sbrk_aligned+0x3c>)
 80128b0:	460c      	mov	r4, r1
 80128b2:	6831      	ldr	r1, [r6, #0]
 80128b4:	4605      	mov	r5, r0
 80128b6:	b911      	cbnz	r1, 80128be <sbrk_aligned+0x12>
 80128b8:	f000 f91a 	bl	8012af0 <_sbrk_r>
 80128bc:	6030      	str	r0, [r6, #0]
 80128be:	4621      	mov	r1, r4
 80128c0:	4628      	mov	r0, r5
 80128c2:	f000 f915 	bl	8012af0 <_sbrk_r>
 80128c6:	1c43      	adds	r3, r0, #1
 80128c8:	d00a      	beq.n	80128e0 <sbrk_aligned+0x34>
 80128ca:	1cc4      	adds	r4, r0, #3
 80128cc:	f024 0403 	bic.w	r4, r4, #3
 80128d0:	42a0      	cmp	r0, r4
 80128d2:	d007      	beq.n	80128e4 <sbrk_aligned+0x38>
 80128d4:	1a21      	subs	r1, r4, r0
 80128d6:	4628      	mov	r0, r5
 80128d8:	f000 f90a 	bl	8012af0 <_sbrk_r>
 80128dc:	3001      	adds	r0, #1
 80128de:	d101      	bne.n	80128e4 <sbrk_aligned+0x38>
 80128e0:	f04f 34ff 	mov.w	r4, #4294967295
 80128e4:	4620      	mov	r0, r4
 80128e6:	bd70      	pop	{r4, r5, r6, pc}
 80128e8:	240028d0 	.word	0x240028d0

080128ec <_malloc_r>:
 80128ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128f0:	1ccd      	adds	r5, r1, #3
 80128f2:	f025 0503 	bic.w	r5, r5, #3
 80128f6:	3508      	adds	r5, #8
 80128f8:	2d0c      	cmp	r5, #12
 80128fa:	bf38      	it	cc
 80128fc:	250c      	movcc	r5, #12
 80128fe:	2d00      	cmp	r5, #0
 8012900:	4607      	mov	r7, r0
 8012902:	db01      	blt.n	8012908 <_malloc_r+0x1c>
 8012904:	42a9      	cmp	r1, r5
 8012906:	d905      	bls.n	8012914 <_malloc_r+0x28>
 8012908:	230c      	movs	r3, #12
 801290a:	603b      	str	r3, [r7, #0]
 801290c:	2600      	movs	r6, #0
 801290e:	4630      	mov	r0, r6
 8012910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012914:	4e2e      	ldr	r6, [pc, #184]	; (80129d0 <_malloc_r+0xe4>)
 8012916:	f000 fbfb 	bl	8013110 <__malloc_lock>
 801291a:	6833      	ldr	r3, [r6, #0]
 801291c:	461c      	mov	r4, r3
 801291e:	bb34      	cbnz	r4, 801296e <_malloc_r+0x82>
 8012920:	4629      	mov	r1, r5
 8012922:	4638      	mov	r0, r7
 8012924:	f7ff ffc2 	bl	80128ac <sbrk_aligned>
 8012928:	1c43      	adds	r3, r0, #1
 801292a:	4604      	mov	r4, r0
 801292c:	d14d      	bne.n	80129ca <_malloc_r+0xde>
 801292e:	6834      	ldr	r4, [r6, #0]
 8012930:	4626      	mov	r6, r4
 8012932:	2e00      	cmp	r6, #0
 8012934:	d140      	bne.n	80129b8 <_malloc_r+0xcc>
 8012936:	6823      	ldr	r3, [r4, #0]
 8012938:	4631      	mov	r1, r6
 801293a:	4638      	mov	r0, r7
 801293c:	eb04 0803 	add.w	r8, r4, r3
 8012940:	f000 f8d6 	bl	8012af0 <_sbrk_r>
 8012944:	4580      	cmp	r8, r0
 8012946:	d13a      	bne.n	80129be <_malloc_r+0xd2>
 8012948:	6821      	ldr	r1, [r4, #0]
 801294a:	3503      	adds	r5, #3
 801294c:	1a6d      	subs	r5, r5, r1
 801294e:	f025 0503 	bic.w	r5, r5, #3
 8012952:	3508      	adds	r5, #8
 8012954:	2d0c      	cmp	r5, #12
 8012956:	bf38      	it	cc
 8012958:	250c      	movcc	r5, #12
 801295a:	4629      	mov	r1, r5
 801295c:	4638      	mov	r0, r7
 801295e:	f7ff ffa5 	bl	80128ac <sbrk_aligned>
 8012962:	3001      	adds	r0, #1
 8012964:	d02b      	beq.n	80129be <_malloc_r+0xd2>
 8012966:	6823      	ldr	r3, [r4, #0]
 8012968:	442b      	add	r3, r5
 801296a:	6023      	str	r3, [r4, #0]
 801296c:	e00e      	b.n	801298c <_malloc_r+0xa0>
 801296e:	6822      	ldr	r2, [r4, #0]
 8012970:	1b52      	subs	r2, r2, r5
 8012972:	d41e      	bmi.n	80129b2 <_malloc_r+0xc6>
 8012974:	2a0b      	cmp	r2, #11
 8012976:	d916      	bls.n	80129a6 <_malloc_r+0xba>
 8012978:	1961      	adds	r1, r4, r5
 801297a:	42a3      	cmp	r3, r4
 801297c:	6025      	str	r5, [r4, #0]
 801297e:	bf18      	it	ne
 8012980:	6059      	strne	r1, [r3, #4]
 8012982:	6863      	ldr	r3, [r4, #4]
 8012984:	bf08      	it	eq
 8012986:	6031      	streq	r1, [r6, #0]
 8012988:	5162      	str	r2, [r4, r5]
 801298a:	604b      	str	r3, [r1, #4]
 801298c:	4638      	mov	r0, r7
 801298e:	f104 060b 	add.w	r6, r4, #11
 8012992:	f000 fbc3 	bl	801311c <__malloc_unlock>
 8012996:	f026 0607 	bic.w	r6, r6, #7
 801299a:	1d23      	adds	r3, r4, #4
 801299c:	1af2      	subs	r2, r6, r3
 801299e:	d0b6      	beq.n	801290e <_malloc_r+0x22>
 80129a0:	1b9b      	subs	r3, r3, r6
 80129a2:	50a3      	str	r3, [r4, r2]
 80129a4:	e7b3      	b.n	801290e <_malloc_r+0x22>
 80129a6:	6862      	ldr	r2, [r4, #4]
 80129a8:	42a3      	cmp	r3, r4
 80129aa:	bf0c      	ite	eq
 80129ac:	6032      	streq	r2, [r6, #0]
 80129ae:	605a      	strne	r2, [r3, #4]
 80129b0:	e7ec      	b.n	801298c <_malloc_r+0xa0>
 80129b2:	4623      	mov	r3, r4
 80129b4:	6864      	ldr	r4, [r4, #4]
 80129b6:	e7b2      	b.n	801291e <_malloc_r+0x32>
 80129b8:	4634      	mov	r4, r6
 80129ba:	6876      	ldr	r6, [r6, #4]
 80129bc:	e7b9      	b.n	8012932 <_malloc_r+0x46>
 80129be:	230c      	movs	r3, #12
 80129c0:	603b      	str	r3, [r7, #0]
 80129c2:	4638      	mov	r0, r7
 80129c4:	f000 fbaa 	bl	801311c <__malloc_unlock>
 80129c8:	e7a1      	b.n	801290e <_malloc_r+0x22>
 80129ca:	6025      	str	r5, [r4, #0]
 80129cc:	e7de      	b.n	801298c <_malloc_r+0xa0>
 80129ce:	bf00      	nop
 80129d0:	240028cc 	.word	0x240028cc

080129d4 <iprintf>:
 80129d4:	b40f      	push	{r0, r1, r2, r3}
 80129d6:	4b0a      	ldr	r3, [pc, #40]	; (8012a00 <iprintf+0x2c>)
 80129d8:	b513      	push	{r0, r1, r4, lr}
 80129da:	681c      	ldr	r4, [r3, #0]
 80129dc:	b124      	cbz	r4, 80129e8 <iprintf+0x14>
 80129de:	69a3      	ldr	r3, [r4, #24]
 80129e0:	b913      	cbnz	r3, 80129e8 <iprintf+0x14>
 80129e2:	4620      	mov	r0, r4
 80129e4:	f000 fa8e 	bl	8012f04 <__sinit>
 80129e8:	ab05      	add	r3, sp, #20
 80129ea:	9a04      	ldr	r2, [sp, #16]
 80129ec:	68a1      	ldr	r1, [r4, #8]
 80129ee:	9301      	str	r3, [sp, #4]
 80129f0:	4620      	mov	r0, r4
 80129f2:	f000 fd1f 	bl	8013434 <_vfiprintf_r>
 80129f6:	b002      	add	sp, #8
 80129f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80129fc:	b004      	add	sp, #16
 80129fe:	4770      	bx	lr
 8012a00:	24000010 	.word	0x24000010

08012a04 <_puts_r>:
 8012a04:	b570      	push	{r4, r5, r6, lr}
 8012a06:	460e      	mov	r6, r1
 8012a08:	4605      	mov	r5, r0
 8012a0a:	b118      	cbz	r0, 8012a14 <_puts_r+0x10>
 8012a0c:	6983      	ldr	r3, [r0, #24]
 8012a0e:	b90b      	cbnz	r3, 8012a14 <_puts_r+0x10>
 8012a10:	f000 fa78 	bl	8012f04 <__sinit>
 8012a14:	69ab      	ldr	r3, [r5, #24]
 8012a16:	68ac      	ldr	r4, [r5, #8]
 8012a18:	b913      	cbnz	r3, 8012a20 <_puts_r+0x1c>
 8012a1a:	4628      	mov	r0, r5
 8012a1c:	f000 fa72 	bl	8012f04 <__sinit>
 8012a20:	4b2c      	ldr	r3, [pc, #176]	; (8012ad4 <_puts_r+0xd0>)
 8012a22:	429c      	cmp	r4, r3
 8012a24:	d120      	bne.n	8012a68 <_puts_r+0x64>
 8012a26:	686c      	ldr	r4, [r5, #4]
 8012a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a2a:	07db      	lsls	r3, r3, #31
 8012a2c:	d405      	bmi.n	8012a3a <_puts_r+0x36>
 8012a2e:	89a3      	ldrh	r3, [r4, #12]
 8012a30:	0598      	lsls	r0, r3, #22
 8012a32:	d402      	bmi.n	8012a3a <_puts_r+0x36>
 8012a34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a36:	f000 fb03 	bl	8013040 <__retarget_lock_acquire_recursive>
 8012a3a:	89a3      	ldrh	r3, [r4, #12]
 8012a3c:	0719      	lsls	r1, r3, #28
 8012a3e:	d51d      	bpl.n	8012a7c <_puts_r+0x78>
 8012a40:	6923      	ldr	r3, [r4, #16]
 8012a42:	b1db      	cbz	r3, 8012a7c <_puts_r+0x78>
 8012a44:	3e01      	subs	r6, #1
 8012a46:	68a3      	ldr	r3, [r4, #8]
 8012a48:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	60a3      	str	r3, [r4, #8]
 8012a50:	bb39      	cbnz	r1, 8012aa2 <_puts_r+0x9e>
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	da38      	bge.n	8012ac8 <_puts_r+0xc4>
 8012a56:	4622      	mov	r2, r4
 8012a58:	210a      	movs	r1, #10
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	f000 f878 	bl	8012b50 <__swbuf_r>
 8012a60:	3001      	adds	r0, #1
 8012a62:	d011      	beq.n	8012a88 <_puts_r+0x84>
 8012a64:	250a      	movs	r5, #10
 8012a66:	e011      	b.n	8012a8c <_puts_r+0x88>
 8012a68:	4b1b      	ldr	r3, [pc, #108]	; (8012ad8 <_puts_r+0xd4>)
 8012a6a:	429c      	cmp	r4, r3
 8012a6c:	d101      	bne.n	8012a72 <_puts_r+0x6e>
 8012a6e:	68ac      	ldr	r4, [r5, #8]
 8012a70:	e7da      	b.n	8012a28 <_puts_r+0x24>
 8012a72:	4b1a      	ldr	r3, [pc, #104]	; (8012adc <_puts_r+0xd8>)
 8012a74:	429c      	cmp	r4, r3
 8012a76:	bf08      	it	eq
 8012a78:	68ec      	ldreq	r4, [r5, #12]
 8012a7a:	e7d5      	b.n	8012a28 <_puts_r+0x24>
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4628      	mov	r0, r5
 8012a80:	f000 f8b8 	bl	8012bf4 <__swsetup_r>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d0dd      	beq.n	8012a44 <_puts_r+0x40>
 8012a88:	f04f 35ff 	mov.w	r5, #4294967295
 8012a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012a8e:	07da      	lsls	r2, r3, #31
 8012a90:	d405      	bmi.n	8012a9e <_puts_r+0x9a>
 8012a92:	89a3      	ldrh	r3, [r4, #12]
 8012a94:	059b      	lsls	r3, r3, #22
 8012a96:	d402      	bmi.n	8012a9e <_puts_r+0x9a>
 8012a98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012a9a:	f000 fad2 	bl	8013042 <__retarget_lock_release_recursive>
 8012a9e:	4628      	mov	r0, r5
 8012aa0:	bd70      	pop	{r4, r5, r6, pc}
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	da04      	bge.n	8012ab0 <_puts_r+0xac>
 8012aa6:	69a2      	ldr	r2, [r4, #24]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	dc06      	bgt.n	8012aba <_puts_r+0xb6>
 8012aac:	290a      	cmp	r1, #10
 8012aae:	d004      	beq.n	8012aba <_puts_r+0xb6>
 8012ab0:	6823      	ldr	r3, [r4, #0]
 8012ab2:	1c5a      	adds	r2, r3, #1
 8012ab4:	6022      	str	r2, [r4, #0]
 8012ab6:	7019      	strb	r1, [r3, #0]
 8012ab8:	e7c5      	b.n	8012a46 <_puts_r+0x42>
 8012aba:	4622      	mov	r2, r4
 8012abc:	4628      	mov	r0, r5
 8012abe:	f000 f847 	bl	8012b50 <__swbuf_r>
 8012ac2:	3001      	adds	r0, #1
 8012ac4:	d1bf      	bne.n	8012a46 <_puts_r+0x42>
 8012ac6:	e7df      	b.n	8012a88 <_puts_r+0x84>
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	250a      	movs	r5, #10
 8012acc:	1c5a      	adds	r2, r3, #1
 8012ace:	6022      	str	r2, [r4, #0]
 8012ad0:	701d      	strb	r5, [r3, #0]
 8012ad2:	e7db      	b.n	8012a8c <_puts_r+0x88>
 8012ad4:	08014170 	.word	0x08014170
 8012ad8:	08014190 	.word	0x08014190
 8012adc:	08014150 	.word	0x08014150

08012ae0 <puts>:
 8012ae0:	4b02      	ldr	r3, [pc, #8]	; (8012aec <puts+0xc>)
 8012ae2:	4601      	mov	r1, r0
 8012ae4:	6818      	ldr	r0, [r3, #0]
 8012ae6:	f7ff bf8d 	b.w	8012a04 <_puts_r>
 8012aea:	bf00      	nop
 8012aec:	24000010 	.word	0x24000010

08012af0 <_sbrk_r>:
 8012af0:	b538      	push	{r3, r4, r5, lr}
 8012af2:	4d06      	ldr	r5, [pc, #24]	; (8012b0c <_sbrk_r+0x1c>)
 8012af4:	2300      	movs	r3, #0
 8012af6:	4604      	mov	r4, r0
 8012af8:	4608      	mov	r0, r1
 8012afa:	602b      	str	r3, [r5, #0]
 8012afc:	f7ef f9b6 	bl	8001e6c <_sbrk>
 8012b00:	1c43      	adds	r3, r0, #1
 8012b02:	d102      	bne.n	8012b0a <_sbrk_r+0x1a>
 8012b04:	682b      	ldr	r3, [r5, #0]
 8012b06:	b103      	cbz	r3, 8012b0a <_sbrk_r+0x1a>
 8012b08:	6023      	str	r3, [r4, #0]
 8012b0a:	bd38      	pop	{r3, r4, r5, pc}
 8012b0c:	240028d8 	.word	0x240028d8

08012b10 <siprintf>:
 8012b10:	b40e      	push	{r1, r2, r3}
 8012b12:	b500      	push	{lr}
 8012b14:	b09c      	sub	sp, #112	; 0x70
 8012b16:	ab1d      	add	r3, sp, #116	; 0x74
 8012b18:	9002      	str	r0, [sp, #8]
 8012b1a:	9006      	str	r0, [sp, #24]
 8012b1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012b20:	4809      	ldr	r0, [pc, #36]	; (8012b48 <siprintf+0x38>)
 8012b22:	9107      	str	r1, [sp, #28]
 8012b24:	9104      	str	r1, [sp, #16]
 8012b26:	4909      	ldr	r1, [pc, #36]	; (8012b4c <siprintf+0x3c>)
 8012b28:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b2c:	9105      	str	r1, [sp, #20]
 8012b2e:	6800      	ldr	r0, [r0, #0]
 8012b30:	9301      	str	r3, [sp, #4]
 8012b32:	a902      	add	r1, sp, #8
 8012b34:	f000 fb54 	bl	80131e0 <_svfiprintf_r>
 8012b38:	9b02      	ldr	r3, [sp, #8]
 8012b3a:	2200      	movs	r2, #0
 8012b3c:	701a      	strb	r2, [r3, #0]
 8012b3e:	b01c      	add	sp, #112	; 0x70
 8012b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b44:	b003      	add	sp, #12
 8012b46:	4770      	bx	lr
 8012b48:	24000010 	.word	0x24000010
 8012b4c:	ffff0208 	.word	0xffff0208

08012b50 <__swbuf_r>:
 8012b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b52:	460e      	mov	r6, r1
 8012b54:	4614      	mov	r4, r2
 8012b56:	4605      	mov	r5, r0
 8012b58:	b118      	cbz	r0, 8012b62 <__swbuf_r+0x12>
 8012b5a:	6983      	ldr	r3, [r0, #24]
 8012b5c:	b90b      	cbnz	r3, 8012b62 <__swbuf_r+0x12>
 8012b5e:	f000 f9d1 	bl	8012f04 <__sinit>
 8012b62:	4b21      	ldr	r3, [pc, #132]	; (8012be8 <__swbuf_r+0x98>)
 8012b64:	429c      	cmp	r4, r3
 8012b66:	d12b      	bne.n	8012bc0 <__swbuf_r+0x70>
 8012b68:	686c      	ldr	r4, [r5, #4]
 8012b6a:	69a3      	ldr	r3, [r4, #24]
 8012b6c:	60a3      	str	r3, [r4, #8]
 8012b6e:	89a3      	ldrh	r3, [r4, #12]
 8012b70:	071a      	lsls	r2, r3, #28
 8012b72:	d52f      	bpl.n	8012bd4 <__swbuf_r+0x84>
 8012b74:	6923      	ldr	r3, [r4, #16]
 8012b76:	b36b      	cbz	r3, 8012bd4 <__swbuf_r+0x84>
 8012b78:	6923      	ldr	r3, [r4, #16]
 8012b7a:	6820      	ldr	r0, [r4, #0]
 8012b7c:	1ac0      	subs	r0, r0, r3
 8012b7e:	6963      	ldr	r3, [r4, #20]
 8012b80:	b2f6      	uxtb	r6, r6
 8012b82:	4283      	cmp	r3, r0
 8012b84:	4637      	mov	r7, r6
 8012b86:	dc04      	bgt.n	8012b92 <__swbuf_r+0x42>
 8012b88:	4621      	mov	r1, r4
 8012b8a:	4628      	mov	r0, r5
 8012b8c:	f000 f926 	bl	8012ddc <_fflush_r>
 8012b90:	bb30      	cbnz	r0, 8012be0 <__swbuf_r+0x90>
 8012b92:	68a3      	ldr	r3, [r4, #8]
 8012b94:	3b01      	subs	r3, #1
 8012b96:	60a3      	str	r3, [r4, #8]
 8012b98:	6823      	ldr	r3, [r4, #0]
 8012b9a:	1c5a      	adds	r2, r3, #1
 8012b9c:	6022      	str	r2, [r4, #0]
 8012b9e:	701e      	strb	r6, [r3, #0]
 8012ba0:	6963      	ldr	r3, [r4, #20]
 8012ba2:	3001      	adds	r0, #1
 8012ba4:	4283      	cmp	r3, r0
 8012ba6:	d004      	beq.n	8012bb2 <__swbuf_r+0x62>
 8012ba8:	89a3      	ldrh	r3, [r4, #12]
 8012baa:	07db      	lsls	r3, r3, #31
 8012bac:	d506      	bpl.n	8012bbc <__swbuf_r+0x6c>
 8012bae:	2e0a      	cmp	r6, #10
 8012bb0:	d104      	bne.n	8012bbc <__swbuf_r+0x6c>
 8012bb2:	4621      	mov	r1, r4
 8012bb4:	4628      	mov	r0, r5
 8012bb6:	f000 f911 	bl	8012ddc <_fflush_r>
 8012bba:	b988      	cbnz	r0, 8012be0 <__swbuf_r+0x90>
 8012bbc:	4638      	mov	r0, r7
 8012bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bc0:	4b0a      	ldr	r3, [pc, #40]	; (8012bec <__swbuf_r+0x9c>)
 8012bc2:	429c      	cmp	r4, r3
 8012bc4:	d101      	bne.n	8012bca <__swbuf_r+0x7a>
 8012bc6:	68ac      	ldr	r4, [r5, #8]
 8012bc8:	e7cf      	b.n	8012b6a <__swbuf_r+0x1a>
 8012bca:	4b09      	ldr	r3, [pc, #36]	; (8012bf0 <__swbuf_r+0xa0>)
 8012bcc:	429c      	cmp	r4, r3
 8012bce:	bf08      	it	eq
 8012bd0:	68ec      	ldreq	r4, [r5, #12]
 8012bd2:	e7ca      	b.n	8012b6a <__swbuf_r+0x1a>
 8012bd4:	4621      	mov	r1, r4
 8012bd6:	4628      	mov	r0, r5
 8012bd8:	f000 f80c 	bl	8012bf4 <__swsetup_r>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d0cb      	beq.n	8012b78 <__swbuf_r+0x28>
 8012be0:	f04f 37ff 	mov.w	r7, #4294967295
 8012be4:	e7ea      	b.n	8012bbc <__swbuf_r+0x6c>
 8012be6:	bf00      	nop
 8012be8:	08014170 	.word	0x08014170
 8012bec:	08014190 	.word	0x08014190
 8012bf0:	08014150 	.word	0x08014150

08012bf4 <__swsetup_r>:
 8012bf4:	4b32      	ldr	r3, [pc, #200]	; (8012cc0 <__swsetup_r+0xcc>)
 8012bf6:	b570      	push	{r4, r5, r6, lr}
 8012bf8:	681d      	ldr	r5, [r3, #0]
 8012bfa:	4606      	mov	r6, r0
 8012bfc:	460c      	mov	r4, r1
 8012bfe:	b125      	cbz	r5, 8012c0a <__swsetup_r+0x16>
 8012c00:	69ab      	ldr	r3, [r5, #24]
 8012c02:	b913      	cbnz	r3, 8012c0a <__swsetup_r+0x16>
 8012c04:	4628      	mov	r0, r5
 8012c06:	f000 f97d 	bl	8012f04 <__sinit>
 8012c0a:	4b2e      	ldr	r3, [pc, #184]	; (8012cc4 <__swsetup_r+0xd0>)
 8012c0c:	429c      	cmp	r4, r3
 8012c0e:	d10f      	bne.n	8012c30 <__swsetup_r+0x3c>
 8012c10:	686c      	ldr	r4, [r5, #4]
 8012c12:	89a3      	ldrh	r3, [r4, #12]
 8012c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c18:	0719      	lsls	r1, r3, #28
 8012c1a:	d42c      	bmi.n	8012c76 <__swsetup_r+0x82>
 8012c1c:	06dd      	lsls	r5, r3, #27
 8012c1e:	d411      	bmi.n	8012c44 <__swsetup_r+0x50>
 8012c20:	2309      	movs	r3, #9
 8012c22:	6033      	str	r3, [r6, #0]
 8012c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012c28:	81a3      	strh	r3, [r4, #12]
 8012c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8012c2e:	e03e      	b.n	8012cae <__swsetup_r+0xba>
 8012c30:	4b25      	ldr	r3, [pc, #148]	; (8012cc8 <__swsetup_r+0xd4>)
 8012c32:	429c      	cmp	r4, r3
 8012c34:	d101      	bne.n	8012c3a <__swsetup_r+0x46>
 8012c36:	68ac      	ldr	r4, [r5, #8]
 8012c38:	e7eb      	b.n	8012c12 <__swsetup_r+0x1e>
 8012c3a:	4b24      	ldr	r3, [pc, #144]	; (8012ccc <__swsetup_r+0xd8>)
 8012c3c:	429c      	cmp	r4, r3
 8012c3e:	bf08      	it	eq
 8012c40:	68ec      	ldreq	r4, [r5, #12]
 8012c42:	e7e6      	b.n	8012c12 <__swsetup_r+0x1e>
 8012c44:	0758      	lsls	r0, r3, #29
 8012c46:	d512      	bpl.n	8012c6e <__swsetup_r+0x7a>
 8012c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012c4a:	b141      	cbz	r1, 8012c5e <__swsetup_r+0x6a>
 8012c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012c50:	4299      	cmp	r1, r3
 8012c52:	d002      	beq.n	8012c5a <__swsetup_r+0x66>
 8012c54:	4630      	mov	r0, r6
 8012c56:	f7ff fddd 	bl	8012814 <_free_r>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8012c5e:	89a3      	ldrh	r3, [r4, #12]
 8012c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012c64:	81a3      	strh	r3, [r4, #12]
 8012c66:	2300      	movs	r3, #0
 8012c68:	6063      	str	r3, [r4, #4]
 8012c6a:	6923      	ldr	r3, [r4, #16]
 8012c6c:	6023      	str	r3, [r4, #0]
 8012c6e:	89a3      	ldrh	r3, [r4, #12]
 8012c70:	f043 0308 	orr.w	r3, r3, #8
 8012c74:	81a3      	strh	r3, [r4, #12]
 8012c76:	6923      	ldr	r3, [r4, #16]
 8012c78:	b94b      	cbnz	r3, 8012c8e <__swsetup_r+0x9a>
 8012c7a:	89a3      	ldrh	r3, [r4, #12]
 8012c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c84:	d003      	beq.n	8012c8e <__swsetup_r+0x9a>
 8012c86:	4621      	mov	r1, r4
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f000 fa01 	bl	8013090 <__smakebuf_r>
 8012c8e:	89a0      	ldrh	r0, [r4, #12]
 8012c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c94:	f010 0301 	ands.w	r3, r0, #1
 8012c98:	d00a      	beq.n	8012cb0 <__swsetup_r+0xbc>
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	60a3      	str	r3, [r4, #8]
 8012c9e:	6963      	ldr	r3, [r4, #20]
 8012ca0:	425b      	negs	r3, r3
 8012ca2:	61a3      	str	r3, [r4, #24]
 8012ca4:	6923      	ldr	r3, [r4, #16]
 8012ca6:	b943      	cbnz	r3, 8012cba <__swsetup_r+0xc6>
 8012ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012cac:	d1ba      	bne.n	8012c24 <__swsetup_r+0x30>
 8012cae:	bd70      	pop	{r4, r5, r6, pc}
 8012cb0:	0781      	lsls	r1, r0, #30
 8012cb2:	bf58      	it	pl
 8012cb4:	6963      	ldrpl	r3, [r4, #20]
 8012cb6:	60a3      	str	r3, [r4, #8]
 8012cb8:	e7f4      	b.n	8012ca4 <__swsetup_r+0xb0>
 8012cba:	2000      	movs	r0, #0
 8012cbc:	e7f7      	b.n	8012cae <__swsetup_r+0xba>
 8012cbe:	bf00      	nop
 8012cc0:	24000010 	.word	0x24000010
 8012cc4:	08014170 	.word	0x08014170
 8012cc8:	08014190 	.word	0x08014190
 8012ccc:	08014150 	.word	0x08014150

08012cd0 <__sflush_r>:
 8012cd0:	898a      	ldrh	r2, [r1, #12]
 8012cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	0710      	lsls	r0, r2, #28
 8012cda:	460c      	mov	r4, r1
 8012cdc:	d458      	bmi.n	8012d90 <__sflush_r+0xc0>
 8012cde:	684b      	ldr	r3, [r1, #4]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	dc05      	bgt.n	8012cf0 <__sflush_r+0x20>
 8012ce4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	dc02      	bgt.n	8012cf0 <__sflush_r+0x20>
 8012cea:	2000      	movs	r0, #0
 8012cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012cf2:	2e00      	cmp	r6, #0
 8012cf4:	d0f9      	beq.n	8012cea <__sflush_r+0x1a>
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012cfc:	682f      	ldr	r7, [r5, #0]
 8012cfe:	602b      	str	r3, [r5, #0]
 8012d00:	d032      	beq.n	8012d68 <__sflush_r+0x98>
 8012d02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d04:	89a3      	ldrh	r3, [r4, #12]
 8012d06:	075a      	lsls	r2, r3, #29
 8012d08:	d505      	bpl.n	8012d16 <__sflush_r+0x46>
 8012d0a:	6863      	ldr	r3, [r4, #4]
 8012d0c:	1ac0      	subs	r0, r0, r3
 8012d0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d10:	b10b      	cbz	r3, 8012d16 <__sflush_r+0x46>
 8012d12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d14:	1ac0      	subs	r0, r0, r3
 8012d16:	2300      	movs	r3, #0
 8012d18:	4602      	mov	r2, r0
 8012d1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d1c:	6a21      	ldr	r1, [r4, #32]
 8012d1e:	4628      	mov	r0, r5
 8012d20:	47b0      	blx	r6
 8012d22:	1c43      	adds	r3, r0, #1
 8012d24:	89a3      	ldrh	r3, [r4, #12]
 8012d26:	d106      	bne.n	8012d36 <__sflush_r+0x66>
 8012d28:	6829      	ldr	r1, [r5, #0]
 8012d2a:	291d      	cmp	r1, #29
 8012d2c:	d82c      	bhi.n	8012d88 <__sflush_r+0xb8>
 8012d2e:	4a2a      	ldr	r2, [pc, #168]	; (8012dd8 <__sflush_r+0x108>)
 8012d30:	40ca      	lsrs	r2, r1
 8012d32:	07d6      	lsls	r6, r2, #31
 8012d34:	d528      	bpl.n	8012d88 <__sflush_r+0xb8>
 8012d36:	2200      	movs	r2, #0
 8012d38:	6062      	str	r2, [r4, #4]
 8012d3a:	04d9      	lsls	r1, r3, #19
 8012d3c:	6922      	ldr	r2, [r4, #16]
 8012d3e:	6022      	str	r2, [r4, #0]
 8012d40:	d504      	bpl.n	8012d4c <__sflush_r+0x7c>
 8012d42:	1c42      	adds	r2, r0, #1
 8012d44:	d101      	bne.n	8012d4a <__sflush_r+0x7a>
 8012d46:	682b      	ldr	r3, [r5, #0]
 8012d48:	b903      	cbnz	r3, 8012d4c <__sflush_r+0x7c>
 8012d4a:	6560      	str	r0, [r4, #84]	; 0x54
 8012d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012d4e:	602f      	str	r7, [r5, #0]
 8012d50:	2900      	cmp	r1, #0
 8012d52:	d0ca      	beq.n	8012cea <__sflush_r+0x1a>
 8012d54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012d58:	4299      	cmp	r1, r3
 8012d5a:	d002      	beq.n	8012d62 <__sflush_r+0x92>
 8012d5c:	4628      	mov	r0, r5
 8012d5e:	f7ff fd59 	bl	8012814 <_free_r>
 8012d62:	2000      	movs	r0, #0
 8012d64:	6360      	str	r0, [r4, #52]	; 0x34
 8012d66:	e7c1      	b.n	8012cec <__sflush_r+0x1c>
 8012d68:	6a21      	ldr	r1, [r4, #32]
 8012d6a:	2301      	movs	r3, #1
 8012d6c:	4628      	mov	r0, r5
 8012d6e:	47b0      	blx	r6
 8012d70:	1c41      	adds	r1, r0, #1
 8012d72:	d1c7      	bne.n	8012d04 <__sflush_r+0x34>
 8012d74:	682b      	ldr	r3, [r5, #0]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d0c4      	beq.n	8012d04 <__sflush_r+0x34>
 8012d7a:	2b1d      	cmp	r3, #29
 8012d7c:	d001      	beq.n	8012d82 <__sflush_r+0xb2>
 8012d7e:	2b16      	cmp	r3, #22
 8012d80:	d101      	bne.n	8012d86 <__sflush_r+0xb6>
 8012d82:	602f      	str	r7, [r5, #0]
 8012d84:	e7b1      	b.n	8012cea <__sflush_r+0x1a>
 8012d86:	89a3      	ldrh	r3, [r4, #12]
 8012d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012d8c:	81a3      	strh	r3, [r4, #12]
 8012d8e:	e7ad      	b.n	8012cec <__sflush_r+0x1c>
 8012d90:	690f      	ldr	r7, [r1, #16]
 8012d92:	2f00      	cmp	r7, #0
 8012d94:	d0a9      	beq.n	8012cea <__sflush_r+0x1a>
 8012d96:	0793      	lsls	r3, r2, #30
 8012d98:	680e      	ldr	r6, [r1, #0]
 8012d9a:	bf08      	it	eq
 8012d9c:	694b      	ldreq	r3, [r1, #20]
 8012d9e:	600f      	str	r7, [r1, #0]
 8012da0:	bf18      	it	ne
 8012da2:	2300      	movne	r3, #0
 8012da4:	eba6 0807 	sub.w	r8, r6, r7
 8012da8:	608b      	str	r3, [r1, #8]
 8012daa:	f1b8 0f00 	cmp.w	r8, #0
 8012dae:	dd9c      	ble.n	8012cea <__sflush_r+0x1a>
 8012db0:	6a21      	ldr	r1, [r4, #32]
 8012db2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012db4:	4643      	mov	r3, r8
 8012db6:	463a      	mov	r2, r7
 8012db8:	4628      	mov	r0, r5
 8012dba:	47b0      	blx	r6
 8012dbc:	2800      	cmp	r0, #0
 8012dbe:	dc06      	bgt.n	8012dce <__sflush_r+0xfe>
 8012dc0:	89a3      	ldrh	r3, [r4, #12]
 8012dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012dc6:	81a3      	strh	r3, [r4, #12]
 8012dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8012dcc:	e78e      	b.n	8012cec <__sflush_r+0x1c>
 8012dce:	4407      	add	r7, r0
 8012dd0:	eba8 0800 	sub.w	r8, r8, r0
 8012dd4:	e7e9      	b.n	8012daa <__sflush_r+0xda>
 8012dd6:	bf00      	nop
 8012dd8:	20400001 	.word	0x20400001

08012ddc <_fflush_r>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	690b      	ldr	r3, [r1, #16]
 8012de0:	4605      	mov	r5, r0
 8012de2:	460c      	mov	r4, r1
 8012de4:	b913      	cbnz	r3, 8012dec <_fflush_r+0x10>
 8012de6:	2500      	movs	r5, #0
 8012de8:	4628      	mov	r0, r5
 8012dea:	bd38      	pop	{r3, r4, r5, pc}
 8012dec:	b118      	cbz	r0, 8012df6 <_fflush_r+0x1a>
 8012dee:	6983      	ldr	r3, [r0, #24]
 8012df0:	b90b      	cbnz	r3, 8012df6 <_fflush_r+0x1a>
 8012df2:	f000 f887 	bl	8012f04 <__sinit>
 8012df6:	4b14      	ldr	r3, [pc, #80]	; (8012e48 <_fflush_r+0x6c>)
 8012df8:	429c      	cmp	r4, r3
 8012dfa:	d11b      	bne.n	8012e34 <_fflush_r+0x58>
 8012dfc:	686c      	ldr	r4, [r5, #4]
 8012dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d0ef      	beq.n	8012de6 <_fflush_r+0xa>
 8012e06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012e08:	07d0      	lsls	r0, r2, #31
 8012e0a:	d404      	bmi.n	8012e16 <_fflush_r+0x3a>
 8012e0c:	0599      	lsls	r1, r3, #22
 8012e0e:	d402      	bmi.n	8012e16 <_fflush_r+0x3a>
 8012e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e12:	f000 f915 	bl	8013040 <__retarget_lock_acquire_recursive>
 8012e16:	4628      	mov	r0, r5
 8012e18:	4621      	mov	r1, r4
 8012e1a:	f7ff ff59 	bl	8012cd0 <__sflush_r>
 8012e1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012e20:	07da      	lsls	r2, r3, #31
 8012e22:	4605      	mov	r5, r0
 8012e24:	d4e0      	bmi.n	8012de8 <_fflush_r+0xc>
 8012e26:	89a3      	ldrh	r3, [r4, #12]
 8012e28:	059b      	lsls	r3, r3, #22
 8012e2a:	d4dd      	bmi.n	8012de8 <_fflush_r+0xc>
 8012e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012e2e:	f000 f908 	bl	8013042 <__retarget_lock_release_recursive>
 8012e32:	e7d9      	b.n	8012de8 <_fflush_r+0xc>
 8012e34:	4b05      	ldr	r3, [pc, #20]	; (8012e4c <_fflush_r+0x70>)
 8012e36:	429c      	cmp	r4, r3
 8012e38:	d101      	bne.n	8012e3e <_fflush_r+0x62>
 8012e3a:	68ac      	ldr	r4, [r5, #8]
 8012e3c:	e7df      	b.n	8012dfe <_fflush_r+0x22>
 8012e3e:	4b04      	ldr	r3, [pc, #16]	; (8012e50 <_fflush_r+0x74>)
 8012e40:	429c      	cmp	r4, r3
 8012e42:	bf08      	it	eq
 8012e44:	68ec      	ldreq	r4, [r5, #12]
 8012e46:	e7da      	b.n	8012dfe <_fflush_r+0x22>
 8012e48:	08014170 	.word	0x08014170
 8012e4c:	08014190 	.word	0x08014190
 8012e50:	08014150 	.word	0x08014150

08012e54 <std>:
 8012e54:	2300      	movs	r3, #0
 8012e56:	b510      	push	{r4, lr}
 8012e58:	4604      	mov	r4, r0
 8012e5a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e62:	6083      	str	r3, [r0, #8]
 8012e64:	8181      	strh	r1, [r0, #12]
 8012e66:	6643      	str	r3, [r0, #100]	; 0x64
 8012e68:	81c2      	strh	r2, [r0, #14]
 8012e6a:	6183      	str	r3, [r0, #24]
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	2208      	movs	r2, #8
 8012e70:	305c      	adds	r0, #92	; 0x5c
 8012e72:	f7ff fcc7 	bl	8012804 <memset>
 8012e76:	4b05      	ldr	r3, [pc, #20]	; (8012e8c <std+0x38>)
 8012e78:	6263      	str	r3, [r4, #36]	; 0x24
 8012e7a:	4b05      	ldr	r3, [pc, #20]	; (8012e90 <std+0x3c>)
 8012e7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e7e:	4b05      	ldr	r3, [pc, #20]	; (8012e94 <std+0x40>)
 8012e80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e82:	4b05      	ldr	r3, [pc, #20]	; (8012e98 <std+0x44>)
 8012e84:	6224      	str	r4, [r4, #32]
 8012e86:	6323      	str	r3, [r4, #48]	; 0x30
 8012e88:	bd10      	pop	{r4, pc}
 8012e8a:	bf00      	nop
 8012e8c:	080139bd 	.word	0x080139bd
 8012e90:	080139df 	.word	0x080139df
 8012e94:	08013a17 	.word	0x08013a17
 8012e98:	08013a3b 	.word	0x08013a3b

08012e9c <_cleanup_r>:
 8012e9c:	4901      	ldr	r1, [pc, #4]	; (8012ea4 <_cleanup_r+0x8>)
 8012e9e:	f000 b8af 	b.w	8013000 <_fwalk_reent>
 8012ea2:	bf00      	nop
 8012ea4:	08012ddd 	.word	0x08012ddd

08012ea8 <__sfmoreglue>:
 8012ea8:	b570      	push	{r4, r5, r6, lr}
 8012eaa:	2268      	movs	r2, #104	; 0x68
 8012eac:	1e4d      	subs	r5, r1, #1
 8012eae:	4355      	muls	r5, r2
 8012eb0:	460e      	mov	r6, r1
 8012eb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012eb6:	f7ff fd19 	bl	80128ec <_malloc_r>
 8012eba:	4604      	mov	r4, r0
 8012ebc:	b140      	cbz	r0, 8012ed0 <__sfmoreglue+0x28>
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	e9c0 1600 	strd	r1, r6, [r0]
 8012ec4:	300c      	adds	r0, #12
 8012ec6:	60a0      	str	r0, [r4, #8]
 8012ec8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012ecc:	f7ff fc9a 	bl	8012804 <memset>
 8012ed0:	4620      	mov	r0, r4
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}

08012ed4 <__sfp_lock_acquire>:
 8012ed4:	4801      	ldr	r0, [pc, #4]	; (8012edc <__sfp_lock_acquire+0x8>)
 8012ed6:	f000 b8b3 	b.w	8013040 <__retarget_lock_acquire_recursive>
 8012eda:	bf00      	nop
 8012edc:	240028d5 	.word	0x240028d5

08012ee0 <__sfp_lock_release>:
 8012ee0:	4801      	ldr	r0, [pc, #4]	; (8012ee8 <__sfp_lock_release+0x8>)
 8012ee2:	f000 b8ae 	b.w	8013042 <__retarget_lock_release_recursive>
 8012ee6:	bf00      	nop
 8012ee8:	240028d5 	.word	0x240028d5

08012eec <__sinit_lock_acquire>:
 8012eec:	4801      	ldr	r0, [pc, #4]	; (8012ef4 <__sinit_lock_acquire+0x8>)
 8012eee:	f000 b8a7 	b.w	8013040 <__retarget_lock_acquire_recursive>
 8012ef2:	bf00      	nop
 8012ef4:	240028d6 	.word	0x240028d6

08012ef8 <__sinit_lock_release>:
 8012ef8:	4801      	ldr	r0, [pc, #4]	; (8012f00 <__sinit_lock_release+0x8>)
 8012efa:	f000 b8a2 	b.w	8013042 <__retarget_lock_release_recursive>
 8012efe:	bf00      	nop
 8012f00:	240028d6 	.word	0x240028d6

08012f04 <__sinit>:
 8012f04:	b510      	push	{r4, lr}
 8012f06:	4604      	mov	r4, r0
 8012f08:	f7ff fff0 	bl	8012eec <__sinit_lock_acquire>
 8012f0c:	69a3      	ldr	r3, [r4, #24]
 8012f0e:	b11b      	cbz	r3, 8012f18 <__sinit+0x14>
 8012f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f14:	f7ff bff0 	b.w	8012ef8 <__sinit_lock_release>
 8012f18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012f1c:	6523      	str	r3, [r4, #80]	; 0x50
 8012f1e:	4b13      	ldr	r3, [pc, #76]	; (8012f6c <__sinit+0x68>)
 8012f20:	4a13      	ldr	r2, [pc, #76]	; (8012f70 <__sinit+0x6c>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	62a2      	str	r2, [r4, #40]	; 0x28
 8012f26:	42a3      	cmp	r3, r4
 8012f28:	bf04      	itt	eq
 8012f2a:	2301      	moveq	r3, #1
 8012f2c:	61a3      	streq	r3, [r4, #24]
 8012f2e:	4620      	mov	r0, r4
 8012f30:	f000 f820 	bl	8012f74 <__sfp>
 8012f34:	6060      	str	r0, [r4, #4]
 8012f36:	4620      	mov	r0, r4
 8012f38:	f000 f81c 	bl	8012f74 <__sfp>
 8012f3c:	60a0      	str	r0, [r4, #8]
 8012f3e:	4620      	mov	r0, r4
 8012f40:	f000 f818 	bl	8012f74 <__sfp>
 8012f44:	2200      	movs	r2, #0
 8012f46:	60e0      	str	r0, [r4, #12]
 8012f48:	2104      	movs	r1, #4
 8012f4a:	6860      	ldr	r0, [r4, #4]
 8012f4c:	f7ff ff82 	bl	8012e54 <std>
 8012f50:	68a0      	ldr	r0, [r4, #8]
 8012f52:	2201      	movs	r2, #1
 8012f54:	2109      	movs	r1, #9
 8012f56:	f7ff ff7d 	bl	8012e54 <std>
 8012f5a:	68e0      	ldr	r0, [r4, #12]
 8012f5c:	2202      	movs	r2, #2
 8012f5e:	2112      	movs	r1, #18
 8012f60:	f7ff ff78 	bl	8012e54 <std>
 8012f64:	2301      	movs	r3, #1
 8012f66:	61a3      	str	r3, [r4, #24]
 8012f68:	e7d2      	b.n	8012f10 <__sinit+0xc>
 8012f6a:	bf00      	nop
 8012f6c:	0801414c 	.word	0x0801414c
 8012f70:	08012e9d 	.word	0x08012e9d

08012f74 <__sfp>:
 8012f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f76:	4607      	mov	r7, r0
 8012f78:	f7ff ffac 	bl	8012ed4 <__sfp_lock_acquire>
 8012f7c:	4b1e      	ldr	r3, [pc, #120]	; (8012ff8 <__sfp+0x84>)
 8012f7e:	681e      	ldr	r6, [r3, #0]
 8012f80:	69b3      	ldr	r3, [r6, #24]
 8012f82:	b913      	cbnz	r3, 8012f8a <__sfp+0x16>
 8012f84:	4630      	mov	r0, r6
 8012f86:	f7ff ffbd 	bl	8012f04 <__sinit>
 8012f8a:	3648      	adds	r6, #72	; 0x48
 8012f8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012f90:	3b01      	subs	r3, #1
 8012f92:	d503      	bpl.n	8012f9c <__sfp+0x28>
 8012f94:	6833      	ldr	r3, [r6, #0]
 8012f96:	b30b      	cbz	r3, 8012fdc <__sfp+0x68>
 8012f98:	6836      	ldr	r6, [r6, #0]
 8012f9a:	e7f7      	b.n	8012f8c <__sfp+0x18>
 8012f9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fa0:	b9d5      	cbnz	r5, 8012fd8 <__sfp+0x64>
 8012fa2:	4b16      	ldr	r3, [pc, #88]	; (8012ffc <__sfp+0x88>)
 8012fa4:	60e3      	str	r3, [r4, #12]
 8012fa6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012faa:	6665      	str	r5, [r4, #100]	; 0x64
 8012fac:	f000 f847 	bl	801303e <__retarget_lock_init_recursive>
 8012fb0:	f7ff ff96 	bl	8012ee0 <__sfp_lock_release>
 8012fb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012fb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012fbc:	6025      	str	r5, [r4, #0]
 8012fbe:	61a5      	str	r5, [r4, #24]
 8012fc0:	2208      	movs	r2, #8
 8012fc2:	4629      	mov	r1, r5
 8012fc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fc8:	f7ff fc1c 	bl	8012804 <memset>
 8012fcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012fd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012fd4:	4620      	mov	r0, r4
 8012fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd8:	3468      	adds	r4, #104	; 0x68
 8012fda:	e7d9      	b.n	8012f90 <__sfp+0x1c>
 8012fdc:	2104      	movs	r1, #4
 8012fde:	4638      	mov	r0, r7
 8012fe0:	f7ff ff62 	bl	8012ea8 <__sfmoreglue>
 8012fe4:	4604      	mov	r4, r0
 8012fe6:	6030      	str	r0, [r6, #0]
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d1d5      	bne.n	8012f98 <__sfp+0x24>
 8012fec:	f7ff ff78 	bl	8012ee0 <__sfp_lock_release>
 8012ff0:	230c      	movs	r3, #12
 8012ff2:	603b      	str	r3, [r7, #0]
 8012ff4:	e7ee      	b.n	8012fd4 <__sfp+0x60>
 8012ff6:	bf00      	nop
 8012ff8:	0801414c 	.word	0x0801414c
 8012ffc:	ffff0001 	.word	0xffff0001

08013000 <_fwalk_reent>:
 8013000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013004:	4606      	mov	r6, r0
 8013006:	4688      	mov	r8, r1
 8013008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801300c:	2700      	movs	r7, #0
 801300e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013012:	f1b9 0901 	subs.w	r9, r9, #1
 8013016:	d505      	bpl.n	8013024 <_fwalk_reent+0x24>
 8013018:	6824      	ldr	r4, [r4, #0]
 801301a:	2c00      	cmp	r4, #0
 801301c:	d1f7      	bne.n	801300e <_fwalk_reent+0xe>
 801301e:	4638      	mov	r0, r7
 8013020:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013024:	89ab      	ldrh	r3, [r5, #12]
 8013026:	2b01      	cmp	r3, #1
 8013028:	d907      	bls.n	801303a <_fwalk_reent+0x3a>
 801302a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801302e:	3301      	adds	r3, #1
 8013030:	d003      	beq.n	801303a <_fwalk_reent+0x3a>
 8013032:	4629      	mov	r1, r5
 8013034:	4630      	mov	r0, r6
 8013036:	47c0      	blx	r8
 8013038:	4307      	orrs	r7, r0
 801303a:	3568      	adds	r5, #104	; 0x68
 801303c:	e7e9      	b.n	8013012 <_fwalk_reent+0x12>

0801303e <__retarget_lock_init_recursive>:
 801303e:	4770      	bx	lr

08013040 <__retarget_lock_acquire_recursive>:
 8013040:	4770      	bx	lr

08013042 <__retarget_lock_release_recursive>:
 8013042:	4770      	bx	lr

08013044 <__swhatbuf_r>:
 8013044:	b570      	push	{r4, r5, r6, lr}
 8013046:	460e      	mov	r6, r1
 8013048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801304c:	2900      	cmp	r1, #0
 801304e:	b096      	sub	sp, #88	; 0x58
 8013050:	4614      	mov	r4, r2
 8013052:	461d      	mov	r5, r3
 8013054:	da08      	bge.n	8013068 <__swhatbuf_r+0x24>
 8013056:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801305a:	2200      	movs	r2, #0
 801305c:	602a      	str	r2, [r5, #0]
 801305e:	061a      	lsls	r2, r3, #24
 8013060:	d410      	bmi.n	8013084 <__swhatbuf_r+0x40>
 8013062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013066:	e00e      	b.n	8013086 <__swhatbuf_r+0x42>
 8013068:	466a      	mov	r2, sp
 801306a:	f000 fd0d 	bl	8013a88 <_fstat_r>
 801306e:	2800      	cmp	r0, #0
 8013070:	dbf1      	blt.n	8013056 <__swhatbuf_r+0x12>
 8013072:	9a01      	ldr	r2, [sp, #4]
 8013074:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013078:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801307c:	425a      	negs	r2, r3
 801307e:	415a      	adcs	r2, r3
 8013080:	602a      	str	r2, [r5, #0]
 8013082:	e7ee      	b.n	8013062 <__swhatbuf_r+0x1e>
 8013084:	2340      	movs	r3, #64	; 0x40
 8013086:	2000      	movs	r0, #0
 8013088:	6023      	str	r3, [r4, #0]
 801308a:	b016      	add	sp, #88	; 0x58
 801308c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013090 <__smakebuf_r>:
 8013090:	898b      	ldrh	r3, [r1, #12]
 8013092:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013094:	079d      	lsls	r5, r3, #30
 8013096:	4606      	mov	r6, r0
 8013098:	460c      	mov	r4, r1
 801309a:	d507      	bpl.n	80130ac <__smakebuf_r+0x1c>
 801309c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130a0:	6023      	str	r3, [r4, #0]
 80130a2:	6123      	str	r3, [r4, #16]
 80130a4:	2301      	movs	r3, #1
 80130a6:	6163      	str	r3, [r4, #20]
 80130a8:	b002      	add	sp, #8
 80130aa:	bd70      	pop	{r4, r5, r6, pc}
 80130ac:	ab01      	add	r3, sp, #4
 80130ae:	466a      	mov	r2, sp
 80130b0:	f7ff ffc8 	bl	8013044 <__swhatbuf_r>
 80130b4:	9900      	ldr	r1, [sp, #0]
 80130b6:	4605      	mov	r5, r0
 80130b8:	4630      	mov	r0, r6
 80130ba:	f7ff fc17 	bl	80128ec <_malloc_r>
 80130be:	b948      	cbnz	r0, 80130d4 <__smakebuf_r+0x44>
 80130c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130c4:	059a      	lsls	r2, r3, #22
 80130c6:	d4ef      	bmi.n	80130a8 <__smakebuf_r+0x18>
 80130c8:	f023 0303 	bic.w	r3, r3, #3
 80130cc:	f043 0302 	orr.w	r3, r3, #2
 80130d0:	81a3      	strh	r3, [r4, #12]
 80130d2:	e7e3      	b.n	801309c <__smakebuf_r+0xc>
 80130d4:	4b0d      	ldr	r3, [pc, #52]	; (801310c <__smakebuf_r+0x7c>)
 80130d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80130d8:	89a3      	ldrh	r3, [r4, #12]
 80130da:	6020      	str	r0, [r4, #0]
 80130dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130e0:	81a3      	strh	r3, [r4, #12]
 80130e2:	9b00      	ldr	r3, [sp, #0]
 80130e4:	6163      	str	r3, [r4, #20]
 80130e6:	9b01      	ldr	r3, [sp, #4]
 80130e8:	6120      	str	r0, [r4, #16]
 80130ea:	b15b      	cbz	r3, 8013104 <__smakebuf_r+0x74>
 80130ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80130f0:	4630      	mov	r0, r6
 80130f2:	f000 fcdb 	bl	8013aac <_isatty_r>
 80130f6:	b128      	cbz	r0, 8013104 <__smakebuf_r+0x74>
 80130f8:	89a3      	ldrh	r3, [r4, #12]
 80130fa:	f023 0303 	bic.w	r3, r3, #3
 80130fe:	f043 0301 	orr.w	r3, r3, #1
 8013102:	81a3      	strh	r3, [r4, #12]
 8013104:	89a0      	ldrh	r0, [r4, #12]
 8013106:	4305      	orrs	r5, r0
 8013108:	81a5      	strh	r5, [r4, #12]
 801310a:	e7cd      	b.n	80130a8 <__smakebuf_r+0x18>
 801310c:	08012e9d 	.word	0x08012e9d

08013110 <__malloc_lock>:
 8013110:	4801      	ldr	r0, [pc, #4]	; (8013118 <__malloc_lock+0x8>)
 8013112:	f7ff bf95 	b.w	8013040 <__retarget_lock_acquire_recursive>
 8013116:	bf00      	nop
 8013118:	240028d4 	.word	0x240028d4

0801311c <__malloc_unlock>:
 801311c:	4801      	ldr	r0, [pc, #4]	; (8013124 <__malloc_unlock+0x8>)
 801311e:	f7ff bf90 	b.w	8013042 <__retarget_lock_release_recursive>
 8013122:	bf00      	nop
 8013124:	240028d4 	.word	0x240028d4

08013128 <__ssputs_r>:
 8013128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801312c:	688e      	ldr	r6, [r1, #8]
 801312e:	429e      	cmp	r6, r3
 8013130:	4682      	mov	sl, r0
 8013132:	460c      	mov	r4, r1
 8013134:	4690      	mov	r8, r2
 8013136:	461f      	mov	r7, r3
 8013138:	d838      	bhi.n	80131ac <__ssputs_r+0x84>
 801313a:	898a      	ldrh	r2, [r1, #12]
 801313c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013140:	d032      	beq.n	80131a8 <__ssputs_r+0x80>
 8013142:	6825      	ldr	r5, [r4, #0]
 8013144:	6909      	ldr	r1, [r1, #16]
 8013146:	eba5 0901 	sub.w	r9, r5, r1
 801314a:	6965      	ldr	r5, [r4, #20]
 801314c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013154:	3301      	adds	r3, #1
 8013156:	444b      	add	r3, r9
 8013158:	106d      	asrs	r5, r5, #1
 801315a:	429d      	cmp	r5, r3
 801315c:	bf38      	it	cc
 801315e:	461d      	movcc	r5, r3
 8013160:	0553      	lsls	r3, r2, #21
 8013162:	d531      	bpl.n	80131c8 <__ssputs_r+0xa0>
 8013164:	4629      	mov	r1, r5
 8013166:	f7ff fbc1 	bl	80128ec <_malloc_r>
 801316a:	4606      	mov	r6, r0
 801316c:	b950      	cbnz	r0, 8013184 <__ssputs_r+0x5c>
 801316e:	230c      	movs	r3, #12
 8013170:	f8ca 3000 	str.w	r3, [sl]
 8013174:	89a3      	ldrh	r3, [r4, #12]
 8013176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801317a:	81a3      	strh	r3, [r4, #12]
 801317c:	f04f 30ff 	mov.w	r0, #4294967295
 8013180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013184:	6921      	ldr	r1, [r4, #16]
 8013186:	464a      	mov	r2, r9
 8013188:	f000 fcb2 	bl	8013af0 <memcpy>
 801318c:	89a3      	ldrh	r3, [r4, #12]
 801318e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013192:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013196:	81a3      	strh	r3, [r4, #12]
 8013198:	6126      	str	r6, [r4, #16]
 801319a:	6165      	str	r5, [r4, #20]
 801319c:	444e      	add	r6, r9
 801319e:	eba5 0509 	sub.w	r5, r5, r9
 80131a2:	6026      	str	r6, [r4, #0]
 80131a4:	60a5      	str	r5, [r4, #8]
 80131a6:	463e      	mov	r6, r7
 80131a8:	42be      	cmp	r6, r7
 80131aa:	d900      	bls.n	80131ae <__ssputs_r+0x86>
 80131ac:	463e      	mov	r6, r7
 80131ae:	6820      	ldr	r0, [r4, #0]
 80131b0:	4632      	mov	r2, r6
 80131b2:	4641      	mov	r1, r8
 80131b4:	f000 fcaa 	bl	8013b0c <memmove>
 80131b8:	68a3      	ldr	r3, [r4, #8]
 80131ba:	1b9b      	subs	r3, r3, r6
 80131bc:	60a3      	str	r3, [r4, #8]
 80131be:	6823      	ldr	r3, [r4, #0]
 80131c0:	4433      	add	r3, r6
 80131c2:	6023      	str	r3, [r4, #0]
 80131c4:	2000      	movs	r0, #0
 80131c6:	e7db      	b.n	8013180 <__ssputs_r+0x58>
 80131c8:	462a      	mov	r2, r5
 80131ca:	f000 fcb9 	bl	8013b40 <_realloc_r>
 80131ce:	4606      	mov	r6, r0
 80131d0:	2800      	cmp	r0, #0
 80131d2:	d1e1      	bne.n	8013198 <__ssputs_r+0x70>
 80131d4:	6921      	ldr	r1, [r4, #16]
 80131d6:	4650      	mov	r0, sl
 80131d8:	f7ff fb1c 	bl	8012814 <_free_r>
 80131dc:	e7c7      	b.n	801316e <__ssputs_r+0x46>
	...

080131e0 <_svfiprintf_r>:
 80131e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131e4:	4698      	mov	r8, r3
 80131e6:	898b      	ldrh	r3, [r1, #12]
 80131e8:	061b      	lsls	r3, r3, #24
 80131ea:	b09d      	sub	sp, #116	; 0x74
 80131ec:	4607      	mov	r7, r0
 80131ee:	460d      	mov	r5, r1
 80131f0:	4614      	mov	r4, r2
 80131f2:	d50e      	bpl.n	8013212 <_svfiprintf_r+0x32>
 80131f4:	690b      	ldr	r3, [r1, #16]
 80131f6:	b963      	cbnz	r3, 8013212 <_svfiprintf_r+0x32>
 80131f8:	2140      	movs	r1, #64	; 0x40
 80131fa:	f7ff fb77 	bl	80128ec <_malloc_r>
 80131fe:	6028      	str	r0, [r5, #0]
 8013200:	6128      	str	r0, [r5, #16]
 8013202:	b920      	cbnz	r0, 801320e <_svfiprintf_r+0x2e>
 8013204:	230c      	movs	r3, #12
 8013206:	603b      	str	r3, [r7, #0]
 8013208:	f04f 30ff 	mov.w	r0, #4294967295
 801320c:	e0d1      	b.n	80133b2 <_svfiprintf_r+0x1d2>
 801320e:	2340      	movs	r3, #64	; 0x40
 8013210:	616b      	str	r3, [r5, #20]
 8013212:	2300      	movs	r3, #0
 8013214:	9309      	str	r3, [sp, #36]	; 0x24
 8013216:	2320      	movs	r3, #32
 8013218:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801321c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013220:	2330      	movs	r3, #48	; 0x30
 8013222:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80133cc <_svfiprintf_r+0x1ec>
 8013226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801322a:	f04f 0901 	mov.w	r9, #1
 801322e:	4623      	mov	r3, r4
 8013230:	469a      	mov	sl, r3
 8013232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013236:	b10a      	cbz	r2, 801323c <_svfiprintf_r+0x5c>
 8013238:	2a25      	cmp	r2, #37	; 0x25
 801323a:	d1f9      	bne.n	8013230 <_svfiprintf_r+0x50>
 801323c:	ebba 0b04 	subs.w	fp, sl, r4
 8013240:	d00b      	beq.n	801325a <_svfiprintf_r+0x7a>
 8013242:	465b      	mov	r3, fp
 8013244:	4622      	mov	r2, r4
 8013246:	4629      	mov	r1, r5
 8013248:	4638      	mov	r0, r7
 801324a:	f7ff ff6d 	bl	8013128 <__ssputs_r>
 801324e:	3001      	adds	r0, #1
 8013250:	f000 80aa 	beq.w	80133a8 <_svfiprintf_r+0x1c8>
 8013254:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013256:	445a      	add	r2, fp
 8013258:	9209      	str	r2, [sp, #36]	; 0x24
 801325a:	f89a 3000 	ldrb.w	r3, [sl]
 801325e:	2b00      	cmp	r3, #0
 8013260:	f000 80a2 	beq.w	80133a8 <_svfiprintf_r+0x1c8>
 8013264:	2300      	movs	r3, #0
 8013266:	f04f 32ff 	mov.w	r2, #4294967295
 801326a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801326e:	f10a 0a01 	add.w	sl, sl, #1
 8013272:	9304      	str	r3, [sp, #16]
 8013274:	9307      	str	r3, [sp, #28]
 8013276:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801327a:	931a      	str	r3, [sp, #104]	; 0x68
 801327c:	4654      	mov	r4, sl
 801327e:	2205      	movs	r2, #5
 8013280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013284:	4851      	ldr	r0, [pc, #324]	; (80133cc <_svfiprintf_r+0x1ec>)
 8013286:	f7ed f82b 	bl	80002e0 <memchr>
 801328a:	9a04      	ldr	r2, [sp, #16]
 801328c:	b9d8      	cbnz	r0, 80132c6 <_svfiprintf_r+0xe6>
 801328e:	06d0      	lsls	r0, r2, #27
 8013290:	bf44      	itt	mi
 8013292:	2320      	movmi	r3, #32
 8013294:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013298:	0711      	lsls	r1, r2, #28
 801329a:	bf44      	itt	mi
 801329c:	232b      	movmi	r3, #43	; 0x2b
 801329e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80132a2:	f89a 3000 	ldrb.w	r3, [sl]
 80132a6:	2b2a      	cmp	r3, #42	; 0x2a
 80132a8:	d015      	beq.n	80132d6 <_svfiprintf_r+0xf6>
 80132aa:	9a07      	ldr	r2, [sp, #28]
 80132ac:	4654      	mov	r4, sl
 80132ae:	2000      	movs	r0, #0
 80132b0:	f04f 0c0a 	mov.w	ip, #10
 80132b4:	4621      	mov	r1, r4
 80132b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132ba:	3b30      	subs	r3, #48	; 0x30
 80132bc:	2b09      	cmp	r3, #9
 80132be:	d94e      	bls.n	801335e <_svfiprintf_r+0x17e>
 80132c0:	b1b0      	cbz	r0, 80132f0 <_svfiprintf_r+0x110>
 80132c2:	9207      	str	r2, [sp, #28]
 80132c4:	e014      	b.n	80132f0 <_svfiprintf_r+0x110>
 80132c6:	eba0 0308 	sub.w	r3, r0, r8
 80132ca:	fa09 f303 	lsl.w	r3, r9, r3
 80132ce:	4313      	orrs	r3, r2
 80132d0:	9304      	str	r3, [sp, #16]
 80132d2:	46a2      	mov	sl, r4
 80132d4:	e7d2      	b.n	801327c <_svfiprintf_r+0x9c>
 80132d6:	9b03      	ldr	r3, [sp, #12]
 80132d8:	1d19      	adds	r1, r3, #4
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	9103      	str	r1, [sp, #12]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	bfbb      	ittet	lt
 80132e2:	425b      	neglt	r3, r3
 80132e4:	f042 0202 	orrlt.w	r2, r2, #2
 80132e8:	9307      	strge	r3, [sp, #28]
 80132ea:	9307      	strlt	r3, [sp, #28]
 80132ec:	bfb8      	it	lt
 80132ee:	9204      	strlt	r2, [sp, #16]
 80132f0:	7823      	ldrb	r3, [r4, #0]
 80132f2:	2b2e      	cmp	r3, #46	; 0x2e
 80132f4:	d10c      	bne.n	8013310 <_svfiprintf_r+0x130>
 80132f6:	7863      	ldrb	r3, [r4, #1]
 80132f8:	2b2a      	cmp	r3, #42	; 0x2a
 80132fa:	d135      	bne.n	8013368 <_svfiprintf_r+0x188>
 80132fc:	9b03      	ldr	r3, [sp, #12]
 80132fe:	1d1a      	adds	r2, r3, #4
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	9203      	str	r2, [sp, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	bfb8      	it	lt
 8013308:	f04f 33ff 	movlt.w	r3, #4294967295
 801330c:	3402      	adds	r4, #2
 801330e:	9305      	str	r3, [sp, #20]
 8013310:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80133dc <_svfiprintf_r+0x1fc>
 8013314:	7821      	ldrb	r1, [r4, #0]
 8013316:	2203      	movs	r2, #3
 8013318:	4650      	mov	r0, sl
 801331a:	f7ec ffe1 	bl	80002e0 <memchr>
 801331e:	b140      	cbz	r0, 8013332 <_svfiprintf_r+0x152>
 8013320:	2340      	movs	r3, #64	; 0x40
 8013322:	eba0 000a 	sub.w	r0, r0, sl
 8013326:	fa03 f000 	lsl.w	r0, r3, r0
 801332a:	9b04      	ldr	r3, [sp, #16]
 801332c:	4303      	orrs	r3, r0
 801332e:	3401      	adds	r4, #1
 8013330:	9304      	str	r3, [sp, #16]
 8013332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013336:	4826      	ldr	r0, [pc, #152]	; (80133d0 <_svfiprintf_r+0x1f0>)
 8013338:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801333c:	2206      	movs	r2, #6
 801333e:	f7ec ffcf 	bl	80002e0 <memchr>
 8013342:	2800      	cmp	r0, #0
 8013344:	d038      	beq.n	80133b8 <_svfiprintf_r+0x1d8>
 8013346:	4b23      	ldr	r3, [pc, #140]	; (80133d4 <_svfiprintf_r+0x1f4>)
 8013348:	bb1b      	cbnz	r3, 8013392 <_svfiprintf_r+0x1b2>
 801334a:	9b03      	ldr	r3, [sp, #12]
 801334c:	3307      	adds	r3, #7
 801334e:	f023 0307 	bic.w	r3, r3, #7
 8013352:	3308      	adds	r3, #8
 8013354:	9303      	str	r3, [sp, #12]
 8013356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013358:	4433      	add	r3, r6
 801335a:	9309      	str	r3, [sp, #36]	; 0x24
 801335c:	e767      	b.n	801322e <_svfiprintf_r+0x4e>
 801335e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013362:	460c      	mov	r4, r1
 8013364:	2001      	movs	r0, #1
 8013366:	e7a5      	b.n	80132b4 <_svfiprintf_r+0xd4>
 8013368:	2300      	movs	r3, #0
 801336a:	3401      	adds	r4, #1
 801336c:	9305      	str	r3, [sp, #20]
 801336e:	4619      	mov	r1, r3
 8013370:	f04f 0c0a 	mov.w	ip, #10
 8013374:	4620      	mov	r0, r4
 8013376:	f810 2b01 	ldrb.w	r2, [r0], #1
 801337a:	3a30      	subs	r2, #48	; 0x30
 801337c:	2a09      	cmp	r2, #9
 801337e:	d903      	bls.n	8013388 <_svfiprintf_r+0x1a8>
 8013380:	2b00      	cmp	r3, #0
 8013382:	d0c5      	beq.n	8013310 <_svfiprintf_r+0x130>
 8013384:	9105      	str	r1, [sp, #20]
 8013386:	e7c3      	b.n	8013310 <_svfiprintf_r+0x130>
 8013388:	fb0c 2101 	mla	r1, ip, r1, r2
 801338c:	4604      	mov	r4, r0
 801338e:	2301      	movs	r3, #1
 8013390:	e7f0      	b.n	8013374 <_svfiprintf_r+0x194>
 8013392:	ab03      	add	r3, sp, #12
 8013394:	9300      	str	r3, [sp, #0]
 8013396:	462a      	mov	r2, r5
 8013398:	4b0f      	ldr	r3, [pc, #60]	; (80133d8 <_svfiprintf_r+0x1f8>)
 801339a:	a904      	add	r1, sp, #16
 801339c:	4638      	mov	r0, r7
 801339e:	f3af 8000 	nop.w
 80133a2:	1c42      	adds	r2, r0, #1
 80133a4:	4606      	mov	r6, r0
 80133a6:	d1d6      	bne.n	8013356 <_svfiprintf_r+0x176>
 80133a8:	89ab      	ldrh	r3, [r5, #12]
 80133aa:	065b      	lsls	r3, r3, #25
 80133ac:	f53f af2c 	bmi.w	8013208 <_svfiprintf_r+0x28>
 80133b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80133b2:	b01d      	add	sp, #116	; 0x74
 80133b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b8:	ab03      	add	r3, sp, #12
 80133ba:	9300      	str	r3, [sp, #0]
 80133bc:	462a      	mov	r2, r5
 80133be:	4b06      	ldr	r3, [pc, #24]	; (80133d8 <_svfiprintf_r+0x1f8>)
 80133c0:	a904      	add	r1, sp, #16
 80133c2:	4638      	mov	r0, r7
 80133c4:	f000 f9d4 	bl	8013770 <_printf_i>
 80133c8:	e7eb      	b.n	80133a2 <_svfiprintf_r+0x1c2>
 80133ca:	bf00      	nop
 80133cc:	080141b0 	.word	0x080141b0
 80133d0:	080141ba 	.word	0x080141ba
 80133d4:	00000000 	.word	0x00000000
 80133d8:	08013129 	.word	0x08013129
 80133dc:	080141b6 	.word	0x080141b6

080133e0 <__sfputc_r>:
 80133e0:	6893      	ldr	r3, [r2, #8]
 80133e2:	3b01      	subs	r3, #1
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	b410      	push	{r4}
 80133e8:	6093      	str	r3, [r2, #8]
 80133ea:	da08      	bge.n	80133fe <__sfputc_r+0x1e>
 80133ec:	6994      	ldr	r4, [r2, #24]
 80133ee:	42a3      	cmp	r3, r4
 80133f0:	db01      	blt.n	80133f6 <__sfputc_r+0x16>
 80133f2:	290a      	cmp	r1, #10
 80133f4:	d103      	bne.n	80133fe <__sfputc_r+0x1e>
 80133f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80133fa:	f7ff bba9 	b.w	8012b50 <__swbuf_r>
 80133fe:	6813      	ldr	r3, [r2, #0]
 8013400:	1c58      	adds	r0, r3, #1
 8013402:	6010      	str	r0, [r2, #0]
 8013404:	7019      	strb	r1, [r3, #0]
 8013406:	4608      	mov	r0, r1
 8013408:	f85d 4b04 	ldr.w	r4, [sp], #4
 801340c:	4770      	bx	lr

0801340e <__sfputs_r>:
 801340e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013410:	4606      	mov	r6, r0
 8013412:	460f      	mov	r7, r1
 8013414:	4614      	mov	r4, r2
 8013416:	18d5      	adds	r5, r2, r3
 8013418:	42ac      	cmp	r4, r5
 801341a:	d101      	bne.n	8013420 <__sfputs_r+0x12>
 801341c:	2000      	movs	r0, #0
 801341e:	e007      	b.n	8013430 <__sfputs_r+0x22>
 8013420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013424:	463a      	mov	r2, r7
 8013426:	4630      	mov	r0, r6
 8013428:	f7ff ffda 	bl	80133e0 <__sfputc_r>
 801342c:	1c43      	adds	r3, r0, #1
 801342e:	d1f3      	bne.n	8013418 <__sfputs_r+0xa>
 8013430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013434 <_vfiprintf_r>:
 8013434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013438:	460d      	mov	r5, r1
 801343a:	b09d      	sub	sp, #116	; 0x74
 801343c:	4614      	mov	r4, r2
 801343e:	4698      	mov	r8, r3
 8013440:	4606      	mov	r6, r0
 8013442:	b118      	cbz	r0, 801344c <_vfiprintf_r+0x18>
 8013444:	6983      	ldr	r3, [r0, #24]
 8013446:	b90b      	cbnz	r3, 801344c <_vfiprintf_r+0x18>
 8013448:	f7ff fd5c 	bl	8012f04 <__sinit>
 801344c:	4b89      	ldr	r3, [pc, #548]	; (8013674 <_vfiprintf_r+0x240>)
 801344e:	429d      	cmp	r5, r3
 8013450:	d11b      	bne.n	801348a <_vfiprintf_r+0x56>
 8013452:	6875      	ldr	r5, [r6, #4]
 8013454:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013456:	07d9      	lsls	r1, r3, #31
 8013458:	d405      	bmi.n	8013466 <_vfiprintf_r+0x32>
 801345a:	89ab      	ldrh	r3, [r5, #12]
 801345c:	059a      	lsls	r2, r3, #22
 801345e:	d402      	bmi.n	8013466 <_vfiprintf_r+0x32>
 8013460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013462:	f7ff fded 	bl	8013040 <__retarget_lock_acquire_recursive>
 8013466:	89ab      	ldrh	r3, [r5, #12]
 8013468:	071b      	lsls	r3, r3, #28
 801346a:	d501      	bpl.n	8013470 <_vfiprintf_r+0x3c>
 801346c:	692b      	ldr	r3, [r5, #16]
 801346e:	b9eb      	cbnz	r3, 80134ac <_vfiprintf_r+0x78>
 8013470:	4629      	mov	r1, r5
 8013472:	4630      	mov	r0, r6
 8013474:	f7ff fbbe 	bl	8012bf4 <__swsetup_r>
 8013478:	b1c0      	cbz	r0, 80134ac <_vfiprintf_r+0x78>
 801347a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801347c:	07dc      	lsls	r4, r3, #31
 801347e:	d50e      	bpl.n	801349e <_vfiprintf_r+0x6a>
 8013480:	f04f 30ff 	mov.w	r0, #4294967295
 8013484:	b01d      	add	sp, #116	; 0x74
 8013486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801348a:	4b7b      	ldr	r3, [pc, #492]	; (8013678 <_vfiprintf_r+0x244>)
 801348c:	429d      	cmp	r5, r3
 801348e:	d101      	bne.n	8013494 <_vfiprintf_r+0x60>
 8013490:	68b5      	ldr	r5, [r6, #8]
 8013492:	e7df      	b.n	8013454 <_vfiprintf_r+0x20>
 8013494:	4b79      	ldr	r3, [pc, #484]	; (801367c <_vfiprintf_r+0x248>)
 8013496:	429d      	cmp	r5, r3
 8013498:	bf08      	it	eq
 801349a:	68f5      	ldreq	r5, [r6, #12]
 801349c:	e7da      	b.n	8013454 <_vfiprintf_r+0x20>
 801349e:	89ab      	ldrh	r3, [r5, #12]
 80134a0:	0598      	lsls	r0, r3, #22
 80134a2:	d4ed      	bmi.n	8013480 <_vfiprintf_r+0x4c>
 80134a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134a6:	f7ff fdcc 	bl	8013042 <__retarget_lock_release_recursive>
 80134aa:	e7e9      	b.n	8013480 <_vfiprintf_r+0x4c>
 80134ac:	2300      	movs	r3, #0
 80134ae:	9309      	str	r3, [sp, #36]	; 0x24
 80134b0:	2320      	movs	r3, #32
 80134b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80134b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80134ba:	2330      	movs	r3, #48	; 0x30
 80134bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013680 <_vfiprintf_r+0x24c>
 80134c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80134c4:	f04f 0901 	mov.w	r9, #1
 80134c8:	4623      	mov	r3, r4
 80134ca:	469a      	mov	sl, r3
 80134cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134d0:	b10a      	cbz	r2, 80134d6 <_vfiprintf_r+0xa2>
 80134d2:	2a25      	cmp	r2, #37	; 0x25
 80134d4:	d1f9      	bne.n	80134ca <_vfiprintf_r+0x96>
 80134d6:	ebba 0b04 	subs.w	fp, sl, r4
 80134da:	d00b      	beq.n	80134f4 <_vfiprintf_r+0xc0>
 80134dc:	465b      	mov	r3, fp
 80134de:	4622      	mov	r2, r4
 80134e0:	4629      	mov	r1, r5
 80134e2:	4630      	mov	r0, r6
 80134e4:	f7ff ff93 	bl	801340e <__sfputs_r>
 80134e8:	3001      	adds	r0, #1
 80134ea:	f000 80aa 	beq.w	8013642 <_vfiprintf_r+0x20e>
 80134ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134f0:	445a      	add	r2, fp
 80134f2:	9209      	str	r2, [sp, #36]	; 0x24
 80134f4:	f89a 3000 	ldrb.w	r3, [sl]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	f000 80a2 	beq.w	8013642 <_vfiprintf_r+0x20e>
 80134fe:	2300      	movs	r3, #0
 8013500:	f04f 32ff 	mov.w	r2, #4294967295
 8013504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013508:	f10a 0a01 	add.w	sl, sl, #1
 801350c:	9304      	str	r3, [sp, #16]
 801350e:	9307      	str	r3, [sp, #28]
 8013510:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013514:	931a      	str	r3, [sp, #104]	; 0x68
 8013516:	4654      	mov	r4, sl
 8013518:	2205      	movs	r2, #5
 801351a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801351e:	4858      	ldr	r0, [pc, #352]	; (8013680 <_vfiprintf_r+0x24c>)
 8013520:	f7ec fede 	bl	80002e0 <memchr>
 8013524:	9a04      	ldr	r2, [sp, #16]
 8013526:	b9d8      	cbnz	r0, 8013560 <_vfiprintf_r+0x12c>
 8013528:	06d1      	lsls	r1, r2, #27
 801352a:	bf44      	itt	mi
 801352c:	2320      	movmi	r3, #32
 801352e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013532:	0713      	lsls	r3, r2, #28
 8013534:	bf44      	itt	mi
 8013536:	232b      	movmi	r3, #43	; 0x2b
 8013538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801353c:	f89a 3000 	ldrb.w	r3, [sl]
 8013540:	2b2a      	cmp	r3, #42	; 0x2a
 8013542:	d015      	beq.n	8013570 <_vfiprintf_r+0x13c>
 8013544:	9a07      	ldr	r2, [sp, #28]
 8013546:	4654      	mov	r4, sl
 8013548:	2000      	movs	r0, #0
 801354a:	f04f 0c0a 	mov.w	ip, #10
 801354e:	4621      	mov	r1, r4
 8013550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013554:	3b30      	subs	r3, #48	; 0x30
 8013556:	2b09      	cmp	r3, #9
 8013558:	d94e      	bls.n	80135f8 <_vfiprintf_r+0x1c4>
 801355a:	b1b0      	cbz	r0, 801358a <_vfiprintf_r+0x156>
 801355c:	9207      	str	r2, [sp, #28]
 801355e:	e014      	b.n	801358a <_vfiprintf_r+0x156>
 8013560:	eba0 0308 	sub.w	r3, r0, r8
 8013564:	fa09 f303 	lsl.w	r3, r9, r3
 8013568:	4313      	orrs	r3, r2
 801356a:	9304      	str	r3, [sp, #16]
 801356c:	46a2      	mov	sl, r4
 801356e:	e7d2      	b.n	8013516 <_vfiprintf_r+0xe2>
 8013570:	9b03      	ldr	r3, [sp, #12]
 8013572:	1d19      	adds	r1, r3, #4
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	9103      	str	r1, [sp, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	bfbb      	ittet	lt
 801357c:	425b      	neglt	r3, r3
 801357e:	f042 0202 	orrlt.w	r2, r2, #2
 8013582:	9307      	strge	r3, [sp, #28]
 8013584:	9307      	strlt	r3, [sp, #28]
 8013586:	bfb8      	it	lt
 8013588:	9204      	strlt	r2, [sp, #16]
 801358a:	7823      	ldrb	r3, [r4, #0]
 801358c:	2b2e      	cmp	r3, #46	; 0x2e
 801358e:	d10c      	bne.n	80135aa <_vfiprintf_r+0x176>
 8013590:	7863      	ldrb	r3, [r4, #1]
 8013592:	2b2a      	cmp	r3, #42	; 0x2a
 8013594:	d135      	bne.n	8013602 <_vfiprintf_r+0x1ce>
 8013596:	9b03      	ldr	r3, [sp, #12]
 8013598:	1d1a      	adds	r2, r3, #4
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	9203      	str	r2, [sp, #12]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	bfb8      	it	lt
 80135a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80135a6:	3402      	adds	r4, #2
 80135a8:	9305      	str	r3, [sp, #20]
 80135aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013690 <_vfiprintf_r+0x25c>
 80135ae:	7821      	ldrb	r1, [r4, #0]
 80135b0:	2203      	movs	r2, #3
 80135b2:	4650      	mov	r0, sl
 80135b4:	f7ec fe94 	bl	80002e0 <memchr>
 80135b8:	b140      	cbz	r0, 80135cc <_vfiprintf_r+0x198>
 80135ba:	2340      	movs	r3, #64	; 0x40
 80135bc:	eba0 000a 	sub.w	r0, r0, sl
 80135c0:	fa03 f000 	lsl.w	r0, r3, r0
 80135c4:	9b04      	ldr	r3, [sp, #16]
 80135c6:	4303      	orrs	r3, r0
 80135c8:	3401      	adds	r4, #1
 80135ca:	9304      	str	r3, [sp, #16]
 80135cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135d0:	482c      	ldr	r0, [pc, #176]	; (8013684 <_vfiprintf_r+0x250>)
 80135d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80135d6:	2206      	movs	r2, #6
 80135d8:	f7ec fe82 	bl	80002e0 <memchr>
 80135dc:	2800      	cmp	r0, #0
 80135de:	d03f      	beq.n	8013660 <_vfiprintf_r+0x22c>
 80135e0:	4b29      	ldr	r3, [pc, #164]	; (8013688 <_vfiprintf_r+0x254>)
 80135e2:	bb1b      	cbnz	r3, 801362c <_vfiprintf_r+0x1f8>
 80135e4:	9b03      	ldr	r3, [sp, #12]
 80135e6:	3307      	adds	r3, #7
 80135e8:	f023 0307 	bic.w	r3, r3, #7
 80135ec:	3308      	adds	r3, #8
 80135ee:	9303      	str	r3, [sp, #12]
 80135f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135f2:	443b      	add	r3, r7
 80135f4:	9309      	str	r3, [sp, #36]	; 0x24
 80135f6:	e767      	b.n	80134c8 <_vfiprintf_r+0x94>
 80135f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80135fc:	460c      	mov	r4, r1
 80135fe:	2001      	movs	r0, #1
 8013600:	e7a5      	b.n	801354e <_vfiprintf_r+0x11a>
 8013602:	2300      	movs	r3, #0
 8013604:	3401      	adds	r4, #1
 8013606:	9305      	str	r3, [sp, #20]
 8013608:	4619      	mov	r1, r3
 801360a:	f04f 0c0a 	mov.w	ip, #10
 801360e:	4620      	mov	r0, r4
 8013610:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013614:	3a30      	subs	r2, #48	; 0x30
 8013616:	2a09      	cmp	r2, #9
 8013618:	d903      	bls.n	8013622 <_vfiprintf_r+0x1ee>
 801361a:	2b00      	cmp	r3, #0
 801361c:	d0c5      	beq.n	80135aa <_vfiprintf_r+0x176>
 801361e:	9105      	str	r1, [sp, #20]
 8013620:	e7c3      	b.n	80135aa <_vfiprintf_r+0x176>
 8013622:	fb0c 2101 	mla	r1, ip, r1, r2
 8013626:	4604      	mov	r4, r0
 8013628:	2301      	movs	r3, #1
 801362a:	e7f0      	b.n	801360e <_vfiprintf_r+0x1da>
 801362c:	ab03      	add	r3, sp, #12
 801362e:	9300      	str	r3, [sp, #0]
 8013630:	462a      	mov	r2, r5
 8013632:	4b16      	ldr	r3, [pc, #88]	; (801368c <_vfiprintf_r+0x258>)
 8013634:	a904      	add	r1, sp, #16
 8013636:	4630      	mov	r0, r6
 8013638:	f3af 8000 	nop.w
 801363c:	4607      	mov	r7, r0
 801363e:	1c78      	adds	r0, r7, #1
 8013640:	d1d6      	bne.n	80135f0 <_vfiprintf_r+0x1bc>
 8013642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013644:	07d9      	lsls	r1, r3, #31
 8013646:	d405      	bmi.n	8013654 <_vfiprintf_r+0x220>
 8013648:	89ab      	ldrh	r3, [r5, #12]
 801364a:	059a      	lsls	r2, r3, #22
 801364c:	d402      	bmi.n	8013654 <_vfiprintf_r+0x220>
 801364e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013650:	f7ff fcf7 	bl	8013042 <__retarget_lock_release_recursive>
 8013654:	89ab      	ldrh	r3, [r5, #12]
 8013656:	065b      	lsls	r3, r3, #25
 8013658:	f53f af12 	bmi.w	8013480 <_vfiprintf_r+0x4c>
 801365c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801365e:	e711      	b.n	8013484 <_vfiprintf_r+0x50>
 8013660:	ab03      	add	r3, sp, #12
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	462a      	mov	r2, r5
 8013666:	4b09      	ldr	r3, [pc, #36]	; (801368c <_vfiprintf_r+0x258>)
 8013668:	a904      	add	r1, sp, #16
 801366a:	4630      	mov	r0, r6
 801366c:	f000 f880 	bl	8013770 <_printf_i>
 8013670:	e7e4      	b.n	801363c <_vfiprintf_r+0x208>
 8013672:	bf00      	nop
 8013674:	08014170 	.word	0x08014170
 8013678:	08014190 	.word	0x08014190
 801367c:	08014150 	.word	0x08014150
 8013680:	080141b0 	.word	0x080141b0
 8013684:	080141ba 	.word	0x080141ba
 8013688:	00000000 	.word	0x00000000
 801368c:	0801340f 	.word	0x0801340f
 8013690:	080141b6 	.word	0x080141b6

08013694 <_printf_common>:
 8013694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013698:	4616      	mov	r6, r2
 801369a:	4699      	mov	r9, r3
 801369c:	688a      	ldr	r2, [r1, #8]
 801369e:	690b      	ldr	r3, [r1, #16]
 80136a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80136a4:	4293      	cmp	r3, r2
 80136a6:	bfb8      	it	lt
 80136a8:	4613      	movlt	r3, r2
 80136aa:	6033      	str	r3, [r6, #0]
 80136ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80136b0:	4607      	mov	r7, r0
 80136b2:	460c      	mov	r4, r1
 80136b4:	b10a      	cbz	r2, 80136ba <_printf_common+0x26>
 80136b6:	3301      	adds	r3, #1
 80136b8:	6033      	str	r3, [r6, #0]
 80136ba:	6823      	ldr	r3, [r4, #0]
 80136bc:	0699      	lsls	r1, r3, #26
 80136be:	bf42      	ittt	mi
 80136c0:	6833      	ldrmi	r3, [r6, #0]
 80136c2:	3302      	addmi	r3, #2
 80136c4:	6033      	strmi	r3, [r6, #0]
 80136c6:	6825      	ldr	r5, [r4, #0]
 80136c8:	f015 0506 	ands.w	r5, r5, #6
 80136cc:	d106      	bne.n	80136dc <_printf_common+0x48>
 80136ce:	f104 0a19 	add.w	sl, r4, #25
 80136d2:	68e3      	ldr	r3, [r4, #12]
 80136d4:	6832      	ldr	r2, [r6, #0]
 80136d6:	1a9b      	subs	r3, r3, r2
 80136d8:	42ab      	cmp	r3, r5
 80136da:	dc26      	bgt.n	801372a <_printf_common+0x96>
 80136dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80136e0:	1e13      	subs	r3, r2, #0
 80136e2:	6822      	ldr	r2, [r4, #0]
 80136e4:	bf18      	it	ne
 80136e6:	2301      	movne	r3, #1
 80136e8:	0692      	lsls	r2, r2, #26
 80136ea:	d42b      	bmi.n	8013744 <_printf_common+0xb0>
 80136ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136f0:	4649      	mov	r1, r9
 80136f2:	4638      	mov	r0, r7
 80136f4:	47c0      	blx	r8
 80136f6:	3001      	adds	r0, #1
 80136f8:	d01e      	beq.n	8013738 <_printf_common+0xa4>
 80136fa:	6823      	ldr	r3, [r4, #0]
 80136fc:	68e5      	ldr	r5, [r4, #12]
 80136fe:	6832      	ldr	r2, [r6, #0]
 8013700:	f003 0306 	and.w	r3, r3, #6
 8013704:	2b04      	cmp	r3, #4
 8013706:	bf08      	it	eq
 8013708:	1aad      	subeq	r5, r5, r2
 801370a:	68a3      	ldr	r3, [r4, #8]
 801370c:	6922      	ldr	r2, [r4, #16]
 801370e:	bf0c      	ite	eq
 8013710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013714:	2500      	movne	r5, #0
 8013716:	4293      	cmp	r3, r2
 8013718:	bfc4      	itt	gt
 801371a:	1a9b      	subgt	r3, r3, r2
 801371c:	18ed      	addgt	r5, r5, r3
 801371e:	2600      	movs	r6, #0
 8013720:	341a      	adds	r4, #26
 8013722:	42b5      	cmp	r5, r6
 8013724:	d11a      	bne.n	801375c <_printf_common+0xc8>
 8013726:	2000      	movs	r0, #0
 8013728:	e008      	b.n	801373c <_printf_common+0xa8>
 801372a:	2301      	movs	r3, #1
 801372c:	4652      	mov	r2, sl
 801372e:	4649      	mov	r1, r9
 8013730:	4638      	mov	r0, r7
 8013732:	47c0      	blx	r8
 8013734:	3001      	adds	r0, #1
 8013736:	d103      	bne.n	8013740 <_printf_common+0xac>
 8013738:	f04f 30ff 	mov.w	r0, #4294967295
 801373c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013740:	3501      	adds	r5, #1
 8013742:	e7c6      	b.n	80136d2 <_printf_common+0x3e>
 8013744:	18e1      	adds	r1, r4, r3
 8013746:	1c5a      	adds	r2, r3, #1
 8013748:	2030      	movs	r0, #48	; 0x30
 801374a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801374e:	4422      	add	r2, r4
 8013750:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013754:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013758:	3302      	adds	r3, #2
 801375a:	e7c7      	b.n	80136ec <_printf_common+0x58>
 801375c:	2301      	movs	r3, #1
 801375e:	4622      	mov	r2, r4
 8013760:	4649      	mov	r1, r9
 8013762:	4638      	mov	r0, r7
 8013764:	47c0      	blx	r8
 8013766:	3001      	adds	r0, #1
 8013768:	d0e6      	beq.n	8013738 <_printf_common+0xa4>
 801376a:	3601      	adds	r6, #1
 801376c:	e7d9      	b.n	8013722 <_printf_common+0x8e>
	...

08013770 <_printf_i>:
 8013770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013774:	7e0f      	ldrb	r7, [r1, #24]
 8013776:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013778:	2f78      	cmp	r7, #120	; 0x78
 801377a:	4691      	mov	r9, r2
 801377c:	4680      	mov	r8, r0
 801377e:	460c      	mov	r4, r1
 8013780:	469a      	mov	sl, r3
 8013782:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013786:	d807      	bhi.n	8013798 <_printf_i+0x28>
 8013788:	2f62      	cmp	r7, #98	; 0x62
 801378a:	d80a      	bhi.n	80137a2 <_printf_i+0x32>
 801378c:	2f00      	cmp	r7, #0
 801378e:	f000 80d8 	beq.w	8013942 <_printf_i+0x1d2>
 8013792:	2f58      	cmp	r7, #88	; 0x58
 8013794:	f000 80a3 	beq.w	80138de <_printf_i+0x16e>
 8013798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801379c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80137a0:	e03a      	b.n	8013818 <_printf_i+0xa8>
 80137a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80137a6:	2b15      	cmp	r3, #21
 80137a8:	d8f6      	bhi.n	8013798 <_printf_i+0x28>
 80137aa:	a101      	add	r1, pc, #4	; (adr r1, 80137b0 <_printf_i+0x40>)
 80137ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80137b0:	08013809 	.word	0x08013809
 80137b4:	0801381d 	.word	0x0801381d
 80137b8:	08013799 	.word	0x08013799
 80137bc:	08013799 	.word	0x08013799
 80137c0:	08013799 	.word	0x08013799
 80137c4:	08013799 	.word	0x08013799
 80137c8:	0801381d 	.word	0x0801381d
 80137cc:	08013799 	.word	0x08013799
 80137d0:	08013799 	.word	0x08013799
 80137d4:	08013799 	.word	0x08013799
 80137d8:	08013799 	.word	0x08013799
 80137dc:	08013929 	.word	0x08013929
 80137e0:	0801384d 	.word	0x0801384d
 80137e4:	0801390b 	.word	0x0801390b
 80137e8:	08013799 	.word	0x08013799
 80137ec:	08013799 	.word	0x08013799
 80137f0:	0801394b 	.word	0x0801394b
 80137f4:	08013799 	.word	0x08013799
 80137f8:	0801384d 	.word	0x0801384d
 80137fc:	08013799 	.word	0x08013799
 8013800:	08013799 	.word	0x08013799
 8013804:	08013913 	.word	0x08013913
 8013808:	682b      	ldr	r3, [r5, #0]
 801380a:	1d1a      	adds	r2, r3, #4
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	602a      	str	r2, [r5, #0]
 8013810:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013814:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013818:	2301      	movs	r3, #1
 801381a:	e0a3      	b.n	8013964 <_printf_i+0x1f4>
 801381c:	6820      	ldr	r0, [r4, #0]
 801381e:	6829      	ldr	r1, [r5, #0]
 8013820:	0606      	lsls	r6, r0, #24
 8013822:	f101 0304 	add.w	r3, r1, #4
 8013826:	d50a      	bpl.n	801383e <_printf_i+0xce>
 8013828:	680e      	ldr	r6, [r1, #0]
 801382a:	602b      	str	r3, [r5, #0]
 801382c:	2e00      	cmp	r6, #0
 801382e:	da03      	bge.n	8013838 <_printf_i+0xc8>
 8013830:	232d      	movs	r3, #45	; 0x2d
 8013832:	4276      	negs	r6, r6
 8013834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013838:	485e      	ldr	r0, [pc, #376]	; (80139b4 <_printf_i+0x244>)
 801383a:	230a      	movs	r3, #10
 801383c:	e019      	b.n	8013872 <_printf_i+0x102>
 801383e:	680e      	ldr	r6, [r1, #0]
 8013840:	602b      	str	r3, [r5, #0]
 8013842:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013846:	bf18      	it	ne
 8013848:	b236      	sxthne	r6, r6
 801384a:	e7ef      	b.n	801382c <_printf_i+0xbc>
 801384c:	682b      	ldr	r3, [r5, #0]
 801384e:	6820      	ldr	r0, [r4, #0]
 8013850:	1d19      	adds	r1, r3, #4
 8013852:	6029      	str	r1, [r5, #0]
 8013854:	0601      	lsls	r1, r0, #24
 8013856:	d501      	bpl.n	801385c <_printf_i+0xec>
 8013858:	681e      	ldr	r6, [r3, #0]
 801385a:	e002      	b.n	8013862 <_printf_i+0xf2>
 801385c:	0646      	lsls	r6, r0, #25
 801385e:	d5fb      	bpl.n	8013858 <_printf_i+0xe8>
 8013860:	881e      	ldrh	r6, [r3, #0]
 8013862:	4854      	ldr	r0, [pc, #336]	; (80139b4 <_printf_i+0x244>)
 8013864:	2f6f      	cmp	r7, #111	; 0x6f
 8013866:	bf0c      	ite	eq
 8013868:	2308      	moveq	r3, #8
 801386a:	230a      	movne	r3, #10
 801386c:	2100      	movs	r1, #0
 801386e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013872:	6865      	ldr	r5, [r4, #4]
 8013874:	60a5      	str	r5, [r4, #8]
 8013876:	2d00      	cmp	r5, #0
 8013878:	bfa2      	ittt	ge
 801387a:	6821      	ldrge	r1, [r4, #0]
 801387c:	f021 0104 	bicge.w	r1, r1, #4
 8013880:	6021      	strge	r1, [r4, #0]
 8013882:	b90e      	cbnz	r6, 8013888 <_printf_i+0x118>
 8013884:	2d00      	cmp	r5, #0
 8013886:	d04d      	beq.n	8013924 <_printf_i+0x1b4>
 8013888:	4615      	mov	r5, r2
 801388a:	fbb6 f1f3 	udiv	r1, r6, r3
 801388e:	fb03 6711 	mls	r7, r3, r1, r6
 8013892:	5dc7      	ldrb	r7, [r0, r7]
 8013894:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013898:	4637      	mov	r7, r6
 801389a:	42bb      	cmp	r3, r7
 801389c:	460e      	mov	r6, r1
 801389e:	d9f4      	bls.n	801388a <_printf_i+0x11a>
 80138a0:	2b08      	cmp	r3, #8
 80138a2:	d10b      	bne.n	80138bc <_printf_i+0x14c>
 80138a4:	6823      	ldr	r3, [r4, #0]
 80138a6:	07de      	lsls	r6, r3, #31
 80138a8:	d508      	bpl.n	80138bc <_printf_i+0x14c>
 80138aa:	6923      	ldr	r3, [r4, #16]
 80138ac:	6861      	ldr	r1, [r4, #4]
 80138ae:	4299      	cmp	r1, r3
 80138b0:	bfde      	ittt	le
 80138b2:	2330      	movle	r3, #48	; 0x30
 80138b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80138b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80138bc:	1b52      	subs	r2, r2, r5
 80138be:	6122      	str	r2, [r4, #16]
 80138c0:	f8cd a000 	str.w	sl, [sp]
 80138c4:	464b      	mov	r3, r9
 80138c6:	aa03      	add	r2, sp, #12
 80138c8:	4621      	mov	r1, r4
 80138ca:	4640      	mov	r0, r8
 80138cc:	f7ff fee2 	bl	8013694 <_printf_common>
 80138d0:	3001      	adds	r0, #1
 80138d2:	d14c      	bne.n	801396e <_printf_i+0x1fe>
 80138d4:	f04f 30ff 	mov.w	r0, #4294967295
 80138d8:	b004      	add	sp, #16
 80138da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138de:	4835      	ldr	r0, [pc, #212]	; (80139b4 <_printf_i+0x244>)
 80138e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80138e4:	6829      	ldr	r1, [r5, #0]
 80138e6:	6823      	ldr	r3, [r4, #0]
 80138e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80138ec:	6029      	str	r1, [r5, #0]
 80138ee:	061d      	lsls	r5, r3, #24
 80138f0:	d514      	bpl.n	801391c <_printf_i+0x1ac>
 80138f2:	07df      	lsls	r7, r3, #31
 80138f4:	bf44      	itt	mi
 80138f6:	f043 0320 	orrmi.w	r3, r3, #32
 80138fa:	6023      	strmi	r3, [r4, #0]
 80138fc:	b91e      	cbnz	r6, 8013906 <_printf_i+0x196>
 80138fe:	6823      	ldr	r3, [r4, #0]
 8013900:	f023 0320 	bic.w	r3, r3, #32
 8013904:	6023      	str	r3, [r4, #0]
 8013906:	2310      	movs	r3, #16
 8013908:	e7b0      	b.n	801386c <_printf_i+0xfc>
 801390a:	6823      	ldr	r3, [r4, #0]
 801390c:	f043 0320 	orr.w	r3, r3, #32
 8013910:	6023      	str	r3, [r4, #0]
 8013912:	2378      	movs	r3, #120	; 0x78
 8013914:	4828      	ldr	r0, [pc, #160]	; (80139b8 <_printf_i+0x248>)
 8013916:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801391a:	e7e3      	b.n	80138e4 <_printf_i+0x174>
 801391c:	0659      	lsls	r1, r3, #25
 801391e:	bf48      	it	mi
 8013920:	b2b6      	uxthmi	r6, r6
 8013922:	e7e6      	b.n	80138f2 <_printf_i+0x182>
 8013924:	4615      	mov	r5, r2
 8013926:	e7bb      	b.n	80138a0 <_printf_i+0x130>
 8013928:	682b      	ldr	r3, [r5, #0]
 801392a:	6826      	ldr	r6, [r4, #0]
 801392c:	6961      	ldr	r1, [r4, #20]
 801392e:	1d18      	adds	r0, r3, #4
 8013930:	6028      	str	r0, [r5, #0]
 8013932:	0635      	lsls	r5, r6, #24
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	d501      	bpl.n	801393c <_printf_i+0x1cc>
 8013938:	6019      	str	r1, [r3, #0]
 801393a:	e002      	b.n	8013942 <_printf_i+0x1d2>
 801393c:	0670      	lsls	r0, r6, #25
 801393e:	d5fb      	bpl.n	8013938 <_printf_i+0x1c8>
 8013940:	8019      	strh	r1, [r3, #0]
 8013942:	2300      	movs	r3, #0
 8013944:	6123      	str	r3, [r4, #16]
 8013946:	4615      	mov	r5, r2
 8013948:	e7ba      	b.n	80138c0 <_printf_i+0x150>
 801394a:	682b      	ldr	r3, [r5, #0]
 801394c:	1d1a      	adds	r2, r3, #4
 801394e:	602a      	str	r2, [r5, #0]
 8013950:	681d      	ldr	r5, [r3, #0]
 8013952:	6862      	ldr	r2, [r4, #4]
 8013954:	2100      	movs	r1, #0
 8013956:	4628      	mov	r0, r5
 8013958:	f7ec fcc2 	bl	80002e0 <memchr>
 801395c:	b108      	cbz	r0, 8013962 <_printf_i+0x1f2>
 801395e:	1b40      	subs	r0, r0, r5
 8013960:	6060      	str	r0, [r4, #4]
 8013962:	6863      	ldr	r3, [r4, #4]
 8013964:	6123      	str	r3, [r4, #16]
 8013966:	2300      	movs	r3, #0
 8013968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801396c:	e7a8      	b.n	80138c0 <_printf_i+0x150>
 801396e:	6923      	ldr	r3, [r4, #16]
 8013970:	462a      	mov	r2, r5
 8013972:	4649      	mov	r1, r9
 8013974:	4640      	mov	r0, r8
 8013976:	47d0      	blx	sl
 8013978:	3001      	adds	r0, #1
 801397a:	d0ab      	beq.n	80138d4 <_printf_i+0x164>
 801397c:	6823      	ldr	r3, [r4, #0]
 801397e:	079b      	lsls	r3, r3, #30
 8013980:	d413      	bmi.n	80139aa <_printf_i+0x23a>
 8013982:	68e0      	ldr	r0, [r4, #12]
 8013984:	9b03      	ldr	r3, [sp, #12]
 8013986:	4298      	cmp	r0, r3
 8013988:	bfb8      	it	lt
 801398a:	4618      	movlt	r0, r3
 801398c:	e7a4      	b.n	80138d8 <_printf_i+0x168>
 801398e:	2301      	movs	r3, #1
 8013990:	4632      	mov	r2, r6
 8013992:	4649      	mov	r1, r9
 8013994:	4640      	mov	r0, r8
 8013996:	47d0      	blx	sl
 8013998:	3001      	adds	r0, #1
 801399a:	d09b      	beq.n	80138d4 <_printf_i+0x164>
 801399c:	3501      	adds	r5, #1
 801399e:	68e3      	ldr	r3, [r4, #12]
 80139a0:	9903      	ldr	r1, [sp, #12]
 80139a2:	1a5b      	subs	r3, r3, r1
 80139a4:	42ab      	cmp	r3, r5
 80139a6:	dcf2      	bgt.n	801398e <_printf_i+0x21e>
 80139a8:	e7eb      	b.n	8013982 <_printf_i+0x212>
 80139aa:	2500      	movs	r5, #0
 80139ac:	f104 0619 	add.w	r6, r4, #25
 80139b0:	e7f5      	b.n	801399e <_printf_i+0x22e>
 80139b2:	bf00      	nop
 80139b4:	080141c1 	.word	0x080141c1
 80139b8:	080141d2 	.word	0x080141d2

080139bc <__sread>:
 80139bc:	b510      	push	{r4, lr}
 80139be:	460c      	mov	r4, r1
 80139c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139c4:	f000 f8ec 	bl	8013ba0 <_read_r>
 80139c8:	2800      	cmp	r0, #0
 80139ca:	bfab      	itete	ge
 80139cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80139ce:	89a3      	ldrhlt	r3, [r4, #12]
 80139d0:	181b      	addge	r3, r3, r0
 80139d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80139d6:	bfac      	ite	ge
 80139d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80139da:	81a3      	strhlt	r3, [r4, #12]
 80139dc:	bd10      	pop	{r4, pc}

080139de <__swrite>:
 80139de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139e2:	461f      	mov	r7, r3
 80139e4:	898b      	ldrh	r3, [r1, #12]
 80139e6:	05db      	lsls	r3, r3, #23
 80139e8:	4605      	mov	r5, r0
 80139ea:	460c      	mov	r4, r1
 80139ec:	4616      	mov	r6, r2
 80139ee:	d505      	bpl.n	80139fc <__swrite+0x1e>
 80139f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80139f4:	2302      	movs	r3, #2
 80139f6:	2200      	movs	r2, #0
 80139f8:	f000 f868 	bl	8013acc <_lseek_r>
 80139fc:	89a3      	ldrh	r3, [r4, #12]
 80139fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a06:	81a3      	strh	r3, [r4, #12]
 8013a08:	4632      	mov	r2, r6
 8013a0a:	463b      	mov	r3, r7
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a12:	f000 b817 	b.w	8013a44 <_write_r>

08013a16 <__sseek>:
 8013a16:	b510      	push	{r4, lr}
 8013a18:	460c      	mov	r4, r1
 8013a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a1e:	f000 f855 	bl	8013acc <_lseek_r>
 8013a22:	1c43      	adds	r3, r0, #1
 8013a24:	89a3      	ldrh	r3, [r4, #12]
 8013a26:	bf15      	itete	ne
 8013a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a32:	81a3      	strheq	r3, [r4, #12]
 8013a34:	bf18      	it	ne
 8013a36:	81a3      	strhne	r3, [r4, #12]
 8013a38:	bd10      	pop	{r4, pc}

08013a3a <__sclose>:
 8013a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a3e:	f000 b813 	b.w	8013a68 <_close_r>
	...

08013a44 <_write_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4d07      	ldr	r5, [pc, #28]	; (8013a64 <_write_r+0x20>)
 8013a48:	4604      	mov	r4, r0
 8013a4a:	4608      	mov	r0, r1
 8013a4c:	4611      	mov	r1, r2
 8013a4e:	2200      	movs	r2, #0
 8013a50:	602a      	str	r2, [r5, #0]
 8013a52:	461a      	mov	r2, r3
 8013a54:	f7ee f9b9 	bl	8001dca <_write>
 8013a58:	1c43      	adds	r3, r0, #1
 8013a5a:	d102      	bne.n	8013a62 <_write_r+0x1e>
 8013a5c:	682b      	ldr	r3, [r5, #0]
 8013a5e:	b103      	cbz	r3, 8013a62 <_write_r+0x1e>
 8013a60:	6023      	str	r3, [r4, #0]
 8013a62:	bd38      	pop	{r3, r4, r5, pc}
 8013a64:	240028d8 	.word	0x240028d8

08013a68 <_close_r>:
 8013a68:	b538      	push	{r3, r4, r5, lr}
 8013a6a:	4d06      	ldr	r5, [pc, #24]	; (8013a84 <_close_r+0x1c>)
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	4604      	mov	r4, r0
 8013a70:	4608      	mov	r0, r1
 8013a72:	602b      	str	r3, [r5, #0]
 8013a74:	f7ee f9c5 	bl	8001e02 <_close>
 8013a78:	1c43      	adds	r3, r0, #1
 8013a7a:	d102      	bne.n	8013a82 <_close_r+0x1a>
 8013a7c:	682b      	ldr	r3, [r5, #0]
 8013a7e:	b103      	cbz	r3, 8013a82 <_close_r+0x1a>
 8013a80:	6023      	str	r3, [r4, #0]
 8013a82:	bd38      	pop	{r3, r4, r5, pc}
 8013a84:	240028d8 	.word	0x240028d8

08013a88 <_fstat_r>:
 8013a88:	b538      	push	{r3, r4, r5, lr}
 8013a8a:	4d07      	ldr	r5, [pc, #28]	; (8013aa8 <_fstat_r+0x20>)
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	4604      	mov	r4, r0
 8013a90:	4608      	mov	r0, r1
 8013a92:	4611      	mov	r1, r2
 8013a94:	602b      	str	r3, [r5, #0]
 8013a96:	f7ee f9c0 	bl	8001e1a <_fstat>
 8013a9a:	1c43      	adds	r3, r0, #1
 8013a9c:	d102      	bne.n	8013aa4 <_fstat_r+0x1c>
 8013a9e:	682b      	ldr	r3, [r5, #0]
 8013aa0:	b103      	cbz	r3, 8013aa4 <_fstat_r+0x1c>
 8013aa2:	6023      	str	r3, [r4, #0]
 8013aa4:	bd38      	pop	{r3, r4, r5, pc}
 8013aa6:	bf00      	nop
 8013aa8:	240028d8 	.word	0x240028d8

08013aac <_isatty_r>:
 8013aac:	b538      	push	{r3, r4, r5, lr}
 8013aae:	4d06      	ldr	r5, [pc, #24]	; (8013ac8 <_isatty_r+0x1c>)
 8013ab0:	2300      	movs	r3, #0
 8013ab2:	4604      	mov	r4, r0
 8013ab4:	4608      	mov	r0, r1
 8013ab6:	602b      	str	r3, [r5, #0]
 8013ab8:	f7ee f9bf 	bl	8001e3a <_isatty>
 8013abc:	1c43      	adds	r3, r0, #1
 8013abe:	d102      	bne.n	8013ac6 <_isatty_r+0x1a>
 8013ac0:	682b      	ldr	r3, [r5, #0]
 8013ac2:	b103      	cbz	r3, 8013ac6 <_isatty_r+0x1a>
 8013ac4:	6023      	str	r3, [r4, #0]
 8013ac6:	bd38      	pop	{r3, r4, r5, pc}
 8013ac8:	240028d8 	.word	0x240028d8

08013acc <_lseek_r>:
 8013acc:	b538      	push	{r3, r4, r5, lr}
 8013ace:	4d07      	ldr	r5, [pc, #28]	; (8013aec <_lseek_r+0x20>)
 8013ad0:	4604      	mov	r4, r0
 8013ad2:	4608      	mov	r0, r1
 8013ad4:	4611      	mov	r1, r2
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	602a      	str	r2, [r5, #0]
 8013ada:	461a      	mov	r2, r3
 8013adc:	f7ee f9b8 	bl	8001e50 <_lseek>
 8013ae0:	1c43      	adds	r3, r0, #1
 8013ae2:	d102      	bne.n	8013aea <_lseek_r+0x1e>
 8013ae4:	682b      	ldr	r3, [r5, #0]
 8013ae6:	b103      	cbz	r3, 8013aea <_lseek_r+0x1e>
 8013ae8:	6023      	str	r3, [r4, #0]
 8013aea:	bd38      	pop	{r3, r4, r5, pc}
 8013aec:	240028d8 	.word	0x240028d8

08013af0 <memcpy>:
 8013af0:	440a      	add	r2, r1
 8013af2:	4291      	cmp	r1, r2
 8013af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8013af8:	d100      	bne.n	8013afc <memcpy+0xc>
 8013afa:	4770      	bx	lr
 8013afc:	b510      	push	{r4, lr}
 8013afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b06:	4291      	cmp	r1, r2
 8013b08:	d1f9      	bne.n	8013afe <memcpy+0xe>
 8013b0a:	bd10      	pop	{r4, pc}

08013b0c <memmove>:
 8013b0c:	4288      	cmp	r0, r1
 8013b0e:	b510      	push	{r4, lr}
 8013b10:	eb01 0402 	add.w	r4, r1, r2
 8013b14:	d902      	bls.n	8013b1c <memmove+0x10>
 8013b16:	4284      	cmp	r4, r0
 8013b18:	4623      	mov	r3, r4
 8013b1a:	d807      	bhi.n	8013b2c <memmove+0x20>
 8013b1c:	1e43      	subs	r3, r0, #1
 8013b1e:	42a1      	cmp	r1, r4
 8013b20:	d008      	beq.n	8013b34 <memmove+0x28>
 8013b22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b2a:	e7f8      	b.n	8013b1e <memmove+0x12>
 8013b2c:	4402      	add	r2, r0
 8013b2e:	4601      	mov	r1, r0
 8013b30:	428a      	cmp	r2, r1
 8013b32:	d100      	bne.n	8013b36 <memmove+0x2a>
 8013b34:	bd10      	pop	{r4, pc}
 8013b36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b3e:	e7f7      	b.n	8013b30 <memmove+0x24>

08013b40 <_realloc_r>:
 8013b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b44:	4680      	mov	r8, r0
 8013b46:	4614      	mov	r4, r2
 8013b48:	460e      	mov	r6, r1
 8013b4a:	b921      	cbnz	r1, 8013b56 <_realloc_r+0x16>
 8013b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b50:	4611      	mov	r1, r2
 8013b52:	f7fe becb 	b.w	80128ec <_malloc_r>
 8013b56:	b92a      	cbnz	r2, 8013b64 <_realloc_r+0x24>
 8013b58:	f7fe fe5c 	bl	8012814 <_free_r>
 8013b5c:	4625      	mov	r5, r4
 8013b5e:	4628      	mov	r0, r5
 8013b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b64:	f000 f82e 	bl	8013bc4 <_malloc_usable_size_r>
 8013b68:	4284      	cmp	r4, r0
 8013b6a:	4607      	mov	r7, r0
 8013b6c:	d802      	bhi.n	8013b74 <_realloc_r+0x34>
 8013b6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b72:	d812      	bhi.n	8013b9a <_realloc_r+0x5a>
 8013b74:	4621      	mov	r1, r4
 8013b76:	4640      	mov	r0, r8
 8013b78:	f7fe feb8 	bl	80128ec <_malloc_r>
 8013b7c:	4605      	mov	r5, r0
 8013b7e:	2800      	cmp	r0, #0
 8013b80:	d0ed      	beq.n	8013b5e <_realloc_r+0x1e>
 8013b82:	42bc      	cmp	r4, r7
 8013b84:	4622      	mov	r2, r4
 8013b86:	4631      	mov	r1, r6
 8013b88:	bf28      	it	cs
 8013b8a:	463a      	movcs	r2, r7
 8013b8c:	f7ff ffb0 	bl	8013af0 <memcpy>
 8013b90:	4631      	mov	r1, r6
 8013b92:	4640      	mov	r0, r8
 8013b94:	f7fe fe3e 	bl	8012814 <_free_r>
 8013b98:	e7e1      	b.n	8013b5e <_realloc_r+0x1e>
 8013b9a:	4635      	mov	r5, r6
 8013b9c:	e7df      	b.n	8013b5e <_realloc_r+0x1e>
	...

08013ba0 <_read_r>:
 8013ba0:	b538      	push	{r3, r4, r5, lr}
 8013ba2:	4d07      	ldr	r5, [pc, #28]	; (8013bc0 <_read_r+0x20>)
 8013ba4:	4604      	mov	r4, r0
 8013ba6:	4608      	mov	r0, r1
 8013ba8:	4611      	mov	r1, r2
 8013baa:	2200      	movs	r2, #0
 8013bac:	602a      	str	r2, [r5, #0]
 8013bae:	461a      	mov	r2, r3
 8013bb0:	f7ee f8ee 	bl	8001d90 <_read>
 8013bb4:	1c43      	adds	r3, r0, #1
 8013bb6:	d102      	bne.n	8013bbe <_read_r+0x1e>
 8013bb8:	682b      	ldr	r3, [r5, #0]
 8013bba:	b103      	cbz	r3, 8013bbe <_read_r+0x1e>
 8013bbc:	6023      	str	r3, [r4, #0]
 8013bbe:	bd38      	pop	{r3, r4, r5, pc}
 8013bc0:	240028d8 	.word	0x240028d8

08013bc4 <_malloc_usable_size_r>:
 8013bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013bc8:	1f18      	subs	r0, r3, #4
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	bfbc      	itt	lt
 8013bce:	580b      	ldrlt	r3, [r1, r0]
 8013bd0:	18c0      	addlt	r0, r0, r3
 8013bd2:	4770      	bx	lr

08013bd4 <_init>:
 8013bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bd6:	bf00      	nop
 8013bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bda:	bc08      	pop	{r3}
 8013bdc:	469e      	mov	lr, r3
 8013bde:	4770      	bx	lr

08013be0 <_fini>:
 8013be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013be2:	bf00      	nop
 8013be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013be6:	bc08      	pop	{r3}
 8013be8:	469e      	mov	lr, r3
 8013bea:	4770      	bx	lr
