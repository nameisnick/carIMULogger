
h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a10  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  08011cb0  08011cb0  00021cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080122c0  080122c0  000222c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080122c8  080122c8  000222c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080122cc  080122cc  000222cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080122d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000277c  24000078  08012344  00030078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240027f4  08012344  000327f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025495  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000452f  00000000  00000000  00055537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c18  00000000  00000000  00059a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001a60  00000000  00000000  0005b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007b10  00000000  00000000  0005d0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029608  00000000  00000000  00064bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017358c  00000000  00000000  0008e1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00201784  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007fe4  00000000  00000000  002017d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011c98 	.word	0x08011c98

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08011c98 	.word	0x08011c98

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b4e      	ldr	r3, [pc, #312]	; (80007d4 <MX_GPIO_Init+0x150>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a4c      	ldr	r2, [pc, #304]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a45      	ldr	r2, [pc, #276]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a3d      	ldr	r2, [pc, #244]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f4:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a36      	ldr	r2, [pc, #216]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_GPIO_Init+0x150>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_GPIO_Init+0x150>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <MX_GPIO_Init+0x150>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MX_GPIO_Init+0x150>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <MX_GPIO_Init+0x154>)
 8000738:	f002 fde0 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <MX_GPIO_Init+0x158>)
 8000744:	f002 fdda 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x15c>)
 8000760:	f002 fc1c 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_GPIO_Init+0x154>)
 800077e:	f002 fc0d 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 8000782:	2310      	movs	r3, #16
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000786:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x15c>)
 8000798:	f002 fc00 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_GPIO_Init+0x158>)
 80007b6:	f002 fbf1 	bl	8002f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 6, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2106      	movs	r1, #6
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 fe53 	bl	800246a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 fe6a 	bl	800249e <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58022000 	.word	0x58022000
 80007dc:	58020c00 	.word	0x58020c00
 80007e0:	58021c00 	.word	0x58021c00

080007e4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80007e8:	bf00      	nop
 80007ea:	f000 f954 	bl	8000a96 <icm20948_who_am_i>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f7      	bne.n	80007ea <icm20948_init+0x6>

	icm20948_device_reset();
 80007fa:	f000 f971 	bl	8000ae0 <icm20948_device_reset>
	icm20948_wakeup();
 80007fe:	f000 f986 	bl	8000b0e <icm20948_wakeup>

	icm20948_clock_source(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 f9fe 	bl	8000c04 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000808:	f000 fa15 	bl	8000c36 <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800080c:	f000 f999 	bl	8000b42 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fa19 	bl	8000c48 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fa33 	bl	8000c82 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fa4d 	bl	8000cbc <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fa68 	bl	8000cf8 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000828:	f000 fa96 	bl	8000d58 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 800082c:	f000 fb16 	bl	8000e5c <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 fc09 	bl	8001048 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000836:	2003      	movs	r0, #3
 8000838:	f000 fc50 	bl	80010dc <icm20948_accel_full_scale_select>

	icm20948_data_ready_int_enable(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f000 fa4c 	bl	8000cda <icm20948_data_ready_int_enable>


}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}

08000846 <ak09916_init>:

void ak09916_init()
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 800084a:	f000 f991 	bl	8000b70 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 800084e:	f000 f9a6 	bl	8000b9e <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 8000852:	2007      	movs	r0, #7
 8000854:	f000 f9bd 	bl	8000bd2 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000858:	bf00      	nop
 800085a:	f000 f92f 	bl	8000abc <ak09916_who_am_i>
 800085e:	4603      	mov	r3, r0
 8000860:	f083 0301 	eor.w	r3, r3, #1
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f7      	bne.n	800085a <ak09916_init+0x14>

	ak09916_soft_reset();
 800086a:	f000 f945 	bl	8000af8 <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 800086e:	2008      	movs	r0, #8
 8000870:	f000 fa60 	bl	8000d34 <ak09916_operation_mode_setting>
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}

08000878 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000880:	2206      	movs	r2, #6
 8000882:	2133      	movs	r1, #51	; 0x33
 8000884:	2000      	movs	r0, #0
 8000886:	f000 fcf1 	bl	800126c <read_multiple_icm20948_reg>
 800088a:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	021b      	lsls	r3, r3, #8
 8000892:	b21a      	sxth	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	3301      	adds	r3, #1
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21a      	sxth	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	3302      	adds	r3, #2
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	b21a      	sxth	r2, r3
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	3303      	adds	r3, #3
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	4313      	orrs	r3, r2
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3304      	adds	r3, #4
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	021b      	lsls	r3, r3, #8
 80008c6:	b21a      	sxth	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	3305      	adds	r3, #5
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b21a      	sxth	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	809a      	strh	r2, [r3, #4]
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80008e8:	2206      	movs	r2, #6
 80008ea:	212d      	movs	r1, #45	; 0x2d
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fcbd 	bl	800126c <read_multiple_icm20948_reg>
 80008f2:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b21a      	sxth	r2, r3
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b21b      	sxth	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b21a      	sxth	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3302      	adds	r3, #2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b21a      	sxth	r2, r3
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	3303      	adds	r3, #3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);// + accel_scale_factor;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	3304      	adds	r3, #4
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	b21a      	sxth	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	3305      	adds	r3, #5
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b21b      	sxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b21a      	sxth	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	809a      	strh	r2, [r3, #4]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <icm20948_accel_gyro_read>:

void icm20948_accel_gyro_read (axisesAll* data)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  uint8_t *temp = read_multiple_icm20948_reg (ub_0, B0_ACCEL_XOUT_H, 14);
 8000950:	220e      	movs	r2, #14
 8000952:	212d      	movs	r1, #45	; 0x2d
 8000954:	2000      	movs	r0, #0
 8000956:	f000 fc89 	bl	800126c <read_multiple_icm20948_reg>
 800095a:	60f8      	str	r0, [r7, #12]

  data->ax = (int16_t) (temp[0] << 8 | temp[1]);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	021b      	lsls	r3, r3, #8
 8000962:	b21a      	sxth	r2, r3
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	b21b      	sxth	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b21a      	sxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	801a      	strh	r2, [r3, #0]
  data->ay = (int16_t) (temp[2] << 8 | temp[3]);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	3302      	adds	r3, #2
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	b21a      	sxth	r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	3303      	adds	r3, #3
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	b21b      	sxth	r3, r3
 8000986:	4313      	orrs	r3, r2
 8000988:	b21a      	sxth	r2, r3
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	805a      	strh	r2, [r3, #2]
  data->az = (int16_t) (temp[4] << 8 | temp[5]);	// + accel_scale_factor;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3305      	adds	r3, #5
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	809a      	strh	r2, [r3, #4]

  data->gx = (int16_t) (temp[8] << 8 | temp[9]);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3308      	adds	r3, #8
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	b21a      	sxth	r2, r3
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3309      	adds	r3, #9
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	80da      	strh	r2, [r3, #6]
  data->gy = (int16_t) (temp[10] << 8 | temp[11]);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	330a      	adds	r3, #10
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	021b      	lsls	r3, r3, #8
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	330b      	adds	r3, #11
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	4313      	orrs	r3, r2
 80009d6:	b21a      	sxth	r2, r3
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	811a      	strh	r2, [r3, #8]
  data->gz = (int16_t) (temp[12] << 8 | temp[13]);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	330c      	adds	r3, #12
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	330d      	adds	r3, #13
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b21b      	sxth	r3, r3
 80009ee:	4313      	orrs	r3, r2
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	815a      	strh	r2, [r3, #10]
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b086      	sub	sp, #24
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 8000a06:	2010      	movs	r0, #16
 8000a08:	f000 fc8c 	bl	8001324 <read_single_ak09916_reg>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d101      	bne.n	8000a1e <ak09916_mag_read+0x20>
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	e037      	b.n	8000a8e <ak09916_mag_read+0x90>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8000a1e:	2106      	movs	r1, #6
 8000a20:	2011      	movs	r0, #17
 8000a22:	f000 fcc2 	bl	80013aa <read_multiple_ak09916_reg>
 8000a26:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 8000a28:	2018      	movs	r0, #24
 8000a2a:	f000 fc7b 	bl	8001324 <read_single_ak09916_reg>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	f003 0308 	and.w	r3, r3, #8
 8000a34:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <ak09916_mag_read+0x42>
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e026      	b.n	8000a8e <ak09916_mag_read+0x90>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	3301      	adds	r3, #1
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b21a      	sxth	r2, r3
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b21b      	sxth	r3, r3
 8000a50:	4313      	orrs	r3, r2
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	3303      	adds	r3, #3
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	021b      	lsls	r3, r3, #8
 8000a60:	b21a      	sxth	r2, r3
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	3302      	adds	r3, #2
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b21b      	sxth	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b21a      	sxth	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	3305      	adds	r3, #5
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	021b      	lsls	r3, r3, #8
 8000a7a:	b21a      	sxth	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21a      	sxth	r2, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	809a      	strh	r2, [r3, #4]

	return true;
 8000a8c:	2301      	movs	r3, #1
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 fb94 	bl	80011cc <read_single_icm20948_reg>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	2bea      	cmp	r3, #234	; 0xea
 8000aac:	d101      	bne.n	8000ab2 <icm20948_who_am_i+0x1c>
		return true;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e000      	b.n	8000ab4 <icm20948_who_am_i+0x1e>
	else
		return false;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 fc2e 	bl	8001324 <read_single_ak09916_reg>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	2b09      	cmp	r3, #9
 8000ad0:	d101      	bne.n	8000ad6 <ak09916_who_am_i+0x1a>
		return true;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e000      	b.n	8000ad8 <ak09916_who_am_i+0x1c>
	else
		return false;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000ae4:	22c1      	movs	r2, #193	; 0xc1
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f000 fb9b 	bl	8001224 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000aee:	2064      	movs	r0, #100	; 0x64
 8000af0:	f001 fbb0 	bl	8002254 <HAL_Delay>
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000afc:	2101      	movs	r1, #1
 8000afe:	2032      	movs	r0, #50	; 0x32
 8000b00:	f000 fc31 	bl	8001366 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000b04:	2064      	movs	r0, #100	; 0x64
 8000b06:	f001 fba5 	bl	8002254 <HAL_Delay>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000b14:	2106      	movs	r1, #6
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 fb58 	bl	80011cc <read_single_icm20948_reg>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000b26:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	2106      	movs	r1, #6
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f000 fb78 	bl	8001224 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000b34:	2064      	movs	r0, #100	; 0x64
 8000b36:	f001 fb8d 	bl	8002254 <HAL_Delay>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b082      	sub	sp, #8
 8000b46:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000b48:	2103      	movs	r1, #3
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 fb3e 	bl	80011cc <read_single_icm20948_reg>
 8000b50:	4603      	mov	r3, r0
 8000b52:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	2103      	movs	r1, #3
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 fb5e 	bl	8001224 <write_single_icm20948_reg>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000b76:	2103      	movs	r1, #3
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f000 fb27 	bl	80011cc <read_single_icm20948_reg>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2103      	movs	r1, #3
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 fb47 	bl	8001224 <write_single_icm20948_reg>
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000ba4:	2103      	movs	r1, #3
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 fb10 	bl	80011cc <read_single_icm20948_reg>
 8000bac:	4603      	mov	r3, r0
 8000bae:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fb30 	bl	8001224 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f001 fb45 	bl	8002254 <HAL_Delay>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b084      	sub	sp, #16
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	2030      	movs	r0, #48	; 0x30
 8000be0:	f000 faf4 	bl	80011cc <read_single_icm20948_reg>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8000be8:	7bfa      	ldrb	r2, [r7, #15]
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2030      	movs	r0, #48	; 0x30
 8000bf8:	f000 fb14 	bl	8001224 <write_single_icm20948_reg>
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000c0e:	2106      	movs	r1, #6
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 fadb 	bl	80011cc <read_single_icm20948_reg>
 8000c16:	4603      	mov	r3, r0
 8000c18:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000c1a:	7bfa      	ldrb	r2, [r7, #15]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	461a      	mov	r2, r3
 8000c26:	2106      	movs	r1, #6
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f000 fafb 	bl	8001224 <write_single_icm20948_reg>
}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2109      	movs	r1, #9
 8000c3e:	2020      	movs	r0, #32
 8000c40:	f000 faf0 	bl	8001224 <write_single_icm20948_reg>
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000c52:	2101      	movs	r1, #1
 8000c54:	2020      	movs	r0, #32
 8000c56:	f000 fab9 	bl	80011cc <read_single_icm20948_reg>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	b25a      	sxtb	r2, r3
 8000c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
 8000c70:	461a      	mov	r2, r3
 8000c72:	2101      	movs	r1, #1
 8000c74:	2020      	movs	r0, #32
 8000c76:	f000 fad5 	bl	8001224 <write_single_icm20948_reg>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b084      	sub	sp, #16
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000c8c:	2114      	movs	r1, #20
 8000c8e:	2020      	movs	r0, #32
 8000c90:	f000 fa9c 	bl	80011cc <read_single_icm20948_reg>
 8000c94:	4603      	mov	r3, r0
 8000c96:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	b25a      	sxtb	r2, r3
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	461a      	mov	r2, r3
 8000cac:	2101      	movs	r1, #1
 8000cae:	2020      	movs	r0, #32
 8000cb0:	f000 fab8 	bl	8001224 <write_single_icm20948_reg>
}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	461a      	mov	r2, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2020      	movs	r0, #32
 8000cce:	f000 faa9 	bl	8001224 <write_single_icm20948_reg>
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <icm20948_data_ready_int_enable>:

void icm20948_data_ready_int_enable(uint8_t divider)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	71fb      	strb	r3, [r7, #7]
  write_single_icm20948_reg(ub_0,B0_INT_ENABLE_1 , divider);
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	2111      	movs	r1, #17
 8000cea:	2000      	movs	r0, #0
 8000cec:	f000 fa9a 	bl	8001224 <write_single_icm20948_reg>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	461a      	mov	r2, r3
 8000d18:	2110      	movs	r1, #16
 8000d1a:	2020      	movs	r0, #32
 8000d1c:	f000 fa82 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000d20:	7bbb      	ldrb	r3, [r7, #14]
 8000d22:	461a      	mov	r2, r3
 8000d24:	2111      	movs	r1, #17
 8000d26:	2020      	movs	r0, #32
 8000d28:	f000 fa7c 	bl	8001224 <write_single_icm20948_reg>
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	4619      	mov	r1, r3
 8000d42:	2031      	movs	r0, #49	; 0x31
 8000d44:	f000 fb0f 	bl	8001366 <write_single_ak09916_reg>
	HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f001 fa83 	bl	8002254 <HAL_Delay>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	80bb      	strh	r3, [r7, #4]

	for(int i = 0; i < 100; i++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e016      	b.n	8000da6 <icm20948_gyro_calibration+0x4e>
	{
		icm20948_gyro_read(&temp);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fd7b 	bl	8000878 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000d88:	4413      	add	r3, r2
 8000d8a:	60bb      	str	r3, [r7, #8]
		gyro_bias[1] += temp.y;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
		gyro_bias[2] += temp.z;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 100; i++)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	3301      	adds	r3, #1
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	2b63      	cmp	r3, #99	; 0x63
 8000daa:	dde5      	ble.n	8000d78 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	4a2a      	ldr	r2, [pc, #168]	; (8000e58 <icm20948_gyro_calibration+0x100>)
 8000db0:	fb82 1203 	smull	r1, r2, r2, r3
 8000db4:	1152      	asrs	r2, r2, #5
 8000db6:	17db      	asrs	r3, r3, #31
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	60bb      	str	r3, [r7, #8]
	gyro_bias[1] /= 100;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a26      	ldr	r2, [pc, #152]	; (8000e58 <icm20948_gyro_calibration+0x100>)
 8000dc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dc4:	1152      	asrs	r2, r2, #5
 8000dc6:	17db      	asrs	r3, r3, #31
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	60fb      	str	r3, [r7, #12]
	gyro_bias[2] /= 100;
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4a22      	ldr	r2, [pc, #136]	; (8000e58 <icm20948_gyro_calibration+0x100>)
 8000dd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd4:	1152      	asrs	r2, r2, #5
 8000dd6:	17db      	asrs	r3, r3, #31
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	613b      	str	r3, [r7, #16]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	425b      	negs	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	da00      	bge.n	8000de6 <icm20948_gyro_calibration+0x8e>
 8000de4:	3303      	adds	r3, #3
 8000de6:	109b      	asrs	r3, r3, #2
 8000de8:	121b      	asrs	r3, r3, #8
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	703b      	strb	r3, [r7, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	425b      	negs	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	da00      	bge.n	8000df8 <icm20948_gyro_calibration+0xa0>
 8000df6:	3303      	adds	r3, #3
 8000df8:	109b      	asrs	r3, r3, #2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	707b      	strb	r3, [r7, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	425b      	negs	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	da00      	bge.n	8000e08 <icm20948_gyro_calibration+0xb0>
 8000e06:	3303      	adds	r3, #3
 8000e08:	109b      	asrs	r3, r3, #2
 8000e0a:	121b      	asrs	r3, r3, #8
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	70bb      	strb	r3, [r7, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	425b      	negs	r3, r3
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da00      	bge.n	8000e1a <icm20948_gyro_calibration+0xc2>
 8000e18:	3303      	adds	r3, #3
 8000e1a:	109b      	asrs	r3, r3, #2
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	70fb      	strb	r3, [r7, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	425b      	negs	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	da00      	bge.n	8000e2a <icm20948_gyro_calibration+0xd2>
 8000e28:	3303      	adds	r3, #3
 8000e2a:	109b      	asrs	r3, r3, #2
 8000e2c:	121b      	asrs	r3, r3, #8
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	713b      	strb	r3, [r7, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	425b      	negs	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da00      	bge.n	8000e3c <icm20948_gyro_calibration+0xe4>
 8000e3a:	3303      	adds	r3, #3
 8000e3c:	109b      	asrs	r3, r3, #2
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	717b      	strb	r3, [r7, #5]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8000e42:	463a      	mov	r2, r7
 8000e44:	2306      	movs	r3, #6
 8000e46:	2103      	movs	r1, #3
 8000e48:	2020      	movs	r0, #32
 8000e4a:	f000 fa3f 	bl	80012cc <write_multiple_icm20948_reg>
}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	51eb851f 	.word	0x51eb851f

08000e5c <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b090      	sub	sp, #64	; 0x40
 8000e60:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 8000e82:	2300      	movs	r3, #0
 8000e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e86:	e016      	b.n	8000eb6 <icm20948_accel_calibration+0x5a>
	{
		icm20948_accel_read(&temp);
 8000e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fd27 	bl	80008e0 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000e98:	4413      	add	r3, r2
 8000e9a:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
 8000e9e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000ea2:	4413      	add	r3, r2
 8000ea4:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000eac:	4413      	add	r3, r2
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8000eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eb8:	2b63      	cmp	r3, #99	; 0x63
 8000eba:	dde5      	ble.n	8000e88 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	4a60      	ldr	r2, [pc, #384]	; (8001040 <icm20948_accel_calibration+0x1e4>)
 8000ec0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec4:	1152      	asrs	r2, r2, #5
 8000ec6:	17db      	asrs	r3, r3, #31
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8000ecc:	6a3b      	ldr	r3, [r7, #32]
 8000ece:	4a5c      	ldr	r2, [pc, #368]	; (8001040 <icm20948_accel_calibration+0x1e4>)
 8000ed0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ed4:	1152      	asrs	r2, r2, #5
 8000ed6:	17db      	asrs	r3, r3, #31
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	4a58      	ldr	r2, [pc, #352]	; (8001040 <icm20948_accel_calibration+0x1e4>)
 8000ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee4:	1152      	asrs	r2, r2, #5
 8000ee6:	17db      	asrs	r3, r3, #31
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8000eec:	4a55      	ldr	r2, [pc, #340]	; (8001044 <icm20948_accel_calibration+0x1e8>)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	6812      	ldr	r2, [r2, #0]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	8019      	strh	r1, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	0c12      	lsrs	r2, r2, #16
 8000efa:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8000efc:	2202      	movs	r2, #2
 8000efe:	2114      	movs	r1, #20
 8000f00:	2010      	movs	r0, #16
 8000f02:	f000 f9b3 	bl	800126c <read_multiple_icm20948_reg>
 8000f06:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8000f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	021b      	lsls	r3, r3, #8
 8000f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f10:	3201      	adds	r2, #1
 8000f12:	7812      	ldrb	r2, [r2, #0]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8000f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8000f26:	2202      	movs	r2, #2
 8000f28:	2117      	movs	r1, #23
 8000f2a:	2010      	movs	r0, #16
 8000f2c:	f000 f99e 	bl	800126c <read_multiple_icm20948_reg>
 8000f30:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8000f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f3a:	3201      	adds	r2, #1
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 8000f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f44:	3301      	adds	r3, #1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8000f50:	2202      	movs	r2, #2
 8000f52:	211a      	movs	r1, #26
 8000f54:	2010      	movs	r0, #16
 8000f56:	f000 f989 	bl	800126c <read_multiple_icm20948_reg>
 8000f5a:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f64:	3201      	adds	r2, #1
 8000f66:	7812      	ldrb	r2, [r2, #0]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 8000f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f6e:	3301      	adds	r3, #1
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da00      	bge.n	8000f84 <icm20948_accel_calibration+0x128>
 8000f82:	3307      	adds	r3, #7
 8000f84:	10db      	asrs	r3, r3, #3
 8000f86:	425b      	negs	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	da00      	bge.n	8000f96 <icm20948_accel_calibration+0x13a>
 8000f94:	3307      	adds	r3, #7
 8000f96:	10db      	asrs	r3, r3, #3
 8000f98:	425b      	negs	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	da00      	bge.n	8000fa8 <icm20948_accel_calibration+0x14c>
 8000fa6:	3307      	adds	r3, #7
 8000fa8:	10db      	asrs	r3, r3, #3
 8000faa:	425b      	negs	r3, r3
 8000fac:	4413      	add	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	f023 0301 	bic.w	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8000fc4:	7a7a      	ldrb	r2, [r7, #9]
 8000fc6:	793b      	ldrb	r3, [r7, #4]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	121b      	asrs	r3, r3, #8
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	f023 0301 	bic.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8000fe2:	7afa      	ldrb	r2, [r7, #11]
 8000fe4:	797b      	ldrb	r3, [r7, #5]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	121b      	asrs	r3, r3, #8
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	f023 0301 	bic.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8001000:	7b7a      	ldrb	r2, [r7, #13]
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	4313      	orrs	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800100a:	f107 0208 	add.w	r2, r7, #8
 800100e:	2302      	movs	r3, #2
 8001010:	2114      	movs	r1, #20
 8001012:	2010      	movs	r0, #16
 8001014:	f000 f95a 	bl	80012cc <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	1c9a      	adds	r2, r3, #2
 800101e:	2302      	movs	r3, #2
 8001020:	2117      	movs	r1, #23
 8001022:	2010      	movs	r0, #16
 8001024:	f000 f952 	bl	80012cc <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	1d1a      	adds	r2, r3, #4
 800102e:	2302      	movs	r3, #2
 8001030:	211a      	movs	r1, #26
 8001032:	2010      	movs	r0, #16
 8001034:	f000 f94a 	bl	80012cc <write_multiple_icm20948_reg>
}
 8001038:	bf00      	nop
 800103a:	3740      	adds	r7, #64	; 0x40
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	51eb851f 	.word	0x51eb851f
 8001044:	08011cb0 	.word	0x08011cb0

08001048 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001052:	2101      	movs	r1, #1
 8001054:	2020      	movs	r0, #32
 8001056:	f000 f8b9 	bl	80011cc <read_single_icm20948_reg>
 800105a:	4603      	mov	r3, r0
 800105c:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b03      	cmp	r3, #3
 8001062:	d827      	bhi.n	80010b4 <icm20948_gyro_full_scale_select+0x6c>
 8001064:	a201      	add	r2, pc, #4	; (adr r2, 800106c <icm20948_gyro_full_scale_select+0x24>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	0800107d 	.word	0x0800107d
 8001070:	08001085 	.word	0x08001085
 8001074:	08001095 	.word	0x08001095
 8001078:	080010a5 	.word	0x080010a5
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <icm20948_gyro_full_scale_select+0x80>)
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <icm20948_gyro_full_scale_select+0x84>)
 8001080:	601a      	str	r2, [r3, #0]
			break;
 8001082:	e017      	b.n	80010b4 <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f043 0302 	orr.w	r3, r3, #2
 800108a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <icm20948_gyro_full_scale_select+0x80>)
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <icm20948_gyro_full_scale_select+0x88>)
 8001090:	601a      	str	r2, [r3, #0]
			break;
 8001092:	e00f      	b.n	80010b4 <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	f043 0304 	orr.w	r3, r3, #4
 800109a:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <icm20948_gyro_full_scale_select+0x80>)
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <icm20948_gyro_full_scale_select+0x8c>)
 80010a0:	601a      	str	r2, [r3, #0]
			break;
 80010a2:	e007      	b.n	80010b4 <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	f043 0306 	orr.w	r3, r3, #6
 80010aa:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <icm20948_gyro_full_scale_select+0x80>)
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <icm20948_gyro_full_scale_select+0x90>)
 80010b0:	601a      	str	r2, [r3, #0]
			break;
 80010b2:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	461a      	mov	r2, r3
 80010b8:	2101      	movs	r1, #1
 80010ba:	2020      	movs	r0, #32
 80010bc:	f000 f8b2 	bl	8001224 <write_single_icm20948_reg>
}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24000094 	.word	0x24000094
 80010cc:	43030000 	.word	0x43030000
 80010d0:	42830000 	.word	0x42830000
 80010d4:	42033333 	.word	0x42033333
 80010d8:	41833333 	.word	0x41833333

080010dc <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80010e6:	2114      	movs	r1, #20
 80010e8:	2020      	movs	r0, #32
 80010ea:	f000 f86f 	bl	80011cc <read_single_icm20948_reg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b03      	cmp	r3, #3
 80010f6:	d82b      	bhi.n	8001150 <icm20948_accel_full_scale_select+0x74>
 80010f8:	a201      	add	r2, pc, #4	; (adr r2, 8001100 <icm20948_accel_full_scale_select+0x24>)
 80010fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fe:	bf00      	nop
 8001100:	08001111 	.word	0x08001111
 8001104:	0800111b 	.word	0x0800111b
 8001108:	0800112d 	.word	0x0800112d
 800110c:	0800113f 	.word	0x0800113f
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <icm20948_accel_full_scale_select+0x88>)
 8001112:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8001116:	601a      	str	r2, [r3, #0]
			break;
 8001118:	e01a      	b.n	8001150 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <icm20948_accel_full_scale_select+0x88>)
 8001124:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001128:	601a      	str	r2, [r3, #0]
			break;
 800112a:	e011      	b.n	8001150 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	f043 0304 	orr.w	r3, r3, #4
 8001132:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <icm20948_accel_full_scale_select+0x88>)
 8001136:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800113a:	601a      	str	r2, [r3, #0]
			break;
 800113c:	e008      	b.n	8001150 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	f043 0306 	orr.w	r3, r3, #6
 8001144:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <icm20948_accel_full_scale_select+0x88>)
 8001148:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800114c:	601a      	str	r2, [r3, #0]
			break;
 800114e:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	461a      	mov	r2, r3
 8001154:	2114      	movs	r1, #20
 8001156:	2020      	movs	r0, #32
 8001158:	f000 f864 	bl	8001224 <write_single_icm20948_reg>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	24000098 	.word	0x24000098

08001168 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001172:	4802      	ldr	r0, [pc, #8]	; (800117c <cs_high+0x14>)
 8001174:	f002 f8c2 	bl	80032fc <HAL_GPIO_WritePin>
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	58020c00 	.word	0x58020c00

08001180 <cs_low>:

static void cs_low()
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800118a:	4802      	ldr	r0, [pc, #8]	; (8001194 <cs_low+0x14>)
 800118c:	f002 f8b6 	bl	80032fc <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	58020c00 	.word	0x58020c00

08001198 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80011a2:	237f      	movs	r3, #127	; 0x7f
 80011a4:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	737b      	strb	r3, [r7, #13]

	cs_low();
 80011aa:	f7ff ffe9 	bl	8001180 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80011ae:	f107 010c 	add.w	r1, r7, #12
 80011b2:	230a      	movs	r3, #10
 80011b4:	2202      	movs	r2, #2
 80011b6:	4804      	ldr	r0, [pc, #16]	; (80011c8 <select_user_bank+0x30>)
 80011b8:	f007 f99a 	bl	80084f0 <HAL_SPI_Transmit>
	cs_high();
 80011bc:	f7ff ffd4 	bl	8001168 <cs_high>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	24000148 	.word	0x24000148

080011cc <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ffd5 	bl	8001198 <select_user_bank>

	cs_low();
 80011ee:	f7ff ffc7 	bl	8001180 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80011f2:	f107 010f 	add.w	r1, r7, #15
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	2201      	movs	r2, #1
 80011fc:	4808      	ldr	r0, [pc, #32]	; (8001220 <read_single_icm20948_reg+0x54>)
 80011fe:	f007 f977 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001202:	f107 010e 	add.w	r1, r7, #14
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	2201      	movs	r2, #1
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <read_single_icm20948_reg+0x54>)
 800120e:	f007 fb61 	bl	80088d4 <HAL_SPI_Receive>
	cs_high();
 8001212:	f7ff ffa9 	bl	8001168 <cs_high>

	return reg_val;
 8001216:	7bbb      	ldrb	r3, [r7, #14]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24000148 	.word	0x24000148

08001224 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
 800122e:	460b      	mov	r3, r1
 8001230:	71bb      	strb	r3, [r7, #6]
 8001232:	4613      	mov	r3, r2
 8001234:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 800123a:	797b      	ldrb	r3, [r7, #5]
 800123c:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ffa9 	bl	8001198 <select_user_bank>

	cs_low();
 8001246:	f7ff ff9b 	bl	8001180 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800124a:	f107 010c 	add.w	r1, r7, #12
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	2202      	movs	r2, #2
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <write_single_icm20948_reg+0x44>)
 8001256:	f007 f94b 	bl	80084f0 <HAL_SPI_Transmit>
	cs_high();
 800125a:	f7ff ff85 	bl	8001168 <cs_high>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000148 	.word	0x24000148

0800126c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	460b      	mov	r3, r1
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	4613      	mov	r3, r2
 800127c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800127e:	79bb      	ldrb	r3, [r7, #6]
 8001280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001284:	b2db      	uxtb	r3, r3
 8001286:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ff84 	bl	8001198 <select_user_bank>

	cs_low();
 8001290:	f7ff ff76 	bl	8001180 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001294:	f107 010f 	add.w	r1, r7, #15
 8001298:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129c:	2201      	movs	r2, #1
 800129e:	4809      	ldr	r0, [pc, #36]	; (80012c4 <read_multiple_icm20948_reg+0x58>)
 80012a0:	f007 f926 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80012a4:	797b      	ldrb	r3, [r7, #5]
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ac:	4906      	ldr	r1, [pc, #24]	; (80012c8 <read_multiple_icm20948_reg+0x5c>)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <read_multiple_icm20948_reg+0x58>)
 80012b0:	f007 fb10 	bl	80088d4 <HAL_SPI_Receive>
	cs_high();
 80012b4:	f7ff ff58 	bl	8001168 <cs_high>

	return reg_val;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <read_multiple_icm20948_reg+0x5c>)
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	24000148 	.word	0x24000148
 80012c8:	2400009c 	.word	0x2400009c

080012cc <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	603a      	str	r2, [r7, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	460b      	mov	r3, r1
 80012dc:	71bb      	strb	r3, [r7, #6]
 80012de:	4613      	mov	r3, r2
 80012e0:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ff55 	bl	8001198 <select_user_bank>

	cs_low();
 80012ee:	f7ff ff47 	bl	8001180 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80012f2:	f107 010f 	add.w	r1, r7, #15
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	2201      	movs	r2, #1
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <write_multiple_icm20948_reg+0x54>)
 80012fe:	f007 f8f7 	bl	80084f0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	b29a      	uxth	r2, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	4804      	ldr	r0, [pc, #16]	; (8001320 <write_multiple_icm20948_reg+0x54>)
 800130e:	f007 f8ef 	bl	80084f0 <HAL_SPI_Transmit>
	cs_high();
 8001312:	f7ff ff29 	bl	8001168 <cs_high>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24000148 	.word	0x24000148

08001324 <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 800132e:	228c      	movs	r2, #140	; 0x8c
 8001330:	2103      	movs	r1, #3
 8001332:	2030      	movs	r0, #48	; 0x30
 8001334:	f7ff ff76 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	461a      	mov	r2, r3
 800133c:	2104      	movs	r1, #4
 800133e:	2030      	movs	r0, #48	; 0x30
 8001340:	f7ff ff70 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001344:	2281      	movs	r2, #129	; 0x81
 8001346:	2105      	movs	r1, #5
 8001348:	2030      	movs	r0, #48	; 0x30
 800134a:	f7ff ff6b 	bl	8001224 <write_single_icm20948_reg>

	HAL_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f000 ff80 	bl	8002254 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 8001354:	213b      	movs	r1, #59	; 0x3b
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ff38 	bl	80011cc <read_single_icm20948_reg>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	460a      	mov	r2, r1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	4613      	mov	r3, r2
 8001374:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 8001376:	220c      	movs	r2, #12
 8001378:	2103      	movs	r1, #3
 800137a:	2030      	movs	r0, #48	; 0x30
 800137c:	f7ff ff52 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	461a      	mov	r2, r3
 8001384:	2104      	movs	r1, #4
 8001386:	2030      	movs	r0, #48	; 0x30
 8001388:	f7ff ff4c 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	461a      	mov	r2, r3
 8001390:	2106      	movs	r1, #6
 8001392:	2030      	movs	r0, #48	; 0x30
 8001394:	f7ff ff46 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 8001398:	2281      	movs	r2, #129	; 0x81
 800139a:	2105      	movs	r1, #5
 800139c:	2030      	movs	r0, #48	; 0x30
 800139e:	f7ff ff41 	bl	8001224 <write_single_icm20948_reg>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	460a      	mov	r2, r1
 80013b4:	71fb      	strb	r3, [r7, #7]
 80013b6:	4613      	mov	r3, r2
 80013b8:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 80013ba:	228c      	movs	r2, #140	; 0x8c
 80013bc:	2103      	movs	r1, #3
 80013be:	2030      	movs	r0, #48	; 0x30
 80013c0:	f7ff ff30 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	461a      	mov	r2, r3
 80013c8:	2104      	movs	r1, #4
 80013ca:	2030      	movs	r0, #48	; 0x30
 80013cc:	f7ff ff2a 	bl	8001224 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 80013d0:	79bb      	ldrb	r3, [r7, #6]
 80013d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	461a      	mov	r2, r3
 80013da:	2105      	movs	r1, #5
 80013dc:	2030      	movs	r0, #48	; 0x30
 80013de:	f7ff ff21 	bl	8001224 <write_single_icm20948_reg>

	HAL_Delay(1);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f000 ff36 	bl	8002254 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 80013e8:	79bb      	ldrb	r3, [r7, #6]
 80013ea:	461a      	mov	r2, r3
 80013ec:	213b      	movs	r1, #59	; 0x3b
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff ff3c 	bl	800126c <read_multiple_icm20948_reg>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void
HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4)
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	2b10      	cmp	r3, #16
 800140e:	d102      	bne.n	8001416 <HAL_GPIO_EXTI_Callback+0x16>
  {
    userKey1Flag = 1;
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_GPIO_EXTI_Callback+0x3c>)
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]

  }

  if (GPIO_Pin == GPIO_PIN_15)
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800141c:	d10a      	bne.n	8001434 <HAL_GPIO_EXTI_Callback+0x34>
  {
    dataReadyCount++;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_GPIO_EXTI_Callback+0x40>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3301      	adds	r3, #1
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_GPIO_EXTI_Callback+0x40>)
 8001426:	6013      	str	r3, [r2, #0]
    dataReadyFlag = 0;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <HAL_GPIO_EXTI_Callback+0x44>)
 800142a:	2200      	movs	r2, #0
 800142c:	701a      	strb	r2, [r3, #0]
    icm20948_accel_gyro_read(&accel_gyro_data);
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <HAL_GPIO_EXTI_Callback+0x48>)
 8001430:	f7ff fa8a 	bl	8000948 <icm20948_accel_gyro_read>

  }
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	240000a2 	.word	0x240000a2
 8001440:	240000a4 	.word	0x240000a4
 8001444:	240000a3 	.word	0x240000a3
 8001448:	240000c0 	.word	0x240000c0

0800144c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b0b1      	sub	sp, #196	; 0xc4
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001452:	f000 fe6d 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001456:	f000 f93f 	bl	80016d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145a:	f7ff f913 	bl	8000684 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800145e:	f000 f9d7 	bl	8001810 <MX_SDMMC1_SD_Init>
  MX_UART4_Init();
 8001462:	f000 fd5b 	bl	8001f1c <MX_UART4_Init>
  MX_SPI2_Init();
 8001466:	f000 fa95 	bl	8001994 <MX_SPI2_Init>
  MX_FATFS_Init();
 800146a:	f00a fd23 	bl	800beb4 <MX_FATFS_Init>
  MX_TIM7_Init();
 800146e:	f000 fcf5 	bl	8001e5c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  printf ("start main()\r\n");
 8001472:	4886      	ldr	r0, [pc, #536]	; (800168c <main+0x240>)
 8001474:	f00f fb96 	bl	8010ba4 <puts>

//  ICM_SelectBank (USER_BANK_0);
  HAL_Delay (10);
 8001478:	200a      	movs	r0, #10
 800147a:	f000 feeb 	bl	8002254 <HAL_Delay>
  icm20948_init();
 800147e:	f7ff f9b1 	bl	80007e4 <icm20948_init>
//  ICM_PowerOn ();
  ak09916_init();
 8001482:	f7ff f9e0 	bl	8000846 <ak09916_init>
  HAL_Delay (10);
 8001486:	200a      	movs	r0, #10
 8001488:	f000 fee4 	bl	8002254 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char fileName[12];

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	487f      	ldr	r0, [pc, #508]	; (8001690 <main+0x244>)
 8001494:	f001 ff32 	bl	80032fc <HAL_GPIO_WritePin>
  int i = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  BYTE buf[32] = "Hello world\r\n"; // file copy buffer
 800149e:	4b7d      	ldr	r3, [pc, #500]	; (8001694 <main+0x248>)
 80014a0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80014a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a6:	c407      	stmia	r4!, {r0, r1, r2}
 80014a8:	8023      	strh	r3, [r4, #0]
 80014aa:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	605a      	str	r2, [r3, #4]
 80014b4:	609a      	str	r2, [r3, #8]
 80014b6:	60da      	str	r2, [r3, #12]
 80014b8:	821a      	strh	r2, [r3, #16]
  uint32_t bw, br;

  // 1.
  //printf("%c%c%c%c\r\n", SDPath[0], SDPath[1], SDPath[2], SDPath[3]);
  if ((retSD = f_mount (&SDFatFS, SDPath, 0)) == FR_OK)
 80014ba:	2200      	movs	r2, #0
 80014bc:	4976      	ldr	r1, [pc, #472]	; (8001698 <main+0x24c>)
 80014be:	4877      	ldr	r0, [pc, #476]	; (800169c <main+0x250>)
 80014c0:	f00e fa7e 	bl	800f9c0 <f_mount>
 80014c4:	4603      	mov	r3, r0
 80014c6:	461a      	mov	r2, r3
 80014c8:	4b75      	ldr	r3, [pc, #468]	; (80016a0 <main+0x254>)
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	4b74      	ldr	r3, [pc, #464]	; (80016a0 <main+0x254>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d106      	bne.n	80014e2 <main+0x96>
  {
    //sprintf(str, "f_mount OK %d", retSD);
    printf ("1. f_mount OK %d \r\n", retSD);
 80014d4:	4b72      	ldr	r3, [pc, #456]	; (80016a0 <main+0x254>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4619      	mov	r1, r3
 80014da:	4872      	ldr	r0, [pc, #456]	; (80016a4 <main+0x258>)
 80014dc:	f00f fadc 	bl	8010a98 <iprintf>
 80014e0:	e005      	b.n	80014ee <main+0xa2>
  }
  else
  {
    printf ("1. f_mount OK failed %d\r\n", retSD);
 80014e2:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <main+0x254>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	4619      	mov	r1, r3
 80014e8:	486f      	ldr	r0, [pc, #444]	; (80016a8 <main+0x25c>)
 80014ea:	f00f fad5 	bl	8010a98 <iprintf>
  }
  // 2.

  int fileIndex = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  do
  {

    fileIndex++;
 80014f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80014f8:	3301      	adds	r3, #1
 80014fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    sprintf (fileName, "data%04d.dat", fileIndex);
 80014fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001502:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001506:	4969      	ldr	r1, [pc, #420]	; (80016ac <main+0x260>)
 8001508:	4618      	mov	r0, r3
 800150a:	f00f fb63 	bl	8010bd4 <siprintf>

    retSD = f_open (&SDFile, fileName, FA_OPEN_EXISTING | FA_READ);
 800150e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001512:	2201      	movs	r2, #1
 8001514:	4619      	mov	r1, r3
 8001516:	4866      	ldr	r0, [pc, #408]	; (80016b0 <main+0x264>)
 8001518:	f00e fa98 	bl	800fa4c <f_open>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b5f      	ldr	r3, [pc, #380]	; (80016a0 <main+0x254>)
 8001522:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit (&huart4, fileName, 12, HAL_MAX_DELAY);
 8001524:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	220c      	movs	r2, #12
 800152e:	4861      	ldr	r0, [pc, #388]	; (80016b4 <main+0x268>)
 8001530:	f008 f9bc 	bl	80098ac <HAL_UART_Transmit>
    printf ("  %d\r\n", retSD);
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <main+0x254>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	485f      	ldr	r0, [pc, #380]	; (80016b8 <main+0x26c>)
 800153c:	f00f faac 	bl	8010a98 <iprintf>
    HAL_Delay (100);
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f000 fe87 	bl	8002254 <HAL_Delay>
    if (retSD == FR_OK)
 8001546:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <main+0x254>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <main+0x108>
      f_close (&SDFile);
 800154e:	4858      	ldr	r0, [pc, #352]	; (80016b0 <main+0x264>)
 8001550:	f00f f844 	bl	80105dc <f_close>
    if ( retSD == FR_NOT_READY)
 8001554:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <main+0x254>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d100      	bne.n	800155e <main+0x112>
      while(1);
 800155c:	e7fe      	b.n	800155c <main+0x110>
  }while (retSD != FR_NO_FILE);
 800155e:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <main+0x254>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b04      	cmp	r3, #4
 8001564:	d1c6      	bne.n	80014f4 <main+0xa8>

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001566:	2201      	movs	r2, #1
 8001568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156c:	4848      	ldr	r0, [pc, #288]	; (8001690 <main+0x244>)
 800156e:	f001 fec5 	bl	80032fc <HAL_GPIO_WritePin>

  uint8_t startFlag = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
  uint8_t save_Count = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba

  IMU imuData;
  while (1)
  {
    if (startFlag)
 800157e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001582:	2b00      	cmp	r3, #0
 8001584:	d042      	beq.n	800160c <main+0x1c0>
    {
//      ICM_SelectBank (USER_BANK_0);
      HAL_Delay (10);
 8001586:	200a      	movs	r0, #10
 8001588:	f000 fe64 	bl	8002254 <HAL_Delay>
      int16_t mag_data[3];
//      ICM_ReadMag (mag_data);
      // Print raw, but joined, axis data values to screen


      ak09916_mag_read(&my_mag);
 800158c:	484b      	ldr	r0, [pc, #300]	; (80016bc <main+0x270>)
 800158e:	f7ff fa36 	bl	80009fe <ak09916_mag_read>
//      sprintf (uart_buffer, "%10d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\r\n",
//               HAL_GetTick(),my_accel.x,my_accel.y,my_accel.z, my_gyro.x,
//               my_gyro.y, my_gyro.z, my_mag.x, my_mag.y,
//               my_mag.z);

      imuData.time = HAL_GetTick();
 8001592:	f000 fe53 	bl	800223c <HAL_GetTick>
 8001596:	4603      	mov	r3, r0
 8001598:	60bb      	str	r3, [r7, #8]
      imuData.ax = my_accel.x;
 800159a:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <main+0x274>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_accel.y;
 80015a2:	4b47      	ldr	r3, [pc, #284]	; (80016c0 <main+0x274>)
 80015a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015a8:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_accel.z;
 80015aa:	4b45      	ldr	r3, [pc, #276]	; (80016c0 <main+0x274>)
 80015ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015b0:	81bb      	strh	r3, [r7, #12]

      imuData.gx = my_gyro.x;
 80015b2:	4b44      	ldr	r3, [pc, #272]	; (80016c4 <main+0x278>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	827b      	strh	r3, [r7, #18]
      imuData.gx = my_gyro.y;
 80015ba:	4b42      	ldr	r3, [pc, #264]	; (80016c4 <main+0x278>)
 80015bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015c0:	827b      	strh	r3, [r7, #18]
      imuData.gx = my_gyro.z;
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <main+0x278>)
 80015c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015c8:	827b      	strh	r3, [r7, #18]

      imuData.ax = my_mag.x;
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <main+0x270>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_mag.y;
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <main+0x270>)
 80015d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015d8:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_mag.z;
 80015da:	4b38      	ldr	r3, [pc, #224]	; (80016bc <main+0x270>)
 80015dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015e0:	81bb      	strh	r3, [r7, #12]

      //HAL_UART_Transmit(&huart4, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
      //printf("%d\r\n", strlen(uart_buffer));
      f_write (&SDFile,  (uint8_t*)&imuData, 22 , &bw);
 80015e2:	f107 0320 	add.w	r3, r7, #32
 80015e6:	f107 0108 	add.w	r1, r7, #8
 80015ea:	2216      	movs	r2, #22
 80015ec:	4830      	ldr	r0, [pc, #192]	; (80016b0 <main+0x264>)
 80015ee:	f00e fd00 	bl	800fff2 <f_write>
      if(save_Count++ == 5){
 80015f2:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	f887 20ba 	strb.w	r2, [r7, #186]	; 0xba
 80015fc:	2b05      	cmp	r3, #5
 80015fe:	d105      	bne.n	800160c <main+0x1c0>
        save_Count = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
        f_sync (&SDFile);
 8001606:	482a      	ldr	r0, [pc, #168]	; (80016b0 <main+0x264>)
 8001608:	f00e feca 	bl	80103a0 <f_sync>
      }
    }

    if (userKey1Flag)
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <main+0x27c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0b3      	beq.n	800157e <main+0x132>
    {
      if (startFlag == 1)
 8001616:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800161a:	2b01      	cmp	r3, #1
 800161c:	d103      	bne.n	8001626 <main+0x1da>
        f_close (&SDFile);
 800161e:	4824      	ldr	r0, [pc, #144]	; (80016b0 <main+0x264>)
 8001620:	f00e ffdc 	bl	80105dc <f_close>
 8001624:	e018      	b.n	8001658 <main+0x20c>
      else
      {
        retSD = f_open (&SDFile, fileName, FA_OPEN_APPEND | FA_WRITE);
 8001626:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800162a:	2232      	movs	r2, #50	; 0x32
 800162c:	4619      	mov	r1, r3
 800162e:	4820      	ldr	r0, [pc, #128]	; (80016b0 <main+0x264>)
 8001630:	f00e fa0c 	bl	800fa4c <f_open>
 8001634:	4603      	mov	r3, r0
 8001636:	461a      	mov	r2, r3
 8001638:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <main+0x254>)
 800163a:	701a      	strb	r2, [r3, #0]

        if (retSD == FR_OK)
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <main+0x254>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d103      	bne.n	800164c <main+0x200>
        {
          printf ("OK\r\n");
 8001644:	4821      	ldr	r0, [pc, #132]	; (80016cc <main+0x280>)
 8001646:	f00f faad 	bl	8010ba4 <puts>
 800164a:	e005      	b.n	8001658 <main+0x20c>
        }
        else
        {
          printf ("2. Failed %d \r\n", retSD);
 800164c:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <main+0x254>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	481f      	ldr	r0, [pc, #124]	; (80016d0 <main+0x284>)
 8001654:	f00f fa20 	bl	8010a98 <iprintf>
        }
      }

      printf ("asdf\r\n");
 8001658:	481e      	ldr	r0, [pc, #120]	; (80016d4 <main+0x288>)
 800165a:	f00f faa3 	bl	8010ba4 <puts>

      startFlag = !startFlag;
 800165e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001662:	2b00      	cmp	r3, #0
 8001664:	bf0c      	ite	eq
 8001666:	2301      	moveq	r3, #1
 8001668:	2300      	movne	r3, #0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
      HAL_Delay (500);
 8001670:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001674:	f000 fdee 	bl	8002254 <HAL_Delay>
      HAL_GPIO_TogglePin (LED_B_GPIO_Port, LED_B_Pin);
 8001678:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <main+0x244>)
 800167e:	f001 fe56 	bl	800332e <HAL_GPIO_TogglePin>
      userKey1Flag = 0;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <main+0x27c>)
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
    if (startFlag)
 8001688:	e779      	b.n	800157e <main+0x132>
 800168a:	bf00      	nop
 800168c:	08011cb4 	.word	0x08011cb4
 8001690:	58022000 	.word	0x58022000
 8001694:	08011d28 	.word	0x08011d28
 8001698:	240002b8 	.word	0x240002b8
 800169c:	240002bc 	.word	0x240002bc
 80016a0:	240002b4 	.word	0x240002b4
 80016a4:	08011cc4 	.word	0x08011cc4
 80016a8:	08011cd8 	.word	0x08011cd8
 80016ac:	08011cf4 	.word	0x08011cf4
 80016b0:	240012f8 	.word	0x240012f8
 80016b4:	24000220 	.word	0x24000220
 80016b8:	08011d04 	.word	0x08011d04
 80016bc:	240000b8 	.word	0x240000b8
 80016c0:	240000b0 	.word	0x240000b0
 80016c4:	240000a8 	.word	0x240000a8
 80016c8:	240000a2 	.word	0x240000a2
 80016cc:	08011d0c 	.word	0x08011d0c
 80016d0:	08011d10 	.word	0x08011d10
 80016d4:	08011d20 	.word	0x08011d20

080016d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09c      	sub	sp, #112	; 0x70
 80016dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e2:	224c      	movs	r2, #76	; 0x4c
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00f f8ee 	bl	80108c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2220      	movs	r2, #32
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00f f8e8 	bl	80108c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f001 fe4d 	bl	8003398 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <SystemClock_Config+0xfc>)
 8001704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001706:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <SystemClock_Config+0xfc>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <SystemClock_Config+0xfc>)
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4b2f      	ldr	r3, [pc, #188]	; (80017d8 <SystemClock_Config+0x100>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	4a2e      	ldr	r2, [pc, #184]	; (80017d8 <SystemClock_Config+0x100>)
 800171e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001722:	6193      	str	r3, [r2, #24]
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <SystemClock_Config+0x100>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001730:	bf00      	nop
 8001732:	4b29      	ldr	r3, [pc, #164]	; (80017d8 <SystemClock_Config+0x100>)
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800173e:	d1f8      	bne.n	8001732 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <SystemClock_Config+0x104>)
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f023 0303 	bic.w	r3, r3, #3
 8001748:	4a24      	ldr	r2, [pc, #144]	; (80017dc <SystemClock_Config+0x104>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001750:	2301      	movs	r3, #1
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175a:	2302      	movs	r3, #2
 800175c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175e:	2302      	movs	r3, #2
 8001760:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001762:	2305      	movs	r3, #5
 8001764:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001766:	23a0      	movs	r3, #160	; 0xa0
 8001768:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800176a:	2302      	movs	r3, #2
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800176e:	2302      	movs	r3, #2
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001772:	2302      	movs	r3, #2
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001776:	2308      	movs	r3, #8
 8001778:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800177a:	2300      	movs	r3, #0
 800177c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fe40 	bl	800340c <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001792:	f000 f837 	bl	8001804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	233f      	movs	r3, #63	; 0x3f
 8001798:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2303      	movs	r3, #3
 800179c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017a2:	2308      	movs	r3, #8
 80017a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017a6:	2340      	movs	r3, #64	; 0x40
 80017a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80017aa:	2340      	movs	r3, #64	; 0x40
 80017ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80017ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017b2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80017b4:	2340      	movs	r3, #64	; 0x40
 80017b6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2102      	movs	r1, #2
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fa53 	bl	8003c68 <HAL_RCC_ClockConfig>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80017c8:	f000 f81c 	bl	8001804 <Error_Handler>
  }
}
 80017cc:	bf00      	nop
 80017ce:	3770      	adds	r7, #112	; 0x70
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	58000400 	.word	0x58000400
 80017d8:	58024800 	.word	0x58024800
 80017dc:	58024400 	.word	0x58024400

080017e0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit (&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 80017e8:	1d39      	adds	r1, r7, #4
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	2201      	movs	r2, #1
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <__io_putchar+0x20>)
 80017f2:	f008 f85b 	bl	80098ac <HAL_UART_Transmit>

  return ch;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	24000220 	.word	0x24000220

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001808:	b672      	cpsid	i
}
 800180a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 800180c:	e7fe      	b.n	800180c <Error_Handler+0x8>
	...

08001810 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_SDMMC1_SD_Init+0x34>)
 8001816:	4a0c      	ldr	r2, [pc, #48]	; (8001848 <MX_SDMMC1_SD_Init+0x38>)
 8001818:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_SDMMC1_SD_Init+0x34>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_SDMMC1_SD_Init+0x34>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001826:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_SDMMC1_SD_Init+0x34>)
 8001828:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800182c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <MX_SDMMC1_SD_Init+0x34>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <MX_SDMMC1_SD_Init+0x34>)
 8001836:	2204      	movs	r2, #4
 8001838:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	240000cc 	.word	0x240000cc
 8001848:	52007000 	.word	0x52007000

0800184c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b0ba      	sub	sp, #232	; 0xe8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0318 	add.w	r3, r7, #24
 8001868:	22bc      	movs	r2, #188	; 0xbc
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00f f82b 	bl	80108c8 <memset>
  if(sdHandle->Instance==SDMMC1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a43      	ldr	r2, [pc, #268]	; (8001984 <HAL_SD_MspInit+0x138>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d17f      	bne.n	800197c <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800187c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001880:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001882:	2305      	movs	r3, #5
 8001884:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 8001886:	23c0      	movs	r3, #192	; 0xc0
 8001888:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800188e:	2302      	movs	r3, #2
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 20;
 8001892:	2314      	movs	r3, #20
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800189a:	2300      	movs	r3, #0
 800189c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80018a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018a8:	f107 0318 	add.w	r3, r7, #24
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fd67 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80018b8:	f7ff ffa4 	bl	8001804 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80018bc:	4b32      	ldr	r3, [pc, #200]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018c2:	4a31      	ldr	r2, [pc, #196]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80018cc:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018da:	4b2b      	ldr	r3, [pc, #172]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e0:	4a29      	ldr	r2, [pc, #164]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018e2:	f043 0304 	orr.w	r3, r3, #4
 80018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f8:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_SD_MspInit+0x13c>)
 80018fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <HAL_SD_MspInit+0x13c>)
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <HAL_SD_MspInit+0x13c>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001916:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800191a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001924:	2301      	movs	r3, #1
 8001926:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001930:	230c      	movs	r3, #12
 8001932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800193a:	4619      	mov	r1, r3
 800193c:	4813      	ldr	r0, [pc, #76]	; (800198c <HAL_SD_MspInit+0x140>)
 800193e:	f001 fb2d 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001942:	2304      	movs	r3, #4
 8001944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800194e:	2301      	movs	r3, #1
 8001950:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800195a:	230c      	movs	r3, #12
 800195c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001964:	4619      	mov	r1, r3
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <HAL_SD_MspInit+0x144>)
 8001968:	f001 fb18 	bl	8002f9c <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800196c:	2200      	movs	r2, #0
 800196e:	2100      	movs	r1, #0
 8001970:	2031      	movs	r0, #49	; 0x31
 8001972:	f000 fd7a 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001976:	2031      	movs	r0, #49	; 0x31
 8001978:	f000 fd91 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800197c:	bf00      	nop
 800197e:	37e8      	adds	r7, #232	; 0xe8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	52007000 	.word	0x52007000
 8001988:	58024400 	.word	0x58024400
 800198c:	58020800 	.word	0x58020800
 8001990:	58020c00 	.word	0x58020c00

08001994 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <MX_SPI2_Init+0xa8>)
 800199a:	4a29      	ldr	r2, [pc, #164]	; (8001a40 <MX_SPI2_Init+0xac>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b27      	ldr	r3, [pc, #156]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019ac:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019ae:	2207      	movs	r2, #7
 80019b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019c4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80019c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80019ca:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019d0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019d2:	4b1a      	ldr	r3, [pc, #104]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d8:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019da:	2200      	movs	r2, #0
 80019dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019f8:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MX_SPI2_Init+0xa8>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_SPI2_Init+0xa8>)
 8001a2a:	f006 fc5b 	bl	80082e4 <HAL_SPI_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001a34:	f7ff fee6 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	24000148 	.word	0x24000148
 8001a40:	40003800 	.word	0x40003800

08001a44 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b0b8      	sub	sp, #224	; 0xe0
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a5c:	f107 0310 	add.w	r3, r7, #16
 8001a60:	22bc      	movs	r2, #188	; 0xbc
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f00e ff2f 	bl	80108c8 <memset>
  if(spiHandle->Instance==SPI2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2d      	ldr	r2, [pc, #180]	; (8001b24 <HAL_SPI_MspInit+0xe0>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d153      	bne.n	8001b1c <HAL_SPI_MspInit+0xd8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 20;
 8001a82:	2314      	movs	r3, #20
 8001a84:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001a86:	2302      	movs	r3, #2
 8001a88:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a92:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f002 fc6a 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 8001ab2:	f7ff fea7 	bl	8001804 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_SPI_MspInit+0xe4>)
 8001ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001abc:	4a1a      	ldr	r2, [pc, #104]	; (8001b28 <HAL_SPI_MspInit+0xe4>)
 8001abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ac2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <HAL_SPI_MspInit+0xe4>)
 8001ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001acc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <HAL_SPI_MspInit+0xe4>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ada:	4a13      	ldr	r2, [pc, #76]	; (8001b28 <HAL_SPI_MspInit+0xe4>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_SPI_MspInit+0xe4>)
 8001ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001af2:	230e      	movs	r3, #14
 8001af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b14:	4619      	mov	r1, r3
 8001b16:	4805      	ldr	r0, [pc, #20]	; (8001b2c <HAL_SPI_MspInit+0xe8>)
 8001b18:	f001 fa40 	bl	8002f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	37e0      	adds	r7, #224	; 0xe0
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40003800 	.word	0x40003800
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	58022000 	.word	0x58022000

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_MspInit+0x30>)
 8001b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3c:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x30>)
 8001b3e:	f043 0302 	orr.w	r3, r3, #2
 8001b42:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x30>)
 8001b48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	58024400 	.word	0x58024400

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <NMI_Handler+0x4>

08001b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b6e:	e7fe      	b.n	8001b6e <HardFault_Handler+0x4>

08001b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b74:	e7fe      	b.n	8001b74 <MemManage_Handler+0x4>

08001b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bb0:	f000 fb30 	bl	8002214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_KEY_Pin);
 8001bbc:	2010      	movs	r0, #16
 8001bbe:	f001 fbd0 	bl	8003362 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <SDMMC1_IRQHandler+0x10>)
 8001bce:	f005 f995 	bl	8006efc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	240000cc 	.word	0x240000cc

08001bdc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001be0:	4802      	ldr	r0, [pc, #8]	; (8001bec <UART4_IRQHandler+0x10>)
 8001be2:	f007 fef9 	bl	80099d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24000220 	.word	0x24000220

08001bf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM7_IRQHandler+0x10>)
 8001bf6:	f007 fb71 	bl	80092dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	240001d4 	.word	0x240001d4

08001c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c16:	f3af 8000 	nop.w
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf0      	blt.n	8001c16 <_read+0x12>
	}

return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e009      	b.n	8001c64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fdc1 	bl	80017e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf1      	blt.n	8001c50 <_write+0x12>
	}
	return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_close>:

int _close(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f00e fdb0 	bl	8010874 <__errno>
 8001d14:	4603      	mov	r3, r0
 8001d16:	220c      	movs	r2, #12
 8001d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	24080000 	.word	0x24080000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	240001d0 	.word	0x240001d0
 8001d48:	240027f8 	.word	0x240027f8

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d50:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <SystemInit+0xe4>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a36      	ldr	r2, [pc, #216]	; (8001e30 <SystemInit+0xe4>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <SystemInit+0xe8>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d807      	bhi.n	8001d7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001d6c:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <SystemInit+0xe8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f023 030f 	bic.w	r3, r3, #15
 8001d74:	4a2f      	ldr	r2, [pc, #188]	; (8001e34 <SystemInit+0xe8>)
 8001d76:	f043 0307 	orr.w	r3, r3, #7
 8001d7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d7c:	4b2e      	ldr	r3, [pc, #184]	; (8001e38 <SystemInit+0xec>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2d      	ldr	r2, [pc, #180]	; (8001e38 <SystemInit+0xec>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <SystemInit+0xec>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001d8e:	4b2a      	ldr	r3, [pc, #168]	; (8001e38 <SystemInit+0xec>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4929      	ldr	r1, [pc, #164]	; (8001e38 <SystemInit+0xec>)
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <SystemInit+0xf0>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001d9a:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <SystemInit+0xe8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001da6:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <SystemInit+0xe8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 030f 	bic.w	r3, r3, #15
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <SystemInit+0xe8>)
 8001db0:	f043 0307 	orr.w	r3, r3, #7
 8001db4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001db6:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <SystemInit+0xec>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <SystemInit+0xec>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <SystemInit+0xec>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <SystemInit+0xec>)
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <SystemInit+0xf4>)
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001dce:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <SystemInit+0xec>)
 8001dd0:	4a1c      	ldr	r2, [pc, #112]	; (8001e44 <SystemInit+0xf8>)
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001dd4:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <SystemInit+0xec>)
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <SystemInit+0xfc>)
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <SystemInit+0xec>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <SystemInit+0xec>)
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <SystemInit+0xfc>)
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <SystemInit+0xec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <SystemInit+0xec>)
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <SystemInit+0xfc>)
 8001df0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <SystemInit+0xec>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df8:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <SystemInit+0xec>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <SystemInit+0xec>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <SystemInit+0xec>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <SystemInit+0x100>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <SystemInit+0x104>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e16:	d202      	bcs.n	8001e1e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <SystemInit+0x108>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e1e:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <SystemInit+0x10c>)
 8001e20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	52002000 	.word	0x52002000
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e40:	02020200 	.word	0x02020200
 8001e44:	01ff0000 	.word	0x01ff0000
 8001e48:	01010280 	.word	0x01010280
 8001e4c:	5c001000 	.word	0x5c001000
 8001e50:	ffff0000 	.word	0xffff0000
 8001e54:	51008108 	.word	0x51008108
 8001e58:	52004000 	.word	0x52004000

08001e5c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <MX_TIM7_Init+0x6c>)
 8001e70:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e78:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e86:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e88:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e8a:	2280      	movs	r2, #128	; 0x80
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e8e:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001e90:	f007 f9cd 	bl	800922e <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001e9a:	f7ff fcb3 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <MX_TIM7_Init+0x68>)
 8001eac:	f007 fc02 	bl	80096b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001eb6:	f7ff fca5 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	240001d4 	.word	0x240001d4
 8001ec8:	40001400 	.word	0x40001400

08001ecc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_TIM_Base_MspInit+0x48>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d116      	bne.n	8001f0c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ee6:	f043 0320 	orr.w	r3, r3, #32
 8001eea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_TIM_Base_MspInit+0x4c>)
 8001ef0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef4:	f003 0320 	and.w	r3, r3, #32
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2104      	movs	r1, #4
 8001f00:	2037      	movs	r0, #55	; 0x37
 8001f02:	f000 fab2 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f06:	2037      	movs	r0, #55	; 0x37
 8001f08:	f000 fac9 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40001400 	.word	0x40001400
 8001f18:	58024400 	.word	0x58024400

08001f1c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001f20:	4b22      	ldr	r3, [pc, #136]	; (8001fac <MX_UART4_Init+0x90>)
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <MX_UART4_Init+0x94>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001f26:	4b21      	ldr	r3, [pc, #132]	; (8001fac <MX_UART4_Init+0x90>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_UART4_Init+0x90>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <MX_UART4_Init+0x90>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_UART4_Init+0x90>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	; (8001fac <MX_UART4_Init+0x90>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <MX_UART4_Init+0x90>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b17      	ldr	r3, [pc, #92]	; (8001fac <MX_UART4_Init+0x90>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <MX_UART4_Init+0x90>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_UART4_Init+0x90>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_UART4_Init+0x90>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001f64:	4811      	ldr	r0, [pc, #68]	; (8001fac <MX_UART4_Init+0x90>)
 8001f66:	f007 fc51 	bl	800980c <HAL_UART_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001f70:	f7ff fc48 	bl	8001804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f74:	2100      	movs	r1, #0
 8001f76:	480d      	ldr	r0, [pc, #52]	; (8001fac <MX_UART4_Init+0x90>)
 8001f78:	f009 f908 	bl	800b18c <HAL_UARTEx_SetTxFifoThreshold>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001f82:	f7ff fc3f 	bl	8001804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f86:	2100      	movs	r1, #0
 8001f88:	4808      	ldr	r0, [pc, #32]	; (8001fac <MX_UART4_Init+0x90>)
 8001f8a:	f009 f93d 	bl	800b208 <HAL_UARTEx_SetRxFifoThreshold>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001f94:	f7ff fc36 	bl	8001804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001f98:	4804      	ldr	r0, [pc, #16]	; (8001fac <MX_UART4_Init+0x90>)
 8001f9a:	f009 f8be 	bl	800b11a <HAL_UARTEx_DisableFifoMode>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001fa4:	f7ff fc2e 	bl	8001804 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	24000220 	.word	0x24000220
 8001fb0:	40004c00 	.word	0x40004c00

08001fb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0ba      	sub	sp, #232	; 0xe8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	22bc      	movs	r2, #188	; 0xbc
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00e fc77 	bl	80108c8 <memset>
  if(uartHandle->Instance==UART4)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a3b      	ldr	r2, [pc, #236]	; (80020cc <HAL_UART_MspInit+0x118>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d16e      	bne.n	80020c2 <HAL_UART_MspInit+0x10e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fee:	f107 0318 	add.w	r3, r7, #24
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f002 f9c4 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ffe:	f7ff fc01 	bl	8001804 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002004:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002008:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 800200a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800200e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002020:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	4a2a      	ldr	r2, [pc, #168]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002030:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	4a22      	ldr	r2, [pc, #136]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_UART_MspInit+0x11c>)
 8002050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0_C     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800205c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002060:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002076:	2308      	movs	r3, #8
 8002078:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800207c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002080:	4619      	mov	r1, r3
 8002082:	4814      	ldr	r0, [pc, #80]	; (80020d4 <HAL_UART_MspInit+0x120>)
 8002084:	f000 ff8a 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002088:	2301      	movs	r3, #1
 800208a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020a0:	2308      	movs	r3, #8
 80020a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020aa:	4619      	mov	r1, r3
 80020ac:	480a      	ldr	r0, [pc, #40]	; (80020d8 <HAL_UART_MspInit+0x124>)
 80020ae:	f000 ff75 	bl	8002f9c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2105      	movs	r1, #5
 80020b6:	2034      	movs	r0, #52	; 0x34
 80020b8:	f000 f9d7 	bl	800246a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80020bc:	2034      	movs	r0, #52	; 0x34
 80020be:	f000 f9ee 	bl	800249e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80020c2:	bf00      	nop
 80020c4:	37e8      	adds	r7, #232	; 0xe8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40004c00 	.word	0x40004c00
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58022000 	.word	0x58022000
 80020d8:	58020000 	.word	0x58020000

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e0:	f7ff fe34 	bl	8001d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	; (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	; (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	; (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f00e fbb9 	bl	8010880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7ff f99d 	bl	800144c <main>
  bx  lr
 8002112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002118:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800211c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8002120:	080122d0 	.word	0x080122d0
  ldr r2, =_sbss
 8002124:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002128:	240027f4 	.word	0x240027f4

0800212c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC3_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002136:	2003      	movs	r0, #3
 8002138:	f000 f98c 	bl	8002454 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800213c:	f001 ff4a 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_Init+0x68>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	4913      	ldr	r1, [pc, #76]	; (800219c <HAL_Init+0x6c>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
 8002158:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_Init+0x68>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_Init+0x6c>)
 8002164:	5cd3      	ldrb	r3, [r2, r3]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
 8002170:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_Init+0x70>)
 8002172:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002174:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <HAL_Init+0x74>)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f814 	bl	80021a8 <HAL_InitTick>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e002      	b.n	8002190 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800218a:	f7ff fcd1 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400
 800219c:	08011d9c 	.word	0x08011d9c
 80021a0:	24000004 	.word	0x24000004
 80021a4:	24000000 	.word	0x24000000

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021b0:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_InitTick+0x60>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e021      	b.n	8002200 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021bc:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_InitTick+0x64>)
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_InitTick+0x60>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 f971 	bl	80024ba <HAL_SYSTICK_Config>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e00e      	b.n	8002200 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b0f      	cmp	r3, #15
 80021e6:	d80a      	bhi.n	80021fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021e8:	2200      	movs	r2, #0
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f000 f93b 	bl	800246a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f4:	4a06      	ldr	r2, [pc, #24]	; (8002210 <HAL_InitTick+0x68>)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e000      	b.n	8002200 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	2400000c 	.word	0x2400000c
 800220c:	24000000 	.word	0x24000000
 8002210:	24000008 	.word	0x24000008

08002214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_IncTick+0x20>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x24>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
 8002224:	4a04      	ldr	r2, [pc, #16]	; (8002238 <HAL_IncTick+0x24>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2400000c 	.word	0x2400000c
 8002238:	240002b0 	.word	0x240002b0

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	240002b0 	.word	0x240002b0

08002254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800225c:	f7ff ffee 	bl	800223c <HAL_GetTick>
 8002260:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800226c:	d005      	beq.n	800227a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800226e:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <HAL_Delay+0x44>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	461a      	mov	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	4413      	add	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227a:	bf00      	nop
 800227c:	f7ff ffde 	bl	800223c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	429a      	cmp	r2, r3
 800228a:	d8f7      	bhi.n	800227c <HAL_Delay+0x28>
  {
  }
}
 800228c:	bf00      	nop
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	2400000c 	.word	0x2400000c

0800229c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_GetREVID+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	0c1b      	lsrs	r3, r3, #16
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	5c001000 	.word	0x5c001000

080022b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <__NVIC_SetPriorityGrouping+0x40>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ca:	68ba      	ldr	r2, [r7, #8]
 80022cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022d0:	4013      	ands	r3, r2
 80022d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <__NVIC_SetPriorityGrouping+0x44>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	; (80022f4 <__NVIC_SetPriorityGrouping+0x40>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	05fa0000 	.word	0x05fa0000

080022fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002300:	4b04      	ldr	r3, [pc, #16]	; (8002314 <__NVIC_GetPriorityGrouping+0x18>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	f003 0307 	and.w	r3, r3, #7
}
 800230a:	4618      	mov	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002322:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002326:	2b00      	cmp	r3, #0
 8002328:	db0b      	blt.n	8002342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	f003 021f 	and.w	r2, r3, #31
 8002330:	4907      	ldr	r1, [pc, #28]	; (8002350 <__NVIC_EnableIRQ+0x38>)
 8002332:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	2001      	movs	r0, #1
 800233a:	fa00 f202 	lsl.w	r2, r0, r2
 800233e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000e100 	.word	0xe000e100

08002354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	6039      	str	r1, [r7, #0]
 800235e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002360:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	db0a      	blt.n	800237e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	490c      	ldr	r1, [pc, #48]	; (80023a0 <__NVIC_SetPriority+0x4c>)
 800236e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002372:	0112      	lsls	r2, r2, #4
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	440b      	add	r3, r1
 8002378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800237c:	e00a      	b.n	8002394 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4908      	ldr	r1, [pc, #32]	; (80023a4 <__NVIC_SetPriority+0x50>)
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	3b04      	subs	r3, #4
 800238c:	0112      	lsls	r2, r2, #4
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	440b      	add	r3, r1
 8002392:	761a      	strb	r2, [r3, #24]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000e100 	.word	0xe000e100
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b089      	sub	sp, #36	; 0x24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	f1c3 0307 	rsb	r3, r3, #7
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	bf28      	it	cs
 80023c6:	2304      	movcs	r3, #4
 80023c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3304      	adds	r3, #4
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d902      	bls.n	80023d8 <NVIC_EncodePriority+0x30>
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3b03      	subs	r3, #3
 80023d6:	e000      	b.n	80023da <NVIC_EncodePriority+0x32>
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	401a      	ands	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f0:	f04f 31ff 	mov.w	r1, #4294967295
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	fa01 f303 	lsl.w	r3, r1, r3
 80023fa:	43d9      	mvns	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	4313      	orrs	r3, r2
         );
}
 8002402:	4618      	mov	r0, r3
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
	...

08002410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3b01      	subs	r3, #1
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d301      	bcc.n	8002426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002422:	2301      	movs	r3, #1
 8002424:	e00f      	b.n	8002446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002426:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <SysTick_Config+0x40>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3b01      	subs	r3, #1
 800242c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800242e:	210f      	movs	r1, #15
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f7ff ff8e 	bl	8002354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <SysTick_Config+0x40>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SysTick_Config+0x40>)
 8002440:	2207      	movs	r2, #7
 8002442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	e000e010 	.word	0xe000e010

08002454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff ff29 	bl	80022b4 <__NVIC_SetPriorityGrouping>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b086      	sub	sp, #24
 800246e:	af00      	add	r7, sp, #0
 8002470:	4603      	mov	r3, r0
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002478:	f7ff ff40 	bl	80022fc <__NVIC_GetPriorityGrouping>
 800247c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	6978      	ldr	r0, [r7, #20]
 8002484:	f7ff ff90 	bl	80023a8 <NVIC_EncodePriority>
 8002488:	4602      	mov	r2, r0
 800248a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ff5f 	bl	8002354 <__NVIC_SetPriority>
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	4603      	mov	r3, r0
 80024a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff33 	bl	8002318 <__NVIC_EnableIRQ>
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff ffa4 	bl	8002410 <SysTick_Config>
 80024c8:	4603      	mov	r3, r0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff feae 	bl	800223c <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e2dc      	b.n	8002aa6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d008      	beq.n	800250a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e2cd      	b.n	8002aa6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a76      	ldr	r2, [pc, #472]	; (80026e8 <HAL_DMA_Abort+0x214>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d04a      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a74      	ldr	r2, [pc, #464]	; (80026ec <HAL_DMA_Abort+0x218>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d045      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a73      	ldr	r2, [pc, #460]	; (80026f0 <HAL_DMA_Abort+0x21c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d040      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a71      	ldr	r2, [pc, #452]	; (80026f4 <HAL_DMA_Abort+0x220>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d03b      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a70      	ldr	r2, [pc, #448]	; (80026f8 <HAL_DMA_Abort+0x224>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d036      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a6e      	ldr	r2, [pc, #440]	; (80026fc <HAL_DMA_Abort+0x228>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d031      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a6d      	ldr	r2, [pc, #436]	; (8002700 <HAL_DMA_Abort+0x22c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d02c      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a6b      	ldr	r2, [pc, #428]	; (8002704 <HAL_DMA_Abort+0x230>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d027      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6a      	ldr	r2, [pc, #424]	; (8002708 <HAL_DMA_Abort+0x234>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d022      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a68      	ldr	r2, [pc, #416]	; (800270c <HAL_DMA_Abort+0x238>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01d      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a67      	ldr	r2, [pc, #412]	; (8002710 <HAL_DMA_Abort+0x23c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d018      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a65      	ldr	r2, [pc, #404]	; (8002714 <HAL_DMA_Abort+0x240>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a64      	ldr	r2, [pc, #400]	; (8002718 <HAL_DMA_Abort+0x244>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d00e      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a62      	ldr	r2, [pc, #392]	; (800271c <HAL_DMA_Abort+0x248>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a61      	ldr	r2, [pc, #388]	; (8002720 <HAL_DMA_Abort+0x24c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d004      	beq.n	80025aa <HAL_DMA_Abort+0xd6>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a5f      	ldr	r2, [pc, #380]	; (8002724 <HAL_DMA_Abort+0x250>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d101      	bne.n	80025ae <HAL_DMA_Abort+0xda>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_DMA_Abort+0xdc>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 021e 	bic.w	r2, r2, #30
 80025c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e00a      	b.n	80025f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020e 	bic.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3c      	ldr	r2, [pc, #240]	; (80026e8 <HAL_DMA_Abort+0x214>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d072      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_DMA_Abort+0x218>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d06d      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a39      	ldr	r2, [pc, #228]	; (80026f0 <HAL_DMA_Abort+0x21c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d068      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <HAL_DMA_Abort+0x220>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d063      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a36      	ldr	r2, [pc, #216]	; (80026f8 <HAL_DMA_Abort+0x224>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d05e      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a34      	ldr	r2, [pc, #208]	; (80026fc <HAL_DMA_Abort+0x228>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d059      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a33      	ldr	r2, [pc, #204]	; (8002700 <HAL_DMA_Abort+0x22c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d054      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_DMA_Abort+0x230>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d04f      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a30      	ldr	r2, [pc, #192]	; (8002708 <HAL_DMA_Abort+0x234>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d04a      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_DMA_Abort+0x238>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d045      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <HAL_DMA_Abort+0x23c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d040      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_DMA_Abort+0x240>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d03b      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_DMA_Abort+0x244>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d036      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_DMA_Abort+0x248>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_DMA_Abort+0x24c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d02c      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_DMA_Abort+0x250>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d027      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_DMA_Abort+0x254>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Abort+0x258>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_DMA_Abort+0x25c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Abort+0x260>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_DMA_Abort+0x264>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Abort+0x268>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_DMA_Abort+0x26c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_Abort+0x20e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_DMA_Abort+0x270>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d132      	bne.n	8002748 <HAL_DMA_Abort+0x274>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e031      	b.n	800274a <HAL_DMA_Abort+0x276>
 80026e6:	bf00      	nop
 80026e8:	40020010 	.word	0x40020010
 80026ec:	40020028 	.word	0x40020028
 80026f0:	40020040 	.word	0x40020040
 80026f4:	40020058 	.word	0x40020058
 80026f8:	40020070 	.word	0x40020070
 80026fc:	40020088 	.word	0x40020088
 8002700:	400200a0 	.word	0x400200a0
 8002704:	400200b8 	.word	0x400200b8
 8002708:	40020410 	.word	0x40020410
 800270c:	40020428 	.word	0x40020428
 8002710:	40020440 	.word	0x40020440
 8002714:	40020458 	.word	0x40020458
 8002718:	40020470 	.word	0x40020470
 800271c:	40020488 	.word	0x40020488
 8002720:	400204a0 	.word	0x400204a0
 8002724:	400204b8 	.word	0x400204b8
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800275c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6d      	ldr	r2, [pc, #436]	; (8002918 <HAL_DMA_Abort+0x444>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d04a      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6b      	ldr	r2, [pc, #428]	; (800291c <HAL_DMA_Abort+0x448>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d045      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6a      	ldr	r2, [pc, #424]	; (8002920 <HAL_DMA_Abort+0x44c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d040      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a68      	ldr	r2, [pc, #416]	; (8002924 <HAL_DMA_Abort+0x450>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d03b      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a67      	ldr	r2, [pc, #412]	; (8002928 <HAL_DMA_Abort+0x454>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d036      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a65      	ldr	r2, [pc, #404]	; (800292c <HAL_DMA_Abort+0x458>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d031      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a64      	ldr	r2, [pc, #400]	; (8002930 <HAL_DMA_Abort+0x45c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d02c      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a62      	ldr	r2, [pc, #392]	; (8002934 <HAL_DMA_Abort+0x460>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d027      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a61      	ldr	r2, [pc, #388]	; (8002938 <HAL_DMA_Abort+0x464>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a5f      	ldr	r2, [pc, #380]	; (800293c <HAL_DMA_Abort+0x468>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01d      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a5e      	ldr	r2, [pc, #376]	; (8002940 <HAL_DMA_Abort+0x46c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d018      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_DMA_Abort+0x470>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a5b      	ldr	r2, [pc, #364]	; (8002948 <HAL_DMA_Abort+0x474>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a59      	ldr	r2, [pc, #356]	; (800294c <HAL_DMA_Abort+0x478>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a58      	ldr	r2, [pc, #352]	; (8002950 <HAL_DMA_Abort+0x47c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_DMA_Abort+0x32a>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a56      	ldr	r2, [pc, #344]	; (8002954 <HAL_DMA_Abort+0x480>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d108      	bne.n	8002810 <HAL_DMA_Abort+0x33c>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e007      	b.n	8002820 <HAL_DMA_Abort+0x34c>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002820:	e013      	b.n	800284a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002822:	f7ff fd0b 	bl	800223c <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b05      	cmp	r3, #5
 800282e:	d90c      	bls.n	800284a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2220      	movs	r2, #32
 8002834:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2203      	movs	r2, #3
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e12d      	b.n	8002aa6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1e5      	bne.n	8002822 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <HAL_DMA_Abort+0x444>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d04a      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2d      	ldr	r2, [pc, #180]	; (800291c <HAL_DMA_Abort+0x448>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d045      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <HAL_DMA_Abort+0x44c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d040      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2a      	ldr	r2, [pc, #168]	; (8002924 <HAL_DMA_Abort+0x450>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d03b      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a29      	ldr	r2, [pc, #164]	; (8002928 <HAL_DMA_Abort+0x454>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d036      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_DMA_Abort+0x458>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d031      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a26      	ldr	r2, [pc, #152]	; (8002930 <HAL_DMA_Abort+0x45c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d02c      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a24      	ldr	r2, [pc, #144]	; (8002934 <HAL_DMA_Abort+0x460>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d027      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <HAL_DMA_Abort+0x464>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d022      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a21      	ldr	r2, [pc, #132]	; (800293c <HAL_DMA_Abort+0x468>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01d      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a20      	ldr	r2, [pc, #128]	; (8002940 <HAL_DMA_Abort+0x46c>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d018      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_DMA_Abort+0x470>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1d      	ldr	r2, [pc, #116]	; (8002948 <HAL_DMA_Abort+0x474>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_DMA_Abort+0x478>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d009      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1a      	ldr	r2, [pc, #104]	; (8002950 <HAL_DMA_Abort+0x47c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_DMA_Abort+0x422>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_DMA_Abort+0x480>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_DMA_Abort+0x426>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_DMA_Abort+0x428>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d02b      	beq.n	8002958 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002904:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	f003 031f 	and.w	r3, r3, #31
 800290e:	223f      	movs	r2, #63	; 0x3f
 8002910:	409a      	lsls	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	e02a      	b.n	800296e <HAL_DMA_Abort+0x49a>
 8002918:	40020010 	.word	0x40020010
 800291c:	40020028 	.word	0x40020028
 8002920:	40020040 	.word	0x40020040
 8002924:	40020058 	.word	0x40020058
 8002928:	40020070 	.word	0x40020070
 800292c:	40020088 	.word	0x40020088
 8002930:	400200a0 	.word	0x400200a0
 8002934:	400200b8 	.word	0x400200b8
 8002938:	40020410 	.word	0x40020410
 800293c:	40020428 	.word	0x40020428
 8002940:	40020440 	.word	0x40020440
 8002944:	40020458 	.word	0x40020458
 8002948:	40020470 	.word	0x40020470
 800294c:	40020488 	.word	0x40020488
 8002950:	400204a0 	.word	0x400204a0
 8002954:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	f003 031f 	and.w	r3, r3, #31
 8002966:	2201      	movs	r2, #1
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a4f      	ldr	r2, [pc, #316]	; (8002ab0 <HAL_DMA_Abort+0x5dc>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d072      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_DMA_Abort+0x5e0>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d06d      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a4c      	ldr	r2, [pc, #304]	; (8002ab8 <HAL_DMA_Abort+0x5e4>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d068      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a4a      	ldr	r2, [pc, #296]	; (8002abc <HAL_DMA_Abort+0x5e8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d063      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a49      	ldr	r2, [pc, #292]	; (8002ac0 <HAL_DMA_Abort+0x5ec>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d05e      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <HAL_DMA_Abort+0x5f0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d059      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a46      	ldr	r2, [pc, #280]	; (8002ac8 <HAL_DMA_Abort+0x5f4>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d054      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a44      	ldr	r2, [pc, #272]	; (8002acc <HAL_DMA_Abort+0x5f8>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d04f      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <HAL_DMA_Abort+0x5fc>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d04a      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a41      	ldr	r2, [pc, #260]	; (8002ad4 <HAL_DMA_Abort+0x600>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d045      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a40      	ldr	r2, [pc, #256]	; (8002ad8 <HAL_DMA_Abort+0x604>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d040      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a3e      	ldr	r2, [pc, #248]	; (8002adc <HAL_DMA_Abort+0x608>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d03b      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <HAL_DMA_Abort+0x60c>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d036      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a3b      	ldr	r2, [pc, #236]	; (8002ae4 <HAL_DMA_Abort+0x610>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d031      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a3a      	ldr	r2, [pc, #232]	; (8002ae8 <HAL_DMA_Abort+0x614>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d02c      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a38      	ldr	r2, [pc, #224]	; (8002aec <HAL_DMA_Abort+0x618>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d027      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <HAL_DMA_Abort+0x61c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d022      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a35      	ldr	r2, [pc, #212]	; (8002af4 <HAL_DMA_Abort+0x620>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d01d      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_DMA_Abort+0x624>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a32      	ldr	r2, [pc, #200]	; (8002afc <HAL_DMA_Abort+0x628>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d013      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_DMA_Abort+0x62c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2f      	ldr	r2, [pc, #188]	; (8002b04 <HAL_DMA_Abort+0x630>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d009      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <HAL_DMA_Abort+0x634>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_DMA_Abort+0x58a>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <HAL_DMA_Abort+0x638>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Abort+0x58e>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_DMA_Abort+0x590>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d015      	beq.n	8002a94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002a70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00c      	beq.n	8002a94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40020010 	.word	0x40020010
 8002ab4:	40020028 	.word	0x40020028
 8002ab8:	40020040 	.word	0x40020040
 8002abc:	40020058 	.word	0x40020058
 8002ac0:	40020070 	.word	0x40020070
 8002ac4:	40020088 	.word	0x40020088
 8002ac8:	400200a0 	.word	0x400200a0
 8002acc:	400200b8 	.word	0x400200b8
 8002ad0:	40020410 	.word	0x40020410
 8002ad4:	40020428 	.word	0x40020428
 8002ad8:	40020440 	.word	0x40020440
 8002adc:	40020458 	.word	0x40020458
 8002ae0:	40020470 	.word	0x40020470
 8002ae4:	40020488 	.word	0x40020488
 8002ae8:	400204a0 	.word	0x400204a0
 8002aec:	400204b8 	.word	0x400204b8
 8002af0:	58025408 	.word	0x58025408
 8002af4:	5802541c 	.word	0x5802541c
 8002af8:	58025430 	.word	0x58025430
 8002afc:	58025444 	.word	0x58025444
 8002b00:	58025458 	.word	0x58025458
 8002b04:	5802546c 	.word	0x5802546c
 8002b08:	58025480 	.word	0x58025480
 8002b0c:	58025494 	.word	0x58025494

08002b10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e237      	b.n	8002f92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d004      	beq.n	8002b38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e22c      	b.n	8002f92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5c      	ldr	r2, [pc, #368]	; (8002cb0 <HAL_DMA_Abort_IT+0x1a0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d04a      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a5b      	ldr	r2, [pc, #364]	; (8002cb4 <HAL_DMA_Abort_IT+0x1a4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d045      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a59      	ldr	r2, [pc, #356]	; (8002cb8 <HAL_DMA_Abort_IT+0x1a8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d040      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_DMA_Abort_IT+0x1ac>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d03b      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a56      	ldr	r2, [pc, #344]	; (8002cc0 <HAL_DMA_Abort_IT+0x1b0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d036      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a55      	ldr	r2, [pc, #340]	; (8002cc4 <HAL_DMA_Abort_IT+0x1b4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d031      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a53      	ldr	r2, [pc, #332]	; (8002cc8 <HAL_DMA_Abort_IT+0x1b8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02c      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a52      	ldr	r2, [pc, #328]	; (8002ccc <HAL_DMA_Abort_IT+0x1bc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d027      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a50      	ldr	r2, [pc, #320]	; (8002cd0 <HAL_DMA_Abort_IT+0x1c0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d022      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a4f      	ldr	r2, [pc, #316]	; (8002cd4 <HAL_DMA_Abort_IT+0x1c4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d01d      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4d      	ldr	r2, [pc, #308]	; (8002cd8 <HAL_DMA_Abort_IT+0x1c8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d018      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a4c      	ldr	r2, [pc, #304]	; (8002cdc <HAL_DMA_Abort_IT+0x1cc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4a      	ldr	r2, [pc, #296]	; (8002ce0 <HAL_DMA_Abort_IT+0x1d0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a49      	ldr	r2, [pc, #292]	; (8002ce4 <HAL_DMA_Abort_IT+0x1d4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a47      	ldr	r2, [pc, #284]	; (8002ce8 <HAL_DMA_Abort_IT+0x1d8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_DMA_Abort_IT+0xc8>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a46      	ldr	r2, [pc, #280]	; (8002cec <HAL_DMA_Abort_IT+0x1dc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d101      	bne.n	8002bdc <HAL_DMA_Abort_IT+0xcc>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_DMA_Abort_IT+0xce>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f000 8086 	beq.w	8002cf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2204      	movs	r2, #4
 8002be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a2f      	ldr	r2, [pc, #188]	; (8002cb0 <HAL_DMA_Abort_IT+0x1a0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d04a      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a2e      	ldr	r2, [pc, #184]	; (8002cb4 <HAL_DMA_Abort_IT+0x1a4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d045      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a2c      	ldr	r2, [pc, #176]	; (8002cb8 <HAL_DMA_Abort_IT+0x1a8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d040      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <HAL_DMA_Abort_IT+0x1ac>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d03b      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a29      	ldr	r2, [pc, #164]	; (8002cc0 <HAL_DMA_Abort_IT+0x1b0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d036      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a28      	ldr	r2, [pc, #160]	; (8002cc4 <HAL_DMA_Abort_IT+0x1b4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d031      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a26      	ldr	r2, [pc, #152]	; (8002cc8 <HAL_DMA_Abort_IT+0x1b8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d02c      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <HAL_DMA_Abort_IT+0x1bc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d027      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a23      	ldr	r2, [pc, #140]	; (8002cd0 <HAL_DMA_Abort_IT+0x1c0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d022      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_DMA_Abort_IT+0x1c4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d01d      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a20      	ldr	r2, [pc, #128]	; (8002cd8 <HAL_DMA_Abort_IT+0x1c8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d018      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <HAL_DMA_Abort_IT+0x1cc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d013      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	; (8002ce0 <HAL_DMA_Abort_IT+0x1d0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00e      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a1c      	ldr	r2, [pc, #112]	; (8002ce4 <HAL_DMA_Abort_IT+0x1d4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d009      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ce8 <HAL_DMA_Abort_IT+0x1d8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d004      	beq.n	8002c8c <HAL_DMA_Abort_IT+0x17c>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a19      	ldr	r2, [pc, #100]	; (8002cec <HAL_DMA_Abort_IT+0x1dc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d108      	bne.n	8002c9e <HAL_DMA_Abort_IT+0x18e>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e178      	b.n	8002f90 <HAL_DMA_Abort_IT+0x480>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 0201 	bic.w	r2, r2, #1
 8002cac:	601a      	str	r2, [r3, #0]
 8002cae:	e16f      	b.n	8002f90 <HAL_DMA_Abort_IT+0x480>
 8002cb0:	40020010 	.word	0x40020010
 8002cb4:	40020028 	.word	0x40020028
 8002cb8:	40020040 	.word	0x40020040
 8002cbc:	40020058 	.word	0x40020058
 8002cc0:	40020070 	.word	0x40020070
 8002cc4:	40020088 	.word	0x40020088
 8002cc8:	400200a0 	.word	0x400200a0
 8002ccc:	400200b8 	.word	0x400200b8
 8002cd0:	40020410 	.word	0x40020410
 8002cd4:	40020428 	.word	0x40020428
 8002cd8:	40020440 	.word	0x40020440
 8002cdc:	40020458 	.word	0x40020458
 8002ce0:	40020470 	.word	0x40020470
 8002ce4:	40020488 	.word	0x40020488
 8002ce8:	400204a0 	.word	0x400204a0
 8002cec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 020e 	bic.w	r2, r2, #14
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a6c      	ldr	r2, [pc, #432]	; (8002eb8 <HAL_DMA_Abort_IT+0x3a8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d04a      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6b      	ldr	r2, [pc, #428]	; (8002ebc <HAL_DMA_Abort_IT+0x3ac>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d045      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a69      	ldr	r2, [pc, #420]	; (8002ec0 <HAL_DMA_Abort_IT+0x3b0>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d040      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a68      	ldr	r2, [pc, #416]	; (8002ec4 <HAL_DMA_Abort_IT+0x3b4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d03b      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a66      	ldr	r2, [pc, #408]	; (8002ec8 <HAL_DMA_Abort_IT+0x3b8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d036      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a65      	ldr	r2, [pc, #404]	; (8002ecc <HAL_DMA_Abort_IT+0x3bc>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d031      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a63      	ldr	r2, [pc, #396]	; (8002ed0 <HAL_DMA_Abort_IT+0x3c0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d02c      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <HAL_DMA_Abort_IT+0x3c4>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d027      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <HAL_DMA_Abort_IT+0x3c8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d022      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a5f      	ldr	r2, [pc, #380]	; (8002edc <HAL_DMA_Abort_IT+0x3cc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d01d      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a5d      	ldr	r2, [pc, #372]	; (8002ee0 <HAL_DMA_Abort_IT+0x3d0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d018      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5c      	ldr	r2, [pc, #368]	; (8002ee4 <HAL_DMA_Abort_IT+0x3d4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d013      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5a      	ldr	r2, [pc, #360]	; (8002ee8 <HAL_DMA_Abort_IT+0x3d8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00e      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a59      	ldr	r2, [pc, #356]	; (8002eec <HAL_DMA_Abort_IT+0x3dc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d009      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a57      	ldr	r2, [pc, #348]	; (8002ef0 <HAL_DMA_Abort_IT+0x3e0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_DMA_Abort_IT+0x290>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a56      	ldr	r2, [pc, #344]	; (8002ef4 <HAL_DMA_Abort_IT+0x3e4>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d108      	bne.n	8002db2 <HAL_DMA_Abort_IT+0x2a2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	e007      	b.n	8002dc2 <HAL_DMA_Abort_IT+0x2b2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3c      	ldr	r2, [pc, #240]	; (8002eb8 <HAL_DMA_Abort_IT+0x3a8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d072      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <HAL_DMA_Abort_IT+0x3ac>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d06d      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a39      	ldr	r2, [pc, #228]	; (8002ec0 <HAL_DMA_Abort_IT+0x3b0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d068      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a37      	ldr	r2, [pc, #220]	; (8002ec4 <HAL_DMA_Abort_IT+0x3b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d063      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a36      	ldr	r2, [pc, #216]	; (8002ec8 <HAL_DMA_Abort_IT+0x3b8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d05e      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <HAL_DMA_Abort_IT+0x3bc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d059      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a33      	ldr	r2, [pc, #204]	; (8002ed0 <HAL_DMA_Abort_IT+0x3c0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d054      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <HAL_DMA_Abort_IT+0x3c4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d04f      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a30      	ldr	r2, [pc, #192]	; (8002ed8 <HAL_DMA_Abort_IT+0x3c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d04a      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <HAL_DMA_Abort_IT+0x3cc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d045      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2d      	ldr	r2, [pc, #180]	; (8002ee0 <HAL_DMA_Abort_IT+0x3d0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d040      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2b      	ldr	r2, [pc, #172]	; (8002ee4 <HAL_DMA_Abort_IT+0x3d4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d03b      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a2a      	ldr	r2, [pc, #168]	; (8002ee8 <HAL_DMA_Abort_IT+0x3d8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d036      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a28      	ldr	r2, [pc, #160]	; (8002eec <HAL_DMA_Abort_IT+0x3dc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d031      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a27      	ldr	r2, [pc, #156]	; (8002ef0 <HAL_DMA_Abort_IT+0x3e0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d02c      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <HAL_DMA_Abort_IT+0x3e4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d027      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <HAL_DMA_Abort_IT+0x3e8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a22      	ldr	r2, [pc, #136]	; (8002efc <HAL_DMA_Abort_IT+0x3ec>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d01d      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a21      	ldr	r2, [pc, #132]	; (8002f00 <HAL_DMA_Abort_IT+0x3f0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d018      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1f      	ldr	r2, [pc, #124]	; (8002f04 <HAL_DMA_Abort_IT+0x3f4>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_DMA_Abort_IT+0x3f8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d00e      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a1c      	ldr	r2, [pc, #112]	; (8002f0c <HAL_DMA_Abort_IT+0x3fc>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d009      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <HAL_DMA_Abort_IT+0x400>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d004      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x3a2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_DMA_Abort_IT+0x404>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d132      	bne.n	8002f18 <HAL_DMA_Abort_IT+0x408>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e031      	b.n	8002f1a <HAL_DMA_Abort_IT+0x40a>
 8002eb6:	bf00      	nop
 8002eb8:	40020010 	.word	0x40020010
 8002ebc:	40020028 	.word	0x40020028
 8002ec0:	40020040 	.word	0x40020040
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	40020070 	.word	0x40020070
 8002ecc:	40020088 	.word	0x40020088
 8002ed0:	400200a0 	.word	0x400200a0
 8002ed4:	400200b8 	.word	0x400200b8
 8002ed8:	40020410 	.word	0x40020410
 8002edc:	40020428 	.word	0x40020428
 8002ee0:	40020440 	.word	0x40020440
 8002ee4:	40020458 	.word	0x40020458
 8002ee8:	40020470 	.word	0x40020470
 8002eec:	40020488 	.word	0x40020488
 8002ef0:	400204a0 	.word	0x400204a0
 8002ef4:	400204b8 	.word	0x400204b8
 8002ef8:	58025408 	.word	0x58025408
 8002efc:	5802541c 	.word	0x5802541c
 8002f00:	58025430 	.word	0x58025430
 8002f04:	58025444 	.word	0x58025444
 8002f08:	58025458 	.word	0x58025458
 8002f0c:	5802546c 	.word	0x5802546c
 8002f10:	58025480 	.word	0x58025480
 8002f14:	58025494 	.word	0x58025494
 8002f18:	2300      	movs	r3, #0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d028      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00c      	beq.n	8002f70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002faa:	4b89      	ldr	r3, [pc, #548]	; (80031d0 <HAL_GPIO_Init+0x234>)
 8002fac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fae:	e194      	b.n	80032da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	f000 8186 	beq.w	80032d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f003 0303 	and.w	r3, r3, #3
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d005      	beq.n	8002fe0 <HAL_GPIO_Init+0x44>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d130      	bne.n	8003042 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68da      	ldr	r2, [r3, #12]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003016:	2201      	movs	r2, #1
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 0201 	and.w	r2, r3, #1
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b03      	cmp	r3, #3
 800304c:	d017      	beq.n	800307e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d123      	bne.n	80030d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	08da      	lsrs	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3208      	adds	r2, #8
 8003092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	220f      	movs	r2, #15
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	43db      	mvns	r3, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4013      	ands	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	691a      	ldr	r2, [r3, #16]
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	08da      	lsrs	r2, r3, #3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3208      	adds	r2, #8
 80030cc:	69b9      	ldr	r1, [r7, #24]
 80030ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4013      	ands	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0203 	and.w	r2, r3, #3
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80e0 	beq.w	80032d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <HAL_GPIO_Init+0x238>)
 8003116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800311a:	4a2e      	ldr	r2, [pc, #184]	; (80031d4 <HAL_GPIO_Init+0x238>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003124:	4b2b      	ldr	r3, [pc, #172]	; (80031d4 <HAL_GPIO_Init+0x238>)
 8003126:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	60fb      	str	r3, [r7, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003132:	4a29      	ldr	r2, [pc, #164]	; (80031d8 <HAL_GPIO_Init+0x23c>)
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	089b      	lsrs	r3, r3, #2
 8003138:	3302      	adds	r3, #2
 800313a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	220f      	movs	r2, #15
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43db      	mvns	r3, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4013      	ands	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a20      	ldr	r2, [pc, #128]	; (80031dc <HAL_GPIO_Init+0x240>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d052      	beq.n	8003204 <HAL_GPIO_Init+0x268>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a1f      	ldr	r2, [pc, #124]	; (80031e0 <HAL_GPIO_Init+0x244>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d031      	beq.n	80031ca <HAL_GPIO_Init+0x22e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_GPIO_Init+0x248>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d02b      	beq.n	80031c6 <HAL_GPIO_Init+0x22a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <HAL_GPIO_Init+0x24c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d025      	beq.n	80031c2 <HAL_GPIO_Init+0x226>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <HAL_GPIO_Init+0x250>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01f      	beq.n	80031be <HAL_GPIO_Init+0x222>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1b      	ldr	r2, [pc, #108]	; (80031f0 <HAL_GPIO_Init+0x254>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d019      	beq.n	80031ba <HAL_GPIO_Init+0x21e>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_GPIO_Init+0x258>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <HAL_GPIO_Init+0x21a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_GPIO_Init+0x25c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00d      	beq.n	80031b2 <HAL_GPIO_Init+0x216>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a18      	ldr	r2, [pc, #96]	; (80031fc <HAL_GPIO_Init+0x260>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <HAL_GPIO_Init+0x212>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a17      	ldr	r2, [pc, #92]	; (8003200 <HAL_GPIO_Init+0x264>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d101      	bne.n	80031aa <HAL_GPIO_Init+0x20e>
 80031a6:	2309      	movs	r3, #9
 80031a8:	e02d      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031aa:	230a      	movs	r3, #10
 80031ac:	e02b      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031ae:	2308      	movs	r3, #8
 80031b0:	e029      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031b2:	2307      	movs	r3, #7
 80031b4:	e027      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031b6:	2306      	movs	r3, #6
 80031b8:	e025      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031ba:	2305      	movs	r3, #5
 80031bc:	e023      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031be:	2304      	movs	r3, #4
 80031c0:	e021      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031c2:	2303      	movs	r3, #3
 80031c4:	e01f      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e01d      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031ca:	2301      	movs	r3, #1
 80031cc:	e01b      	b.n	8003206 <HAL_GPIO_Init+0x26a>
 80031ce:	bf00      	nop
 80031d0:	58000080 	.word	0x58000080
 80031d4:	58024400 	.word	0x58024400
 80031d8:	58000400 	.word	0x58000400
 80031dc:	58020000 	.word	0x58020000
 80031e0:	58020400 	.word	0x58020400
 80031e4:	58020800 	.word	0x58020800
 80031e8:	58020c00 	.word	0x58020c00
 80031ec:	58021000 	.word	0x58021000
 80031f0:	58021400 	.word	0x58021400
 80031f4:	58021800 	.word	0x58021800
 80031f8:	58021c00 	.word	0x58021c00
 80031fc:	58022000 	.word	0x58022000
 8003200:	58022400 	.word	0x58022400
 8003204:	2300      	movs	r3, #0
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	f002 0203 	and.w	r2, r2, #3
 800320c:	0092      	lsls	r2, r2, #2
 800320e:	4093      	lsls	r3, r2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003216:	4938      	ldr	r1, [pc, #224]	; (80032f8 <HAL_GPIO_Init+0x35c>)
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	3302      	adds	r3, #2
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800324a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	3301      	adds	r3, #1
 80032d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f47f ae63 	bne.w	8002fb0 <HAL_GPIO_Init+0x14>
  }
}
 80032ea:	bf00      	nop
 80032ec:	bf00      	nop
 80032ee:	3724      	adds	r7, #36	; 0x24
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	58000400 	.word	0x58000400

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	619a      	str	r2, [r3, #24]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	041a      	lsls	r2, r3, #16
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43d9      	mvns	r1, r3
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	400b      	ands	r3, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr

08003362 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b082      	sub	sp, #8
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800336c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003370:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe f839 	bl	8001400 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d00a      	beq.n	80033c2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	f003 0307 	and.w	r3, r3, #7
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d001      	beq.n	80033be <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e01f      	b.n	80033fe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	e01d      	b.n	80033fe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	490f      	ldr	r1, [pc, #60]	; (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80033d2:	f7fe ff33 	bl	800223c <HAL_GetTick>
 80033d6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033d8:	e009      	b.n	80033ee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80033da:	f7fe ff2f 	bl	800223c <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033e8:	d901      	bls.n	80033ee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e007      	b.n	80033fe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80033ee:	4b06      	ldr	r3, [pc, #24]	; (8003408 <HAL_PWREx_ConfigSupply+0x70>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fa:	d1ee      	bne.n	80033da <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	58024800 	.word	0x58024800

0800340c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08c      	sub	sp, #48	; 0x30
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d102      	bne.n	8003420 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f000 bc1d 	b.w	8003c5a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8087 	beq.w	800353c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800342e:	4b99      	ldr	r3, [pc, #612]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003438:	4b96      	ldr	r3, [pc, #600]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	2b10      	cmp	r3, #16
 8003442:	d007      	beq.n	8003454 <HAL_RCC_OscConfig+0x48>
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	2b18      	cmp	r3, #24
 8003448:	d110      	bne.n	800346c <HAL_RCC_OscConfig+0x60>
 800344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d10b      	bne.n	800346c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003454:	4b8f      	ldr	r3, [pc, #572]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d06c      	beq.n	800353a <HAL_RCC_OscConfig+0x12e>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d168      	bne.n	800353a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e3f6      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d106      	bne.n	8003484 <HAL_RCC_OscConfig+0x78>
 8003476:	4b87      	ldr	r3, [pc, #540]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a86      	ldr	r2, [pc, #536]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e02e      	b.n	80034e2 <HAL_RCC_OscConfig+0xd6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10c      	bne.n	80034a6 <HAL_RCC_OscConfig+0x9a>
 800348c:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a80      	ldr	r2, [pc, #512]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b7e      	ldr	r3, [pc, #504]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a7d      	ldr	r2, [pc, #500]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	e01d      	b.n	80034e2 <HAL_RCC_OscConfig+0xd6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ae:	d10c      	bne.n	80034ca <HAL_RCC_OscConfig+0xbe>
 80034b0:	4b78      	ldr	r3, [pc, #480]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a77      	ldr	r2, [pc, #476]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b75      	ldr	r3, [pc, #468]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a74      	ldr	r2, [pc, #464]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	e00b      	b.n	80034e2 <HAL_RCC_OscConfig+0xd6>
 80034ca:	4b72      	ldr	r3, [pc, #456]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a71      	ldr	r2, [pc, #452]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	4b6f      	ldr	r3, [pc, #444]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a6e      	ldr	r2, [pc, #440]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80034dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d013      	beq.n	8003512 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fea7 	bl	800223c <HAL_GetTick>
 80034ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f2:	f7fe fea3 	bl	800223c <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b64      	cmp	r3, #100	; 0x64
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e3aa      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003504:	4b63      	ldr	r3, [pc, #396]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0xe6>
 8003510:	e014      	b.n	800353c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe fe93 	bl	800223c <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800351a:	f7fe fe8f 	bl	800223c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	; 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e396      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <HAL_RCC_OscConfig+0x10e>
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80cb 	beq.w	80036e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354a:	4b52      	ldr	r3, [pc, #328]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003552:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003554:	4b4f      	ldr	r3, [pc, #316]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <HAL_RCC_OscConfig+0x164>
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	2b18      	cmp	r3, #24
 8003564:	d156      	bne.n	8003614 <HAL_RCC_OscConfig+0x208>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d151      	bne.n	8003614 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003570:	4b48      	ldr	r3, [pc, #288]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_OscConfig+0x17c>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e368      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003588:	4b42      	ldr	r3, [pc, #264]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f023 0219 	bic.w	r2, r3, #25
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	493f      	ldr	r1, [pc, #252]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800359a:	f7fe fe4f 	bl	800223c <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035a2:	f7fe fe4b 	bl	800223c <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e352      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035b4:	4b37      	ldr	r3, [pc, #220]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0f0      	beq.n	80035a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c0:	f7fe fe6c 	bl	800229c <HAL_GetREVID>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d817      	bhi.n	80035fe <HAL_RCC_OscConfig+0x1f2>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b40      	cmp	r3, #64	; 0x40
 80035d4:	d108      	bne.n	80035e8 <HAL_RCC_OscConfig+0x1dc>
 80035d6:	4b2f      	ldr	r3, [pc, #188]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80035de:	4a2d      	ldr	r2, [pc, #180]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80035e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035e6:	e07b      	b.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b2a      	ldr	r3, [pc, #168]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	4927      	ldr	r1, [pc, #156]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035fc:	e070      	b.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fe:	4b25      	ldr	r3, [pc, #148]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	4921      	ldr	r1, [pc, #132]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003612:	e065      	b.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d048      	beq.n	80036ae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800361c:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f023 0219 	bic.w	r2, r3, #25
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	491a      	ldr	r1, [pc, #104]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800362e:	f7fe fe05 	bl	800223c <HAL_GetTick>
 8003632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe fe01 	bl	800223c <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e308      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003648:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	f7fe fe22 	bl	800229c <HAL_GetREVID>
 8003658:	4603      	mov	r3, r0
 800365a:	f241 0203 	movw	r2, #4099	; 0x1003
 800365e:	4293      	cmp	r3, r2
 8003660:	d81a      	bhi.n	8003698 <HAL_RCC_OscConfig+0x28c>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d108      	bne.n	800367c <HAL_RCC_OscConfig+0x270>
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003672:	4a08      	ldr	r2, [pc, #32]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 8003674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003678:	6053      	str	r3, [r2, #4]
 800367a:	e031      	b.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	031b      	lsls	r3, r3, #12
 800368a:	4902      	ldr	r1, [pc, #8]	; (8003694 <HAL_RCC_OscConfig+0x288>)
 800368c:	4313      	orrs	r3, r2
 800368e:	604b      	str	r3, [r1, #4]
 8003690:	e026      	b.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
 8003692:	bf00      	nop
 8003694:	58024400 	.word	0x58024400
 8003698:	4b9a      	ldr	r3, [pc, #616]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	061b      	lsls	r3, r3, #24
 80036a6:	4997      	ldr	r1, [pc, #604]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	604b      	str	r3, [r1, #4]
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b95      	ldr	r3, [pc, #596]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a94      	ldr	r2, [pc, #592]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fe fdbf 	bl	800223c <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fe fdbb 	bl	800223c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e2c2      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036d4:	4b8b      	ldr	r3, [pc, #556]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	f000 80a9 	beq.w	8003840 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ee:	4b85      	ldr	r3, [pc, #532]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036f8:	4b82      	ldr	r3, [pc, #520]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b08      	cmp	r3, #8
 8003702:	d007      	beq.n	8003714 <HAL_RCC_OscConfig+0x308>
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b18      	cmp	r3, #24
 8003708:	d13a      	bne.n	8003780 <HAL_RCC_OscConfig+0x374>
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f003 0303 	and.w	r3, r3, #3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d135      	bne.n	8003780 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003714:	4b7b      	ldr	r3, [pc, #492]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_OscConfig+0x320>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e296      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800372c:	f7fe fdb6 	bl	800229c <HAL_GetREVID>
 8003730:	4603      	mov	r3, r0
 8003732:	f241 0203 	movw	r2, #4099	; 0x1003
 8003736:	4293      	cmp	r3, r2
 8003738:	d817      	bhi.n	800376a <HAL_RCC_OscConfig+0x35e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	2b20      	cmp	r3, #32
 8003740:	d108      	bne.n	8003754 <HAL_RCC_OscConfig+0x348>
 8003742:	4b70      	ldr	r3, [pc, #448]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800374a:	4a6e      	ldr	r2, [pc, #440]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800374c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003750:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003752:	e075      	b.n	8003840 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003754:	4b6b      	ldr	r3, [pc, #428]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	069b      	lsls	r3, r3, #26
 8003762:	4968      	ldr	r1, [pc, #416]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003764:	4313      	orrs	r3, r2
 8003766:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003768:	e06a      	b.n	8003840 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800376a:	4b66      	ldr	r3, [pc, #408]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	061b      	lsls	r3, r3, #24
 8003778:	4962      	ldr	r1, [pc, #392]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800377a:	4313      	orrs	r3, r2
 800377c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800377e:	e05f      	b.n	8003840 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d042      	beq.n	800380e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003788:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a5d      	ldr	r2, [pc, #372]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800378e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fd52 	bl	800223c <HAL_GetTick>
 8003798:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800379c:	f7fe fd4e 	bl	800223c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e255      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037ae:	4b55      	ldr	r3, [pc, #340]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037ba:	f7fe fd6f 	bl	800229c <HAL_GetREVID>
 80037be:	4603      	mov	r3, r0
 80037c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d817      	bhi.n	80037f8 <HAL_RCC_OscConfig+0x3ec>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	d108      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3d6>
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80037d8:	4a4a      	ldr	r2, [pc, #296]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80037da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037de:	6053      	str	r3, [r2, #4]
 80037e0:	e02e      	b.n	8003840 <HAL_RCC_OscConfig+0x434>
 80037e2:	4b48      	ldr	r3, [pc, #288]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	069b      	lsls	r3, r3, #26
 80037f0:	4944      	ldr	r1, [pc, #272]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	604b      	str	r3, [r1, #4]
 80037f6:	e023      	b.n	8003840 <HAL_RCC_OscConfig+0x434>
 80037f8:	4b42      	ldr	r3, [pc, #264]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	493f      	ldr	r1, [pc, #252]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003808:	4313      	orrs	r3, r2
 800380a:	60cb      	str	r3, [r1, #12]
 800380c:	e018      	b.n	8003840 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800380e:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a3c      	ldr	r2, [pc, #240]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fe fd0f 	bl	800223c <HAL_GetTick>
 800381e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003822:	f7fe fd0b 	bl	800223c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e212      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003834:	4b33      	ldr	r3, [pc, #204]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1f0      	bne.n	8003822 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d036      	beq.n	80038ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d019      	beq.n	8003888 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 8003856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003858:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800385a:	f043 0301 	orr.w	r3, r3, #1
 800385e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fe fcec 	bl	800223c <HAL_GetTick>
 8003864:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003868:	f7fe fce8 	bl	800223c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e1ef      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x45c>
 8003886:	e018      	b.n	80038ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003888:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fe fcd2 	bl	800223c <HAL_GetTick>
 8003898:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800389c:	f7fe fcce 	bl	800223c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1d5      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038ae:	4b15      	ldr	r3, [pc, #84]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80038b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d039      	beq.n	800393a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d01c      	beq.n	8003908 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038ce:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0c      	ldr	r2, [pc, #48]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80038d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80038d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038da:	f7fe fcaf 	bl	800223c <HAL_GetTick>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80038e2:	f7fe fcab 	bl	800223c <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1b2      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <HAL_RCC_OscConfig+0x4f8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d0f0      	beq.n	80038e2 <HAL_RCC_OscConfig+0x4d6>
 8003900:	e01b      	b.n	800393a <HAL_RCC_OscConfig+0x52e>
 8003902:	bf00      	nop
 8003904:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003908:	4b9b      	ldr	r3, [pc, #620]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a9a      	ldr	r2, [pc, #616]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 800390e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003912:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003914:	f7fe fc92 	bl	800223c <HAL_GetTick>
 8003918:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800391c:	f7fe fc8e 	bl	800223c <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e195      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800392e:	4b92      	ldr	r3, [pc, #584]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 8081 	beq.w	8003a4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003948:	4b8c      	ldr	r3, [pc, #560]	; (8003b7c <HAL_RCC_OscConfig+0x770>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a8b      	ldr	r2, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x770>)
 800394e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003952:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003954:	f7fe fc72 	bl	800223c <HAL_GetTick>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800395c:	f7fe fc6e 	bl	800223c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e175      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800396e:	4b83      	ldr	r3, [pc, #524]	; (8003b7c <HAL_RCC_OscConfig+0x770>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d106      	bne.n	8003990 <HAL_RCC_OscConfig+0x584>
 8003982:	4b7d      	ldr	r3, [pc, #500]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a7c      	ldr	r2, [pc, #496]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	e02d      	b.n	80039ec <HAL_RCC_OscConfig+0x5e0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10c      	bne.n	80039b2 <HAL_RCC_OscConfig+0x5a6>
 8003998:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a76      	ldr	r2, [pc, #472]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
 80039a4:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a73      	ldr	r2, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039aa:	f023 0304 	bic.w	r3, r3, #4
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
 80039b0:	e01c      	b.n	80039ec <HAL_RCC_OscConfig+0x5e0>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2b05      	cmp	r3, #5
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c8>
 80039ba:	4b6f      	ldr	r3, [pc, #444]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	4a6e      	ldr	r2, [pc, #440]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039c0:	f043 0304 	orr.w	r3, r3, #4
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a6b      	ldr	r2, [pc, #428]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039cc:	f043 0301 	orr.w	r3, r3, #1
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0x5e0>
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d8:	4a67      	ldr	r2, [pc, #412]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039da:	f023 0301 	bic.w	r3, r3, #1
 80039de:	6713      	str	r3, [r2, #112]	; 0x70
 80039e0:	4b65      	ldr	r3, [pc, #404]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a64      	ldr	r2, [pc, #400]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 80039e6:	f023 0304 	bic.w	r3, r3, #4
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d015      	beq.n	8003a20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fe fc22 	bl	800223c <HAL_GetTick>
 80039f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe fc1e 	bl	800223c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e123      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a12:	4b59      	ldr	r3, [pc, #356]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0ee      	beq.n	80039fc <HAL_RCC_OscConfig+0x5f0>
 8003a1e:	e014      	b.n	8003a4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fe fc0c 	bl	800223c <HAL_GetTick>
 8003a24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fe fc08 	bl	800223c <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e10d      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a3e:	4b4e      	ldr	r3, [pc, #312]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1ee      	bne.n	8003a28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8102 	beq.w	8003c58 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a54:	4b48      	ldr	r3, [pc, #288]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a5c:	2b18      	cmp	r3, #24
 8003a5e:	f000 80bd 	beq.w	8003bdc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f040 809e 	bne.w	8003ba8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a41      	ldr	r2, [pc, #260]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a78:	f7fe fbe0 	bl	800223c <HAL_GetTick>
 8003a7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a7e:	e008      	b.n	8003a92 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a80:	f7fe fbdc 	bl	800223c <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e0e3      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f0      	bne.n	8003a80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa2:	4b37      	ldr	r3, [pc, #220]	; (8003b80 <HAL_RCC_OscConfig+0x774>)
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003aae:	0112      	lsls	r2, r2, #4
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	4931      	ldr	r1, [pc, #196]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	3b01      	subs	r3, #1
 8003abe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	025b      	lsls	r3, r3, #9
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	041b      	lsls	r3, r3, #16
 8003ad6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	061b      	lsls	r3, r3, #24
 8003ae4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ae8:	4923      	ldr	r1, [pc, #140]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <HAL_RCC_OscConfig+0x778>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b06:	00d2      	lsls	r2, r2, #3
 8003b08:	491b      	ldr	r1, [pc, #108]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f023 020c 	bic.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	4917      	ldr	r1, [pc, #92]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b20:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	f023 0202 	bic.w	r2, r3, #2
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	4912      	ldr	r1, [pc, #72]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b42:	4a0d      	ldr	r2, [pc, #52]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <HAL_RCC_OscConfig+0x76c>)
 8003b68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6e:	f7fe fb65 	bl	800223c <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b74:	e011      	b.n	8003b9a <HAL_RCC_OscConfig+0x78e>
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58024800 	.word	0x58024800
 8003b80:	fffffc0c 	.word	0xfffffc0c
 8003b84:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe fb58 	bl	800223c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e05f      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b9a:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_RCC_OscConfig+0x858>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x77c>
 8003ba6:	e057      	b.n	8003c58 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCC_OscConfig+0x858>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_RCC_OscConfig+0x858>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe fb42 	bl	800223c <HAL_GetTick>
 8003bb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe fb3e 	bl	800223c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e045      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bce:	4b25      	ldr	r3, [pc, #148]	; (8003c64 <HAL_RCC_OscConfig+0x858>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x7b0>
 8003bda:	e03d      	b.n	8003c58 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003bdc:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <HAL_RCC_OscConfig+0x858>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003be2:	4b20      	ldr	r3, [pc, #128]	; (8003c64 <HAL_RCC_OscConfig+0x858>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d031      	beq.n	8003c54 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f003 0203 	and.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d12a      	bne.n	8003c54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d122      	bne.n	8003c54 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c18:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d11a      	bne.n	8003c54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d111      	bne.n	8003c54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d108      	bne.n	8003c54 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	0e1b      	lsrs	r3, r3, #24
 8003c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3730      	adds	r7, #48	; 0x30
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	58024400 	.word	0x58024400

08003c68 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e19c      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b8a      	ldr	r3, [pc, #552]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b87      	ldr	r3, [pc, #540]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 020f 	bic.w	r2, r3, #15
 8003c92:	4985      	ldr	r1, [pc, #532]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b83      	ldr	r3, [pc, #524]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e184      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d010      	beq.n	8003cda <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	4b7b      	ldr	r3, [pc, #492]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d908      	bls.n	8003cda <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cc8:	4b78      	ldr	r3, [pc, #480]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	4975      	ldr	r1, [pc, #468]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d010      	beq.n	8003d08 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	4b70      	ldr	r3, [pc, #448]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d908      	bls.n	8003d08 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	496a      	ldr	r1, [pc, #424]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d010      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	4b64      	ldr	r3, [pc, #400]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d908      	bls.n	8003d36 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d24:	4b61      	ldr	r3, [pc, #388]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	495e      	ldr	r1, [pc, #376]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d010      	beq.n	8003d64 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69da      	ldr	r2, [r3, #28]
 8003d46:	4b59      	ldr	r3, [pc, #356]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d908      	bls.n	8003d64 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003d52:	4b56      	ldr	r3, [pc, #344]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4953      	ldr	r1, [pc, #332]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	4b4d      	ldr	r3, [pc, #308]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 030f 	and.w	r3, r3, #15
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d908      	bls.n	8003d92 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d80:	4b4a      	ldr	r3, [pc, #296]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f023 020f 	bic.w	r2, r3, #15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4947      	ldr	r1, [pc, #284]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d055      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003d9e:	4b43      	ldr	r3, [pc, #268]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	4940      	ldr	r1, [pc, #256]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003db8:	4b3c      	ldr	r3, [pc, #240]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d121      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0f6      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003dd0:	4b36      	ldr	r3, [pc, #216]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d115      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e0ea      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003de8:	4b30      	ldr	r3, [pc, #192]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0de      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003df8:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0d6      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e08:	4b28      	ldr	r3, [pc, #160]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	f023 0207 	bic.w	r2, r3, #7
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	4925      	ldr	r1, [pc, #148]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fa0f 	bl	800223c <HAL_GetTick>
 8003e1e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e22:	f7fe fa0b 	bl	800223c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e0be      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d1eb      	bne.n	8003e22 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d010      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d208      	bcs.n	8003e78 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e66:	4b11      	ldr	r3, [pc, #68]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	f023 020f 	bic.w	r2, r3, #15
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	490e      	ldr	r1, [pc, #56]	; (8003eac <HAL_RCC_ClockConfig+0x244>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d214      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b08      	ldr	r3, [pc, #32]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 020f 	bic.w	r2, r3, #15
 8003e8e:	4906      	ldr	r1, [pc, #24]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_RCC_ClockConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e086      	b.n	8003fb6 <HAL_RCC_ClockConfig+0x34e>
 8003ea8:	52002000 	.word	0x52002000
 8003eac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d010      	beq.n	8003ede <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d208      	bcs.n	8003ede <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003ecc:	4b3c      	ldr	r3, [pc, #240]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	4939      	ldr	r1, [pc, #228]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d208      	bcs.n	8003f0c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003efa:	4b31      	ldr	r3, [pc, #196]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	492e      	ldr	r1, [pc, #184]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d010      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699a      	ldr	r2, [r3, #24]
 8003f1c:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d208      	bcs.n	8003f3a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	4922      	ldr	r1, [pc, #136]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d010      	beq.n	8003f68 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d208      	bcs.n	8003f68 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	4917      	ldr	r1, [pc, #92]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f68:	f000 f834 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b14      	ldr	r3, [pc, #80]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	0a1b      	lsrs	r3, r3, #8
 8003f74:	f003 030f 	and.w	r3, r3, #15
 8003f78:	4912      	ldr	r1, [pc, #72]	; (8003fc4 <HAL_RCC_ClockConfig+0x35c>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	fa22 f303 	lsr.w	r3, r2, r3
 8003f84:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f86:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <HAL_RCC_ClockConfig+0x358>)
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	4a0d      	ldr	r2, [pc, #52]	; (8003fc4 <HAL_RCC_ClockConfig+0x35c>)
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9c:	4a0a      	ldr	r2, [pc, #40]	; (8003fc8 <HAL_RCC_ClockConfig+0x360>)
 8003f9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fa0:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <HAL_RCC_ClockConfig+0x364>)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003fa6:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <HAL_RCC_ClockConfig+0x368>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f8fc 	bl	80021a8 <HAL_InitTick>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	08011d9c 	.word	0x08011d9c
 8003fc8:	24000004 	.word	0x24000004
 8003fcc:	24000000 	.word	0x24000000
 8003fd0:	24000008 	.word	0x24000008

08003fd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fda:	4bb3      	ldr	r3, [pc, #716]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe2:	2b18      	cmp	r3, #24
 8003fe4:	f200 8155 	bhi.w	8004292 <HAL_RCC_GetSysClockFreq+0x2be>
 8003fe8:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fee:	bf00      	nop
 8003ff0:	08004055 	.word	0x08004055
 8003ff4:	08004293 	.word	0x08004293
 8003ff8:	08004293 	.word	0x08004293
 8003ffc:	08004293 	.word	0x08004293
 8004000:	08004293 	.word	0x08004293
 8004004:	08004293 	.word	0x08004293
 8004008:	08004293 	.word	0x08004293
 800400c:	08004293 	.word	0x08004293
 8004010:	0800407b 	.word	0x0800407b
 8004014:	08004293 	.word	0x08004293
 8004018:	08004293 	.word	0x08004293
 800401c:	08004293 	.word	0x08004293
 8004020:	08004293 	.word	0x08004293
 8004024:	08004293 	.word	0x08004293
 8004028:	08004293 	.word	0x08004293
 800402c:	08004293 	.word	0x08004293
 8004030:	08004081 	.word	0x08004081
 8004034:	08004293 	.word	0x08004293
 8004038:	08004293 	.word	0x08004293
 800403c:	08004293 	.word	0x08004293
 8004040:	08004293 	.word	0x08004293
 8004044:	08004293 	.word	0x08004293
 8004048:	08004293 	.word	0x08004293
 800404c:	08004293 	.word	0x08004293
 8004050:	08004087 	.word	0x08004087
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004054:	4b94      	ldr	r3, [pc, #592]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004060:	4b91      	ldr	r3, [pc, #580]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	4a90      	ldr	r2, [pc, #576]	; (80042ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004072:	e111      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004074:	4b8d      	ldr	r3, [pc, #564]	; (80042ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004076:	61bb      	str	r3, [r7, #24]
    break;
 8004078:	e10e      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800407a:	4b8d      	ldr	r3, [pc, #564]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800407c:	61bb      	str	r3, [r7, #24]
    break;
 800407e:	e10b      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004080:	4b8c      	ldr	r3, [pc, #560]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004082:	61bb      	str	r3, [r7, #24]
    break;
 8004084:	e108      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004086:	4b88      	ldr	r3, [pc, #544]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	f003 0303 	and.w	r3, r3, #3
 800408e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004090:	4b85      	ldr	r3, [pc, #532]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800409a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800409c:	4b82      	ldr	r3, [pc, #520]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	f003 0301 	and.w	r3, r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80040a6:	4b80      	ldr	r3, [pc, #512]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040aa:	08db      	lsrs	r3, r3, #3
 80040ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	ee07 3a90 	vmov	s15, r3
 80040ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80e1 	beq.w	800428c <HAL_RCC_GetSysClockFreq+0x2b8>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	f000 8083 	beq.w	80041d8 <HAL_RCC_GetSysClockFreq+0x204>
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	f200 80a1 	bhi.w	800421c <HAL_RCC_GetSysClockFreq+0x248>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x114>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d056      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x1c0>
 80040e6:	e099      	b.n	800421c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040e8:	4b6f      	ldr	r3, [pc, #444]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0320 	and.w	r3, r3, #32
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d02d      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040f4:	4b6c      	ldr	r3, [pc, #432]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	08db      	lsrs	r3, r3, #3
 80040fa:	f003 0303 	and.w	r3, r3, #3
 80040fe:	4a6b      	ldr	r2, [pc, #428]	; (80042ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	ee07 3a90 	vmov	s15, r3
 800410c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800411e:	4b62      	ldr	r3, [pc, #392]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004126:	ee07 3a90 	vmov	s15, r3
 800412a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800412e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004132:	eddf 5a61 	vldr	s11, [pc, #388]	; 80042b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800413e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800414e:	e087      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	ee07 3a90 	vmov	s15, r3
 8004156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80042bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800415e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004162:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004172:	ed97 6a02 	vldr	s12, [r7, #8]
 8004176:	eddf 5a50 	vldr	s11, [pc, #320]	; 80042b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800417a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800417e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004192:	e065      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80042c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80041a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041a6:	4b40      	ldr	r3, [pc, #256]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	ee07 3a90 	vmov	s15, r3
 80041b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80041ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80042b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041d6:	e043      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80042c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80041e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ea:	4b2f      	ldr	r3, [pc, #188]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80041fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80042b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800420e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421a:	e021      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eddf 6a26 	vldr	s13, [pc, #152]	; 80042c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004242:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80042b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800425e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004260:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004264:	0a5b      	lsrs	r3, r3, #9
 8004266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800426a:	3301      	adds	r3, #1
 800426c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	ee07 3a90 	vmov	s15, r3
 8004274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004278:	edd7 6a07 	vldr	s13, [r7, #28]
 800427c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004284:	ee17 3a90 	vmov	r3, s15
 8004288:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800428a:	e005      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61bb      	str	r3, [r7, #24]
    break;
 8004290:	e002      	b.n	8004298 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004292:	4b07      	ldr	r3, [pc, #28]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004294:	61bb      	str	r3, [r7, #24]
    break;
 8004296:	bf00      	nop
  }

  return sysclockfreq;
 8004298:	69bb      	ldr	r3, [r7, #24]
}
 800429a:	4618      	mov	r0, r3
 800429c:	3724      	adds	r7, #36	; 0x24
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	58024400 	.word	0x58024400
 80042ac:	03d09000 	.word	0x03d09000
 80042b0:	003d0900 	.word	0x003d0900
 80042b4:	017d7840 	.word	0x017d7840
 80042b8:	46000000 	.word	0x46000000
 80042bc:	4c742400 	.word	0x4c742400
 80042c0:	4a742400 	.word	0x4a742400
 80042c4:	4bbebc20 	.word	0x4bbebc20

080042c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80042ce:	f7ff fe81 	bl	8003fd4 <HAL_RCC_GetSysClockFreq>
 80042d2:	4602      	mov	r2, r0
 80042d4:	4b10      	ldr	r3, [pc, #64]	; (8004318 <HAL_RCC_GetHCLKFreq+0x50>)
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	490f      	ldr	r1, [pc, #60]	; (800431c <HAL_RCC_GetHCLKFreq+0x54>)
 80042e0:	5ccb      	ldrb	r3, [r1, r3]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80042ec:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCC_GetHCLKFreq+0x50>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	4a09      	ldr	r2, [pc, #36]	; (800431c <HAL_RCC_GetHCLKFreq+0x54>)
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	f003 031f 	and.w	r3, r3, #31
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004302:	4a07      	ldr	r2, [pc, #28]	; (8004320 <HAL_RCC_GetHCLKFreq+0x58>)
 8004304:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <HAL_RCC_GetHCLKFreq+0x58>)
 800430e:	681b      	ldr	r3, [r3, #0]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	58024400 	.word	0x58024400
 800431c:	08011d9c 	.word	0x08011d9c
 8004320:	24000004 	.word	0x24000004
 8004324:	24000000 	.word	0x24000000

08004328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800432c:	f7ff ffcc 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004334:	69db      	ldr	r3, [r3, #28]
 8004336:	091b      	lsrs	r3, r3, #4
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4904      	ldr	r1, [pc, #16]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	58024400 	.word	0x58024400
 8004350:	08011d9c 	.word	0x08011d9c

08004354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004358:	f7ff ffb6 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4904      	ldr	r1, [pc, #16]	; (800437c <HAL_RCC_GetPCLK2Freq+0x28>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	f003 031f 	and.w	r3, r3, #31
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	58024400 	.word	0x58024400
 800437c:	08011d9c 	.word	0x08011d9c

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004388:	2300      	movs	r3, #0
 800438a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800438c:	2300      	movs	r3, #0
 800438e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d03f      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043a4:	d02a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043aa:	d824      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043b0:	d018      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043b6:	d81e      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c0:	d007      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043c2:	e018      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c4:	4ba3      	ldr	r3, [pc, #652]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c8:	4aa2      	ldr	r2, [pc, #648]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80043ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043d0:	e015      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	2102      	movs	r1, #2
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 fff9 	bl	80063d0 <RCCEx_PLL2_Config>
 80043de:	4603      	mov	r3, r0
 80043e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043e2:	e00c      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3324      	adds	r3, #36	; 0x24
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f002 f8a2 	bl	8006534 <RCCEx_PLL3_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80043f4:	e003      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	75fb      	strb	r3, [r7, #23]
      break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80043fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d109      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004404:	4b93      	ldr	r3, [pc, #588]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004410:	4990      	ldr	r1, [pc, #576]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004412:	4313      	orrs	r3, r2
 8004414:	650b      	str	r3, [r1, #80]	; 0x50
 8004416:	e001      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03d      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	2b04      	cmp	r3, #4
 800442e:	d826      	bhi.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004430:	a201      	add	r2, pc, #4	; (adr r2, 8004438 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004436:	bf00      	nop
 8004438:	0800444d 	.word	0x0800444d
 800443c:	0800445b 	.word	0x0800445b
 8004440:	0800446d 	.word	0x0800446d
 8004444:	08004485 	.word	0x08004485
 8004448:	08004485 	.word	0x08004485
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800444c:	4b81      	ldr	r3, [pc, #516]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	4a80      	ldr	r2, [pc, #512]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004458:	e015      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	3304      	adds	r3, #4
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f001 ffb5 	bl	80063d0 <RCCEx_PLL2_Config>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800446a:	e00c      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3324      	adds	r3, #36	; 0x24
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f002 f85e 	bl	8006534 <RCCEx_PLL3_Config>
 8004478:	4603      	mov	r3, r0
 800447a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800447c:	e003      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
      break;
 8004482:	e000      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004484:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d109      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800448c:	4b71      	ldr	r3, [pc, #452]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800448e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004490:	f023 0207 	bic.w	r2, r3, #7
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	496e      	ldr	r1, [pc, #440]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800449a:	4313      	orrs	r3, r2
 800449c:	650b      	str	r3, [r1, #80]	; 0x50
 800449e:	e001      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	7dfb      	ldrb	r3, [r7, #23]
 80044a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d042      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b8:	d02b      	beq.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80044ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044be:	d825      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80044c0:	2bc0      	cmp	r3, #192	; 0xc0
 80044c2:	d028      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044c4:	2bc0      	cmp	r3, #192	; 0xc0
 80044c6:	d821      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80044c8:	2b80      	cmp	r3, #128	; 0x80
 80044ca:	d016      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d81d      	bhi.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d007      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80044d8:	e018      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044da:	4b5e      	ldr	r3, [pc, #376]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044de:	4a5d      	ldr	r2, [pc, #372]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80044e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044e6:	e017      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 ff6e 	bl	80063d0 <RCCEx_PLL2_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80044f8:	e00e      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	3324      	adds	r3, #36	; 0x24
 80044fe:	2100      	movs	r1, #0
 8004500:	4618      	mov	r0, r3
 8004502:	f002 f817 	bl	8006534 <RCCEx_PLL3_Config>
 8004506:	4603      	mov	r3, r0
 8004508:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800450a:	e005      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
      break;
 8004510:	e002      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004512:	bf00      	nop
 8004514:	e000      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004518:	7dfb      	ldrb	r3, [r7, #23]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800451e:	4b4d      	ldr	r3, [pc, #308]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004522:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452a:	494a      	ldr	r1, [pc, #296]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	650b      	str	r3, [r1, #80]	; 0x50
 8004530:	e001      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	7dfb      	ldrb	r3, [r7, #23]
 8004534:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453e:	2b00      	cmp	r3, #0
 8004540:	d049      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800454c:	d030      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800454e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004552:	d82a      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004554:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004558:	d02c      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800455a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800455e:	d824      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004564:	d018      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456a:	d81e      	bhi.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004570:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004574:	d007      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004576:	e018      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004578:	4b36      	ldr	r3, [pc, #216]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4a35      	ldr	r2, [pc, #212]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800457e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004584:	e017      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3304      	adds	r3, #4
 800458a:	2100      	movs	r1, #0
 800458c:	4618      	mov	r0, r3
 800458e:	f001 ff1f 	bl	80063d0 <RCCEx_PLL2_Config>
 8004592:	4603      	mov	r3, r0
 8004594:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004596:	e00e      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3324      	adds	r3, #36	; 0x24
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 ffc8 	bl	8006534 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	75fb      	strb	r3, [r7, #23]
      break;
 80045ae:	e002      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80045b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045ca:	4922      	ldr	r1, [pc, #136]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	658b      	str	r3, [r1, #88]	; 0x58
 80045d0:	e001      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
 80045d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d04b      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045ec:	d030      	beq.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80045ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f2:	d82a      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80045f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045f8:	d02e      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80045fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045fe:	d824      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004604:	d018      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800460a:	d81e      	bhi.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004610:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004614:	d007      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004616:	e018      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004618:	4b0e      	ldr	r3, [pc, #56]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a0d      	ldr	r2, [pc, #52]	; (8004654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800461e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004622:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004624:	e019      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3304      	adds	r3, #4
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f001 fecf 	bl	80063d0 <RCCEx_PLL2_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004636:	e010      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3324      	adds	r3, #36	; 0x24
 800463c:	2100      	movs	r1, #0
 800463e:	4618      	mov	r0, r3
 8004640:	f001 ff78 	bl	8006534 <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004648:	e007      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	75fb      	strb	r3, [r7, #23]
      break;
 800464e:	e004      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004650:	bf00      	nop
 8004652:	e002      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004654:	58024400 	.word	0x58024400
      break;
 8004658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004660:	4b99      	ldr	r3, [pc, #612]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800466e:	4996      	ldr	r1, [pc, #600]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004670:	4313      	orrs	r3, r2
 8004672:	658b      	str	r3, [r1, #88]	; 0x58
 8004674:	e001      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004676:	7dfb      	ldrb	r3, [r7, #23]
 8004678:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d032      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468a:	2b30      	cmp	r3, #48	; 0x30
 800468c:	d01c      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800468e:	2b30      	cmp	r3, #48	; 0x30
 8004690:	d817      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004692:	2b20      	cmp	r3, #32
 8004694:	d00c      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004696:	2b20      	cmp	r3, #32
 8004698:	d813      	bhi.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d016      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d10f      	bne.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046a2:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	4a88      	ldr	r2, [pc, #544]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80046ae:	e00e      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	2102      	movs	r1, #2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f001 fe8a 	bl	80063d0 <RCCEx_PLL2_Config>
 80046bc:	4603      	mov	r3, r0
 80046be:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80046c0:	e005      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
      break;
 80046c6:	e002      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80046cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ce:	7dfb      	ldrb	r3, [r7, #23]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d109      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80046d4:	4b7c      	ldr	r3, [pc, #496]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046e0:	4979      	ldr	r1, [pc, #484]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80046e6:	e001      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	7dfb      	ldrb	r3, [r7, #23]
 80046ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d047      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004700:	d030      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004706:	d82a      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004708:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800470c:	d02c      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800470e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004712:	d824      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004718:	d018      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800471a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800471e:	d81e      	bhi.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8004724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004728:	d007      	beq.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800472a:	e018      	b.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472c:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800472e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004730:	4a65      	ldr	r2, [pc, #404]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004736:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004738:	e017      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	3304      	adds	r3, #4
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f001 fe45 	bl	80063d0 <RCCEx_PLL2_Config>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800474a:	e00e      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3324      	adds	r3, #36	; 0x24
 8004750:	2100      	movs	r1, #0
 8004752:	4618      	mov	r0, r3
 8004754:	f001 feee 	bl	8006534 <RCCEx_PLL3_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800475c:	e005      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	75fb      	strb	r3, [r7, #23]
      break;
 8004762:	e002      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004764:	bf00      	nop
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7dfb      	ldrb	r3, [r7, #23]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004770:	4b55      	ldr	r3, [pc, #340]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004774:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	4952      	ldr	r1, [pc, #328]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800477e:	4313      	orrs	r3, r2
 8004780:	650b      	str	r3, [r1, #80]	; 0x50
 8004782:	e001      	b.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004784:	7dfb      	ldrb	r3, [r7, #23]
 8004786:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d049      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800479c:	d02e      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800479e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a2:	d828      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047a8:	d02a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80047aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047ae:	d822      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047b4:	d026      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80047b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80047ba:	d81c      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c0:	d010      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d816      	bhi.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01d      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d111      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3304      	adds	r3, #4
 80047d6:	2101      	movs	r1, #1
 80047d8:	4618      	mov	r0, r3
 80047da:	f001 fdf9 	bl	80063d0 <RCCEx_PLL2_Config>
 80047de:	4603      	mov	r3, r0
 80047e0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80047e2:	e012      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3324      	adds	r3, #36	; 0x24
 80047e8:	2101      	movs	r1, #1
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 fea2 	bl	8006534 <RCCEx_PLL3_Config>
 80047f0:	4603      	mov	r3, r0
 80047f2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80047f4:	e009      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	75fb      	strb	r3, [r7, #23]
      break;
 80047fa:	e006      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80047fc:	bf00      	nop
 80047fe:	e004      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004800:	bf00      	nop
 8004802:	e002      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004804:	bf00      	nop
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8004808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004810:	4b2d      	ldr	r3, [pc, #180]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004814:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481c:	492a      	ldr	r1, [pc, #168]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800481e:	4313      	orrs	r3, r2
 8004820:	650b      	str	r3, [r1, #80]	; 0x50
 8004822:	e001      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d04d      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800483a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800483e:	d02e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8004840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004844:	d828      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d02a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d822      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8004852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004856:	d026      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8004858:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800485c:	d81c      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004862:	d010      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8004864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004868:	d816      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800486e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004872:	d111      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2101      	movs	r1, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f001 fda8 	bl	80063d0 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004884:	e012      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	; 0x24
 800488a:	2101      	movs	r1, #1
 800488c:	4618      	mov	r0, r3
 800488e:	f001 fe51 	bl	8006534 <RCCEx_PLL3_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004896:	e009      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
      break;
 800489c:	e006      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800489e:	bf00      	nop
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80048aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10c      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80048b2:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048c0:	4901      	ldr	r1, [pc, #4]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	658b      	str	r3, [r1, #88]	; 0x58
 80048c6:	e003      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80048c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048cc:	7dfb      	ldrb	r3, [r7, #23]
 80048ce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d02f      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e4:	d00e      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80048e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048ea:	d814      	bhi.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d015      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80048f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f4:	d10f      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f6:	4baf      	ldr	r3, [pc, #700]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	4aae      	ldr	r2, [pc, #696]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004900:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004902:	e00c      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3304      	adds	r3, #4
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f001 fd60 	bl	80063d0 <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004914:	e003      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	75fb      	strb	r3, [r7, #23]
      break;
 800491a:	e000      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800491c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800491e:	7dfb      	ldrb	r3, [r7, #23]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004924:	4ba3      	ldr	r3, [pc, #652]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004928:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004930:	49a0      	ldr	r1, [pc, #640]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004932:	4313      	orrs	r3, r2
 8004934:	650b      	str	r3, [r1, #80]	; 0x50
 8004936:	e001      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d032      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494c:	2b03      	cmp	r3, #3
 800494e:	d81b      	bhi.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800498f 	.word	0x0800498f
 800495c:	08004969 	.word	0x08004969
 8004960:	08004977 	.word	0x08004977
 8004964:	0800498f 	.word	0x0800498f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004968:	4b92      	ldr	r3, [pc, #584]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800496a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496c:	4a91      	ldr	r2, [pc, #580]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800496e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004974:	e00c      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2102      	movs	r1, #2
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fd27 	bl	80063d0 <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004986:	e003      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	75fb      	strb	r3, [r7, #23]
      break;
 800498c:	e000      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800498e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004990:	7dfb      	ldrb	r3, [r7, #23]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d109      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004996:	4b87      	ldr	r3, [pc, #540]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	f023 0203 	bic.w	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4984      	ldr	r1, [pc, #528]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80049a8:	e001      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049aa:	7dfb      	ldrb	r3, [r7, #23]
 80049ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 8086 	beq.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049bc:	4b7e      	ldr	r3, [pc, #504]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a7d      	ldr	r2, [pc, #500]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80049c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c8:	f7fd fc38 	bl	800223c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ce:	e009      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d0:	f7fd fc34 	bl	800223c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d902      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	75fb      	strb	r3, [r7, #23]
        break;
 80049e2:	e005      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e4:	4b74      	ldr	r3, [pc, #464]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0ef      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d166      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80049f6:	4b6f      	ldr	r3, [pc, #444]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80049f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a00:	4053      	eors	r3, r2
 8004a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d013      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a14:	4b67      	ldr	r3, [pc, #412]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a18:	4a66      	ldr	r2, [pc, #408]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a20:	4b64      	ldr	r3, [pc, #400]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a24:	4a63      	ldr	r2, [pc, #396]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a2c:	4a61      	ldr	r2, [pc, #388]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3c:	d115      	bne.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fbfd 	bl	800223c <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a44:	e00b      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a46:	f7fd fbf9 	bl	800223c <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d902      	bls.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	75fb      	strb	r3, [r7, #23]
            break;
 8004a5c:	e005      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a5e:	4b55      	ldr	r3, [pc, #340]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0ed      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8004a6a:	7dfb      	ldrb	r3, [r7, #23]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d126      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a7e:	d10d      	bne.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8004a80:	4b4c      	ldr	r3, [pc, #304]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004a8e:	0919      	lsrs	r1, r3, #4
 8004a90:	4b4a      	ldr	r3, [pc, #296]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8004a92:	400b      	ands	r3, r1
 8004a94:	4947      	ldr	r1, [pc, #284]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
 8004a9a:	e005      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8004a9c:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	4a44      	ldr	r2, [pc, #272]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004aa6:	6113      	str	r3, [r2, #16]
 8004aa8:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004aaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ab6:	493f      	ldr	r1, [pc, #252]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	670b      	str	r3, [r1, #112]	; 0x70
 8004abc:	e004      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
 8004ac0:	75bb      	strb	r3, [r7, #22]
 8004ac2:	e001      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac4:	7dfb      	ldrb	r3, [r7, #23]
 8004ac6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8085 	beq.w	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ada:	2b28      	cmp	r3, #40	; 0x28
 8004adc:	d866      	bhi.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004ade:	a201      	add	r2, pc, #4	; (adr r2, 8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8004ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae4:	08004bc1 	.word	0x08004bc1
 8004ae8:	08004bad 	.word	0x08004bad
 8004aec:	08004bad 	.word	0x08004bad
 8004af0:	08004bad 	.word	0x08004bad
 8004af4:	08004bad 	.word	0x08004bad
 8004af8:	08004bad 	.word	0x08004bad
 8004afc:	08004bad 	.word	0x08004bad
 8004b00:	08004bad 	.word	0x08004bad
 8004b04:	08004b89 	.word	0x08004b89
 8004b08:	08004bad 	.word	0x08004bad
 8004b0c:	08004bad 	.word	0x08004bad
 8004b10:	08004bad 	.word	0x08004bad
 8004b14:	08004bad 	.word	0x08004bad
 8004b18:	08004bad 	.word	0x08004bad
 8004b1c:	08004bad 	.word	0x08004bad
 8004b20:	08004bad 	.word	0x08004bad
 8004b24:	08004b9b 	.word	0x08004b9b
 8004b28:	08004bad 	.word	0x08004bad
 8004b2c:	08004bad 	.word	0x08004bad
 8004b30:	08004bad 	.word	0x08004bad
 8004b34:	08004bad 	.word	0x08004bad
 8004b38:	08004bad 	.word	0x08004bad
 8004b3c:	08004bad 	.word	0x08004bad
 8004b40:	08004bad 	.word	0x08004bad
 8004b44:	08004bc1 	.word	0x08004bc1
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004bad 	.word	0x08004bad
 8004b50:	08004bad 	.word	0x08004bad
 8004b54:	08004bad 	.word	0x08004bad
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004bad 	.word	0x08004bad
 8004b60:	08004bad 	.word	0x08004bad
 8004b64:	08004bc1 	.word	0x08004bc1
 8004b68:	08004bad 	.word	0x08004bad
 8004b6c:	08004bad 	.word	0x08004bad
 8004b70:	08004bad 	.word	0x08004bad
 8004b74:	08004bad 	.word	0x08004bad
 8004b78:	08004bad 	.word	0x08004bad
 8004b7c:	08004bad 	.word	0x08004bad
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bc1 	.word	0x08004bc1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fc1e 	bl	80063d0 <RCCEx_PLL2_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004b98:	e013      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3324      	adds	r3, #36	; 0x24
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fcc7 	bl	8006534 <RCCEx_PLL3_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004baa:	e00a      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb0:	e007      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004bb2:	bf00      	nop
 8004bb4:	58024400 	.word	0x58024400
 8004bb8:	58024800 	.word	0x58024800
 8004bbc:	00ffffcf 	.word	0x00ffffcf
      break;
 8004bc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004bc8:	4b96      	ldr	r3, [pc, #600]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd4:	4993      	ldr	r1, [pc, #588]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	654b      	str	r3, [r1, #84]	; 0x54
 8004bda:	e001      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bdc:	7dfb      	ldrb	r3, [r7, #23]
 8004bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d038      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d821      	bhi.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c3f 	.word	0x08004c3f
 8004c00:	08004c15 	.word	0x08004c15
 8004c04:	08004c27 	.word	0x08004c27
 8004c08:	08004c3f 	.word	0x08004c3f
 8004c0c:	08004c3f 	.word	0x08004c3f
 8004c10:	08004c3f 	.word	0x08004c3f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3304      	adds	r3, #4
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 fbd8 	bl	80063d0 <RCCEx_PLL2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c24:	e00c      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3324      	adds	r3, #36	; 0x24
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fc81 	bl	8006534 <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004c36:	e003      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004c3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c40:	7dfb      	ldrb	r3, [r7, #23]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d109      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c46:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	f023 0207 	bic.w	r2, r3, #7
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c52:	4974      	ldr	r1, [pc, #464]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	654b      	str	r3, [r1, #84]	; 0x54
 8004c58:	e001      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	7dfb      	ldrb	r3, [r7, #23]
 8004c5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d03a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	2b05      	cmp	r3, #5
 8004c72:	d821      	bhi.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8004c74:	a201      	add	r2, pc, #4	; (adr r2, 8004c7c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004cbf 	.word	0x08004cbf
 8004c80:	08004c95 	.word	0x08004c95
 8004c84:	08004ca7 	.word	0x08004ca7
 8004c88:	08004cbf 	.word	0x08004cbf
 8004c8c:	08004cbf 	.word	0x08004cbf
 8004c90:	08004cbf 	.word	0x08004cbf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3304      	adds	r3, #4
 8004c98:	2101      	movs	r1, #1
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f001 fb98 	bl	80063d0 <RCCEx_PLL2_Config>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004ca4:	e00c      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3324      	adds	r3, #36	; 0x24
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 fc41 	bl	8006534 <RCCEx_PLL3_Config>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004cb6:	e003      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
      break;
 8004cbc:	e000      	b.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004cbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cc0:	7dfb      	ldrb	r3, [r7, #23]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cc6:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cca:	f023 0207 	bic.w	r2, r3, #7
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	4953      	ldr	r1, [pc, #332]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	658b      	str	r3, [r1, #88]	; 0x58
 8004cda:	e001      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cdc:	7dfb      	ldrb	r3, [r7, #23]
 8004cde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d04b      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cf6:	d02e      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8004cf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cfc:	d828      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d02a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d08:	d822      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d0e:	d026      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004d10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004d14:	d81c      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d1a:	d010      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d20:	d816      	bhi.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d01d      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8004d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d2a:	d111      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fb4c 	bl	80063d0 <RCCEx_PLL2_Config>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d3c:	e012      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	3324      	adds	r3, #36	; 0x24
 8004d42:	2102      	movs	r1, #2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 fbf5 	bl	8006534 <RCCEx_PLL3_Config>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004d4e:	e009      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	75fb      	strb	r3, [r7, #23]
      break;
 8004d54:	e006      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d56:	bf00      	nop
 8004d58:	e004      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d78:	492a      	ldr	r1, [pc, #168]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	654b      	str	r3, [r1, #84]	; 0x54
 8004d7e:	e001      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d80:	7dfb      	ldrb	r3, [r7, #23]
 8004d82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d04d      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d96:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004d9a:	d02e      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004d9c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004da0:	d828      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da6:	d02a      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dac:	d822      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db2:	d026      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004db4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004db8:	d81c      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbe:	d010      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dc4:	d816      	bhi.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d01d      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dce:	d111      	bne.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 fafa 	bl	80063d0 <RCCEx_PLL2_Config>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004de0:	e012      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3324      	adds	r3, #36	; 0x24
 8004de6:	2102      	movs	r1, #2
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 fba3 	bl	8006534 <RCCEx_PLL3_Config>
 8004dee:	4603      	mov	r3, r0
 8004df0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004df2:	e009      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	75fb      	strb	r3, [r7, #23]
      break;
 8004df8:	e006      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e004      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e08:	7dfb      	ldrb	r3, [r7, #23]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10c      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e12:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e1c:	4901      	ldr	r1, [pc, #4]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	658b      	str	r3, [r1, #88]	; 0x58
 8004e22:	e003      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004e24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d04b      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e42:	d02e      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004e44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004e48:	d828      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4e:	d02a      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	d822      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e5a:	d026      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004e5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004e60:	d81c      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e66:	d010      	beq.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6c:	d816      	bhi.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01d      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8004e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e76:	d111      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 faa6 	bl	80063d0 <RCCEx_PLL2_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e88:	e012      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3324      	adds	r3, #36	; 0x24
 8004e8e:	2102      	movs	r1, #2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f001 fb4f 	bl	8006534 <RCCEx_PLL3_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004e9a:	e009      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea0:	e006      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004ea2:	bf00      	nop
 8004ea4:	e004      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004ea6:	bf00      	nop
 8004ea8:	e002      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004eaa:	bf00      	nop
 8004eac:	e000      	b.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004eae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb0:	7dfb      	ldrb	r3, [r7, #23]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d10a      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004eb6:	4b9d      	ldr	r3, [pc, #628]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ec4:	4999      	ldr	r1, [pc, #612]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	658b      	str	r3, [r1, #88]	; 0x58
 8004eca:	e001      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01a      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee6:	d10a      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3324      	adds	r3, #36	; 0x24
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fb20 	bl	8006534 <RCCEx_PLL3_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004efe:	4b8b      	ldr	r3, [pc, #556]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f0c:	4987      	ldr	r1, [pc, #540]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d01a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f28:	d10a      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2102      	movs	r1, #2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f001 faff 	bl	8006534 <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f40:	4b7a      	ldr	r3, [pc, #488]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	4977      	ldr	r1, [pc, #476]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d034      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f70:	d817      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f7a:	d009      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004f7c:	e011      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f001 fa23 	bl	80063d0 <RCCEx_PLL2_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004f8e:	e00c      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3324      	adds	r3, #36	; 0x24
 8004f94:	2102      	movs	r1, #2
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 facc 	bl	8006534 <RCCEx_PLL3_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004fa0:	e003      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa6:	e000      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004fa8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004faa:	7dfb      	ldrb	r3, [r7, #23]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb0:	4b5e      	ldr	r3, [pc, #376]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004fbe:	495b      	ldr	r1, [pc, #364]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	658b      	str	r3, [r1, #88]	; 0x58
 8004fc4:	e001      	b.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d033      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fe0:	d01c      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004fe2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004fe6:	d816      	bhi.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fec:	d003      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004fee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ff2:	d007      	beq.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004ff4:	e00f      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ff6:	4b4d      	ldr	r3, [pc, #308]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffa:	4a4c      	ldr	r2, [pc, #304]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004ffc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005000:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005002:	e00c      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3324      	adds	r3, #36	; 0x24
 8005008:	2101      	movs	r1, #1
 800500a:	4618      	mov	r0, r3
 800500c:	f001 fa92 	bl	8006534 <RCCEx_PLL3_Config>
 8005010:	4603      	mov	r3, r0
 8005012:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005014:	e003      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	75fb      	strb	r3, [r7, #23]
      break;
 800501a:	e000      	b.n	800501e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800501c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800501e:	7dfb      	ldrb	r3, [r7, #23]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005024:	4b41      	ldr	r3, [pc, #260]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005028:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005032:	493e      	ldr	r1, [pc, #248]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005034:	4313      	orrs	r3, r2
 8005036:	654b      	str	r3, [r1, #84]	; 0x54
 8005038:	e001      	b.n	800503e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800503a:	7dfb      	ldrb	r3, [r7, #23]
 800503c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d029      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d007      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005058:	e00f      	b.n	800507a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505a:	4b34      	ldr	r3, [pc, #208]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800505c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505e:	4a33      	ldr	r2, [pc, #204]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005064:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005066:	e00b      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	3304      	adds	r3, #4
 800506c:	2102      	movs	r1, #2
 800506e:	4618      	mov	r0, r3
 8005070:	f001 f9ae 	bl	80063d0 <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005078:	e002      	b.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005080:	7dfb      	ldrb	r3, [r7, #23]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005092:	4926      	ldr	r1, [pc, #152]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005094:	4313      	orrs	r3, r2
 8005096:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005098:	e001      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3324      	adds	r3, #36	; 0x24
 80050ae:	2102      	movs	r1, #2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f001 fa3f 	bl	8006534 <RCCEx_PLL3_Config>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d033      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d4:	d017      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80050d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050da:	d811      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e0:	d013      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80050e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e6:	d80b      	bhi.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80050ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f0:	d106      	bne.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f6:	4a0d      	ldr	r2, [pc, #52]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80050f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80050fe:	e007      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	75fb      	strb	r3, [r7, #23]
      break;
 8005104:	e004      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005106:	bf00      	nop
 8005108:	e002      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800510a:	bf00      	nop
 800510c:	e000      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800510e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10c      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005116:	4b05      	ldr	r3, [pc, #20]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	4902      	ldr	r1, [pc, #8]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005124:	4313      	orrs	r3, r2
 8005126:	654b      	str	r3, [r1, #84]	; 0x54
 8005128:	e004      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800512a:	bf00      	nop
 800512c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	7dfb      	ldrb	r3, [r7, #23]
 8005132:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005140:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	492e      	ldr	r1, [pc, #184]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800514e:	4313      	orrs	r3, r2
 8005150:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d009      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800515e:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800516c:	4926      	ldr	r1, [pc, #152]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518a:	491f      	ldr	r1, [pc, #124]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800518c:	4313      	orrs	r3, r2
 800518e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00d      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800519c:	4b1a      	ldr	r3, [pc, #104]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80051a6:	6113      	str	r3, [r2, #16]
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051b2:	4915      	ldr	r1, [pc, #84]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da08      	bge.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80051c0:	4b11      	ldr	r3, [pc, #68]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	490e      	ldr	r1, [pc, #56]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d009      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ec:	4906      	ldr	r1, [pc, #24]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80051f2:	7dbb      	ldrb	r3, [r7, #22]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	e000      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3718      	adds	r7, #24
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	58024400 	.word	0x58024400

0800520c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b090      	sub	sp, #64	; 0x40
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	f040 8095 	bne.w	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800521e:	4b97      	ldr	r3, [pc, #604]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	2b04      	cmp	r3, #4
 800522c:	f200 8088 	bhi.w	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8005230:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8005232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005236:	bf00      	nop
 8005238:	0800524d 	.word	0x0800524d
 800523c:	08005275 	.word	0x08005275
 8005240:	0800529d 	.word	0x0800529d
 8005244:	08005339 	.word	0x08005339
 8005248:	080052c5 	.word	0x080052c5
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800524c:	4b8b      	ldr	r3, [pc, #556]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005254:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005258:	d108      	bne.n	800526c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800525a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800525e:	4618      	mov	r0, r3
 8005260:	f000 ff64 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005268:	f000 bc94 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005270:	f000 bc90 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005274:	4b81      	ldr	r3, [pc, #516]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005280:	d108      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005282:	f107 0318 	add.w	r3, r7, #24
 8005286:	4618      	mov	r0, r3
 8005288:	f000 fca8 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005290:	f000 bc80 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005298:	f000 bc7c 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800529c:	4b77      	ldr	r3, [pc, #476]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052a8:	d108      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052aa:	f107 030c 	add.w	r3, r7, #12
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fde8 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80052b8:	f000 bc6c 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80052c0:	f000 bc68 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80052c4:	4b6d      	ldr	r3, [pc, #436]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052ce:	4b6b      	ldr	r3, [pc, #428]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d10c      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052e0:	4b66      	ldr	r3, [pc, #408]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	08db      	lsrs	r3, r3, #3
 80052e6:	f003 0303 	and.w	r3, r3, #3
 80052ea:	4a65      	ldr	r2, [pc, #404]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f2:	e01f      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052f4:	4b61      	ldr	r3, [pc, #388]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005300:	d106      	bne.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8005302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005304:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005308:	d102      	bne.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800530a:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530e:	e011      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005310:	4b5a      	ldr	r3, [pc, #360]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800531c:	d106      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800531e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005324:	d102      	bne.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005326:	4b58      	ldr	r3, [pc, #352]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800532a:	e003      	b.n	8005334 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005330:	f000 bc30 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005334:	f000 bc2e 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005338:	4b54      	ldr	r3, [pc, #336]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800533a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800533c:	f000 bc2a 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005340:	2300      	movs	r3, #0
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005344:	f000 bc26 	b.w	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800534e:	f040 809f 	bne.w	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8005352:	4b4a      	ldr	r3, [pc, #296]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005356:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800535a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005362:	d04d      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536a:	f200 8084 	bhi.w	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	2bc0      	cmp	r3, #192	; 0xc0
 8005372:	d07d      	beq.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2bc0      	cmp	r3, #192	; 0xc0
 8005378:	d87d      	bhi.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800537a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d02d      	beq.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8005380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d877      	bhi.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8005386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005388:	2b00      	cmp	r3, #0
 800538a:	d003      	beq.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d012      	beq.n	80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8005392:	e070      	b.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005394:	4b39      	ldr	r3, [pc, #228]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053a0:	d107      	bne.n	80053b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fec0 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053b0:	e3f0      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053b2:	2300      	movs	r3, #0
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053b6:	e3ed      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053b8:	4b30      	ldr	r3, [pc, #192]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053c4:	d107      	bne.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053c6:	f107 0318 	add.w	r3, r7, #24
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 fc06 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053d4:	e3de      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053da:	e3db      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053dc:	4b27      	ldr	r3, [pc, #156]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e8:	d107      	bne.n	80053fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053ea:	f107 030c 	add.w	r3, r7, #12
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fd48 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80053f8:	e3cc      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80053fe:	e3c9      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005400:	4b1e      	ldr	r3, [pc, #120]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005408:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800540a:	4b1c      	ldr	r3, [pc, #112]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b04      	cmp	r3, #4
 8005414:	d10c      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005418:	2b00      	cmp	r3, #0
 800541a:	d109      	bne.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800541c:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	08db      	lsrs	r3, r3, #3
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
 800542c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800542e:	e01e      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800543c:	d106      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800543e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005444:	d102      	bne.n	800544c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005446:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544a:	e010      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005458:	d106      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800545a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005460:	d102      	bne.n	8005468 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8005464:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005466:	e002      	b.n	800546e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800546c:	e392      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800546e:	e391      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005474:	e38e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800547a:	e38b      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800547c:	58024400 	.word	0x58024400
 8005480:	03d09000 	.word	0x03d09000
 8005484:	003d0900 	.word	0x003d0900
 8005488:	017d7840 	.word	0x017d7840
 800548c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005496:	f040 809c 	bne.w	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800549a:	4b9d      	ldr	r3, [pc, #628]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800549c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80054a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054aa:	d054      	beq.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054b2:	f200 808b 	bhi.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054bc:	f000 8083 	beq.w	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054c6:	f200 8081 	bhi.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d02f      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d8:	d878      	bhi.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80054da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054e6:	d012      	beq.n	800550e <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80054e8:	e070      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054ea:	4b89      	ldr	r3, [pc, #548]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054f6:	d107      	bne.n	8005508 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 fe15 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005506:	e345      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005508:	2300      	movs	r3, #0
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800550c:	e342      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800550e:	4b80      	ldr	r3, [pc, #512]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005516:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800551a:	d107      	bne.n	800552c <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800551c:	f107 0318 	add.w	r3, r7, #24
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fb5b 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800552a:	e333      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800552c:	2300      	movs	r3, #0
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005530:	e330      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005532:	4b77      	ldr	r3, [pc, #476]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800553a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800553e:	d107      	bne.n	8005550 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fc9d 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800554e:	e321      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005554:	e31e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8005556:	4b6e      	ldr	r3, [pc, #440]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800555a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800555e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005560:	4b6b      	ldr	r3, [pc, #428]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b04      	cmp	r3, #4
 800556a:	d10c      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005572:	4b67      	ldr	r3, [pc, #412]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	08db      	lsrs	r3, r3, #3
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	4a65      	ldr	r2, [pc, #404]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800557e:	fa22 f303 	lsr.w	r3, r2, r3
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005584:	e01e      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005586:	4b62      	ldr	r3, [pc, #392]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005592:	d106      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8005594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800559a:	d102      	bne.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800559c:	4b5e      	ldr	r3, [pc, #376]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800559e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a0:	e010      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055a2:	4b5b      	ldr	r3, [pc, #364]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055ae:	d106      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80055b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055b6:	d102      	bne.n	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80055b8:	4b58      	ldr	r3, [pc, #352]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80055ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80055c2:	e2e7      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80055c4:	e2e6      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80055c6:	4b56      	ldr	r3, [pc, #344]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055ca:	e2e3      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80055d0:	e2e0      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d8:	f040 80a7 	bne.w	800572a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80055dc:	4b4c      	ldr	r3, [pc, #304]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80055de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055e0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80055e4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ec:	d055      	beq.n	800569a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f4:	f200 8096 	bhi.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055fe:	f000 8084 	beq.w	800570a <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005608:	f200 808c 	bhi.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800560c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005612:	d030      	beq.n	8005676 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800561a:	f200 8083 	bhi.w	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800562a:	d012      	beq.n	8005652 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800562c:	e07a      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800562e:	4b38      	ldr	r3, [pc, #224]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005636:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800563a:	d107      	bne.n	800564c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800563c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fd73 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800564a:	e2a3      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005650:	e2a0      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005652:	4b2f      	ldr	r3, [pc, #188]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800565a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565e:	d107      	bne.n	8005670 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005660:	f107 0318 	add.w	r3, r7, #24
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fab9 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800566e:	e291      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005674:	e28e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005676:	4b26      	ldr	r3, [pc, #152]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005682:	d107      	bne.n	8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005684:	f107 030c 	add.w	r3, r7, #12
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fbfb 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005692:	e27f      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005694:	2300      	movs	r3, #0
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005698:	e27c      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800569a:	4b1d      	ldr	r3, [pc, #116]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800569c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056a4:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0304 	and.w	r3, r3, #4
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d10c      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80056b6:	4b16      	ldr	r3, [pc, #88]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	08db      	lsrs	r3, r3, #3
 80056bc:	f003 0303 	and.w	r3, r3, #3
 80056c0:	4a14      	ldr	r2, [pc, #80]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c8:	e01e      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056ca:	4b11      	ldr	r3, [pc, #68]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	d106      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056de:	d102      	bne.n	80056e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e4:	e010      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056f2:	d106      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056fa:	d102      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80056fc:	4b07      	ldr	r3, [pc, #28]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005706:	e245      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005708:	e244      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800570e:	e241      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005710:	58024400 	.word	0x58024400
 8005714:	03d09000 	.word	0x03d09000
 8005718:	003d0900 	.word	0x003d0900
 800571c:	017d7840 	.word	0x017d7840
 8005720:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8005724:	2300      	movs	r3, #0
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005728:	e234      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005730:	f040 809c 	bne.w	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8005734:	4b9b      	ldr	r3, [pc, #620]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005744:	d054      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574c:	f200 808b 	bhi.w	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005756:	f000 8083 	beq.w	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005760:	f200 8081 	bhi.w	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	d02f      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d878      	bhi.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d012      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8005782:	e070      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005784:	4b87      	ldr	r3, [pc, #540]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fcc8 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057a0:	e1f8      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057a6:	e1f5      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057a8:	4b7e      	ldr	r3, [pc, #504]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b4:	d107      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b6:	f107 0318 	add.w	r3, r7, #24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fa0e 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057c4:	e1e6      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ca:	e1e3      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057cc:	4b75      	ldr	r3, [pc, #468]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d8:	d107      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fb50 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80057e8:	e1d4      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80057ee:	e1d1      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80057f0:	4b6c      	ldr	r3, [pc, #432]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057fa:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b04      	cmp	r3, #4
 8005804:	d10c      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800580c:	4b65      	ldr	r3, [pc, #404]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a64      	ldr	r2, [pc, #400]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581e:	e01e      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005820:	4b60      	ldr	r3, [pc, #384]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582c:	d106      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005834:	d102      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8005836:	4b5d      	ldr	r3, [pc, #372]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583a:	e010      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800583c:	4b59      	ldr	r3, [pc, #356]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005848:	d106      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005850:	d102      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005852:	4b57      	ldr	r3, [pc, #348]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005856:	e002      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800585c:	e19a      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800585e:	e199      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8005860:	4b54      	ldr	r3, [pc, #336]	; (80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005864:	e196      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800586a:	e193      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005872:	d173      	bne.n	800595c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8005874:	4b4b      	ldr	r3, [pc, #300]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800587c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800587e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005884:	d02f      	beq.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8005886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800588c:	d863      	bhi.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800588e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005890:	2b00      	cmp	r3, #0
 8005892:	d004      	beq.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800589a:	d012      	beq.n	80058c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800589c:	e05b      	b.n	8005956 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800589e:	4b41      	ldr	r3, [pc, #260]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058aa:	d107      	bne.n	80058bc <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ac:	f107 0318 	add.w	r3, r7, #24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f993 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058ba:	e16b      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058c0:	e168      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80058c2:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ce:	d107      	bne.n	80058e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058d0:	f107 030c 	add.w	r3, r7, #12
 80058d4:	4618      	mov	r0, r3
 80058d6:	f000 fad5 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80058de:	e159      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80058e4:	e156      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80058e6:	4b2f      	ldr	r3, [pc, #188]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058f0:	4b2c      	ldr	r3, [pc, #176]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d10c      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80058fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d109      	bne.n	8005916 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005902:	4b28      	ldr	r3, [pc, #160]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	08db      	lsrs	r3, r3, #3
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	4a26      	ldr	r2, [pc, #152]	; (80059a8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800590e:	fa22 f303 	lsr.w	r3, r2, r3
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005914:	e01e      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005922:	d106      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800592a:	d102      	bne.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800592c:	4b1f      	ldr	r3, [pc, #124]	; (80059ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005930:	e010      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800593e:	d106      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8005940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005946:	d102      	bne.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800594a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800594c:	e002      	b.n	8005954 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8005952:	e11f      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005954:	e11e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8005956:	2300      	movs	r3, #0
 8005958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800595a:	e11b      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005962:	d13e      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	2b00      	cmp	r3, #0
 8005972:	d004      	beq.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8005974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597a:	d01d      	beq.n	80059b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800597c:	e02e      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800597e:	4b09      	ldr	r3, [pc, #36]	; (80059a4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800598a:	d107      	bne.n	800599c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800598c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005990:	4618      	mov	r0, r3
 8005992:	f000 fbcb 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800599a:	e0fb      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059a0:	e0f8      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80059a2:	bf00      	nop
 80059a4:	58024400 	.word	0x58024400
 80059a8:	03d09000 	.word	0x03d09000
 80059ac:	003d0900 	.word	0x003d0900
 80059b0:	017d7840 	.word	0x017d7840
 80059b4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059b8:	4b79      	ldr	r3, [pc, #484]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059c4:	d107      	bne.n	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059c6:	f107 0318 	add.w	r3, r7, #24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f906 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80059d4:	e0de      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059da:	e0db      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80059e0:	e0d8      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059e8:	f040 8085 	bne.w	8005af6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80059ec:	4b6c      	ldr	r3, [pc, #432]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80059ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80059f4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80059f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80059fc:	d06b      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80059fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a04:	d874      	bhi.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0c:	d056      	beq.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a14:	d86c      	bhi.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a1c:	d03b      	beq.n	8005a96 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a24:	d864      	bhi.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a2c:	d021      	beq.n	8005a72 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a34:	d85c      	bhi.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a42:	d004      	beq.n	8005a4e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005a44:	e054      	b.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005a46:	f000 f8b3 	bl	8005bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 8005a4a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8005a4c:	e0a2      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a4e:	4b54      	ldr	r3, [pc, #336]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a5c:	f107 0318 	add.w	r3, r7, #24
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 f8bb 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a6a:	e093      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a70:	e090      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a72:	4b4b      	ldr	r3, [pc, #300]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a80:	f107 030c 	add.w	r3, r7, #12
 8005a84:	4618      	mov	r0, r3
 8005a86:	f000 f9fd 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005a8e:	e081      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005a90:	2300      	movs	r3, #0
 8005a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005a94:	e07e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a96:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d109      	bne.n	8005ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005aa2:	4b3f      	ldr	r3, [pc, #252]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	08db      	lsrs	r3, r3, #3
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8005aae:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ab4:	e06e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aba:	e06b      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005abc:	4b38      	ldr	r3, [pc, #224]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ac8:	d102      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8005aca:	4b37      	ldr	r3, [pc, #220]	; (8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8005ace:	e061      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005ad4:	e05e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005ad6:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ae2:	d102      	bne.n	8005aea <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8005ae4:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005ae8:	e054      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005aea:	2300      	movs	r3, #0
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005aee:	e051      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8005af0:	2300      	movs	r3, #0
 8005af2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005af4:	e04e      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005afc:	d148      	bne.n	8005b90 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8005afe:	4b28      	ldr	r3, [pc, #160]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8005b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0e:	d02a      	beq.n	8005b66 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b16:	d838      	bhi.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d004      	beq.n	8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b24:	d00d      	beq.n	8005b42 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8005b26:	e030      	b.n	8005b8a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b34:	d102      	bne.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8005b36:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b3a:	e02b      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b40:	e028      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b42:	4b17      	ldr	r3, [pc, #92]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b4e:	d107      	bne.n	8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 fae9 	bl	800612c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b5e:	e019      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b64:	e016      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b66:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b72:	d107      	bne.n	8005b84 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b74:	f107 0318 	add.w	r3, r7, #24
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f82f 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8005b82:	e007      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8005b84:	2300      	movs	r3, #0
 8005b86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b88:	e004      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8005b8e:	e001      	b.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8005b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3740      	adds	r7, #64	; 0x40
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	58024400 	.word	0x58024400
 8005ba4:	03d09000 	.word	0x03d09000
 8005ba8:	003d0900 	.word	0x003d0900
 8005bac:	017d7840 	.word	0x017d7840

08005bb0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bb4:	f7fe fb88 	bl	80042c8 <HAL_RCC_GetHCLKFreq>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	4904      	ldr	r1, [pc, #16]	; (8005bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005bc6:	5ccb      	ldrb	r3, [r1, r3]
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	58024400 	.word	0x58024400
 8005bd8:	08011d9c 	.word	0x08011d9c

08005bdc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b089      	sub	sp, #36	; 0x24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005be4:	4ba1      	ldr	r3, [pc, #644]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005bee:	4b9f      	ldr	r3, [pc, #636]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf2:	0b1b      	lsrs	r3, r3, #12
 8005bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bf8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005bfa:	4b9c      	ldr	r3, [pc, #624]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c06:	4b99      	ldr	r3, [pc, #612]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c0a:	08db      	lsrs	r3, r3, #3
 8005c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	ee07 3a90 	vmov	s15, r3
 8005c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8111 	beq.w	8005e4c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	f000 8083 	beq.w	8005d38 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	f200 80a1 	bhi.w	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d056      	beq.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005c46:	e099      	b.n	8005d7c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c48:	4b88      	ldr	r3, [pc, #544]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d02d      	beq.n	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c54:	4b85      	ldr	r3, [pc, #532]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	08db      	lsrs	r3, r3, #3
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	4a84      	ldr	r2, [pc, #528]	; (8005e70 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005c60:	fa22 f303 	lsr.w	r3, r2, r3
 8005c64:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	ee07 3a90 	vmov	s15, r3
 8005c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	ee07 3a90 	vmov	s15, r3
 8005c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7e:	4b7b      	ldr	r3, [pc, #492]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c86:	ee07 3a90 	vmov	s15, r3
 8005c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005caa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005cae:	e087      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e78 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cc2:	4b6a      	ldr	r3, [pc, #424]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cca:	ee07 3a90 	vmov	s15, r3
 8005cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cf2:	e065      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d06:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d16:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d36:	e043      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	ee07 3a90 	vmov	s15, r3
 8005d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d4a:	4b48      	ldr	r3, [pc, #288]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d52:	ee07 3a90 	vmov	s15, r3
 8005d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d7a:	e021      	b.n	8005dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e7c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d8e:	4b37      	ldr	r3, [pc, #220]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005da2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e74 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dbe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005dc0:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	0a5b      	lsrs	r3, r3, #9
 8005dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dca:	ee07 3a90 	vmov	s15, r3
 8005dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de6:	ee17 2a90 	vmov	r2, s15
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005dee:	4b1f      	ldr	r3, [pc, #124]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	0c1b      	lsrs	r3, r3, #16
 8005df4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e14:	ee17 2a90 	vmov	r2, s15
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e1c:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	0e1b      	lsrs	r3, r3, #24
 8005e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e42:	ee17 2a90 	vmov	r2, s15
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e4a:	e008      	b.n	8005e5e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	609a      	str	r2, [r3, #8]
}
 8005e5e:	bf00      	nop
 8005e60:	3724      	adds	r7, #36	; 0x24
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	58024400 	.word	0x58024400
 8005e70:	03d09000 	.word	0x03d09000
 8005e74:	46000000 	.word	0x46000000
 8005e78:	4c742400 	.word	0x4c742400
 8005e7c:	4a742400 	.word	0x4a742400
 8005e80:	4bbebc20 	.word	0x4bbebc20

08005e84 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b089      	sub	sp, #36	; 0x24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e8c:	4ba1      	ldr	r3, [pc, #644]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e96:	4b9f      	ldr	r3, [pc, #636]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e9a:	0d1b      	lsrs	r3, r3, #20
 8005e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ea0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ea2:	4b9c      	ldr	r3, [pc, #624]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea6:	0a1b      	lsrs	r3, r3, #8
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005eae:	4b99      	ldr	r3, [pc, #612]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	08db      	lsrs	r3, r3, #3
 8005eb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8111 	beq.w	80060f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	f000 8083 	beq.w	8005fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	f200 80a1 	bhi.w	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d056      	beq.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005eee:	e099      	b.n	8006024 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ef0:	4b88      	ldr	r3, [pc, #544]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0320 	and.w	r3, r3, #32
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d02d      	beq.n	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005efc:	4b85      	ldr	r3, [pc, #532]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	4a84      	ldr	r2, [pc, #528]	; (8006118 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f08:	fa22 f303 	lsr.w	r3, r2, r3
 8005f0c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	ee07 3a90 	vmov	s15, r3
 8005f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f26:	4b7b      	ldr	r3, [pc, #492]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f52:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f56:	e087      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006120 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f6a:	4b6a      	ldr	r3, [pc, #424]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	ee07 3a90 	vmov	s15, r3
 8005f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f9a:	e065      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fae:	4b59      	ldr	r3, [pc, #356]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fde:	e043      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005fee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ff2:	4b48      	ldr	r3, [pc, #288]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffa:	ee07 3a90 	vmov	s15, r3
 8005ffe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006002:	ed97 6a03 	vldr	s12, [r7, #12]
 8006006:	eddf 5a45 	vldr	s11, [pc, #276]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800600a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800600e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006016:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800601a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800601e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006022:	e021      	b.n	8006068 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006124 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006032:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006036:	4b37      	ldr	r3, [pc, #220]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603e:	ee07 3a90 	vmov	s15, r3
 8006042:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006046:	ed97 6a03 	vldr	s12, [r7, #12]
 800604a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800611c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800604e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006052:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006056:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800605a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006062:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006066:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006068:	4b2a      	ldr	r3, [pc, #168]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	0a5b      	lsrs	r3, r3, #9
 800606e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800607a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800607e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006082:	edd7 6a07 	vldr	s13, [r7, #28]
 8006086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800608a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800608e:	ee17 2a90 	vmov	r2, s15
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006096:	4b1f      	ldr	r3, [pc, #124]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	0c1b      	lsrs	r3, r3, #16
 800609c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80060b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060bc:	ee17 2a90 	vmov	r2, s15
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80060c4:	4b13      	ldr	r3, [pc, #76]	; (8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	0e1b      	lsrs	r3, r3, #24
 80060ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060de:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ea:	ee17 2a90 	vmov	r2, s15
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80060f2:	e008      	b.n	8006106 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	609a      	str	r2, [r3, #8]
}
 8006106:	bf00      	nop
 8006108:	3724      	adds	r7, #36	; 0x24
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	58024400 	.word	0x58024400
 8006118:	03d09000 	.word	0x03d09000
 800611c:	46000000 	.word	0x46000000
 8006120:	4c742400 	.word	0x4c742400
 8006124:	4a742400 	.word	0x4a742400
 8006128:	4bbebc20 	.word	0x4bbebc20

0800612c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800612c:	b480      	push	{r7}
 800612e:	b089      	sub	sp, #36	; 0x24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006134:	4ba0      	ldr	r3, [pc, #640]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800613e:	4b9e      	ldr	r3, [pc, #632]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006148:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800614a:	4b9b      	ldr	r3, [pc, #620]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006154:	4b98      	ldr	r3, [pc, #608]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006158:	08db      	lsrs	r3, r3, #3
 800615a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	fb02 f303 	mul.w	r3, r2, r3
 8006164:	ee07 3a90 	vmov	s15, r3
 8006168:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 8111 	beq.w	800639a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b02      	cmp	r3, #2
 800617c:	f000 8083 	beq.w	8006286 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	2b02      	cmp	r3, #2
 8006184:	f200 80a1 	bhi.w	80062ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d003      	beq.n	8006196 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d056      	beq.n	8006242 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006194:	e099      	b.n	80062ca <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006196:	4b88      	ldr	r3, [pc, #544]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d02d      	beq.n	80061fe <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80061a2:	4b85      	ldr	r3, [pc, #532]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	08db      	lsrs	r3, r3, #3
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	4a83      	ldr	r2, [pc, #524]	; (80063bc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80061ae:	fa22 f303 	lsr.w	r3, r2, r3
 80061b2:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061cc:	4b7a      	ldr	r3, [pc, #488]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d4:	ee07 3a90 	vmov	s15, r3
 80061d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80061e0:	eddf 5a77 	vldr	s11, [pc, #476]	; 80063c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80061e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80061fc:	e087      	b.n	800630e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006208:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80063c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800620c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006210:	4b69      	ldr	r3, [pc, #420]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006218:	ee07 3a90 	vmov	s15, r3
 800621c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006220:	ed97 6a03 	vldr	s12, [r7, #12]
 8006224:	eddf 5a66 	vldr	s11, [pc, #408]	; 80063c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006228:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800622c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006230:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006234:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006240:	e065      	b.n	800630e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80063c8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006254:	4b58      	ldr	r3, [pc, #352]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006264:	ed97 6a03 	vldr	s12, [r7, #12]
 8006268:	eddf 5a55 	vldr	s11, [pc, #340]	; 80063c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800626c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006270:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006274:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006278:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800627c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006280:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006284:	e043      	b.n	800630e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006290:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80063cc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006294:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006298:	4b47      	ldr	r3, [pc, #284]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800629c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ac:	eddf 5a44 	vldr	s11, [pc, #272]	; 80063c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80062c8:	e021      	b.n	800630e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80063c4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062dc:	4b36      	ldr	r3, [pc, #216]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e4:	ee07 3a90 	vmov	s15, r3
 80062e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80062f0:	eddf 5a33 	vldr	s11, [pc, #204]	; 80063c0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006300:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006308:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800630c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800630e:	4b2a      	ldr	r3, [pc, #168]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	0a5b      	lsrs	r3, r3, #9
 8006314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006318:	ee07 3a90 	vmov	s15, r3
 800631c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006320:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006324:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006328:	edd7 6a07 	vldr	s13, [r7, #28]
 800632c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006330:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006334:	ee17 2a90 	vmov	r2, s15
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800633c:	4b1e      	ldr	r3, [pc, #120]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006352:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006356:	edd7 6a07 	vldr	s13, [r7, #28]
 800635a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006362:	ee17 2a90 	vmov	r2, s15
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800636a:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800636c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636e:	0e1b      	lsrs	r3, r3, #24
 8006370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800637c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006380:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006384:	edd7 6a07 	vldr	s13, [r7, #28]
 8006388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800638c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006390:	ee17 2a90 	vmov	r2, s15
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006398:	e008      	b.n	80063ac <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	609a      	str	r2, [r3, #8]
}
 80063ac:	bf00      	nop
 80063ae:	3724      	adds	r7, #36	; 0x24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	58024400 	.word	0x58024400
 80063bc:	03d09000 	.word	0x03d09000
 80063c0:	46000000 	.word	0x46000000
 80063c4:	4c742400 	.word	0x4c742400
 80063c8:	4a742400 	.word	0x4a742400
 80063cc:	4bbebc20 	.word	0x4bbebc20

080063d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80063de:	4b53      	ldr	r3, [pc, #332]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d101      	bne.n	80063ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e099      	b.n	8006522 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80063ee:	4b4f      	ldr	r3, [pc, #316]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a4e      	ldr	r2, [pc, #312]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80063f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063fa:	f7fb ff1f 	bl	800223c <HAL_GetTick>
 80063fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006400:	e008      	b.n	8006414 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006402:	f7fb ff1b 	bl	800223c <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	1ad3      	subs	r3, r2, r3
 800640c:	2b02      	cmp	r3, #2
 800640e:	d901      	bls.n	8006414 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e086      	b.n	8006522 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006414:	4b45      	ldr	r3, [pc, #276]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d1f0      	bne.n	8006402 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006420:	4b42      	ldr	r3, [pc, #264]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	031b      	lsls	r3, r3, #12
 800642e:	493f      	ldr	r1, [pc, #252]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006430:	4313      	orrs	r3, r2
 8006432:	628b      	str	r3, [r1, #40]	; 0x28
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	3b01      	subs	r3, #1
 800643a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	3b01      	subs	r3, #1
 8006444:	025b      	lsls	r3, r3, #9
 8006446:	b29b      	uxth	r3, r3
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	3b01      	subs	r3, #1
 8006450:	041b      	lsls	r3, r3, #16
 8006452:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	3b01      	subs	r3, #1
 800645e:	061b      	lsls	r3, r3, #24
 8006460:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006464:	4931      	ldr	r1, [pc, #196]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006466:	4313      	orrs	r3, r2
 8006468:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800646a:	4b30      	ldr	r3, [pc, #192]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	492d      	ldr	r1, [pc, #180]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006478:	4313      	orrs	r3, r2
 800647a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800647c:	4b2b      	ldr	r3, [pc, #172]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	f023 0220 	bic.w	r2, r3, #32
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	4928      	ldr	r1, [pc, #160]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 800648a:	4313      	orrs	r3, r2
 800648c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800648e:	4b27      	ldr	r3, [pc, #156]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006492:	4a26      	ldr	r2, [pc, #152]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006494:	f023 0310 	bic.w	r3, r3, #16
 8006498:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800649a:	4b24      	ldr	r3, [pc, #144]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 800649c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800649e:	4b24      	ldr	r3, [pc, #144]	; (8006530 <RCCEx_PLL2_Config+0x160>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	69d2      	ldr	r2, [r2, #28]
 80064a6:	00d2      	lsls	r2, r2, #3
 80064a8:	4920      	ldr	r1, [pc, #128]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064b4:	f043 0310 	orr.w	r3, r3, #16
 80064b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d106      	bne.n	80064ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80064c0:	4b1a      	ldr	r3, [pc, #104]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a19      	ldr	r2, [pc, #100]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064cc:	e00f      	b.n	80064ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d106      	bne.n	80064e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80064d4:	4b15      	ldr	r3, [pc, #84]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	4a14      	ldr	r2, [pc, #80]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064e0:	e005      	b.n	80064ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e6:	4a11      	ldr	r2, [pc, #68]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80064ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80064ee:	4b0f      	ldr	r3, [pc, #60]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a0e      	ldr	r2, [pc, #56]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 80064f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064fa:	f7fb fe9f 	bl	800223c <HAL_GetTick>
 80064fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006500:	e008      	b.n	8006514 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006502:	f7fb fe9b 	bl	800223c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	2b02      	cmp	r3, #2
 800650e:	d901      	bls.n	8006514 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e006      	b.n	8006522 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006514:	4b05      	ldr	r3, [pc, #20]	; (800652c <RCCEx_PLL2_Config+0x15c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0f0      	beq.n	8006502 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006520:	7bfb      	ldrb	r3, [r7, #15]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	58024400 	.word	0x58024400
 8006530:	ffff0007 	.word	0xffff0007

08006534 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006542:	4b53      	ldr	r3, [pc, #332]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b03      	cmp	r3, #3
 800654c:	d101      	bne.n	8006552 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e099      	b.n	8006686 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006552:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a4e      	ldr	r2, [pc, #312]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655e:	f7fb fe6d 	bl	800223c <HAL_GetTick>
 8006562:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006564:	e008      	b.n	8006578 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006566:	f7fb fe69 	bl	800223c <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	2b02      	cmp	r3, #2
 8006572:	d901      	bls.n	8006578 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e086      	b.n	8006686 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006578:	4b45      	ldr	r3, [pc, #276]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1f0      	bne.n	8006566 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006584:	4b42      	ldr	r3, [pc, #264]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006588:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	051b      	lsls	r3, r3, #20
 8006592:	493f      	ldr	r1, [pc, #252]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006594:	4313      	orrs	r3, r2
 8006596:	628b      	str	r3, [r1, #40]	; 0x28
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	3b01      	subs	r3, #1
 800659e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	025b      	lsls	r3, r3, #9
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	041b      	lsls	r3, r3, #16
 80065b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	3b01      	subs	r3, #1
 80065c2:	061b      	lsls	r3, r3, #24
 80065c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065c8:	4931      	ldr	r1, [pc, #196]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80065ce:	4b30      	ldr	r3, [pc, #192]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	492d      	ldr	r1, [pc, #180]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80065e0:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	4928      	ldr	r1, [pc, #160]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80065f2:	4b27      	ldr	r3, [pc, #156]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f6:	4a26      	ldr	r2, [pc, #152]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 80065f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80065fe:	4b24      	ldr	r3, [pc, #144]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006602:	4b24      	ldr	r3, [pc, #144]	; (8006694 <RCCEx_PLL3_Config+0x160>)
 8006604:	4013      	ands	r3, r2
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	69d2      	ldr	r2, [r2, #28]
 800660a:	00d2      	lsls	r2, r2, #3
 800660c:	4920      	ldr	r1, [pc, #128]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800660e:	4313      	orrs	r3, r2
 8006610:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006612:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	4a1e      	ldr	r2, [pc, #120]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800661c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006624:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a19      	ldr	r2, [pc, #100]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800662a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800662e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006630:	e00f      	b.n	8006652 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d106      	bne.n	8006646 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006638:	4b15      	ldr	r3, [pc, #84]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a14      	ldr	r2, [pc, #80]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800663e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006642:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006644:	e005      	b.n	8006652 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006646:	4b12      	ldr	r3, [pc, #72]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664a:	4a11      	ldr	r2, [pc, #68]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800664c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006650:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006652:	4b0f      	ldr	r3, [pc, #60]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a0e      	ldr	r2, [pc, #56]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 8006658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800665c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800665e:	f7fb fded 	bl	800223c <HAL_GetTick>
 8006662:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006664:	e008      	b.n	8006678 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8006666:	f7fb fde9 	bl	800223c <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	2b02      	cmp	r3, #2
 8006672:	d901      	bls.n	8006678 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006674:	2303      	movs	r3, #3
 8006676:	e006      	b.n	8006686 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006678:	4b05      	ldr	r3, [pc, #20]	; (8006690 <RCCEx_PLL3_Config+0x15c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d0f0      	beq.n	8006666 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	58024400 	.word	0x58024400
 8006694:	ffff0007 	.word	0xffff0007

08006698 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08a      	sub	sp, #40	; 0x28
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e075      	b.n	8006796 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d105      	bne.n	80066c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f7fb f8c5 	bl	800184c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2204      	movs	r2, #4
 80066c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f868 	bl	80067a0 <HAL_SD_InitCard>
 80066d0:	4603      	mov	r3, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d001      	beq.n	80066da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e05d      	b.n	8006796 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80066da:	f107 0308 	add.w	r3, r7, #8
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 ff71 	bl	80075c8 <HAL_SD_GetCardStatus>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e052      	b.n	8006796 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80066f0:	7e3b      	ldrb	r3, [r7, #24]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80066f6:	7e7b      	ldrb	r3, [r7, #25]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	2b01      	cmp	r3, #1
 8006702:	d10a      	bne.n	800671a <HAL_SD_Init+0x82>
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	d102      	bne.n	8006710 <HAL_SD_Init+0x78>
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d004      	beq.n	800671a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006716:	659a      	str	r2, [r3, #88]	; 0x58
 8006718:	e00b      	b.n	8006732 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	2b01      	cmp	r3, #1
 8006720:	d104      	bne.n	800672c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006728:	659a      	str	r2, [r3, #88]	; 0x58
 800672a:	e002      	b.n	8006732 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 f82f 	bl	800779c <HAL_SD_ConfigWideBusOperation>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e026      	b.n	8006796 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006748:	f7fb fd78 	bl	800223c <HAL_GetTick>
 800674c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800674e:	e011      	b.n	8006774 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006750:	f7fb fd74 	bl	800223c <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d109      	bne.n	8006774 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006766:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e010      	b.n	8006796 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 f923 	bl	80079c0 <HAL_SD_GetCardState>
 800677a:	4603      	mov	r3, r0
 800677c:	2b04      	cmp	r3, #4
 800677e:	d1e7      	bne.n	8006750 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3728      	adds	r7, #40	; 0x28
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067a0:	b590      	push	{r4, r7, lr}
 80067a2:	b08d      	sub	sp, #52	; 0x34
 80067a4:	af02      	add	r7, sp, #8
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80067bc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067c0:	f7fe fd24 	bl	800520c <HAL_RCCEx_GetPeriphCLKFreq>
 80067c4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80067da:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e06a      	b.n	80068b6 <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	4a36      	ldr	r2, [pc, #216]	; (80068c0 <HAL_SD_InitCard+0x120>)
 80067e6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ea:	091b      	lsrs	r3, r3, #4
 80067ec:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681c      	ldr	r4, [r3, #0]
 80067f2:	466a      	mov	r2, sp
 80067f4:	f107 0318 	add.w	r3, r7, #24
 80067f8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80067fc:	e882 0003 	stmia.w	r2, {r0, r1}
 8006800:	f107 030c 	add.w	r3, r7, #12
 8006804:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006806:	4620      	mov	r0, r4
 8006808:	f004 fd8a 	bl	800b320 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4618      	mov	r0, r3
 8006812:	f004 fdcd 	bl	800b3b0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006822:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <HAL_SD_InitCard+0x124>)
 8006824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006826:	fbb2 f3f3 	udiv	r3, r2, r3
 800682a:	3301      	adds	r3, #1
 800682c:	4618      	mov	r0, r3
 800682e:	f7fb fd11 	bl	8002254 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f001 f9b2 	bl	8007b9c <SD_PowerON>
 8006838:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00b      	beq.n	8006858 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684c:	6a3b      	ldr	r3, [r7, #32]
 800684e:	431a      	orrs	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e02e      	b.n	80068b6 <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f001 f8d1 	bl	8007a00 <SD_InitCard>
 800685e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00b      	beq.n	800687e <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006872:	6a3b      	ldr	r3, [r7, #32]
 8006874:	431a      	orrs	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e01b      	b.n	80068b6 <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006886:	4618      	mov	r0, r3
 8006888:	f004 fe28 	bl	800b4dc <SDMMC_CmdBlockLength>
 800688c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d00f      	beq.n	80068b4 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a0b      	ldr	r2, [pc, #44]	; (80068c8 <HAL_SD_InitCard+0x128>)
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068a0:	6a3b      	ldr	r3, [r7, #32]
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	372c      	adds	r7, #44	; 0x2c
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd90      	pop	{r4, r7, pc}
 80068be:	bf00      	nop
 80068c0:	014f8b59 	.word	0x014f8b59
 80068c4:	00012110 	.word	0x00012110
 80068c8:	1fe00fff 	.word	0x1fe00fff

080068cc <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b092      	sub	sp, #72	; 0x48
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80068da:	f7fb fcaf 	bl	800223c <HAL_GetTick>
 80068de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d107      	bne.n	80068fe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e167      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b01      	cmp	r3, #1
 8006908:	f040 815a 	bne.w	8006bc0 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691c:	429a      	cmp	r2, r3
 800691e:	d907      	bls.n	8006930 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006924:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e14e      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2203      	movs	r2, #3
 8006934:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2200      	movs	r2, #0
 800693e:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	2b01      	cmp	r3, #1
 8006946:	d002      	beq.n	800694e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8006948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694a:	025b      	lsls	r3, r3, #9
 800694c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800694e:	f04f 33ff 	mov.w	r3, #4294967295
 8006952:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	025b      	lsls	r3, r3, #9
 8006958:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800695a:	2390      	movs	r3, #144	; 0x90
 800695c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800695e:	2302      	movs	r3, #2
 8006960:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006962:	2300      	movs	r3, #0
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006966:	2300      	movs	r3, #0
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f107 0214 	add.w	r2, r7, #20
 8006972:	4611      	mov	r1, r2
 8006974:	4618      	mov	r0, r3
 8006976:	f004 fd85 	bl	800b484 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68da      	ldr	r2, [r3, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006988:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d90a      	bls.n	80069a6 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2202      	movs	r2, #2
 8006994:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800699c:	4618      	mov	r0, r3
 800699e:	f004 fde3 	bl	800b568 <SDMMC_CmdReadMultiBlock>
 80069a2:	6478      	str	r0, [r7, #68]	; 0x44
 80069a4:	e009      	b.n	80069ba <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069b2:	4618      	mov	r0, r3
 80069b4:	f004 fdb5 	bl	800b522 <SDMMC_CmdReadSingleBlock>
 80069b8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80069ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d012      	beq.n	80069e6 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a84      	ldr	r2, [pc, #528]	; (8006bd8 <HAL_SD_ReadBlocks+0x30c>)
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ce:	431a      	orrs	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e0f3      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80069ea:	e058      	b.n	8006a9e <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d033      	beq.n	8006a62 <HAL_SD_ReadBlocks+0x196>
 80069fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069fc:	2b1f      	cmp	r3, #31
 80069fe:	d930      	bls.n	8006a62 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8006a00:	2300      	movs	r3, #0
 8006a02:	643b      	str	r3, [r7, #64]	; 0x40
 8006a04:	e027      	b.n	8006a56 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f004 fcb2 	bl	800b374 <SDMMC_ReadFIFO>
 8006a10:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a18:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	0e1b      	lsrs	r3, r3, #24
 8006a44:	b2da      	uxtb	r2, r3
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8006a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8006a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a52:	3301      	adds	r3, #1
 8006a54:	643b      	str	r3, [r7, #64]	; 0x40
 8006a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a58:	2b07      	cmp	r3, #7
 8006a5a:	d9d4      	bls.n	8006a06 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a5e:	3b20      	subs	r3, #32
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006a62:	f7fb fbeb 	bl	800223c <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d902      	bls.n	8006a78 <HAL_SD_ReadBlocks+0x1ac>
 8006a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d112      	bne.n	8006a9e <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a56      	ldr	r2, [pc, #344]	; (8006bd8 <HAL_SD_ReadBlocks+0x30c>)
 8006a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e097      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aa4:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d09f      	beq.n	80069ec <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68da      	ldr	r2, [r3, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aba:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d022      	beq.n	8006b10 <HAL_SD_ReadBlocks+0x244>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d91f      	bls.n	8006b10 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d01b      	beq.n	8006b10 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f004 fdad 	bl	800b63c <SDMMC_CmdStopTransfer>
 8006ae2:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d012      	beq.n	8006b10 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a3a      	ldr	r2, [pc, #232]	; (8006bd8 <HAL_SD_ReadBlocks+0x30c>)
 8006af0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e05e      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	f003 0308 	and.w	r3, r3, #8
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d012      	beq.n	8006b44 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a2d      	ldr	r2, [pc, #180]	; (8006bd8 <HAL_SD_ReadBlocks+0x30c>)
 8006b24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b2a:	f043 0208 	orr.w	r2, r3, #8
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e044      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d012      	beq.n	8006b78 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a20      	ldr	r2, [pc, #128]	; (8006bd8 <HAL_SD_ReadBlocks+0x30c>)
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5e:	f043 0202 	orr.w	r2, r3, #2
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e02a      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d012      	beq.n	8006bac <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a13      	ldr	r2, [pc, #76]	; (8006bd8 <HAL_SD_ReadBlocks+0x30c>)
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	f043 0220 	orr.w	r2, r3, #32
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e010      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a0a      	ldr	r2, [pc, #40]	; (8006bdc <HAL_SD_ReadBlocks+0x310>)
 8006bb2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e006      	b.n	8006bce <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
  }
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3748      	adds	r7, #72	; 0x48
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	1fe00fff 	.word	0x1fe00fff
 8006bdc:	18000f3a 	.word	0x18000f3a

08006be0 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b092      	sub	sp, #72	; 0x48
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006bee:	f7fb fb25 	bl	800223c <HAL_GetTick>
 8006bf2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d107      	bne.n	8006c12 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e16b      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	f040 815e 	bne.w	8006edc <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d907      	bls.n	8006c44 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c38:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e152      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2203      	movs	r2, #3
 8006c48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2200      	movs	r2, #0
 8006c52:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d002      	beq.n	8006c62 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5e:	025b      	lsls	r3, r3, #9
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	025b      	lsls	r3, r3, #9
 8006c6c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006c6e:	2390      	movs	r3, #144	; 0x90
 8006c70:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f107 0218 	add.w	r2, r7, #24
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f004 fbfb 	bl	800b484 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c9c:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d90a      	bls.n	8006cba <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f004 fc9f 	bl	800b5f4 <SDMMC_CmdWriteMultiBlock>
 8006cb6:	6478      	str	r0, [r7, #68]	; 0x44
 8006cb8:	e009      	b.n	8006cce <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2210      	movs	r2, #16
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f004 fc71 	bl	800b5ae <SDMMC_CmdWriteSingleBlock>
 8006ccc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d012      	beq.n	8006cfa <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a86      	ldr	r2, [pc, #536]	; (8006ef4 <HAL_SD_WriteBlocks+0x314>)
 8006cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e0f7      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006cfe:	e05c      	b.n	8006dba <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d037      	beq.n	8006d7e <HAL_SD_WriteBlocks+0x19e>
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	2b1f      	cmp	r3, #31
 8006d12:	d934      	bls.n	8006d7e <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006d14:	2300      	movs	r3, #0
 8006d16:	643b      	str	r3, [r7, #64]	; 0x40
 8006d18:	e02b      	b.n	8006d72 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d22:	3301      	adds	r3, #1
 8006d24:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d34:	3301      	adds	r3, #1
 8006d36:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8006d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	041a      	lsls	r2, r3, #16
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d46:	3301      	adds	r3, #1
 8006d48:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	061a      	lsls	r2, r3, #24
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d58:	3301      	adds	r3, #1
 8006d5a:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f107 0214 	add.w	r2, r7, #20
 8006d64:	4611      	mov	r1, r2
 8006d66:	4618      	mov	r0, r3
 8006d68:	f004 fb11 	bl	800b38e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8006d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d6e:	3301      	adds	r3, #1
 8006d70:	643b      	str	r3, [r7, #64]	; 0x40
 8006d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d74:	2b07      	cmp	r3, #7
 8006d76:	d9d0      	bls.n	8006d1a <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8006d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7a:	3b20      	subs	r3, #32
 8006d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8006d7e:	f7fb fa5d 	bl	800223c <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d902      	bls.n	8006d94 <HAL_SD_WriteBlocks+0x1b4>
 8006d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d112      	bne.n	8006dba <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a56      	ldr	r2, [pc, #344]	; (8006ef4 <HAL_SD_WriteBlocks+0x314>)
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006da2:	431a      	orrs	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e097      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d09b      	beq.n	8006d00 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dd6:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d022      	beq.n	8006e2c <HAL_SD_WriteBlocks+0x24c>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d91f      	bls.n	8006e2c <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d01b      	beq.n	8006e2c <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f004 fc1f 	bl	800b63c <SDMMC_CmdStopTransfer>
 8006dfe:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d012      	beq.n	8006e2c <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a3a      	ldr	r2, [pc, #232]	; (8006ef4 <HAL_SD_WriteBlocks+0x314>)
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e14:	431a      	orrs	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e05e      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d012      	beq.n	8006e60 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a2d      	ldr	r2, [pc, #180]	; (8006ef4 <HAL_SD_WriteBlocks+0x314>)
 8006e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	f043 0208 	orr.w	r2, r3, #8
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e044      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d012      	beq.n	8006e94 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a20      	ldr	r2, [pc, #128]	; (8006ef4 <HAL_SD_WriteBlocks+0x314>)
 8006e74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e7a:	f043 0202 	orr.w	r2, r3, #2
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e02a      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d012      	beq.n	8006ec8 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <HAL_SD_WriteBlocks+0x314>)
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eae:	f043 0210 	orr.w	r2, r3, #16
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e010      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0a      	ldr	r2, [pc, #40]	; (8006ef8 <HAL_SD_WriteBlocks+0x318>)
 8006ece:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e006      	b.n	8006eea <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
  }
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3748      	adds	r7, #72	; 0x48
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	1fe00fff 	.word	0x1fe00fff
 8006ef8:	18000f3a 	.word	0x18000f3a

08006efc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d008      	beq.n	8006f2a <HAL_SD_IRQHandler+0x2e>
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f001 f926 	bl	8008174 <SD_Read_IT>
 8006f28:	e19a      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80ac 	beq.w	8007092 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f42:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	4b59      	ldr	r3, [pc, #356]	; (80070b4 <HAL_SD_IRQHandler+0x1b8>)
 8006f50:	400b      	ands	r3, r1
 8006f52:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006f62:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f72:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d038      	beq.n	8006ff0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <HAL_SD_IRQHandler+0x96>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d011      	beq.n	8006fb6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f004 fb50 	bl	800b63c <SDMMC_CmdStopTransfer>
 8006f9c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d008      	beq.n	8006fb6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f95b 	bl	800726c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a3f      	ldr	r2, [pc, #252]	; (80070b8 <HAL_SD_IRQHandler+0x1bc>)
 8006fbc:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <HAL_SD_IRQHandler+0xe4>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d003      	beq.n	8006fe8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f005 f80b 	bl	800bffc <HAL_SD_RxCpltCallback>
 8006fe6:	e13b      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f004 fffd 	bl	800bfe8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006fee:	e137      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8132 	beq.w	8007260 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2200      	movs	r2, #0
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2200      	movs	r2, #0
 800700a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2200      	movs	r2, #0
 8007012:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d104      	bne.n	8007028 <HAL_SD_IRQHandler+0x12c>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d011      	beq.n	800704c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f004 fb05 	bl	800b63c <SDMMC_CmdStopTransfer>
 8007032:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d008      	beq.n	800704c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f910 	bl	800726c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0310 	and.w	r3, r3, #16
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <HAL_SD_IRQHandler+0x172>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b00      	cmp	r3, #0
 800706c:	d002      	beq.n	8007074 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f004 ffba 	bl	800bfe8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d105      	bne.n	800708a <HAL_SD_IRQHandler+0x18e>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 80eb 	beq.w	8007260 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f004 ffb6 	bl	800bffc <HAL_SD_RxCpltCallback>
}
 8007090:	e0e6      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00d      	beq.n	80070bc <HAL_SD_IRQHandler+0x1c0>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0308 	and.w	r3, r3, #8
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d008      	beq.n	80070bc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f001 f8a8 	bl	8008200 <SD_Write_IT>
 80070b0:	e0d6      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
 80070b2:	bf00      	nop
 80070b4:	ffff3ec5 	.word	0xffff3ec5
 80070b8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070c2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 809d 	beq.w	8007206 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	f043 0202 	orr.w	r2, r3, #2
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	f003 0308 	and.w	r3, r3, #8
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d005      	beq.n	8007100 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f8:	f043 0208 	orr.w	r2, r3, #8
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	f043 0220 	orr.w	r2, r3, #32
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007120:	f003 0310 	and.w	r3, r3, #16
 8007124:	2b00      	cmp	r3, #0
 8007126:	d005      	beq.n	8007134 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800712c:	f043 0210 	orr.w	r2, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a4b      	ldr	r2, [pc, #300]	; (8007268 <HAL_SD_IRQHandler+0x36c>)
 800713a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800714a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68da      	ldr	r2, [r3, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800717a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f004 fa5b 	bl	800b63c <SDMMC_CmdStopTransfer>
 8007186:	4602      	mov	r2, r0
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071a0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0308 	and.w	r3, r3, #8
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f851 	bl	800726c <HAL_SD_ErrorCallback>
}
 80071ca:	e049      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d044      	beq.n	8007260 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d040      	beq.n	8007260 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80071ec:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f834 	bl	800726c <HAL_SD_ErrorCallback>
}
 8007204:	e02c      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d025      	beq.n	8007260 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800721c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007224:	f003 0304 	and.w	r3, r3, #4
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10c      	bne.n	8007246 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f003 0320 	and.w	r3, r3, #32
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f84a 	bl	80082d0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800723c:	e010      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f832 	bl	80082a8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8007244:	e00c      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 f833 	bl	80082bc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8007256:	e003      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f81b 	bl	8008294 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800725e:	e7ff      	b.n	8007260 <HAL_SD_IRQHandler+0x364>
 8007260:	bf00      	nop
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	18000f3a 	.word	0x18000f3a

0800726c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	0f9b      	lsrs	r3, r3, #30
 8007290:	b2da      	uxtb	r2, r3
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729a:	0e9b      	lsrs	r3, r3, #26
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	b2da      	uxtb	r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ac:	0e1b      	lsrs	r3, r3, #24
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	0c1b      	lsrs	r3, r3, #16
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ca:	0a1b      	lsrs	r3, r3, #8
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072e0:	0d1b      	lsrs	r3, r3, #20
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	f003 030f 	and.w	r3, r3, #15
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	0bdb      	lsrs	r3, r3, #15
 8007300:	b2db      	uxtb	r3, r3
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	b2da      	uxtb	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007310:	0b9b      	lsrs	r3, r3, #14
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	b2da      	uxtb	r2, r3
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007322:	0b5b      	lsrs	r3, r3, #13
 8007324:	b2db      	uxtb	r3, r3
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	b2da      	uxtb	r2, r3
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007334:	0b1b      	lsrs	r3, r3, #12
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	b2da      	uxtb	r2, r3
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2200      	movs	r2, #0
 8007346:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d163      	bne.n	8007418 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007354:	009a      	lsls	r2, r3, #2
 8007356:	f640 73fc 	movw	r3, #4092	; 0xffc
 800735a:	4013      	ands	r3, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007360:	0f92      	lsrs	r2, r2, #30
 8007362:	431a      	orrs	r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800736c:	0edb      	lsrs	r3, r3, #27
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	b2da      	uxtb	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800737e:	0e1b      	lsrs	r3, r3, #24
 8007380:	b2db      	uxtb	r3, r3
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	b2da      	uxtb	r2, r3
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007390:	0d5b      	lsrs	r3, r3, #21
 8007392:	b2db      	uxtb	r3, r3
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	b2da      	uxtb	r2, r3
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a2:	0c9b      	lsrs	r3, r3, #18
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	b2da      	uxtb	r2, r3
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b4:	0bdb      	lsrs	r3, r3, #15
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0307 	and.w	r3, r3, #7
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	7e1b      	ldrb	r3, [r3, #24]
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	f003 0307 	and.w	r3, r3, #7
 80073d6:	3302      	adds	r3, #2
 80073d8:	2201      	movs	r2, #1
 80073da:	fa02 f303 	lsl.w	r3, r2, r3
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80073e2:	fb03 f202 	mul.w	r2, r3, r2
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	7a1b      	ldrb	r3, [r3, #8]
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	f003 030f 	and.w	r3, r3, #15
 80073f4:	2201      	movs	r2, #1
 80073f6:	409a      	lsls	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007404:	0a52      	lsrs	r2, r2, #9
 8007406:	fb03 f202 	mul.w	r2, r3, r2
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007414:	655a      	str	r2, [r3, #84]	; 0x54
 8007416:	e031      	b.n	800747c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	2b01      	cmp	r3, #1
 800741e:	d11d      	bne.n	800745c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800742e:	0c1b      	lsrs	r3, r3, #16
 8007430:	431a      	orrs	r2, r3
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	3301      	adds	r3, #1
 800743c:	029a      	lsls	r2, r3, #10
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007450:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	655a      	str	r2, [r3, #84]	; 0x54
 800745a:	e00f      	b.n	800747c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a58      	ldr	r2, [pc, #352]	; (80075c4 <HAL_SD_GetCardCSD+0x344>)
 8007462:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e09d      	b.n	80075b8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007480:	0b9b      	lsrs	r3, r3, #14
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	b2da      	uxtb	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007492:	09db      	lsrs	r3, r3, #7
 8007494:	b2db      	uxtb	r3, r3
 8007496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749a:	b2da      	uxtb	r2, r3
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074b4:	0fdb      	lsrs	r3, r3, #31
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c0:	0f5b      	lsrs	r3, r3, #29
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0303 	and.w	r3, r3, #3
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074d2:	0e9b      	lsrs	r3, r3, #26
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	b2da      	uxtb	r2, r3
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074e4:	0d9b      	lsrs	r3, r3, #22
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074f6:	0d5b      	lsrs	r3, r3, #21
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	f003 0301 	and.w	r3, r3, #1
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007512:	0c1b      	lsrs	r3, r3, #16
 8007514:	b2db      	uxtb	r3, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007526:	0bdb      	lsrs	r3, r3, #15
 8007528:	b2db      	uxtb	r3, r3
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	b2da      	uxtb	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800753a:	0b9b      	lsrs	r3, r3, #14
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	b2da      	uxtb	r2, r3
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754e:	0b5b      	lsrs	r3, r3, #13
 8007550:	b2db      	uxtb	r3, r3
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	b2da      	uxtb	r2, r3
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007562:	0b1b      	lsrs	r3, r3, #12
 8007564:	b2db      	uxtb	r3, r3
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	b2da      	uxtb	r2, r3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007576:	0a9b      	lsrs	r3, r3, #10
 8007578:	b2db      	uxtb	r3, r3
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	b2da      	uxtb	r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758a:	0a1b      	lsrs	r3, r3, #8
 800758c:	b2db      	uxtb	r3, r3
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	b2da      	uxtb	r2, r3
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075a6:	b2da      	uxtb	r2, r3
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	1fe00fff 	.word	0x1fe00fff

080075c8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b094      	sub	sp, #80	; 0x50
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d101      	bne.n	80075e8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0a7      	b.n	8007738 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80075e8:	f107 0308 	add.w	r3, r7, #8
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb62 	bl	8007cb8 <SD_SendSDStatus>
 80075f4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80075f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d011      	beq.n	8007620 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a4f      	ldr	r2, [pc, #316]	; (8007740 <HAL_SD_GetCardStatus+0x178>)
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007608:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800760a:	431a      	orrs	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800761e:	e070      	b.n	8007702 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	099b      	lsrs	r3, r3, #6
 8007624:	b2db      	uxtb	r3, r3
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	b2da      	uxtb	r2, r3
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	095b      	lsrs	r3, r3, #5
 8007634:	b2db      	uxtb	r3, r3
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	b2da      	uxtb	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	b29b      	uxth	r3, r3
 8007646:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800764a:	b29a      	uxth	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	0e1b      	lsrs	r3, r3, #24
 8007650:	b29b      	uxth	r3, r3
 8007652:	4313      	orrs	r3, r2
 8007654:	b29a      	uxth	r2, r3
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	061a      	lsls	r2, r3, #24
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007666:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	0a1b      	lsrs	r3, r3, #8
 800766c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007670:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	0e1b      	lsrs	r3, r3, #24
 8007676:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	b2da      	uxtb	r2, r3
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b2da      	uxtb	r2, r3
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	0d1b      	lsrs	r3, r3, #20
 8007692:	b2db      	uxtb	r3, r3
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	b2da      	uxtb	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	0c1b      	lsrs	r3, r3, #16
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	4313      	orrs	r3, r2
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	0a9b      	lsrs	r3, r3, #10
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076c4:	b2da      	uxtb	r2, r3
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	0a1b      	lsrs	r3, r3, #8
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	f003 0303 	and.w	r3, r3, #3
 80076d4:	b2da      	uxtb	r2, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	091b      	lsrs	r3, r3, #4
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 030f 	and.w	r3, r3, #15
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	0e1b      	lsrs	r3, r3, #24
 80076fc:	b2da      	uxtb	r2, r3
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800770a:	4618      	mov	r0, r3
 800770c:	f003 fee6 	bl	800b4dc <SDMMC_CmdBlockLength>
 8007710:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00d      	beq.n	8007734 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a08      	ldr	r2, [pc, #32]	; (8007740 <HAL_SD_GetCardStatus+0x178>)
 800771e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007724:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007734:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007738:	4618      	mov	r0, r3
 800773a:	3750      	adds	r7, #80	; 0x50
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	1fe00fff 	.word	0x1fe00fff

08007744 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800779c:	b590      	push	{r4, r7, lr}
 800779e:	b08d      	sub	sp, #52	; 0x34
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2203      	movs	r2, #3
 80077b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d02e      	beq.n	800781e <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077c6:	d106      	bne.n	80077d6 <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	635a      	str	r2, [r3, #52]	; 0x34
 80077d4:	e029      	b.n	800782a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077dc:	d10a      	bne.n	80077f4 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fb62 	bl	8007ea8 <SD_WideBus_Enable>
 80077e4:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	635a      	str	r2, [r3, #52]	; 0x34
 80077f2:	e01a      	b.n	800782a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fb9f 	bl	8007f3e <SD_WideBus_Disable>
 8007800:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	431a      	orrs	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	635a      	str	r2, [r3, #52]	; 0x34
 800780e:	e00c      	b.n	800782a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007814:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	635a      	str	r2, [r3, #52]	; 0x34
 800781c:	e005      	b.n	800782a <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007822:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a5e      	ldr	r2, [pc, #376]	; (80079b0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007838:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007840:	e094      	b.n	800796c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007842:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007846:	f7fd fce1 	bl	800520c <HAL_RCCEx_GetPeriphCLKFreq>
 800784a:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f000 8083 	beq.w	800795a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	4950      	ldr	r1, [pc, #320]	; (80079b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007872:	fba1 1303 	umull	r1, r3, r1, r3
 8007876:	0e1b      	lsrs	r3, r3, #24
 8007878:	429a      	cmp	r2, r3
 800787a:	d303      	bcc.n	8007884 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	61bb      	str	r3, [r7, #24]
 8007882:	e05a      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788c:	d103      	bne.n	8007896 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	61bb      	str	r3, [r7, #24]
 8007894:	e051      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800789a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800789e:	d126      	bne.n	80078ee <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695b      	ldr	r3, [r3, #20]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10e      	bne.n	80078c6 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	4a43      	ldr	r2, [pc, #268]	; (80079b8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d906      	bls.n	80078be <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	4a40      	ldr	r2, [pc, #256]	; (80079b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078b4:	fba2 2303 	umull	r2, r3, r2, r3
 80078b8:	0e5b      	lsrs	r3, r3, #25
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	e03d      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	695b      	ldr	r3, [r3, #20]
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	e039      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80078d2:	4a39      	ldr	r2, [pc, #228]	; (80079b8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d906      	bls.n	80078e6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	4a36      	ldr	r2, [pc, #216]	; (80079b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80078dc:	fba2 2303 	umull	r2, r3, r2, r3
 80078e0:	0e5b      	lsrs	r3, r3, #25
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e029      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	61bb      	str	r3, [r7, #24]
 80078ec:	e025      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10e      	bne.n	8007914 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	4a30      	ldr	r2, [pc, #192]	; (80079bc <HAL_SD_ConfigWideBusOperation+0x220>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d906      	bls.n	800790c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80078fe:	6a3b      	ldr	r3, [r7, #32]
 8007900:	4a2c      	ldr	r2, [pc, #176]	; (80079b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007902:	fba2 2303 	umull	r2, r3, r2, r3
 8007906:	0e1b      	lsrs	r3, r3, #24
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	e016      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e012      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	6a3a      	ldr	r2, [r7, #32]
 800791c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007920:	4a26      	ldr	r2, [pc, #152]	; (80079bc <HAL_SD_ConfigWideBusOperation+0x220>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d906      	bls.n	8007934 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	4a22      	ldr	r2, [pc, #136]	; (80079b4 <HAL_SD_ConfigWideBusOperation+0x218>)
 800792a:	fba2 2303 	umull	r2, r3, r2, r3
 800792e:	0e1b      	lsrs	r3, r3, #24
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	e002      	b.n	800793a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	695b      	ldr	r3, [r3, #20]
 8007938:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681c      	ldr	r4, [r3, #0]
 800793e:	466a      	mov	r2, sp
 8007940:	f107 0314 	add.w	r3, r7, #20
 8007944:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007948:	e882 0003 	stmia.w	r2, {r0, r1}
 800794c:	f107 0308 	add.w	r3, r7, #8
 8007950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007952:	4620      	mov	r0, r4
 8007954:	f003 fce4 	bl	800b320 <SDMMC_Init>
 8007958:	e008      	b.n	800796c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800795e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007974:	4618      	mov	r0, r3
 8007976:	f003 fdb1 	bl	800b4dc <SDMMC_CmdBlockLength>
 800797a:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00c      	beq.n	800799c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a0a      	ldr	r2, [pc, #40]	; (80079b0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007988:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80079a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	372c      	adds	r7, #44	; 0x2c
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd90      	pop	{r4, r7, pc}
 80079b0:	1fe00fff 	.word	0x1fe00fff
 80079b4:	55e63b89 	.word	0x55e63b89
 80079b8:	02faf080 	.word	0x02faf080
 80079bc:	017d7840 	.word	0x017d7840

080079c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b086      	sub	sp, #24
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80079cc:	f107 030c 	add.w	r3, r7, #12
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa40 	bl	8007e58 <SD_SendStatus>
 80079d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d005      	beq.n	80079ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	0a5b      	lsrs	r3, r3, #9
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80079f6:	693b      	ldr	r3, [r7, #16]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b090      	sub	sp, #64	; 0x40
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007a0c:	f7fa fc16 	bl	800223c <HAL_GetTick>
 8007a10:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f003 fcdb 	bl	800b3d2 <SDMMC_GetPowerState>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007a26:	e0b5      	b.n	8007b94 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d02e      	beq.n	8007a8e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f003 ff26 	bl	800b886 <SDMMC_CmdSendCID>
 8007a3a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <SD_InitCard+0x46>
    {
      return errorstate;
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	e0a6      	b.n	8007b94 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f003 fd06 	bl	800b45e <SDMMC_GetResponse>
 8007a52:	4602      	mov	r2, r0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2104      	movs	r1, #4
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f003 fcfd 	bl	800b45e <SDMMC_GetResponse>
 8007a64:	4602      	mov	r2, r0
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2108      	movs	r1, #8
 8007a70:	4618      	mov	r0, r3
 8007a72:	f003 fcf4 	bl	800b45e <SDMMC_GetResponse>
 8007a76:	4602      	mov	r2, r0
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	210c      	movs	r1, #12
 8007a82:	4618      	mov	r0, r3
 8007a84:	f003 fceb 	bl	800b45e <SDMMC_GetResponse>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	d01d      	beq.n	8007ad2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007a96:	e019      	b.n	8007acc <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f107 020a 	add.w	r2, r7, #10
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f003 ff2e 	bl	800b904 <SDMMC_CmdSetRelAdd>
 8007aa8:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab2:	e06f      	b.n	8007b94 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007ab4:	f7fa fbc2 	bl	800223c <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	f241 3287 	movw	r2, #4999	; 0x1387
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d902      	bls.n	8007acc <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007ac6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007aca:	e063      	b.n	8007b94 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007acc:	897b      	ldrh	r3, [r7, #10]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d0e2      	beq.n	8007a98 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	2b03      	cmp	r3, #3
 8007ad8:	d036      	beq.n	8007b48 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ada:	897b      	ldrh	r3, [r7, #10]
 8007adc:	461a      	mov	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aea:	041b      	lsls	r3, r3, #16
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f003 fee8 	bl	800b8c4 <SDMMC_CmdSendCSD>
 8007af4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <SD_InitCard+0x100>
    {
      return errorstate;
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	e049      	b.n	8007b94 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f003 fca9 	bl	800b45e <SDMMC_GetResponse>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2104      	movs	r1, #4
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f003 fca0 	bl	800b45e <SDMMC_GetResponse>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2108      	movs	r1, #8
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f003 fc97 	bl	800b45e <SDMMC_GetResponse>
 8007b30:	4602      	mov	r2, r0
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	210c      	movs	r1, #12
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f003 fc8e 	bl	800b45e <SDMMC_GetResponse>
 8007b42:	4602      	mov	r2, r0
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2104      	movs	r1, #4
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f003 fc85 	bl	800b45e <SDMMC_GetResponse>
 8007b54:	4603      	mov	r3, r0
 8007b56:	0d1a      	lsrs	r2, r3, #20
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007b5c:	f107 030c 	add.w	r3, r7, #12
 8007b60:	4619      	mov	r1, r3
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fb8c 	bl	8007280 <HAL_SD_GetCardCSD>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007b72:	e00f      	b.n	8007b94 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f003 fd97 	bl	800b6b4 <SDMMC_CmdSelDesel>
 8007b86:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <SD_InitCard+0x192>
  {
    return errorstate;
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b90:	e000      	b.n	8007b94 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3740      	adds	r7, #64	; 0x40
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007bac:	2300      	movs	r3, #0
 8007bae:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f003 fda0 	bl	800b6fa <SDMMC_CmdGoIdleState>
 8007bba:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	e072      	b.n	8007cac <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f003 fdb3 	bl	800b736 <SDMMC_CmdOperCond>
 8007bd0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bd8:	d10d      	bne.n	8007bf6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4618      	mov	r0, r3
 8007be6:	f003 fd88 	bl	800b6fa <SDMMC_CmdGoIdleState>
 8007bea:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d004      	beq.n	8007bfc <SD_PowerON+0x60>
    {
      return errorstate;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	e05a      	b.n	8007cac <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d137      	bne.n	8007c74 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f003 fdb3 	bl	800b776 <SDMMC_CmdAppCommand>
 8007c10:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d02d      	beq.n	8007c74 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c18:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c1c:	e046      	b.n	8007cac <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2100      	movs	r1, #0
 8007c24:	4618      	mov	r0, r3
 8007c26:	f003 fda6 	bl	800b776 <SDMMC_CmdAppCommand>
 8007c2a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	e03a      	b.n	8007cac <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	491e      	ldr	r1, [pc, #120]	; (8007cb4 <SD_PowerON+0x118>)
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f003 fdbd 	bl	800b7bc <SDMMC_CmdAppOperCommand>
 8007c42:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c4a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c4e:	e02d      	b.n	8007cac <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f003 fc01 	bl	800b45e <SDMMC_GetResponse>
 8007c5c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	0fdb      	lsrs	r3, r3, #31
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <SD_PowerON+0xce>
 8007c66:	2301      	movs	r3, #1
 8007c68:	e000      	b.n	8007c6c <SD_PowerON+0xd0>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	613b      	str	r3, [r7, #16]

    count++;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	3301      	adds	r3, #1
 8007c72:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d802      	bhi.n	8007c84 <SD_PowerON+0xe8>
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0cc      	beq.n	8007c1e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d902      	bls.n	8007c94 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007c92:	e00b      	b.n	8007cac <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	c1100000 	.word	0xc1100000

08007cb8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08c      	sub	sp, #48	; 0x30
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007cc2:	f7fa fabb 	bl	800223c <HAL_GetTick>
 8007cc6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2100      	movs	r1, #0
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f003 fbc3 	bl	800b45e <SDMMC_GetResponse>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ce2:	d102      	bne.n	8007cea <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ce4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ce8:	e0b0      	b.n	8007e4c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2140      	movs	r1, #64	; 0x40
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f003 fbf3 	bl	800b4dc <SDMMC_CmdBlockLength>
 8007cf6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d06:	6a3b      	ldr	r3, [r7, #32]
 8007d08:	e0a0      	b.n	8007e4c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	041b      	lsls	r3, r3, #16
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f003 fd2d 	bl	800b776 <SDMMC_CmdAppCommand>
 8007d1c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d005      	beq.n	8007d30 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	e08d      	b.n	8007e4c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295
 8007d34:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007d36:	2340      	movs	r3, #64	; 0x40
 8007d38:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007d3a:	2360      	movs	r3, #96	; 0x60
 8007d3c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f107 0208 	add.w	r2, r7, #8
 8007d52:	4611      	mov	r1, r2
 8007d54:	4618      	mov	r0, r3
 8007d56:	f003 fb95 	bl	800b484 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f003 fe15 	bl	800b98e <SDMMC_CmdStatusRegister>
 8007d64:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d02b      	beq.n	8007dc4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	e069      	b.n	8007e4c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d013      	beq.n	8007dae <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007d86:	2300      	movs	r3, #0
 8007d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d8a:	e00d      	b.n	8007da8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f003 faef 	bl	800b374 <SDMMC_ReadFIFO>
 8007d96:	4602      	mov	r2, r0
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	601a      	str	r2, [r3, #0]
        pData++;
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	3304      	adds	r3, #4
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da4:	3301      	adds	r3, #1
 8007da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	2b07      	cmp	r3, #7
 8007dac:	d9ee      	bls.n	8007d8c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007dae:	f7fa fa45 	bl	800223c <HAL_GetTick>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dbc:	d102      	bne.n	8007dc4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007dbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dc2:	e043      	b.n	8007e4c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dca:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d0d2      	beq.n	8007d78 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	f003 0308 	and.w	r3, r3, #8
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007de0:	2308      	movs	r3, #8
 8007de2:	e033      	b.n	8007e4c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d001      	beq.n	8007df6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007df2:	2302      	movs	r3, #2
 8007df4:	e02a      	b.n	8007e4c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dfc:	f003 0320 	and.w	r3, r3, #32
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d017      	beq.n	8007e34 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007e04:	2320      	movs	r3, #32
 8007e06:	e021      	b.n	8007e4c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f003 fab1 	bl	800b374 <SDMMC_ReadFIFO>
 8007e12:	4602      	mov	r2, r0
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	601a      	str	r2, [r3, #0]
    pData++;
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007e1e:	f7fa fa0d 	bl	800223c <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e2c:	d102      	bne.n	8007e34 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007e2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e32:	e00b      	b.n	8007e4c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1e2      	bne.n	8007e08 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a03      	ldr	r2, [pc, #12]	; (8007e54 <SD_SendSDStatus+0x19c>)
 8007e48:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3730      	adds	r7, #48	; 0x30
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	18000f3a 	.word	0x18000f3a

08007e58 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d102      	bne.n	8007e6e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007e68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e6c:	e018      	b.n	8007ea0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e76:	041b      	lsls	r3, r3, #16
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f003 fd64 	bl	800b948 <SDMMC_CmdSendStatus>
 8007e80:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <SD_SendStatus+0x34>
  {
    return errorstate;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	e009      	b.n	8007ea0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2100      	movs	r1, #0
 8007e92:	4618      	mov	r0, r3
 8007e94:	f003 fae3 	bl	800b45e <SDMMC_GetResponse>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f003 facd 	bl	800b45e <SDMMC_GetResponse>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ece:	d102      	bne.n	8007ed6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ed0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ed4:	e02f      	b.n	8007f36 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ed6:	f107 030c 	add.w	r3, r7, #12
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f879 	bl	8007fd4 <SD_FindSCR>
 8007ee2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d001      	beq.n	8007eee <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	e023      	b.n	8007f36 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01c      	beq.n	8007f32 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f00:	041b      	lsls	r3, r3, #16
 8007f02:	4619      	mov	r1, r3
 8007f04:	4610      	mov	r0, r2
 8007f06:	f003 fc36 	bl	800b776 <SDMMC_CmdAppCommand>
 8007f0a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	e00f      	b.n	8007f36 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2102      	movs	r1, #2
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f003 fc6d 	bl	800b7fc <SDMMC_CmdBusWidth>
 8007f22:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	e003      	b.n	8007f36 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e001      	b.n	8007f36 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f3e:	b580      	push	{r7, lr}
 8007f40:	b086      	sub	sp, #24
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	2100      	movs	r1, #0
 8007f54:	4618      	mov	r0, r3
 8007f56:	f003 fa82 	bl	800b45e <SDMMC_GetResponse>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f64:	d102      	bne.n	8007f6c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f6a:	e02f      	b.n	8007fcc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f6c:	f107 030c 	add.w	r3, r7, #12
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f82e 	bl	8007fd4 <SD_FindSCR>
 8007f78:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d001      	beq.n	8007f84 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	e023      	b.n	8007fcc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d01c      	beq.n	8007fc8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f96:	041b      	lsls	r3, r3, #16
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	f003 fbeb 	bl	800b776 <SDMMC_CmdAppCommand>
 8007fa0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	e00f      	b.n	8007fcc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f003 fc22 	bl	800b7fc <SDMMC_CmdBusWidth>
 8007fb8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	e003      	b.n	8007fcc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	e001      	b.n	8007fcc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007fc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3718      	adds	r7, #24
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b08e      	sub	sp, #56	; 0x38
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fde:	f7fa f92d 	bl	800223c <HAL_GetTick>
 8007fe2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
 8007fec:	2300      	movs	r3, #0
 8007fee:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2108      	movs	r1, #8
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f003 fa6e 	bl	800b4dc <SDMMC_CmdBlockLength>
 8008000:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	e0ad      	b.n	8008168 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	4619      	mov	r1, r3
 8008018:	4610      	mov	r0, r2
 800801a:	f003 fbac 	bl	800b776 <SDMMC_CmdAppCommand>
 800801e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008028:	e09e      	b.n	8008168 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800802a:	f04f 33ff 	mov.w	r3, #4294967295
 800802e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008030:	2308      	movs	r3, #8
 8008032:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008034:	2330      	movs	r3, #48	; 0x30
 8008036:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008038:	2302      	movs	r3, #2
 800803a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800803c:	2300      	movs	r3, #0
 800803e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008040:	2301      	movs	r3, #1
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f107 0210 	add.w	r2, r7, #16
 800804c:	4611      	mov	r1, r2
 800804e:	4618      	mov	r0, r3
 8008050:	f003 fa18 	bl	800b484 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4618      	mov	r0, r3
 800805a:	f003 fbf2 	bl	800b842 <SDMMC_CmdSendSCR>
 800805e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	2b00      	cmp	r3, #0
 8008064:	d027      	beq.n	80080b6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	e07e      	b.n	8008168 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008070:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d113      	bne.n	80080a0 <SD_FindSCR+0xcc>
 8008078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800807a:	2b00      	cmp	r3, #0
 800807c:	d110      	bne.n	80080a0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f003 f976 	bl	800b374 <SDMMC_ReadFIFO>
 8008088:	4603      	mov	r3, r0
 800808a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4618      	mov	r0, r3
 8008092:	f003 f96f 	bl	800b374 <SDMMC_ReadFIFO>
 8008096:	4603      	mov	r3, r0
 8008098:	60fb      	str	r3, [r7, #12]
      index++;
 800809a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809c:	3301      	adds	r3, #1
 800809e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080a0:	f7fa f8cc 	bl	800223c <HAL_GetTick>
 80080a4:	4602      	mov	r2, r0
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	1ad3      	subs	r3, r2, r3
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d102      	bne.n	80080b6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080b4:	e058      	b.n	8008168 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080bc:	f240 532a 	movw	r3, #1322	; 0x52a
 80080c0:	4013      	ands	r3, r2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d0d1      	beq.n	800806a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2208      	movs	r2, #8
 80080da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80080dc:	2308      	movs	r3, #8
 80080de:	e043      	b.n	8008168 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d005      	beq.n	80080fa <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2202      	movs	r2, #2
 80080f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80080f6:	2302      	movs	r3, #2
 80080f8:	e036      	b.n	8008168 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008100:	f003 0320 	and.w	r3, r3, #32
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2220      	movs	r2, #32
 800810e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008110:	2320      	movs	r3, #32
 8008112:	e029      	b.n	8008168 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <SD_FindSCR+0x19c>)
 800811a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	061a      	lsls	r2, r3, #24
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	021b      	lsls	r3, r3, #8
 8008124:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008128:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	0a1b      	lsrs	r3, r3, #8
 800812e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008132:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	0e1b      	lsrs	r3, r3, #24
 8008138:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800813a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800813c:	601a      	str	r2, [r3, #0]
    scr++;
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	3304      	adds	r3, #4
 8008142:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	061a      	lsls	r2, r3, #24
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008150:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	0a1b      	lsrs	r3, r3, #8
 8008156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800815a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	0e1b      	lsrs	r3, r3, #24
 8008160:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008164:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3738      	adds	r7, #56	; 0x38
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	18000f3a 	.word	0x18000f3a

08008174 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008186:	2b1f      	cmp	r3, #31
 8008188:	d936      	bls.n	80081f8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	e027      	b.n	80081e0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f003 f8ed 	bl	800b374 <SDMMC_ReadFIFO>
 800819a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	3301      	adds	r3, #1
 80081a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	0a1b      	lsrs	r3, r3, #8
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	3301      	adds	r3, #1
 80081b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	3301      	adds	r3, #1
 80081c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	0e1b      	lsrs	r3, r3, #24
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	3301      	adds	r3, #1
 80081d8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	3301      	adds	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b07      	cmp	r3, #7
 80081e4:	d9d4      	bls.n	8008190 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f0:	f1a3 0220 	sub.w	r2, r3, #32
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80081f8:	bf00      	nop
 80081fa:	3718      	adds	r7, #24
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	2b1f      	cmp	r3, #31
 8008214:	d93a      	bls.n	800828c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	e02b      	b.n	8008274 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3301      	adds	r3, #1
 8008226:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	021a      	lsls	r2, r3, #8
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	3301      	adds	r3, #1
 8008238:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	041a      	lsls	r2, r3, #16
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	3301      	adds	r3, #1
 800824a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	061a      	lsls	r2, r3, #24
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4313      	orrs	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3301      	adds	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f107 020c 	add.w	r2, r7, #12
 8008266:	4611      	mov	r1, r2
 8008268:	4618      	mov	r0, r3
 800826a:	f003 f890 	bl	800b38e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	3301      	adds	r3, #1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2b07      	cmp	r3, #7
 8008278:	d9d0      	bls.n	800821c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	f1a3 0220 	sub.w	r2, r3, #32
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	621a      	str	r2, [r3, #32]
  }
}
 800828c:	bf00      	nop
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr

080082a8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80082b0:	bf00      	nop
 80082b2:	370c      	adds	r7, #12
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80082c4:	bf00      	nop
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80082d8:	bf00      	nop
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr

080082e4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e0f1      	b.n	80084da <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a78      	ldr	r2, [pc, #480]	; (80084e4 <HAL_SPI_Init+0x200>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d00f      	beq.n	8008326 <HAL_SPI_Init+0x42>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a77      	ldr	r2, [pc, #476]	; (80084e8 <HAL_SPI_Init+0x204>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d00a      	beq.n	8008326 <HAL_SPI_Init+0x42>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a75      	ldr	r2, [pc, #468]	; (80084ec <HAL_SPI_Init+0x208>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d005      	beq.n	8008326 <HAL_SPI_Init+0x42>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	2b0f      	cmp	r3, #15
 8008320:	d901      	bls.n	8008326 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008322:	2301      	movs	r3, #1
 8008324:	e0d9      	b.n	80084da <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 ff66 	bl	80091f8 <SPI_GetPacketSize>
 800832c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a6c      	ldr	r2, [pc, #432]	; (80084e4 <HAL_SPI_Init+0x200>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d00c      	beq.n	8008352 <HAL_SPI_Init+0x6e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a6a      	ldr	r2, [pc, #424]	; (80084e8 <HAL_SPI_Init+0x204>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d007      	beq.n	8008352 <HAL_SPI_Init+0x6e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a69      	ldr	r2, [pc, #420]	; (80084ec <HAL_SPI_Init+0x208>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d002      	beq.n	8008352 <HAL_SPI_Init+0x6e>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b08      	cmp	r3, #8
 8008350:	d811      	bhi.n	8008376 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008356:	4a63      	ldr	r2, [pc, #396]	; (80084e4 <HAL_SPI_Init+0x200>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d009      	beq.n	8008370 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a61      	ldr	r2, [pc, #388]	; (80084e8 <HAL_SPI_Init+0x204>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <HAL_SPI_Init+0x8c>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a60      	ldr	r2, [pc, #384]	; (80084ec <HAL_SPI_Init+0x208>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d104      	bne.n	800837a <HAL_SPI_Init+0x96>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b10      	cmp	r3, #16
 8008374:	d901      	bls.n	800837a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
 8008378:	e0af      	b.n	80084da <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008380:	b2db      	uxtb	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d106      	bne.n	8008394 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7f9 fb58 	bl	8001a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2202      	movs	r2, #2
 8008398:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f022 0201 	bic.w	r2, r2, #1
 80083aa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80083b6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083c0:	d119      	bne.n	80083f6 <HAL_SPI_Init+0x112>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083ca:	d103      	bne.n	80083d4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d10c      	bne.n	80083f6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80083e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e4:	d107      	bne.n	80083f6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80083f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69da      	ldr	r2, [r3, #28]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	431a      	orrs	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008408:	ea42 0103 	orr.w	r1, r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	431a      	orrs	r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	431a      	orrs	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	431a      	orrs	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	695b      	ldr	r3, [r3, #20]
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	431a      	orrs	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	431a      	orrs	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	689b      	ldr	r3, [r3, #8]
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008456:	ea42 0103 	orr.w	r1, r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d113      	bne.n	8008496 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008480:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008494:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	40013000 	.word	0x40013000
 80084e8:	40003800 	.word	0x40003800
 80084ec:	40003c00 	.word	0x40003c00

080084f0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b08a      	sub	sp, #40	; 0x28
 80084f4:	af02      	add	r7, sp, #8
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	603b      	str	r3, [r7, #0]
 80084fc:	4613      	mov	r3, r2
 80084fe:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	3320      	adds	r3, #32
 8008506:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <HAL_SPI_Transmit+0x2a>
 8008516:	2302      	movs	r3, #2
 8008518:	e1d7      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008522:	f7f9 fe8b 	bl	800223c <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800852e:	b2db      	uxtb	r3, r3
 8008530:	2b01      	cmp	r3, #1
 8008532:	d007      	beq.n	8008544 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008534:	2302      	movs	r3, #2
 8008536:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008540:	7efb      	ldrb	r3, [r7, #27]
 8008542:	e1c2      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_SPI_Transmit+0x60>
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d107      	bne.n	8008560 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800855c:	7efb      	ldrb	r3, [r7, #27]
 800855e:	e1b4      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2203      	movs	r2, #3
 8008564:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2200      	movs	r2, #0
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	88fa      	ldrh	r2, [r7, #6]
 800857a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	88fa      	ldrh	r2, [r7, #6]
 8008582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80085b0:	d107      	bne.n	80085c2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	4b96      	ldr	r3, [pc, #600]	; (8008824 <HAL_SPI_Transmit+0x334>)
 80085ca:	4013      	ands	r3, r2
 80085cc:	88f9      	ldrh	r1, [r7, #6]
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	430b      	orrs	r3, r1
 80085d4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0201 	orr.w	r2, r2, #1
 80085e4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ee:	d107      	bne.n	8008600 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	2b0f      	cmp	r3, #15
 8008606:	d947      	bls.n	8008698 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008608:	e03f      	b.n	800868a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	695b      	ldr	r3, [r3, #20]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d114      	bne.n	8008642 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	6812      	ldr	r2, [r2, #0]
 8008622:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	b29a      	uxth	r2, r3
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008640:	e023      	b.n	800868a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008642:	f7f9 fdfb 	bl	800223c <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d803      	bhi.n	800865a <HAL_SPI_Transmit+0x16a>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d102      	bne.n	8008660 <HAL_SPI_Transmit+0x170>
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d114      	bne.n	800868a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 fcfb 	bl	800905c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008674:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008686:	2303      	movs	r3, #3
 8008688:	e11f      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d1b9      	bne.n	800860a <HAL_SPI_Transmit+0x11a>
 8008696:	e0f2      	b.n	800887e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	2b07      	cmp	r3, #7
 800869e:	f240 80e7 	bls.w	8008870 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086a2:	e05d      	b.n	8008760 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d132      	bne.n	8008718 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d918      	bls.n	80086f0 <HAL_SPI_Transmit+0x200>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d014      	beq.n	80086f0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	3b02      	subs	r3, #2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80086ee:	e037      	b.n	8008760 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f4:	881a      	ldrh	r2, [r3, #0]
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086fe:	1c9a      	adds	r2, r3, #2
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800870a:	b29b      	uxth	r3, r3
 800870c:	3b01      	subs	r3, #1
 800870e:	b29a      	uxth	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008716:	e023      	b.n	8008760 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008718:	f7f9 fd90 	bl	800223c <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d803      	bhi.n	8008730 <HAL_SPI_Transmit+0x240>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872e:	d102      	bne.n	8008736 <HAL_SPI_Transmit+0x246>
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d114      	bne.n	8008760 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f000 fc90 	bl	800905c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800874a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e0b4      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d19b      	bne.n	80086a4 <HAL_SPI_Transmit+0x1b4>
 800876c:	e087      	b.n	800887e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d155      	bne.n	8008828 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008782:	b29b      	uxth	r3, r3
 8008784:	2b03      	cmp	r3, #3
 8008786:	d918      	bls.n	80087ba <HAL_SPI_Transmit+0x2ca>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878c:	2b40      	cmp	r3, #64	; 0x40
 800878e:	d914      	bls.n	80087ba <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a0:	1d1a      	adds	r2, r3, #4
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	3b04      	subs	r3, #4
 80087b0:	b29a      	uxth	r2, r3
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087b8:	e05a      	b.n	8008870 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d917      	bls.n	80087f6 <HAL_SPI_Transmit+0x306>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d013      	beq.n	80087f6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087d2:	881a      	ldrh	r2, [r3, #0]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b02      	subs	r3, #2
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087f4:	e03c      	b.n	8008870 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3320      	adds	r3, #32
 8008800:	7812      	ldrb	r2, [r2, #0]
 8008802:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008808:	1c5a      	adds	r2, r3, #1
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	b29a      	uxth	r2, r3
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008820:	e026      	b.n	8008870 <HAL_SPI_Transmit+0x380>
 8008822:	bf00      	nop
 8008824:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008828:	f7f9 fd08 	bl	800223c <HAL_GetTick>
 800882c:	4602      	mov	r2, r0
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	429a      	cmp	r2, r3
 8008836:	d803      	bhi.n	8008840 <HAL_SPI_Transmit+0x350>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883e:	d102      	bne.n	8008846 <HAL_SPI_Transmit+0x356>
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d114      	bne.n	8008870 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fc08 	bl	800905c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800885a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800886c:	2303      	movs	r3, #3
 800886e:	e02c      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008876:	b29b      	uxth	r3, r3
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f af78 	bne.w	800876e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	2200      	movs	r2, #0
 8008886:	2108      	movs	r1, #8
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 fc87 	bl	800919c <SPI_WaitOnFlagUntilTimeout>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d007      	beq.n	80088a4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889a:	f043 0220 	orr.w	r2, r3, #32
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 fbd9 	bl	800905c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80088c8:	7efb      	ldrb	r3, [r7, #27]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3720      	adds	r7, #32
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop

080088d4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b08a      	sub	sp, #40	; 0x28
 80088d8:	af02      	add	r7, sp, #8
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	603b      	str	r3, [r7, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3330      	adds	r3, #48	; 0x30
 80088ee:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088f8:	d112      	bne.n	8008920 <HAL_SPI_Receive+0x4c>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10e      	bne.n	8008920 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2204      	movs	r2, #4
 8008906:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	9300      	str	r3, [sp, #0]
 8008910:	4613      	mov	r3, r2
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f978 	bl	8008c0c <HAL_SPI_TransmitReceive>
 800891c:	4603      	mov	r3, r0
 800891e:	e16f      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008926:	2b01      	cmp	r3, #1
 8008928:	d101      	bne.n	800892e <HAL_SPI_Receive+0x5a>
 800892a:	2302      	movs	r3, #2
 800892c:	e168      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2201      	movs	r2, #1
 8008932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008936:	f7f9 fc81 	bl	800223c <HAL_GetTick>
 800893a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008942:	b2db      	uxtb	r3, r3
 8008944:	2b01      	cmp	r3, #1
 8008946:	d007      	beq.n	8008958 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8008948:	2302      	movs	r3, #2
 800894a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008954:	7ffb      	ldrb	r3, [r7, #31]
 8008956:	e153      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_SPI_Receive+0x90>
 800895e:	88fb      	ldrh	r3, [r7, #6]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d107      	bne.n	8008974 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008970:	7ffb      	ldrb	r3, [r7, #31]
 8008972:	e145      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2204      	movs	r2, #4
 8008978:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	88fa      	ldrh	r2, [r7, #6]
 800898e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	88fa      	ldrh	r2, [r7, #6]
 8008996:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80089c4:	d107      	bne.n	80089d6 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80089d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685a      	ldr	r2, [r3, #4]
 80089dc:	4b8a      	ldr	r3, [pc, #552]	; (8008c08 <HAL_SPI_Receive+0x334>)
 80089de:	4013      	ands	r3, r2
 80089e0:	88f9      	ldrh	r1, [r7, #6]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	430b      	orrs	r3, r1
 80089e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0201 	orr.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a02:	d107      	bne.n	8008a14 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	2b0f      	cmp	r3, #15
 8008a1a:	d948      	bls.n	8008aae <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008a1c:	e040      	b.n	8008aa0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	695a      	ldr	r2, [r3, #20]
 8008a24:	f248 0308 	movw	r3, #32776	; 0x8008
 8008a28:	4013      	ands	r3, r2
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d014      	beq.n	8008a58 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a38:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a3e:	1d1a      	adds	r2, r3, #4
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008a56:	e023      	b.n	8008aa0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a58:	f7f9 fbf0 	bl	800223c <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	697b      	ldr	r3, [r7, #20]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d803      	bhi.n	8008a70 <HAL_SPI_Receive+0x19c>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6e:	d102      	bne.n	8008a76 <HAL_SPI_Receive+0x1a2>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d114      	bne.n	8008aa0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 faf0 	bl	800905c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e0af      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d1b8      	bne.n	8008a1e <HAL_SPI_Receive+0x14a>
 8008aac:	e095      	b.n	8008bda <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	2b07      	cmp	r3, #7
 8008ab4:	f240 808b 	bls.w	8008bce <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8008ab8:	e03f      	b.n	8008b3a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	f003 0301 	and.w	r3, r3, #1
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d114      	bne.n	8008af2 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	8812      	ldrh	r2, [r2, #0]
 8008ad0:	b292      	uxth	r2, r2
 8008ad2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ad8:	1c9a      	adds	r2, r3, #2
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008af0:	e023      	b.n	8008b3a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008af2:	f7f9 fba3 	bl	800223c <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d803      	bhi.n	8008b0a <HAL_SPI_Receive+0x236>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b08:	d102      	bne.n	8008b10 <HAL_SPI_Receive+0x23c>
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d114      	bne.n	8008b3a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f000 faa3 	bl	800905c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e062      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1b9      	bne.n	8008aba <HAL_SPI_Receive+0x1e6>
 8008b46:	e048      	b.n	8008bda <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d117      	bne.n	8008b86 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b62:	7812      	ldrb	r2, [r2, #0]
 8008b64:	b2d2      	uxtb	r2, r2
 8008b66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6c:	1c5a      	adds	r2, r3, #1
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008b84:	e023      	b.n	8008bce <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b86:	f7f9 fb59 	bl	800223c <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d803      	bhi.n	8008b9e <HAL_SPI_Receive+0x2ca>
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b9c:	d102      	bne.n	8008ba4 <HAL_SPI_Receive+0x2d0>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d114      	bne.n	8008bce <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fa59 	bl	800905c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e018      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1b6      	bne.n	8008b48 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 fa3e 	bl	800905c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d001      	beq.n	8008bfe <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8008bfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3720      	adds	r7, #32
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	ffff0000 	.word	0xffff0000

08008c0c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b08e      	sub	sp, #56	; 0x38
 8008c10:	af02      	add	r7, sp, #8
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
 8008c18:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3320      	adds	r3, #32
 8008c26:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3330      	adds	r3, #48	; 0x30
 8008c2e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_SPI_TransmitReceive+0x32>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e209      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c46:	f7f9 faf9 	bl	800223c <HAL_GetTick>
 8008c4a:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008c50:	887b      	ldrh	r3, [r7, #2]
 8008c52:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c5a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008c62:	7efb      	ldrb	r3, [r7, #27]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d014      	beq.n	8008c92 <HAL_SPI_TransmitReceive+0x86>
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c6e:	d106      	bne.n	8008c7e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d102      	bne.n	8008c7e <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8008c78:	7efb      	ldrb	r3, [r7, #27]
 8008c7a:	2b04      	cmp	r3, #4
 8008c7c:	d009      	beq.n	8008c92 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c90:	e1df      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d005      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x98>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_SPI_TransmitReceive+0x98>
 8008c9e:	887b      	ldrh	r3, [r7, #2]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d109      	bne.n	8008cb8 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008cb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008cb6:	e1cc      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d003      	beq.n	8008ccc <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2205      	movs	r2, #5
 8008cc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	887a      	ldrh	r2, [r7, #2]
 8008cde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	887a      	ldrh	r2, [r7, #2]
 8008ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	887a      	ldrh	r2, [r7, #2]
 8008cf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	887a      	ldrh	r2, [r7, #2]
 8008cfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2200      	movs	r2, #0
 8008d04:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	4b82      	ldr	r3, [pc, #520]	; (8008f1c <HAL_SPI_TransmitReceive+0x310>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	8879      	ldrh	r1, [r7, #2]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	6812      	ldr	r2, [r2, #0]
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d38:	d107      	bne.n	8008d4a <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b0f      	cmp	r3, #15
 8008d50:	d970      	bls.n	8008e34 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008d52:	e068      	b.n	8008e26 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	f003 0302 	and.w	r3, r3, #2
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d11a      	bne.n	8008d98 <HAL_SPI_TransmitReceive+0x18c>
 8008d62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d017      	beq.n	8008d98 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6812      	ldr	r2, [r2, #0]
 8008d72:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d96:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695a      	ldr	r2, [r3, #20]
 8008d9e:	f248 0308 	movw	r3, #32776	; 0x8008
 8008da2:	4013      	ands	r3, r2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d01a      	beq.n	8008dde <HAL_SPI_TransmitReceive+0x1d2>
 8008da8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d017      	beq.n	8008dde <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008db8:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dbe:	1d1a      	adds	r2, r3, #4
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ddc:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008dde:	f7f9 fa2d 	bl	800223c <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	69fb      	ldr	r3, [r7, #28]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d803      	bhi.n	8008df6 <HAL_SPI_TransmitReceive+0x1ea>
 8008dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df4:	d102      	bne.n	8008dfc <HAL_SPI_TransmitReceive+0x1f0>
 8008df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d114      	bne.n	8008e26 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f92d 	bl	800905c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e115      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d193      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x148>
 8008e2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d190      	bne.n	8008d54 <HAL_SPI_TransmitReceive+0x148>
 8008e32:	e0e7      	b.n	8009004 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	2b07      	cmp	r3, #7
 8008e3a:	f240 80dd 	bls.w	8008ff8 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008e3e:	e066      	b.n	8008f0e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	695b      	ldr	r3, [r3, #20]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d119      	bne.n	8008e82 <HAL_SPI_TransmitReceive+0x276>
 8008e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d016      	beq.n	8008e82 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e58:	881a      	ldrh	r2, [r3, #0]
 8008e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5c:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e62:	1c9a      	adds	r2, r3, #2
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	3b01      	subs	r3, #1
 8008e72:	b29a      	uxth	r2, r3
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e80:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	695b      	ldr	r3, [r3, #20]
 8008e88:	f003 0301 	and.w	r3, r3, #1
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d11a      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x2ba>
 8008e90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d017      	beq.n	8008ec6 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e9a:	6a3a      	ldr	r2, [r7, #32]
 8008e9c:	8812      	ldrh	r2, [r2, #0]
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ea6:	1c9a      	adds	r2, r3, #2
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	3b01      	subs	r3, #1
 8008eb6:	b29a      	uxth	r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008ec4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ec6:	f7f9 f9b9 	bl	800223c <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d803      	bhi.n	8008ede <HAL_SPI_TransmitReceive+0x2d2>
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008edc:	d102      	bne.n	8008ee4 <HAL_SPI_TransmitReceive+0x2d8>
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d114      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 f8b9 	bl	800905c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ef8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e0a1      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008f0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d195      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x234>
 8008f14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d192      	bne.n	8008e40 <HAL_SPI_TransmitReceive+0x234>
 8008f1a:	e073      	b.n	8009004 <HAL_SPI_TransmitReceive+0x3f8>
 8008f1c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695b      	ldr	r3, [r3, #20]
 8008f26:	f003 0302 	and.w	r3, r3, #2
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d11b      	bne.n	8008f66 <HAL_SPI_TransmitReceive+0x35a>
 8008f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d018      	beq.n	8008f66 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3320      	adds	r3, #32
 8008f3e:	7812      	ldrb	r2, [r2, #0]
 8008f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f46:	1c5a      	adds	r2, r3, #1
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	3b01      	subs	r3, #1
 8008f56:	b29a      	uxth	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f64:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	f003 0301 	and.w	r3, r3, #1
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d11d      	bne.n	8008fb0 <HAL_SPI_TransmitReceive+0x3a4>
 8008f74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01a      	beq.n	8008fb0 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	b2d2      	uxtb	r2, r2
 8008f8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f90:	1c5a      	adds	r2, r3, #1
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f9c:	b29b      	uxth	r3, r3
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008fae:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fb0:	f7f9 f944 	bl	800223c <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d803      	bhi.n	8008fc8 <HAL_SPI_TransmitReceive+0x3bc>
 8008fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc6:	d102      	bne.n	8008fce <HAL_SPI_TransmitReceive+0x3c2>
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d114      	bne.n	8008ff8 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f844 	bl	800905c <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fe2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e02c      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008ff8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d190      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x314>
 8008ffe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d18d      	bne.n	8008f20 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2200      	movs	r2, #0
 800900c:	2108      	movs	r1, #8
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 f8c4 	bl	800919c <SPI_WaitOnFlagUntilTimeout>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009020:	f043 0220 	orr.w	r2, r3, #32
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f816 	bl	800905c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2201      	movs	r2, #1
 800903c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e001      	b.n	8009052 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 800904e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009052:	4618      	mov	r0, r3
 8009054:	3730      	adds	r7, #48	; 0x30
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop

0800905c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	695b      	ldr	r3, [r3, #20]
 800906a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f042 0208 	orr.w	r2, r2, #8
 800907a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	699a      	ldr	r2, [r3, #24]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f042 0210 	orr.w	r2, r2, #16
 800908a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0201 	bic.w	r2, r2, #1
 800909a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	6919      	ldr	r1, [r3, #16]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	4b3c      	ldr	r3, [pc, #240]	; (8009198 <SPI_CloseTransfer+0x13c>)
 80090a8:	400b      	ands	r3, r1
 80090aa:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80090ba:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b04      	cmp	r3, #4
 80090c6:	d014      	beq.n	80090f2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f003 0320 	and.w	r3, r3, #32
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00f      	beq.n	80090f2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0220 	orr.w	r2, r2, #32
 80090f0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	d014      	beq.n	8009128 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009104:	2b00      	cmp	r3, #0
 8009106:	d00f      	beq.n	8009128 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910e:	f043 0204 	orr.w	r2, r3, #4
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	699a      	ldr	r2, [r3, #24]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009126:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00f      	beq.n	8009152 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009138:	f043 0201 	orr.w	r2, r3, #1
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	699a      	ldr	r2, [r3, #24]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009150:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00f      	beq.n	800917c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009162:	f043 0208 	orr.w	r2, r3, #8
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	699a      	ldr	r2, [r3, #24]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800917a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800918c:	bf00      	nop
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr
 8009198:	fffffc90 	.word	0xfffffc90

0800919c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	4613      	mov	r3, r2
 80091aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091ac:	e010      	b.n	80091d0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ae:	f7f9 f845 	bl	800223c <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	69ba      	ldr	r2, [r7, #24]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d803      	bhi.n	80091c6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c4:	d102      	bne.n	80091cc <SPI_WaitOnFlagUntilTimeout+0x30>
 80091c6:	69bb      	ldr	r3, [r7, #24]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d101      	bne.n	80091d0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e00f      	b.n	80091f0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	695a      	ldr	r2, [r3, #20]
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	4013      	ands	r3, r2
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	429a      	cmp	r2, r3
 80091de:	bf0c      	ite	eq
 80091e0:	2301      	moveq	r3, #1
 80091e2:	2300      	movne	r3, #0
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	461a      	mov	r2, r3
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d0df      	beq.n	80091ae <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009204:	095b      	lsrs	r3, r3, #5
 8009206:	3301      	adds	r3, #1
 8009208:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	3301      	adds	r3, #1
 8009210:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	3307      	adds	r3, #7
 8009216:	08db      	lsrs	r3, r3, #3
 8009218:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009222:	4618      	mov	r0, r3
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d101      	bne.n	8009240 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e049      	b.n	80092d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b00      	cmp	r3, #0
 800924a:	d106      	bne.n	800925a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f7f8 fe39 	bl	8001ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2202      	movs	r2, #2
 800925e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3304      	adds	r3, #4
 800926a:	4619      	mov	r1, r3
 800926c:	4610      	mov	r0, r2
 800926e:	f000 f987 	bl	8009580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2201      	movs	r2, #1
 8009296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2201      	movs	r2, #1
 80092a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	f003 0302 	and.w	r3, r3, #2
 80092ee:	2b02      	cmp	r3, #2
 80092f0:	d122      	bne.n	8009338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d11b      	bne.n	8009338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f06f 0202 	mvn.w	r2, #2
 8009308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f90f 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 8009324:	e005      	b.n	8009332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f000 f901 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f912 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0304 	and.w	r3, r3, #4
 8009342:	2b04      	cmp	r3, #4
 8009344:	d122      	bne.n	800938c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b04      	cmp	r3, #4
 8009352:	d11b      	bne.n	800938c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f06f 0204 	mvn.w	r2, #4
 800935c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2202      	movs	r2, #2
 8009362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	699b      	ldr	r3, [r3, #24]
 800936a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936e:	2b00      	cmp	r3, #0
 8009370:	d003      	beq.n	800937a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f8e5 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 8009378:	e005      	b.n	8009386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f8d7 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 f8e8 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f003 0308 	and.w	r3, r3, #8
 8009396:	2b08      	cmp	r3, #8
 8009398:	d122      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d11b      	bne.n	80093e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f06f 0208 	mvn.w	r2, #8
 80093b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2204      	movs	r2, #4
 80093b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	69db      	ldr	r3, [r3, #28]
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d003      	beq.n	80093ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8bb 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 80093cc:	e005      	b.n	80093da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 f8ad 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f8be 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0310 	and.w	r3, r3, #16
 80093ea:	2b10      	cmp	r3, #16
 80093ec:	d122      	bne.n	8009434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	f003 0310 	and.w	r3, r3, #16
 80093f8:	2b10      	cmp	r3, #16
 80093fa:	d11b      	bne.n	8009434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f06f 0210 	mvn.w	r2, #16
 8009404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2208      	movs	r2, #8
 800940a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69db      	ldr	r3, [r3, #28]
 8009412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009416:	2b00      	cmp	r3, #0
 8009418:	d003      	beq.n	8009422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f891 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 8009420:	e005      	b.n	800942e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f883 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f894 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b01      	cmp	r3, #1
 8009440:	d10e      	bne.n	8009460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	2b01      	cmp	r3, #1
 800944e:	d107      	bne.n	8009460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0201 	mvn.w	r2, #1
 8009458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f85d 	bl	800951a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800946a:	2b80      	cmp	r3, #128	; 0x80
 800946c:	d10e      	bne.n	800948c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009478:	2b80      	cmp	r3, #128	; 0x80
 800947a:	d107      	bne.n	800948c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9ac 	bl	80097e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009496:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800949a:	d10e      	bne.n	80094ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a6:	2b80      	cmp	r3, #128	; 0x80
 80094a8:	d107      	bne.n	80094ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 f99f 	bl	80097f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b40      	cmp	r3, #64	; 0x40
 80094c6:	d10e      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b40      	cmp	r3, #64	; 0x40
 80094d4:	d107      	bne.n	80094e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f000 f842 	bl	800956a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691b      	ldr	r3, [r3, #16]
 80094ec:	f003 0320 	and.w	r3, r3, #32
 80094f0:	2b20      	cmp	r3, #32
 80094f2:	d10e      	bne.n	8009512 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f003 0320 	and.w	r3, r3, #32
 80094fe:	2b20      	cmp	r3, #32
 8009500:	d107      	bne.n	8009512 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f06f 0220 	mvn.w	r2, #32
 800950a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 f95f 	bl	80097d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009512:	bf00      	nop
 8009514:	3708      	adds	r7, #8
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800951a:	b480      	push	{r7}
 800951c:	b083      	sub	sp, #12
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
	...

08009580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a40      	ldr	r2, [pc, #256]	; (8009694 <TIM_Base_SetConfig+0x114>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d013      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800959e:	d00f      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a3d      	ldr	r2, [pc, #244]	; (8009698 <TIM_Base_SetConfig+0x118>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00b      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a3c      	ldr	r2, [pc, #240]	; (800969c <TIM_Base_SetConfig+0x11c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d007      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a3b      	ldr	r2, [pc, #236]	; (80096a0 <TIM_Base_SetConfig+0x120>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d003      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a3a      	ldr	r2, [pc, #232]	; (80096a4 <TIM_Base_SetConfig+0x124>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d108      	bne.n	80095d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a2f      	ldr	r2, [pc, #188]	; (8009694 <TIM_Base_SetConfig+0x114>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d01f      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e0:	d01b      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a2c      	ldr	r2, [pc, #176]	; (8009698 <TIM_Base_SetConfig+0x118>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d017      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2b      	ldr	r2, [pc, #172]	; (800969c <TIM_Base_SetConfig+0x11c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d013      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2a      	ldr	r2, [pc, #168]	; (80096a0 <TIM_Base_SetConfig+0x120>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d00f      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a29      	ldr	r2, [pc, #164]	; (80096a4 <TIM_Base_SetConfig+0x124>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d00b      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a28      	ldr	r2, [pc, #160]	; (80096a8 <TIM_Base_SetConfig+0x128>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d007      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a27      	ldr	r2, [pc, #156]	; (80096ac <TIM_Base_SetConfig+0x12c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d003      	beq.n	800961a <TIM_Base_SetConfig+0x9a>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a26      	ldr	r2, [pc, #152]	; (80096b0 <TIM_Base_SetConfig+0x130>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d108      	bne.n	800962c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	4313      	orrs	r3, r2
 800962a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	4313      	orrs	r3, r2
 8009638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	689a      	ldr	r2, [r3, #8]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a10      	ldr	r2, [pc, #64]	; (8009694 <TIM_Base_SetConfig+0x114>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d00f      	beq.n	8009678 <TIM_Base_SetConfig+0xf8>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	4a12      	ldr	r2, [pc, #72]	; (80096a4 <TIM_Base_SetConfig+0x124>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d00b      	beq.n	8009678 <TIM_Base_SetConfig+0xf8>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a11      	ldr	r2, [pc, #68]	; (80096a8 <TIM_Base_SetConfig+0x128>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d007      	beq.n	8009678 <TIM_Base_SetConfig+0xf8>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a10      	ldr	r2, [pc, #64]	; (80096ac <TIM_Base_SetConfig+0x12c>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0xf8>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a0f      	ldr	r2, [pc, #60]	; (80096b0 <TIM_Base_SetConfig+0x130>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d103      	bne.n	8009680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	615a      	str	r2, [r3, #20]
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40010000 	.word	0x40010000
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40014400 	.word	0x40014400
 80096b0:	40014800 	.word	0x40014800

080096b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d101      	bne.n	80096cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e06d      	b.n	80097a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a30      	ldr	r2, [pc, #192]	; (80097b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d004      	beq.n	8009700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a2f      	ldr	r2, [pc, #188]	; (80097b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d108      	bne.n	8009712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	4313      	orrs	r3, r2
 8009710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	4313      	orrs	r3, r2
 8009722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68fa      	ldr	r2, [r7, #12]
 800972a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a20      	ldr	r2, [pc, #128]	; (80097b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d022      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800973e:	d01d      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a1d      	ldr	r2, [pc, #116]	; (80097bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d018      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a1c      	ldr	r2, [pc, #112]	; (80097c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d013      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a1a      	ldr	r2, [pc, #104]	; (80097c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d00e      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a15      	ldr	r2, [pc, #84]	; (80097b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d009      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a16      	ldr	r2, [pc, #88]	; (80097c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d004      	beq.n	800977c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a15      	ldr	r2, [pc, #84]	; (80097cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d10c      	bne.n	8009796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	4313      	orrs	r3, r2
 800978c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	40010000 	.word	0x40010000
 80097b8:	40010400 	.word	0x40010400
 80097bc:	40000400 	.word	0x40000400
 80097c0:	40000800 	.word	0x40000800
 80097c4:	40000c00 	.word	0x40000c00
 80097c8:	40001800 	.word	0x40001800
 80097cc:	40014000 	.word	0x40014000

080097d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	e042      	b.n	80098a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009824:	2b00      	cmp	r3, #0
 8009826:	d106      	bne.n	8009836 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f7f8 fbbf 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2224      	movs	r2, #36	; 0x24
 800983a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 0201 	bic.w	r2, r2, #1
 800984c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 fc80 	bl	800a154 <UART_SetConfig>
 8009854:	4603      	mov	r3, r0
 8009856:	2b01      	cmp	r3, #1
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e022      	b.n	80098a4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f001 f9dc 	bl	800ac24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800987a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	689a      	ldr	r2, [r3, #8]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800988a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 fa63 	bl	800ad68 <UART_CheckIdleState>
 80098a2:	4603      	mov	r3, r0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08a      	sub	sp, #40	; 0x28
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	4613      	mov	r3, r2
 80098ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098c2:	2b20      	cmp	r3, #32
 80098c4:	f040 8083 	bne.w	80099ce <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <HAL_UART_Transmit+0x28>
 80098ce:	88fb      	ldrh	r3, [r7, #6]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d101      	bne.n	80098d8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e07b      	b.n	80099d0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d101      	bne.n	80098e6 <HAL_UART_Transmit+0x3a>
 80098e2:	2302      	movs	r3, #2
 80098e4:	e074      	b.n	80099d0 <HAL_UART_Transmit+0x124>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2221      	movs	r2, #33	; 0x21
 80098fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80098fe:	f7f8 fc9d 	bl	800223c <HAL_GetTick>
 8009902:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	88fa      	ldrh	r2, [r7, #6]
 8009910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800991c:	d108      	bne.n	8009930 <HAL_UART_Transmit+0x84>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d104      	bne.n	8009930 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009926:	2300      	movs	r3, #0
 8009928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	61bb      	str	r3, [r7, #24]
 800992e:	e003      	b.n	8009938 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009940:	e02c      	b.n	800999c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	9300      	str	r3, [sp, #0]
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	2200      	movs	r2, #0
 800994a:	2180      	movs	r1, #128	; 0x80
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f001 fa56 	bl	800adfe <UART_WaitOnFlagUntilTimeout>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e039      	b.n	80099d0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d10b      	bne.n	800997a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	461a      	mov	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009970:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	3302      	adds	r3, #2
 8009976:	61bb      	str	r3, [r7, #24]
 8009978:	e007      	b.n	800998a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	781a      	ldrb	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	3301      	adds	r3, #1
 8009988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009990:	b29b      	uxth	r3, r3
 8009992:	3b01      	subs	r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1cc      	bne.n	8009942 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2200      	movs	r2, #0
 80099b0:	2140      	movs	r1, #64	; 0x40
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f001 fa23 	bl	800adfe <UART_WaitOnFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e006      	b.n	80099d0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2220      	movs	r2, #32
 80099c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80099ca:	2300      	movs	r3, #0
 80099cc:	e000      	b.n	80099d0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80099ce:	2302      	movs	r3, #2
  }
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b0ba      	sub	sp, #232	; 0xe8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	69db      	ldr	r3, [r3, #28]
 80099e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009a02:	f640 030f 	movw	r3, #2063	; 0x80f
 8009a06:	4013      	ands	r3, r2
 8009a08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009a0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11b      	bne.n	8009a4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d015      	beq.n	8009a4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d105      	bne.n	8009a38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d009      	beq.n	8009a4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 835a 	beq.w	800a0f6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	4798      	blx	r3
      }
      return;
 8009a4a:	e354      	b.n	800a0f6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 811f 	beq.w	8009c94 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009a5a:	4b8b      	ldr	r3, [pc, #556]	; (8009c88 <HAL_UART_IRQHandler+0x2b0>)
 8009a5c:	4013      	ands	r3, r2
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009a66:	4b89      	ldr	r3, [pc, #548]	; (8009c8c <HAL_UART_IRQHandler+0x2b4>)
 8009a68:	4013      	ands	r3, r2
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	f000 8112 	beq.w	8009c94 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d011      	beq.n	8009aa0 <HAL_UART_IRQHandler+0xc8>
 8009a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d00b      	beq.n	8009aa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a96:	f043 0201 	orr.w	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d011      	beq.n	8009ad0 <HAL_UART_IRQHandler+0xf8>
 8009aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00b      	beq.n	8009ad0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2202      	movs	r2, #2
 8009abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ac6:	f043 0204 	orr.w	r2, r3, #4
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d011      	beq.n	8009b00 <HAL_UART_IRQHandler+0x128>
 8009adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ae0:	f003 0301 	and.w	r3, r3, #1
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d00b      	beq.n	8009b00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2204      	movs	r2, #4
 8009aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af6:	f043 0202 	orr.w	r2, r3, #2
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d017      	beq.n	8009b3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d105      	bne.n	8009b24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009b18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009b1c:	4b5a      	ldr	r3, [pc, #360]	; (8009c88 <HAL_UART_IRQHandler+0x2b0>)
 8009b1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00b      	beq.n	8009b3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2208      	movs	r2, #8
 8009b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b32:	f043 0208 	orr.w	r2, r3, #8
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d012      	beq.n	8009b6e <HAL_UART_IRQHandler+0x196>
 8009b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d00c      	beq.n	8009b6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b64:	f043 0220 	orr.w	r2, r3, #32
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 82c0 	beq.w	800a0fa <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b7e:	f003 0320 	and.w	r3, r3, #32
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d013      	beq.n	8009bae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d105      	bne.n	8009b9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d007      	beq.n	8009bae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d005      	beq.n	8009bd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d04f      	beq.n	8009c72 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 f9dc 	bl	800af90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be2:	2b40      	cmp	r3, #64	; 0x40
 8009be4:	d141      	bne.n	8009c6a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3308      	adds	r3, #8
 8009bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009bf4:	e853 3f00 	ldrex	r3, [r3]
 8009bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009bfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009c12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009c1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009c22:	e841 2300 	strex	r3, r2, [r1]
 8009c26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009c2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1d9      	bne.n	8009be6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d013      	beq.n	8009c62 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c3e:	4a14      	ldr	r2, [pc, #80]	; (8009c90 <HAL_UART_IRQHandler+0x2b8>)
 8009c40:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7f8 ff62 	bl	8002b10 <HAL_DMA_Abort_IT>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d017      	beq.n	8009c82 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009c5c:	4610      	mov	r0, r2
 8009c5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c60:	e00f      	b.n	8009c82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa60 	bl	800a128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c68:	e00b      	b.n	8009c82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fa5c 	bl	800a128 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c70:	e007      	b.n	8009c82 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fa58 	bl	800a128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009c80:	e23b      	b.n	800a0fa <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009c82:	bf00      	nop
    return;
 8009c84:	e239      	b.n	800a0fa <HAL_UART_IRQHandler+0x722>
 8009c86:	bf00      	nop
 8009c88:	10000001 	.word	0x10000001
 8009c8c:	04000120 	.word	0x04000120
 8009c90:	0800b05d 	.word	0x0800b05d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c98:	2b01      	cmp	r3, #1
 8009c9a:	f040 81ce 	bne.w	800a03a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ca2:	f003 0310 	and.w	r3, r3, #16
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 81c7 	beq.w	800a03a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cb0:	f003 0310 	and.w	r3, r3, #16
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 81c0 	beq.w	800a03a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2210      	movs	r2, #16
 8009cc0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ccc:	2b40      	cmp	r3, #64	; 0x40
 8009cce:	f040 813b 	bne.w	8009f48 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a8b      	ldr	r2, [pc, #556]	; (8009f08 <HAL_UART_IRQHandler+0x530>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d059      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a89      	ldr	r2, [pc, #548]	; (8009f0c <HAL_UART_IRQHandler+0x534>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d053      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a87      	ldr	r2, [pc, #540]	; (8009f10 <HAL_UART_IRQHandler+0x538>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d04d      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a85      	ldr	r2, [pc, #532]	; (8009f14 <HAL_UART_IRQHandler+0x53c>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d047      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a83      	ldr	r2, [pc, #524]	; (8009f18 <HAL_UART_IRQHandler+0x540>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d041      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a81      	ldr	r2, [pc, #516]	; (8009f1c <HAL_UART_IRQHandler+0x544>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d03b      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a7f      	ldr	r2, [pc, #508]	; (8009f20 <HAL_UART_IRQHandler+0x548>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d035      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a7d      	ldr	r2, [pc, #500]	; (8009f24 <HAL_UART_IRQHandler+0x54c>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d02f      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a7b      	ldr	r2, [pc, #492]	; (8009f28 <HAL_UART_IRQHandler+0x550>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d029      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a79      	ldr	r2, [pc, #484]	; (8009f2c <HAL_UART_IRQHandler+0x554>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d023      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a77      	ldr	r2, [pc, #476]	; (8009f30 <HAL_UART_IRQHandler+0x558>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d01d      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a75      	ldr	r2, [pc, #468]	; (8009f34 <HAL_UART_IRQHandler+0x55c>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d017      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a73      	ldr	r2, [pc, #460]	; (8009f38 <HAL_UART_IRQHandler+0x560>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d011      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a71      	ldr	r2, [pc, #452]	; (8009f3c <HAL_UART_IRQHandler+0x564>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00b      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a6f      	ldr	r2, [pc, #444]	; (8009f40 <HAL_UART_IRQHandler+0x568>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d005      	beq.n	8009d92 <HAL_UART_IRQHandler+0x3ba>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a6d      	ldr	r2, [pc, #436]	; (8009f44 <HAL_UART_IRQHandler+0x56c>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d105      	bne.n	8009d9e <HAL_UART_IRQHandler+0x3c6>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	e004      	b.n	8009da8 <HAL_UART_IRQHandler+0x3d0>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	685b      	ldr	r3, [r3, #4]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009dac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	f000 81a4 	beq.w	800a0fe <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009dbc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	f080 819c 	bcs.w	800a0fe <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dda:	f000 8086 	beq.w	8009eea <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009dea:	e853 3f00 	ldrex	r3, [r3]
 8009dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009df6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dfa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009e0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009e14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009e18:	e841 2300 	strex	r3, r2, [r1]
 8009e1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009e20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1da      	bne.n	8009dde <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3308      	adds	r3, #8
 8009e2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e32:	e853 3f00 	ldrex	r3, [r3]
 8009e36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3a:	f023 0301 	bic.w	r3, r3, #1
 8009e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3308      	adds	r3, #8
 8009e48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009e4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009e50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009e54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009e58:	e841 2300 	strex	r3, r2, [r1]
 8009e5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009e5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1e1      	bne.n	8009e28 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3308      	adds	r3, #8
 8009e84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009e88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009e8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009e8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e3      	bne.n	8009e64 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009eb2:	e853 3f00 	ldrex	r3, [r3]
 8009eb6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eba:	f023 0310 	bic.w	r3, r3, #16
 8009ebe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ece:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ed2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e4      	bne.n	8009eaa <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7f8 faf5 	bl	80024d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 f91c 	bl	800a13c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009f04:	e0fb      	b.n	800a0fe <HAL_UART_IRQHandler+0x726>
 8009f06:	bf00      	nop
 8009f08:	40020010 	.word	0x40020010
 8009f0c:	40020028 	.word	0x40020028
 8009f10:	40020040 	.word	0x40020040
 8009f14:	40020058 	.word	0x40020058
 8009f18:	40020070 	.word	0x40020070
 8009f1c:	40020088 	.word	0x40020088
 8009f20:	400200a0 	.word	0x400200a0
 8009f24:	400200b8 	.word	0x400200b8
 8009f28:	40020410 	.word	0x40020410
 8009f2c:	40020428 	.word	0x40020428
 8009f30:	40020440 	.word	0x40020440
 8009f34:	40020458 	.word	0x40020458
 8009f38:	40020470 	.word	0x40020470
 8009f3c:	40020488 	.word	0x40020488
 8009f40:	400204a0 	.word	0x400204a0
 8009f44:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	f000 80cc 	beq.w	800a102 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009f6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	f000 80c7 	beq.w	800a102 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f7c:	e853 3f00 	ldrex	r3, [r3]
 8009f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f96:	647b      	str	r3, [r7, #68]	; 0x44
 8009f98:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f9e:	e841 2300 	strex	r3, r2, [r1]
 8009fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1e4      	bne.n	8009f74 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3308      	adds	r3, #8
 8009fb0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb4:	e853 3f00 	ldrex	r3, [r3]
 8009fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	4b54      	ldr	r3, [pc, #336]	; (800a110 <HAL_UART_IRQHandler+0x738>)
 8009fbe:	4013      	ands	r3, r2
 8009fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3308      	adds	r3, #8
 8009fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009fce:	633a      	str	r2, [r7, #48]	; 0x30
 8009fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fd6:	e841 2300 	strex	r3, r2, [r1]
 8009fda:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1e3      	bne.n	8009faa <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2220      	movs	r2, #32
 8009fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	e853 3f00 	ldrex	r3, [r3]
 800a002:	60fb      	str	r3, [r7, #12]
   return(result);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f023 0310 	bic.w	r3, r3, #16
 800a00a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a018:	61fb      	str	r3, [r7, #28]
 800a01a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a01c:	69b9      	ldr	r1, [r7, #24]
 800a01e:	69fa      	ldr	r2, [r7, #28]
 800a020:	e841 2300 	strex	r3, r2, [r1]
 800a024:	617b      	str	r3, [r7, #20]
   return(result);
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1e4      	bne.n	8009ff6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a02c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a030:	4619      	mov	r1, r3
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f882 	bl	800a13c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a038:	e063      	b.n	800a102 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a03e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <HAL_UART_IRQHandler+0x68c>
 800a046:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a04a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d008      	beq.n	800a064 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a05a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 f83e 	bl	800b0de <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a062:	e051      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d014      	beq.n	800a09a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d105      	bne.n	800a088 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a080:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d008      	beq.n	800a09a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d03a      	beq.n	800a106 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	4798      	blx	r3
    }
    return;
 800a098:	e035      	b.n	800a106 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d009      	beq.n	800a0ba <HAL_UART_IRQHandler+0x6e2>
 800a0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 ffe8 	bl	800b088 <UART_EndTransmit_IT>
    return;
 800a0b8:	e026      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <HAL_UART_IRQHandler+0x702>
 800a0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f001 f817 	bl	800b106 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0d8:	e016      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d010      	beq.n	800a108 <HAL_UART_IRQHandler+0x730>
 800a0e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	da0c      	bge.n	800a108 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 ffff 	bl	800b0f2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a0f4:	e008      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
      return;
 800a0f6:	bf00      	nop
 800a0f8:	e006      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
    return;
 800a0fa:	bf00      	nop
 800a0fc:	e004      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
      return;
 800a0fe:	bf00      	nop
 800a100:	e002      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
      return;
 800a102:	bf00      	nop
 800a104:	e000      	b.n	800a108 <HAL_UART_IRQHandler+0x730>
    return;
 800a106:	bf00      	nop
  }
}
 800a108:	37e8      	adds	r7, #232	; 0xe8
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	effffffe 	.word	0xeffffffe

0800a114 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a158:	b092      	sub	sp, #72	; 0x48
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	689a      	ldr	r2, [r3, #8]
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	431a      	orrs	r2, r3
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	431a      	orrs	r2, r3
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	4313      	orrs	r3, r2
 800a17a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4bbe      	ldr	r3, [pc, #760]	; (800a47c <UART_SetConfig+0x328>)
 800a184:	4013      	ands	r3, r2
 800a186:	697a      	ldr	r2, [r7, #20]
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a18c:	430b      	orrs	r3, r1
 800a18e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4ab3      	ldr	r2, [pc, #716]	; (800a480 <UART_SetConfig+0x32c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d004      	beq.n	800a1c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	4baf      	ldr	r3, [pc, #700]	; (800a484 <UART_SetConfig+0x330>)
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	6812      	ldr	r2, [r2, #0]
 800a1ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1d0:	430b      	orrs	r3, r1
 800a1d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1da:	f023 010f 	bic.w	r1, r3, #15
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4aa6      	ldr	r2, [pc, #664]	; (800a488 <UART_SetConfig+0x334>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d177      	bne.n	800a2e4 <UART_SetConfig+0x190>
 800a1f4:	4ba5      	ldr	r3, [pc, #660]	; (800a48c <UART_SetConfig+0x338>)
 800a1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1fc:	2b28      	cmp	r3, #40	; 0x28
 800a1fe:	d86d      	bhi.n	800a2dc <UART_SetConfig+0x188>
 800a200:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <UART_SetConfig+0xb4>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a2ad 	.word	0x0800a2ad
 800a20c:	0800a2dd 	.word	0x0800a2dd
 800a210:	0800a2dd 	.word	0x0800a2dd
 800a214:	0800a2dd 	.word	0x0800a2dd
 800a218:	0800a2dd 	.word	0x0800a2dd
 800a21c:	0800a2dd 	.word	0x0800a2dd
 800a220:	0800a2dd 	.word	0x0800a2dd
 800a224:	0800a2dd 	.word	0x0800a2dd
 800a228:	0800a2b5 	.word	0x0800a2b5
 800a22c:	0800a2dd 	.word	0x0800a2dd
 800a230:	0800a2dd 	.word	0x0800a2dd
 800a234:	0800a2dd 	.word	0x0800a2dd
 800a238:	0800a2dd 	.word	0x0800a2dd
 800a23c:	0800a2dd 	.word	0x0800a2dd
 800a240:	0800a2dd 	.word	0x0800a2dd
 800a244:	0800a2dd 	.word	0x0800a2dd
 800a248:	0800a2bd 	.word	0x0800a2bd
 800a24c:	0800a2dd 	.word	0x0800a2dd
 800a250:	0800a2dd 	.word	0x0800a2dd
 800a254:	0800a2dd 	.word	0x0800a2dd
 800a258:	0800a2dd 	.word	0x0800a2dd
 800a25c:	0800a2dd 	.word	0x0800a2dd
 800a260:	0800a2dd 	.word	0x0800a2dd
 800a264:	0800a2dd 	.word	0x0800a2dd
 800a268:	0800a2c5 	.word	0x0800a2c5
 800a26c:	0800a2dd 	.word	0x0800a2dd
 800a270:	0800a2dd 	.word	0x0800a2dd
 800a274:	0800a2dd 	.word	0x0800a2dd
 800a278:	0800a2dd 	.word	0x0800a2dd
 800a27c:	0800a2dd 	.word	0x0800a2dd
 800a280:	0800a2dd 	.word	0x0800a2dd
 800a284:	0800a2dd 	.word	0x0800a2dd
 800a288:	0800a2cd 	.word	0x0800a2cd
 800a28c:	0800a2dd 	.word	0x0800a2dd
 800a290:	0800a2dd 	.word	0x0800a2dd
 800a294:	0800a2dd 	.word	0x0800a2dd
 800a298:	0800a2dd 	.word	0x0800a2dd
 800a29c:	0800a2dd 	.word	0x0800a2dd
 800a2a0:	0800a2dd 	.word	0x0800a2dd
 800a2a4:	0800a2dd 	.word	0x0800a2dd
 800a2a8:	0800a2d5 	.word	0x0800a2d5
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2b2:	e222      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ba:	e21e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2bc:	2308      	movs	r3, #8
 800a2be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2c2:	e21a      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ca:	e216      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2cc:	2320      	movs	r3, #32
 800a2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2d2:	e212      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2d4:	2340      	movs	r3, #64	; 0x40
 800a2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2da:	e20e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2dc:	2380      	movs	r3, #128	; 0x80
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e20a      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a69      	ldr	r2, [pc, #420]	; (800a490 <UART_SetConfig+0x33c>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d130      	bne.n	800a350 <UART_SetConfig+0x1fc>
 800a2ee:	4b67      	ldr	r3, [pc, #412]	; (800a48c <UART_SetConfig+0x338>)
 800a2f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	2b05      	cmp	r3, #5
 800a2f8:	d826      	bhi.n	800a348 <UART_SetConfig+0x1f4>
 800a2fa:	a201      	add	r2, pc, #4	; (adr r2, 800a300 <UART_SetConfig+0x1ac>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a319 	.word	0x0800a319
 800a304:	0800a321 	.word	0x0800a321
 800a308:	0800a329 	.word	0x0800a329
 800a30c:	0800a331 	.word	0x0800a331
 800a310:	0800a339 	.word	0x0800a339
 800a314:	0800a341 	.word	0x0800a341
 800a318:	2300      	movs	r3, #0
 800a31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31e:	e1ec      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a320:	2304      	movs	r3, #4
 800a322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a326:	e1e8      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a328:	2308      	movs	r3, #8
 800a32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32e:	e1e4      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a330:	2310      	movs	r3, #16
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a336:	e1e0      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a338:	2320      	movs	r3, #32
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33e:	e1dc      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a340:	2340      	movs	r3, #64	; 0x40
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a346:	e1d8      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a348:	2380      	movs	r3, #128	; 0x80
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34e:	e1d4      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a4f      	ldr	r2, [pc, #316]	; (800a494 <UART_SetConfig+0x340>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d130      	bne.n	800a3bc <UART_SetConfig+0x268>
 800a35a:	4b4c      	ldr	r3, [pc, #304]	; (800a48c <UART_SetConfig+0x338>)
 800a35c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	2b05      	cmp	r3, #5
 800a364:	d826      	bhi.n	800a3b4 <UART_SetConfig+0x260>
 800a366:	a201      	add	r2, pc, #4	; (adr r2, 800a36c <UART_SetConfig+0x218>)
 800a368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a36c:	0800a385 	.word	0x0800a385
 800a370:	0800a38d 	.word	0x0800a38d
 800a374:	0800a395 	.word	0x0800a395
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a3a5 	.word	0x0800a3a5
 800a380:	0800a3ad 	.word	0x0800a3ad
 800a384:	2300      	movs	r3, #0
 800a386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38a:	e1b6      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a38c:	2304      	movs	r3, #4
 800a38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a392:	e1b2      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a394:	2308      	movs	r3, #8
 800a396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39a:	e1ae      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a39c:	2310      	movs	r3, #16
 800a39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3a2:	e1aa      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a3a4:	2320      	movs	r3, #32
 800a3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3aa:	e1a6      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a3ac:	2340      	movs	r3, #64	; 0x40
 800a3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b2:	e1a2      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a3b4:	2380      	movs	r3, #128	; 0x80
 800a3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ba:	e19e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a35      	ldr	r2, [pc, #212]	; (800a498 <UART_SetConfig+0x344>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d130      	bne.n	800a428 <UART_SetConfig+0x2d4>
 800a3c6:	4b31      	ldr	r3, [pc, #196]	; (800a48c <UART_SetConfig+0x338>)
 800a3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ca:	f003 0307 	and.w	r3, r3, #7
 800a3ce:	2b05      	cmp	r3, #5
 800a3d0:	d826      	bhi.n	800a420 <UART_SetConfig+0x2cc>
 800a3d2:	a201      	add	r2, pc, #4	; (adr r2, 800a3d8 <UART_SetConfig+0x284>)
 800a3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a3f9 	.word	0x0800a3f9
 800a3e0:	0800a401 	.word	0x0800a401
 800a3e4:	0800a409 	.word	0x0800a409
 800a3e8:	0800a411 	.word	0x0800a411
 800a3ec:	0800a419 	.word	0x0800a419
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f6:	e180      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fe:	e17c      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a400:	2308      	movs	r3, #8
 800a402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a406:	e178      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a408:	2310      	movs	r3, #16
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40e:	e174      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a410:	2320      	movs	r3, #32
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a416:	e170      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a418:	2340      	movs	r3, #64	; 0x40
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41e:	e16c      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a420:	2380      	movs	r3, #128	; 0x80
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a426:	e168      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4a1b      	ldr	r2, [pc, #108]	; (800a49c <UART_SetConfig+0x348>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d142      	bne.n	800a4b8 <UART_SetConfig+0x364>
 800a432:	4b16      	ldr	r3, [pc, #88]	; (800a48c <UART_SetConfig+0x338>)
 800a434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	d838      	bhi.n	800a4b0 <UART_SetConfig+0x35c>
 800a43e:	a201      	add	r2, pc, #4	; (adr r2, 800a444 <UART_SetConfig+0x2f0>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a45d 	.word	0x0800a45d
 800a448:	0800a465 	.word	0x0800a465
 800a44c:	0800a46d 	.word	0x0800a46d
 800a450:	0800a475 	.word	0x0800a475
 800a454:	0800a4a1 	.word	0x0800a4a1
 800a458:	0800a4a9 	.word	0x0800a4a9
 800a45c:	2300      	movs	r3, #0
 800a45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a462:	e14a      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a464:	2304      	movs	r3, #4
 800a466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46a:	e146      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a46c:	2308      	movs	r3, #8
 800a46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a472:	e142      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a474:	2310      	movs	r3, #16
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47a:	e13e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a47c:	cfff69f3 	.word	0xcfff69f3
 800a480:	58000c00 	.word	0x58000c00
 800a484:	11fff4ff 	.word	0x11fff4ff
 800a488:	40011000 	.word	0x40011000
 800a48c:	58024400 	.word	0x58024400
 800a490:	40004400 	.word	0x40004400
 800a494:	40004800 	.word	0x40004800
 800a498:	40004c00 	.word	0x40004c00
 800a49c:	40005000 	.word	0x40005000
 800a4a0:	2320      	movs	r3, #32
 800a4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4a6:	e128      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a4a8:	2340      	movs	r3, #64	; 0x40
 800a4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4ae:	e124      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a4b0:	2380      	movs	r3, #128	; 0x80
 800a4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a4b6:	e120      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4acb      	ldr	r2, [pc, #812]	; (800a7ec <UART_SetConfig+0x698>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d176      	bne.n	800a5b0 <UART_SetConfig+0x45c>
 800a4c2:	4bcb      	ldr	r3, [pc, #812]	; (800a7f0 <UART_SetConfig+0x69c>)
 800a4c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a4ca:	2b28      	cmp	r3, #40	; 0x28
 800a4cc:	d86c      	bhi.n	800a5a8 <UART_SetConfig+0x454>
 800a4ce:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <UART_SetConfig+0x380>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a579 	.word	0x0800a579
 800a4d8:	0800a5a9 	.word	0x0800a5a9
 800a4dc:	0800a5a9 	.word	0x0800a5a9
 800a4e0:	0800a5a9 	.word	0x0800a5a9
 800a4e4:	0800a5a9 	.word	0x0800a5a9
 800a4e8:	0800a5a9 	.word	0x0800a5a9
 800a4ec:	0800a5a9 	.word	0x0800a5a9
 800a4f0:	0800a5a9 	.word	0x0800a5a9
 800a4f4:	0800a581 	.word	0x0800a581
 800a4f8:	0800a5a9 	.word	0x0800a5a9
 800a4fc:	0800a5a9 	.word	0x0800a5a9
 800a500:	0800a5a9 	.word	0x0800a5a9
 800a504:	0800a5a9 	.word	0x0800a5a9
 800a508:	0800a5a9 	.word	0x0800a5a9
 800a50c:	0800a5a9 	.word	0x0800a5a9
 800a510:	0800a5a9 	.word	0x0800a5a9
 800a514:	0800a589 	.word	0x0800a589
 800a518:	0800a5a9 	.word	0x0800a5a9
 800a51c:	0800a5a9 	.word	0x0800a5a9
 800a520:	0800a5a9 	.word	0x0800a5a9
 800a524:	0800a5a9 	.word	0x0800a5a9
 800a528:	0800a5a9 	.word	0x0800a5a9
 800a52c:	0800a5a9 	.word	0x0800a5a9
 800a530:	0800a5a9 	.word	0x0800a5a9
 800a534:	0800a591 	.word	0x0800a591
 800a538:	0800a5a9 	.word	0x0800a5a9
 800a53c:	0800a5a9 	.word	0x0800a5a9
 800a540:	0800a5a9 	.word	0x0800a5a9
 800a544:	0800a5a9 	.word	0x0800a5a9
 800a548:	0800a5a9 	.word	0x0800a5a9
 800a54c:	0800a5a9 	.word	0x0800a5a9
 800a550:	0800a5a9 	.word	0x0800a5a9
 800a554:	0800a599 	.word	0x0800a599
 800a558:	0800a5a9 	.word	0x0800a5a9
 800a55c:	0800a5a9 	.word	0x0800a5a9
 800a560:	0800a5a9 	.word	0x0800a5a9
 800a564:	0800a5a9 	.word	0x0800a5a9
 800a568:	0800a5a9 	.word	0x0800a5a9
 800a56c:	0800a5a9 	.word	0x0800a5a9
 800a570:	0800a5a9 	.word	0x0800a5a9
 800a574:	0800a5a1 	.word	0x0800a5a1
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a57e:	e0bc      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a580:	2304      	movs	r3, #4
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a586:	e0b8      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a588:	2308      	movs	r3, #8
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a58e:	e0b4      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a590:	2310      	movs	r3, #16
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a596:	e0b0      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a598:	2320      	movs	r3, #32
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a59e:	e0ac      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a5a0:	2340      	movs	r3, #64	; 0x40
 800a5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5a6:	e0a8      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a5a8:	2380      	movs	r3, #128	; 0x80
 800a5aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ae:	e0a4      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a8f      	ldr	r2, [pc, #572]	; (800a7f4 <UART_SetConfig+0x6a0>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d130      	bne.n	800a61c <UART_SetConfig+0x4c8>
 800a5ba:	4b8d      	ldr	r3, [pc, #564]	; (800a7f0 <UART_SetConfig+0x69c>)
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5be:	f003 0307 	and.w	r3, r3, #7
 800a5c2:	2b05      	cmp	r3, #5
 800a5c4:	d826      	bhi.n	800a614 <UART_SetConfig+0x4c0>
 800a5c6:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <UART_SetConfig+0x478>)
 800a5c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5cc:	0800a5e5 	.word	0x0800a5e5
 800a5d0:	0800a5ed 	.word	0x0800a5ed
 800a5d4:	0800a5f5 	.word	0x0800a5f5
 800a5d8:	0800a5fd 	.word	0x0800a5fd
 800a5dc:	0800a605 	.word	0x0800a605
 800a5e0:	0800a60d 	.word	0x0800a60d
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5ea:	e086      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5f2:	e082      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a5f4:	2308      	movs	r3, #8
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a5fa:	e07e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a602:	e07a      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a604:	2320      	movs	r3, #32
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a60a:	e076      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a60c:	2340      	movs	r3, #64	; 0x40
 800a60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a612:	e072      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a614:	2380      	movs	r3, #128	; 0x80
 800a616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a61a:	e06e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4a75      	ldr	r2, [pc, #468]	; (800a7f8 <UART_SetConfig+0x6a4>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d130      	bne.n	800a688 <UART_SetConfig+0x534>
 800a626:	4b72      	ldr	r3, [pc, #456]	; (800a7f0 <UART_SetConfig+0x69c>)
 800a628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62a:	f003 0307 	and.w	r3, r3, #7
 800a62e:	2b05      	cmp	r3, #5
 800a630:	d826      	bhi.n	800a680 <UART_SetConfig+0x52c>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <UART_SetConfig+0x4e4>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a651 	.word	0x0800a651
 800a63c:	0800a659 	.word	0x0800a659
 800a640:	0800a661 	.word	0x0800a661
 800a644:	0800a669 	.word	0x0800a669
 800a648:	0800a671 	.word	0x0800a671
 800a64c:	0800a679 	.word	0x0800a679
 800a650:	2300      	movs	r3, #0
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a656:	e050      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a658:	2304      	movs	r3, #4
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a65e:	e04c      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a660:	2308      	movs	r3, #8
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a666:	e048      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a668:	2310      	movs	r3, #16
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a66e:	e044      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a670:	2320      	movs	r3, #32
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a676:	e040      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a678:	2340      	movs	r3, #64	; 0x40
 800a67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a67e:	e03c      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a680:	2380      	movs	r3, #128	; 0x80
 800a682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a686:	e038      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	4a5b      	ldr	r2, [pc, #364]	; (800a7fc <UART_SetConfig+0x6a8>)
 800a68e:	4293      	cmp	r3, r2
 800a690:	d130      	bne.n	800a6f4 <UART_SetConfig+0x5a0>
 800a692:	4b57      	ldr	r3, [pc, #348]	; (800a7f0 <UART_SetConfig+0x69c>)
 800a694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a696:	f003 0307 	and.w	r3, r3, #7
 800a69a:	2b05      	cmp	r3, #5
 800a69c:	d826      	bhi.n	800a6ec <UART_SetConfig+0x598>
 800a69e:	a201      	add	r2, pc, #4	; (adr r2, 800a6a4 <UART_SetConfig+0x550>)
 800a6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a4:	0800a6bd 	.word	0x0800a6bd
 800a6a8:	0800a6c5 	.word	0x0800a6c5
 800a6ac:	0800a6cd 	.word	0x0800a6cd
 800a6b0:	0800a6d5 	.word	0x0800a6d5
 800a6b4:	0800a6dd 	.word	0x0800a6dd
 800a6b8:	0800a6e5 	.word	0x0800a6e5
 800a6bc:	2302      	movs	r3, #2
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6c2:	e01a      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6c4:	2304      	movs	r3, #4
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ca:	e016      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6cc:	2308      	movs	r3, #8
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6d2:	e012      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6d4:	2310      	movs	r3, #16
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6da:	e00e      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6dc:	2320      	movs	r3, #32
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6e2:	e00a      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6e4:	2340      	movs	r3, #64	; 0x40
 800a6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6ea:	e006      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6ec:	2380      	movs	r3, #128	; 0x80
 800a6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a6f2:	e002      	b.n	800a6fa <UART_SetConfig+0x5a6>
 800a6f4:	2380      	movs	r3, #128	; 0x80
 800a6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a3f      	ldr	r2, [pc, #252]	; (800a7fc <UART_SetConfig+0x6a8>)
 800a700:	4293      	cmp	r3, r2
 800a702:	f040 80f8 	bne.w	800a8f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a706:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a70a:	2b20      	cmp	r3, #32
 800a70c:	dc46      	bgt.n	800a79c <UART_SetConfig+0x648>
 800a70e:	2b02      	cmp	r3, #2
 800a710:	f2c0 8082 	blt.w	800a818 <UART_SetConfig+0x6c4>
 800a714:	3b02      	subs	r3, #2
 800a716:	2b1e      	cmp	r3, #30
 800a718:	d87e      	bhi.n	800a818 <UART_SetConfig+0x6c4>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <UART_SetConfig+0x5cc>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a7a3 	.word	0x0800a7a3
 800a724:	0800a819 	.word	0x0800a819
 800a728:	0800a7ab 	.word	0x0800a7ab
 800a72c:	0800a819 	.word	0x0800a819
 800a730:	0800a819 	.word	0x0800a819
 800a734:	0800a819 	.word	0x0800a819
 800a738:	0800a7bb 	.word	0x0800a7bb
 800a73c:	0800a819 	.word	0x0800a819
 800a740:	0800a819 	.word	0x0800a819
 800a744:	0800a819 	.word	0x0800a819
 800a748:	0800a819 	.word	0x0800a819
 800a74c:	0800a819 	.word	0x0800a819
 800a750:	0800a819 	.word	0x0800a819
 800a754:	0800a819 	.word	0x0800a819
 800a758:	0800a7cb 	.word	0x0800a7cb
 800a75c:	0800a819 	.word	0x0800a819
 800a760:	0800a819 	.word	0x0800a819
 800a764:	0800a819 	.word	0x0800a819
 800a768:	0800a819 	.word	0x0800a819
 800a76c:	0800a819 	.word	0x0800a819
 800a770:	0800a819 	.word	0x0800a819
 800a774:	0800a819 	.word	0x0800a819
 800a778:	0800a819 	.word	0x0800a819
 800a77c:	0800a819 	.word	0x0800a819
 800a780:	0800a819 	.word	0x0800a819
 800a784:	0800a819 	.word	0x0800a819
 800a788:	0800a819 	.word	0x0800a819
 800a78c:	0800a819 	.word	0x0800a819
 800a790:	0800a819 	.word	0x0800a819
 800a794:	0800a819 	.word	0x0800a819
 800a798:	0800a80b 	.word	0x0800a80b
 800a79c:	2b40      	cmp	r3, #64	; 0x40
 800a79e:	d037      	beq.n	800a810 <UART_SetConfig+0x6bc>
 800a7a0:	e03a      	b.n	800a818 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a7a2:	f7fb fa05 	bl	8005bb0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a7a8:	e03c      	b.n	800a824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fb fa14 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7b8:	e034      	b.n	800a824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7ba:	f107 0318 	add.w	r3, r7, #24
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7fb fb60 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7c8:	e02c      	b.n	800a824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7ca:	4b09      	ldr	r3, [pc, #36]	; (800a7f0 <UART_SetConfig+0x69c>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d016      	beq.n	800a804 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7d6:	4b06      	ldr	r3, [pc, #24]	; (800a7f0 <UART_SetConfig+0x69c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	08db      	lsrs	r3, r3, #3
 800a7dc:	f003 0303 	and.w	r3, r3, #3
 800a7e0:	4a07      	ldr	r2, [pc, #28]	; (800a800 <UART_SetConfig+0x6ac>)
 800a7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7e8:	e01c      	b.n	800a824 <UART_SetConfig+0x6d0>
 800a7ea:	bf00      	nop
 800a7ec:	40011400 	.word	0x40011400
 800a7f0:	58024400 	.word	0x58024400
 800a7f4:	40007800 	.word	0x40007800
 800a7f8:	40007c00 	.word	0x40007c00
 800a7fc:	58000c00 	.word	0x58000c00
 800a800:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a804:	4b9d      	ldr	r3, [pc, #628]	; (800aa7c <UART_SetConfig+0x928>)
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a808:	e00c      	b.n	800a824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a80a:	4b9d      	ldr	r3, [pc, #628]	; (800aa80 <UART_SetConfig+0x92c>)
 800a80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a80e:	e009      	b.n	800a824 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a814:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a816:	e005      	b.n	800a824 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a822:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a826:	2b00      	cmp	r3, #0
 800a828:	f000 81de 	beq.w	800abe8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a830:	4a94      	ldr	r2, [pc, #592]	; (800aa84 <UART_SetConfig+0x930>)
 800a832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a836:	461a      	mov	r2, r3
 800a838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a83e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	4613      	mov	r3, r2
 800a846:	005b      	lsls	r3, r3, #1
 800a848:	4413      	add	r3, r2
 800a84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d305      	bcc.n	800a85c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a856:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a858:	429a      	cmp	r2, r3
 800a85a:	d903      	bls.n	800a864 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a862:	e1c1      	b.n	800abe8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a866:	2200      	movs	r2, #0
 800a868:	60bb      	str	r3, [r7, #8]
 800a86a:	60fa      	str	r2, [r7, #12]
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a870:	4a84      	ldr	r2, [pc, #528]	; (800aa84 <UART_SetConfig+0x930>)
 800a872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a876:	b29b      	uxth	r3, r3
 800a878:	2200      	movs	r2, #0
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	607a      	str	r2, [r7, #4]
 800a87e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a886:	f7f5 fd7b 	bl	8000380 <__aeabi_uldivmod>
 800a88a:	4602      	mov	r2, r0
 800a88c:	460b      	mov	r3, r1
 800a88e:	4610      	mov	r0, r2
 800a890:	4619      	mov	r1, r3
 800a892:	f04f 0200 	mov.w	r2, #0
 800a896:	f04f 0300 	mov.w	r3, #0
 800a89a:	020b      	lsls	r3, r1, #8
 800a89c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a8a0:	0202      	lsls	r2, r0, #8
 800a8a2:	6979      	ldr	r1, [r7, #20]
 800a8a4:	6849      	ldr	r1, [r1, #4]
 800a8a6:	0849      	lsrs	r1, r1, #1
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	460c      	mov	r4, r1
 800a8ac:	4605      	mov	r5, r0
 800a8ae:	eb12 0804 	adds.w	r8, r2, r4
 800a8b2:	eb43 0905 	adc.w	r9, r3, r5
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	469a      	mov	sl, r3
 800a8be:	4693      	mov	fp, r2
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	465b      	mov	r3, fp
 800a8c4:	4640      	mov	r0, r8
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	f7f5 fd5a 	bl	8000380 <__aeabi_uldivmod>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8da:	d308      	bcc.n	800a8ee <UART_SetConfig+0x79a>
 800a8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8e2:	d204      	bcs.n	800a8ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8ea:	60da      	str	r2, [r3, #12]
 800a8ec:	e17c      	b.n	800abe8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a8f4:	e178      	b.n	800abe8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8fe:	f040 80c5 	bne.w	800aa8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a902:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a906:	2b20      	cmp	r3, #32
 800a908:	dc48      	bgt.n	800a99c <UART_SetConfig+0x848>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	db7b      	blt.n	800aa06 <UART_SetConfig+0x8b2>
 800a90e:	2b20      	cmp	r3, #32
 800a910:	d879      	bhi.n	800aa06 <UART_SetConfig+0x8b2>
 800a912:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <UART_SetConfig+0x7c4>)
 800a914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a918:	0800a9a3 	.word	0x0800a9a3
 800a91c:	0800a9ab 	.word	0x0800a9ab
 800a920:	0800aa07 	.word	0x0800aa07
 800a924:	0800aa07 	.word	0x0800aa07
 800a928:	0800a9b3 	.word	0x0800a9b3
 800a92c:	0800aa07 	.word	0x0800aa07
 800a930:	0800aa07 	.word	0x0800aa07
 800a934:	0800aa07 	.word	0x0800aa07
 800a938:	0800a9c3 	.word	0x0800a9c3
 800a93c:	0800aa07 	.word	0x0800aa07
 800a940:	0800aa07 	.word	0x0800aa07
 800a944:	0800aa07 	.word	0x0800aa07
 800a948:	0800aa07 	.word	0x0800aa07
 800a94c:	0800aa07 	.word	0x0800aa07
 800a950:	0800aa07 	.word	0x0800aa07
 800a954:	0800aa07 	.word	0x0800aa07
 800a958:	0800a9d3 	.word	0x0800a9d3
 800a95c:	0800aa07 	.word	0x0800aa07
 800a960:	0800aa07 	.word	0x0800aa07
 800a964:	0800aa07 	.word	0x0800aa07
 800a968:	0800aa07 	.word	0x0800aa07
 800a96c:	0800aa07 	.word	0x0800aa07
 800a970:	0800aa07 	.word	0x0800aa07
 800a974:	0800aa07 	.word	0x0800aa07
 800a978:	0800aa07 	.word	0x0800aa07
 800a97c:	0800aa07 	.word	0x0800aa07
 800a980:	0800aa07 	.word	0x0800aa07
 800a984:	0800aa07 	.word	0x0800aa07
 800a988:	0800aa07 	.word	0x0800aa07
 800a98c:	0800aa07 	.word	0x0800aa07
 800a990:	0800aa07 	.word	0x0800aa07
 800a994:	0800aa07 	.word	0x0800aa07
 800a998:	0800a9f9 	.word	0x0800a9f9
 800a99c:	2b40      	cmp	r3, #64	; 0x40
 800a99e:	d02e      	beq.n	800a9fe <UART_SetConfig+0x8aa>
 800a9a0:	e031      	b.n	800aa06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9a2:	f7f9 fcc1 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 800a9a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9a8:	e033      	b.n	800aa12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9aa:	f7f9 fcd3 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 800a9ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a9b0:	e02f      	b.n	800aa12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	f7fb f910 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9c0:	e027      	b.n	800aa12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9c2:	f107 0318 	add.w	r3, r7, #24
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7fb fa5c 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9d0:	e01f      	b.n	800aa12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9d2:	4b2d      	ldr	r3, [pc, #180]	; (800aa88 <UART_SetConfig+0x934>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f003 0320 	and.w	r3, r3, #32
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9de:	4b2a      	ldr	r3, [pc, #168]	; (800aa88 <UART_SetConfig+0x934>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	08db      	lsrs	r3, r3, #3
 800a9e4:	f003 0303 	and.w	r3, r3, #3
 800a9e8:	4a24      	ldr	r2, [pc, #144]	; (800aa7c <UART_SetConfig+0x928>)
 800a9ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a9f0:	e00f      	b.n	800aa12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a9f2:	4b22      	ldr	r3, [pc, #136]	; (800aa7c <UART_SetConfig+0x928>)
 800a9f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9f6:	e00c      	b.n	800aa12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9f8:	4b21      	ldr	r3, [pc, #132]	; (800aa80 <UART_SetConfig+0x92c>)
 800a9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9fc:	e009      	b.n	800aa12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa04:	e005      	b.n	800aa12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800aa10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aa12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 80e7 	beq.w	800abe8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1e:	4a19      	ldr	r2, [pc, #100]	; (800aa84 <UART_SetConfig+0x930>)
 800aa20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa24:	461a      	mov	r2, r3
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa2c:	005a      	lsls	r2, r3, #1
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	085b      	lsrs	r3, r3, #1
 800aa34:	441a      	add	r2, r3
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa42:	2b0f      	cmp	r3, #15
 800aa44:	d916      	bls.n	800aa74 <UART_SetConfig+0x920>
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa4c:	d212      	bcs.n	800aa74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	f023 030f 	bic.w	r3, r3, #15
 800aa56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	085b      	lsrs	r3, r3, #1
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aa66:	4313      	orrs	r3, r2
 800aa68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800aa70:	60da      	str	r2, [r3, #12]
 800aa72:	e0b9      	b.n	800abe8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800aa7a:	e0b5      	b.n	800abe8 <UART_SetConfig+0xa94>
 800aa7c:	03d09000 	.word	0x03d09000
 800aa80:	003d0900 	.word	0x003d0900
 800aa84:	08011dac 	.word	0x08011dac
 800aa88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800aa8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aa90:	2b20      	cmp	r3, #32
 800aa92:	dc49      	bgt.n	800ab28 <UART_SetConfig+0x9d4>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	db7c      	blt.n	800ab92 <UART_SetConfig+0xa3e>
 800aa98:	2b20      	cmp	r3, #32
 800aa9a:	d87a      	bhi.n	800ab92 <UART_SetConfig+0xa3e>
 800aa9c:	a201      	add	r2, pc, #4	; (adr r2, 800aaa4 <UART_SetConfig+0x950>)
 800aa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa2:	bf00      	nop
 800aaa4:	0800ab2f 	.word	0x0800ab2f
 800aaa8:	0800ab37 	.word	0x0800ab37
 800aaac:	0800ab93 	.word	0x0800ab93
 800aab0:	0800ab93 	.word	0x0800ab93
 800aab4:	0800ab3f 	.word	0x0800ab3f
 800aab8:	0800ab93 	.word	0x0800ab93
 800aabc:	0800ab93 	.word	0x0800ab93
 800aac0:	0800ab93 	.word	0x0800ab93
 800aac4:	0800ab4f 	.word	0x0800ab4f
 800aac8:	0800ab93 	.word	0x0800ab93
 800aacc:	0800ab93 	.word	0x0800ab93
 800aad0:	0800ab93 	.word	0x0800ab93
 800aad4:	0800ab93 	.word	0x0800ab93
 800aad8:	0800ab93 	.word	0x0800ab93
 800aadc:	0800ab93 	.word	0x0800ab93
 800aae0:	0800ab93 	.word	0x0800ab93
 800aae4:	0800ab5f 	.word	0x0800ab5f
 800aae8:	0800ab93 	.word	0x0800ab93
 800aaec:	0800ab93 	.word	0x0800ab93
 800aaf0:	0800ab93 	.word	0x0800ab93
 800aaf4:	0800ab93 	.word	0x0800ab93
 800aaf8:	0800ab93 	.word	0x0800ab93
 800aafc:	0800ab93 	.word	0x0800ab93
 800ab00:	0800ab93 	.word	0x0800ab93
 800ab04:	0800ab93 	.word	0x0800ab93
 800ab08:	0800ab93 	.word	0x0800ab93
 800ab0c:	0800ab93 	.word	0x0800ab93
 800ab10:	0800ab93 	.word	0x0800ab93
 800ab14:	0800ab93 	.word	0x0800ab93
 800ab18:	0800ab93 	.word	0x0800ab93
 800ab1c:	0800ab93 	.word	0x0800ab93
 800ab20:	0800ab93 	.word	0x0800ab93
 800ab24:	0800ab85 	.word	0x0800ab85
 800ab28:	2b40      	cmp	r3, #64	; 0x40
 800ab2a:	d02e      	beq.n	800ab8a <UART_SetConfig+0xa36>
 800ab2c:	e031      	b.n	800ab92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab2e:	f7f9 fbfb 	bl	8004328 <HAL_RCC_GetPCLK1Freq>
 800ab32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab34:	e033      	b.n	800ab9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab36:	f7f9 fc0d 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 800ab3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab3c:	e02f      	b.n	800ab9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fb f84a 	bl	8005bdc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab4c:	e027      	b.n	800ab9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab4e:	f107 0318 	add.w	r3, r7, #24
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fb f996 	bl	8005e84 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5c:	e01f      	b.n	800ab9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab5e:	4b2d      	ldr	r3, [pc, #180]	; (800ac14 <UART_SetConfig+0xac0>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d009      	beq.n	800ab7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ab6a:	4b2a      	ldr	r3, [pc, #168]	; (800ac14 <UART_SetConfig+0xac0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	08db      	lsrs	r3, r3, #3
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	4a28      	ldr	r2, [pc, #160]	; (800ac18 <UART_SetConfig+0xac4>)
 800ab76:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ab7c:	e00f      	b.n	800ab9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ab7e:	4b26      	ldr	r3, [pc, #152]	; (800ac18 <UART_SetConfig+0xac4>)
 800ab80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab82:	e00c      	b.n	800ab9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ab84:	4b25      	ldr	r3, [pc, #148]	; (800ac1c <UART_SetConfig+0xac8>)
 800ab86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab88:	e009      	b.n	800ab9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab90:	e005      	b.n	800ab9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ab92:	2300      	movs	r3, #0
 800ab94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ab9c:	bf00      	nop
    }

    if (pclk != 0U)
 800ab9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d021      	beq.n	800abe8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba8:	4a1d      	ldr	r2, [pc, #116]	; (800ac20 <UART_SetConfig+0xacc>)
 800abaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abae:	461a      	mov	r2, r3
 800abb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abb2:	fbb3 f2f2 	udiv	r2, r3, r2
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	085b      	lsrs	r3, r3, #1
 800abbc:	441a      	add	r2, r3
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abca:	2b0f      	cmp	r3, #15
 800abcc:	d909      	bls.n	800abe2 <UART_SetConfig+0xa8e>
 800abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abd4:	d205      	bcs.n	800abe2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	b29a      	uxth	r2, r3
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60da      	str	r2, [r3, #12]
 800abe0:	e002      	b.n	800abe8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2201      	movs	r2, #1
 800abec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	2201      	movs	r2, #1
 800abf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	2200      	movs	r2, #0
 800abfc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	2200      	movs	r2, #0
 800ac02:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ac04:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3748      	adds	r7, #72	; 0x48
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac12:	bf00      	nop
 800ac14:	58024400 	.word	0x58024400
 800ac18:	03d09000 	.word	0x03d09000
 800ac1c:	003d0900 	.word	0x003d0900
 800ac20:	08011dac 	.word	0x08011dac

0800ac24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac30:	f003 0301 	and.w	r3, r3, #1
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00a      	beq.n	800ac4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac52:	f003 0302 	and.w	r3, r3, #2
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00a      	beq.n	800ac70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac74:	f003 0304 	and.w	r3, r3, #4
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d00a      	beq.n	800ac92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	430a      	orrs	r2, r1
 800ac90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	430a      	orrs	r2, r1
 800acb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb8:	f003 0310 	and.w	r3, r3, #16
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00a      	beq.n	800acd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	689b      	ldr	r3, [r3, #8]
 800acc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	430a      	orrs	r2, r1
 800acd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00a      	beq.n	800acf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	430a      	orrs	r2, r1
 800acf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d01a      	beq.n	800ad3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	430a      	orrs	r2, r1
 800ad18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad22:	d10a      	bne.n	800ad3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	430a      	orrs	r2, r1
 800ad38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d00a      	beq.n	800ad5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	605a      	str	r2, [r3, #4]
  }
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad78:	f7f7 fa60 	bl	800223c <HAL_GetTick>
 800ad7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 0308 	and.w	r3, r3, #8
 800ad88:	2b08      	cmp	r3, #8
 800ad8a:	d10e      	bne.n	800adaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ad90:	9300      	str	r3, [sp, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f000 f82f 	bl	800adfe <UART_WaitOnFlagUntilTimeout>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d001      	beq.n	800adaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ada6:	2303      	movs	r3, #3
 800ada8:	e025      	b.n	800adf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 0304 	and.w	r3, r3, #4
 800adb4:	2b04      	cmp	r3, #4
 800adb6:	d10e      	bne.n	800add6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adbc:	9300      	str	r3, [sp, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 f819 	bl	800adfe <UART_WaitOnFlagUntilTimeout>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e00f      	b.n	800adf6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2220      	movs	r2, #32
 800adda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adf4:	2300      	movs	r3, #0
}
 800adf6:	4618      	mov	r0, r3
 800adf8:	3710      	adds	r7, #16
 800adfa:	46bd      	mov	sp, r7
 800adfc:	bd80      	pop	{r7, pc}

0800adfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b09c      	sub	sp, #112	; 0x70
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	60f8      	str	r0, [r7, #12]
 800ae06:	60b9      	str	r1, [r7, #8]
 800ae08:	603b      	str	r3, [r7, #0]
 800ae0a:	4613      	mov	r3, r2
 800ae0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae0e:	e0a9      	b.n	800af64 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae16:	f000 80a5 	beq.w	800af64 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae1a:	f7f7 fa0f 	bl	800223c <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d302      	bcc.n	800ae30 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d140      	bne.n	800aeb2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae44:	667b      	str	r3, [r7, #100]	; 0x64
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e6      	bne.n	800ae30 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3308      	adds	r3, #8
 800ae68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae74:	f023 0301 	bic.w	r3, r3, #1
 800ae78:	663b      	str	r3, [r7, #96]	; 0x60
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae82:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ae90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1e5      	bne.n	800ae62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2220      	movs	r2, #32
 800ae9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2220      	movs	r2, #32
 800aea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e069      	b.n	800af86 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 0304 	and.w	r3, r3, #4
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d051      	beq.n	800af64 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	69db      	ldr	r3, [r3, #28]
 800aec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aece:	d149      	bne.n	800af64 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aed8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	e853 3f00 	ldrex	r3, [r3]
 800aee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aeee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aef8:	637b      	str	r3, [r7, #52]	; 0x34
 800aefa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af00:	e841 2300 	strex	r3, r2, [r1]
 800af04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1e6      	bne.n	800aeda <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	3308      	adds	r3, #8
 800af12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	e853 3f00 	ldrex	r3, [r3]
 800af1a:	613b      	str	r3, [r7, #16]
   return(result);
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	f023 0301 	bic.w	r3, r3, #1
 800af22:	66bb      	str	r3, [r7, #104]	; 0x68
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	3308      	adds	r3, #8
 800af2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af2c:	623a      	str	r2, [r7, #32]
 800af2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af30:	69f9      	ldr	r1, [r7, #28]
 800af32:	6a3a      	ldr	r2, [r7, #32]
 800af34:	e841 2300 	strex	r3, r2, [r1]
 800af38:	61bb      	str	r3, [r7, #24]
   return(result);
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d1e5      	bne.n	800af0c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e010      	b.n	800af86 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	69da      	ldr	r2, [r3, #28]
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	4013      	ands	r3, r2
 800af6e:	68ba      	ldr	r2, [r7, #8]
 800af70:	429a      	cmp	r2, r3
 800af72:	bf0c      	ite	eq
 800af74:	2301      	moveq	r3, #1
 800af76:	2300      	movne	r3, #0
 800af78:	b2db      	uxtb	r3, r3
 800af7a:	461a      	mov	r2, r3
 800af7c:	79fb      	ldrb	r3, [r7, #7]
 800af7e:	429a      	cmp	r2, r3
 800af80:	f43f af46 	beq.w	800ae10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	3770      	adds	r7, #112	; 0x70
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
	...

0800af90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af90:	b480      	push	{r7}
 800af92:	b095      	sub	sp, #84	; 0x54
 800af94:	af00      	add	r7, sp, #0
 800af96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afa0:	e853 3f00 	ldrex	r3, [r3]
 800afa4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800afac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afb6:	643b      	str	r3, [r7, #64]	; 0x40
 800afb8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d1e6      	bne.n	800af98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3308      	adds	r3, #8
 800afd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd2:	6a3b      	ldr	r3, [r7, #32]
 800afd4:	e853 3f00 	ldrex	r3, [r3]
 800afd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	4b1e      	ldr	r3, [pc, #120]	; (800b058 <UART_EndRxTransfer+0xc8>)
 800afde:	4013      	ands	r3, r2
 800afe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3308      	adds	r3, #8
 800afe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aff2:	e841 2300 	strex	r3, r2, [r1]
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affa:	2b00      	cmp	r3, #0
 800affc:	d1e5      	bne.n	800afca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b002:	2b01      	cmp	r3, #1
 800b004:	d118      	bne.n	800b038 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	e853 3f00 	ldrex	r3, [r3]
 800b012:	60bb      	str	r3, [r7, #8]
   return(result);
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	f023 0310 	bic.w	r3, r3, #16
 800b01a:	647b      	str	r3, [r7, #68]	; 0x44
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	461a      	mov	r2, r3
 800b022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b024:	61bb      	str	r3, [r7, #24]
 800b026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b028:	6979      	ldr	r1, [r7, #20]
 800b02a:	69ba      	ldr	r2, [r7, #24]
 800b02c:	e841 2300 	strex	r3, r2, [r1]
 800b030:	613b      	str	r3, [r7, #16]
   return(result);
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1e6      	bne.n	800b006 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2220      	movs	r2, #32
 800b03c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b04c:	bf00      	nop
 800b04e:	3754      	adds	r7, #84	; 0x54
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr
 800b058:	effffffe 	.word	0xeffffffe

0800b05c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2200      	movs	r2, #0
 800b076:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	f7ff f854 	bl	800a128 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b080:	bf00      	nop
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b088      	sub	sp, #32
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	e853 3f00 	ldrex	r3, [r3]
 800b09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0a4:	61fb      	str	r3, [r7, #28]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	61bb      	str	r3, [r7, #24]
 800b0b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b2:	6979      	ldr	r1, [r7, #20]
 800b0b4:	69ba      	ldr	r2, [r7, #24]
 800b0b6:	e841 2300 	strex	r3, r2, [r1]
 800b0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d1e6      	bne.n	800b090 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2220      	movs	r2, #32
 800b0c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff f81f 	bl	800a114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0d6:	bf00      	nop
 800b0d8:	3720      	adds	r7, #32
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b0e6:	bf00      	nop
 800b0e8:	370c      	adds	r7, #12
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr

0800b0f2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b0fa:	bf00      	nop
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b106:	b480      	push	{r7}
 800b108:	b083      	sub	sp, #12
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b10e:	bf00      	nop
 800b110:	370c      	adds	r7, #12
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b11a:	b480      	push	{r7}
 800b11c:	b085      	sub	sp, #20
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d101      	bne.n	800b130 <HAL_UARTEx_DisableFifoMode+0x16>
 800b12c:	2302      	movs	r3, #2
 800b12e:	e027      	b.n	800b180 <HAL_UARTEx_DisableFifoMode+0x66>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2224      	movs	r2, #36	; 0x24
 800b13c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f022 0201 	bic.w	r2, r2, #1
 800b156:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b15e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2220      	movs	r2, #32
 800b172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b17e:	2300      	movs	r3, #0
}
 800b180:	4618      	mov	r0, r3
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d101      	bne.n	800b1a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b1a0:	2302      	movs	r3, #2
 800b1a2:	e02d      	b.n	800b200 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2224      	movs	r2, #36	; 0x24
 800b1b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f022 0201 	bic.w	r2, r2, #1
 800b1ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	683a      	ldr	r2, [r7, #0]
 800b1dc:	430a      	orrs	r2, r1
 800b1de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f84f 	bl	800b284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d101      	bne.n	800b220 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b21c:	2302      	movs	r3, #2
 800b21e:	e02d      	b.n	800b27c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2224      	movs	r2, #36	; 0x24
 800b22c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	681a      	ldr	r2, [r3, #0]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f022 0201 	bic.w	r2, r2, #1
 800b246:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	689b      	ldr	r3, [r3, #8]
 800b24e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	430a      	orrs	r2, r1
 800b25a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b25c:	6878      	ldr	r0, [r7, #4]
 800b25e:	f000 f811 	bl	800b284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68fa      	ldr	r2, [r7, #12]
 800b268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2220      	movs	r2, #32
 800b26e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b290:	2b00      	cmp	r3, #0
 800b292:	d108      	bne.n	800b2a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2201      	movs	r2, #1
 800b2a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b2a4:	e031      	b.n	800b30a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b2a6:	2310      	movs	r3, #16
 800b2a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b2aa:	2310      	movs	r3, #16
 800b2ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	0e5b      	lsrs	r3, r3, #25
 800b2b6:	b2db      	uxtb	r3, r3
 800b2b8:	f003 0307 	and.w	r3, r3, #7
 800b2bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	0f5b      	lsrs	r3, r3, #29
 800b2c6:	b2db      	uxtb	r3, r3
 800b2c8:	f003 0307 	and.w	r3, r3, #7
 800b2cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2ce:	7bbb      	ldrb	r3, [r7, #14]
 800b2d0:	7b3a      	ldrb	r2, [r7, #12]
 800b2d2:	4911      	ldr	r1, [pc, #68]	; (800b318 <UARTEx_SetNbDataToProcess+0x94>)
 800b2d4:	5c8a      	ldrb	r2, [r1, r2]
 800b2d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b2da:	7b3a      	ldrb	r2, [r7, #12]
 800b2dc:	490f      	ldr	r1, [pc, #60]	; (800b31c <UARTEx_SetNbDataToProcess+0x98>)
 800b2de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b2e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2e4:	b29a      	uxth	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2ec:	7bfb      	ldrb	r3, [r7, #15]
 800b2ee:	7b7a      	ldrb	r2, [r7, #13]
 800b2f0:	4909      	ldr	r1, [pc, #36]	; (800b318 <UARTEx_SetNbDataToProcess+0x94>)
 800b2f2:	5c8a      	ldrb	r2, [r1, r2]
 800b2f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b2f8:	7b7a      	ldrb	r2, [r7, #13]
 800b2fa:	4908      	ldr	r1, [pc, #32]	; (800b31c <UARTEx_SetNbDataToProcess+0x98>)
 800b2fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800b302:	b29a      	uxth	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b30a:	bf00      	nop
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr
 800b316:	bf00      	nop
 800b318:	08011dc4 	.word	0x08011dc4
 800b31c:	08011dcc 	.word	0x08011dcc

0800b320 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b320:	b084      	sub	sp, #16
 800b322:	b480      	push	{r7}
 800b324:	b085      	sub	sp, #20
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	f107 001c 	add.w	r0, r7, #28
 800b32e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b332:	2300      	movs	r3, #0
 800b334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b336:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b338:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b33a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b33e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b340:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b342:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b346:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685a      	ldr	r2, [r3, #4]
 800b352:	4b07      	ldr	r3, [pc, #28]	; (800b370 <SDMMC_Init+0x50>)
 800b354:	4013      	ands	r3, r2
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	431a      	orrs	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	b004      	add	sp, #16
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	ffc02c00 	.word	0xffc02c00

0800b374 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b374:	b480      	push	{r7}
 800b376:	b083      	sub	sp, #12
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
 800b396:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	681a      	ldr	r2, [r3, #0]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	370c      	adds	r7, #12
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f043 0203 	orr.w	r2, r3, #3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b083      	sub	sp, #12
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 0303 	and.w	r3, r3, #3
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b40e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b414:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b41a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68da      	ldr	r2, [r3, #12]
 800b426:	4b06      	ldr	r3, [pc, #24]	; (800b440 <SDMMC_SendCommand+0x50>)
 800b428:	4013      	ands	r3, r2
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	431a      	orrs	r2, r3
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	fffee0c0 	.word	0xfffee0c0

0800b444 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	691b      	ldr	r3, [r3, #16]
 800b450:	b2db      	uxtb	r3, r3
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b45e:	b480      	push	{r7}
 800b460:	b085      	sub	sp, #20
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
 800b466:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3314      	adds	r3, #20
 800b46c:	461a      	mov	r2, r3
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	4413      	add	r3, r2
 800b472:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3714      	adds	r7, #20
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4aa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b4b0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b4b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	431a      	orrs	r2, r3
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0

}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b088      	sub	sp, #32
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b4ea:	2310      	movs	r3, #16
 800b4ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4fe:	f107 0308 	add.w	r3, r7, #8
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f7ff ff73 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b50e:	2110      	movs	r1, #16
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fa5f 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b516:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b518:	69fb      	ldr	r3, [r7, #28]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b088      	sub	sp, #32
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b530:	2311      	movs	r3, #17
 800b532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b534:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b53e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b544:	f107 0308 	add.w	r3, r7, #8
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff50 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b550:	f241 3288 	movw	r2, #5000	; 0x1388
 800b554:	2111      	movs	r1, #17
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	f000 fa3c 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b55c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b55e:	69fb      	ldr	r3, [r7, #28]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3720      	adds	r7, #32
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b576:	2312      	movs	r3, #18
 800b578:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b57a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b57e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b580:	2300      	movs	r3, #0
 800b582:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b588:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b58a:	f107 0308 	add.w	r3, r7, #8
 800b58e:	4619      	mov	r1, r3
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7ff ff2d 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b596:	f241 3288 	movw	r2, #5000	; 0x1388
 800b59a:	2112      	movs	r1, #18
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f000 fa19 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b5a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5a4:	69fb      	ldr	r3, [r7, #28]
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b088      	sub	sp, #32
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b5bc:	2318      	movs	r3, #24
 800b5be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5d0:	f107 0308 	add.w	r3, r7, #8
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f7ff ff0a 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e0:	2118      	movs	r1, #24
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 f9f6 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b5e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5ea:	69fb      	ldr	r3, [r7, #28]
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3720      	adds	r7, #32
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b088      	sub	sp, #32
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b602:	2319      	movs	r3, #25
 800b604:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b60c:	2300      	movs	r3, #0
 800b60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b614:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b616:	f107 0308 	add.w	r3, r7, #8
 800b61a:	4619      	mov	r1, r3
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff fee7 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b622:	f241 3288 	movw	r2, #5000	; 0x1388
 800b626:	2119      	movs	r1, #25
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f9d3 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b62e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b630:	69fb      	ldr	r3, [r7, #28]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3720      	adds	r7, #32
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
	...

0800b63c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b088      	sub	sp, #32
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b644:	2300      	movs	r3, #0
 800b646:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b648:	230c      	movs	r3, #12
 800b64a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b64c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b650:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b652:	2300      	movs	r3, #0
 800b654:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b65a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b674:	f107 0308 	add.w	r3, r7, #8
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff feb8 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b680:	4a0b      	ldr	r2, [pc, #44]	; (800b6b0 <SDMMC_CmdStopTransfer+0x74>)
 800b682:	210c      	movs	r1, #12
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 f9a5 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b68a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b69e:	d101      	bne.n	800b6a4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b6a4:	69fb      	ldr	r3, [r7, #28]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3720      	adds	r7, #32
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	05f5e100 	.word	0x05f5e100

0800b6b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b088      	sub	sp, #32
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
 800b6bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b6c2:	2307      	movs	r3, #7
 800b6c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6d6:	f107 0308 	add.w	r3, r7, #8
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7ff fe87 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b6e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6e6:	2107      	movs	r1, #7
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f973 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b6ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b088      	sub	sp, #32
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b706:	2300      	movs	r3, #0
 800b708:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b70a:	2300      	movs	r3, #0
 800b70c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b716:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b718:	f107 0308 	add.w	r3, r7, #8
 800b71c:	4619      	mov	r1, r3
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f7ff fe66 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 fb97 	bl	800be58 <SDMMC_GetCmdError>
 800b72a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b72c:	69fb      	ldr	r3, [r7, #28]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b73e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b742:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b744:	2308      	movs	r3, #8
 800b746:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b74c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b74e:	2300      	movs	r3, #0
 800b750:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b756:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b758:	f107 0308 	add.w	r3, r7, #8
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff fe46 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f000 fb29 	bl	800bdbc <SDMMC_GetCmdResp7>
 800b76a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b76c:	69fb      	ldr	r3, [r7, #28]
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3720      	adds	r7, #32
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b088      	sub	sp, #32
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
 800b77e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b784:	2337      	movs	r3, #55	; 0x37
 800b786:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b788:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b796:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b798:	f107 0308 	add.w	r3, r7, #8
 800b79c:	4619      	mov	r1, r3
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fe26 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b7a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7a8:	2137      	movs	r1, #55	; 0x37
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 f912 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b7b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7b2:	69fb      	ldr	r3, [r7, #28]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3720      	adds	r7, #32
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b7ca:	2329      	movs	r3, #41	; 0x29
 800b7cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7de:	f107 0308 	add.w	r3, r7, #8
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f7ff fe03 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 fa2e 	bl	800bc4c <SDMMC_GetCmdResp3>
 800b7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b80a:	2306      	movs	r3, #6
 800b80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b80e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b812:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b818:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b81c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b81e:	f107 0308 	add.w	r3, r7, #8
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f7ff fde3 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b82a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82e:	2106      	movs	r1, #6
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f8cf 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b836:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b838:	69fb      	ldr	r3, [r7, #28]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3720      	adds	r7, #32
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b088      	sub	sp, #32
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b84a:	2300      	movs	r3, #0
 800b84c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b84e:	2333      	movs	r3, #51	; 0x33
 800b850:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b852:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b856:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b858:	2300      	movs	r3, #0
 800b85a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b85c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b860:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b862:	f107 0308 	add.w	r3, r7, #8
 800b866:	4619      	mov	r1, r3
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff fdc1 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b86e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b872:	2133      	movs	r1, #51	; 0x33
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f8ad 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b87a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b87c:	69fb      	ldr	r3, [r7, #28]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b088      	sub	sp, #32
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b88e:	2300      	movs	r3, #0
 800b890:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b892:	2302      	movs	r3, #2
 800b894:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b896:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b89c:	2300      	movs	r3, #0
 800b89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8a6:	f107 0308 	add.w	r3, r7, #8
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f7ff fd9f 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 f980 	bl	800bbb8 <SDMMC_GetCmdResp2>
 800b8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8ba:	69fb      	ldr	r3, [r7, #28]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3720      	adds	r7, #32
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b8d2:	2309      	movs	r3, #9
 800b8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b8d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b8da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8e6:	f107 0308 	add.w	r3, r7, #8
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fd7f 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f960 	bl	800bbb8 <SDMMC_GetCmdResp2>
 800b8f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b90e:	2300      	movs	r3, #0
 800b910:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b912:	2303      	movs	r3, #3
 800b914:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b924:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff fd5f 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	2103      	movs	r1, #3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f9c8 	bl	800bccc <SDMMC_GetCmdResp6>
 800b93c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b93e:	69fb      	ldr	r3, [r7, #28]
}
 800b940:	4618      	mov	r0, r3
 800b942:	3720      	adds	r7, #32
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}

0800b948 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b088      	sub	sp, #32
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b956:	230d      	movs	r3, #13
 800b958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b95a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b95e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b960:	2300      	movs	r3, #0
 800b962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b968:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b96a:	f107 0308 	add.w	r3, r7, #8
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7ff fd3d 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b976:	f241 3288 	movw	r2, #5000	; 0x1388
 800b97a:	210d      	movs	r1, #13
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f829 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b984:	69fb      	ldr	r3, [r7, #28]
}
 800b986:	4618      	mov	r0, r3
 800b988:	3720      	adds	r7, #32
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}

0800b98e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b98e:	b580      	push	{r7, lr}
 800b990:	b088      	sub	sp, #32
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b99a:	230d      	movs	r3, #13
 800b99c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b99e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b9a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b9ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b9ae:	f107 0308 	add.w	r3, r7, #8
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff fd1b 	bl	800b3f0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9be:	210d      	movs	r1, #13
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f807 	bl	800b9d4 <SDMMC_GetCmdResp1>
 800b9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b9c8:	69fb      	ldr	r3, [r7, #28]
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3720      	adds	r7, #32
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
	...

0800b9d4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	607a      	str	r2, [r7, #4]
 800b9e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b9e2:	4b70      	ldr	r3, [pc, #448]	; (800bba4 <SDMMC_GetCmdResp1+0x1d0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4a70      	ldr	r2, [pc, #448]	; (800bba8 <SDMMC_GetCmdResp1+0x1d4>)
 800b9e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ec:	0a5a      	lsrs	r2, r3, #9
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	fb02 f303 	mul.w	r3, r2, r3
 800b9f4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	1e5a      	subs	r2, r3, #1
 800b9fa:	61fa      	str	r2, [r7, #28]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d102      	bne.n	800ba06 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba04:	e0c9      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba0a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ba0c:	69ba      	ldr	r2, [r7, #24]
 800ba0e:	4b67      	ldr	r3, [pc, #412]	; (800bbac <SDMMC_GetCmdResp1+0x1d8>)
 800ba10:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d0ef      	beq.n	800b9f6 <SDMMC_GetCmdResp1+0x22>
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d1ea      	bne.n	800b9f6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba24:	f003 0304 	and.w	r3, r3, #4
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d004      	beq.n	800ba36 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2204      	movs	r2, #4
 800ba30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba32:	2304      	movs	r3, #4
 800ba34:	e0b1      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d004      	beq.n	800ba4c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	2201      	movs	r2, #1
 800ba46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e0a6      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4a58      	ldr	r2, [pc, #352]	; (800bbb0 <SDMMC_GetCmdResp1+0x1dc>)
 800ba50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	f7ff fcf6 	bl	800b444 <SDMMC_GetCommandResponse>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	7afb      	ldrb	r3, [r7, #11]
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d001      	beq.n	800ba66 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e099      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba66:	2100      	movs	r1, #0
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7ff fcf8 	bl	800b45e <SDMMC_GetResponse>
 800ba6e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba70:	697a      	ldr	r2, [r7, #20]
 800ba72:	4b50      	ldr	r3, [pc, #320]	; (800bbb4 <SDMMC_GetCmdResp1+0x1e0>)
 800ba74:	4013      	ands	r3, r2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	e08d      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	da02      	bge.n	800ba8a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ba88:	e087      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d001      	beq.n	800ba98 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba94:	2340      	movs	r3, #64	; 0x40
 800ba96:	e080      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800baa2:	2380      	movs	r3, #128	; 0x80
 800baa4:	e079      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bab4:	e071      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bac4:	e069      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bad4:	e061      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d002      	beq.n	800bae6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bae0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bae4:	e059      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800baf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800baf4:	e051      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb04:	e049      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb14:	e041      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb24:	e039      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d002      	beq.n	800bb36 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb34:	e031      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb40:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb44:	e029      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb54:	e021      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d002      	beq.n	800bb66 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb64:	e019      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb66:	697b      	ldr	r3, [r7, #20]
 800bb68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d002      	beq.n	800bb76 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bb74:	e011      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d002      	beq.n	800bb86 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bb80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bb84:	e009      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	f003 0308 	and.w	r3, r3, #8
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d002      	beq.n	800bb96 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bb90:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bb94:	e001      	b.n	800bb9a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	24000000 	.word	0x24000000
 800bba8:	10624dd3 	.word	0x10624dd3
 800bbac:	00200045 	.word	0x00200045
 800bbb0:	002000c5 	.word	0x002000c5
 800bbb4:	fdffe008 	.word	0xfdffe008

0800bbb8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bbc0:	4b1f      	ldr	r3, [pc, #124]	; (800bc40 <SDMMC_GetCmdResp2+0x88>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a1f      	ldr	r2, [pc, #124]	; (800bc44 <SDMMC_GetCmdResp2+0x8c>)
 800bbc6:	fba2 2303 	umull	r2, r3, r2, r3
 800bbca:	0a5b      	lsrs	r3, r3, #9
 800bbcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbd0:	fb02 f303 	mul.w	r3, r2, r3
 800bbd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	1e5a      	subs	r2, r3, #1
 800bbda:	60fa      	str	r2, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bbe0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbe4:	e026      	b.n	800bc34 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0ef      	beq.n	800bbd6 <SDMMC_GetCmdResp2+0x1e>
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d1ea      	bne.n	800bbd6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d004      	beq.n	800bc16 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2204      	movs	r2, #4
 800bc10:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc12:	2304      	movs	r3, #4
 800bc14:	e00e      	b.n	800bc34 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d004      	beq.n	800bc2c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2201      	movs	r2, #1
 800bc26:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e003      	b.n	800bc34 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a06      	ldr	r2, [pc, #24]	; (800bc48 <SDMMC_GetCmdResp2+0x90>)
 800bc30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc32:	2300      	movs	r3, #0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3714      	adds	r7, #20
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3e:	4770      	bx	lr
 800bc40:	24000000 	.word	0x24000000
 800bc44:	10624dd3 	.word	0x10624dd3
 800bc48:	002000c5 	.word	0x002000c5

0800bc4c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bc54:	4b1a      	ldr	r3, [pc, #104]	; (800bcc0 <SDMMC_GetCmdResp3+0x74>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a1a      	ldr	r2, [pc, #104]	; (800bcc4 <SDMMC_GetCmdResp3+0x78>)
 800bc5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc5e:	0a5b      	lsrs	r3, r3, #9
 800bc60:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc64:	fb02 f303 	mul.w	r3, r2, r3
 800bc68:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	1e5a      	subs	r2, r3, #1
 800bc6e:	60fa      	str	r2, [r7, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d102      	bne.n	800bc7a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc78:	e01b      	b.n	800bcb2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc7e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0ef      	beq.n	800bc6a <SDMMC_GetCmdResp3+0x1e>
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1ea      	bne.n	800bc6a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc98:	f003 0304 	and.w	r3, r3, #4
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d004      	beq.n	800bcaa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2204      	movs	r2, #4
 800bca4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bca6:	2304      	movs	r3, #4
 800bca8:	e003      	b.n	800bcb2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	4a06      	ldr	r2, [pc, #24]	; (800bcc8 <SDMMC_GetCmdResp3+0x7c>)
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	24000000 	.word	0x24000000
 800bcc4:	10624dd3 	.word	0x10624dd3
 800bcc8:	002000c5 	.word	0x002000c5

0800bccc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b088      	sub	sp, #32
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	607a      	str	r2, [r7, #4]
 800bcd8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bcda:	4b35      	ldr	r3, [pc, #212]	; (800bdb0 <SDMMC_GetCmdResp6+0xe4>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a35      	ldr	r2, [pc, #212]	; (800bdb4 <SDMMC_GetCmdResp6+0xe8>)
 800bce0:	fba2 2303 	umull	r2, r3, r2, r3
 800bce4:	0a5b      	lsrs	r3, r3, #9
 800bce6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcea:	fb02 f303 	mul.w	r3, r2, r3
 800bcee:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	1e5a      	subs	r2, r3, #1
 800bcf4:	61fa      	str	r2, [r7, #28]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d102      	bne.n	800bd00 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bcfa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bcfe:	e052      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd04:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd06:	69bb      	ldr	r3, [r7, #24]
 800bd08:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d0ef      	beq.n	800bcf0 <SDMMC_GetCmdResp6+0x24>
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1ea      	bne.n	800bcf0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd1e:	f003 0304 	and.w	r3, r3, #4
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d004      	beq.n	800bd30 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2204      	movs	r2, #4
 800bd2a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd2c:	2304      	movs	r3, #4
 800bd2e:	e03a      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd34:	f003 0301 	and.w	r3, r3, #1
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d004      	beq.n	800bd46 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd42:	2301      	movs	r3, #1
 800bd44:	e02f      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd46:	68f8      	ldr	r0, [r7, #12]
 800bd48:	f7ff fb7c 	bl	800b444 <SDMMC_GetCommandResponse>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	461a      	mov	r2, r3
 800bd50:	7afb      	ldrb	r3, [r7, #11]
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d001      	beq.n	800bd5a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e025      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4a16      	ldr	r2, [pc, #88]	; (800bdb8 <SDMMC_GetCmdResp6+0xec>)
 800bd5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd60:	2100      	movs	r1, #0
 800bd62:	68f8      	ldr	r0, [r7, #12]
 800bd64:	f7ff fb7b 	bl	800b45e <SDMMC_GetResponse>
 800bd68:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d106      	bne.n	800bd82 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	0c1b      	lsrs	r3, r3, #16
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	e011      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d002      	beq.n	800bd92 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bd90:	e009      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d002      	beq.n	800bda2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bd9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bda0:	e001      	b.n	800bda6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bda2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3720      	adds	r7, #32
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	24000000 	.word	0x24000000
 800bdb4:	10624dd3 	.word	0x10624dd3
 800bdb8:	002000c5 	.word	0x002000c5

0800bdbc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800bdc4:	4b22      	ldr	r3, [pc, #136]	; (800be50 <SDMMC_GetCmdResp7+0x94>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	4a22      	ldr	r2, [pc, #136]	; (800be54 <SDMMC_GetCmdResp7+0x98>)
 800bdca:	fba2 2303 	umull	r2, r3, r2, r3
 800bdce:	0a5b      	lsrs	r3, r3, #9
 800bdd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdd4:	fb02 f303 	mul.w	r3, r2, r3
 800bdd8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	60fa      	str	r2, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d102      	bne.n	800bdea <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bde4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bde8:	e02c      	b.n	800be44 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdee:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d0ef      	beq.n	800bdda <SDMMC_GetCmdResp7+0x1e>
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1ea      	bne.n	800bdda <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be08:	f003 0304 	and.w	r3, r3, #4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d004      	beq.n	800be1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2204      	movs	r2, #4
 800be14:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be16:	2304      	movs	r3, #4
 800be18:	e014      	b.n	800be44 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1e:	f003 0301 	and.w	r3, r3, #1
 800be22:	2b00      	cmp	r3, #0
 800be24:	d004      	beq.n	800be30 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2201      	movs	r2, #1
 800be2a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e009      	b.n	800be44 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d002      	beq.n	800be42 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2240      	movs	r2, #64	; 0x40
 800be40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be42:	2300      	movs	r3, #0

}
 800be44:	4618      	mov	r0, r3
 800be46:	3714      	adds	r7, #20
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr
 800be50:	24000000 	.word	0x24000000
 800be54:	10624dd3 	.word	0x10624dd3

0800be58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800be58:	b480      	push	{r7}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800be60:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <SDMMC_GetCmdError+0x50>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4a11      	ldr	r2, [pc, #68]	; (800beac <SDMMC_GetCmdError+0x54>)
 800be66:	fba2 2303 	umull	r2, r3, r2, r3
 800be6a:	0a5b      	lsrs	r3, r3, #9
 800be6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800be70:	fb02 f303 	mul.w	r3, r2, r3
 800be74:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	1e5a      	subs	r2, r3, #1
 800be7a:	60fa      	str	r2, [r7, #12]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d102      	bne.n	800be86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be84:	e009      	b.n	800be9a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0f1      	beq.n	800be76 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a06      	ldr	r2, [pc, #24]	; (800beb0 <SDMMC_GetCmdError+0x58>)
 800be96:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800be98:	2300      	movs	r3, #0
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	24000000 	.word	0x24000000
 800beac:	10624dd3 	.word	0x10624dd3
 800beb0:	002000c5 	.word	0x002000c5

0800beb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800beb8:	4904      	ldr	r1, [pc, #16]	; (800becc <MX_FATFS_Init+0x18>)
 800beba:	4805      	ldr	r0, [pc, #20]	; (800bed0 <MX_FATFS_Init+0x1c>)
 800bebc:	f004 fc04 	bl	80106c8 <FATFS_LinkDriver>
 800bec0:	4603      	mov	r3, r0
 800bec2:	461a      	mov	r2, r3
 800bec4:	4b03      	ldr	r3, [pc, #12]	; (800bed4 <MX_FATFS_Init+0x20>)
 800bec6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bec8:	bf00      	nop
 800beca:	bd80      	pop	{r7, pc}
 800becc:	240002b8 	.word	0x240002b8
 800bed0:	08011dd4 	.word	0x08011dd4
 800bed4:	240002b4 	.word	0x240002b4

0800bed8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bed8:	b480      	push	{r7}
 800beda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bedc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bede:	4618      	mov	r0, r3
 800bee0:	46bd      	mov	sp, r7
 800bee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee6:	4770      	bx	lr

0800bee8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bef2:	f000 f89b 	bl	800c02c <BSP_SD_IsDetected>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d001      	beq.n	800bf00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800befc:	2302      	movs	r3, #2
 800befe:	e012      	b.n	800bf26 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bf00:	480b      	ldr	r0, [pc, #44]	; (800bf30 <BSP_SD_Init+0x48>)
 800bf02:	f7fa fbc9 	bl	8006698 <HAL_SD_Init>
 800bf06:	4603      	mov	r3, r0
 800bf08:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800bf0a:	79fb      	ldrb	r3, [r7, #7]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d109      	bne.n	800bf24 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800bf10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bf14:	4806      	ldr	r0, [pc, #24]	; (800bf30 <BSP_SD_Init+0x48>)
 800bf16:	f7fb fc41 	bl	800779c <HAL_SD_ConfigWideBusOperation>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d001      	beq.n	800bf24 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800bf24:	79fb      	ldrb	r3, [r7, #7]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	240000cc 	.word	0x240000cc

0800bf34 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b088      	sub	sp, #32
 800bf38:	af02      	add	r7, sp, #8
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bf42:	2300      	movs	r3, #0
 800bf44:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	68f9      	ldr	r1, [r7, #12]
 800bf50:	4806      	ldr	r0, [pc, #24]	; (800bf6c <BSP_SD_ReadBlocks+0x38>)
 800bf52:	f7fa fcbb 	bl	80068cc <HAL_SD_ReadBlocks>
 800bf56:	4603      	mov	r3, r0
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d001      	beq.n	800bf60 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf60:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3718      	adds	r7, #24
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	240000cc 	.word	0x240000cc

0800bf70 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800bf7e:	2300      	movs	r3, #0
 800bf80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	9300      	str	r3, [sp, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	4806      	ldr	r0, [pc, #24]	; (800bfa8 <BSP_SD_WriteBlocks+0x38>)
 800bf8e:	f7fa fe27 	bl	8006be0 <HAL_SD_WriteBlocks>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bf9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3718      	adds	r7, #24
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	bf00      	nop
 800bfa8:	240000cc 	.word	0x240000cc

0800bfac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bfb0:	4805      	ldr	r0, [pc, #20]	; (800bfc8 <BSP_SD_GetCardState+0x1c>)
 800bfb2:	f7fb fd05 	bl	80079c0 <HAL_SD_GetCardState>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b04      	cmp	r3, #4
 800bfba:	bf14      	ite	ne
 800bfbc:	2301      	movne	r3, #1
 800bfbe:	2300      	moveq	r3, #0
 800bfc0:	b2db      	uxtb	r3, r3
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	240000cc 	.word	0x240000cc

0800bfcc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b082      	sub	sp, #8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	4803      	ldr	r0, [pc, #12]	; (800bfe4 <BSP_SD_GetCardInfo+0x18>)
 800bfd8:	f7fb fbb4 	bl	8007744 <HAL_SD_GetCardInfo>
}
 800bfdc:	bf00      	nop
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	240000cc 	.word	0x240000cc

0800bfe8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800bff0:	f000 f80e 	bl	800c010 <BSP_SD_WriteCpltCallback>
}
 800bff4:	bf00      	nop
 800bff6:	3708      	adds	r7, #8
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c004:	f000 f80b 	bl	800c01e <BSP_SD_ReadCpltCallback>
}
 800c008:	bf00      	nop
 800c00a:	3708      	adds	r7, #8
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800c010:	b480      	push	{r7}
 800c012:	af00      	add	r7, sp, #0

}
 800c014:	bf00      	nop
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800c01e:	b480      	push	{r7}
 800c020:	af00      	add	r7, sp, #0

}
 800c022:	bf00      	nop
 800c024:	46bd      	mov	sp, r7
 800c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02a:	4770      	bx	lr

0800c02c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b083      	sub	sp, #12
 800c030:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c032:	2301      	movs	r3, #1
 800c034:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800c036:	79fb      	ldrb	r3, [r7, #7]
 800c038:	b2db      	uxtb	r3, r3
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr
	...

0800c048 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b082      	sub	sp, #8
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c052:	4b0b      	ldr	r3, [pc, #44]	; (800c080 <SD_CheckStatus+0x38>)
 800c054:	2201      	movs	r2, #1
 800c056:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c058:	f7ff ffa8 	bl	800bfac <BSP_SD_GetCardState>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d107      	bne.n	800c072 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c062:	4b07      	ldr	r3, [pc, #28]	; (800c080 <SD_CheckStatus+0x38>)
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	b2db      	uxtb	r3, r3
 800c068:	f023 0301 	bic.w	r3, r3, #1
 800c06c:	b2da      	uxtb	r2, r3
 800c06e:	4b04      	ldr	r3, [pc, #16]	; (800c080 <SD_CheckStatus+0x38>)
 800c070:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c072:	4b03      	ldr	r3, [pc, #12]	; (800c080 <SD_CheckStatus+0x38>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	b2db      	uxtb	r3, r3
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3708      	adds	r7, #8
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	2400000d 	.word	0x2400000d

0800c084 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c08e:	4b0b      	ldr	r3, [pc, #44]	; (800c0bc <SD_initialize+0x38>)
 800c090:	2201      	movs	r2, #1
 800c092:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c094:	f7ff ff28 	bl	800bee8 <BSP_SD_Init>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d107      	bne.n	800c0ae <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800c09e:	79fb      	ldrb	r3, [r7, #7]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff ffd1 	bl	800c048 <SD_CheckStatus>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	4b04      	ldr	r3, [pc, #16]	; (800c0bc <SD_initialize+0x38>)
 800c0ac:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c0ae:	4b03      	ldr	r3, [pc, #12]	; (800c0bc <SD_initialize+0x38>)
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	b2db      	uxtb	r3, r3
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	2400000d 	.word	0x2400000d

0800c0c0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff ffbb 	bl	800c048 <SD_CheckStatus>
 800c0d2:	4603      	mov	r3, r0
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3708      	adds	r7, #8
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	607a      	str	r2, [r7, #4]
 800c0e6:	603b      	str	r3, [r7, #0]
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800c0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	6879      	ldr	r1, [r7, #4]
 800c0f8:	68b8      	ldr	r0, [r7, #8]
 800c0fa:	f7ff ff1b 	bl	800bf34 <BSP_SD_ReadBlocks>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d107      	bne.n	800c114 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800c104:	bf00      	nop
 800c106:	f7ff ff51 	bl	800bfac <BSP_SD_GetCardState>
 800c10a:	4603      	mov	r3, r0
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1fa      	bne.n	800c106 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800c110:	2300      	movs	r3, #0
 800c112:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c114:	7dfb      	ldrb	r3, [r7, #23]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b086      	sub	sp, #24
 800c122:	af00      	add	r7, sp, #0
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
 800c12a:	4603      	mov	r3, r0
 800c12c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800c132:	f04f 33ff 	mov.w	r3, #4294967295
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	6879      	ldr	r1, [r7, #4]
 800c13a:	68b8      	ldr	r0, [r7, #8]
 800c13c:	f7ff ff18 	bl	800bf70 <BSP_SD_WriteBlocks>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d107      	bne.n	800c156 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800c146:	bf00      	nop
 800c148:	f7ff ff30 	bl	800bfac <BSP_SD_GetCardState>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1fa      	bne.n	800c148 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800c152:	2300      	movs	r3, #0
 800c154:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800c156:	7dfb      	ldrb	r3, [r7, #23]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3718      	adds	r7, #24
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08c      	sub	sp, #48	; 0x30
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	603a      	str	r2, [r7, #0]
 800c16a:	71fb      	strb	r3, [r7, #7]
 800c16c:	460b      	mov	r3, r1
 800c16e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c176:	4b25      	ldr	r3, [pc, #148]	; (800c20c <SD_ioctl+0xac>)
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	f003 0301 	and.w	r3, r3, #1
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <SD_ioctl+0x28>
 800c184:	2303      	movs	r3, #3
 800c186:	e03c      	b.n	800c202 <SD_ioctl+0xa2>

  switch (cmd)
 800c188:	79bb      	ldrb	r3, [r7, #6]
 800c18a:	2b03      	cmp	r3, #3
 800c18c:	d834      	bhi.n	800c1f8 <SD_ioctl+0x98>
 800c18e:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <SD_ioctl+0x34>)
 800c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c194:	0800c1a5 	.word	0x0800c1a5
 800c198:	0800c1ad 	.word	0x0800c1ad
 800c19c:	0800c1c5 	.word	0x0800c1c5
 800c1a0:	0800c1df 	.word	0x0800c1df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c1aa:	e028      	b.n	800c1fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c1ac:	f107 0308 	add.w	r3, r7, #8
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7ff ff0b 	bl	800bfcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c1b6:	6a3a      	ldr	r2, [r7, #32]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c1c2:	e01c      	b.n	800c1fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c1c4:	f107 0308 	add.w	r3, r7, #8
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7ff feff 	bl	800bfcc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c1dc:	e00f      	b.n	800c1fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c1de:	f107 0308 	add.w	r3, r7, #8
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff fef2 	bl	800bfcc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	0a5a      	lsrs	r2, r3, #9
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c1f6:	e002      	b.n	800c1fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c1f8:	2304      	movs	r3, #4
 800c1fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c1fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c202:	4618      	mov	r0, r3
 800c204:	3730      	adds	r7, #48	; 0x30
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
 800c20a:	bf00      	nop
 800c20c:	2400000d 	.word	0x2400000d

0800c210 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	4a08      	ldr	r2, [pc, #32]	; (800c240 <disk_status+0x30>)
 800c21e:	009b      	lsls	r3, r3, #2
 800c220:	4413      	add	r3, r2
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	79fa      	ldrb	r2, [r7, #7]
 800c228:	4905      	ldr	r1, [pc, #20]	; (800c240 <disk_status+0x30>)
 800c22a:	440a      	add	r2, r1
 800c22c:	7a12      	ldrb	r2, [r2, #8]
 800c22e:	4610      	mov	r0, r2
 800c230:	4798      	blx	r3
 800c232:	4603      	mov	r3, r0
 800c234:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	240027d8 	.word	0x240027d8

0800c244 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c24e:	2300      	movs	r3, #0
 800c250:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	4a0d      	ldr	r2, [pc, #52]	; (800c28c <disk_initialize+0x48>)
 800c256:	5cd3      	ldrb	r3, [r2, r3]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d111      	bne.n	800c280 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	4a0b      	ldr	r2, [pc, #44]	; (800c28c <disk_initialize+0x48>)
 800c260:	2101      	movs	r1, #1
 800c262:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	4a09      	ldr	r2, [pc, #36]	; (800c28c <disk_initialize+0x48>)
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	4413      	add	r3, r2
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	79fa      	ldrb	r2, [r7, #7]
 800c272:	4906      	ldr	r1, [pc, #24]	; (800c28c <disk_initialize+0x48>)
 800c274:	440a      	add	r2, r1
 800c276:	7a12      	ldrb	r2, [r2, #8]
 800c278:	4610      	mov	r0, r2
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c280:	7bfb      	ldrb	r3, [r7, #15]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3710      	adds	r7, #16
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	240027d8 	.word	0x240027d8

0800c290 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c290:	b590      	push	{r4, r7, lr}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60b9      	str	r1, [r7, #8]
 800c298:	607a      	str	r2, [r7, #4]
 800c29a:	603b      	str	r3, [r7, #0]
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c2a0:	7bfb      	ldrb	r3, [r7, #15]
 800c2a2:	4a0a      	ldr	r2, [pc, #40]	; (800c2cc <disk_read+0x3c>)
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	4413      	add	r3, r2
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	689c      	ldr	r4, [r3, #8]
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
 800c2ae:	4a07      	ldr	r2, [pc, #28]	; (800c2cc <disk_read+0x3c>)
 800c2b0:	4413      	add	r3, r2
 800c2b2:	7a18      	ldrb	r0, [r3, #8]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	68b9      	ldr	r1, [r7, #8]
 800c2ba:	47a0      	blx	r4
 800c2bc:	4603      	mov	r3, r0
 800c2be:	75fb      	strb	r3, [r7, #23]
  return res;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c2:	4618      	mov	r0, r3
 800c2c4:	371c      	adds	r7, #28
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd90      	pop	{r4, r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	240027d8 	.word	0x240027d8

0800c2d0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c2d0:	b590      	push	{r4, r7, lr}
 800c2d2:	b087      	sub	sp, #28
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	4603      	mov	r3, r0
 800c2de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c2e0:	7bfb      	ldrb	r3, [r7, #15]
 800c2e2:	4a0a      	ldr	r2, [pc, #40]	; (800c30c <disk_write+0x3c>)
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	68dc      	ldr	r4, [r3, #12]
 800c2ec:	7bfb      	ldrb	r3, [r7, #15]
 800c2ee:	4a07      	ldr	r2, [pc, #28]	; (800c30c <disk_write+0x3c>)
 800c2f0:	4413      	add	r3, r2
 800c2f2:	7a18      	ldrb	r0, [r3, #8]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	68b9      	ldr	r1, [r7, #8]
 800c2fa:	47a0      	blx	r4
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800c300:	7dfb      	ldrb	r3, [r7, #23]
}
 800c302:	4618      	mov	r0, r3
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}
 800c30a:	bf00      	nop
 800c30c:	240027d8 	.word	0x240027d8

0800c310 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	603a      	str	r2, [r7, #0]
 800c31a:	71fb      	strb	r3, [r7, #7]
 800c31c:	460b      	mov	r3, r1
 800c31e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c320:	79fb      	ldrb	r3, [r7, #7]
 800c322:	4a09      	ldr	r2, [pc, #36]	; (800c348 <disk_ioctl+0x38>)
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	79fa      	ldrb	r2, [r7, #7]
 800c32e:	4906      	ldr	r1, [pc, #24]	; (800c348 <disk_ioctl+0x38>)
 800c330:	440a      	add	r2, r1
 800c332:	7a10      	ldrb	r0, [r2, #8]
 800c334:	79b9      	ldrb	r1, [r7, #6]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	4798      	blx	r3
 800c33a:	4603      	mov	r3, r0
 800c33c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	240027d8 	.word	0x240027d8

0800c34c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	3301      	adds	r3, #1
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c35c:	89fb      	ldrh	r3, [r7, #14]
 800c35e:	021b      	lsls	r3, r3, #8
 800c360:	b21a      	sxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	781b      	ldrb	r3, [r3, #0]
 800c366:	b21b      	sxth	r3, r3
 800c368:	4313      	orrs	r3, r2
 800c36a:	b21b      	sxth	r3, r3
 800c36c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c36e:	89fb      	ldrh	r3, [r7, #14]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c37c:	b480      	push	{r7}
 800c37e:	b085      	sub	sp, #20
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	3303      	adds	r3, #3
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	021b      	lsls	r3, r3, #8
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	3202      	adds	r2, #2
 800c394:	7812      	ldrb	r2, [r2, #0]
 800c396:	4313      	orrs	r3, r2
 800c398:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	3201      	adds	r2, #1
 800c3a2:	7812      	ldrb	r2, [r2, #0]
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	021b      	lsls	r3, r3, #8
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7812      	ldrb	r2, [r2, #0]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3714      	adds	r7, #20
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr

0800c3c2 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800c3c2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c3c6:	b09d      	sub	sp, #116	; 0x74
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800c3cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3ce:	3307      	adds	r3, #7
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	b2db      	uxtb	r3, r3
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	469a      	mov	sl, r3
 800c3d8:	4693      	mov	fp, r2
 800c3da:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800c3de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f04f 0100 	mov.w	r1, #0
 800c3ea:	0219      	lsls	r1, r3, #8
 800c3ec:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c3f0:	0210      	lsls	r0, r2, #8
 800c3f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c3f4:	3306      	adds	r3, #6
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	461c      	mov	r4, r3
 800c3fe:	4615      	mov	r5, r2
 800c400:	ea40 0804 	orr.w	r8, r0, r4
 800c404:	ea41 0905 	orr.w	r9, r1, r5
 800c408:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800c40c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c410:	f04f 0000 	mov.w	r0, #0
 800c414:	f04f 0100 	mov.w	r1, #0
 800c418:	0219      	lsls	r1, r3, #8
 800c41a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c41e:	0210      	lsls	r0, r2, #8
 800c420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c422:	3305      	adds	r3, #5
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2200      	movs	r2, #0
 800c42a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c42c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c42e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800c432:	4623      	mov	r3, r4
 800c434:	4303      	orrs	r3, r0
 800c436:	62bb      	str	r3, [r7, #40]	; 0x28
 800c438:	462b      	mov	r3, r5
 800c43a:	430b      	orrs	r3, r1
 800c43c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c43e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c442:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800c446:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c44a:	f04f 0000 	mov.w	r0, #0
 800c44e:	f04f 0100 	mov.w	r1, #0
 800c452:	0219      	lsls	r1, r3, #8
 800c454:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c458:	0210      	lsls	r0, r2, #8
 800c45a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c45c:	3304      	adds	r3, #4
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	2200      	movs	r2, #0
 800c464:	653b      	str	r3, [r7, #80]	; 0x50
 800c466:	657a      	str	r2, [r7, #84]	; 0x54
 800c468:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800c46c:	4623      	mov	r3, r4
 800c46e:	4303      	orrs	r3, r0
 800c470:	623b      	str	r3, [r7, #32]
 800c472:	462b      	mov	r3, r5
 800c474:	430b      	orrs	r3, r1
 800c476:	627b      	str	r3, [r7, #36]	; 0x24
 800c478:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c47c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800c480:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c484:	f04f 0000 	mov.w	r0, #0
 800c488:	f04f 0100 	mov.w	r1, #0
 800c48c:	0219      	lsls	r1, r3, #8
 800c48e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c492:	0210      	lsls	r0, r2, #8
 800c494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c496:	3303      	adds	r3, #3
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	2200      	movs	r2, #0
 800c49e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c4a2:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800c4a6:	4623      	mov	r3, r4
 800c4a8:	4303      	orrs	r3, r0
 800c4aa:	61bb      	str	r3, [r7, #24]
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	61fb      	str	r3, [r7, #28]
 800c4b2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c4b6:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800c4ba:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800c4be:	f04f 0000 	mov.w	r0, #0
 800c4c2:	f04f 0100 	mov.w	r1, #0
 800c4c6:	0219      	lsls	r1, r3, #8
 800c4c8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800c4cc:	0210      	lsls	r0, r2, #8
 800c4ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4d0:	3302      	adds	r3, #2
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	b2db      	uxtb	r3, r3
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	643b      	str	r3, [r7, #64]	; 0x40
 800c4da:	647a      	str	r2, [r7, #68]	; 0x44
 800c4dc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800c4e0:	4623      	mov	r3, r4
 800c4e2:	4303      	orrs	r3, r0
 800c4e4:	613b      	str	r3, [r7, #16]
 800c4e6:	462b      	mov	r3, r5
 800c4e8:	430b      	orrs	r3, r1
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c4f0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800c4f4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c4f8:	f04f 0200 	mov.w	r2, #0
 800c4fc:	f04f 0300 	mov.w	r3, #0
 800c500:	020b      	lsls	r3, r1, #8
 800c502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c506:	0202      	lsls	r2, r0, #8
 800c508:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c50a:	3101      	adds	r1, #1
 800c50c:	7809      	ldrb	r1, [r1, #0]
 800c50e:	b2c9      	uxtb	r1, r1
 800c510:	2000      	movs	r0, #0
 800c512:	63b9      	str	r1, [r7, #56]	; 0x38
 800c514:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c516:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800c51a:	4621      	mov	r1, r4
 800c51c:	4311      	orrs	r1, r2
 800c51e:	60b9      	str	r1, [r7, #8]
 800c520:	4629      	mov	r1, r5
 800c522:	4319      	orrs	r1, r3
 800c524:	60f9      	str	r1, [r7, #12]
 800c526:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800c52a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800c52e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c532:	f04f 0200 	mov.w	r2, #0
 800c536:	f04f 0300 	mov.w	r3, #0
 800c53a:	020b      	lsls	r3, r1, #8
 800c53c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c540:	0202      	lsls	r2, r0, #8
 800c542:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c544:	7809      	ldrb	r1, [r1, #0]
 800c546:	b2c9      	uxtb	r1, r1
 800c548:	2000      	movs	r0, #0
 800c54a:	6339      	str	r1, [r7, #48]	; 0x30
 800c54c:	6378      	str	r0, [r7, #52]	; 0x34
 800c54e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c552:	4621      	mov	r1, r4
 800c554:	4311      	orrs	r1, r2
 800c556:	6039      	str	r1, [r7, #0]
 800c558:	4629      	mov	r1, r5
 800c55a:	4319      	orrs	r1, r3
 800c55c:	6079      	str	r1, [r7, #4]
 800c55e:	e9d7 3400 	ldrd	r3, r4, [r7]
 800c562:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800c566:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800c56a:	4610      	mov	r0, r2
 800c56c:	4619      	mov	r1, r3
 800c56e:	3774      	adds	r7, #116	; 0x74
 800c570:	46bd      	mov	sp, r7
 800c572:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c576:	4770      	bx	lr

0800c578 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	460b      	mov	r3, r1
 800c582:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	1c5a      	adds	r2, r3, #1
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	887a      	ldrh	r2, [r7, #2]
 800c58c:	b2d2      	uxtb	r2, r2
 800c58e:	701a      	strb	r2, [r3, #0]
 800c590:	887b      	ldrh	r3, [r7, #2]
 800c592:	0a1b      	lsrs	r3, r3, #8
 800c594:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	607a      	str	r2, [r7, #4]
 800c59c:	887a      	ldrh	r2, [r7, #2]
 800c59e:	b2d2      	uxtb	r2, r2
 800c5a0:	701a      	strb	r2, [r3, #0]
}
 800c5a2:	bf00      	nop
 800c5a4:	370c      	adds	r7, #12
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ac:	4770      	bx	lr

0800c5ae <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c5ae:	b480      	push	{r7}
 800c5b0:	b083      	sub	sp, #12
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
 800c5b6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	607a      	str	r2, [r7, #4]
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	b2d2      	uxtb	r2, r2
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	0a1b      	lsrs	r3, r3, #8
 800c5c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	1c5a      	adds	r2, r3, #1
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	b2d2      	uxtb	r2, r2
 800c5d4:	701a      	strb	r2, [r3, #0]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	0a1b      	lsrs	r3, r3, #8
 800c5da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	607a      	str	r2, [r7, #4]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	b2d2      	uxtb	r2, r2
 800c5e6:	701a      	strb	r2, [r3, #0]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	0a1b      	lsrs	r3, r3, #8
 800c5ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	607a      	str	r2, [r7, #4]
 800c5f4:	683a      	ldr	r2, [r7, #0]
 800c5f6:	b2d2      	uxtb	r2, r2
 800c5f8:	701a      	strb	r2, [r3, #0]
}
 800c5fa:	bf00      	nop
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800c606:	b480      	push	{r7}
 800c608:	b085      	sub	sp, #20
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	60f8      	str	r0, [r7, #12]
 800c60e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	60fa      	str	r2, [r7, #12]
 800c618:	783a      	ldrb	r2, [r7, #0]
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c620:	f04f 0200 	mov.w	r2, #0
 800c624:	f04f 0300 	mov.w	r3, #0
 800c628:	0a02      	lsrs	r2, r0, #8
 800c62a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c62e:	0a0b      	lsrs	r3, r1, #8
 800c630:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	1c5a      	adds	r2, r3, #1
 800c638:	60fa      	str	r2, [r7, #12]
 800c63a:	783a      	ldrb	r2, [r7, #0]
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c642:	f04f 0200 	mov.w	r2, #0
 800c646:	f04f 0300 	mov.w	r3, #0
 800c64a:	0a02      	lsrs	r2, r0, #8
 800c64c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c650:	0a0b      	lsrs	r3, r1, #8
 800c652:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	1c5a      	adds	r2, r3, #1
 800c65a:	60fa      	str	r2, [r7, #12]
 800c65c:	783a      	ldrb	r2, [r7, #0]
 800c65e:	701a      	strb	r2, [r3, #0]
 800c660:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	f04f 0300 	mov.w	r3, #0
 800c66c:	0a02      	lsrs	r2, r0, #8
 800c66e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c672:	0a0b      	lsrs	r3, r1, #8
 800c674:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	60fa      	str	r2, [r7, #12]
 800c67e:	783a      	ldrb	r2, [r7, #0]
 800c680:	701a      	strb	r2, [r3, #0]
 800c682:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c686:	f04f 0200 	mov.w	r2, #0
 800c68a:	f04f 0300 	mov.w	r3, #0
 800c68e:	0a02      	lsrs	r2, r0, #8
 800c690:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c694:	0a0b      	lsrs	r3, r1, #8
 800c696:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	60fa      	str	r2, [r7, #12]
 800c6a0:	783a      	ldrb	r2, [r7, #0]
 800c6a2:	701a      	strb	r2, [r3, #0]
 800c6a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6a8:	f04f 0200 	mov.w	r2, #0
 800c6ac:	f04f 0300 	mov.w	r3, #0
 800c6b0:	0a02      	lsrs	r2, r0, #8
 800c6b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6b6:	0a0b      	lsrs	r3, r1, #8
 800c6b8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	1c5a      	adds	r2, r3, #1
 800c6c0:	60fa      	str	r2, [r7, #12]
 800c6c2:	783a      	ldrb	r2, [r7, #0]
 800c6c4:	701a      	strb	r2, [r3, #0]
 800c6c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6ca:	f04f 0200 	mov.w	r2, #0
 800c6ce:	f04f 0300 	mov.w	r3, #0
 800c6d2:	0a02      	lsrs	r2, r0, #8
 800c6d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6d8:	0a0b      	lsrs	r3, r1, #8
 800c6da:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	60fa      	str	r2, [r7, #12]
 800c6e4:	783a      	ldrb	r2, [r7, #0]
 800c6e6:	701a      	strb	r2, [r3, #0]
 800c6e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c6ec:	f04f 0200 	mov.w	r2, #0
 800c6f0:	f04f 0300 	mov.w	r3, #0
 800c6f4:	0a02      	lsrs	r2, r0, #8
 800c6f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800c6fa:	0a0b      	lsrs	r3, r1, #8
 800c6fc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	1c5a      	adds	r2, r3, #1
 800c704:	60fa      	str	r2, [r7, #12]
 800c706:	783a      	ldrb	r2, [r7, #0]
 800c708:	701a      	strb	r2, [r3, #0]
}
 800c70a:	bf00      	nop
 800c70c:	3714      	adds	r7, #20
 800c70e:	46bd      	mov	sp, r7
 800c710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c714:	4770      	bx	lr

0800c716 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c716:	b480      	push	{r7}
 800c718:	b087      	sub	sp, #28
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00d      	beq.n	800c74c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	1c53      	adds	r3, r2, #1
 800c734:	613b      	str	r3, [r7, #16]
 800c736:	697b      	ldr	r3, [r7, #20]
 800c738:	1c59      	adds	r1, r3, #1
 800c73a:	6179      	str	r1, [r7, #20]
 800c73c:	7812      	ldrb	r2, [r2, #0]
 800c73e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	3b01      	subs	r3, #1
 800c744:	607b      	str	r3, [r7, #4]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1f1      	bne.n	800c730 <mem_cpy+0x1a>
	}
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c758:	b480      	push	{r7}
 800c75a:	b087      	sub	sp, #28
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	60f8      	str	r0, [r7, #12]
 800c760:	60b9      	str	r1, [r7, #8]
 800c762:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	1c5a      	adds	r2, r3, #1
 800c76c:	617a      	str	r2, [r7, #20]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	b2d2      	uxtb	r2, r2
 800c772:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	3b01      	subs	r3, #1
 800c778:	607b      	str	r3, [r7, #4]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d1f3      	bne.n	800c768 <mem_set+0x10>
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	371c      	adds	r7, #28
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c78e:	b480      	push	{r7}
 800c790:	b089      	sub	sp, #36	; 0x24
 800c792:	af00      	add	r7, sp, #0
 800c794:	60f8      	str	r0, [r7, #12]
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	61fb      	str	r3, [r7, #28]
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	1c5a      	adds	r2, r3, #1
 800c7aa:	61fa      	str	r2, [r7, #28]
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	1c5a      	adds	r2, r3, #1
 800c7b4:	61ba      	str	r2, [r7, #24]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	1acb      	subs	r3, r1, r3
 800c7ba:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	607b      	str	r3, [r7, #4]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <mem_cmp+0x40>
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d0eb      	beq.n	800c7a6 <mem_cmp+0x18>

	return r;
 800c7ce:	697b      	ldr	r3, [r7, #20]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3724      	adds	r7, #36	; 0x24
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c7dc:	b480      	push	{r7}
 800c7de:	b083      	sub	sp, #12
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c7e6:	e002      	b.n	800c7ee <chk_chr+0x12>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3301      	adds	r3, #1
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d005      	beq.n	800c802 <chk_chr+0x26>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d1f2      	bne.n	800c7e8 <chk_chr+0xc>
	return *str;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	781b      	ldrb	r3, [r3, #0]
}
 800c806:	4618      	mov	r0, r3
 800c808:	370c      	adds	r7, #12
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
	...

0800c814 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c814:	b480      	push	{r7}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c81e:	2300      	movs	r3, #0
 800c820:	60bb      	str	r3, [r7, #8]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	60fb      	str	r3, [r7, #12]
 800c826:	e029      	b.n	800c87c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c828:	4a27      	ldr	r2, [pc, #156]	; (800c8c8 <chk_lock+0xb4>)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	011b      	lsls	r3, r3, #4
 800c82e:	4413      	add	r3, r2
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d01d      	beq.n	800c872 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c836:	4a24      	ldr	r2, [pc, #144]	; (800c8c8 <chk_lock+0xb4>)
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	011b      	lsls	r3, r3, #4
 800c83c:	4413      	add	r3, r2
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d116      	bne.n	800c876 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c848:	4a1f      	ldr	r2, [pc, #124]	; (800c8c8 <chk_lock+0xb4>)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	011b      	lsls	r3, r3, #4
 800c84e:	4413      	add	r3, r2
 800c850:	3304      	adds	r3, #4
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c858:	429a      	cmp	r2, r3
 800c85a:	d10c      	bne.n	800c876 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c85c:	4a1a      	ldr	r2, [pc, #104]	; (800c8c8 <chk_lock+0xb4>)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	4413      	add	r3, r2
 800c864:	3308      	adds	r3, #8
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d102      	bne.n	800c876 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c870:	e007      	b.n	800c882 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c872:	2301      	movs	r3, #1
 800c874:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	3301      	adds	r3, #1
 800c87a:	60fb      	str	r3, [r7, #12]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d9d2      	bls.n	800c828 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2b02      	cmp	r3, #2
 800c886:	d109      	bne.n	800c89c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d102      	bne.n	800c894 <chk_lock+0x80>
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d101      	bne.n	800c898 <chk_lock+0x84>
 800c894:	2300      	movs	r3, #0
 800c896:	e010      	b.n	800c8ba <chk_lock+0xa6>
 800c898:	2312      	movs	r3, #18
 800c89a:	e00e      	b.n	800c8ba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d108      	bne.n	800c8b4 <chk_lock+0xa0>
 800c8a2:	4a09      	ldr	r2, [pc, #36]	; (800c8c8 <chk_lock+0xb4>)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	011b      	lsls	r3, r3, #4
 800c8a8:	4413      	add	r3, r2
 800c8aa:	330c      	adds	r3, #12
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b2:	d101      	bne.n	800c8b8 <chk_lock+0xa4>
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	e000      	b.n	800c8ba <chk_lock+0xa6>
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3714      	adds	r7, #20
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	24002358 	.word	0x24002358

0800c8cc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	607b      	str	r3, [r7, #4]
 800c8d6:	e002      	b.n	800c8de <enq_lock+0x12>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	607b      	str	r3, [r7, #4]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2b01      	cmp	r3, #1
 800c8e2:	d806      	bhi.n	800c8f2 <enq_lock+0x26>
 800c8e4:	4a09      	ldr	r2, [pc, #36]	; (800c90c <enq_lock+0x40>)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	011b      	lsls	r3, r3, #4
 800c8ea:	4413      	add	r3, r2
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f2      	bne.n	800c8d8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	bf14      	ite	ne
 800c8f8:	2301      	movne	r3, #1
 800c8fa:	2300      	moveq	r3, #0
 800c8fc:	b2db      	uxtb	r3, r3
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	24002358 	.word	0x24002358

0800c910 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c910:	b480      	push	{r7}
 800c912:	b085      	sub	sp, #20
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c91a:	2300      	movs	r3, #0
 800c91c:	60fb      	str	r3, [r7, #12]
 800c91e:	e01f      	b.n	800c960 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c920:	4a41      	ldr	r2, [pc, #260]	; (800ca28 <inc_lock+0x118>)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	4413      	add	r3, r2
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d113      	bne.n	800c95a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c932:	4a3d      	ldr	r2, [pc, #244]	; (800ca28 <inc_lock+0x118>)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	011b      	lsls	r3, r3, #4
 800c938:	4413      	add	r3, r2
 800c93a:	3304      	adds	r3, #4
 800c93c:	681a      	ldr	r2, [r3, #0]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c942:	429a      	cmp	r2, r3
 800c944:	d109      	bne.n	800c95a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c946:	4a38      	ldr	r2, [pc, #224]	; (800ca28 <inc_lock+0x118>)
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	011b      	lsls	r3, r3, #4
 800c94c:	4413      	add	r3, r2
 800c94e:	3308      	adds	r3, #8
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800c956:	429a      	cmp	r2, r3
 800c958:	d006      	beq.n	800c968 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3301      	adds	r3, #1
 800c95e:	60fb      	str	r3, [r7, #12]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d9dc      	bls.n	800c920 <inc_lock+0x10>
 800c966:	e000      	b.n	800c96a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c968:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	d132      	bne.n	800c9d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c970:	2300      	movs	r3, #0
 800c972:	60fb      	str	r3, [r7, #12]
 800c974:	e002      	b.n	800c97c <inc_lock+0x6c>
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	3301      	adds	r3, #1
 800c97a:	60fb      	str	r3, [r7, #12]
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d806      	bhi.n	800c990 <inc_lock+0x80>
 800c982:	4a29      	ldr	r2, [pc, #164]	; (800ca28 <inc_lock+0x118>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	011b      	lsls	r3, r3, #4
 800c988:	4413      	add	r3, r2
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1f2      	bne.n	800c976 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2b02      	cmp	r3, #2
 800c994:	d101      	bne.n	800c99a <inc_lock+0x8a>
 800c996:	2300      	movs	r3, #0
 800c998:	e040      	b.n	800ca1c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681a      	ldr	r2, [r3, #0]
 800c99e:	4922      	ldr	r1, [pc, #136]	; (800ca28 <inc_lock+0x118>)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	011b      	lsls	r3, r3, #4
 800c9a4:	440b      	add	r3, r1
 800c9a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	689a      	ldr	r2, [r3, #8]
 800c9ac:	491e      	ldr	r1, [pc, #120]	; (800ca28 <inc_lock+0x118>)
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	011b      	lsls	r3, r3, #4
 800c9b2:	440b      	add	r3, r1
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9bc:	491a      	ldr	r1, [pc, #104]	; (800ca28 <inc_lock+0x118>)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	011b      	lsls	r3, r3, #4
 800c9c2:	440b      	add	r3, r1
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c9c8:	4a17      	ldr	r2, [pc, #92]	; (800ca28 <inc_lock+0x118>)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	011b      	lsls	r3, r3, #4
 800c9ce:	4413      	add	r3, r2
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d009      	beq.n	800c9f0 <inc_lock+0xe0>
 800c9dc:	4a12      	ldr	r2, [pc, #72]	; (800ca28 <inc_lock+0x118>)
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	011b      	lsls	r3, r3, #4
 800c9e2:	4413      	add	r3, r2
 800c9e4:	330c      	adds	r3, #12
 800c9e6:	881b      	ldrh	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d001      	beq.n	800c9f0 <inc_lock+0xe0>
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	e015      	b.n	800ca1c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d108      	bne.n	800ca08 <inc_lock+0xf8>
 800c9f6:	4a0c      	ldr	r2, [pc, #48]	; (800ca28 <inc_lock+0x118>)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	011b      	lsls	r3, r3, #4
 800c9fc:	4413      	add	r3, r2
 800c9fe:	330c      	adds	r3, #12
 800ca00:	881b      	ldrh	r3, [r3, #0]
 800ca02:	3301      	adds	r3, #1
 800ca04:	b29a      	uxth	r2, r3
 800ca06:	e001      	b.n	800ca0c <inc_lock+0xfc>
 800ca08:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca0c:	4906      	ldr	r1, [pc, #24]	; (800ca28 <inc_lock+0x118>)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	011b      	lsls	r3, r3, #4
 800ca12:	440b      	add	r3, r1
 800ca14:	330c      	adds	r3, #12
 800ca16:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	3301      	adds	r3, #1
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	24002358 	.word	0x24002358

0800ca2c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	3b01      	subs	r3, #1
 800ca38:	607b      	str	r3, [r7, #4]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d825      	bhi.n	800ca8c <dec_lock+0x60>
		n = Files[i].ctr;
 800ca40:	4a17      	ldr	r2, [pc, #92]	; (800caa0 <dec_lock+0x74>)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	011b      	lsls	r3, r3, #4
 800ca46:	4413      	add	r3, r2
 800ca48:	330c      	adds	r3, #12
 800ca4a:	881b      	ldrh	r3, [r3, #0]
 800ca4c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca4e:	89fb      	ldrh	r3, [r7, #14]
 800ca50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca54:	d101      	bne.n	800ca5a <dec_lock+0x2e>
 800ca56:	2300      	movs	r3, #0
 800ca58:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca5a:	89fb      	ldrh	r3, [r7, #14]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <dec_lock+0x3a>
 800ca60:	89fb      	ldrh	r3, [r7, #14]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca66:	4a0e      	ldr	r2, [pc, #56]	; (800caa0 <dec_lock+0x74>)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	4413      	add	r3, r2
 800ca6e:	330c      	adds	r3, #12
 800ca70:	89fa      	ldrh	r2, [r7, #14]
 800ca72:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ca74:	89fb      	ldrh	r3, [r7, #14]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d105      	bne.n	800ca86 <dec_lock+0x5a>
 800ca7a:	4a09      	ldr	r2, [pc, #36]	; (800caa0 <dec_lock+0x74>)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	011b      	lsls	r3, r3, #4
 800ca80:	4413      	add	r3, r2
 800ca82:	2200      	movs	r2, #0
 800ca84:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ca86:	2300      	movs	r3, #0
 800ca88:	737b      	strb	r3, [r7, #13]
 800ca8a:	e001      	b.n	800ca90 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ca90:	7b7b      	ldrb	r3, [r7, #13]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3714      	adds	r7, #20
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop
 800caa0:	24002358 	.word	0x24002358

0800caa4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800caac:	2300      	movs	r3, #0
 800caae:	60fb      	str	r3, [r7, #12]
 800cab0:	e010      	b.n	800cad4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cab2:	4a0d      	ldr	r2, [pc, #52]	; (800cae8 <clear_lock+0x44>)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	011b      	lsls	r3, r3, #4
 800cab8:	4413      	add	r3, r2
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d105      	bne.n	800cace <clear_lock+0x2a>
 800cac2:	4a09      	ldr	r2, [pc, #36]	; (800cae8 <clear_lock+0x44>)
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	011b      	lsls	r3, r3, #4
 800cac8:	4413      	add	r3, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	3301      	adds	r3, #1
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2b01      	cmp	r3, #1
 800cad8:	d9eb      	bls.n	800cab2 <clear_lock+0xe>
	}
}
 800cada:	bf00      	nop
 800cadc:	bf00      	nop
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr
 800cae8:	24002358 	.word	0x24002358

0800caec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800caf4:	2300      	movs	r3, #0
 800caf6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	78db      	ldrb	r3, [r3, #3]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d034      	beq.n	800cb6a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb04:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	7858      	ldrb	r0, [r3, #1]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb10:	2301      	movs	r3, #1
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	f7ff fbdc 	bl	800c2d0 <disk_write>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	73fb      	strb	r3, [r7, #15]
 800cb22:	e022      	b.n	800cb6a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	1ad2      	subs	r2, r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d217      	bcs.n	800cb6a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	789b      	ldrb	r3, [r3, #2]
 800cb3e:	613b      	str	r3, [r7, #16]
 800cb40:	e010      	b.n	800cb64 <sync_window+0x78>
					wsect += fs->fsize;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	4413      	add	r3, r2
 800cb4a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	7858      	ldrb	r0, [r3, #1]
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cb56:	2301      	movs	r3, #1
 800cb58:	697a      	ldr	r2, [r7, #20]
 800cb5a:	f7ff fbb9 	bl	800c2d0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	3b01      	subs	r3, #1
 800cb62:	613b      	str	r3, [r7, #16]
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d8eb      	bhi.n	800cb42 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3718      	adds	r7, #24
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
 800cb7c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cb7e:	2300      	movs	r3, #0
 800cb80:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d01b      	beq.n	800cbc4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f7ff ffad 	bl	800caec <sync_window>
 800cb92:	4603      	mov	r3, r0
 800cb94:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d113      	bne.n	800cbc4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	7858      	ldrb	r0, [r3, #1]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cba6:	2301      	movs	r3, #1
 800cba8:	683a      	ldr	r2, [r7, #0]
 800cbaa:	f7ff fb71 	bl	800c290 <disk_read>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d004      	beq.n	800cbbe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbb4:	f04f 33ff 	mov.w	r3, #4294967295
 800cbb8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	683a      	ldr	r2, [r7, #0]
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
	...

0800cbd0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b084      	sub	sp, #16
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ff87 	bl	800caec <sync_window>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cbe2:	7bfb      	ldrb	r3, [r7, #15]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d159      	bne.n	800cc9c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	2b03      	cmp	r3, #3
 800cbee:	d149      	bne.n	800cc84 <sync_fs+0xb4>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	791b      	ldrb	r3, [r3, #4]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d145      	bne.n	800cc84 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	899b      	ldrh	r3, [r3, #12]
 800cc02:	461a      	mov	r2, r3
 800cc04:	2100      	movs	r1, #0
 800cc06:	f7ff fda7 	bl	800c758 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	333c      	adds	r3, #60	; 0x3c
 800cc0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc12:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fcae 	bl	800c578 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	333c      	adds	r3, #60	; 0x3c
 800cc20:	4921      	ldr	r1, [pc, #132]	; (800cca8 <sync_fs+0xd8>)
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7ff fcc3 	bl	800c5ae <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	333c      	adds	r3, #60	; 0x3c
 800cc2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc30:	491e      	ldr	r1, [pc, #120]	; (800ccac <sync_fs+0xdc>)
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff fcbb 	bl	800c5ae <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	333c      	adds	r3, #60	; 0x3c
 800cc3c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	69db      	ldr	r3, [r3, #28]
 800cc44:	4619      	mov	r1, r3
 800cc46:	4610      	mov	r0, r2
 800cc48:	f7ff fcb1 	bl	800c5ae <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	333c      	adds	r3, #60	; 0x3c
 800cc50:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	4619      	mov	r1, r3
 800cc5a:	4610      	mov	r0, r2
 800cc5c:	f7ff fca7 	bl	800c5ae <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc64:	1c5a      	adds	r2, r3, #1
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7858      	ldrb	r0, [r3, #1]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc78:	2301      	movs	r3, #1
 800cc7a:	f7ff fb29 	bl	800c2d0 <disk_write>
			fs->fsi_flag = 0;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2200      	movs	r2, #0
 800cc82:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	785b      	ldrb	r3, [r3, #1]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7ff fb3f 	bl	800c310 <disk_ioctl>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <sync_fs+0xcc>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
 800cca6:	bf00      	nop
 800cca8:	41615252 	.word	0x41615252
 800ccac:	61417272 	.word	0x61417272

0800ccb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	3b02      	subs	r3, #2
 800ccbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a1b      	ldr	r3, [r3, #32]
 800ccc4:	3b02      	subs	r3, #2
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d301      	bcc.n	800ccd0 <clust2sect+0x20>
 800cccc:	2300      	movs	r3, #0
 800ccce:	e008      	b.n	800cce2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	895b      	ldrh	r3, [r3, #10]
 800ccd4:	461a      	mov	r2, r3
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	fb03 f202 	mul.w	r2, r3, r2
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cce0:	4413      	add	r3, r2
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr
	...

0800ccf0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ccf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ccf4:	b088      	sub	sp, #32
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
 800ccfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	d904      	bls.n	800cd12 <get_fat+0x22>
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	6a1b      	ldr	r3, [r3, #32]
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d302      	bcc.n	800cd18 <get_fat+0x28>
		val = 1;	/* Internal error */
 800cd12:	2301      	movs	r3, #1
 800cd14:	61fb      	str	r3, [r7, #28]
 800cd16:	e13a      	b.n	800cf8e <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd18:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800cd1e:	69bb      	ldr	r3, [r7, #24]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	2b03      	cmp	r3, #3
 800cd26:	f200 8126 	bhi.w	800cf76 <get_fat+0x286>
 800cd2a:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <get_fat+0x40>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cd41 	.word	0x0800cd41
 800cd34:	0800cdef 	.word	0x0800cdef
 800cd38:	0800ce3b 	.word	0x0800ce3b
 800cd3c:	0800ce8b 	.word	0x0800ce8b
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	085b      	lsrs	r3, r3, #1
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4413      	add	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd4e:	69bb      	ldr	r3, [r7, #24]
 800cd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	899b      	ldrh	r3, [r3, #12]
 800cd56:	4619      	mov	r1, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd5e:	4413      	add	r3, r2
 800cd60:	4619      	mov	r1, r3
 800cd62:	69b8      	ldr	r0, [r7, #24]
 800cd64:	f7ff ff06 	bl	800cb74 <move_window>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f040 8106 	bne.w	800cf7c <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	1c5a      	adds	r2, r3, #1
 800cd74:	60fa      	str	r2, [r7, #12]
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	8992      	ldrh	r2, [r2, #12]
 800cd7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd7e:	fb01 f202 	mul.w	r2, r1, r2
 800cd82:	1a9b      	subs	r3, r3, r2
 800cd84:	69ba      	ldr	r2, [r7, #24]
 800cd86:	4413      	add	r3, r2
 800cd88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd8c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	899b      	ldrh	r3, [r3, #12]
 800cd96:	4619      	mov	r1, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800cd9e:	4413      	add	r3, r2
 800cda0:	4619      	mov	r1, r3
 800cda2:	69b8      	ldr	r0, [r7, #24]
 800cda4:	f7ff fee6 	bl	800cb74 <move_window>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f040 80e8 	bne.w	800cf80 <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cdb0:	69bb      	ldr	r3, [r7, #24]
 800cdb2:	899b      	ldrh	r3, [r3, #12]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdbc:	fb01 f202 	mul.w	r2, r1, r2
 800cdc0:	1a9b      	subs	r3, r3, r2
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdca:	021b      	lsls	r3, r3, #8
 800cdcc:	461a      	mov	r2, r3
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d002      	beq.n	800cde4 <get_fat+0xf4>
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	091b      	lsrs	r3, r3, #4
 800cde2:	e002      	b.n	800cdea <get_fat+0xfa>
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdea:	61fb      	str	r3, [r7, #28]
			break;
 800cdec:	e0cf      	b.n	800cf8e <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdee:	69bb      	ldr	r3, [r7, #24]
 800cdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	899b      	ldrh	r3, [r3, #12]
 800cdf6:	085b      	lsrs	r3, r3, #1
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce02:	4413      	add	r3, r2
 800ce04:	4619      	mov	r1, r3
 800ce06:	69b8      	ldr	r0, [r7, #24]
 800ce08:	f7ff feb4 	bl	800cb74 <move_window>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 80b8 	bne.w	800cf84 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ce14:	69bb      	ldr	r3, [r7, #24]
 800ce16:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	005b      	lsls	r3, r3, #1
 800ce1e:	69ba      	ldr	r2, [r7, #24]
 800ce20:	8992      	ldrh	r2, [r2, #12]
 800ce22:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce26:	fb00 f202 	mul.w	r2, r0, r2
 800ce2a:	1a9b      	subs	r3, r3, r2
 800ce2c:	440b      	add	r3, r1
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7ff fa8c 	bl	800c34c <ld_word>
 800ce34:	4603      	mov	r3, r0
 800ce36:	61fb      	str	r3, [r7, #28]
			break;
 800ce38:	e0a9      	b.n	800cf8e <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	899b      	ldrh	r3, [r3, #12]
 800ce42:	089b      	lsrs	r3, r3, #2
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	4619      	mov	r1, r3
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ce4e:	4413      	add	r3, r2
 800ce50:	4619      	mov	r1, r3
 800ce52:	69b8      	ldr	r0, [r7, #24]
 800ce54:	f7ff fe8e 	bl	800cb74 <move_window>
 800ce58:	4603      	mov	r3, r0
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f040 8094 	bne.w	800cf88 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	69ba      	ldr	r2, [r7, #24]
 800ce6c:	8992      	ldrh	r2, [r2, #12]
 800ce6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ce72:	fb00 f202 	mul.w	r2, r0, r2
 800ce76:	1a9b      	subs	r3, r3, r2
 800ce78:	440b      	add	r3, r1
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff fa7e 	bl	800c37c <ld_dword>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ce86:	61fb      	str	r3, [r7, #28]
			break;
 800ce88:	e081      	b.n	800cf8e <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	d070      	beq.n	800cf76 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	683a      	ldr	r2, [r7, #0]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cea4:	1e54      	subs	r4, r2, #1
 800cea6:	f143 35ff 	adc.w	r5, r3, #4294967295
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	899b      	ldrh	r3, [r3, #12]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	4698      	mov	r8, r3
 800ceb4:	4691      	mov	r9, r2
 800ceb6:	4642      	mov	r2, r8
 800ceb8:	464b      	mov	r3, r9
 800ceba:	4620      	mov	r0, r4
 800cebc:	4629      	mov	r1, r5
 800cebe:	f7f3 fa5f 	bl	8000380 <__aeabi_uldivmod>
 800cec2:	4602      	mov	r2, r0
 800cec4:	460b      	mov	r3, r1
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	895b      	ldrh	r3, [r3, #10]
 800ceca:	fbb2 f3f3 	udiv	r3, r2, r3
 800cece:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	79db      	ldrb	r3, [r3, #7]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d10e      	bne.n	800cef6 <get_fat+0x206>
					if (cofs <= clen) {
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d80a      	bhi.n	800cef6 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800cee0:	697a      	ldr	r2, [r7, #20]
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d002      	beq.n	800ceee <get_fat+0x1fe>
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	3301      	adds	r3, #1
 800ceec:	e001      	b.n	800cef2 <get_fat+0x202>
 800ceee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cef2:	61fb      	str	r3, [r7, #28]
						break;
 800cef4:	e04b      	b.n	800cf8e <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	79db      	ldrb	r3, [r3, #7]
 800cefa:	2b03      	cmp	r3, #3
 800cefc:	d108      	bne.n	800cf10 <get_fat+0x220>
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	697a      	ldr	r2, [r7, #20]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	d203      	bcs.n	800cf10 <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	61fb      	str	r3, [r7, #28]
					break;
 800cf0e:	e03e      	b.n	800cf8e <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	79db      	ldrb	r3, [r3, #7]
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d02e      	beq.n	800cf76 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	69db      	ldr	r3, [r3, #28]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d003      	beq.n	800cf28 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800cf20:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cf24:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800cf26:	e032      	b.n	800cf8e <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	899b      	ldrh	r3, [r3, #12]
 800cf30:	089b      	lsrs	r3, r3, #2
 800cf32:	b29b      	uxth	r3, r3
 800cf34:	4619      	mov	r1, r3
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	fbb3 f3f1 	udiv	r3, r3, r1
 800cf3c:	4413      	add	r3, r2
 800cf3e:	4619      	mov	r1, r3
 800cf40:	69b8      	ldr	r0, [r7, #24]
 800cf42:	f7ff fe17 	bl	800cb74 <move_window>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d11f      	bne.n	800cf8c <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800cf4c:	69bb      	ldr	r3, [r7, #24]
 800cf4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	69ba      	ldr	r2, [r7, #24]
 800cf58:	8992      	ldrh	r2, [r2, #12]
 800cf5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf5e:	fb00 f202 	mul.w	r2, r0, r2
 800cf62:	1a9b      	subs	r3, r3, r2
 800cf64:	440b      	add	r3, r1
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7ff fa08 	bl	800c37c <ld_dword>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf72:	61fb      	str	r3, [r7, #28]
					break;
 800cf74:	e00b      	b.n	800cf8e <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cf76:	2301      	movs	r3, #1
 800cf78:	61fb      	str	r3, [r7, #28]
 800cf7a:	e008      	b.n	800cf8e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf7c:	bf00      	nop
 800cf7e:	e006      	b.n	800cf8e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf80:	bf00      	nop
 800cf82:	e004      	b.n	800cf8e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf84:	bf00      	nop
 800cf86:	e002      	b.n	800cf8e <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf88:	bf00      	nop
 800cf8a:	e000      	b.n	800cf8e <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf8c:	bf00      	nop
		}
	}

	return val;
 800cf8e:	69fb      	ldr	r3, [r7, #28]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3720      	adds	r7, #32
 800cf94:	46bd      	mov	sp, r7
 800cf96:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800cf9a:	bf00      	nop

0800cf9c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cf9c:	b590      	push	{r4, r7, lr}
 800cf9e:	b089      	sub	sp, #36	; 0x24
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	60f8      	str	r0, [r7, #12]
 800cfa4:	60b9      	str	r1, [r7, #8]
 800cfa6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	f240 8106 	bls.w	800d1c0 <put_fat+0x224>
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	6a1b      	ldr	r3, [r3, #32]
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	f080 8100 	bcs.w	800d1c0 <put_fat+0x224>
		switch (fs->fs_type) {
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	2b04      	cmp	r3, #4
 800cfc6:	f300 8104 	bgt.w	800d1d2 <put_fat+0x236>
 800cfca:	2b03      	cmp	r3, #3
 800cfcc:	f280 80b3 	bge.w	800d136 <put_fat+0x19a>
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d003      	beq.n	800cfdc <put_fat+0x40>
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	f000 8083 	beq.w	800d0e0 <put_fat+0x144>
 800cfda:	e0fa      	b.n	800d1d2 <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	61bb      	str	r3, [r7, #24]
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	085b      	lsrs	r3, r3, #1
 800cfe4:	69ba      	ldr	r2, [r7, #24]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	899b      	ldrh	r3, [r3, #12]
 800cff2:	4619      	mov	r1, r3
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	fbb3 f3f1 	udiv	r3, r3, r1
 800cffa:	4413      	add	r3, r2
 800cffc:	4619      	mov	r1, r3
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f7ff fdb8 	bl	800cb74 <move_window>
 800d004:	4603      	mov	r3, r0
 800d006:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d008:	7ffb      	ldrb	r3, [r7, #31]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f040 80da 	bne.w	800d1c4 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	61ba      	str	r2, [r7, #24]
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	8992      	ldrh	r2, [r2, #12]
 800d020:	fbb3 f0f2 	udiv	r0, r3, r2
 800d024:	fb00 f202 	mul.w	r2, r0, r2
 800d028:	1a9b      	subs	r3, r3, r2
 800d02a:	440b      	add	r3, r1
 800d02c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	2b00      	cmp	r3, #0
 800d036:	d00d      	beq.n	800d054 <put_fat+0xb8>
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	b25b      	sxtb	r3, r3
 800d03e:	f003 030f 	and.w	r3, r3, #15
 800d042:	b25a      	sxtb	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	b2db      	uxtb	r3, r3
 800d048:	011b      	lsls	r3, r3, #4
 800d04a:	b25b      	sxtb	r3, r3
 800d04c:	4313      	orrs	r3, r2
 800d04e:	b25b      	sxtb	r3, r3
 800d050:	b2db      	uxtb	r3, r3
 800d052:	e001      	b.n	800d058 <put_fat+0xbc>
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	b2db      	uxtb	r3, r3
 800d058:	697a      	ldr	r2, [r7, #20]
 800d05a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2201      	movs	r2, #1
 800d060:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	899b      	ldrh	r3, [r3, #12]
 800d06a:	4619      	mov	r1, r3
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	fbb3 f3f1 	udiv	r3, r3, r1
 800d072:	4413      	add	r3, r2
 800d074:	4619      	mov	r1, r3
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f7ff fd7c 	bl	800cb74 <move_window>
 800d07c:	4603      	mov	r3, r0
 800d07e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d080:	7ffb      	ldrb	r3, [r7, #31]
 800d082:	2b00      	cmp	r3, #0
 800d084:	f040 80a0 	bne.w	800d1c8 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	899b      	ldrh	r3, [r3, #12]
 800d092:	461a      	mov	r2, r3
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	fbb3 f0f2 	udiv	r0, r3, r2
 800d09a:	fb00 f202 	mul.w	r2, r0, r2
 800d09e:	1a9b      	subs	r3, r3, r2
 800d0a0:	440b      	add	r3, r1
 800d0a2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d003      	beq.n	800d0b6 <put_fat+0x11a>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	091b      	lsrs	r3, r3, #4
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	e00e      	b.n	800d0d4 <put_fat+0x138>
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	781b      	ldrb	r3, [r3, #0]
 800d0ba:	b25b      	sxtb	r3, r3
 800d0bc:	f023 030f 	bic.w	r3, r3, #15
 800d0c0:	b25a      	sxtb	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	0a1b      	lsrs	r3, r3, #8
 800d0c6:	b25b      	sxtb	r3, r3
 800d0c8:	f003 030f 	and.w	r3, r3, #15
 800d0cc:	b25b      	sxtb	r3, r3
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	b25b      	sxtb	r3, r3
 800d0d2:	b2db      	uxtb	r3, r3
 800d0d4:	697a      	ldr	r2, [r7, #20]
 800d0d6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	70da      	strb	r2, [r3, #3]
			break;
 800d0de:	e078      	b.n	800d1d2 <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	899b      	ldrh	r3, [r3, #12]
 800d0e8:	085b      	lsrs	r3, r3, #1
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d0f4:	4413      	add	r3, r2
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f7ff fd3b 	bl	800cb74 <move_window>
 800d0fe:	4603      	mov	r3, r0
 800d100:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d102:	7ffb      	ldrb	r3, [r7, #31]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d161      	bne.n	800d1cc <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	005b      	lsls	r3, r3, #1
 800d112:	68fa      	ldr	r2, [r7, #12]
 800d114:	8992      	ldrh	r2, [r2, #12]
 800d116:	fbb3 f0f2 	udiv	r0, r3, r2
 800d11a:	fb00 f202 	mul.w	r2, r0, r2
 800d11e:	1a9b      	subs	r3, r3, r2
 800d120:	440b      	add	r3, r1
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	b292      	uxth	r2, r2
 800d126:	4611      	mov	r1, r2
 800d128:	4618      	mov	r0, r3
 800d12a:	f7ff fa25 	bl	800c578 <st_word>
			fs->wflag = 1;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2201      	movs	r2, #1
 800d132:	70da      	strb	r2, [r3, #3]
			break;
 800d134:	e04d      	b.n	800d1d2 <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	899b      	ldrh	r3, [r3, #12]
 800d13e:	089b      	lsrs	r3, r3, #2
 800d140:	b29b      	uxth	r3, r3
 800d142:	4619      	mov	r1, r3
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	fbb3 f3f1 	udiv	r3, r3, r1
 800d14a:	4413      	add	r3, r2
 800d14c:	4619      	mov	r1, r3
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f7ff fd10 	bl	800cb74 <move_window>
 800d154:	4603      	mov	r3, r0
 800d156:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d158:	7ffb      	ldrb	r3, [r7, #31]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d138      	bne.n	800d1d0 <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b04      	cmp	r3, #4
 800d164:	d017      	beq.n	800d196 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d172:	68bb      	ldr	r3, [r7, #8]
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	68fa      	ldr	r2, [r7, #12]
 800d178:	8992      	ldrh	r2, [r2, #12]
 800d17a:	fbb3 f0f2 	udiv	r0, r3, r2
 800d17e:	fb00 f202 	mul.w	r2, r0, r2
 800d182:	1a9b      	subs	r3, r3, r2
 800d184:	440b      	add	r3, r1
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff f8f8 	bl	800c37c <ld_dword>
 800d18c:	4603      	mov	r3, r0
 800d18e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d192:	4323      	orrs	r3, r4
 800d194:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	8992      	ldrh	r2, [r2, #12]
 800d1a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d1a8:	fb00 f202 	mul.w	r2, r0, r2
 800d1ac:	1a9b      	subs	r3, r3, r2
 800d1ae:	440b      	add	r3, r1
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7ff f9fb 	bl	800c5ae <st_dword>
			fs->wflag = 1;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	70da      	strb	r2, [r3, #3]
			break;
 800d1be:	e008      	b.n	800d1d2 <put_fat+0x236>
		}
	}
 800d1c0:	bf00      	nop
 800d1c2:	e006      	b.n	800d1d2 <put_fat+0x236>
			if (res != FR_OK) break;
 800d1c4:	bf00      	nop
 800d1c6:	e004      	b.n	800d1d2 <put_fat+0x236>
			if (res != FR_OK) break;
 800d1c8:	bf00      	nop
 800d1ca:	e002      	b.n	800d1d2 <put_fat+0x236>
			if (res != FR_OK) break;
 800d1cc:	bf00      	nop
 800d1ce:	e000      	b.n	800d1d2 <put_fat+0x236>
			if (res != FR_OK) break;
 800d1d0:	bf00      	nop
	return res;
 800d1d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3724      	adds	r7, #36	; 0x24
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd90      	pop	{r4, r7, pc}

0800d1dc <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b08a      	sub	sp, #40	; 0x28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	3b02      	subs	r3, #2
 800d1ec:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6a1b      	ldr	r3, [r3, #32]
 800d1f2:	3b02      	subs	r3, #2
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d301      	bcc.n	800d1fe <find_bitmap+0x22>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	61fb      	str	r3, [r7, #28]
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	61bb      	str	r3, [r7, #24]
 800d206:	2300      	movs	r3, #0
 800d208:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	08db      	lsrs	r3, r3, #3
 800d212:	68f9      	ldr	r1, [r7, #12]
 800d214:	8989      	ldrh	r1, [r1, #12]
 800d216:	fbb3 f3f1 	udiv	r3, r3, r1
 800d21a:	4413      	add	r3, r2
 800d21c:	4619      	mov	r1, r3
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f7ff fca8 	bl	800cb74 <move_window>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d002      	beq.n	800d230 <find_bitmap+0x54>
 800d22a:	f04f 33ff 	mov.w	r3, #4294967295
 800d22e:	e058      	b.n	800d2e2 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	08db      	lsrs	r3, r3, #3
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	8992      	ldrh	r2, [r2, #12]
 800d238:	fbb3 f1f2 	udiv	r1, r3, r2
 800d23c:	fb01 f202 	mul.w	r2, r1, r2
 800d240:	1a9b      	subs	r3, r3, r2
 800d242:	623b      	str	r3, [r7, #32]
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	f003 0307 	and.w	r3, r3, #7
 800d24a:	2201      	movs	r2, #1
 800d24c:	fa02 f303 	lsl.w	r3, r2, r3
 800d250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	6a3b      	ldr	r3, [r7, #32]
 800d258:	4413      	add	r3, r2
 800d25a:	333c      	adds	r3, #60	; 0x3c
 800d25c:	781a      	ldrb	r2, [r3, #0]
 800d25e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d262:	4013      	ands	r3, r2
 800d264:	74fb      	strb	r3, [r7, #19]
 800d266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d26a:	005b      	lsls	r3, r3, #1
 800d26c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	3301      	adds	r3, #1
 800d274:	61fb      	str	r3, [r7, #28]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	3b02      	subs	r3, #2
 800d27c:	69fa      	ldr	r2, [r7, #28]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d307      	bcc.n	800d292 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800d282:	2300      	movs	r3, #0
 800d284:	61fb      	str	r3, [r7, #28]
 800d286:	2300      	movs	r3, #0
 800d288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	899b      	ldrh	r3, [r3, #12]
 800d290:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800d292:	7cfb      	ldrb	r3, [r7, #19]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d109      	bne.n	800d2ac <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	3301      	adds	r3, #1
 800d29c:	617b      	str	r3, [r7, #20]
 800d29e:	697a      	ldr	r2, [r7, #20]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d106      	bne.n	800d2b4 <find_bitmap+0xd8>
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	3302      	adds	r3, #2
 800d2aa:	e01a      	b.n	800d2e2 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	61bb      	str	r3, [r7, #24]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800d2b4:	69fa      	ldr	r2, [r7, #28]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d101      	bne.n	800d2c0 <find_bitmap+0xe4>
 800d2bc:	2300      	movs	r3, #0
 800d2be:	e010      	b.n	800d2e2 <find_bitmap+0x106>
			} while (bm);
 800d2c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1c5      	bne.n	800d254 <find_bitmap+0x78>
			bm = 1;
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800d2ce:	6a3b      	ldr	r3, [r7, #32]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	623b      	str	r3, [r7, #32]
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	899b      	ldrh	r3, [r3, #12]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	4293      	cmp	r3, r2
 800d2de:	d3b9      	bcc.n	800d254 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800d2e0:	e793      	b.n	800d20a <find_bitmap+0x2e>
	}
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3728      	adds	r7, #40	; 0x28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b088      	sub	sp, #32
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	60b9      	str	r1, [r7, #8]
 800d2f4:	607a      	str	r2, [r7, #4]
 800d2f6:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	3b02      	subs	r3, #2
 800d2fc:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	08db      	lsrs	r3, r3, #3
 800d306:	68f9      	ldr	r1, [r7, #12]
 800d308:	8989      	ldrh	r1, [r1, #12]
 800d30a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d30e:	4413      	add	r3, r2
 800d310:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	08db      	lsrs	r3, r3, #3
 800d316:	68fa      	ldr	r2, [r7, #12]
 800d318:	8992      	ldrh	r2, [r2, #12]
 800d31a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d31e:	fb01 f202 	mul.w	r2, r1, r2
 800d322:	1a9b      	subs	r3, r3, r2
 800d324:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	f003 0307 	and.w	r3, r3, #7
 800d32c:	2201      	movs	r2, #1
 800d32e:	fa02 f303 	lsl.w	r3, r2, r3
 800d332:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	1c5a      	adds	r2, r3, #1
 800d338:	617a      	str	r2, [r7, #20]
 800d33a:	4619      	mov	r1, r3
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7ff fc19 	bl	800cb74 <move_window>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <change_bitmap+0x62>
 800d348:	2301      	movs	r3, #1
 800d34a:	e03f      	b.n	800d3cc <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	4413      	add	r3, r2
 800d352:	333c      	adds	r3, #60	; 0x3c
 800d354:	781a      	ldrb	r2, [r3, #0]
 800d356:	7ffb      	ldrb	r3, [r7, #31]
 800d358:	4013      	ands	r3, r2
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	bf14      	ite	ne
 800d360:	2301      	movne	r3, #1
 800d362:	2300      	moveq	r3, #0
 800d364:	b2db      	uxtb	r3, r3
 800d366:	461a      	mov	r2, r3
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d101      	bne.n	800d372 <change_bitmap+0x88>
 800d36e:	2302      	movs	r3, #2
 800d370:	e02c      	b.n	800d3cc <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800d372:	68fa      	ldr	r2, [r7, #12]
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	4413      	add	r3, r2
 800d378:	333c      	adds	r3, #60	; 0x3c
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	7ffb      	ldrb	r3, [r7, #31]
 800d37e:	4053      	eors	r3, r2
 800d380:	b2d9      	uxtb	r1, r3
 800d382:	68fa      	ldr	r2, [r7, #12]
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	4413      	add	r3, r2
 800d388:	333c      	adds	r3, #60	; 0x3c
 800d38a:	460a      	mov	r2, r1
 800d38c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2201      	movs	r2, #1
 800d392:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	3b01      	subs	r3, #1
 800d398:	607b      	str	r3, [r7, #4]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <change_bitmap+0xba>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	e013      	b.n	800d3cc <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800d3a4:	7ffb      	ldrb	r3, [r7, #31]
 800d3a6:	005b      	lsls	r3, r3, #1
 800d3a8:	77fb      	strb	r3, [r7, #31]
 800d3aa:	7ffb      	ldrb	r3, [r7, #31]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d1cd      	bne.n	800d34c <change_bitmap+0x62>
			bm = 1;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	61bb      	str	r3, [r7, #24]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	899b      	ldrh	r3, [r3, #12]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	69bb      	ldr	r3, [r7, #24]
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d3c2      	bcc.n	800d34c <change_bitmap+0x62>
		i = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800d3ca:	e7b3      	b.n	800d334 <change_bitmap+0x4a>
	}
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	79db      	ldrb	r3, [r3, #7]
 800d3e0:	2b03      	cmp	r3, #3
 800d3e2:	d121      	bne.n	800d428 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	613b      	str	r3, [r7, #16]
 800d3f0:	e014      	b.n	800d41c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6818      	ldr	r0, [r3, #0]
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	6979      	ldr	r1, [r7, #20]
 800d3fe:	f7ff fdcd 	bl	800cf9c <put_fat>
 800d402:	4603      	mov	r3, r0
 800d404:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800d406:	7bfb      	ldrb	r3, [r7, #15]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d001      	beq.n	800d410 <fill_first_frag+0x3c>
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	e00c      	b.n	800d42a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	3301      	adds	r3, #1
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	3b01      	subs	r3, #1
 800d41a:	613b      	str	r3, [r7, #16]
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d1e7      	bne.n	800d3f2 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d43e:	e020      	b.n	800d482 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6818      	ldr	r0, [r3, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	69db      	ldr	r3, [r3, #28]
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	1ad3      	subs	r3, r2, r3
 800d44c:	1c59      	adds	r1, r3, #1
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	2b01      	cmp	r3, #1
 800d454:	d905      	bls.n	800d462 <fill_last_frag+0x30>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	69db      	ldr	r3, [r3, #28]
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	3302      	adds	r3, #2
 800d460:	e000      	b.n	800d464 <fill_last_frag+0x32>
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	461a      	mov	r2, r3
 800d466:	f7ff fd99 	bl	800cf9c <put_fat>
 800d46a:	4603      	mov	r3, r0
 800d46c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <fill_last_frag+0x46>
 800d474:	7dfb      	ldrb	r3, [r7, #23]
 800d476:	e009      	b.n	800d48c <fill_last_frag+0x5a>
		obj->n_frag--;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	69db      	ldr	r3, [r3, #28]
 800d47c:	1e5a      	subs	r2, r3, #1
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	69db      	ldr	r3, [r3, #28]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1da      	bne.n	800d440 <fill_last_frag+0xe>
	}
	return FR_OK;
 800d48a:	2300      	movs	r3, #0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3718      	adds	r7, #24
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	; 0x28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d904      	bls.n	800d4c2 <remove_chain+0x2e>
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	6a1b      	ldr	r3, [r3, #32]
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d301      	bcc.n	800d4c6 <remove_chain+0x32>
 800d4c2:	2302      	movs	r3, #2
 800d4c4:	e096      	b.n	800d5f4 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d014      	beq.n	800d4f6 <remove_chain+0x62>
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b04      	cmp	r3, #4
 800d4d2:	d103      	bne.n	800d4dc <remove_chain+0x48>
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	79db      	ldrb	r3, [r3, #7]
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d00c      	beq.n	800d4f6 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	69b8      	ldr	r0, [r7, #24]
 800d4e4:	f7ff fd5a 	bl	800cf9c <put_fat>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d4ec:	7ffb      	ldrb	r3, [r7, #31]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d001      	beq.n	800d4f6 <remove_chain+0x62>
 800d4f2:	7ffb      	ldrb	r3, [r7, #31]
 800d4f4:	e07e      	b.n	800d5f4 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d4f6:	68b9      	ldr	r1, [r7, #8]
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f7ff fbf9 	bl	800ccf0 <get_fat>
 800d4fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d055      	beq.n	800d5b2 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d101      	bne.n	800d510 <remove_chain+0x7c>
 800d50c:	2302      	movs	r3, #2
 800d50e:	e071      	b.n	800d5f4 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d516:	d101      	bne.n	800d51c <remove_chain+0x88>
 800d518:	2301      	movs	r3, #1
 800d51a:	e06b      	b.n	800d5f4 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2b04      	cmp	r3, #4
 800d522:	d00b      	beq.n	800d53c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d524:	2200      	movs	r2, #0
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	69b8      	ldr	r0, [r7, #24]
 800d52a:	f7ff fd37 	bl	800cf9c <put_fat>
 800d52e:	4603      	mov	r3, r0
 800d530:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d532:	7ffb      	ldrb	r3, [r7, #31]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <remove_chain+0xa8>
 800d538:	7ffb      	ldrb	r3, [r7, #31]
 800d53a:	e05b      	b.n	800d5f4 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d53c:	69bb      	ldr	r3, [r7, #24]
 800d53e:	69da      	ldr	r2, [r3, #28]
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	6a1b      	ldr	r3, [r3, #32]
 800d544:	3b02      	subs	r3, #2
 800d546:	429a      	cmp	r2, r3
 800d548:	d20b      	bcs.n	800d562 <remove_chain+0xce>
			fs->free_clst++;
 800d54a:	69bb      	ldr	r3, [r7, #24]
 800d54c:	69db      	ldr	r3, [r3, #28]
 800d54e:	1c5a      	adds	r2, r3, #1
 800d550:	69bb      	ldr	r3, [r7, #24]
 800d552:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	791b      	ldrb	r3, [r3, #4]
 800d558:	f043 0301 	orr.w	r3, r3, #1
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800d562:	6a3b      	ldr	r3, [r7, #32]
 800d564:	3301      	adds	r3, #1
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d102      	bne.n	800d572 <remove_chain+0xde>
			ecl = nxt;
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	623b      	str	r3, [r7, #32]
 800d570:	e017      	b.n	800d5a2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b04      	cmp	r3, #4
 800d578:	d10f      	bne.n	800d59a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800d57a:	6a3a      	ldr	r2, [r7, #32]
 800d57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	2300      	movs	r3, #0
 800d584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d586:	69b8      	ldr	r0, [r7, #24]
 800d588:	f7ff feaf 	bl	800d2ea <change_bitmap>
 800d58c:	4603      	mov	r3, r0
 800d58e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800d590:	7ffb      	ldrb	r3, [r7, #31]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d001      	beq.n	800d59a <remove_chain+0x106>
 800d596:	7ffb      	ldrb	r3, [r7, #31]
 800d598:	e02c      	b.n	800d5f4 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	623b      	str	r3, [r7, #32]
 800d59e:	6a3b      	ldr	r3, [r7, #32]
 800d5a0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	6a1b      	ldr	r3, [r3, #32]
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d3a2      	bcc.n	800d4f6 <remove_chain+0x62>
 800d5b0:	e000      	b.n	800d5b4 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800d5b2:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b04      	cmp	r3, #4
 800d5ba:	d11a      	bne.n	800d5f2 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d103      	bne.n	800d5ca <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	71da      	strb	r2, [r3, #7]
 800d5c8:	e013      	b.n	800d5f2 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	79db      	ldrb	r3, [r3, #7]
 800d5ce:	2b03      	cmp	r3, #3
 800d5d0:	d10f      	bne.n	800d5f2 <remove_chain+0x15e>
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	687a      	ldr	r2, [r7, #4]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d30a      	bcc.n	800d5f2 <remove_chain+0x15e>
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	689a      	ldr	r2, [r3, #8]
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	4413      	add	r3, r2
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d802      	bhi.n	800d5f2 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3728      	adds	r7, #40	; 0x28
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}

0800d5fc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b088      	sub	sp, #32
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
 800d604:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d60c:	683b      	ldr	r3, [r7, #0]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10d      	bne.n	800d62e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	699b      	ldr	r3, [r3, #24]
 800d616:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d004      	beq.n	800d628 <create_chain+0x2c>
 800d61e:	693b      	ldr	r3, [r7, #16]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	69ba      	ldr	r2, [r7, #24]
 800d624:	429a      	cmp	r2, r3
 800d626:	d31b      	bcc.n	800d660 <create_chain+0x64>
 800d628:	2301      	movs	r3, #1
 800d62a:	61bb      	str	r3, [r7, #24]
 800d62c:	e018      	b.n	800d660 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f7ff fb5d 	bl	800ccf0 <get_fat>
 800d636:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d801      	bhi.n	800d642 <create_chain+0x46>
 800d63e:	2301      	movs	r3, #1
 800d640:	e0d9      	b.n	800d7f6 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d648:	d101      	bne.n	800d64e <create_chain+0x52>
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	e0d3      	b.n	800d7f6 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	6a1b      	ldr	r3, [r3, #32]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	429a      	cmp	r2, r3
 800d656:	d201      	bcs.n	800d65c <create_chain+0x60>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	e0cc      	b.n	800d7f6 <create_chain+0x1fa>
		scl = clst;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	2b04      	cmp	r3, #4
 800d666:	d164      	bne.n	800d732 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800d668:	2201      	movs	r2, #1
 800d66a:	69b9      	ldr	r1, [r7, #24]
 800d66c:	6938      	ldr	r0, [r7, #16]
 800d66e:	f7ff fdb5 	bl	800d1dc <find_bitmap>
 800d672:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <create_chain+0x86>
 800d67a:	69fb      	ldr	r3, [r7, #28]
 800d67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d680:	d101      	bne.n	800d686 <create_chain+0x8a>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	e0b7      	b.n	800d7f6 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800d686:	2301      	movs	r3, #1
 800d688:	2201      	movs	r2, #1
 800d68a:	69f9      	ldr	r1, [r7, #28]
 800d68c:	6938      	ldr	r0, [r7, #16]
 800d68e:	f7ff fe2c 	bl	800d2ea <change_bitmap>
 800d692:	4603      	mov	r3, r0
 800d694:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800d696:	7dfb      	ldrb	r3, [r7, #23]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d101      	bne.n	800d6a0 <create_chain+0xa4>
 800d69c:	2301      	movs	r3, #1
 800d69e:	e0aa      	b.n	800d7f6 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800d6a0:	7dfb      	ldrb	r3, [r7, #23]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d102      	bne.n	800d6ac <create_chain+0xb0>
 800d6a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6aa:	e0a4      	b.n	800d7f6 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d103      	bne.n	800d6ba <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2202      	movs	r2, #2
 800d6b6:	71da      	strb	r2, [r3, #7]
 800d6b8:	e011      	b.n	800d6de <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	79db      	ldrb	r3, [r3, #7]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d10d      	bne.n	800d6de <create_chain+0xe2>
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	3301      	adds	r3, #1
 800d6c6:	69fa      	ldr	r2, [r7, #28]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d008      	beq.n	800d6de <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	69ba      	ldr	r2, [r7, #24]
 800d6d2:	1ad2      	subs	r2, r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2203      	movs	r2, #3
 800d6dc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	79db      	ldrb	r3, [r3, #7]
 800d6e2:	2b02      	cmp	r3, #2
 800d6e4:	d064      	beq.n	800d7b0 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	69fa      	ldr	r2, [r7, #28]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d10b      	bne.n	800d708 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	69db      	ldr	r3, [r3, #28]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d003      	beq.n	800d700 <create_chain+0x104>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	e000      	b.n	800d702 <create_chain+0x106>
 800d700:	2302      	movs	r3, #2
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	61d3      	str	r3, [r2, #28]
 800d706:	e053      	b.n	800d7b0 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	69db      	ldr	r3, [r3, #28]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <create_chain+0x11a>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800d716:	69fa      	ldr	r2, [r7, #28]
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fe89 	bl	800d432 <fill_last_frag>
 800d720:	4603      	mov	r3, r0
 800d722:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800d724:	7dfb      	ldrb	r3, [r7, #23]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d142      	bne.n	800d7b0 <create_chain+0x1b4>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	61da      	str	r2, [r3, #28]
 800d730:	e03e      	b.n	800d7b0 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	3301      	adds	r3, #1
 800d73a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	69fa      	ldr	r2, [r7, #28]
 800d742:	429a      	cmp	r2, r3
 800d744:	d307      	bcc.n	800d756 <create_chain+0x15a>
				ncl = 2;
 800d746:	2302      	movs	r3, #2
 800d748:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d74a:	69fa      	ldr	r2, [r7, #28]
 800d74c:	69bb      	ldr	r3, [r7, #24]
 800d74e:	429a      	cmp	r2, r3
 800d750:	d901      	bls.n	800d756 <create_chain+0x15a>
 800d752:	2300      	movs	r3, #0
 800d754:	e04f      	b.n	800d7f6 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d756:	69f9      	ldr	r1, [r7, #28]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f7ff fac9 	bl	800ccf0 <get_fat>
 800d75e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d00e      	beq.n	800d784 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	d003      	beq.n	800d774 <create_chain+0x178>
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d772:	d101      	bne.n	800d778 <create_chain+0x17c>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	e03e      	b.n	800d7f6 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d1da      	bne.n	800d736 <create_chain+0x13a>
 800d780:	2300      	movs	r3, #0
 800d782:	e038      	b.n	800d7f6 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800d784:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d786:	f04f 32ff 	mov.w	r2, #4294967295
 800d78a:	69f9      	ldr	r1, [r7, #28]
 800d78c:	6938      	ldr	r0, [r7, #16]
 800d78e:	f7ff fc05 	bl	800cf9c <put_fat>
 800d792:	4603      	mov	r3, r0
 800d794:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d796:	7dfb      	ldrb	r3, [r7, #23]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d109      	bne.n	800d7b0 <create_chain+0x1b4>
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d006      	beq.n	800d7b0 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	6938      	ldr	r0, [r7, #16]
 800d7a8:	f7ff fbf8 	bl	800cf9c <put_fat>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d116      	bne.n	800d7e4 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	69da      	ldr	r2, [r3, #28]
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	6a1b      	ldr	r3, [r3, #32]
 800d7c4:	3b02      	subs	r3, #2
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d804      	bhi.n	800d7d4 <create_chain+0x1d8>
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	69db      	ldr	r3, [r3, #28]
 800d7ce:	1e5a      	subs	r2, r3, #1
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	791b      	ldrb	r3, [r3, #4]
 800d7d8:	f043 0301 	orr.w	r3, r3, #1
 800d7dc:	b2da      	uxtb	r2, r3
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	711a      	strb	r2, [r3, #4]
 800d7e2:	e007      	b.n	800d7f4 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d7e4:	7dfb      	ldrb	r3, [r7, #23]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d102      	bne.n	800d7f0 <create_chain+0x1f4>
 800d7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ee:	e000      	b.n	800d7f2 <create_chain+0x1f6>
 800d7f0:	2301      	movs	r3, #1
 800d7f2:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d7f4:	69fb      	ldr	r3, [r7, #28]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3720      	adds	r7, #32
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}

0800d7fe <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d7fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d802:	b088      	sub	sp, #32
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d816:	3304      	adds	r3, #4
 800d818:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	899b      	ldrh	r3, [r3, #12]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	2200      	movs	r2, #0
 800d822:	4698      	mov	r8, r3
 800d824:	4691      	mov	r9, r2
 800d826:	4642      	mov	r2, r8
 800d828:	464b      	mov	r3, r9
 800d82a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d82e:	f7f2 fda7 	bl	8000380 <__aeabi_uldivmod>
 800d832:	4602      	mov	r2, r0
 800d834:	460b      	mov	r3, r1
 800d836:	4610      	mov	r0, r2
 800d838:	4619      	mov	r1, r3
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	895b      	ldrh	r3, [r3, #10]
 800d83e:	b29b      	uxth	r3, r3
 800d840:	2200      	movs	r2, #0
 800d842:	461c      	mov	r4, r3
 800d844:	4615      	mov	r5, r2
 800d846:	4622      	mov	r2, r4
 800d848:	462b      	mov	r3, r5
 800d84a:	f7f2 fd99 	bl	8000380 <__aeabi_uldivmod>
 800d84e:	4602      	mov	r2, r0
 800d850:	460b      	mov	r3, r1
 800d852:	4613      	mov	r3, r2
 800d854:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	1d1a      	adds	r2, r3, #4
 800d85a:	61ba      	str	r2, [r7, #24]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d101      	bne.n	800d86a <clmt_clust+0x6c>
 800d866:	2300      	movs	r3, #0
 800d868:	e010      	b.n	800d88c <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800d86a:	69fa      	ldr	r2, [r7, #28]
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	429a      	cmp	r2, r3
 800d870:	d307      	bcc.n	800d882 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800d872:	69fa      	ldr	r2, [r7, #28]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	1ad3      	subs	r3, r2, r3
 800d878:	61fb      	str	r3, [r7, #28]
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	3304      	adds	r3, #4
 800d87e:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d880:	e7e9      	b.n	800d856 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800d882:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	681a      	ldr	r2, [r3, #0]
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	4413      	add	r3, r2
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3720      	adds	r7, #32
 800d890:	46bd      	mov	sp, r7
 800d892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800d896 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d896:	b580      	push	{r7, lr}
 800d898:	b086      	sub	sp, #24
 800d89a:	af00      	add	r7, sp, #0
 800d89c:	6078      	str	r0, [r7, #4]
 800d89e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	2b04      	cmp	r3, #4
 800d8ac:	d102      	bne.n	800d8b4 <dir_sdi+0x1e>
 800d8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8b2:	e001      	b.n	800d8b8 <dir_sdi+0x22>
 800d8b4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d904      	bls.n	800d8c8 <dir_sdi+0x32>
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	f003 031f 	and.w	r3, r3, #31
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d001      	beq.n	800d8cc <dir_sdi+0x36>
		return FR_INT_ERR;
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	e074      	b.n	800d9b6 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d109      	bne.n	800d8f2 <dir_sdi+0x5c>
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d905      	bls.n	800d8f2 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8ea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d10c      	bne.n	800d912 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	095b      	lsrs	r3, r3, #5
 800d8fc:	693a      	ldr	r2, [r7, #16]
 800d8fe:	8912      	ldrh	r2, [r2, #8]
 800d900:	4293      	cmp	r3, r2
 800d902:	d301      	bcc.n	800d908 <dir_sdi+0x72>
 800d904:	2302      	movs	r3, #2
 800d906:	e056      	b.n	800d9b6 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	639a      	str	r2, [r3, #56]	; 0x38
 800d910:	e02d      	b.n	800d96e <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	895b      	ldrh	r3, [r3, #10]
 800d916:	461a      	mov	r2, r3
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	899b      	ldrh	r3, [r3, #12]
 800d91c:	fb02 f303 	mul.w	r3, r2, r3
 800d920:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d922:	e019      	b.n	800d958 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6979      	ldr	r1, [r7, #20]
 800d928:	4618      	mov	r0, r3
 800d92a:	f7ff f9e1 	bl	800ccf0 <get_fat>
 800d92e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d936:	d101      	bne.n	800d93c <dir_sdi+0xa6>
 800d938:	2301      	movs	r3, #1
 800d93a:	e03c      	b.n	800d9b6 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d904      	bls.n	800d94c <dir_sdi+0xb6>
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	6a1b      	ldr	r3, [r3, #32]
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d301      	bcc.n	800d950 <dir_sdi+0xba>
 800d94c:	2302      	movs	r3, #2
 800d94e:	e032      	b.n	800d9b6 <dir_sdi+0x120>
			ofs -= csz;
 800d950:	683a      	ldr	r2, [r7, #0]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	1ad3      	subs	r3, r2, r3
 800d956:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d2e1      	bcs.n	800d924 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800d960:	6979      	ldr	r1, [r7, #20]
 800d962:	6938      	ldr	r0, [r7, #16]
 800d964:	f7ff f9a4 	bl	800ccb0 <clust2sect>
 800d968:	4602      	mov	r2, r0
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	697a      	ldr	r2, [r7, #20]
 800d972:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d101      	bne.n	800d980 <dir_sdi+0xea>
 800d97c:	2302      	movs	r3, #2
 800d97e:	e01a      	b.n	800d9b6 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	899b      	ldrh	r3, [r3, #12]
 800d988:	4619      	mov	r1, r3
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	fbb3 f3f1 	udiv	r3, r3, r1
 800d990:	441a      	add	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	899b      	ldrh	r3, [r3, #12]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9a8:	fb00 f202 	mul.w	r2, r0, r2
 800d9ac:	1a9b      	subs	r3, r3, r2
 800d9ae:	18ca      	adds	r2, r1, r3
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3718      	adds	r7, #24
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b086      	sub	sp, #24
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d2:	3320      	adds	r3, #32
 800d9d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00b      	beq.n	800d9f6 <dir_next+0x38>
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b04      	cmp	r3, #4
 800d9e4:	d102      	bne.n	800d9ec <dir_next+0x2e>
 800d9e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ea:	e001      	b.n	800d9f0 <dir_next+0x32>
 800d9ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d801      	bhi.n	800d9fa <dir_next+0x3c>
 800d9f6:	2304      	movs	r3, #4
 800d9f8:	e0c3      	b.n	800db82 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	899b      	ldrh	r3, [r3, #12]
 800d9fe:	461a      	mov	r2, r3
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	fbb3 f1f2 	udiv	r1, r3, r2
 800da06:	fb01 f202 	mul.w	r2, r1, r2
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f040 80a5 	bne.w	800db5c <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da16:	1c5a      	adds	r2, r3, #1
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da20:	2b00      	cmp	r3, #0
 800da22:	d10b      	bne.n	800da3c <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	095b      	lsrs	r3, r3, #5
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	8912      	ldrh	r2, [r2, #8]
 800da2c:	4293      	cmp	r3, r2
 800da2e:	f0c0 8095 	bcc.w	800db5c <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	639a      	str	r2, [r3, #56]	; 0x38
 800da38:	2304      	movs	r3, #4
 800da3a:	e0a2      	b.n	800db82 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	899b      	ldrh	r3, [r3, #12]
 800da40:	461a      	mov	r2, r3
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	fbb3 f3f2 	udiv	r3, r3, r2
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	8952      	ldrh	r2, [r2, #10]
 800da4c:	3a01      	subs	r2, #1
 800da4e:	4013      	ands	r3, r2
 800da50:	2b00      	cmp	r3, #0
 800da52:	f040 8083 	bne.w	800db5c <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5c:	4619      	mov	r1, r3
 800da5e:	4610      	mov	r0, r2
 800da60:	f7ff f946 	bl	800ccf0 <get_fat>
 800da64:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	d801      	bhi.n	800da70 <dir_next+0xb2>
 800da6c:	2302      	movs	r3, #2
 800da6e:	e088      	b.n	800db82 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da76:	d101      	bne.n	800da7c <dir_next+0xbe>
 800da78:	2301      	movs	r3, #1
 800da7a:	e082      	b.n	800db82 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	6a1b      	ldr	r3, [r3, #32]
 800da80:	697a      	ldr	r2, [r7, #20]
 800da82:	429a      	cmp	r2, r3
 800da84:	d360      	bcc.n	800db48 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d104      	bne.n	800da96 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	639a      	str	r2, [r3, #56]	; 0x38
 800da92:	2304      	movs	r3, #4
 800da94:	e075      	b.n	800db82 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9c:	4619      	mov	r1, r3
 800da9e:	4610      	mov	r0, r2
 800daa0:	f7ff fdac 	bl	800d5fc <create_chain>
 800daa4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <dir_next+0xf2>
 800daac:	2307      	movs	r3, #7
 800daae:	e068      	b.n	800db82 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d101      	bne.n	800daba <dir_next+0xfc>
 800dab6:	2302      	movs	r3, #2
 800dab8:	e063      	b.n	800db82 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac0:	d101      	bne.n	800dac6 <dir_next+0x108>
 800dac2:	2301      	movs	r3, #1
 800dac4:	e05d      	b.n	800db82 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	79db      	ldrb	r3, [r3, #7]
 800daca:	f043 0304 	orr.w	r3, r3, #4
 800dace:	b2da      	uxtb	r2, r3
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff f809 	bl	800caec <sync_window>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d001      	beq.n	800dae4 <dir_next+0x126>
 800dae0:	2301      	movs	r3, #1
 800dae2:	e04e      	b.n	800db82 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	899b      	ldrh	r3, [r3, #12]
 800daee:	461a      	mov	r2, r3
 800daf0:	2100      	movs	r1, #0
 800daf2:	f7fe fe31 	bl	800c758 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800daf6:	2300      	movs	r3, #0
 800daf8:	613b      	str	r3, [r7, #16]
 800dafa:	6979      	ldr	r1, [r7, #20]
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7ff f8d7 	bl	800ccb0 <clust2sect>
 800db02:	4602      	mov	r2, r0
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	639a      	str	r2, [r3, #56]	; 0x38
 800db08:	e012      	b.n	800db30 <dir_next+0x172>
						fs->wflag = 1;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2201      	movs	r2, #1
 800db0e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800db10:	68f8      	ldr	r0, [r7, #12]
 800db12:	f7fe ffeb 	bl	800caec <sync_window>
 800db16:	4603      	mov	r3, r0
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d001      	beq.n	800db20 <dir_next+0x162>
 800db1c:	2301      	movs	r3, #1
 800db1e:	e030      	b.n	800db82 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	3301      	adds	r3, #1
 800db24:	613b      	str	r3, [r7, #16]
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2a:	1c5a      	adds	r2, r3, #1
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	639a      	str	r2, [r3, #56]	; 0x38
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	895b      	ldrh	r3, [r3, #10]
 800db34:	461a      	mov	r2, r3
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	4293      	cmp	r3, r2
 800db3a:	d3e6      	bcc.n	800db0a <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	1ad2      	subs	r2, r2, r3
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800db4e:	6979      	ldr	r1, [r7, #20]
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff f8ad 	bl	800ccb0 <clust2sect>
 800db56:	4602      	mov	r2, r0
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	899b      	ldrh	r3, [r3, #12]
 800db6c:	461a      	mov	r2, r3
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	fbb3 f0f2 	udiv	r0, r3, r2
 800db74:	fb00 f202 	mul.w	r2, r0, r2
 800db78:	1a9b      	subs	r3, r3, r2
 800db7a:	18ca      	adds	r2, r1, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3718      	adds	r7, #24
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b086      	sub	sp, #24
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
 800db92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800db9a:	2100      	movs	r1, #0
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff fe7a 	bl	800d896 <dir_sdi>
 800dba2:	4603      	mov	r3, r0
 800dba4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dba6:	7dfb      	ldrb	r3, [r7, #23]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d140      	bne.n	800dc2e <dir_alloc+0xa4>
		n = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7fe ffdc 	bl	800cb74 <move_window>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d132      	bne.n	800dc2c <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d108      	bne.n	800dbe0 <dir_alloc+0x56>
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	b25b      	sxtb	r3, r3
 800dbd6:	43db      	mvns	r3, r3
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	09db      	lsrs	r3, r3, #7
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	e00f      	b.n	800dc00 <dir_alloc+0x76>
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	2be5      	cmp	r3, #229	; 0xe5
 800dbe8:	d004      	beq.n	800dbf4 <dir_alloc+0x6a>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d101      	bne.n	800dbf8 <dir_alloc+0x6e>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e000      	b.n	800dbfa <dir_alloc+0x70>
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	b2db      	uxtb	r3, r3
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d007      	beq.n	800dc14 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	3301      	adds	r3, #1
 800dc08:	613b      	str	r3, [r7, #16]
 800dc0a:	693a      	ldr	r2, [r7, #16]
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d102      	bne.n	800dc18 <dir_alloc+0x8e>
 800dc12:	e00c      	b.n	800dc2e <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dc14:	2300      	movs	r3, #0
 800dc16:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800dc18:	2101      	movs	r1, #1
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fecf 	bl	800d9be <dir_next>
 800dc20:	4603      	mov	r3, r0
 800dc22:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800dc24:	7dfb      	ldrb	r3, [r7, #23]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d0c2      	beq.n	800dbb0 <dir_alloc+0x26>
 800dc2a:	e000      	b.n	800dc2e <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800dc2c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	2b04      	cmp	r3, #4
 800dc32:	d101      	bne.n	800dc38 <dir_alloc+0xae>
 800dc34:	2307      	movs	r3, #7
 800dc36:	75fb      	strb	r3, [r7, #23]
	return res;
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3718      	adds	r7, #24
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	331a      	adds	r3, #26
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7fe fb7b 	bl	800c34c <ld_word>
 800dc56:	4603      	mov	r3, r0
 800dc58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	2b03      	cmp	r3, #3
 800dc60:	d109      	bne.n	800dc76 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	3314      	adds	r3, #20
 800dc66:	4618      	mov	r0, r3
 800dc68:	f7fe fb70 	bl	800c34c <ld_word>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	041b      	lsls	r3, r3, #16
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800dc76:	68fb      	ldr	r3, [r7, #12]
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b084      	sub	sp, #16
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	331a      	adds	r3, #26
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	b292      	uxth	r2, r2
 800dc94:	4611      	mov	r1, r2
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fe fc6e 	bl	800c578 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d109      	bne.n	800dcb8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	f103 0214 	add.w	r2, r3, #20
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	0c1b      	lsrs	r3, r3, #16
 800dcae:	b29b      	uxth	r3, r3
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	4610      	mov	r0, r2
 800dcb4:	f7fe fc60 	bl	800c578 <st_word>
	}
}
 800dcb8:	bf00      	nop
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800dcc0:	b590      	push	{r4, r7, lr}
 800dcc2:	b087      	sub	sp, #28
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	331a      	adds	r3, #26
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fe fb3c 	bl	800c34c <ld_word>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d001      	beq.n	800dcde <cmp_lfn+0x1e>
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e059      	b.n	800dd92 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dce6:	1e5a      	subs	r2, r3, #1
 800dce8:	4613      	mov	r3, r2
 800dcea:	005b      	lsls	r3, r3, #1
 800dcec:	4413      	add	r3, r2
 800dcee:	009b      	lsls	r3, r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	81fb      	strh	r3, [r7, #14]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	613b      	str	r3, [r7, #16]
 800dcfc:	e033      	b.n	800dd66 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800dcfe:	4a27      	ldr	r2, [pc, #156]	; (800dd9c <cmp_lfn+0xdc>)
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	4413      	add	r3, r2
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	461a      	mov	r2, r3
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	4413      	add	r3, r2
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe fb1d 	bl	800c34c <ld_word>
 800dd12:	4603      	mov	r3, r0
 800dd14:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800dd16:	89fb      	ldrh	r3, [r7, #14]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d01a      	beq.n	800dd52 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	2bfe      	cmp	r3, #254	; 0xfe
 800dd20:	d812      	bhi.n	800dd48 <cmp_lfn+0x88>
 800dd22:	89bb      	ldrh	r3, [r7, #12]
 800dd24:	4618      	mov	r0, r3
 800dd26:	f002 fd1b 	bl	8010760 <ff_wtoupper>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	461c      	mov	r4, r3
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	1c5a      	adds	r2, r3, #1
 800dd32:	617a      	str	r2, [r7, #20]
 800dd34:	005b      	lsls	r3, r3, #1
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	4413      	add	r3, r2
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f002 fd0f 	bl	8010760 <ff_wtoupper>
 800dd42:	4603      	mov	r3, r0
 800dd44:	429c      	cmp	r4, r3
 800dd46:	d001      	beq.n	800dd4c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e022      	b.n	800dd92 <cmp_lfn+0xd2>
			}
			wc = uc;
 800dd4c:	89bb      	ldrh	r3, [r7, #12]
 800dd4e:	81fb      	strh	r3, [r7, #14]
 800dd50:	e006      	b.n	800dd60 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800dd52:	89bb      	ldrh	r3, [r7, #12]
 800dd54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d001      	beq.n	800dd60 <cmp_lfn+0xa0>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	e018      	b.n	800dd92 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	3301      	adds	r3, #1
 800dd64:	613b      	str	r3, [r7, #16]
 800dd66:	693b      	ldr	r3, [r7, #16]
 800dd68:	2b0c      	cmp	r3, #12
 800dd6a:	d9c8      	bls.n	800dcfe <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d00b      	beq.n	800dd90 <cmp_lfn+0xd0>
 800dd78:	89fb      	ldrh	r3, [r7, #14]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <cmp_lfn+0xd0>
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	005b      	lsls	r3, r3, #1
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	4413      	add	r3, r2
 800dd86:	881b      	ldrh	r3, [r3, #0]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d001      	beq.n	800dd90 <cmp_lfn+0xd0>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e000      	b.n	800dd92 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800dd90:	2301      	movs	r3, #1
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	371c      	adds	r7, #28
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd90      	pop	{r4, r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	08011e68 	.word	0x08011e68

0800dda0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	331a      	adds	r3, #26
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe facc 	bl	800c34c <ld_word>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <pick_lfn+0x1e>
 800ddba:	2300      	movs	r3, #0
 800ddbc:	e04d      	b.n	800de5a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ddc6:	1e5a      	subs	r2, r3, #1
 800ddc8:	4613      	mov	r3, r2
 800ddca:	005b      	lsls	r3, r3, #1
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	81fb      	strh	r3, [r7, #14]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	613b      	str	r3, [r7, #16]
 800dddc:	e028      	b.n	800de30 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ddde:	4a21      	ldr	r2, [pc, #132]	; (800de64 <pick_lfn+0xc4>)
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	4413      	add	r3, r2
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	461a      	mov	r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	4413      	add	r3, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7fe faad 	bl	800c34c <ld_word>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ddf6:	89fb      	ldrh	r3, [r7, #14]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d00f      	beq.n	800de1c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	2bfe      	cmp	r3, #254	; 0xfe
 800de00:	d901      	bls.n	800de06 <pick_lfn+0x66>
 800de02:	2300      	movs	r3, #0
 800de04:	e029      	b.n	800de5a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800de06:	89bb      	ldrh	r3, [r7, #12]
 800de08:	81fb      	strh	r3, [r7, #14]
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	1c5a      	adds	r2, r3, #1
 800de0e:	617a      	str	r2, [r7, #20]
 800de10:	005b      	lsls	r3, r3, #1
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	4413      	add	r3, r2
 800de16:	89fa      	ldrh	r2, [r7, #14]
 800de18:	801a      	strh	r2, [r3, #0]
 800de1a:	e006      	b.n	800de2a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800de1c:	89bb      	ldrh	r3, [r7, #12]
 800de1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de22:	4293      	cmp	r3, r2
 800de24:	d001      	beq.n	800de2a <pick_lfn+0x8a>
 800de26:	2300      	movs	r3, #0
 800de28:	e017      	b.n	800de5a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3301      	adds	r3, #1
 800de2e:	613b      	str	r3, [r7, #16]
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	2b0c      	cmp	r3, #12
 800de34:	d9d3      	bls.n	800ddde <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	781b      	ldrb	r3, [r3, #0]
 800de3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d00a      	beq.n	800de58 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2bfe      	cmp	r3, #254	; 0xfe
 800de46:	d901      	bls.n	800de4c <pick_lfn+0xac>
 800de48:	2300      	movs	r3, #0
 800de4a:	e006      	b.n	800de5a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	005b      	lsls	r3, r3, #1
 800de50:	687a      	ldr	r2, [r7, #4]
 800de52:	4413      	add	r3, r2
 800de54:	2200      	movs	r2, #0
 800de56:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800de58:	2301      	movs	r3, #1
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3718      	adds	r7, #24
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	08011e68 	.word	0x08011e68

0800de68 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	4611      	mov	r1, r2
 800de74:	461a      	mov	r2, r3
 800de76:	460b      	mov	r3, r1
 800de78:	71fb      	strb	r3, [r7, #7]
 800de7a:	4613      	mov	r3, r2
 800de7c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	330d      	adds	r3, #13
 800de82:	79ba      	ldrb	r2, [r7, #6]
 800de84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	330b      	adds	r3, #11
 800de8a:	220f      	movs	r2, #15
 800de8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	330c      	adds	r3, #12
 800de92:	2200      	movs	r2, #0
 800de94:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	331a      	adds	r3, #26
 800de9a:	2100      	movs	r1, #0
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fe fb6b 	bl	800c578 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800dea2:	79fb      	ldrb	r3, [r7, #7]
 800dea4:	1e5a      	subs	r2, r3, #1
 800dea6:	4613      	mov	r3, r2
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	4413      	add	r3, r2
 800deac:	009b      	lsls	r3, r3, #2
 800deae:	4413      	add	r3, r2
 800deb0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	82fb      	strh	r3, [r7, #22]
 800deb6:	2300      	movs	r3, #0
 800deb8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800deba:	8afb      	ldrh	r3, [r7, #22]
 800debc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dec0:	4293      	cmp	r3, r2
 800dec2:	d007      	beq.n	800ded4 <put_lfn+0x6c>
 800dec4:	69fb      	ldr	r3, [r7, #28]
 800dec6:	1c5a      	adds	r2, r3, #1
 800dec8:	61fa      	str	r2, [r7, #28]
 800deca:	005b      	lsls	r3, r3, #1
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	4413      	add	r3, r2
 800ded0:	881b      	ldrh	r3, [r3, #0]
 800ded2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ded4:	4a17      	ldr	r2, [pc, #92]	; (800df34 <put_lfn+0xcc>)
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	4413      	add	r3, r2
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	461a      	mov	r2, r3
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	4413      	add	r3, r2
 800dee2:	8afa      	ldrh	r2, [r7, #22]
 800dee4:	4611      	mov	r1, r2
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fb46 	bl	800c578 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800deec:	8afb      	ldrh	r3, [r7, #22]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d102      	bne.n	800def8 <put_lfn+0x90>
 800def2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800def6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	3301      	adds	r3, #1
 800defc:	61bb      	str	r3, [r7, #24]
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	2b0c      	cmp	r3, #12
 800df02:	d9da      	bls.n	800deba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800df04:	8afb      	ldrh	r3, [r7, #22]
 800df06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d006      	beq.n	800df1c <put_lfn+0xb4>
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	68fa      	ldr	r2, [r7, #12]
 800df14:	4413      	add	r3, r2
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d103      	bne.n	800df24 <put_lfn+0xbc>
 800df1c:	79fb      	ldrb	r3, [r7, #7]
 800df1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df22:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	79fa      	ldrb	r2, [r7, #7]
 800df28:	701a      	strb	r2, [r3, #0]
}
 800df2a:	bf00      	nop
 800df2c:	3720      	adds	r7, #32
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}
 800df32:	bf00      	nop
 800df34:	08011e68 	.word	0x08011e68

0800df38 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b08c      	sub	sp, #48	; 0x30
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800df46:	220b      	movs	r2, #11
 800df48:	68b9      	ldr	r1, [r7, #8]
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f7fe fbe3 	bl	800c716 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	2b05      	cmp	r3, #5
 800df54:	d929      	bls.n	800dfaa <gen_numname+0x72>
		sr = seq;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800df5a:	e020      	b.n	800df9e <gen_numname+0x66>
			wc = *lfn++;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	1c9a      	adds	r2, r3, #2
 800df60:	607a      	str	r2, [r7, #4]
 800df62:	881b      	ldrh	r3, [r3, #0]
 800df64:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800df66:	2300      	movs	r3, #0
 800df68:	62bb      	str	r3, [r7, #40]	; 0x28
 800df6a:	e015      	b.n	800df98 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800df6c:	69fb      	ldr	r3, [r7, #28]
 800df6e:	005a      	lsls	r2, r3, #1
 800df70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	4413      	add	r3, r2
 800df78:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800df7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800df7c:	085b      	lsrs	r3, r3, #1
 800df7e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df86:	2b00      	cmp	r3, #0
 800df88:	d003      	beq.n	800df92 <gen_numname+0x5a>
 800df8a:	69fa      	ldr	r2, [r7, #28]
 800df8c:	4b30      	ldr	r3, [pc, #192]	; (800e050 <gen_numname+0x118>)
 800df8e:	4053      	eors	r3, r2
 800df90:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df94:	3301      	adds	r3, #1
 800df96:	62bb      	str	r3, [r7, #40]	; 0x28
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	2b0f      	cmp	r3, #15
 800df9c:	d9e6      	bls.n	800df6c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d1da      	bne.n	800df5c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800dfaa:	2307      	movs	r3, #7
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	f003 030f 	and.w	r3, r3, #15
 800dfb6:	b2db      	uxtb	r3, r3
 800dfb8:	3330      	adds	r3, #48	; 0x30
 800dfba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800dfbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfc2:	2b39      	cmp	r3, #57	; 0x39
 800dfc4:	d904      	bls.n	800dfd0 <gen_numname+0x98>
 800dfc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dfca:	3307      	adds	r3, #7
 800dfcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800dfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd2:	1e5a      	subs	r2, r3, #1
 800dfd4:	62ba      	str	r2, [r7, #40]	; 0x28
 800dfd6:	3330      	adds	r3, #48	; 0x30
 800dfd8:	443b      	add	r3, r7
 800dfda:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800dfde:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	091b      	lsrs	r3, r3, #4
 800dfe6:	603b      	str	r3, [r7, #0]
	} while (seq);
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d1df      	bne.n	800dfae <gen_numname+0x76>
	ns[i] = '~';
 800dfee:	f107 0214 	add.w	r2, r7, #20
 800dff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff4:	4413      	add	r3, r2
 800dff6:	227e      	movs	r2, #126	; 0x7e
 800dff8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800dffa:	2300      	movs	r3, #0
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
 800dffe:	e002      	b.n	800e006 <gen_numname+0xce>
 800e000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e002:	3301      	adds	r3, #1
 800e004:	627b      	str	r3, [r7, #36]	; 0x24
 800e006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d205      	bcs.n	800e01a <gen_numname+0xe2>
 800e00e:	68fa      	ldr	r2, [r7, #12]
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	4413      	add	r3, r2
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b20      	cmp	r3, #32
 800e018:	d1f2      	bne.n	800e000 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01c:	2b07      	cmp	r3, #7
 800e01e:	d807      	bhi.n	800e030 <gen_numname+0xf8>
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	62ba      	str	r2, [r7, #40]	; 0x28
 800e026:	3330      	adds	r3, #48	; 0x30
 800e028:	443b      	add	r3, r7
 800e02a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e02e:	e000      	b.n	800e032 <gen_numname+0xfa>
 800e030:	2120      	movs	r1, #32
 800e032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e034:	1c5a      	adds	r2, r3, #1
 800e036:	627a      	str	r2, [r7, #36]	; 0x24
 800e038:	68fa      	ldr	r2, [r7, #12]
 800e03a:	4413      	add	r3, r2
 800e03c:	460a      	mov	r2, r1
 800e03e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	2b07      	cmp	r3, #7
 800e044:	d9e9      	bls.n	800e01a <gen_numname+0xe2>
}
 800e046:	bf00      	nop
 800e048:	bf00      	nop
 800e04a:	3730      	adds	r7, #48	; 0x30
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	00011021 	.word	0x00011021

0800e054 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e054:	b480      	push	{r7}
 800e056:	b085      	sub	sp, #20
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e05c:	2300      	movs	r3, #0
 800e05e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e060:	230b      	movs	r3, #11
 800e062:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e064:	7bfb      	ldrb	r3, [r7, #15]
 800e066:	b2da      	uxtb	r2, r3
 800e068:	0852      	lsrs	r2, r2, #1
 800e06a:	01db      	lsls	r3, r3, #7
 800e06c:	4313      	orrs	r3, r2
 800e06e:	b2da      	uxtb	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	1c59      	adds	r1, r3, #1
 800e074:	6079      	str	r1, [r7, #4]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	4413      	add	r3, r2
 800e07a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	3b01      	subs	r3, #1
 800e080:	60bb      	str	r3, [r7, #8]
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d1ed      	bne.n	800e064 <sum_sfn+0x10>
	return sum;
 800e088:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3714      	adds	r7, #20
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800e096:	b480      	push	{r7}
 800e098:	b087      	sub	sp, #28
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	015b      	lsls	r3, r3, #5
 800e0a8:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	827b      	strh	r3, [r7, #18]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	617b      	str	r3, [r7, #20]
 800e0b2:	e018      	b.n	800e0e6 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	2b02      	cmp	r3, #2
 800e0b8:	d103      	bne.n	800e0c2 <xdir_sum+0x2c>
			i++;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	e00e      	b.n	800e0e0 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800e0c2:	8a7b      	ldrh	r3, [r7, #18]
 800e0c4:	03db      	lsls	r3, r3, #15
 800e0c6:	b29a      	uxth	r2, r3
 800e0c8:	8a7b      	ldrh	r3, [r7, #18]
 800e0ca:	085b      	lsrs	r3, r3, #1
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	4413      	add	r3, r2
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	440b      	add	r3, r1
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	4413      	add	r3, r2
 800e0de:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	697a      	ldr	r2, [r7, #20]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d3e2      	bcc.n	800e0b4 <xdir_sum+0x1e>
		}
	}
	return sum;
 800e0ee:	8a7b      	ldrh	r3, [r7, #18]
}
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	371c      	adds	r7, #28
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fa:	4770      	bx	lr

0800e0fc <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800e104:	2300      	movs	r3, #0
 800e106:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800e108:	e01f      	b.n	800e14a <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800e10a:	89bb      	ldrh	r3, [r7, #12]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f002 fb27 	bl	8010760 <ff_wtoupper>
 800e112:	4603      	mov	r3, r0
 800e114:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800e116:	89fb      	ldrh	r3, [r7, #14]
 800e118:	03db      	lsls	r3, r3, #15
 800e11a:	b29a      	uxth	r2, r3
 800e11c:	89fb      	ldrh	r3, [r7, #14]
 800e11e:	085b      	lsrs	r3, r3, #1
 800e120:	b29b      	uxth	r3, r3
 800e122:	4413      	add	r3, r2
 800e124:	b29a      	uxth	r2, r3
 800e126:	89bb      	ldrh	r3, [r7, #12]
 800e128:	b2db      	uxtb	r3, r3
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	4413      	add	r3, r2
 800e12e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800e130:	89fb      	ldrh	r3, [r7, #14]
 800e132:	03db      	lsls	r3, r3, #15
 800e134:	b29a      	uxth	r2, r3
 800e136:	89fb      	ldrh	r3, [r7, #14]
 800e138:	085b      	lsrs	r3, r3, #1
 800e13a:	b29b      	uxth	r3, r3
 800e13c:	4413      	add	r3, r2
 800e13e:	b29a      	uxth	r2, r3
 800e140:	89bb      	ldrh	r3, [r7, #12]
 800e142:	0a1b      	lsrs	r3, r3, #8
 800e144:	b29b      	uxth	r3, r3
 800e146:	4413      	add	r3, r2
 800e148:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	1c9a      	adds	r2, r3, #2
 800e14e:	607a      	str	r2, [r7, #4]
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	81bb      	strh	r3, [r7, #12]
 800e154:	89bb      	ldrh	r3, [r7, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1d7      	bne.n	800e10a <xname_sum+0xe>
	}
	return sum;
 800e15a:	89fb      	ldrh	r3, [r7, #14]
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3710      	adds	r7, #16
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b087      	sub	sp, #28
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	695b      	ldr	r3, [r3, #20]
 800e172:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681a      	ldr	r2, [r3, #0]
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e17c:	4619      	mov	r1, r3
 800e17e:	4610      	mov	r0, r2
 800e180:	f7fe fcf8 	bl	800cb74 <move_window>
 800e184:	4603      	mov	r3, r0
 800e186:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e188:	7bfb      	ldrb	r3, [r7, #15]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <load_xdir+0x2e>
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	e09f      	b.n	800e2d2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	2b85      	cmp	r3, #133	; 0x85
 800e19a:	d001      	beq.n	800e1a0 <load_xdir+0x3c>
 800e19c:	2302      	movs	r3, #2
 800e19e:	e098      	b.n	800e2d2 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	6938      	ldr	r0, [r7, #16]
 800e1aa:	f7fe fab4 	bl	800c716 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800e1ae:	693b      	ldr	r3, [r7, #16]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	015b      	lsls	r3, r3, #5
 800e1b8:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	2b5f      	cmp	r3, #95	; 0x5f
 800e1be:	d903      	bls.n	800e1c8 <load_xdir+0x64>
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e1c6:	d901      	bls.n	800e1cc <load_xdir+0x68>
 800e1c8:	2302      	movs	r3, #2
 800e1ca:	e082      	b.n	800e2d2 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800e1cc:	2100      	movs	r1, #0
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7ff fbf5 	bl	800d9be <dir_next>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e1d8:	7bfb      	ldrb	r3, [r7, #15]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <load_xdir+0x7e>
 800e1de:	7bfb      	ldrb	r3, [r7, #15]
 800e1e0:	e077      	b.n	800e2d2 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	4610      	mov	r0, r2
 800e1ee:	f7fe fcc1 	bl	800cb74 <move_window>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800e1f6:	7bfb      	ldrb	r3, [r7, #15]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d001      	beq.n	800e200 <load_xdir+0x9c>
 800e1fc:	7bfb      	ldrb	r3, [r7, #15]
 800e1fe:	e068      	b.n	800e2d2 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	2bc0      	cmp	r3, #192	; 0xc0
 800e208:	d001      	beq.n	800e20e <load_xdir+0xaa>
 800e20a:	2302      	movs	r3, #2
 800e20c:	e061      	b.n	800e2d2 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	f103 0020 	add.w	r0, r3, #32
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e218:	2220      	movs	r2, #32
 800e21a:	4619      	mov	r1, r3
 800e21c:	f7fe fa7b 	bl	800c716 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800e220:	693b      	ldr	r3, [r7, #16]
 800e222:	3323      	adds	r3, #35	; 0x23
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	332c      	adds	r3, #44	; 0x2c
 800e228:	4a2c      	ldr	r2, [pc, #176]	; (800e2dc <load_xdir+0x178>)
 800e22a:	fba2 2303 	umull	r2, r3, r2, r3
 800e22e:	08db      	lsrs	r3, r3, #3
 800e230:	015b      	lsls	r3, r3, #5
 800e232:	68ba      	ldr	r2, [r7, #8]
 800e234:	429a      	cmp	r2, r3
 800e236:	d201      	bcs.n	800e23c <load_xdir+0xd8>
 800e238:	2302      	movs	r3, #2
 800e23a:	e04a      	b.n	800e2d2 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800e23c:	2340      	movs	r3, #64	; 0x40
 800e23e:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800e240:	2100      	movs	r1, #0
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f7ff fbbb 	bl	800d9be <dir_next>
 800e248:	4603      	mov	r3, r0
 800e24a:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e24c:	7bfb      	ldrb	r3, [r7, #15]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d001      	beq.n	800e256 <load_xdir+0xf2>
 800e252:	7bfb      	ldrb	r3, [r7, #15]
 800e254:	e03d      	b.n	800e2d2 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681a      	ldr	r2, [r3, #0]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e25e:	4619      	mov	r1, r3
 800e260:	4610      	mov	r0, r2
 800e262:	f7fe fc87 	bl	800cb74 <move_window>
 800e266:	4603      	mov	r3, r0
 800e268:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800e26a:	7bfb      	ldrb	r3, [r7, #15]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <load_xdir+0x110>
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	e02e      	b.n	800e2d2 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2bc1      	cmp	r3, #193	; 0xc1
 800e27c:	d001      	beq.n	800e282 <load_xdir+0x11e>
 800e27e:	2302      	movs	r3, #2
 800e280:	e027      	b.n	800e2d2 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e288:	d208      	bcs.n	800e29c <load_xdir+0x138>
 800e28a:	693a      	ldr	r2, [r7, #16]
 800e28c:	697b      	ldr	r3, [r7, #20]
 800e28e:	18d0      	adds	r0, r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e294:	2220      	movs	r2, #32
 800e296:	4619      	mov	r1, r3
 800e298:	f7fe fa3d 	bl	800c716 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	3320      	adds	r3, #32
 800e2a0:	617b      	str	r3, [r7, #20]
 800e2a2:	697a      	ldr	r2, [r7, #20]
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	429a      	cmp	r2, r3
 800e2a8:	d3ca      	bcc.n	800e240 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800e2b0:	d80e      	bhi.n	800e2d0 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800e2b2:	6938      	ldr	r0, [r7, #16]
 800e2b4:	f7ff feef 	bl	800e096 <xdir_sum>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	461c      	mov	r4, r3
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	3302      	adds	r3, #2
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fe f843 	bl	800c34c <ld_word>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	429c      	cmp	r4, r3
 800e2ca:	d001      	beq.n	800e2d0 <load_xdir+0x16c>
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	e000      	b.n	800e2d2 <load_xdir+0x16e>
	}
	return FR_OK;
 800e2d0:	2300      	movs	r3, #0
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	371c      	adds	r7, #28
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd90      	pop	{r4, r7, pc}
 800e2da:	bf00      	nop
 800e2dc:	88888889 	.word	0x88888889

0800e2e0 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800e2e0:	b5b0      	push	{r4, r5, r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800e2ea:	6839      	ldr	r1, [r7, #0]
 800e2ec:	6808      	ldr	r0, [r1, #0]
 800e2ee:	6879      	ldr	r1, [r7, #4]
 800e2f0:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6a08      	ldr	r0, [r1, #32]
 800e2f6:	6879      	ldr	r1, [r7, #4]
 800e2f8:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e2fe:	b2c8      	uxtb	r0, r1
 800e300:	6879      	ldr	r1, [r7, #4]
 800e302:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800e304:	6839      	ldr	r1, [r7, #0]
 800e306:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800e308:	2000      	movs	r0, #0
 800e30a:	460c      	mov	r4, r1
 800e30c:	4605      	mov	r5, r0
 800e30e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800e312:	2300      	movs	r3, #0
 800e314:	6879      	ldr	r1, [r7, #4]
 800e316:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e326:	4619      	mov	r1, r3
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7ff fab4 	bl	800d896 <dir_sdi>
 800e32e:	4603      	mov	r3, r0
 800e330:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e332:	7bfb      	ldrb	r3, [r7, #15]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d104      	bne.n	800e342 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800e338:	6878      	ldr	r0, [r7, #4]
 800e33a:	f7ff ff13 	bl	800e164 <load_xdir>
 800e33e:	4603      	mov	r3, r0
 800e340:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800e342:	7bfb      	ldrb	r3, [r7, #15]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3710      	adds	r7, #16
 800e348:	46bd      	mov	sp, r7
 800e34a:	bdb0      	pop	{r4, r5, r7, pc}

0800e34c <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b087      	sub	sp, #28
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	695b      	ldr	r3, [r3, #20]
 800e35a:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	1c9c      	adds	r4, r3, #2
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f7ff fe98 	bl	800e096 <xdir_sum>
 800e366:	4603      	mov	r3, r0
 800e368:	4619      	mov	r1, r3
 800e36a:	4620      	mov	r0, r4
 800e36c:	f7fe f904 	bl	800c578 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	3301      	adds	r3, #1
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	3301      	adds	r3, #1
 800e378:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff fa88 	bl	800d896 <dir_sdi>
 800e386:	4603      	mov	r3, r0
 800e388:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e38a:	e026      	b.n	800e3da <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681a      	ldr	r2, [r3, #0]
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e394:	4619      	mov	r1, r3
 800e396:	4610      	mov	r0, r2
 800e398:	f7fe fbec 	bl	800cb74 <move_window>
 800e39c:	4603      	mov	r3, r0
 800e39e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d11d      	bne.n	800e3e2 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3aa:	2220      	movs	r2, #32
 800e3ac:	68f9      	ldr	r1, [r7, #12]
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe f9b1 	bl	800c716 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2201      	movs	r2, #1
 800e3ba:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	3b01      	subs	r3, #1
 800e3c0:	613b      	str	r3, [r7, #16]
 800e3c2:	693b      	ldr	r3, [r7, #16]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d00e      	beq.n	800e3e6 <store_xdir+0x9a>
		dirb += SZDIRE;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	3320      	adds	r3, #32
 800e3cc:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f7ff faf4 	bl	800d9be <dir_next>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800e3da:	7dfb      	ldrb	r3, [r7, #23]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0d5      	beq.n	800e38c <store_xdir+0x40>
 800e3e0:	e002      	b.n	800e3e8 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800e3e2:	bf00      	nop
 800e3e4:	e000      	b.n	800e3e8 <store_xdir+0x9c>
		if (--nent == 0) break;
 800e3e6:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800e3e8:	7dfb      	ldrb	r3, [r7, #23]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d002      	beq.n	800e3f4 <store_xdir+0xa8>
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d101      	bne.n	800e3f8 <store_xdir+0xac>
 800e3f4:	7dfb      	ldrb	r3, [r7, #23]
 800e3f6:	e000      	b.n	800e3fa <store_xdir+0xae>
 800e3f8:	2302      	movs	r3, #2
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	371c      	adds	r7, #28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd90      	pop	{r4, r7, pc}

0800e402 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800e402:	b590      	push	{r4, r7, lr}
 800e404:	b085      	sub	sp, #20
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800e40c:	2240      	movs	r2, #64	; 0x40
 800e40e:	2100      	movs	r1, #0
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7fe f9a1 	bl	800c758 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2285      	movs	r2, #133	; 0x85
 800e41a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3320      	adds	r3, #32
 800e420:	22c0      	movs	r2, #192	; 0xc0
 800e422:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800e424:	2300      	movs	r3, #0
 800e426:	72bb      	strb	r3, [r7, #10]
 800e428:	2301      	movs	r3, #1
 800e42a:	72fb      	strb	r3, [r7, #11]
 800e42c:	2301      	movs	r3, #1
 800e42e:	813b      	strh	r3, [r7, #8]
 800e430:	2340      	movs	r3, #64	; 0x40
 800e432:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	1c5a      	adds	r2, r3, #1
 800e438:	60fa      	str	r2, [r7, #12]
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	4413      	add	r3, r2
 800e43e:	22c1      	movs	r2, #193	; 0xc1
 800e440:	701a      	strb	r2, [r3, #0]
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	60fa      	str	r2, [r7, #12]
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	4413      	add	r3, r2
 800e44c:	2200      	movs	r2, #0
 800e44e:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800e450:	893b      	ldrh	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d00b      	beq.n	800e46e <create_xdir+0x6c>
 800e456:	7abb      	ldrb	r3, [r7, #10]
 800e458:	005b      	lsls	r3, r3, #1
 800e45a:	683a      	ldr	r2, [r7, #0]
 800e45c:	4413      	add	r3, r2
 800e45e:	881b      	ldrh	r3, [r3, #0]
 800e460:	813b      	strh	r3, [r7, #8]
 800e462:	893b      	ldrh	r3, [r7, #8]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d002      	beq.n	800e46e <create_xdir+0x6c>
 800e468:	7abb      	ldrb	r3, [r7, #10]
 800e46a:	3301      	adds	r3, #1
 800e46c:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	4413      	add	r3, r2
 800e474:	893a      	ldrh	r2, [r7, #8]
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f7fe f87d 	bl	800c578 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	3302      	adds	r3, #2
 800e482:	60fb      	str	r3, [r7, #12]
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f003 031f 	and.w	r3, r3, #31
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1e0      	bne.n	800e450 <create_xdir+0x4e>
		nb++;
 800e48e:	7afb      	ldrb	r3, [r7, #11]
 800e490:	3301      	adds	r3, #1
 800e492:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800e494:	7abb      	ldrb	r3, [r7, #10]
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	4413      	add	r3, r2
 800e49c:	881b      	ldrh	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1c8      	bne.n	800e434 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	3323      	adds	r3, #35	; 0x23
 800e4a6:	7aba      	ldrb	r2, [r7, #10]
 800e4a8:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	7afa      	ldrb	r2, [r7, #11]
 800e4b0:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800e4b8:	6838      	ldr	r0, [r7, #0]
 800e4ba:	f7ff fe1f 	bl	800e0fc <xname_sum>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f7fe f858 	bl	800c578 <st_word>
}
 800e4c8:	bf00      	nop
 800e4ca:	3714      	adds	r7, #20
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd90      	pop	{r4, r7, pc}

0800e4d0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b086      	sub	sp, #24
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e4da:	2304      	movs	r3, #4
 800e4dc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e4e4:	23ff      	movs	r3, #255	; 0xff
 800e4e6:	757b      	strb	r3, [r7, #21]
 800e4e8:	23ff      	movs	r3, #255	; 0xff
 800e4ea:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e4ec:	e09f      	b.n	800e62e <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f2:	4619      	mov	r1, r3
 800e4f4:	6938      	ldr	r0, [r7, #16]
 800e4f6:	f7fe fb3d 	bl	800cb74 <move_window>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e4fe:	7dfb      	ldrb	r3, [r7, #23]
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 809a 	bne.w	800e63a <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e50a:	781b      	ldrb	r3, [r3, #0]
 800e50c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e50e:	7dbb      	ldrb	r3, [r7, #22]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d102      	bne.n	800e51a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e514:	2304      	movs	r3, #4
 800e516:	75fb      	strb	r3, [r7, #23]
 800e518:	e096      	b.n	800e648 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	781b      	ldrb	r3, [r3, #0]
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d118      	bne.n	800e554 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800e522:	7dbb      	ldrb	r3, [r7, #22]
 800e524:	2b85      	cmp	r3, #133	; 0x85
 800e526:	d179      	bne.n	800e61c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f7ff fe17 	bl	800e164 <load_xdir>
 800e536:	4603      	mov	r3, r0
 800e538:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800e53a:	7dfb      	ldrb	r3, [r7, #23]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d17e      	bne.n	800e63e <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800e540:	693b      	ldr	r3, [r7, #16]
 800e542:	695b      	ldr	r3, [r3, #20]
 800e544:	3304      	adds	r3, #4
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e54c:	b2da      	uxtb	r2, r3
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	719a      	strb	r2, [r3, #6]
					}
					break;
 800e552:	e074      	b.n	800e63e <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e558:	330b      	adds	r3, #11
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e560:	73fb      	strb	r3, [r7, #15]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	7bfa      	ldrb	r2, [r7, #15]
 800e566:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e568:	7dbb      	ldrb	r3, [r7, #22]
 800e56a:	2be5      	cmp	r3, #229	; 0xe5
 800e56c:	d00e      	beq.n	800e58c <dir_read+0xbc>
 800e56e:	7dbb      	ldrb	r3, [r7, #22]
 800e570:	2b2e      	cmp	r3, #46	; 0x2e
 800e572:	d00b      	beq.n	800e58c <dir_read+0xbc>
 800e574:	7bfb      	ldrb	r3, [r7, #15]
 800e576:	f023 0320 	bic.w	r3, r3, #32
 800e57a:	2b08      	cmp	r3, #8
 800e57c:	bf0c      	ite	eq
 800e57e:	2301      	moveq	r3, #1
 800e580:	2300      	movne	r3, #0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	461a      	mov	r2, r3
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	4293      	cmp	r3, r2
 800e58a:	d002      	beq.n	800e592 <dir_read+0xc2>
				ord = 0xFF;
 800e58c:	23ff      	movs	r3, #255	; 0xff
 800e58e:	757b      	strb	r3, [r7, #21]
 800e590:	e044      	b.n	800e61c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e592:	7bfb      	ldrb	r3, [r7, #15]
 800e594:	2b0f      	cmp	r3, #15
 800e596:	d12f      	bne.n	800e5f8 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e598:	7dbb      	ldrb	r3, [r7, #22]
 800e59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d00d      	beq.n	800e5be <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5a6:	7b5b      	ldrb	r3, [r3, #13]
 800e5a8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e5aa:	7dbb      	ldrb	r3, [r7, #22]
 800e5ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5b0:	75bb      	strb	r3, [r7, #22]
 800e5b2:	7dbb      	ldrb	r3, [r7, #22]
 800e5b4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e5be:	7dba      	ldrb	r2, [r7, #22]
 800e5c0:	7d7b      	ldrb	r3, [r7, #21]
 800e5c2:	429a      	cmp	r2, r3
 800e5c4:	d115      	bne.n	800e5f2 <dir_read+0x122>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5ca:	330d      	adds	r3, #13
 800e5cc:	781b      	ldrb	r3, [r3, #0]
 800e5ce:	7d3a      	ldrb	r2, [r7, #20]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d10e      	bne.n	800e5f2 <dir_read+0x122>
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	691a      	ldr	r2, [r3, #16]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5dc:	4619      	mov	r1, r3
 800e5de:	4610      	mov	r0, r2
 800e5e0:	f7ff fbde 	bl	800dda0 <pick_lfn>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d003      	beq.n	800e5f2 <dir_read+0x122>
 800e5ea:	7d7b      	ldrb	r3, [r7, #21]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	b2db      	uxtb	r3, r3
 800e5f0:	e000      	b.n	800e5f4 <dir_read+0x124>
 800e5f2:	23ff      	movs	r3, #255	; 0xff
 800e5f4:	757b      	strb	r3, [r7, #21]
 800e5f6:	e011      	b.n	800e61c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e5f8:	7d7b      	ldrb	r3, [r7, #21]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d109      	bne.n	800e612 <dir_read+0x142>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e602:	4618      	mov	r0, r3
 800e604:	f7ff fd26 	bl	800e054 <sum_sfn>
 800e608:	4603      	mov	r3, r0
 800e60a:	461a      	mov	r2, r3
 800e60c:	7d3b      	ldrb	r3, [r7, #20]
 800e60e:	4293      	cmp	r3, r2
 800e610:	d017      	beq.n	800e642 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f04f 32ff 	mov.w	r2, #4294967295
 800e618:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800e61a:	e012      	b.n	800e642 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e61c:	2100      	movs	r1, #0
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7ff f9cd 	bl	800d9be <dir_next>
 800e624:	4603      	mov	r3, r0
 800e626:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e628:	7dfb      	ldrb	r3, [r7, #23]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d10b      	bne.n	800e646 <dir_read+0x176>
	while (dp->sect) {
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e632:	2b00      	cmp	r3, #0
 800e634:	f47f af5b 	bne.w	800e4ee <dir_read+0x1e>
 800e638:	e006      	b.n	800e648 <dir_read+0x178>
		if (res != FR_OK) break;
 800e63a:	bf00      	nop
 800e63c:	e004      	b.n	800e648 <dir_read+0x178>
					break;
 800e63e:	bf00      	nop
 800e640:	e002      	b.n	800e648 <dir_read+0x178>
					break;
 800e642:	bf00      	nop
 800e644:	e000      	b.n	800e648 <dir_read+0x178>
		if (res != FR_OK) break;
 800e646:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e648:	7dfb      	ldrb	r3, [r7, #23]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d002      	beq.n	800e654 <dir_read+0x184>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800e654:	7dfb      	ldrb	r3, [r7, #23]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3718      	adds	r7, #24
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e65e:	b590      	push	{r4, r7, lr}
 800e660:	b089      	sub	sp, #36	; 0x24
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e66c:	2100      	movs	r1, #0
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f7ff f911 	bl	800d896 <dir_sdi>
 800e674:	4603      	mov	r3, r0
 800e676:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800e678:	7ffb      	ldrb	r3, [r7, #31]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <dir_find+0x24>
 800e67e:	7ffb      	ldrb	r3, [r7, #31]
 800e680:	e112      	b.n	800e8a8 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	2b04      	cmp	r3, #4
 800e688:	d164      	bne.n	800e754 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	4618      	mov	r0, r3
 800e690:	f7ff fd34 	bl	800e0fc <xname_sum>
 800e694:	4603      	mov	r3, r0
 800e696:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e698:	e04f      	b.n	800e73a <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	695b      	ldr	r3, [r3, #20]
 800e69e:	3324      	adds	r3, #36	; 0x24
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7fd fe53 	bl	800c34c <ld_word>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	893b      	ldrh	r3, [r7, #8]
 800e6ac:	4293      	cmp	r3, r2
 800e6ae:	d000      	beq.n	800e6b2 <dir_find+0x54>
 800e6b0:	e043      	b.n	800e73a <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	695b      	ldr	r3, [r3, #20]
 800e6b6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800e6ba:	76fb      	strb	r3, [r7, #27]
 800e6bc:	2340      	movs	r3, #64	; 0x40
 800e6be:	617b      	str	r3, [r7, #20]
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	613b      	str	r3, [r7, #16]
 800e6c4:	e029      	b.n	800e71a <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800e6c6:	697b      	ldr	r3, [r7, #20]
 800e6c8:	f003 031f 	and.w	r3, r3, #31
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d102      	bne.n	800e6d6 <dir_find+0x78>
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	3302      	adds	r3, #2
 800e6d4:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	695a      	ldr	r2, [r3, #20]
 800e6da:	697b      	ldr	r3, [r7, #20]
 800e6dc:	4413      	add	r3, r2
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fd fe34 	bl	800c34c <ld_word>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f002 f83a 	bl	8010760 <ff_wtoupper>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	461c      	mov	r4, r3
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	691a      	ldr	r2, [r3, #16]
 800e6f4:	693b      	ldr	r3, [r7, #16]
 800e6f6:	005b      	lsls	r3, r3, #1
 800e6f8:	4413      	add	r3, r2
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f002 f82f 	bl	8010760 <ff_wtoupper>
 800e702:	4603      	mov	r3, r0
 800e704:	429c      	cmp	r4, r3
 800e706:	d10c      	bne.n	800e722 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800e708:	7efb      	ldrb	r3, [r7, #27]
 800e70a:	3b01      	subs	r3, #1
 800e70c:	76fb      	strb	r3, [r7, #27]
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	3302      	adds	r3, #2
 800e712:	617b      	str	r3, [r7, #20]
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	3301      	adds	r3, #1
 800e718:	613b      	str	r3, [r7, #16]
 800e71a:	7efb      	ldrb	r3, [r7, #27]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d1d2      	bne.n	800e6c6 <dir_find+0x68>
 800e720:	e000      	b.n	800e724 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800e722:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e724:	7efb      	ldrb	r3, [r7, #27]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d107      	bne.n	800e73a <dir_find+0xdc>
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	691a      	ldr	r2, [r3, #16]
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	005b      	lsls	r3, r3, #1
 800e732:	4413      	add	r3, r2
 800e734:	881b      	ldrh	r3, [r3, #0]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d009      	beq.n	800e74e <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800e73a:	2100      	movs	r1, #0
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f7ff fec7 	bl	800e4d0 <dir_read>
 800e742:	4603      	mov	r3, r0
 800e744:	77fb      	strb	r3, [r7, #31]
 800e746:	7ffb      	ldrb	r3, [r7, #31]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d0a6      	beq.n	800e69a <dir_find+0x3c>
 800e74c:	e000      	b.n	800e750 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800e74e:	bf00      	nop
		}
		return res;
 800e750:	7ffb      	ldrb	r3, [r7, #31]
 800e752:	e0a9      	b.n	800e8a8 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e754:	23ff      	movs	r3, #255	; 0xff
 800e756:	773b      	strb	r3, [r7, #28]
 800e758:	7f3b      	ldrb	r3, [r7, #28]
 800e75a:	777b      	strb	r3, [r7, #29]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f04f 32ff 	mov.w	r2, #4294967295
 800e762:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e768:	4619      	mov	r1, r3
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7fe fa02 	bl	800cb74 <move_window>
 800e770:	4603      	mov	r3, r0
 800e772:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800e774:	7ffb      	ldrb	r3, [r7, #31]
 800e776:	2b00      	cmp	r3, #0
 800e778:	f040 8090 	bne.w	800e89c <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e784:	7fbb      	ldrb	r3, [r7, #30]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d102      	bne.n	800e790 <dir_find+0x132>
 800e78a:	2304      	movs	r3, #4
 800e78c:	77fb      	strb	r3, [r7, #31]
 800e78e:	e08a      	b.n	800e8a6 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e794:	330b      	adds	r3, #11
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e79c:	72fb      	strb	r3, [r7, #11]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	7afa      	ldrb	r2, [r7, #11]
 800e7a2:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e7a4:	7fbb      	ldrb	r3, [r7, #30]
 800e7a6:	2be5      	cmp	r3, #229	; 0xe5
 800e7a8:	d007      	beq.n	800e7ba <dir_find+0x15c>
 800e7aa:	7afb      	ldrb	r3, [r7, #11]
 800e7ac:	f003 0308 	and.w	r3, r3, #8
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d009      	beq.n	800e7c8 <dir_find+0x16a>
 800e7b4:	7afb      	ldrb	r3, [r7, #11]
 800e7b6:	2b0f      	cmp	r3, #15
 800e7b8:	d006      	beq.n	800e7c8 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e7ba:	23ff      	movs	r3, #255	; 0xff
 800e7bc:	777b      	strb	r3, [r7, #29]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c4:	64da      	str	r2, [r3, #76]	; 0x4c
 800e7c6:	e05e      	b.n	800e886 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e7c8:	7afb      	ldrb	r3, [r7, #11]
 800e7ca:	2b0f      	cmp	r3, #15
 800e7cc:	d136      	bne.n	800e83c <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d154      	bne.n	800e886 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e7dc:	7fbb      	ldrb	r3, [r7, #30]
 800e7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00d      	beq.n	800e802 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ea:	7b5b      	ldrb	r3, [r3, #13]
 800e7ec:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e7ee:	7fbb      	ldrb	r3, [r7, #30]
 800e7f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7f4:	77bb      	strb	r3, [r7, #30]
 800e7f6:	7fbb      	ldrb	r3, [r7, #30]
 800e7f8:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e802:	7fba      	ldrb	r2, [r7, #30]
 800e804:	7f7b      	ldrb	r3, [r7, #29]
 800e806:	429a      	cmp	r2, r3
 800e808:	d115      	bne.n	800e836 <dir_find+0x1d8>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e80e:	330d      	adds	r3, #13
 800e810:	781b      	ldrb	r3, [r3, #0]
 800e812:	7f3a      	ldrb	r2, [r7, #28]
 800e814:	429a      	cmp	r2, r3
 800e816:	d10e      	bne.n	800e836 <dir_find+0x1d8>
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	691a      	ldr	r2, [r3, #16]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e820:	4619      	mov	r1, r3
 800e822:	4610      	mov	r0, r2
 800e824:	f7ff fa4c 	bl	800dcc0 <cmp_lfn>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <dir_find+0x1d8>
 800e82e:	7f7b      	ldrb	r3, [r7, #29]
 800e830:	3b01      	subs	r3, #1
 800e832:	b2db      	uxtb	r3, r3
 800e834:	e000      	b.n	800e838 <dir_find+0x1da>
 800e836:	23ff      	movs	r3, #255	; 0xff
 800e838:	777b      	strb	r3, [r7, #29]
 800e83a:	e024      	b.n	800e886 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e83c:	7f7b      	ldrb	r3, [r7, #29]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d109      	bne.n	800e856 <dir_find+0x1f8>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e846:	4618      	mov	r0, r3
 800e848:	f7ff fc04 	bl	800e054 <sum_sfn>
 800e84c:	4603      	mov	r3, r0
 800e84e:	461a      	mov	r2, r3
 800e850:	7f3b      	ldrb	r3, [r7, #28]
 800e852:	4293      	cmp	r3, r2
 800e854:	d024      	beq.n	800e8a0 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e85c:	f003 0301 	and.w	r3, r3, #1
 800e860:	2b00      	cmp	r3, #0
 800e862:	d10a      	bne.n	800e87a <dir_find+0x21c>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	3340      	adds	r3, #64	; 0x40
 800e86c:	220b      	movs	r2, #11
 800e86e:	4619      	mov	r1, r3
 800e870:	f7fd ff8d 	bl	800c78e <mem_cmp>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d014      	beq.n	800e8a4 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e87a:	23ff      	movs	r3, #255	; 0xff
 800e87c:	777b      	strb	r3, [r7, #29]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f04f 32ff 	mov.w	r2, #4294967295
 800e884:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e886:	2100      	movs	r1, #0
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f7ff f898 	bl	800d9be <dir_next>
 800e88e:	4603      	mov	r3, r0
 800e890:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800e892:	7ffb      	ldrb	r3, [r7, #31]
 800e894:	2b00      	cmp	r3, #0
 800e896:	f43f af65 	beq.w	800e764 <dir_find+0x106>
 800e89a:	e004      	b.n	800e8a6 <dir_find+0x248>
		if (res != FR_OK) break;
 800e89c:	bf00      	nop
 800e89e:	e002      	b.n	800e8a6 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e8a0:	bf00      	nop
 800e8a2:	e000      	b.n	800e8a6 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e8a4:	bf00      	nop

	return res;
 800e8a6:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	3724      	adds	r7, #36	; 0x24
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd90      	pop	{r4, r7, pc}

0800e8b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e8b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e8b4:	b0a0      	sub	sp, #128	; 0x80
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800e8c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d001      	beq.n	800e8d2 <dir_register+0x22>
 800e8ce:	2306      	movs	r3, #6
 800e8d0:	e192      	b.n	800ebf8 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	677b      	str	r3, [r7, #116]	; 0x74
 800e8d6:	e002      	b.n	800e8de <dir_register+0x2e>
 800e8d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8da:	3301      	adds	r3, #1
 800e8dc:	677b      	str	r3, [r7, #116]	; 0x74
 800e8de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e0:	691a      	ldr	r2, [r3, #16]
 800e8e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8e4:	005b      	lsls	r3, r3, #1
 800e8e6:	4413      	add	r3, r2
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1f4      	bne.n	800e8d8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e8ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2b04      	cmp	r3, #4
 800e8f4:	f040 80a3 	bne.w	800ea3e <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800e8f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8fa:	330e      	adds	r3, #14
 800e8fc:	4aa4      	ldr	r2, [pc, #656]	; (800eb90 <dir_register+0x2e0>)
 800e8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800e902:	08db      	lsrs	r3, r3, #3
 800e904:	3302      	adds	r3, #2
 800e906:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800e908:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f7ff f93d 	bl	800db8a <dir_alloc>
 800e910:	4603      	mov	r3, r0
 800e912:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800e916:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d002      	beq.n	800e924 <dir_register+0x74>
 800e91e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e922:	e169      	b.n	800ebf8 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e928:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e92a:	3b01      	subs	r3, #1
 800e92c:	015b      	lsls	r3, r3, #5
 800e92e:	1ad2      	subs	r2, r2, r3
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d076      	beq.n	800ea2a <dir_register+0x17a>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	79db      	ldrb	r3, [r3, #7]
 800e940:	f003 0304 	and.w	r3, r3, #4
 800e944:	2b00      	cmp	r3, #0
 800e946:	d070      	beq.n	800ea2a <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e94e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e950:	8949      	ldrh	r1, [r1, #10]
 800e952:	4608      	mov	r0, r1
 800e954:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800e956:	8989      	ldrh	r1, [r1, #12]
 800e958:	fb00 f101 	mul.w	r1, r0, r1
 800e95c:	2000      	movs	r0, #0
 800e95e:	460c      	mov	r4, r1
 800e960:	4605      	mov	r5, r0
 800e962:	eb12 0804 	adds.w	r8, r2, r4
 800e966:	eb43 0905 	adc.w	r9, r3, r5
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	4618      	mov	r0, r3
 800e974:	f7fe fd2e 	bl	800d3d4 <fill_first_frag>
 800e978:	4603      	mov	r3, r0
 800e97a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e97e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e982:	2b00      	cmp	r3, #0
 800e984:	d002      	beq.n	800e98c <dir_register+0xdc>
 800e986:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e98a:	e135      	b.n	800ebf8 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e98c:	6878      	ldr	r0, [r7, #4]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e992:	f04f 32ff 	mov.w	r2, #4294967295
 800e996:	4619      	mov	r1, r3
 800e998:	f7fe fd4b 	bl	800d432 <fill_last_frag>
 800e99c:	4603      	mov	r3, r0
 800e99e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e9a2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d002      	beq.n	800e9b0 <dir_register+0x100>
 800e9aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9ae:	e123      	b.n	800ebf8 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	f107 0308 	add.w	r3, r7, #8
 800e9b6:	4611      	mov	r1, r2
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff fc91 	bl	800e2e0 <load_obj_dir>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800e9c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d002      	beq.n	800e9d2 <dir_register+0x122>
 800e9cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800e9d0:	e112      	b.n	800ebf8 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800e9d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9e0:	4608      	mov	r0, r1
 800e9e2:	f7fd fe10 	bl	800c606 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800e9e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e8:	695b      	ldr	r3, [r3, #20]
 800e9ea:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9f4:	4608      	mov	r0, r1
 800e9f6:	f7fd fe06 	bl	800c606 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	79da      	ldrb	r2, [r3, #7]
 800e9fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea00:	695b      	ldr	r3, [r3, #20]
 800ea02:	3321      	adds	r3, #33	; 0x21
 800ea04:	f042 0201 	orr.w	r2, r2, #1
 800ea08:	b2d2      	uxtb	r2, r2
 800ea0a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ea0c:	f107 0308 	add.w	r3, r7, #8
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7ff fc9b 	bl	800e34c <store_xdir>
 800ea16:	4603      	mov	r3, r0
 800ea18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ea1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d002      	beq.n	800ea2a <dir_register+0x17a>
 800ea24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea28:	e0e6      	b.n	800ebf8 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800ea2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2c:	695a      	ldr	r2, [r3, #20]
 800ea2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	4619      	mov	r1, r3
 800ea34:	4610      	mov	r0, r2
 800ea36:	f7ff fce4 	bl	800e402 <create_xdir>
		return FR_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e0dc      	b.n	800ebf8 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800ea44:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ea48:	220c      	movs	r2, #12
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fd fe63 	bl	800c716 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ea50:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d033      	beq.n	800eac4 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2240      	movs	r2, #64	; 0x40
 800ea60:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800ea64:	2301      	movs	r3, #1
 800ea66:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea68:	e016      	b.n	800ea98 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ea70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea72:	691a      	ldr	r2, [r3, #16]
 800ea74:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800ea78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea7a:	f7ff fa5d 	bl	800df38 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f7ff fded 	bl	800e65e <dir_find>
 800ea84:	4603      	mov	r3, r0
 800ea86:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800ea8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d106      	bne.n	800eaa0 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800ea92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea94:	3301      	adds	r3, #1
 800ea96:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ea9a:	2b63      	cmp	r3, #99	; 0x63
 800ea9c:	d9e5      	bls.n	800ea6a <dir_register+0x1ba>
 800ea9e:	e000      	b.n	800eaa2 <dir_register+0x1f2>
			if (res != FR_OK) break;
 800eaa0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800eaa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eaa4:	2b64      	cmp	r3, #100	; 0x64
 800eaa6:	d101      	bne.n	800eaac <dir_register+0x1fc>
 800eaa8:	2307      	movs	r3, #7
 800eaaa:	e0a5      	b.n	800ebf8 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800eaac:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eab0:	2b04      	cmp	r3, #4
 800eab2:	d002      	beq.n	800eaba <dir_register+0x20a>
 800eab4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eab8:	e09e      	b.n	800ebf8 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800eaba:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800eac4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eac8:	f003 0302 	and.w	r3, r3, #2
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <dir_register+0x230>
 800ead0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ead2:	330c      	adds	r3, #12
 800ead4:	4a2f      	ldr	r2, [pc, #188]	; (800eb94 <dir_register+0x2e4>)
 800ead6:	fba2 2303 	umull	r2, r3, r2, r3
 800eada:	089b      	lsrs	r3, r3, #2
 800eadc:	3301      	adds	r3, #1
 800eade:	e000      	b.n	800eae2 <dir_register+0x232>
 800eae0:	2301      	movs	r3, #1
 800eae2:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800eae4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff f84f 	bl	800db8a <dir_alloc>
 800eaec:	4603      	mov	r3, r0
 800eaee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800eaf2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d14f      	bne.n	800eb9a <dir_register+0x2ea>
 800eafa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eafc:	3b01      	subs	r3, #1
 800eafe:	673b      	str	r3, [r7, #112]	; 0x70
 800eb00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d049      	beq.n	800eb9a <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eb0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb0c:	015b      	lsls	r3, r3, #5
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	4619      	mov	r1, r3
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f7fe febf 	bl	800d896 <dir_sdi>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800eb1e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d139      	bne.n	800eb9a <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	3340      	adds	r3, #64	; 0x40
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7ff fa92 	bl	800e054 <sum_sfn>
 800eb30:	4603      	mov	r3, r0
 800eb32:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb3e:	f7fe f819 	bl	800cb74 <move_window>
 800eb42:	4603      	mov	r3, r0
 800eb44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800eb48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d123      	bne.n	800eb98 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800eb50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb52:	6918      	ldr	r0, [r3, #16]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800eb58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb5a:	b2da      	uxtb	r2, r3
 800eb5c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800eb60:	f7ff f982 	bl	800de68 <put_lfn>
				fs->wflag = 1;
 800eb64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb66:	2201      	movs	r2, #1
 800eb68:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f7fe ff26 	bl	800d9be <dir_next>
 800eb72:	4603      	mov	r3, r0
 800eb74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800eb78:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10c      	bne.n	800eb9a <dir_register+0x2ea>
 800eb80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb82:	3b01      	subs	r3, #1
 800eb84:	673b      	str	r3, [r7, #112]	; 0x70
 800eb86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d1d4      	bne.n	800eb36 <dir_register+0x286>
 800eb8c:	e005      	b.n	800eb9a <dir_register+0x2ea>
 800eb8e:	bf00      	nop
 800eb90:	88888889 	.word	0x88888889
 800eb94:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800eb98:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eb9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d128      	bne.n	800ebf4 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba6:	4619      	mov	r1, r3
 800eba8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ebaa:	f7fd ffe3 	bl	800cb74 <move_window>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800ebb4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d11b      	bne.n	800ebf4 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	f7fd fdc7 	bl	800c758 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	3340      	adds	r3, #64	; 0x40
 800ebd2:	220b      	movs	r2, #11
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	f7fd fd9e 	bl	800c716 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebe4:	330c      	adds	r3, #12
 800ebe6:	f002 0218 	and.w	r2, r2, #24
 800ebea:	b2d2      	uxtb	r2, r2
 800ebec:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ebee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ebf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3780      	adds	r7, #128	; 0x80
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec02:	bf00      	nop

0800ec04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b08a      	sub	sp, #40	; 0x28
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	691b      	ldr	r3, [r3, #16]
 800ec1a:	60fb      	str	r3, [r7, #12]
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	617b      	str	r3, [r7, #20]
 800ec20:	697b      	ldr	r3, [r7, #20]
 800ec22:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ec24:	69bb      	ldr	r3, [r7, #24]
 800ec26:	1c5a      	adds	r2, r3, #1
 800ec28:	61ba      	str	r2, [r7, #24]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ec32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec34:	2b1f      	cmp	r3, #31
 800ec36:	d940      	bls.n	800ecba <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ec38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec3a:	2b2f      	cmp	r3, #47	; 0x2f
 800ec3c:	d006      	beq.n	800ec4c <create_name+0x48>
 800ec3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec40:	2b5c      	cmp	r3, #92	; 0x5c
 800ec42:	d110      	bne.n	800ec66 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ec44:	e002      	b.n	800ec4c <create_name+0x48>
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	61bb      	str	r3, [r7, #24]
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	4413      	add	r3, r2
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b2f      	cmp	r3, #47	; 0x2f
 800ec56:	d0f6      	beq.n	800ec46 <create_name+0x42>
 800ec58:	693a      	ldr	r2, [r7, #16]
 800ec5a:	69bb      	ldr	r3, [r7, #24]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	2b5c      	cmp	r3, #92	; 0x5c
 800ec62:	d0f0      	beq.n	800ec46 <create_name+0x42>
			break;
 800ec64:	e02a      	b.n	800ecbc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	2bfe      	cmp	r3, #254	; 0xfe
 800ec6a:	d901      	bls.n	800ec70 <create_name+0x6c>
 800ec6c:	2306      	movs	r3, #6
 800ec6e:	e17d      	b.n	800ef6c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ec70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ec76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec78:	2101      	movs	r1, #1
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f001 fd34 	bl	80106e8 <ff_convert>
 800ec80:	4603      	mov	r3, r0
 800ec82:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ec84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <create_name+0x8a>
 800ec8a:	2306      	movs	r3, #6
 800ec8c:	e16e      	b.n	800ef6c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ec8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec90:	2b7f      	cmp	r3, #127	; 0x7f
 800ec92:	d809      	bhi.n	800eca8 <create_name+0xa4>
 800ec94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec96:	4619      	mov	r1, r3
 800ec98:	488d      	ldr	r0, [pc, #564]	; (800eed0 <create_name+0x2cc>)
 800ec9a:	f7fd fd9f 	bl	800c7dc <chk_chr>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d001      	beq.n	800eca8 <create_name+0xa4>
 800eca4:	2306      	movs	r3, #6
 800eca6:	e161      	b.n	800ef6c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	1c5a      	adds	r2, r3, #1
 800ecac:	617a      	str	r2, [r7, #20]
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	4413      	add	r3, r2
 800ecb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecb6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ecb8:	e7b4      	b.n	800ec24 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ecba:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	69bb      	ldr	r3, [r7, #24]
 800ecc0:	441a      	add	r2, r3
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ecc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecc8:	2b1f      	cmp	r3, #31
 800ecca:	d801      	bhi.n	800ecd0 <create_name+0xcc>
 800eccc:	2304      	movs	r3, #4
 800ecce:	e000      	b.n	800ecd2 <create_name+0xce>
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecd6:	e011      	b.n	800ecfc <create_name+0xf8>
		w = lfn[di - 1];
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ecde:	4413      	add	r3, r2
 800ece0:	005b      	lsls	r3, r3, #1
 800ece2:	68fa      	ldr	r2, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	881b      	ldrh	r3, [r3, #0]
 800ece8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ecea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecec:	2b20      	cmp	r3, #32
 800ecee:	d002      	beq.n	800ecf6 <create_name+0xf2>
 800ecf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecf2:	2b2e      	cmp	r3, #46	; 0x2e
 800ecf4:	d106      	bne.n	800ed04 <create_name+0x100>
		di--;
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1ea      	bne.n	800ecd8 <create_name+0xd4>
 800ed02:	e000      	b.n	800ed06 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ed04:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	005b      	lsls	r3, r3, #1
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	2200      	movs	r2, #0
 800ed10:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <create_name+0x118>
 800ed18:	2306      	movs	r3, #6
 800ed1a:	e127      	b.n	800ef6c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	3340      	adds	r3, #64	; 0x40
 800ed20:	220b      	movs	r2, #11
 800ed22:	2120      	movs	r1, #32
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7fd fd17 	bl	800c758 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	e002      	b.n	800ed36 <create_name+0x132>
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	3301      	adds	r3, #1
 800ed34:	61bb      	str	r3, [r7, #24]
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	005b      	lsls	r3, r3, #1
 800ed3a:	68fa      	ldr	r2, [r7, #12]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	881b      	ldrh	r3, [r3, #0]
 800ed40:	2b20      	cmp	r3, #32
 800ed42:	d0f5      	beq.n	800ed30 <create_name+0x12c>
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	005b      	lsls	r3, r3, #1
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	4413      	add	r3, r2
 800ed4c:	881b      	ldrh	r3, [r3, #0]
 800ed4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ed50:	d0ee      	beq.n	800ed30 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ed52:	69bb      	ldr	r3, [r7, #24]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d009      	beq.n	800ed6c <create_name+0x168>
 800ed58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed5c:	f043 0303 	orr.w	r3, r3, #3
 800ed60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ed64:	e002      	b.n	800ed6c <create_name+0x168>
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	617b      	str	r3, [r7, #20]
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d009      	beq.n	800ed86 <create_name+0x182>
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ed78:	4413      	add	r3, r2
 800ed7a:	005b      	lsls	r3, r3, #1
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	4413      	add	r3, r2
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	2b2e      	cmp	r3, #46	; 0x2e
 800ed84:	d1ef      	bne.n	800ed66 <create_name+0x162>

	i = b = 0; ni = 8;
 800ed86:	2300      	movs	r3, #0
 800ed88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	623b      	str	r3, [r7, #32]
 800ed90:	2308      	movs	r3, #8
 800ed92:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed94:	69bb      	ldr	r3, [r7, #24]
 800ed96:	1c5a      	adds	r2, r3, #1
 800ed98:	61ba      	str	r2, [r7, #24]
 800ed9a:	005b      	lsls	r3, r3, #1
 800ed9c:	68fa      	ldr	r2, [r7, #12]
 800ed9e:	4413      	add	r3, r2
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800eda4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 8090 	beq.w	800eecc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800edac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edae:	2b20      	cmp	r3, #32
 800edb0:	d006      	beq.n	800edc0 <create_name+0x1bc>
 800edb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb4:	2b2e      	cmp	r3, #46	; 0x2e
 800edb6:	d10a      	bne.n	800edce <create_name+0x1ca>
 800edb8:	69ba      	ldr	r2, [r7, #24]
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d006      	beq.n	800edce <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800edc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc4:	f043 0303 	orr.w	r3, r3, #3
 800edc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edcc:	e07d      	b.n	800eeca <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800edce:	6a3a      	ldr	r2, [r7, #32]
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d203      	bcs.n	800edde <create_name+0x1da>
 800edd6:	69ba      	ldr	r2, [r7, #24]
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d123      	bne.n	800ee26 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	2b0b      	cmp	r3, #11
 800ede2:	d106      	bne.n	800edf2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ede4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede8:	f043 0303 	orr.w	r3, r3, #3
 800edec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edf0:	e075      	b.n	800eede <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800edf2:	69ba      	ldr	r2, [r7, #24]
 800edf4:	697b      	ldr	r3, [r7, #20]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d005      	beq.n	800ee06 <create_name+0x202>
 800edfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edfe:	f043 0303 	orr.w	r3, r3, #3
 800ee02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ee06:	69ba      	ldr	r2, [r7, #24]
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d866      	bhi.n	800eedc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	61bb      	str	r3, [r7, #24]
 800ee12:	2308      	movs	r3, #8
 800ee14:	623b      	str	r3, [r7, #32]
 800ee16:	230b      	movs	r3, #11
 800ee18:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ee1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee24:	e051      	b.n	800eeca <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ee26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee28:	2b7f      	cmp	r3, #127	; 0x7f
 800ee2a:	d914      	bls.n	800ee56 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ee2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee2e:	2100      	movs	r1, #0
 800ee30:	4618      	mov	r0, r3
 800ee32:	f001 fc59 	bl	80106e8 <ff_convert>
 800ee36:	4603      	mov	r3, r0
 800ee38:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ee3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d004      	beq.n	800ee4a <create_name+0x246>
 800ee40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee42:	3b80      	subs	r3, #128	; 0x80
 800ee44:	4a23      	ldr	r2, [pc, #140]	; (800eed4 <create_name+0x2d0>)
 800ee46:	5cd3      	ldrb	r3, [r2, r3]
 800ee48:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ee4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee4e:	f043 0302 	orr.w	r3, r3, #2
 800ee52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ee56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d007      	beq.n	800ee6c <create_name+0x268>
 800ee5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee5e:	4619      	mov	r1, r3
 800ee60:	481d      	ldr	r0, [pc, #116]	; (800eed8 <create_name+0x2d4>)
 800ee62:	f7fd fcbb 	bl	800c7dc <chk_chr>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d008      	beq.n	800ee7e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ee6c:	235f      	movs	r3, #95	; 0x5f
 800ee6e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ee70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee74:	f043 0303 	orr.w	r3, r3, #3
 800ee78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee7c:	e01b      	b.n	800eeb6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ee7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee80:	2b40      	cmp	r3, #64	; 0x40
 800ee82:	d909      	bls.n	800ee98 <create_name+0x294>
 800ee84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee86:	2b5a      	cmp	r3, #90	; 0x5a
 800ee88:	d806      	bhi.n	800ee98 <create_name+0x294>
					b |= 2;
 800ee8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee8e:	f043 0302 	orr.w	r3, r3, #2
 800ee92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee96:	e00e      	b.n	800eeb6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee9a:	2b60      	cmp	r3, #96	; 0x60
 800ee9c:	d90b      	bls.n	800eeb6 <create_name+0x2b2>
 800ee9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eea0:	2b7a      	cmp	r3, #122	; 0x7a
 800eea2:	d808      	bhi.n	800eeb6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800eea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eea8:	f043 0301 	orr.w	r3, r3, #1
 800eeac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eeb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeb2:	3b20      	subs	r3, #32
 800eeb4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800eeb6:	6a3b      	ldr	r3, [r7, #32]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	623a      	str	r2, [r7, #32]
 800eebc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eebe:	b2d1      	uxtb	r1, r2
 800eec0:	687a      	ldr	r2, [r7, #4]
 800eec2:	4413      	add	r3, r2
 800eec4:	460a      	mov	r2, r1
 800eec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800eeca:	e763      	b.n	800ed94 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800eecc:	bf00      	nop
 800eece:	e006      	b.n	800eede <create_name+0x2da>
 800eed0:	08011d48 	.word	0x08011d48
 800eed4:	08011de8 	.word	0x08011de8
 800eed8:	08011d54 	.word	0x08011d54
			if (si > di) break;			/* No extension */
 800eedc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800eee4:	2be5      	cmp	r3, #229	; 0xe5
 800eee6:	d103      	bne.n	800eef0 <create_name+0x2ec>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2205      	movs	r2, #5
 800eeec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	2b08      	cmp	r3, #8
 800eef4:	d104      	bne.n	800ef00 <create_name+0x2fc>
 800eef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eefa:	009b      	lsls	r3, r3, #2
 800eefc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ef00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef04:	f003 030c 	and.w	r3, r3, #12
 800ef08:	2b0c      	cmp	r3, #12
 800ef0a:	d005      	beq.n	800ef18 <create_name+0x314>
 800ef0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef10:	f003 0303 	and.w	r3, r3, #3
 800ef14:	2b03      	cmp	r3, #3
 800ef16:	d105      	bne.n	800ef24 <create_name+0x320>
 800ef18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef1c:	f043 0302 	orr.w	r3, r3, #2
 800ef20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ef24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef28:	f003 0302 	and.w	r3, r3, #2
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d117      	bne.n	800ef60 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ef30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	2b01      	cmp	r3, #1
 800ef3a:	d105      	bne.n	800ef48 <create_name+0x344>
 800ef3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef40:	f043 0310 	orr.w	r3, r3, #16
 800ef44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ef48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef4c:	f003 030c 	and.w	r3, r3, #12
 800ef50:	2b04      	cmp	r3, #4
 800ef52:	d105      	bne.n	800ef60 <create_name+0x35c>
 800ef54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef58:	f043 0308 	orr.w	r3, r3, #8
 800ef5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ef66:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800ef6a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	3728      	adds	r7, #40	; 0x28
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b086      	sub	sp, #24
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef88:	e002      	b.n	800ef90 <follow_path+0x1c>
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	603b      	str	r3, [r7, #0]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	2b2f      	cmp	r3, #47	; 0x2f
 800ef96:	d0f8      	beq.n	800ef8a <follow_path+0x16>
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	2b5c      	cmp	r3, #92	; 0x5c
 800ef9e:	d0f4      	beq.n	800ef8a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	2200      	movs	r2, #0
 800efa4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2200      	movs	r2, #0
 800efaa:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	781b      	ldrb	r3, [r3, #0]
 800efb0:	2b1f      	cmp	r3, #31
 800efb2:	d80a      	bhi.n	800efca <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	2280      	movs	r2, #128	; 0x80
 800efb8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800efbc:	2100      	movs	r1, #0
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7fe fc69 	bl	800d896 <dir_sdi>
 800efc4:	4603      	mov	r3, r0
 800efc6:	75fb      	strb	r3, [r7, #23]
 800efc8:	e07d      	b.n	800f0c6 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800efca:	463b      	mov	r3, r7
 800efcc:	4619      	mov	r1, r3
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f7ff fe18 	bl	800ec04 <create_name>
 800efd4:	4603      	mov	r3, r0
 800efd6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800efd8:	7dfb      	ldrb	r3, [r7, #23]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d16e      	bne.n	800f0bc <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7ff fb3d 	bl	800e65e <dir_find>
 800efe4:	4603      	mov	r3, r0
 800efe6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800efee:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eff0:	7dfb      	ldrb	r3, [r7, #23]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00a      	beq.n	800f00c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eff6:	7dfb      	ldrb	r3, [r7, #23]
 800eff8:	2b04      	cmp	r3, #4
 800effa:	d161      	bne.n	800f0c0 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800effc:	7afb      	ldrb	r3, [r7, #11]
 800effe:	f003 0304 	and.w	r3, r3, #4
 800f002:	2b00      	cmp	r3, #0
 800f004:	d15c      	bne.n	800f0c0 <follow_path+0x14c>
 800f006:	2305      	movs	r3, #5
 800f008:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f00a:	e059      	b.n	800f0c0 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f00c:	7afb      	ldrb	r3, [r7, #11]
 800f00e:	f003 0304 	and.w	r3, r3, #4
 800f012:	2b00      	cmp	r3, #0
 800f014:	d156      	bne.n	800f0c4 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	799b      	ldrb	r3, [r3, #6]
 800f01a:	f003 0310 	and.w	r3, r3, #16
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d102      	bne.n	800f028 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800f022:	2305      	movs	r3, #5
 800f024:	75fb      	strb	r3, [r7, #23]
 800f026:	e04e      	b.n	800f0c6 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	2b04      	cmp	r3, #4
 800f02e:	d130      	bne.n	800f092 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800f030:	693b      	ldr	r3, [r7, #16]
 800f032:	689a      	ldr	r2, [r3, #8]
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f03e:	4613      	mov	r3, r2
 800f040:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f044:	693a      	ldr	r2, [r7, #16]
 800f046:	79d2      	ldrb	r2, [r2, #7]
 800f048:	431a      	orrs	r2, r3
 800f04a:	693b      	ldr	r3, [r7, #16]
 800f04c:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	695b      	ldr	r3, [r3, #20]
 800f05a:	3334      	adds	r3, #52	; 0x34
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7fd f98d 	bl	800c37c <ld_dword>
 800f062:	4602      	mov	r2, r0
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	695b      	ldr	r3, [r3, #20]
 800f06c:	3321      	adds	r3, #33	; 0x21
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	f003 0302 	and.w	r3, r3, #2
 800f074:	b2da      	uxtb	r2, r3
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	695b      	ldr	r3, [r3, #20]
 800f07e:	3338      	adds	r3, #56	; 0x38
 800f080:	4618      	mov	r0, r3
 800f082:	f7fd f99e 	bl	800c3c2 <ld_qword>
 800f086:	4602      	mov	r2, r0
 800f088:	460b      	mov	r3, r1
 800f08a:	6939      	ldr	r1, [r7, #16]
 800f08c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800f090:	e79b      	b.n	800efca <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f09c:	68fa      	ldr	r2, [r7, #12]
 800f09e:	8992      	ldrh	r2, [r2, #12]
 800f0a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0a4:	fb00 f202 	mul.w	r2, r0, r2
 800f0a8:	1a9b      	subs	r3, r3, r2
 800f0aa:	440b      	add	r3, r1
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	68f8      	ldr	r0, [r7, #12]
 800f0b0:	f7fe fdc7 	bl	800dc42 <ld_clust>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f0ba:	e786      	b.n	800efca <follow_path+0x56>
			if (res != FR_OK) break;
 800f0bc:	bf00      	nop
 800f0be:	e002      	b.n	800f0c6 <follow_path+0x152>
				break;
 800f0c0:	bf00      	nop
 800f0c2:	e000      	b.n	800f0c6 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f0c4:	bf00      	nop
			}
		}
	}

	return res;
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3718      	adds	r7, #24
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b087      	sub	sp, #28
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f0d8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d031      	beq.n	800f14a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	617b      	str	r3, [r7, #20]
 800f0ec:	e002      	b.n	800f0f4 <get_ldnumber+0x24>
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	3301      	adds	r3, #1
 800f0f2:	617b      	str	r3, [r7, #20]
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	2b1f      	cmp	r3, #31
 800f0fa:	d903      	bls.n	800f104 <get_ldnumber+0x34>
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	2b3a      	cmp	r3, #58	; 0x3a
 800f102:	d1f4      	bne.n	800f0ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	2b3a      	cmp	r3, #58	; 0x3a
 800f10a:	d11c      	bne.n	800f146 <get_ldnumber+0x76>
			tp = *path;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	1c5a      	adds	r2, r3, #1
 800f116:	60fa      	str	r2, [r7, #12]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	3b30      	subs	r3, #48	; 0x30
 800f11c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b09      	cmp	r3, #9
 800f122:	d80e      	bhi.n	800f142 <get_ldnumber+0x72>
 800f124:	68fa      	ldr	r2, [r7, #12]
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d10a      	bne.n	800f142 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d107      	bne.n	800f142 <get_ldnumber+0x72>
					vol = (int)i;
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f136:	697b      	ldr	r3, [r7, #20]
 800f138:	3301      	adds	r3, #1
 800f13a:	617b      	str	r3, [r7, #20]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	697a      	ldr	r2, [r7, #20]
 800f140:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	e002      	b.n	800f14c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f146:	2300      	movs	r3, #0
 800f148:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f14a:	693b      	ldr	r3, [r7, #16]
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	371c      	adds	r7, #28
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr

0800f158 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	70da      	strb	r2, [r3, #3]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f04f 32ff 	mov.w	r2, #4294967295
 800f16e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f7fd fcfe 	bl	800cb74 <move_window>
 800f178:	4603      	mov	r3, r0
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d001      	beq.n	800f182 <check_fs+0x2a>
 800f17e:	2304      	movs	r3, #4
 800f180:	e044      	b.n	800f20c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	333c      	adds	r3, #60	; 0x3c
 800f186:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fd f8de 	bl	800c34c <ld_word>
 800f190:	4603      	mov	r3, r0
 800f192:	461a      	mov	r2, r3
 800f194:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f198:	429a      	cmp	r2, r3
 800f19a:	d001      	beq.n	800f1a0 <check_fs+0x48>
 800f19c:	2303      	movs	r3, #3
 800f19e:	e035      	b.n	800f20c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1a6:	2be9      	cmp	r3, #233	; 0xe9
 800f1a8:	d009      	beq.n	800f1be <check_fs+0x66>
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f1b0:	2beb      	cmp	r3, #235	; 0xeb
 800f1b2:	d11e      	bne.n	800f1f2 <check_fs+0x9a>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f1ba:	2b90      	cmp	r3, #144	; 0x90
 800f1bc:	d119      	bne.n	800f1f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	333c      	adds	r3, #60	; 0x3c
 800f1c2:	3336      	adds	r3, #54	; 0x36
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f7fd f8d9 	bl	800c37c <ld_dword>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f1d0:	4a10      	ldr	r2, [pc, #64]	; (800f214 <check_fs+0xbc>)
 800f1d2:	4293      	cmp	r3, r2
 800f1d4:	d101      	bne.n	800f1da <check_fs+0x82>
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	e018      	b.n	800f20c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	333c      	adds	r3, #60	; 0x3c
 800f1de:	3352      	adds	r3, #82	; 0x52
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd f8cb 	bl	800c37c <ld_dword>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	4a0b      	ldr	r2, [pc, #44]	; (800f218 <check_fs+0xc0>)
 800f1ea:	4293      	cmp	r3, r2
 800f1ec:	d101      	bne.n	800f1f2 <check_fs+0x9a>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	e00c      	b.n	800f20c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	333c      	adds	r3, #60	; 0x3c
 800f1f6:	220b      	movs	r2, #11
 800f1f8:	4908      	ldr	r1, [pc, #32]	; (800f21c <check_fs+0xc4>)
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fd fac7 	bl	800c78e <mem_cmp>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d101      	bne.n	800f20a <check_fs+0xb2>
 800f206:	2301      	movs	r3, #1
 800f208:	e000      	b.n	800f20c <check_fs+0xb4>
#endif
	return 2;
 800f20a:	2302      	movs	r3, #2
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	00544146 	.word	0x00544146
 800f218:	33544146 	.word	0x33544146
 800f21c:	08011d5c 	.word	0x08011d5c

0800f220 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f224:	b09c      	sub	sp, #112	; 0x70
 800f226:	af00      	add	r7, sp, #0
 800f228:	61f8      	str	r0, [r7, #28]
 800f22a:	61b9      	str	r1, [r7, #24]
 800f22c:	4613      	mov	r3, r2
 800f22e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f230:	69bb      	ldr	r3, [r7, #24]
 800f232:	2200      	movs	r2, #0
 800f234:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f236:	69f8      	ldr	r0, [r7, #28]
 800f238:	f7ff ff4a 	bl	800f0d0 <get_ldnumber>
 800f23c:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800f23e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f240:	2b00      	cmp	r3, #0
 800f242:	da01      	bge.n	800f248 <find_volume+0x28>
 800f244:	230b      	movs	r3, #11
 800f246:	e376      	b.n	800f936 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f248:	4aa6      	ldr	r2, [pc, #664]	; (800f4e4 <find_volume+0x2c4>)
 800f24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f250:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f254:	2b00      	cmp	r3, #0
 800f256:	d101      	bne.n	800f25c <find_volume+0x3c>
 800f258:	230c      	movs	r3, #12
 800f25a:	e36c      	b.n	800f936 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f25c:	69bb      	ldr	r3, [r7, #24]
 800f25e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f260:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f262:	7dfb      	ldrb	r3, [r7, #23]
 800f264:	f023 0301 	bic.w	r3, r3, #1
 800f268:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d01a      	beq.n	800f2a8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800f272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f274:	785b      	ldrb	r3, [r3, #1]
 800f276:	4618      	mov	r0, r3
 800f278:	f7fc ffca 	bl	800c210 <disk_status>
 800f27c:	4603      	mov	r3, r0
 800f27e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f282:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f286:	f003 0301 	and.w	r3, r3, #1
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d10c      	bne.n	800f2a8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f28e:	7dfb      	ldrb	r3, [r7, #23]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d007      	beq.n	800f2a4 <find_volume+0x84>
 800f294:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f298:	f003 0304 	and.w	r3, r3, #4
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800f2a0:	230a      	movs	r3, #10
 800f2a2:	e348      	b.n	800f936 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	e346      	b.n	800f936 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f2ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2b0:	b2da      	uxtb	r2, r3
 800f2b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2b8:	785b      	ldrb	r3, [r3, #1]
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fc ffc2 	bl	800c244 <disk_initialize>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f2c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f2ca:	f003 0301 	and.w	r3, r3, #1
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d001      	beq.n	800f2d6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	e32f      	b.n	800f936 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d007      	beq.n	800f2ec <find_volume+0xcc>
 800f2dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d001      	beq.n	800f2ec <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800f2e8:	230a      	movs	r3, #10
 800f2ea:	e324      	b.n	800f936 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2ee:	7858      	ldrb	r0, [r3, #1]
 800f2f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2f2:	330c      	adds	r3, #12
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	2102      	movs	r1, #2
 800f2f8:	f7fd f80a 	bl	800c310 <disk_ioctl>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d001      	beq.n	800f306 <find_volume+0xe6>
 800f302:	2301      	movs	r3, #1
 800f304:	e317      	b.n	800f936 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f308:	899b      	ldrh	r3, [r3, #12]
 800f30a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f30e:	d80d      	bhi.n	800f32c <find_volume+0x10c>
 800f310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f312:	899b      	ldrh	r3, [r3, #12]
 800f314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f318:	d308      	bcc.n	800f32c <find_volume+0x10c>
 800f31a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f31c:	899b      	ldrh	r3, [r3, #12]
 800f31e:	461a      	mov	r2, r3
 800f320:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f322:	899b      	ldrh	r3, [r3, #12]
 800f324:	3b01      	subs	r3, #1
 800f326:	4013      	ands	r3, r2
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <find_volume+0x110>
 800f32c:	2301      	movs	r3, #1
 800f32e:	e302      	b.n	800f936 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f330:	2300      	movs	r3, #0
 800f332:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f334:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f336:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f338:	f7ff ff0e 	bl	800f158 <check_fs>
 800f33c:	4603      	mov	r3, r0
 800f33e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f342:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f346:	2b02      	cmp	r3, #2
 800f348:	d14d      	bne.n	800f3e6 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f34a:	2300      	movs	r3, #0
 800f34c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f34e:	e020      	b.n	800f392 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f352:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f358:	011b      	lsls	r3, r3, #4
 800f35a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f35e:	4413      	add	r3, r2
 800f360:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f364:	3304      	adds	r3, #4
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d006      	beq.n	800f37a <find_volume+0x15a>
 800f36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f36e:	3308      	adds	r3, #8
 800f370:	4618      	mov	r0, r3
 800f372:	f7fd f803 	bl	800c37c <ld_dword>
 800f376:	4602      	mov	r2, r0
 800f378:	e000      	b.n	800f37c <find_volume+0x15c>
 800f37a:	2200      	movs	r2, #0
 800f37c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	3360      	adds	r3, #96	; 0x60
 800f382:	f107 0110 	add.w	r1, r7, #16
 800f386:	440b      	add	r3, r1
 800f388:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f38c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f38e:	3301      	adds	r3, #1
 800f390:	65bb      	str	r3, [r7, #88]	; 0x58
 800f392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f394:	2b03      	cmp	r3, #3
 800f396:	d9db      	bls.n	800f350 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f398:	2300      	movs	r3, #0
 800f39a:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800f39c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d002      	beq.n	800f3a8 <find_volume+0x188>
 800f3a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f3a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	3360      	adds	r3, #96	; 0x60
 800f3ae:	f107 0210 	add.w	r2, r7, #16
 800f3b2:	4413      	add	r3, r2
 800f3b4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800f3b8:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f3ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d005      	beq.n	800f3cc <find_volume+0x1ac>
 800f3c0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f3c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f3c4:	f7ff fec8 	bl	800f158 <check_fs>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	e000      	b.n	800f3ce <find_volume+0x1ae>
 800f3cc:	2303      	movs	r3, #3
 800f3ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f3d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d905      	bls.n	800f3e6 <find_volume+0x1c6>
 800f3da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3dc:	3301      	adds	r3, #1
 800f3de:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3e2:	2b03      	cmp	r3, #3
 800f3e4:	d9e0      	bls.n	800f3a8 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f3e6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f3ea:	2b04      	cmp	r3, #4
 800f3ec:	d101      	bne.n	800f3f2 <find_volume+0x1d2>
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e2a1      	b.n	800f936 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f3f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d901      	bls.n	800f3fe <find_volume+0x1de>
 800f3fa:	230d      	movs	r3, #13
 800f3fc:	e29b      	b.n	800f936 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800f3fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f402:	2b01      	cmp	r3, #1
 800f404:	f040 8101 	bne.w	800f60a <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800f408:	230b      	movs	r3, #11
 800f40a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f40c:	e002      	b.n	800f414 <find_volume+0x1f4>
 800f40e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f410:	3301      	adds	r3, #1
 800f412:	65bb      	str	r3, [r7, #88]	; 0x58
 800f414:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f416:	2b3f      	cmp	r3, #63	; 0x3f
 800f418:	d806      	bhi.n	800f428 <find_volume+0x208>
 800f41a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f41c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f41e:	4413      	add	r3, r2
 800f420:	333c      	adds	r3, #60	; 0x3c
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d0f2      	beq.n	800f40e <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800f428:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f42a:	2b3f      	cmp	r3, #63	; 0x3f
 800f42c:	d801      	bhi.n	800f432 <find_volume+0x212>
 800f42e:	230d      	movs	r3, #13
 800f430:	e281      	b.n	800f936 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800f432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f434:	333c      	adds	r3, #60	; 0x3c
 800f436:	3368      	adds	r3, #104	; 0x68
 800f438:	4618      	mov	r0, r3
 800f43a:	f7fc ff87 	bl	800c34c <ld_word>
 800f43e:	4603      	mov	r3, r0
 800f440:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f444:	d001      	beq.n	800f44a <find_volume+0x22a>
 800f446:	230d      	movs	r3, #13
 800f448:	e275      	b.n	800f936 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800f44a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f44c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800f450:	461a      	mov	r2, r3
 800f452:	2301      	movs	r3, #1
 800f454:	4093      	lsls	r3, r2
 800f456:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f458:	8992      	ldrh	r2, [r2, #12]
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d001      	beq.n	800f462 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800f45e:	230d      	movs	r3, #13
 800f460:	e269      	b.n	800f936 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800f462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f464:	333c      	adds	r3, #60	; 0x3c
 800f466:	3348      	adds	r3, #72	; 0x48
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fc ffaa 	bl	800c3c2 <ld_qword>
 800f46e:	4602      	mov	r2, r0
 800f470:	460b      	mov	r3, r1
 800f472:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f474:	2000      	movs	r0, #0
 800f476:	60b9      	str	r1, [r7, #8]
 800f478:	60f8      	str	r0, [r7, #12]
 800f47a:	68b9      	ldr	r1, [r7, #8]
 800f47c:	1851      	adds	r1, r2, r1
 800f47e:	6039      	str	r1, [r7, #0]
 800f480:	68f9      	ldr	r1, [r7, #12]
 800f482:	eb43 0101 	adc.w	r1, r3, r1
 800f486:	6079      	str	r1, [r7, #4]
 800f488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f48c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800f490:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f494:	2b01      	cmp	r3, #1
 800f496:	d301      	bcc.n	800f49c <find_volume+0x27c>
 800f498:	230d      	movs	r3, #13
 800f49a:	e24c      	b.n	800f936 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800f49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f49e:	333c      	adds	r3, #60	; 0x3c
 800f4a0:	3354      	adds	r3, #84	; 0x54
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fc ff6a 	bl	800c37c <ld_dword>
 800f4a8:	4602      	mov	r2, r0
 800f4aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ac:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800f4ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b0:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800f4b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800f4b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ba:	789b      	ldrb	r3, [r3, #2]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d001      	beq.n	800f4c4 <find_volume+0x2a4>
 800f4c0:	230d      	movs	r3, #13
 800f4c2:	e238      	b.n	800f936 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800f4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4c6:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	4093      	lsls	r3, r2
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800f4d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4d8:	895b      	ldrh	r3, [r3, #10]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d104      	bne.n	800f4e8 <find_volume+0x2c8>
 800f4de:	230d      	movs	r3, #13
 800f4e0:	e229      	b.n	800f936 <find_volume+0x716>
 800f4e2:	bf00      	nop
 800f4e4:	24002350 	.word	0x24002350

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800f4e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ea:	333c      	adds	r3, #60	; 0x3c
 800f4ec:	335c      	adds	r3, #92	; 0x5c
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fc ff44 	bl	800c37c <ld_dword>
 800f4f4:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800f4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f8:	4a99      	ldr	r2, [pc, #612]	; (800f760 <find_volume+0x540>)
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	d901      	bls.n	800f502 <find_volume+0x2e2>
 800f4fe:	230d      	movs	r3, #13
 800f500:	e219      	b.n	800f936 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800f502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f504:	1c9a      	adds	r2, r3, #2
 800f506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f508:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800f50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f50c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f50e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800f510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f512:	333c      	adds	r3, #60	; 0x3c
 800f514:	3358      	adds	r3, #88	; 0x58
 800f516:	4618      	mov	r0, r3
 800f518:	f7fc ff30 	bl	800c37c <ld_dword>
 800f51c:	4602      	mov	r2, r0
 800f51e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f520:	441a      	add	r2, r3
 800f522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f524:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800f526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f528:	333c      	adds	r3, #60	; 0x3c
 800f52a:	3350      	adds	r3, #80	; 0x50
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7fc ff25 	bl	800c37c <ld_dword>
 800f532:	4602      	mov	r2, r0
 800f534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f536:	441a      	add	r2, r3
 800f538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f53a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800f53c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f540:	2200      	movs	r2, #0
 800f542:	469a      	mov	sl, r3
 800f544:	4693      	mov	fp, r2
 800f546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f548:	895b      	ldrh	r3, [r3, #10]
 800f54a:	461a      	mov	r2, r3
 800f54c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54e:	fb02 f303 	mul.w	r3, r2, r3
 800f552:	2200      	movs	r2, #0
 800f554:	4698      	mov	r8, r3
 800f556:	4691      	mov	r9, r2
 800f558:	eb1a 0408 	adds.w	r4, sl, r8
 800f55c:	eb4b 0509 	adc.w	r5, fp, r9
 800f560:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800f564:	42a2      	cmp	r2, r4
 800f566:	41ab      	sbcs	r3, r5
 800f568:	d201      	bcs.n	800f56e <find_volume+0x34e>
 800f56a:	230d      	movs	r3, #13
 800f56c:	e1e3      	b.n	800f936 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800f56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f570:	333c      	adds	r3, #60	; 0x3c
 800f572:	3360      	adds	r3, #96	; 0x60
 800f574:	4618      	mov	r0, r3
 800f576:	f7fc ff01 	bl	800c37c <ld_dword>
 800f57a:	4602      	mov	r2, r0
 800f57c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f57e:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800f580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f584:	4619      	mov	r1, r3
 800f586:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f588:	f7fd fb92 	bl	800ccb0 <clust2sect>
 800f58c:	4603      	mov	r3, r0
 800f58e:	4619      	mov	r1, r3
 800f590:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f592:	f7fd faef 	bl	800cb74 <move_window>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <find_volume+0x380>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e1ca      	b.n	800f936 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5a4:	e015      	b.n	800f5d2 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f5a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f5a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5aa:	4413      	add	r3, r2
 800f5ac:	333c      	adds	r3, #60	; 0x3c
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	2b81      	cmp	r3, #129	; 0x81
 800f5b2:	d10b      	bne.n	800f5cc <find_volume+0x3ac>
 800f5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5b6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f5ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5bc:	3314      	adds	r3, #20
 800f5be:	4413      	add	r3, r2
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7fc fedb 	bl	800c37c <ld_dword>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d009      	beq.n	800f5e0 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800f5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5ce:	3320      	adds	r3, #32
 800f5d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d4:	899b      	ldrh	r3, [r3, #12]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5da:	4293      	cmp	r3, r2
 800f5dc:	d3e3      	bcc.n	800f5a6 <find_volume+0x386>
 800f5de:	e000      	b.n	800f5e2 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800f5e0:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800f5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e4:	899b      	ldrh	r3, [r3, #12]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d101      	bne.n	800f5f2 <find_volume+0x3d2>
 800f5ee:	230d      	movs	r3, #13
 800f5f0:	e1a1      	b.n	800f936 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f8:	61da      	str	r2, [r3, #28]
 800f5fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5fc:	69da      	ldr	r2, [r3, #28]
 800f5fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f600:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800f602:	2304      	movs	r3, #4
 800f604:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800f608:	e17d      	b.n	800f906 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f60a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f60c:	333c      	adds	r3, #60	; 0x3c
 800f60e:	330b      	adds	r3, #11
 800f610:	4618      	mov	r0, r3
 800f612:	f7fc fe9b 	bl	800c34c <ld_word>
 800f616:	4603      	mov	r3, r0
 800f618:	461a      	mov	r2, r3
 800f61a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f61c:	899b      	ldrh	r3, [r3, #12]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d001      	beq.n	800f626 <find_volume+0x406>
 800f622:	230d      	movs	r3, #13
 800f624:	e187      	b.n	800f936 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f628:	333c      	adds	r3, #60	; 0x3c
 800f62a:	3316      	adds	r3, #22
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fc fe8d 	bl	800c34c <ld_word>
 800f632:	4603      	mov	r3, r0
 800f634:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d106      	bne.n	800f64a <find_volume+0x42a>
 800f63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f63e:	333c      	adds	r3, #60	; 0x3c
 800f640:	3324      	adds	r3, #36	; 0x24
 800f642:	4618      	mov	r0, r3
 800f644:	f7fc fe9a 	bl	800c37c <ld_dword>
 800f648:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800f64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f64e:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f652:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f656:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f658:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f65c:	789b      	ldrb	r3, [r3, #2]
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d005      	beq.n	800f66e <find_volume+0x44e>
 800f662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f664:	789b      	ldrb	r3, [r3, #2]
 800f666:	2b02      	cmp	r3, #2
 800f668:	d001      	beq.n	800f66e <find_volume+0x44e>
 800f66a:	230d      	movs	r3, #13
 800f66c:	e163      	b.n	800f936 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f66e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f670:	789b      	ldrb	r3, [r3, #2]
 800f672:	461a      	mov	r2, r3
 800f674:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f676:	fb02 f303 	mul.w	r3, r2, r3
 800f67a:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f67e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f682:	b29a      	uxth	r2, r3
 800f684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f686:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f68a:	895b      	ldrh	r3, [r3, #10]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d008      	beq.n	800f6a2 <find_volume+0x482>
 800f690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f692:	895b      	ldrh	r3, [r3, #10]
 800f694:	461a      	mov	r2, r3
 800f696:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f698:	895b      	ldrh	r3, [r3, #10]
 800f69a:	3b01      	subs	r3, #1
 800f69c:	4013      	ands	r3, r2
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d001      	beq.n	800f6a6 <find_volume+0x486>
 800f6a2:	230d      	movs	r3, #13
 800f6a4:	e147      	b.n	800f936 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6a8:	333c      	adds	r3, #60	; 0x3c
 800f6aa:	3311      	adds	r3, #17
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fc fe4d 	bl	800c34c <ld_word>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6b8:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6bc:	891b      	ldrh	r3, [r3, #8]
 800f6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f6c0:	8992      	ldrh	r2, [r2, #12]
 800f6c2:	0952      	lsrs	r2, r2, #5
 800f6c4:	b292      	uxth	r2, r2
 800f6c6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6ca:	fb01 f202 	mul.w	r2, r1, r2
 800f6ce:	1a9b      	subs	r3, r3, r2
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <find_volume+0x4ba>
 800f6d6:	230d      	movs	r3, #13
 800f6d8:	e12d      	b.n	800f936 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6dc:	333c      	adds	r3, #60	; 0x3c
 800f6de:	3313      	adds	r3, #19
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7fc fe33 	bl	800c34c <ld_word>
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f6ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d106      	bne.n	800f6fe <find_volume+0x4de>
 800f6f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6f2:	333c      	adds	r3, #60	; 0x3c
 800f6f4:	3320      	adds	r3, #32
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fc fe40 	bl	800c37c <ld_dword>
 800f6fc:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f6fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f700:	333c      	adds	r3, #60	; 0x3c
 800f702:	330e      	adds	r3, #14
 800f704:	4618      	mov	r0, r3
 800f706:	f7fc fe21 	bl	800c34c <ld_word>
 800f70a:	4603      	mov	r3, r0
 800f70c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f710:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f714:	2b00      	cmp	r3, #0
 800f716:	d101      	bne.n	800f71c <find_volume+0x4fc>
 800f718:	230d      	movs	r3, #13
 800f71a:	e10c      	b.n	800f936 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f71c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f720:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f722:	4413      	add	r3, r2
 800f724:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f726:	8911      	ldrh	r1, [r2, #8]
 800f728:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f72a:	8992      	ldrh	r2, [r2, #12]
 800f72c:	0952      	lsrs	r2, r2, #5
 800f72e:	b292      	uxth	r2, r2
 800f730:	fbb1 f2f2 	udiv	r2, r1, r2
 800f734:	b292      	uxth	r2, r2
 800f736:	4413      	add	r3, r2
 800f738:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f73a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f73c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73e:	429a      	cmp	r2, r3
 800f740:	d201      	bcs.n	800f746 <find_volume+0x526>
 800f742:	230d      	movs	r3, #13
 800f744:	e0f7      	b.n	800f936 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f746:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f748:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f74e:	8952      	ldrh	r2, [r2, #10]
 800f750:	fbb3 f3f2 	udiv	r3, r3, r2
 800f754:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d103      	bne.n	800f764 <find_volume+0x544>
 800f75c:	230d      	movs	r3, #13
 800f75e:	e0ea      	b.n	800f936 <find_volume+0x716>
 800f760:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800f764:	2303      	movs	r3, #3
 800f766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f770:	4293      	cmp	r3, r2
 800f772:	d802      	bhi.n	800f77a <find_volume+0x55a>
 800f774:	2302      	movs	r3, #2
 800f776:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f77c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f780:	4293      	cmp	r3, r2
 800f782:	d802      	bhi.n	800f78a <find_volume+0x56a>
 800f784:	2301      	movs	r3, #1
 800f786:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78c:	1c9a      	adds	r2, r3, #2
 800f78e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f790:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f794:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f796:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f798:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f79c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f79e:	441a      	add	r2, r3
 800f7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7a2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f7a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7a8:	441a      	add	r2, r3
 800f7aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ac:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f7ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f7b2:	2b03      	cmp	r3, #3
 800f7b4:	d11e      	bne.n	800f7f4 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b8:	333c      	adds	r3, #60	; 0x3c
 800f7ba:	332a      	adds	r3, #42	; 0x2a
 800f7bc:	4618      	mov	r0, r3
 800f7be:	f7fc fdc5 	bl	800c34c <ld_word>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d001      	beq.n	800f7cc <find_volume+0x5ac>
 800f7c8:	230d      	movs	r3, #13
 800f7ca:	e0b4      	b.n	800f936 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ce:	891b      	ldrh	r3, [r3, #8]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d001      	beq.n	800f7d8 <find_volume+0x5b8>
 800f7d4:	230d      	movs	r3, #13
 800f7d6:	e0ae      	b.n	800f936 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7da:	333c      	adds	r3, #60	; 0x3c
 800f7dc:	332c      	adds	r3, #44	; 0x2c
 800f7de:	4618      	mov	r0, r3
 800f7e0:	f7fc fdcc 	bl	800c37c <ld_dword>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7e8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f7ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7ec:	6a1b      	ldr	r3, [r3, #32]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f7f2:	e01f      	b.n	800f834 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f7f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7f6:	891b      	ldrh	r3, [r3, #8]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d101      	bne.n	800f800 <find_volume+0x5e0>
 800f7fc:	230d      	movs	r3, #13
 800f7fe:	e09a      	b.n	800f936 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f806:	441a      	add	r2, r3
 800f808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f80a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f80c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f810:	2b02      	cmp	r3, #2
 800f812:	d103      	bne.n	800f81c <find_volume+0x5fc>
 800f814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f816:	6a1b      	ldr	r3, [r3, #32]
 800f818:	005b      	lsls	r3, r3, #1
 800f81a:	e00a      	b.n	800f832 <find_volume+0x612>
 800f81c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f81e:	6a1a      	ldr	r2, [r3, #32]
 800f820:	4613      	mov	r3, r2
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	4413      	add	r3, r2
 800f826:	085a      	lsrs	r2, r3, #1
 800f828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f82a:	6a1b      	ldr	r3, [r3, #32]
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f832:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f83a:	899b      	ldrh	r3, [r3, #12]
 800f83c:	4619      	mov	r1, r3
 800f83e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f840:	440b      	add	r3, r1
 800f842:	3b01      	subs	r3, #1
 800f844:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f846:	8989      	ldrh	r1, [r1, #12]
 800f848:	fbb3 f3f1 	udiv	r3, r3, r1
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d201      	bcs.n	800f854 <find_volume+0x634>
 800f850:	230d      	movs	r3, #13
 800f852:	e070      	b.n	800f936 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f856:	f04f 32ff 	mov.w	r2, #4294967295
 800f85a:	61da      	str	r2, [r3, #28]
 800f85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f85e:	69da      	ldr	r2, [r3, #28]
 800f860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f862:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f866:	2280      	movs	r2, #128	; 0x80
 800f868:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f86a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800f86e:	2b03      	cmp	r3, #3
 800f870:	d149      	bne.n	800f906 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f874:	333c      	adds	r3, #60	; 0x3c
 800f876:	3330      	adds	r3, #48	; 0x30
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fc fd67 	bl	800c34c <ld_word>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b01      	cmp	r3, #1
 800f882:	d140      	bne.n	800f906 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f886:	3301      	adds	r3, #1
 800f888:	4619      	mov	r1, r3
 800f88a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f88c:	f7fd f972 	bl	800cb74 <move_window>
 800f890:	4603      	mov	r3, r0
 800f892:	2b00      	cmp	r3, #0
 800f894:	d137      	bne.n	800f906 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800f896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f898:	2200      	movs	r2, #0
 800f89a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f89e:	333c      	adds	r3, #60	; 0x3c
 800f8a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fc fd51 	bl	800c34c <ld_word>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	461a      	mov	r2, r3
 800f8ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d127      	bne.n	800f906 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8b8:	333c      	adds	r3, #60	; 0x3c
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fc fd5e 	bl	800c37c <ld_dword>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	4a1f      	ldr	r2, [pc, #124]	; (800f940 <find_volume+0x720>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d11e      	bne.n	800f906 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8ca:	333c      	adds	r3, #60	; 0x3c
 800f8cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fc fd53 	bl	800c37c <ld_dword>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	4a1a      	ldr	r2, [pc, #104]	; (800f944 <find_volume+0x724>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d113      	bne.n	800f906 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8e0:	333c      	adds	r3, #60	; 0x3c
 800f8e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fc fd48 	bl	800c37c <ld_dword>
 800f8ec:	4602      	mov	r2, r0
 800f8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f0:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f4:	333c      	adds	r3, #60	; 0x3c
 800f8f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fc fd3e 	bl	800c37c <ld_dword>
 800f900:	4602      	mov	r2, r0
 800f902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f904:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f908:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800f90c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f90e:	4b0e      	ldr	r3, [pc, #56]	; (800f948 <find_volume+0x728>)
 800f910:	881b      	ldrh	r3, [r3, #0]
 800f912:	3301      	adds	r3, #1
 800f914:	b29a      	uxth	r2, r3
 800f916:	4b0c      	ldr	r3, [pc, #48]	; (800f948 <find_volume+0x728>)
 800f918:	801a      	strh	r2, [r3, #0]
 800f91a:	4b0b      	ldr	r3, [pc, #44]	; (800f948 <find_volume+0x728>)
 800f91c:	881a      	ldrh	r2, [r3, #0]
 800f91e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f920:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f924:	4a09      	ldr	r2, [pc, #36]	; (800f94c <find_volume+0x72c>)
 800f926:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800f928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f92a:	4a09      	ldr	r2, [pc, #36]	; (800f950 <find_volume+0x730>)
 800f92c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f92e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f930:	f7fd f8b8 	bl	800caa4 <clear_lock>
#endif
	return FR_OK;
 800f934:	2300      	movs	r3, #0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3770      	adds	r7, #112	; 0x70
 800f93a:	46bd      	mov	sp, r7
 800f93c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f940:	41615252 	.word	0x41615252
 800f944:	61417272 	.word	0x61417272
 800f948:	24002354 	.word	0x24002354
 800f94c:	240025d8 	.word	0x240025d8
 800f950:	24002378 	.word	0x24002378

0800f954 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
 800f95c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f95e:	2309      	movs	r3, #9
 800f960:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d01c      	beq.n	800f9a2 <validate+0x4e>
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d018      	beq.n	800f9a2 <validate+0x4e>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	781b      	ldrb	r3, [r3, #0]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d013      	beq.n	800f9a2 <validate+0x4e>
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	889a      	ldrh	r2, [r3, #4]
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	88db      	ldrh	r3, [r3, #6]
 800f984:	429a      	cmp	r2, r3
 800f986:	d10c      	bne.n	800f9a2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	785b      	ldrb	r3, [r3, #1]
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fc fc3e 	bl	800c210 <disk_status>
 800f994:	4603      	mov	r3, r0
 800f996:	f003 0301 	and.w	r3, r3, #1
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d101      	bne.n	800f9a2 <validate+0x4e>
			res = FR_OK;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9a2:	7bfb      	ldrb	r3, [r7, #15]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d102      	bne.n	800f9ae <validate+0x5a>
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	e000      	b.n	800f9b0 <validate+0x5c>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	683a      	ldr	r2, [r7, #0]
 800f9b2:	6013      	str	r3, [r2, #0]
	return res;
 800f9b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	3710      	adds	r7, #16
 800f9ba:	46bd      	mov	sp, r7
 800f9bc:	bd80      	pop	{r7, pc}
	...

0800f9c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f9c0:	b580      	push	{r7, lr}
 800f9c2:	b088      	sub	sp, #32
 800f9c4:	af00      	add	r7, sp, #0
 800f9c6:	60f8      	str	r0, [r7, #12]
 800f9c8:	60b9      	str	r1, [r7, #8]
 800f9ca:	4613      	mov	r3, r2
 800f9cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f9d2:	f107 0310 	add.w	r3, r7, #16
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff fb7a 	bl	800f0d0 <get_ldnumber>
 800f9dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	da01      	bge.n	800f9e8 <f_mount+0x28>
 800f9e4:	230b      	movs	r3, #11
 800f9e6:	e02b      	b.n	800fa40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f9e8:	4a17      	ldr	r2, [pc, #92]	; (800fa48 <f_mount+0x88>)
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f9f2:	69bb      	ldr	r3, [r7, #24]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d005      	beq.n	800fa04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f9f8:	69b8      	ldr	r0, [r7, #24]
 800f9fa:	f7fd f853 	bl	800caa4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f9fe:	69bb      	ldr	r3, [r7, #24]
 800fa00:	2200      	movs	r2, #0
 800fa02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d002      	beq.n	800fa10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa10:	68fa      	ldr	r2, [r7, #12]
 800fa12:	490d      	ldr	r1, [pc, #52]	; (800fa48 <f_mount+0x88>)
 800fa14:	69fb      	ldr	r3, [r7, #28]
 800fa16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d002      	beq.n	800fa26 <f_mount+0x66>
 800fa20:	79fb      	ldrb	r3, [r7, #7]
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d001      	beq.n	800fa2a <f_mount+0x6a>
 800fa26:	2300      	movs	r3, #0
 800fa28:	e00a      	b.n	800fa40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa2a:	f107 010c 	add.w	r1, r7, #12
 800fa2e:	f107 0308 	add.w	r3, r7, #8
 800fa32:	2200      	movs	r2, #0
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7ff fbf3 	bl	800f220 <find_volume>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3720      	adds	r7, #32
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	24002350 	.word	0x24002350

0800fa4c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fa50:	b0a8      	sub	sp, #160	; 0xa0
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6278      	str	r0, [r7, #36]	; 0x24
 800fa56:	6239      	str	r1, [r7, #32]
 800fa58:	4613      	mov	r3, r2
 800fa5a:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d101      	bne.n	800fa66 <f_open+0x1a>
 800fa62:	2309      	movs	r3, #9
 800fa64:	e2c0      	b.n	800ffe8 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fa66:	7ffb      	ldrb	r3, [r7, #31]
 800fa68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa6c:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800fa6e:	7ffb      	ldrb	r3, [r7, #31]
 800fa70:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800fa74:	f107 0020 	add.w	r0, r7, #32
 800fa78:	461a      	mov	r2, r3
 800fa7a:	f7ff fbd1 	bl	800f220 <find_volume>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800fa84:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f040 82a4 	bne.w	800ffd6 <f_open+0x58a>
		dj.obj.fs = fs;
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fa92:	6a3b      	ldr	r3, [r7, #32]
 800fa94:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800fa98:	4619      	mov	r1, r3
 800fa9a:	4610      	mov	r0, r2
 800fa9c:	f7ff fa6a 	bl	800ef74 <follow_path>
 800faa0:	4603      	mov	r3, r0
 800faa2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800faa6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d11a      	bne.n	800fae4 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800faae:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800fab2:	b25b      	sxtb	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	da03      	bge.n	800fac0 <f_open+0x74>
				res = FR_INVALID_NAME;
 800fab8:	2306      	movs	r3, #6
 800faba:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800fabe:	e011      	b.n	800fae4 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fac0:	7ffb      	ldrb	r3, [r7, #31]
 800fac2:	f023 0301 	bic.w	r3, r3, #1
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	bf14      	ite	ne
 800faca:	2301      	movne	r3, #1
 800facc:	2300      	moveq	r3, #0
 800face:	b2db      	uxtb	r3, r3
 800fad0:	461a      	mov	r2, r3
 800fad2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fad6:	4611      	mov	r1, r2
 800fad8:	4618      	mov	r0, r3
 800fada:	f7fc fe9b 	bl	800c814 <chk_lock>
 800fade:	4603      	mov	r3, r0
 800fae0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fae4:	7ffb      	ldrb	r3, [r7, #31]
 800fae6:	f003 031c 	and.w	r3, r3, #28
 800faea:	2b00      	cmp	r3, #0
 800faec:	f000 8117 	beq.w	800fd1e <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800faf0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d017      	beq.n	800fb28 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800faf8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fafc:	2b04      	cmp	r3, #4
 800fafe:	d10e      	bne.n	800fb1e <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb00:	f7fc fee4 	bl	800c8cc <enq_lock>
 800fb04:	4603      	mov	r3, r0
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d006      	beq.n	800fb18 <f_open+0xcc>
 800fb0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fb0e:	4618      	mov	r0, r3
 800fb10:	f7fe fece 	bl	800e8b0 <dir_register>
 800fb14:	4603      	mov	r3, r0
 800fb16:	e000      	b.n	800fb1a <f_open+0xce>
 800fb18:	2312      	movs	r3, #18
 800fb1a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb1e:	7ffb      	ldrb	r3, [r7, #31]
 800fb20:	f043 0308 	orr.w	r3, r3, #8
 800fb24:	77fb      	strb	r3, [r7, #31]
 800fb26:	e011      	b.n	800fb4c <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb28:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fb2c:	f003 0311 	and.w	r3, r3, #17
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d003      	beq.n	800fb3c <f_open+0xf0>
					res = FR_DENIED;
 800fb34:	2307      	movs	r3, #7
 800fb36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800fb3a:	e007      	b.n	800fb4c <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb3c:	7ffb      	ldrb	r3, [r7, #31]
 800fb3e:	f003 0304 	and.w	r3, r3, #4
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <f_open+0x100>
 800fb46:	2308      	movs	r3, #8
 800fb48:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb4c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	f040 8100 	bne.w	800fd56 <f_open+0x30a>
 800fb56:	7ffb      	ldrb	r3, [r7, #31]
 800fb58:	f003 0308 	and.w	r3, r3, #8
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	f000 80fa 	beq.w	800fd56 <f_open+0x30a>
				dw = GET_FATTIME();
 800fb62:	f7fc f9b9 	bl	800bed8 <get_fattime>
 800fb66:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800fb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	2b04      	cmp	r3, #4
 800fb70:	f040 8085 	bne.w	800fc7e <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800fb74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb78:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	695b      	ldr	r3, [r3, #20]
 800fb7e:	3334      	adds	r3, #52	; 0x34
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fc fbfb 	bl	800c37c <ld_dword>
 800fb86:	4602      	mov	r2, r0
 800fb88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb8a:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8e:	695b      	ldr	r3, [r3, #20]
 800fb90:	3338      	adds	r3, #56	; 0x38
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7fc fc15 	bl	800c3c2 <ld_qword>
 800fb98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fb9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba0:	695b      	ldr	r3, [r3, #20]
 800fba2:	3321      	adds	r3, #33	; 0x21
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	f003 0302 	and.w	r3, r3, #2
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbae:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800fbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800fbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb8:	695b      	ldr	r3, [r3, #20]
 800fbba:	3308      	adds	r3, #8
 800fbbc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fc fcf4 	bl	800c5ae <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	695b      	ldr	r3, [r3, #20]
 800fbca:	f103 0214 	add.w	r2, r3, #20
 800fbce:	2300      	movs	r3, #0
 800fbd0:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800fbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd4:	695b      	ldr	r3, [r3, #20]
 800fbd6:	330c      	adds	r3, #12
 800fbd8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fbdc:	4618      	mov	r0, r3
 800fbde:	f7fc fce6 	bl	800c5ae <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800fbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe4:	695b      	ldr	r3, [r3, #20]
 800fbe6:	f103 0215 	add.w	r2, r3, #21
 800fbea:	2300      	movs	r3, #0
 800fbec:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	695b      	ldr	r3, [r3, #20]
 800fbf2:	1d1a      	adds	r2, r3, #4
 800fbf4:	2320      	movs	r3, #32
 800fbf6:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800fbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	3334      	adds	r3, #52	; 0x34
 800fbfe:	2100      	movs	r1, #0
 800fc00:	4618      	mov	r0, r3
 800fc02:	f7fc fcd4 	bl	800c5ae <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800fc06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc08:	695b      	ldr	r3, [r3, #20]
 800fc0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fc0e:	f04f 0200 	mov.w	r2, #0
 800fc12:	f04f 0300 	mov.w	r3, #0
 800fc16:	4608      	mov	r0, r1
 800fc18:	f7fc fcf5 	bl	800c606 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800fc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1e:	695b      	ldr	r3, [r3, #20]
 800fc20:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800fc24:	f04f 0200 	mov.w	r2, #0
 800fc28:	f04f 0300 	mov.w	r3, #0
 800fc2c:	4608      	mov	r0, r1
 800fc2e:	f7fc fcea 	bl	800c606 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800fc3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7fe fb82 	bl	800e34c <store_xdir>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800fc4e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d17f      	bne.n	800fd56 <f_open+0x30a>
 800fc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc58:	689b      	ldr	r3, [r3, #8]
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d07b      	beq.n	800fd56 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800fc5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	2200      	movs	r2, #0
 800fc66:	4619      	mov	r1, r3
 800fc68:	f7fd fc14 	bl	800d494 <remove_chain>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	6193      	str	r3, [r2, #24]
 800fc7c:	e06b      	b.n	800fd56 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fc7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc80:	330e      	adds	r3, #14
 800fc82:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fc fc91 	bl	800c5ae <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc8e:	3316      	adds	r3, #22
 800fc90:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fc94:	4618      	mov	r0, r3
 800fc96:	f7fc fc8a 	bl	800c5ae <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fc9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc9c:	f103 020b 	add.w	r2, r3, #11
 800fca0:	2320      	movs	r3, #32
 800fca2:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fca6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fca8:	4619      	mov	r1, r3
 800fcaa:	4610      	mov	r0, r2
 800fcac:	f7fd ffc9 	bl	800dc42 <ld_clust>
 800fcb0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fcb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcb8:	2200      	movs	r2, #0
 800fcba:	4619      	mov	r1, r3
 800fcbc:	f7fd ffe0 	bl	800dc80 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fcc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fcc2:	331c      	adds	r3, #28
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fc fc71 	bl	800c5ae <st_dword>
					fs->wflag = 1;
 800fccc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcce:	2301      	movs	r3, #1
 800fcd0:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fcd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d03d      	beq.n	800fd56 <f_open+0x30a>
						dw = fs->winsect;
 800fcda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800fce2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fce6:	2200      	movs	r2, #0
 800fce8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7fd fbd1 	bl	800d494 <remove_chain>
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800fcf8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d12a      	bne.n	800fd56 <f_open+0x30a>
							res = move_window(fs, dw);
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7fc ff34 	bl	800cb74 <move_window>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd18:	3b01      	subs	r3, #1
 800fd1a:	6193      	str	r3, [r2, #24]
 800fd1c:	e01b      	b.n	800fd56 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fd1e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d117      	bne.n	800fd56 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fd26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd2a:	f003 0310 	and.w	r3, r3, #16
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d003      	beq.n	800fd3a <f_open+0x2ee>
					res = FR_NO_FILE;
 800fd32:	2304      	movs	r3, #4
 800fd34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800fd38:	e00d      	b.n	800fd56 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fd3a:	7ffb      	ldrb	r3, [r7, #31]
 800fd3c:	f003 0302 	and.w	r3, r3, #2
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d008      	beq.n	800fd56 <f_open+0x30a>
 800fd44:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d002      	beq.n	800fd56 <f_open+0x30a>
						res = FR_DENIED;
 800fd50:	2307      	movs	r3, #7
 800fd52:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fd56:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d128      	bne.n	800fdb0 <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fd5e:	7ffb      	ldrb	r3, [r7, #31]
 800fd60:	f003 0308 	and.w	r3, r3, #8
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d003      	beq.n	800fd70 <f_open+0x324>
				mode |= FA_MODIFIED;
 800fd68:	7ffb      	ldrb	r3, [r7, #31]
 800fd6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd6e:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800fd78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fd7e:	7ffb      	ldrb	r3, [r7, #31]
 800fd80:	f023 0301 	bic.w	r3, r3, #1
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	bf14      	ite	ne
 800fd88:	2301      	movne	r3, #1
 800fd8a:	2300      	moveq	r3, #0
 800fd8c:	b2db      	uxtb	r3, r3
 800fd8e:	461a      	mov	r2, r3
 800fd90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fd94:	4611      	mov	r1, r2
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7fc fdba 	bl	800c910 <inc_lock>
 800fd9c:	4602      	mov	r2, r0
 800fd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda0:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d102      	bne.n	800fdb0 <f_open+0x364>
 800fdaa:	2302      	movs	r3, #2
 800fdac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fdb0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f040 810e 	bne.w	800ffd6 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbc:	781b      	ldrb	r3, [r3, #0]
 800fdbe:	2b04      	cmp	r3, #4
 800fdc0:	d12d      	bne.n	800fe1e <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800fdc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800fdc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800fdcc:	4613      	mov	r3, r2
 800fdce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fdd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fdd6:	431a      	orrs	r2, r3
 800fdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdda:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800fddc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fde0:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	3334      	adds	r3, #52	; 0x34
 800fde8:	4618      	mov	r0, r3
 800fdea:	f7fc fac7 	bl	800c37c <ld_dword>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdf2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf6:	695b      	ldr	r3, [r3, #20]
 800fdf8:	3338      	adds	r3, #56	; 0x38
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fc fae1 	bl	800c3c2 <ld_qword>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe06:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fe0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0c:	695b      	ldr	r3, [r3, #20]
 800fe0e:	3321      	adds	r3, #33	; 0x21
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	f003 0302 	and.w	r3, r3, #2
 800fe16:	b2da      	uxtb	r2, r3
 800fe18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1a:	71da      	strb	r2, [r3, #7]
 800fe1c:	e016      	b.n	800fe4c <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fe1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe22:	4619      	mov	r1, r3
 800fe24:	4610      	mov	r0, r2
 800fe26:	f7fd ff0c 	bl	800dc42 <ld_clust>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fe30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe32:	331c      	adds	r3, #28
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7fc faa1 	bl	800c37c <ld_dword>
 800fe3a:	4603      	mov	r3, r0
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	613b      	str	r3, [r7, #16]
 800fe40:	617a      	str	r2, [r7, #20]
 800fe42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800fe48:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fe4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4e:	2200      	movs	r2, #0
 800fe50:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fe52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe56:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fe58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5a:	88da      	ldrh	r2, [r3, #6]
 800fe5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fe60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe62:	7ffa      	ldrb	r2, [r7, #31]
 800fe64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800fe68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	2200      	movs	r2, #0
 800fe74:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fe76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe78:	f04f 0200 	mov.w	r2, #0
 800fe7c:	f04f 0300 	mov.w	r3, #0
 800fe80:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe86:	3354      	adds	r3, #84	; 0x54
 800fe88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fc fc62 	bl	800c758 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fe94:	7ffb      	ldrb	r3, [r7, #31]
 800fe96:	f003 0320 	and.w	r3, r3, #32
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	f000 809b 	beq.w	800ffd6 <f_open+0x58a>
 800fea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fea6:	4313      	orrs	r3, r2
 800fea8:	f000 8095 	beq.w	800ffd6 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800feb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feb4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800feb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feba:	895b      	ldrh	r3, [r3, #10]
 800febc:	461a      	mov	r2, r3
 800febe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec0:	899b      	ldrh	r3, [r3, #12]
 800fec2:	fb02 f303 	mul.w	r3, r2, r3
 800fec6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	689b      	ldr	r3, [r3, #8]
 800fece:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fed8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800fedc:	e023      	b.n	800ff26 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800fede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fc ff03 	bl	800ccf0 <get_fat>
 800feea:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800feee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d802      	bhi.n	800fefc <f_open+0x4b0>
 800fef6:	2302      	movs	r3, #2
 800fef8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fefc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ff00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff04:	d102      	bne.n	800ff0c <f_open+0x4c0>
 800ff06:	2301      	movs	r3, #1
 800ff08:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ff0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff10:	2200      	movs	r2, #0
 800ff12:	4698      	mov	r8, r3
 800ff14:	4691      	mov	r9, r2
 800ff16:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ff1a:	ebb2 0a08 	subs.w	sl, r2, r8
 800ff1e:	eb63 0b09 	sbc.w	fp, r3, r9
 800ff22:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800ff26:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d10a      	bne.n	800ff44 <f_open+0x4f8>
 800ff2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff32:	2200      	movs	r2, #0
 800ff34:	461c      	mov	r4, r3
 800ff36:	4615      	mov	r5, r2
 800ff38:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ff3c:	4294      	cmp	r4, r2
 800ff3e:	eb75 0303 	sbcs.w	r3, r5, r3
 800ff42:	d3cc      	bcc.n	800fede <f_open+0x492>
				}
				fp->clust = clst;
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff4a:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ff4c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d140      	bne.n	800ffd6 <f_open+0x58a>
 800ff54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff56:	899b      	ldrh	r3, [r3, #12]
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	60bb      	str	r3, [r7, #8]
 800ff5e:	60fa      	str	r2, [r7, #12]
 800ff60:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ff64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ff68:	f7f0 fa0a 	bl	8000380 <__aeabi_uldivmod>
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	d032      	beq.n	800ffd6 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fc fe9a 	bl	800ccb0 <clust2sect>
 800ff7c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800ff80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d103      	bne.n	800ff90 <f_open+0x544>
						res = FR_INT_ERR;
 800ff88:	2302      	movs	r3, #2
 800ff8a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800ff8e:	e022      	b.n	800ffd6 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	899b      	ldrh	r3, [r3, #12]
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	2200      	movs	r2, #0
 800ff98:	603b      	str	r3, [r7, #0]
 800ff9a:	607a      	str	r2, [r7, #4]
 800ff9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ffa0:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800ffa4:	f7f0 f9ec 	bl	8000380 <__aeabi_uldivmod>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ffb0:	441a      	add	r2, r3
 800ffb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb4:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ffb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffb8:	7858      	ldrb	r0, [r3, #1]
 800ffba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ffc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f7fc f963 	bl	800c290 <disk_read>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d002      	beq.n	800ffd6 <f_open+0x58a>
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ffd6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d002      	beq.n	800ffe4 <f_open+0x598>
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ffe4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	37a0      	adds	r7, #160	; 0xa0
 800ffec:	46bd      	mov	sp, r7
 800ffee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800fff2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fff2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fff6:	b091      	sub	sp, #68	; 0x44
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	61f8      	str	r0, [r7, #28]
 800fffc:	61b9      	str	r1, [r7, #24]
 800fffe:	617a      	str	r2, [r7, #20]
 8010000:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2200      	movs	r2, #0
 801000a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801000c:	69fb      	ldr	r3, [r7, #28]
 801000e:	f107 0220 	add.w	r2, r7, #32
 8010012:	4611      	mov	r1, r2
 8010014:	4618      	mov	r0, r3
 8010016:	f7ff fc9d 	bl	800f954 <validate>
 801001a:	4603      	mov	r3, r0
 801001c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010020:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010024:	2b00      	cmp	r3, #0
 8010026:	d108      	bne.n	801003a <f_write+0x48>
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801002e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010032:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010036:	2b00      	cmp	r3, #0
 8010038:	d002      	beq.n	8010040 <f_write+0x4e>
 801003a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801003e:	e1aa      	b.n	8010396 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010046:	f003 0302 	and.w	r3, r3, #2
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <f_write+0x60>
 801004e:	2307      	movs	r3, #7
 8010050:	e1a1      	b.n	8010396 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010052:	6a3b      	ldr	r3, [r7, #32]
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	2b04      	cmp	r3, #4
 8010058:	f000 818d 	beq.w	8010376 <f_write+0x384>
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	18d1      	adds	r1, r2, r3
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801006c:	4613      	mov	r3, r2
 801006e:	4299      	cmp	r1, r3
 8010070:	f080 8181 	bcs.w	8010376 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801007a:	4613      	mov	r3, r2
 801007c:	43db      	mvns	r3, r3
 801007e:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010080:	e179      	b.n	8010376 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010088:	6a3b      	ldr	r3, [r7, #32]
 801008a:	899b      	ldrh	r3, [r3, #12]
 801008c:	b29b      	uxth	r3, r3
 801008e:	2200      	movs	r2, #0
 8010090:	461d      	mov	r5, r3
 8010092:	4616      	mov	r6, r2
 8010094:	462a      	mov	r2, r5
 8010096:	4633      	mov	r3, r6
 8010098:	f7f0 f972 	bl	8000380 <__aeabi_uldivmod>
 801009c:	4313      	orrs	r3, r2
 801009e:	f040 810a 	bne.w	80102b6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80100a8:	6a3b      	ldr	r3, [r7, #32]
 80100aa:	899b      	ldrh	r3, [r3, #12]
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	2200      	movs	r2, #0
 80100b0:	60bb      	str	r3, [r7, #8]
 80100b2:	60fa      	str	r2, [r7, #12]
 80100b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80100b8:	f7f0 f962 	bl	8000380 <__aeabi_uldivmod>
 80100bc:	4602      	mov	r2, r0
 80100be:	460b      	mov	r3, r1
 80100c0:	6a3b      	ldr	r3, [r7, #32]
 80100c2:	895b      	ldrh	r3, [r3, #10]
 80100c4:	3b01      	subs	r3, #1
 80100c6:	4013      	ands	r3, r2
 80100c8:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 80100ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d146      	bne.n	801015e <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80100d0:	69fb      	ldr	r3, [r7, #28]
 80100d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80100d6:	4313      	orrs	r3, r2
 80100d8:	d10c      	bne.n	80100f4 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	689b      	ldr	r3, [r3, #8]
 80100de:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 80100e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d11a      	bne.n	801011c <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80100e6:	69fb      	ldr	r3, [r7, #28]
 80100e8:	2100      	movs	r1, #0
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7fd fa86 	bl	800d5fc <create_chain>
 80100f0:	63b8      	str	r0, [r7, #56]	; 0x38
 80100f2:	e013      	b.n	801011c <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80100f4:	69fb      	ldr	r3, [r7, #28]
 80100f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d007      	beq.n	801010c <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010102:	69f8      	ldr	r0, [r7, #28]
 8010104:	f7fd fb7b 	bl	800d7fe <clmt_clust>
 8010108:	63b8      	str	r0, [r7, #56]	; 0x38
 801010a:	e007      	b.n	801011c <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801010c:	69fa      	ldr	r2, [r7, #28]
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010112:	4619      	mov	r1, r3
 8010114:	4610      	mov	r0, r2
 8010116:	f7fd fa71 	bl	800d5fc <create_chain>
 801011a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801011c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011e:	2b00      	cmp	r3, #0
 8010120:	f000 812e 	beq.w	8010380 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	2b01      	cmp	r3, #1
 8010128:	d105      	bne.n	8010136 <f_write+0x144>
 801012a:	69fb      	ldr	r3, [r7, #28]
 801012c:	2202      	movs	r2, #2
 801012e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010132:	2302      	movs	r3, #2
 8010134:	e12f      	b.n	8010396 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013c:	d105      	bne.n	801014a <f_write+0x158>
 801013e:	69fb      	ldr	r3, [r7, #28]
 8010140:	2201      	movs	r2, #1
 8010142:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010146:	2301      	movs	r3, #1
 8010148:	e125      	b.n	8010396 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 801014a:	69fb      	ldr	r3, [r7, #28]
 801014c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801014e:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d102      	bne.n	801015e <f_write+0x16c>
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801015c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801015e:	69fb      	ldr	r3, [r7, #28]
 8010160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010164:	b25b      	sxtb	r3, r3
 8010166:	2b00      	cmp	r3, #0
 8010168:	da1b      	bge.n	80101a2 <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801016a:	6a3b      	ldr	r3, [r7, #32]
 801016c:	7858      	ldrb	r0, [r3, #1]
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010174:	69fb      	ldr	r3, [r7, #28]
 8010176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010178:	2301      	movs	r3, #1
 801017a:	f7fc f8a9 	bl	800c2d0 <disk_write>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d005      	beq.n	8010190 <f_write+0x19e>
 8010184:	69fb      	ldr	r3, [r7, #28]
 8010186:	2201      	movs	r2, #1
 8010188:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801018c:	2301      	movs	r3, #1
 801018e:	e102      	b.n	8010396 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010190:	69fb      	ldr	r3, [r7, #28]
 8010192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801019a:	b2da      	uxtb	r2, r3
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80101a2:	6a3a      	ldr	r2, [r7, #32]
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101a8:	4619      	mov	r1, r3
 80101aa:	4610      	mov	r0, r2
 80101ac:	f7fc fd80 	bl	800ccb0 <clust2sect>
 80101b0:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 80101b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d105      	bne.n	80101c4 <f_write+0x1d2>
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	2202      	movs	r2, #2
 80101bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80101c0:	2302      	movs	r3, #2
 80101c2:	e0e8      	b.n	8010396 <f_write+0x3a4>
			sect += csect;
 80101c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c8:	4413      	add	r3, r2
 80101ca:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80101cc:	6a3b      	ldr	r3, [r7, #32]
 80101ce:	899b      	ldrh	r3, [r3, #12]
 80101d0:	461a      	mov	r2, r3
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80101d8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 80101da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d046      	beq.n	801026e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80101e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	4413      	add	r3, r2
 80101e6:	6a3a      	ldr	r2, [r7, #32]
 80101e8:	8952      	ldrh	r2, [r2, #10]
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d905      	bls.n	80101fa <f_write+0x208>
					cc = fs->csize - csect;
 80101ee:	6a3b      	ldr	r3, [r7, #32]
 80101f0:	895b      	ldrh	r3, [r3, #10]
 80101f2:	461a      	mov	r2, r3
 80101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80101fa:	6a3b      	ldr	r3, [r7, #32]
 80101fc:	7858      	ldrb	r0, [r3, #1]
 80101fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010204:	f7fc f864 	bl	800c2d0 <disk_write>
 8010208:	4603      	mov	r3, r0
 801020a:	2b00      	cmp	r3, #0
 801020c:	d005      	beq.n	801021a <f_write+0x228>
 801020e:	69fb      	ldr	r3, [r7, #28]
 8010210:	2201      	movs	r2, #1
 8010212:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010216:	2301      	movs	r3, #1
 8010218:	e0bd      	b.n	8010396 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801021a:	69fb      	ldr	r3, [r7, #28]
 801021c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801021e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010220:	1ad3      	subs	r3, r2, r3
 8010222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010224:	429a      	cmp	r2, r3
 8010226:	d91a      	bls.n	801025e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	6a3a      	ldr	r2, [r7, #32]
 8010238:	8992      	ldrh	r2, [r2, #12]
 801023a:	fb02 f303 	mul.w	r3, r2, r3
 801023e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010240:	18d1      	adds	r1, r2, r3
 8010242:	6a3b      	ldr	r3, [r7, #32]
 8010244:	899b      	ldrh	r3, [r3, #12]
 8010246:	461a      	mov	r2, r3
 8010248:	f7fc fa65 	bl	800c716 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010256:	b2da      	uxtb	r2, r3
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	899b      	ldrh	r3, [r3, #12]
 8010262:	461a      	mov	r2, r3
 8010264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010266:	fb02 f303 	mul.w	r3, r2, r3
 801026a:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 801026c:	e058      	b.n	8010320 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010274:	429a      	cmp	r2, r3
 8010276:	d01b      	beq.n	80102b0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8010278:	69fb      	ldr	r3, [r7, #28]
 801027a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010284:	4290      	cmp	r0, r2
 8010286:	eb71 0303 	sbcs.w	r3, r1, r3
 801028a:	d211      	bcs.n	80102b0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801028c:	6a3b      	ldr	r3, [r7, #32]
 801028e:	7858      	ldrb	r0, [r3, #1]
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010296:	2301      	movs	r3, #1
 8010298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801029a:	f7fb fff9 	bl	800c290 <disk_read>
 801029e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d005      	beq.n	80102b0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	2201      	movs	r2, #1
 80102a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80102ac:	2301      	movs	r3, #1
 80102ae:	e072      	b.n	8010396 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102b4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	899b      	ldrh	r3, [r3, #12]
 80102ba:	4618      	mov	r0, r3
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80102c2:	6a3b      	ldr	r3, [r7, #32]
 80102c4:	899b      	ldrh	r3, [r3, #12]
 80102c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80102ca:	fb01 f303 	mul.w	r3, r1, r3
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	1ac3      	subs	r3, r0, r3
 80102d2:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80102d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102d6:	697b      	ldr	r3, [r7, #20]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d901      	bls.n	80102e0 <f_write+0x2ee>
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	f103 0454 	add.w	r4, r3, #84	; 0x54
 80102e6:	69fb      	ldr	r3, [r7, #28]
 80102e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80102ec:	6a3b      	ldr	r3, [r7, #32]
 80102ee:	899b      	ldrh	r3, [r3, #12]
 80102f0:	b29b      	uxth	r3, r3
 80102f2:	2200      	movs	r2, #0
 80102f4:	603b      	str	r3, [r7, #0]
 80102f6:	607a      	str	r2, [r7, #4]
 80102f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80102fc:	f7f0 f840 	bl	8000380 <__aeabi_uldivmod>
 8010300:	4613      	mov	r3, r2
 8010302:	4423      	add	r3, r4
 8010304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010306:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010308:	4618      	mov	r0, r3
 801030a:	f7fc fa04 	bl	800c716 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010314:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010318:	b2da      	uxtb	r2, r3
 801031a:	69fb      	ldr	r3, [r7, #28]
 801031c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010320:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010324:	4413      	add	r3, r2
 8010326:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010328:	69fb      	ldr	r3, [r7, #28]
 801032a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801032e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010330:	2000      	movs	r0, #0
 8010332:	4688      	mov	r8, r1
 8010334:	4681      	mov	r9, r0
 8010336:	eb12 0a08 	adds.w	sl, r2, r8
 801033a:	eb43 0b09 	adc.w	fp, r3, r9
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8010344:	69fb      	ldr	r3, [r7, #28]
 8010346:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010350:	4290      	cmp	r0, r2
 8010352:	eb71 0403 	sbcs.w	r4, r1, r3
 8010356:	d201      	bcs.n	801035c <f_write+0x36a>
 8010358:	4610      	mov	r0, r2
 801035a:	4619      	mov	r1, r3
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010368:	441a      	add	r2, r3
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	697a      	ldr	r2, [r7, #20]
 8010370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010372:	1ad3      	subs	r3, r2, r3
 8010374:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	2b00      	cmp	r3, #0
 801037a:	f47f ae82 	bne.w	8010082 <f_write+0x90>
 801037e:	e000      	b.n	8010382 <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010380:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010382:	69fb      	ldr	r3, [r7, #28]
 8010384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801038c:	b2da      	uxtb	r2, r3
 801038e:	69fb      	ldr	r3, [r7, #28]
 8010390:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8010394:	2300      	movs	r3, #0
}
 8010396:	4618      	mov	r0, r3
 8010398:	3744      	adds	r7, #68	; 0x44
 801039a:	46bd      	mov	sp, r7
 801039c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080103a0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b09a      	sub	sp, #104	; 0x68
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80103ae:	4611      	mov	r1, r2
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7ff facf 	bl	800f954 <validate>
 80103b6:	4603      	mov	r3, r0
 80103b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80103bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f040 8105 	bne.w	80105d0 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	f000 80fd 	beq.w	80105d0 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80103dc:	b25b      	sxtb	r3, r3
 80103de:	2b00      	cmp	r3, #0
 80103e0:	da17      	bge.n	8010412 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80103e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103e4:	7858      	ldrb	r0, [r3, #1]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80103f0:	2301      	movs	r3, #1
 80103f2:	f7fb ff6d 	bl	800c2d0 <disk_write>
 80103f6:	4603      	mov	r3, r0
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d001      	beq.n	8010400 <f_sync+0x60>
 80103fc:	2301      	movs	r3, #1
 80103fe:	e0e9      	b.n	80105d4 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801040a:	b2da      	uxtb	r2, r3
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010412:	f7fb fd61 	bl	800bed8 <get_fattime>
 8010416:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010418:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	2b04      	cmp	r3, #4
 801041e:	f040 808c 	bne.w	801053a <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	4618      	mov	r0, r3
 8010426:	f7fc ffd5 	bl	800d3d4 <fill_first_frag>
 801042a:	4603      	mov	r3, r0
 801042c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8010430:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010434:	2b00      	cmp	r3, #0
 8010436:	d10a      	bne.n	801044e <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801043e:	f04f 32ff 	mov.w	r2, #4294967295
 8010442:	4619      	mov	r1, r3
 8010444:	f7fc fff5 	bl	800d432 <fill_last_frag>
 8010448:	4603      	mov	r3, r0
 801044a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 801044e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010452:	2b00      	cmp	r3, #0
 8010454:	f040 80bc 	bne.w	80105d0 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	f107 0308 	add.w	r3, r7, #8
 801045e:	4611      	mov	r1, r2
 8010460:	4618      	mov	r0, r3
 8010462:	f7fd ff3d 	bl	800e2e0 <load_obj_dir>
 8010466:	4603      	mov	r3, r0
 8010468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 801046c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010470:	2b00      	cmp	r3, #0
 8010472:	f040 80ad 	bne.w	80105d0 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8010476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010478:	695b      	ldr	r3, [r3, #20]
 801047a:	3304      	adds	r3, #4
 801047c:	781a      	ldrb	r2, [r3, #0]
 801047e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010480:	695b      	ldr	r3, [r3, #20]
 8010482:	3304      	adds	r3, #4
 8010484:	f042 0220 	orr.w	r2, r2, #32
 8010488:	b2d2      	uxtb	r2, r2
 801048a:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	79da      	ldrb	r2, [r3, #7]
 8010490:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010492:	695b      	ldr	r3, [r3, #20]
 8010494:	3321      	adds	r3, #33	; 0x21
 8010496:	f042 0201 	orr.w	r2, r2, #1
 801049a:	b2d2      	uxtb	r2, r2
 801049c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801049e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104a0:	695b      	ldr	r3, [r3, #20]
 80104a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	689b      	ldr	r3, [r3, #8]
 80104aa:	4619      	mov	r1, r3
 80104ac:	4610      	mov	r0, r2
 80104ae:	f7fc f87e 	bl	800c5ae <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80104b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104b4:	695b      	ldr	r3, [r3, #20]
 80104b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80104c0:	4608      	mov	r0, r1
 80104c2:	f7fc f8a0 	bl	800c606 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80104c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104c8:	695b      	ldr	r3, [r3, #20]
 80104ca:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80104d4:	4608      	mov	r0, r1
 80104d6:	f7fc f896 	bl	800c606 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 80104da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104dc:	695b      	ldr	r3, [r3, #20]
 80104de:	330c      	adds	r3, #12
 80104e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fc f863 	bl	800c5ae <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 80104e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ea:	695b      	ldr	r3, [r3, #20]
 80104ec:	3315      	adds	r3, #21
 80104ee:	2200      	movs	r2, #0
 80104f0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 80104f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104f4:	695b      	ldr	r3, [r3, #20]
 80104f6:	3310      	adds	r3, #16
 80104f8:	2100      	movs	r1, #0
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7fc f857 	bl	800c5ae <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8010500:	f107 0308 	add.w	r3, r7, #8
 8010504:	4618      	mov	r0, r3
 8010506:	f7fd ff21 	bl	800e34c <store_xdir>
 801050a:	4603      	mov	r3, r0
 801050c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8010510:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010514:	2b00      	cmp	r3, #0
 8010516:	d15b      	bne.n	80105d0 <f_sync+0x230>
							res = sync_fs(fs);
 8010518:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801051a:	4618      	mov	r0, r3
 801051c:	f7fc fb58 	bl	800cbd0 <sync_fs>
 8010520:	4603      	mov	r3, r0
 8010522:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801052c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010530:	b2da      	uxtb	r2, r3
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010538:	e04a      	b.n	80105d0 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801053a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010540:	4619      	mov	r1, r3
 8010542:	4610      	mov	r0, r2
 8010544:	f7fc fb16 	bl	800cb74 <move_window>
 8010548:	4603      	mov	r3, r0
 801054a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 801054e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010552:	2b00      	cmp	r3, #0
 8010554:	d13c      	bne.n	80105d0 <f_sync+0x230>
					dir = fp->dir_ptr;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801055a:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801055c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801055e:	330b      	adds	r3, #11
 8010560:	781a      	ldrb	r2, [r3, #0]
 8010562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010564:	330b      	adds	r3, #11
 8010566:	f042 0220 	orr.w	r2, r2, #32
 801056a:	b2d2      	uxtb	r2, r2
 801056c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6818      	ldr	r0, [r3, #0]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	461a      	mov	r2, r3
 8010578:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801057a:	f7fd fb81 	bl	800dc80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801057e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010580:	f103 001c 	add.w	r0, r3, #28
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801058a:	4613      	mov	r3, r2
 801058c:	4619      	mov	r1, r3
 801058e:	f7fc f80e 	bl	800c5ae <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010594:	3316      	adds	r3, #22
 8010596:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010598:	4618      	mov	r0, r3
 801059a:	f7fc f808 	bl	800c5ae <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801059e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105a0:	3312      	adds	r3, #18
 80105a2:	2100      	movs	r1, #0
 80105a4:	4618      	mov	r0, r3
 80105a6:	f7fb ffe7 	bl	800c578 <st_word>
					fs->wflag = 1;
 80105aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105ac:	2201      	movs	r2, #1
 80105ae:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80105b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7fc fb0c 	bl	800cbd0 <sync_fs>
 80105b8:	4603      	mov	r3, r0
 80105ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80105c8:	b2da      	uxtb	r2, r3
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80105d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3768      	adds	r7, #104	; 0x68
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b084      	sub	sp, #16
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80105e4:	6878      	ldr	r0, [r7, #4]
 80105e6:	f7ff fedb 	bl	80103a0 <f_sync>
 80105ea:	4603      	mov	r3, r0
 80105ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80105ee:	7bfb      	ldrb	r3, [r7, #15]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d118      	bne.n	8010626 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	f107 0208 	add.w	r2, r7, #8
 80105fa:	4611      	mov	r1, r2
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff f9a9 	bl	800f954 <validate>
 8010602:	4603      	mov	r3, r0
 8010604:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010606:	7bfb      	ldrb	r3, [r7, #15]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d10c      	bne.n	8010626 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010610:	4618      	mov	r0, r3
 8010612:	f7fc fa0b 	bl	800ca2c <dec_lock>
 8010616:	4603      	mov	r3, r0
 8010618:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801061a:	7bfb      	ldrb	r3, [r7, #15]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d102      	bne.n	8010626 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010626:	7bfb      	ldrb	r3, [r7, #15]
}
 8010628:	4618      	mov	r0, r3
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}

08010630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010630:	b480      	push	{r7}
 8010632:	b087      	sub	sp, #28
 8010634:	af00      	add	r7, sp, #0
 8010636:	60f8      	str	r0, [r7, #12]
 8010638:	60b9      	str	r1, [r7, #8]
 801063a:	4613      	mov	r3, r2
 801063c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801063e:	2301      	movs	r3, #1
 8010640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010642:	2300      	movs	r3, #0
 8010644:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010646:	4b1f      	ldr	r3, [pc, #124]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010648:	7a5b      	ldrb	r3, [r3, #9]
 801064a:	b2db      	uxtb	r3, r3
 801064c:	2b00      	cmp	r3, #0
 801064e:	d131      	bne.n	80106b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010650:	4b1c      	ldr	r3, [pc, #112]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010652:	7a5b      	ldrb	r3, [r3, #9]
 8010654:	b2db      	uxtb	r3, r3
 8010656:	461a      	mov	r2, r3
 8010658:	4b1a      	ldr	r3, [pc, #104]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 801065a:	2100      	movs	r1, #0
 801065c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801065e:	4b19      	ldr	r3, [pc, #100]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010660:	7a5b      	ldrb	r3, [r3, #9]
 8010662:	b2db      	uxtb	r3, r3
 8010664:	4a17      	ldr	r2, [pc, #92]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	4413      	add	r3, r2
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801066e:	4b15      	ldr	r3, [pc, #84]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010670:	7a5b      	ldrb	r3, [r3, #9]
 8010672:	b2db      	uxtb	r3, r3
 8010674:	461a      	mov	r2, r3
 8010676:	4b13      	ldr	r3, [pc, #76]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010678:	4413      	add	r3, r2
 801067a:	79fa      	ldrb	r2, [r7, #7]
 801067c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801067e:	4b11      	ldr	r3, [pc, #68]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 8010680:	7a5b      	ldrb	r3, [r3, #9]
 8010682:	b2db      	uxtb	r3, r3
 8010684:	1c5a      	adds	r2, r3, #1
 8010686:	b2d1      	uxtb	r1, r2
 8010688:	4a0e      	ldr	r2, [pc, #56]	; (80106c4 <FATFS_LinkDriverEx+0x94>)
 801068a:	7251      	strb	r1, [r2, #9]
 801068c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801068e:	7dbb      	ldrb	r3, [r7, #22]
 8010690:	3330      	adds	r3, #48	; 0x30
 8010692:	b2da      	uxtb	r2, r3
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010698:	68bb      	ldr	r3, [r7, #8]
 801069a:	3301      	adds	r3, #1
 801069c:	223a      	movs	r2, #58	; 0x3a
 801069e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	3302      	adds	r3, #2
 80106a4:	222f      	movs	r2, #47	; 0x2f
 80106a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80106a8:	68bb      	ldr	r3, [r7, #8]
 80106aa:	3303      	adds	r3, #3
 80106ac:	2200      	movs	r2, #0
 80106ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80106b0:	2300      	movs	r3, #0
 80106b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80106b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	371c      	adds	r7, #28
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr
 80106c2:	bf00      	nop
 80106c4:	240027d8 	.word	0x240027d8

080106c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80106d2:	2200      	movs	r2, #0
 80106d4:	6839      	ldr	r1, [r7, #0]
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f7ff ffaa 	bl	8010630 <FATFS_LinkDriverEx>
 80106dc:	4603      	mov	r3, r0
}
 80106de:	4618      	mov	r0, r3
 80106e0:	3708      	adds	r7, #8
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
	...

080106e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	6039      	str	r1, [r7, #0]
 80106f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80106f4:	88fb      	ldrh	r3, [r7, #6]
 80106f6:	2b7f      	cmp	r3, #127	; 0x7f
 80106f8:	d802      	bhi.n	8010700 <ff_convert+0x18>
		c = chr;
 80106fa:	88fb      	ldrh	r3, [r7, #6]
 80106fc:	81fb      	strh	r3, [r7, #14]
 80106fe:	e025      	b.n	801074c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d00b      	beq.n	801071e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010706:	88fb      	ldrh	r3, [r7, #6]
 8010708:	2bff      	cmp	r3, #255	; 0xff
 801070a:	d805      	bhi.n	8010718 <ff_convert+0x30>
 801070c:	88fb      	ldrh	r3, [r7, #6]
 801070e:	3b80      	subs	r3, #128	; 0x80
 8010710:	4a12      	ldr	r2, [pc, #72]	; (801075c <ff_convert+0x74>)
 8010712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010716:	e000      	b.n	801071a <ff_convert+0x32>
 8010718:	2300      	movs	r3, #0
 801071a:	81fb      	strh	r3, [r7, #14]
 801071c:	e016      	b.n	801074c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801071e:	2300      	movs	r3, #0
 8010720:	81fb      	strh	r3, [r7, #14]
 8010722:	e009      	b.n	8010738 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010724:	89fb      	ldrh	r3, [r7, #14]
 8010726:	4a0d      	ldr	r2, [pc, #52]	; (801075c <ff_convert+0x74>)
 8010728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801072c:	88fa      	ldrh	r2, [r7, #6]
 801072e:	429a      	cmp	r2, r3
 8010730:	d006      	beq.n	8010740 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010732:	89fb      	ldrh	r3, [r7, #14]
 8010734:	3301      	adds	r3, #1
 8010736:	81fb      	strh	r3, [r7, #14]
 8010738:	89fb      	ldrh	r3, [r7, #14]
 801073a:	2b7f      	cmp	r3, #127	; 0x7f
 801073c:	d9f2      	bls.n	8010724 <ff_convert+0x3c>
 801073e:	e000      	b.n	8010742 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010740:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010742:	89fb      	ldrh	r3, [r7, #14]
 8010744:	3380      	adds	r3, #128	; 0x80
 8010746:	b29b      	uxth	r3, r3
 8010748:	b2db      	uxtb	r3, r3
 801074a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801074c:	89fb      	ldrh	r3, [r7, #14]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr
 801075a:	bf00      	nop
 801075c:	08011e78 	.word	0x08011e78

08010760 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010760:	b480      	push	{r7}
 8010762:	b087      	sub	sp, #28
 8010764:	af00      	add	r7, sp, #0
 8010766:	4603      	mov	r3, r0
 8010768:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801076a:	88fb      	ldrh	r3, [r7, #6]
 801076c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010770:	d201      	bcs.n	8010776 <ff_wtoupper+0x16>
 8010772:	4b3e      	ldr	r3, [pc, #248]	; (801086c <ff_wtoupper+0x10c>)
 8010774:	e000      	b.n	8010778 <ff_wtoupper+0x18>
 8010776:	4b3e      	ldr	r3, [pc, #248]	; (8010870 <ff_wtoupper+0x110>)
 8010778:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	1c9a      	adds	r2, r3, #2
 801077e:	617a      	str	r2, [r7, #20]
 8010780:	881b      	ldrh	r3, [r3, #0]
 8010782:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010784:	8a7b      	ldrh	r3, [r7, #18]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d068      	beq.n	801085c <ff_wtoupper+0xfc>
 801078a:	88fa      	ldrh	r2, [r7, #6]
 801078c:	8a7b      	ldrh	r3, [r7, #18]
 801078e:	429a      	cmp	r2, r3
 8010790:	d364      	bcc.n	801085c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	1c9a      	adds	r2, r3, #2
 8010796:	617a      	str	r2, [r7, #20]
 8010798:	881b      	ldrh	r3, [r3, #0]
 801079a:	823b      	strh	r3, [r7, #16]
 801079c:	8a3b      	ldrh	r3, [r7, #16]
 801079e:	0a1b      	lsrs	r3, r3, #8
 80107a0:	81fb      	strh	r3, [r7, #14]
 80107a2:	8a3b      	ldrh	r3, [r7, #16]
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80107a8:	88fa      	ldrh	r2, [r7, #6]
 80107aa:	8a79      	ldrh	r1, [r7, #18]
 80107ac:	8a3b      	ldrh	r3, [r7, #16]
 80107ae:	440b      	add	r3, r1
 80107b0:	429a      	cmp	r2, r3
 80107b2:	da49      	bge.n	8010848 <ff_wtoupper+0xe8>
			switch (cmd) {
 80107b4:	89fb      	ldrh	r3, [r7, #14]
 80107b6:	2b08      	cmp	r3, #8
 80107b8:	d84f      	bhi.n	801085a <ff_wtoupper+0xfa>
 80107ba:	a201      	add	r2, pc, #4	; (adr r2, 80107c0 <ff_wtoupper+0x60>)
 80107bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107c0:	080107e5 	.word	0x080107e5
 80107c4:	080107f7 	.word	0x080107f7
 80107c8:	0801080d 	.word	0x0801080d
 80107cc:	08010815 	.word	0x08010815
 80107d0:	0801081d 	.word	0x0801081d
 80107d4:	08010825 	.word	0x08010825
 80107d8:	0801082d 	.word	0x0801082d
 80107dc:	08010835 	.word	0x08010835
 80107e0:	0801083d 	.word	0x0801083d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80107e4:	88fa      	ldrh	r2, [r7, #6]
 80107e6:	8a7b      	ldrh	r3, [r7, #18]
 80107e8:	1ad3      	subs	r3, r2, r3
 80107ea:	005b      	lsls	r3, r3, #1
 80107ec:	697a      	ldr	r2, [r7, #20]
 80107ee:	4413      	add	r3, r2
 80107f0:	881b      	ldrh	r3, [r3, #0]
 80107f2:	80fb      	strh	r3, [r7, #6]
 80107f4:	e027      	b.n	8010846 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80107f6:	88fa      	ldrh	r2, [r7, #6]
 80107f8:	8a7b      	ldrh	r3, [r7, #18]
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	b29b      	uxth	r3, r3
 80107fe:	f003 0301 	and.w	r3, r3, #1
 8010802:	b29b      	uxth	r3, r3
 8010804:	88fa      	ldrh	r2, [r7, #6]
 8010806:	1ad3      	subs	r3, r2, r3
 8010808:	80fb      	strh	r3, [r7, #6]
 801080a:	e01c      	b.n	8010846 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801080c:	88fb      	ldrh	r3, [r7, #6]
 801080e:	3b10      	subs	r3, #16
 8010810:	80fb      	strh	r3, [r7, #6]
 8010812:	e018      	b.n	8010846 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010814:	88fb      	ldrh	r3, [r7, #6]
 8010816:	3b20      	subs	r3, #32
 8010818:	80fb      	strh	r3, [r7, #6]
 801081a:	e014      	b.n	8010846 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801081c:	88fb      	ldrh	r3, [r7, #6]
 801081e:	3b30      	subs	r3, #48	; 0x30
 8010820:	80fb      	strh	r3, [r7, #6]
 8010822:	e010      	b.n	8010846 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010824:	88fb      	ldrh	r3, [r7, #6]
 8010826:	3b1a      	subs	r3, #26
 8010828:	80fb      	strh	r3, [r7, #6]
 801082a:	e00c      	b.n	8010846 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801082c:	88fb      	ldrh	r3, [r7, #6]
 801082e:	3308      	adds	r3, #8
 8010830:	80fb      	strh	r3, [r7, #6]
 8010832:	e008      	b.n	8010846 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010834:	88fb      	ldrh	r3, [r7, #6]
 8010836:	3b50      	subs	r3, #80	; 0x50
 8010838:	80fb      	strh	r3, [r7, #6]
 801083a:	e004      	b.n	8010846 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801083c:	88fb      	ldrh	r3, [r7, #6]
 801083e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010842:	80fb      	strh	r3, [r7, #6]
 8010844:	bf00      	nop
			}
			break;
 8010846:	e008      	b.n	801085a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010848:	89fb      	ldrh	r3, [r7, #14]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d195      	bne.n	801077a <ff_wtoupper+0x1a>
 801084e:	8a3b      	ldrh	r3, [r7, #16]
 8010850:	005b      	lsls	r3, r3, #1
 8010852:	697a      	ldr	r2, [r7, #20]
 8010854:	4413      	add	r3, r2
 8010856:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010858:	e78f      	b.n	801077a <ff_wtoupper+0x1a>
			break;
 801085a:	bf00      	nop
	}

	return chr;
 801085c:	88fb      	ldrh	r3, [r7, #6]
}
 801085e:	4618      	mov	r0, r3
 8010860:	371c      	adds	r7, #28
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	08011f78 	.word	0x08011f78
 8010870:	0801216c 	.word	0x0801216c

08010874 <__errno>:
 8010874:	4b01      	ldr	r3, [pc, #4]	; (801087c <__errno+0x8>)
 8010876:	6818      	ldr	r0, [r3, #0]
 8010878:	4770      	bx	lr
 801087a:	bf00      	nop
 801087c:	24000010 	.word	0x24000010

08010880 <__libc_init_array>:
 8010880:	b570      	push	{r4, r5, r6, lr}
 8010882:	4d0d      	ldr	r5, [pc, #52]	; (80108b8 <__libc_init_array+0x38>)
 8010884:	4c0d      	ldr	r4, [pc, #52]	; (80108bc <__libc_init_array+0x3c>)
 8010886:	1b64      	subs	r4, r4, r5
 8010888:	10a4      	asrs	r4, r4, #2
 801088a:	2600      	movs	r6, #0
 801088c:	42a6      	cmp	r6, r4
 801088e:	d109      	bne.n	80108a4 <__libc_init_array+0x24>
 8010890:	4d0b      	ldr	r5, [pc, #44]	; (80108c0 <__libc_init_array+0x40>)
 8010892:	4c0c      	ldr	r4, [pc, #48]	; (80108c4 <__libc_init_array+0x44>)
 8010894:	f001 fa00 	bl	8011c98 <_init>
 8010898:	1b64      	subs	r4, r4, r5
 801089a:	10a4      	asrs	r4, r4, #2
 801089c:	2600      	movs	r6, #0
 801089e:	42a6      	cmp	r6, r4
 80108a0:	d105      	bne.n	80108ae <__libc_init_array+0x2e>
 80108a2:	bd70      	pop	{r4, r5, r6, pc}
 80108a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80108a8:	4798      	blx	r3
 80108aa:	3601      	adds	r6, #1
 80108ac:	e7ee      	b.n	801088c <__libc_init_array+0xc>
 80108ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80108b2:	4798      	blx	r3
 80108b4:	3601      	adds	r6, #1
 80108b6:	e7f2      	b.n	801089e <__libc_init_array+0x1e>
 80108b8:	080122c8 	.word	0x080122c8
 80108bc:	080122c8 	.word	0x080122c8
 80108c0:	080122c8 	.word	0x080122c8
 80108c4:	080122cc 	.word	0x080122cc

080108c8 <memset>:
 80108c8:	4402      	add	r2, r0
 80108ca:	4603      	mov	r3, r0
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d100      	bne.n	80108d2 <memset+0xa>
 80108d0:	4770      	bx	lr
 80108d2:	f803 1b01 	strb.w	r1, [r3], #1
 80108d6:	e7f9      	b.n	80108cc <memset+0x4>

080108d8 <_free_r>:
 80108d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108da:	2900      	cmp	r1, #0
 80108dc:	d044      	beq.n	8010968 <_free_r+0x90>
 80108de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108e2:	9001      	str	r0, [sp, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	f1a1 0404 	sub.w	r4, r1, #4
 80108ea:	bfb8      	it	lt
 80108ec:	18e4      	addlt	r4, r4, r3
 80108ee:	f000 fc71 	bl	80111d4 <__malloc_lock>
 80108f2:	4a1e      	ldr	r2, [pc, #120]	; (801096c <_free_r+0x94>)
 80108f4:	9801      	ldr	r0, [sp, #4]
 80108f6:	6813      	ldr	r3, [r2, #0]
 80108f8:	b933      	cbnz	r3, 8010908 <_free_r+0x30>
 80108fa:	6063      	str	r3, [r4, #4]
 80108fc:	6014      	str	r4, [r2, #0]
 80108fe:	b003      	add	sp, #12
 8010900:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010904:	f000 bc6c 	b.w	80111e0 <__malloc_unlock>
 8010908:	42a3      	cmp	r3, r4
 801090a:	d908      	bls.n	801091e <_free_r+0x46>
 801090c:	6825      	ldr	r5, [r4, #0]
 801090e:	1961      	adds	r1, r4, r5
 8010910:	428b      	cmp	r3, r1
 8010912:	bf01      	itttt	eq
 8010914:	6819      	ldreq	r1, [r3, #0]
 8010916:	685b      	ldreq	r3, [r3, #4]
 8010918:	1949      	addeq	r1, r1, r5
 801091a:	6021      	streq	r1, [r4, #0]
 801091c:	e7ed      	b.n	80108fa <_free_r+0x22>
 801091e:	461a      	mov	r2, r3
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	b10b      	cbz	r3, 8010928 <_free_r+0x50>
 8010924:	42a3      	cmp	r3, r4
 8010926:	d9fa      	bls.n	801091e <_free_r+0x46>
 8010928:	6811      	ldr	r1, [r2, #0]
 801092a:	1855      	adds	r5, r2, r1
 801092c:	42a5      	cmp	r5, r4
 801092e:	d10b      	bne.n	8010948 <_free_r+0x70>
 8010930:	6824      	ldr	r4, [r4, #0]
 8010932:	4421      	add	r1, r4
 8010934:	1854      	adds	r4, r2, r1
 8010936:	42a3      	cmp	r3, r4
 8010938:	6011      	str	r1, [r2, #0]
 801093a:	d1e0      	bne.n	80108fe <_free_r+0x26>
 801093c:	681c      	ldr	r4, [r3, #0]
 801093e:	685b      	ldr	r3, [r3, #4]
 8010940:	6053      	str	r3, [r2, #4]
 8010942:	4421      	add	r1, r4
 8010944:	6011      	str	r1, [r2, #0]
 8010946:	e7da      	b.n	80108fe <_free_r+0x26>
 8010948:	d902      	bls.n	8010950 <_free_r+0x78>
 801094a:	230c      	movs	r3, #12
 801094c:	6003      	str	r3, [r0, #0]
 801094e:	e7d6      	b.n	80108fe <_free_r+0x26>
 8010950:	6825      	ldr	r5, [r4, #0]
 8010952:	1961      	adds	r1, r4, r5
 8010954:	428b      	cmp	r3, r1
 8010956:	bf04      	itt	eq
 8010958:	6819      	ldreq	r1, [r3, #0]
 801095a:	685b      	ldreq	r3, [r3, #4]
 801095c:	6063      	str	r3, [r4, #4]
 801095e:	bf04      	itt	eq
 8010960:	1949      	addeq	r1, r1, r5
 8010962:	6021      	streq	r1, [r4, #0]
 8010964:	6054      	str	r4, [r2, #4]
 8010966:	e7ca      	b.n	80108fe <_free_r+0x26>
 8010968:	b003      	add	sp, #12
 801096a:	bd30      	pop	{r4, r5, pc}
 801096c:	240027e4 	.word	0x240027e4

08010970 <sbrk_aligned>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	4e0e      	ldr	r6, [pc, #56]	; (80109ac <sbrk_aligned+0x3c>)
 8010974:	460c      	mov	r4, r1
 8010976:	6831      	ldr	r1, [r6, #0]
 8010978:	4605      	mov	r5, r0
 801097a:	b911      	cbnz	r1, 8010982 <sbrk_aligned+0x12>
 801097c:	f000 f91a 	bl	8010bb4 <_sbrk_r>
 8010980:	6030      	str	r0, [r6, #0]
 8010982:	4621      	mov	r1, r4
 8010984:	4628      	mov	r0, r5
 8010986:	f000 f915 	bl	8010bb4 <_sbrk_r>
 801098a:	1c43      	adds	r3, r0, #1
 801098c:	d00a      	beq.n	80109a4 <sbrk_aligned+0x34>
 801098e:	1cc4      	adds	r4, r0, #3
 8010990:	f024 0403 	bic.w	r4, r4, #3
 8010994:	42a0      	cmp	r0, r4
 8010996:	d007      	beq.n	80109a8 <sbrk_aligned+0x38>
 8010998:	1a21      	subs	r1, r4, r0
 801099a:	4628      	mov	r0, r5
 801099c:	f000 f90a 	bl	8010bb4 <_sbrk_r>
 80109a0:	3001      	adds	r0, #1
 80109a2:	d101      	bne.n	80109a8 <sbrk_aligned+0x38>
 80109a4:	f04f 34ff 	mov.w	r4, #4294967295
 80109a8:	4620      	mov	r0, r4
 80109aa:	bd70      	pop	{r4, r5, r6, pc}
 80109ac:	240027e8 	.word	0x240027e8

080109b0 <_malloc_r>:
 80109b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b4:	1ccd      	adds	r5, r1, #3
 80109b6:	f025 0503 	bic.w	r5, r5, #3
 80109ba:	3508      	adds	r5, #8
 80109bc:	2d0c      	cmp	r5, #12
 80109be:	bf38      	it	cc
 80109c0:	250c      	movcc	r5, #12
 80109c2:	2d00      	cmp	r5, #0
 80109c4:	4607      	mov	r7, r0
 80109c6:	db01      	blt.n	80109cc <_malloc_r+0x1c>
 80109c8:	42a9      	cmp	r1, r5
 80109ca:	d905      	bls.n	80109d8 <_malloc_r+0x28>
 80109cc:	230c      	movs	r3, #12
 80109ce:	603b      	str	r3, [r7, #0]
 80109d0:	2600      	movs	r6, #0
 80109d2:	4630      	mov	r0, r6
 80109d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d8:	4e2e      	ldr	r6, [pc, #184]	; (8010a94 <_malloc_r+0xe4>)
 80109da:	f000 fbfb 	bl	80111d4 <__malloc_lock>
 80109de:	6833      	ldr	r3, [r6, #0]
 80109e0:	461c      	mov	r4, r3
 80109e2:	bb34      	cbnz	r4, 8010a32 <_malloc_r+0x82>
 80109e4:	4629      	mov	r1, r5
 80109e6:	4638      	mov	r0, r7
 80109e8:	f7ff ffc2 	bl	8010970 <sbrk_aligned>
 80109ec:	1c43      	adds	r3, r0, #1
 80109ee:	4604      	mov	r4, r0
 80109f0:	d14d      	bne.n	8010a8e <_malloc_r+0xde>
 80109f2:	6834      	ldr	r4, [r6, #0]
 80109f4:	4626      	mov	r6, r4
 80109f6:	2e00      	cmp	r6, #0
 80109f8:	d140      	bne.n	8010a7c <_malloc_r+0xcc>
 80109fa:	6823      	ldr	r3, [r4, #0]
 80109fc:	4631      	mov	r1, r6
 80109fe:	4638      	mov	r0, r7
 8010a00:	eb04 0803 	add.w	r8, r4, r3
 8010a04:	f000 f8d6 	bl	8010bb4 <_sbrk_r>
 8010a08:	4580      	cmp	r8, r0
 8010a0a:	d13a      	bne.n	8010a82 <_malloc_r+0xd2>
 8010a0c:	6821      	ldr	r1, [r4, #0]
 8010a0e:	3503      	adds	r5, #3
 8010a10:	1a6d      	subs	r5, r5, r1
 8010a12:	f025 0503 	bic.w	r5, r5, #3
 8010a16:	3508      	adds	r5, #8
 8010a18:	2d0c      	cmp	r5, #12
 8010a1a:	bf38      	it	cc
 8010a1c:	250c      	movcc	r5, #12
 8010a1e:	4629      	mov	r1, r5
 8010a20:	4638      	mov	r0, r7
 8010a22:	f7ff ffa5 	bl	8010970 <sbrk_aligned>
 8010a26:	3001      	adds	r0, #1
 8010a28:	d02b      	beq.n	8010a82 <_malloc_r+0xd2>
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	442b      	add	r3, r5
 8010a2e:	6023      	str	r3, [r4, #0]
 8010a30:	e00e      	b.n	8010a50 <_malloc_r+0xa0>
 8010a32:	6822      	ldr	r2, [r4, #0]
 8010a34:	1b52      	subs	r2, r2, r5
 8010a36:	d41e      	bmi.n	8010a76 <_malloc_r+0xc6>
 8010a38:	2a0b      	cmp	r2, #11
 8010a3a:	d916      	bls.n	8010a6a <_malloc_r+0xba>
 8010a3c:	1961      	adds	r1, r4, r5
 8010a3e:	42a3      	cmp	r3, r4
 8010a40:	6025      	str	r5, [r4, #0]
 8010a42:	bf18      	it	ne
 8010a44:	6059      	strne	r1, [r3, #4]
 8010a46:	6863      	ldr	r3, [r4, #4]
 8010a48:	bf08      	it	eq
 8010a4a:	6031      	streq	r1, [r6, #0]
 8010a4c:	5162      	str	r2, [r4, r5]
 8010a4e:	604b      	str	r3, [r1, #4]
 8010a50:	4638      	mov	r0, r7
 8010a52:	f104 060b 	add.w	r6, r4, #11
 8010a56:	f000 fbc3 	bl	80111e0 <__malloc_unlock>
 8010a5a:	f026 0607 	bic.w	r6, r6, #7
 8010a5e:	1d23      	adds	r3, r4, #4
 8010a60:	1af2      	subs	r2, r6, r3
 8010a62:	d0b6      	beq.n	80109d2 <_malloc_r+0x22>
 8010a64:	1b9b      	subs	r3, r3, r6
 8010a66:	50a3      	str	r3, [r4, r2]
 8010a68:	e7b3      	b.n	80109d2 <_malloc_r+0x22>
 8010a6a:	6862      	ldr	r2, [r4, #4]
 8010a6c:	42a3      	cmp	r3, r4
 8010a6e:	bf0c      	ite	eq
 8010a70:	6032      	streq	r2, [r6, #0]
 8010a72:	605a      	strne	r2, [r3, #4]
 8010a74:	e7ec      	b.n	8010a50 <_malloc_r+0xa0>
 8010a76:	4623      	mov	r3, r4
 8010a78:	6864      	ldr	r4, [r4, #4]
 8010a7a:	e7b2      	b.n	80109e2 <_malloc_r+0x32>
 8010a7c:	4634      	mov	r4, r6
 8010a7e:	6876      	ldr	r6, [r6, #4]
 8010a80:	e7b9      	b.n	80109f6 <_malloc_r+0x46>
 8010a82:	230c      	movs	r3, #12
 8010a84:	603b      	str	r3, [r7, #0]
 8010a86:	4638      	mov	r0, r7
 8010a88:	f000 fbaa 	bl	80111e0 <__malloc_unlock>
 8010a8c:	e7a1      	b.n	80109d2 <_malloc_r+0x22>
 8010a8e:	6025      	str	r5, [r4, #0]
 8010a90:	e7de      	b.n	8010a50 <_malloc_r+0xa0>
 8010a92:	bf00      	nop
 8010a94:	240027e4 	.word	0x240027e4

08010a98 <iprintf>:
 8010a98:	b40f      	push	{r0, r1, r2, r3}
 8010a9a:	4b0a      	ldr	r3, [pc, #40]	; (8010ac4 <iprintf+0x2c>)
 8010a9c:	b513      	push	{r0, r1, r4, lr}
 8010a9e:	681c      	ldr	r4, [r3, #0]
 8010aa0:	b124      	cbz	r4, 8010aac <iprintf+0x14>
 8010aa2:	69a3      	ldr	r3, [r4, #24]
 8010aa4:	b913      	cbnz	r3, 8010aac <iprintf+0x14>
 8010aa6:	4620      	mov	r0, r4
 8010aa8:	f000 fa8e 	bl	8010fc8 <__sinit>
 8010aac:	ab05      	add	r3, sp, #20
 8010aae:	9a04      	ldr	r2, [sp, #16]
 8010ab0:	68a1      	ldr	r1, [r4, #8]
 8010ab2:	9301      	str	r3, [sp, #4]
 8010ab4:	4620      	mov	r0, r4
 8010ab6:	f000 fd1f 	bl	80114f8 <_vfiprintf_r>
 8010aba:	b002      	add	sp, #8
 8010abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ac0:	b004      	add	sp, #16
 8010ac2:	4770      	bx	lr
 8010ac4:	24000010 	.word	0x24000010

08010ac8 <_puts_r>:
 8010ac8:	b570      	push	{r4, r5, r6, lr}
 8010aca:	460e      	mov	r6, r1
 8010acc:	4605      	mov	r5, r0
 8010ace:	b118      	cbz	r0, 8010ad8 <_puts_r+0x10>
 8010ad0:	6983      	ldr	r3, [r0, #24]
 8010ad2:	b90b      	cbnz	r3, 8010ad8 <_puts_r+0x10>
 8010ad4:	f000 fa78 	bl	8010fc8 <__sinit>
 8010ad8:	69ab      	ldr	r3, [r5, #24]
 8010ada:	68ac      	ldr	r4, [r5, #8]
 8010adc:	b913      	cbnz	r3, 8010ae4 <_puts_r+0x1c>
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f000 fa72 	bl	8010fc8 <__sinit>
 8010ae4:	4b2c      	ldr	r3, [pc, #176]	; (8010b98 <_puts_r+0xd0>)
 8010ae6:	429c      	cmp	r4, r3
 8010ae8:	d120      	bne.n	8010b2c <_puts_r+0x64>
 8010aea:	686c      	ldr	r4, [r5, #4]
 8010aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010aee:	07db      	lsls	r3, r3, #31
 8010af0:	d405      	bmi.n	8010afe <_puts_r+0x36>
 8010af2:	89a3      	ldrh	r3, [r4, #12]
 8010af4:	0598      	lsls	r0, r3, #22
 8010af6:	d402      	bmi.n	8010afe <_puts_r+0x36>
 8010af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010afa:	f000 fb03 	bl	8011104 <__retarget_lock_acquire_recursive>
 8010afe:	89a3      	ldrh	r3, [r4, #12]
 8010b00:	0719      	lsls	r1, r3, #28
 8010b02:	d51d      	bpl.n	8010b40 <_puts_r+0x78>
 8010b04:	6923      	ldr	r3, [r4, #16]
 8010b06:	b1db      	cbz	r3, 8010b40 <_puts_r+0x78>
 8010b08:	3e01      	subs	r6, #1
 8010b0a:	68a3      	ldr	r3, [r4, #8]
 8010b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010b10:	3b01      	subs	r3, #1
 8010b12:	60a3      	str	r3, [r4, #8]
 8010b14:	bb39      	cbnz	r1, 8010b66 <_puts_r+0x9e>
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	da38      	bge.n	8010b8c <_puts_r+0xc4>
 8010b1a:	4622      	mov	r2, r4
 8010b1c:	210a      	movs	r1, #10
 8010b1e:	4628      	mov	r0, r5
 8010b20:	f000 f878 	bl	8010c14 <__swbuf_r>
 8010b24:	3001      	adds	r0, #1
 8010b26:	d011      	beq.n	8010b4c <_puts_r+0x84>
 8010b28:	250a      	movs	r5, #10
 8010b2a:	e011      	b.n	8010b50 <_puts_r+0x88>
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	; (8010b9c <_puts_r+0xd4>)
 8010b2e:	429c      	cmp	r4, r3
 8010b30:	d101      	bne.n	8010b36 <_puts_r+0x6e>
 8010b32:	68ac      	ldr	r4, [r5, #8]
 8010b34:	e7da      	b.n	8010aec <_puts_r+0x24>
 8010b36:	4b1a      	ldr	r3, [pc, #104]	; (8010ba0 <_puts_r+0xd8>)
 8010b38:	429c      	cmp	r4, r3
 8010b3a:	bf08      	it	eq
 8010b3c:	68ec      	ldreq	r4, [r5, #12]
 8010b3e:	e7d5      	b.n	8010aec <_puts_r+0x24>
 8010b40:	4621      	mov	r1, r4
 8010b42:	4628      	mov	r0, r5
 8010b44:	f000 f8b8 	bl	8010cb8 <__swsetup_r>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d0dd      	beq.n	8010b08 <_puts_r+0x40>
 8010b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8010b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b52:	07da      	lsls	r2, r3, #31
 8010b54:	d405      	bmi.n	8010b62 <_puts_r+0x9a>
 8010b56:	89a3      	ldrh	r3, [r4, #12]
 8010b58:	059b      	lsls	r3, r3, #22
 8010b5a:	d402      	bmi.n	8010b62 <_puts_r+0x9a>
 8010b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b5e:	f000 fad2 	bl	8011106 <__retarget_lock_release_recursive>
 8010b62:	4628      	mov	r0, r5
 8010b64:	bd70      	pop	{r4, r5, r6, pc}
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	da04      	bge.n	8010b74 <_puts_r+0xac>
 8010b6a:	69a2      	ldr	r2, [r4, #24]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	dc06      	bgt.n	8010b7e <_puts_r+0xb6>
 8010b70:	290a      	cmp	r1, #10
 8010b72:	d004      	beq.n	8010b7e <_puts_r+0xb6>
 8010b74:	6823      	ldr	r3, [r4, #0]
 8010b76:	1c5a      	adds	r2, r3, #1
 8010b78:	6022      	str	r2, [r4, #0]
 8010b7a:	7019      	strb	r1, [r3, #0]
 8010b7c:	e7c5      	b.n	8010b0a <_puts_r+0x42>
 8010b7e:	4622      	mov	r2, r4
 8010b80:	4628      	mov	r0, r5
 8010b82:	f000 f847 	bl	8010c14 <__swbuf_r>
 8010b86:	3001      	adds	r0, #1
 8010b88:	d1bf      	bne.n	8010b0a <_puts_r+0x42>
 8010b8a:	e7df      	b.n	8010b4c <_puts_r+0x84>
 8010b8c:	6823      	ldr	r3, [r4, #0]
 8010b8e:	250a      	movs	r5, #10
 8010b90:	1c5a      	adds	r2, r3, #1
 8010b92:	6022      	str	r2, [r4, #0]
 8010b94:	701d      	strb	r5, [r3, #0]
 8010b96:	e7db      	b.n	8010b50 <_puts_r+0x88>
 8010b98:	0801224c 	.word	0x0801224c
 8010b9c:	0801226c 	.word	0x0801226c
 8010ba0:	0801222c 	.word	0x0801222c

08010ba4 <puts>:
 8010ba4:	4b02      	ldr	r3, [pc, #8]	; (8010bb0 <puts+0xc>)
 8010ba6:	4601      	mov	r1, r0
 8010ba8:	6818      	ldr	r0, [r3, #0]
 8010baa:	f7ff bf8d 	b.w	8010ac8 <_puts_r>
 8010bae:	bf00      	nop
 8010bb0:	24000010 	.word	0x24000010

08010bb4 <_sbrk_r>:
 8010bb4:	b538      	push	{r3, r4, r5, lr}
 8010bb6:	4d06      	ldr	r5, [pc, #24]	; (8010bd0 <_sbrk_r+0x1c>)
 8010bb8:	2300      	movs	r3, #0
 8010bba:	4604      	mov	r4, r0
 8010bbc:	4608      	mov	r0, r1
 8010bbe:	602b      	str	r3, [r5, #0]
 8010bc0:	f7f1 f88e 	bl	8001ce0 <_sbrk>
 8010bc4:	1c43      	adds	r3, r0, #1
 8010bc6:	d102      	bne.n	8010bce <_sbrk_r+0x1a>
 8010bc8:	682b      	ldr	r3, [r5, #0]
 8010bca:	b103      	cbz	r3, 8010bce <_sbrk_r+0x1a>
 8010bcc:	6023      	str	r3, [r4, #0]
 8010bce:	bd38      	pop	{r3, r4, r5, pc}
 8010bd0:	240027f0 	.word	0x240027f0

08010bd4 <siprintf>:
 8010bd4:	b40e      	push	{r1, r2, r3}
 8010bd6:	b500      	push	{lr}
 8010bd8:	b09c      	sub	sp, #112	; 0x70
 8010bda:	ab1d      	add	r3, sp, #116	; 0x74
 8010bdc:	9002      	str	r0, [sp, #8]
 8010bde:	9006      	str	r0, [sp, #24]
 8010be0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010be4:	4809      	ldr	r0, [pc, #36]	; (8010c0c <siprintf+0x38>)
 8010be6:	9107      	str	r1, [sp, #28]
 8010be8:	9104      	str	r1, [sp, #16]
 8010bea:	4909      	ldr	r1, [pc, #36]	; (8010c10 <siprintf+0x3c>)
 8010bec:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bf0:	9105      	str	r1, [sp, #20]
 8010bf2:	6800      	ldr	r0, [r0, #0]
 8010bf4:	9301      	str	r3, [sp, #4]
 8010bf6:	a902      	add	r1, sp, #8
 8010bf8:	f000 fb54 	bl	80112a4 <_svfiprintf_r>
 8010bfc:	9b02      	ldr	r3, [sp, #8]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	701a      	strb	r2, [r3, #0]
 8010c02:	b01c      	add	sp, #112	; 0x70
 8010c04:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c08:	b003      	add	sp, #12
 8010c0a:	4770      	bx	lr
 8010c0c:	24000010 	.word	0x24000010
 8010c10:	ffff0208 	.word	0xffff0208

08010c14 <__swbuf_r>:
 8010c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c16:	460e      	mov	r6, r1
 8010c18:	4614      	mov	r4, r2
 8010c1a:	4605      	mov	r5, r0
 8010c1c:	b118      	cbz	r0, 8010c26 <__swbuf_r+0x12>
 8010c1e:	6983      	ldr	r3, [r0, #24]
 8010c20:	b90b      	cbnz	r3, 8010c26 <__swbuf_r+0x12>
 8010c22:	f000 f9d1 	bl	8010fc8 <__sinit>
 8010c26:	4b21      	ldr	r3, [pc, #132]	; (8010cac <__swbuf_r+0x98>)
 8010c28:	429c      	cmp	r4, r3
 8010c2a:	d12b      	bne.n	8010c84 <__swbuf_r+0x70>
 8010c2c:	686c      	ldr	r4, [r5, #4]
 8010c2e:	69a3      	ldr	r3, [r4, #24]
 8010c30:	60a3      	str	r3, [r4, #8]
 8010c32:	89a3      	ldrh	r3, [r4, #12]
 8010c34:	071a      	lsls	r2, r3, #28
 8010c36:	d52f      	bpl.n	8010c98 <__swbuf_r+0x84>
 8010c38:	6923      	ldr	r3, [r4, #16]
 8010c3a:	b36b      	cbz	r3, 8010c98 <__swbuf_r+0x84>
 8010c3c:	6923      	ldr	r3, [r4, #16]
 8010c3e:	6820      	ldr	r0, [r4, #0]
 8010c40:	1ac0      	subs	r0, r0, r3
 8010c42:	6963      	ldr	r3, [r4, #20]
 8010c44:	b2f6      	uxtb	r6, r6
 8010c46:	4283      	cmp	r3, r0
 8010c48:	4637      	mov	r7, r6
 8010c4a:	dc04      	bgt.n	8010c56 <__swbuf_r+0x42>
 8010c4c:	4621      	mov	r1, r4
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f000 f926 	bl	8010ea0 <_fflush_r>
 8010c54:	bb30      	cbnz	r0, 8010ca4 <__swbuf_r+0x90>
 8010c56:	68a3      	ldr	r3, [r4, #8]
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	60a3      	str	r3, [r4, #8]
 8010c5c:	6823      	ldr	r3, [r4, #0]
 8010c5e:	1c5a      	adds	r2, r3, #1
 8010c60:	6022      	str	r2, [r4, #0]
 8010c62:	701e      	strb	r6, [r3, #0]
 8010c64:	6963      	ldr	r3, [r4, #20]
 8010c66:	3001      	adds	r0, #1
 8010c68:	4283      	cmp	r3, r0
 8010c6a:	d004      	beq.n	8010c76 <__swbuf_r+0x62>
 8010c6c:	89a3      	ldrh	r3, [r4, #12]
 8010c6e:	07db      	lsls	r3, r3, #31
 8010c70:	d506      	bpl.n	8010c80 <__swbuf_r+0x6c>
 8010c72:	2e0a      	cmp	r6, #10
 8010c74:	d104      	bne.n	8010c80 <__swbuf_r+0x6c>
 8010c76:	4621      	mov	r1, r4
 8010c78:	4628      	mov	r0, r5
 8010c7a:	f000 f911 	bl	8010ea0 <_fflush_r>
 8010c7e:	b988      	cbnz	r0, 8010ca4 <__swbuf_r+0x90>
 8010c80:	4638      	mov	r0, r7
 8010c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c84:	4b0a      	ldr	r3, [pc, #40]	; (8010cb0 <__swbuf_r+0x9c>)
 8010c86:	429c      	cmp	r4, r3
 8010c88:	d101      	bne.n	8010c8e <__swbuf_r+0x7a>
 8010c8a:	68ac      	ldr	r4, [r5, #8]
 8010c8c:	e7cf      	b.n	8010c2e <__swbuf_r+0x1a>
 8010c8e:	4b09      	ldr	r3, [pc, #36]	; (8010cb4 <__swbuf_r+0xa0>)
 8010c90:	429c      	cmp	r4, r3
 8010c92:	bf08      	it	eq
 8010c94:	68ec      	ldreq	r4, [r5, #12]
 8010c96:	e7ca      	b.n	8010c2e <__swbuf_r+0x1a>
 8010c98:	4621      	mov	r1, r4
 8010c9a:	4628      	mov	r0, r5
 8010c9c:	f000 f80c 	bl	8010cb8 <__swsetup_r>
 8010ca0:	2800      	cmp	r0, #0
 8010ca2:	d0cb      	beq.n	8010c3c <__swbuf_r+0x28>
 8010ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ca8:	e7ea      	b.n	8010c80 <__swbuf_r+0x6c>
 8010caa:	bf00      	nop
 8010cac:	0801224c 	.word	0x0801224c
 8010cb0:	0801226c 	.word	0x0801226c
 8010cb4:	0801222c 	.word	0x0801222c

08010cb8 <__swsetup_r>:
 8010cb8:	4b32      	ldr	r3, [pc, #200]	; (8010d84 <__swsetup_r+0xcc>)
 8010cba:	b570      	push	{r4, r5, r6, lr}
 8010cbc:	681d      	ldr	r5, [r3, #0]
 8010cbe:	4606      	mov	r6, r0
 8010cc0:	460c      	mov	r4, r1
 8010cc2:	b125      	cbz	r5, 8010cce <__swsetup_r+0x16>
 8010cc4:	69ab      	ldr	r3, [r5, #24]
 8010cc6:	b913      	cbnz	r3, 8010cce <__swsetup_r+0x16>
 8010cc8:	4628      	mov	r0, r5
 8010cca:	f000 f97d 	bl	8010fc8 <__sinit>
 8010cce:	4b2e      	ldr	r3, [pc, #184]	; (8010d88 <__swsetup_r+0xd0>)
 8010cd0:	429c      	cmp	r4, r3
 8010cd2:	d10f      	bne.n	8010cf4 <__swsetup_r+0x3c>
 8010cd4:	686c      	ldr	r4, [r5, #4]
 8010cd6:	89a3      	ldrh	r3, [r4, #12]
 8010cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010cdc:	0719      	lsls	r1, r3, #28
 8010cde:	d42c      	bmi.n	8010d3a <__swsetup_r+0x82>
 8010ce0:	06dd      	lsls	r5, r3, #27
 8010ce2:	d411      	bmi.n	8010d08 <__swsetup_r+0x50>
 8010ce4:	2309      	movs	r3, #9
 8010ce6:	6033      	str	r3, [r6, #0]
 8010ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010cec:	81a3      	strh	r3, [r4, #12]
 8010cee:	f04f 30ff 	mov.w	r0, #4294967295
 8010cf2:	e03e      	b.n	8010d72 <__swsetup_r+0xba>
 8010cf4:	4b25      	ldr	r3, [pc, #148]	; (8010d8c <__swsetup_r+0xd4>)
 8010cf6:	429c      	cmp	r4, r3
 8010cf8:	d101      	bne.n	8010cfe <__swsetup_r+0x46>
 8010cfa:	68ac      	ldr	r4, [r5, #8]
 8010cfc:	e7eb      	b.n	8010cd6 <__swsetup_r+0x1e>
 8010cfe:	4b24      	ldr	r3, [pc, #144]	; (8010d90 <__swsetup_r+0xd8>)
 8010d00:	429c      	cmp	r4, r3
 8010d02:	bf08      	it	eq
 8010d04:	68ec      	ldreq	r4, [r5, #12]
 8010d06:	e7e6      	b.n	8010cd6 <__swsetup_r+0x1e>
 8010d08:	0758      	lsls	r0, r3, #29
 8010d0a:	d512      	bpl.n	8010d32 <__swsetup_r+0x7a>
 8010d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d0e:	b141      	cbz	r1, 8010d22 <__swsetup_r+0x6a>
 8010d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d14:	4299      	cmp	r1, r3
 8010d16:	d002      	beq.n	8010d1e <__swsetup_r+0x66>
 8010d18:	4630      	mov	r0, r6
 8010d1a:	f7ff fddd 	bl	80108d8 <_free_r>
 8010d1e:	2300      	movs	r3, #0
 8010d20:	6363      	str	r3, [r4, #52]	; 0x34
 8010d22:	89a3      	ldrh	r3, [r4, #12]
 8010d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010d28:	81a3      	strh	r3, [r4, #12]
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	6063      	str	r3, [r4, #4]
 8010d2e:	6923      	ldr	r3, [r4, #16]
 8010d30:	6023      	str	r3, [r4, #0]
 8010d32:	89a3      	ldrh	r3, [r4, #12]
 8010d34:	f043 0308 	orr.w	r3, r3, #8
 8010d38:	81a3      	strh	r3, [r4, #12]
 8010d3a:	6923      	ldr	r3, [r4, #16]
 8010d3c:	b94b      	cbnz	r3, 8010d52 <__swsetup_r+0x9a>
 8010d3e:	89a3      	ldrh	r3, [r4, #12]
 8010d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d48:	d003      	beq.n	8010d52 <__swsetup_r+0x9a>
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	f000 fa01 	bl	8011154 <__smakebuf_r>
 8010d52:	89a0      	ldrh	r0, [r4, #12]
 8010d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010d58:	f010 0301 	ands.w	r3, r0, #1
 8010d5c:	d00a      	beq.n	8010d74 <__swsetup_r+0xbc>
 8010d5e:	2300      	movs	r3, #0
 8010d60:	60a3      	str	r3, [r4, #8]
 8010d62:	6963      	ldr	r3, [r4, #20]
 8010d64:	425b      	negs	r3, r3
 8010d66:	61a3      	str	r3, [r4, #24]
 8010d68:	6923      	ldr	r3, [r4, #16]
 8010d6a:	b943      	cbnz	r3, 8010d7e <__swsetup_r+0xc6>
 8010d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010d70:	d1ba      	bne.n	8010ce8 <__swsetup_r+0x30>
 8010d72:	bd70      	pop	{r4, r5, r6, pc}
 8010d74:	0781      	lsls	r1, r0, #30
 8010d76:	bf58      	it	pl
 8010d78:	6963      	ldrpl	r3, [r4, #20]
 8010d7a:	60a3      	str	r3, [r4, #8]
 8010d7c:	e7f4      	b.n	8010d68 <__swsetup_r+0xb0>
 8010d7e:	2000      	movs	r0, #0
 8010d80:	e7f7      	b.n	8010d72 <__swsetup_r+0xba>
 8010d82:	bf00      	nop
 8010d84:	24000010 	.word	0x24000010
 8010d88:	0801224c 	.word	0x0801224c
 8010d8c:	0801226c 	.word	0x0801226c
 8010d90:	0801222c 	.word	0x0801222c

08010d94 <__sflush_r>:
 8010d94:	898a      	ldrh	r2, [r1, #12]
 8010d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d9a:	4605      	mov	r5, r0
 8010d9c:	0710      	lsls	r0, r2, #28
 8010d9e:	460c      	mov	r4, r1
 8010da0:	d458      	bmi.n	8010e54 <__sflush_r+0xc0>
 8010da2:	684b      	ldr	r3, [r1, #4]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	dc05      	bgt.n	8010db4 <__sflush_r+0x20>
 8010da8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	dc02      	bgt.n	8010db4 <__sflush_r+0x20>
 8010dae:	2000      	movs	r0, #0
 8010db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010db6:	2e00      	cmp	r6, #0
 8010db8:	d0f9      	beq.n	8010dae <__sflush_r+0x1a>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010dc0:	682f      	ldr	r7, [r5, #0]
 8010dc2:	602b      	str	r3, [r5, #0]
 8010dc4:	d032      	beq.n	8010e2c <__sflush_r+0x98>
 8010dc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	075a      	lsls	r2, r3, #29
 8010dcc:	d505      	bpl.n	8010dda <__sflush_r+0x46>
 8010dce:	6863      	ldr	r3, [r4, #4]
 8010dd0:	1ac0      	subs	r0, r0, r3
 8010dd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010dd4:	b10b      	cbz	r3, 8010dda <__sflush_r+0x46>
 8010dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010dd8:	1ac0      	subs	r0, r0, r3
 8010dda:	2300      	movs	r3, #0
 8010ddc:	4602      	mov	r2, r0
 8010dde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010de0:	6a21      	ldr	r1, [r4, #32]
 8010de2:	4628      	mov	r0, r5
 8010de4:	47b0      	blx	r6
 8010de6:	1c43      	adds	r3, r0, #1
 8010de8:	89a3      	ldrh	r3, [r4, #12]
 8010dea:	d106      	bne.n	8010dfa <__sflush_r+0x66>
 8010dec:	6829      	ldr	r1, [r5, #0]
 8010dee:	291d      	cmp	r1, #29
 8010df0:	d82c      	bhi.n	8010e4c <__sflush_r+0xb8>
 8010df2:	4a2a      	ldr	r2, [pc, #168]	; (8010e9c <__sflush_r+0x108>)
 8010df4:	40ca      	lsrs	r2, r1
 8010df6:	07d6      	lsls	r6, r2, #31
 8010df8:	d528      	bpl.n	8010e4c <__sflush_r+0xb8>
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	6062      	str	r2, [r4, #4]
 8010dfe:	04d9      	lsls	r1, r3, #19
 8010e00:	6922      	ldr	r2, [r4, #16]
 8010e02:	6022      	str	r2, [r4, #0]
 8010e04:	d504      	bpl.n	8010e10 <__sflush_r+0x7c>
 8010e06:	1c42      	adds	r2, r0, #1
 8010e08:	d101      	bne.n	8010e0e <__sflush_r+0x7a>
 8010e0a:	682b      	ldr	r3, [r5, #0]
 8010e0c:	b903      	cbnz	r3, 8010e10 <__sflush_r+0x7c>
 8010e0e:	6560      	str	r0, [r4, #84]	; 0x54
 8010e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e12:	602f      	str	r7, [r5, #0]
 8010e14:	2900      	cmp	r1, #0
 8010e16:	d0ca      	beq.n	8010dae <__sflush_r+0x1a>
 8010e18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e1c:	4299      	cmp	r1, r3
 8010e1e:	d002      	beq.n	8010e26 <__sflush_r+0x92>
 8010e20:	4628      	mov	r0, r5
 8010e22:	f7ff fd59 	bl	80108d8 <_free_r>
 8010e26:	2000      	movs	r0, #0
 8010e28:	6360      	str	r0, [r4, #52]	; 0x34
 8010e2a:	e7c1      	b.n	8010db0 <__sflush_r+0x1c>
 8010e2c:	6a21      	ldr	r1, [r4, #32]
 8010e2e:	2301      	movs	r3, #1
 8010e30:	4628      	mov	r0, r5
 8010e32:	47b0      	blx	r6
 8010e34:	1c41      	adds	r1, r0, #1
 8010e36:	d1c7      	bne.n	8010dc8 <__sflush_r+0x34>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0c4      	beq.n	8010dc8 <__sflush_r+0x34>
 8010e3e:	2b1d      	cmp	r3, #29
 8010e40:	d001      	beq.n	8010e46 <__sflush_r+0xb2>
 8010e42:	2b16      	cmp	r3, #22
 8010e44:	d101      	bne.n	8010e4a <__sflush_r+0xb6>
 8010e46:	602f      	str	r7, [r5, #0]
 8010e48:	e7b1      	b.n	8010dae <__sflush_r+0x1a>
 8010e4a:	89a3      	ldrh	r3, [r4, #12]
 8010e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e50:	81a3      	strh	r3, [r4, #12]
 8010e52:	e7ad      	b.n	8010db0 <__sflush_r+0x1c>
 8010e54:	690f      	ldr	r7, [r1, #16]
 8010e56:	2f00      	cmp	r7, #0
 8010e58:	d0a9      	beq.n	8010dae <__sflush_r+0x1a>
 8010e5a:	0793      	lsls	r3, r2, #30
 8010e5c:	680e      	ldr	r6, [r1, #0]
 8010e5e:	bf08      	it	eq
 8010e60:	694b      	ldreq	r3, [r1, #20]
 8010e62:	600f      	str	r7, [r1, #0]
 8010e64:	bf18      	it	ne
 8010e66:	2300      	movne	r3, #0
 8010e68:	eba6 0807 	sub.w	r8, r6, r7
 8010e6c:	608b      	str	r3, [r1, #8]
 8010e6e:	f1b8 0f00 	cmp.w	r8, #0
 8010e72:	dd9c      	ble.n	8010dae <__sflush_r+0x1a>
 8010e74:	6a21      	ldr	r1, [r4, #32]
 8010e76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e78:	4643      	mov	r3, r8
 8010e7a:	463a      	mov	r2, r7
 8010e7c:	4628      	mov	r0, r5
 8010e7e:	47b0      	blx	r6
 8010e80:	2800      	cmp	r0, #0
 8010e82:	dc06      	bgt.n	8010e92 <__sflush_r+0xfe>
 8010e84:	89a3      	ldrh	r3, [r4, #12]
 8010e86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e8a:	81a3      	strh	r3, [r4, #12]
 8010e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e90:	e78e      	b.n	8010db0 <__sflush_r+0x1c>
 8010e92:	4407      	add	r7, r0
 8010e94:	eba8 0800 	sub.w	r8, r8, r0
 8010e98:	e7e9      	b.n	8010e6e <__sflush_r+0xda>
 8010e9a:	bf00      	nop
 8010e9c:	20400001 	.word	0x20400001

08010ea0 <_fflush_r>:
 8010ea0:	b538      	push	{r3, r4, r5, lr}
 8010ea2:	690b      	ldr	r3, [r1, #16]
 8010ea4:	4605      	mov	r5, r0
 8010ea6:	460c      	mov	r4, r1
 8010ea8:	b913      	cbnz	r3, 8010eb0 <_fflush_r+0x10>
 8010eaa:	2500      	movs	r5, #0
 8010eac:	4628      	mov	r0, r5
 8010eae:	bd38      	pop	{r3, r4, r5, pc}
 8010eb0:	b118      	cbz	r0, 8010eba <_fflush_r+0x1a>
 8010eb2:	6983      	ldr	r3, [r0, #24]
 8010eb4:	b90b      	cbnz	r3, 8010eba <_fflush_r+0x1a>
 8010eb6:	f000 f887 	bl	8010fc8 <__sinit>
 8010eba:	4b14      	ldr	r3, [pc, #80]	; (8010f0c <_fflush_r+0x6c>)
 8010ebc:	429c      	cmp	r4, r3
 8010ebe:	d11b      	bne.n	8010ef8 <_fflush_r+0x58>
 8010ec0:	686c      	ldr	r4, [r5, #4]
 8010ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d0ef      	beq.n	8010eaa <_fflush_r+0xa>
 8010eca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ecc:	07d0      	lsls	r0, r2, #31
 8010ece:	d404      	bmi.n	8010eda <_fflush_r+0x3a>
 8010ed0:	0599      	lsls	r1, r3, #22
 8010ed2:	d402      	bmi.n	8010eda <_fflush_r+0x3a>
 8010ed4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ed6:	f000 f915 	bl	8011104 <__retarget_lock_acquire_recursive>
 8010eda:	4628      	mov	r0, r5
 8010edc:	4621      	mov	r1, r4
 8010ede:	f7ff ff59 	bl	8010d94 <__sflush_r>
 8010ee2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010ee4:	07da      	lsls	r2, r3, #31
 8010ee6:	4605      	mov	r5, r0
 8010ee8:	d4e0      	bmi.n	8010eac <_fflush_r+0xc>
 8010eea:	89a3      	ldrh	r3, [r4, #12]
 8010eec:	059b      	lsls	r3, r3, #22
 8010eee:	d4dd      	bmi.n	8010eac <_fflush_r+0xc>
 8010ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ef2:	f000 f908 	bl	8011106 <__retarget_lock_release_recursive>
 8010ef6:	e7d9      	b.n	8010eac <_fflush_r+0xc>
 8010ef8:	4b05      	ldr	r3, [pc, #20]	; (8010f10 <_fflush_r+0x70>)
 8010efa:	429c      	cmp	r4, r3
 8010efc:	d101      	bne.n	8010f02 <_fflush_r+0x62>
 8010efe:	68ac      	ldr	r4, [r5, #8]
 8010f00:	e7df      	b.n	8010ec2 <_fflush_r+0x22>
 8010f02:	4b04      	ldr	r3, [pc, #16]	; (8010f14 <_fflush_r+0x74>)
 8010f04:	429c      	cmp	r4, r3
 8010f06:	bf08      	it	eq
 8010f08:	68ec      	ldreq	r4, [r5, #12]
 8010f0a:	e7da      	b.n	8010ec2 <_fflush_r+0x22>
 8010f0c:	0801224c 	.word	0x0801224c
 8010f10:	0801226c 	.word	0x0801226c
 8010f14:	0801222c 	.word	0x0801222c

08010f18 <std>:
 8010f18:	2300      	movs	r3, #0
 8010f1a:	b510      	push	{r4, lr}
 8010f1c:	4604      	mov	r4, r0
 8010f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8010f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f26:	6083      	str	r3, [r0, #8]
 8010f28:	8181      	strh	r1, [r0, #12]
 8010f2a:	6643      	str	r3, [r0, #100]	; 0x64
 8010f2c:	81c2      	strh	r2, [r0, #14]
 8010f2e:	6183      	str	r3, [r0, #24]
 8010f30:	4619      	mov	r1, r3
 8010f32:	2208      	movs	r2, #8
 8010f34:	305c      	adds	r0, #92	; 0x5c
 8010f36:	f7ff fcc7 	bl	80108c8 <memset>
 8010f3a:	4b05      	ldr	r3, [pc, #20]	; (8010f50 <std+0x38>)
 8010f3c:	6263      	str	r3, [r4, #36]	; 0x24
 8010f3e:	4b05      	ldr	r3, [pc, #20]	; (8010f54 <std+0x3c>)
 8010f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f42:	4b05      	ldr	r3, [pc, #20]	; (8010f58 <std+0x40>)
 8010f44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f46:	4b05      	ldr	r3, [pc, #20]	; (8010f5c <std+0x44>)
 8010f48:	6224      	str	r4, [r4, #32]
 8010f4a:	6323      	str	r3, [r4, #48]	; 0x30
 8010f4c:	bd10      	pop	{r4, pc}
 8010f4e:	bf00      	nop
 8010f50:	08011a81 	.word	0x08011a81
 8010f54:	08011aa3 	.word	0x08011aa3
 8010f58:	08011adb 	.word	0x08011adb
 8010f5c:	08011aff 	.word	0x08011aff

08010f60 <_cleanup_r>:
 8010f60:	4901      	ldr	r1, [pc, #4]	; (8010f68 <_cleanup_r+0x8>)
 8010f62:	f000 b8af 	b.w	80110c4 <_fwalk_reent>
 8010f66:	bf00      	nop
 8010f68:	08010ea1 	.word	0x08010ea1

08010f6c <__sfmoreglue>:
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	2268      	movs	r2, #104	; 0x68
 8010f70:	1e4d      	subs	r5, r1, #1
 8010f72:	4355      	muls	r5, r2
 8010f74:	460e      	mov	r6, r1
 8010f76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010f7a:	f7ff fd19 	bl	80109b0 <_malloc_r>
 8010f7e:	4604      	mov	r4, r0
 8010f80:	b140      	cbz	r0, 8010f94 <__sfmoreglue+0x28>
 8010f82:	2100      	movs	r1, #0
 8010f84:	e9c0 1600 	strd	r1, r6, [r0]
 8010f88:	300c      	adds	r0, #12
 8010f8a:	60a0      	str	r0, [r4, #8]
 8010f8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010f90:	f7ff fc9a 	bl	80108c8 <memset>
 8010f94:	4620      	mov	r0, r4
 8010f96:	bd70      	pop	{r4, r5, r6, pc}

08010f98 <__sfp_lock_acquire>:
 8010f98:	4801      	ldr	r0, [pc, #4]	; (8010fa0 <__sfp_lock_acquire+0x8>)
 8010f9a:	f000 b8b3 	b.w	8011104 <__retarget_lock_acquire_recursive>
 8010f9e:	bf00      	nop
 8010fa0:	240027ed 	.word	0x240027ed

08010fa4 <__sfp_lock_release>:
 8010fa4:	4801      	ldr	r0, [pc, #4]	; (8010fac <__sfp_lock_release+0x8>)
 8010fa6:	f000 b8ae 	b.w	8011106 <__retarget_lock_release_recursive>
 8010faa:	bf00      	nop
 8010fac:	240027ed 	.word	0x240027ed

08010fb0 <__sinit_lock_acquire>:
 8010fb0:	4801      	ldr	r0, [pc, #4]	; (8010fb8 <__sinit_lock_acquire+0x8>)
 8010fb2:	f000 b8a7 	b.w	8011104 <__retarget_lock_acquire_recursive>
 8010fb6:	bf00      	nop
 8010fb8:	240027ee 	.word	0x240027ee

08010fbc <__sinit_lock_release>:
 8010fbc:	4801      	ldr	r0, [pc, #4]	; (8010fc4 <__sinit_lock_release+0x8>)
 8010fbe:	f000 b8a2 	b.w	8011106 <__retarget_lock_release_recursive>
 8010fc2:	bf00      	nop
 8010fc4:	240027ee 	.word	0x240027ee

08010fc8 <__sinit>:
 8010fc8:	b510      	push	{r4, lr}
 8010fca:	4604      	mov	r4, r0
 8010fcc:	f7ff fff0 	bl	8010fb0 <__sinit_lock_acquire>
 8010fd0:	69a3      	ldr	r3, [r4, #24]
 8010fd2:	b11b      	cbz	r3, 8010fdc <__sinit+0x14>
 8010fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fd8:	f7ff bff0 	b.w	8010fbc <__sinit_lock_release>
 8010fdc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010fe0:	6523      	str	r3, [r4, #80]	; 0x50
 8010fe2:	4b13      	ldr	r3, [pc, #76]	; (8011030 <__sinit+0x68>)
 8010fe4:	4a13      	ldr	r2, [pc, #76]	; (8011034 <__sinit+0x6c>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	62a2      	str	r2, [r4, #40]	; 0x28
 8010fea:	42a3      	cmp	r3, r4
 8010fec:	bf04      	itt	eq
 8010fee:	2301      	moveq	r3, #1
 8010ff0:	61a3      	streq	r3, [r4, #24]
 8010ff2:	4620      	mov	r0, r4
 8010ff4:	f000 f820 	bl	8011038 <__sfp>
 8010ff8:	6060      	str	r0, [r4, #4]
 8010ffa:	4620      	mov	r0, r4
 8010ffc:	f000 f81c 	bl	8011038 <__sfp>
 8011000:	60a0      	str	r0, [r4, #8]
 8011002:	4620      	mov	r0, r4
 8011004:	f000 f818 	bl	8011038 <__sfp>
 8011008:	2200      	movs	r2, #0
 801100a:	60e0      	str	r0, [r4, #12]
 801100c:	2104      	movs	r1, #4
 801100e:	6860      	ldr	r0, [r4, #4]
 8011010:	f7ff ff82 	bl	8010f18 <std>
 8011014:	68a0      	ldr	r0, [r4, #8]
 8011016:	2201      	movs	r2, #1
 8011018:	2109      	movs	r1, #9
 801101a:	f7ff ff7d 	bl	8010f18 <std>
 801101e:	68e0      	ldr	r0, [r4, #12]
 8011020:	2202      	movs	r2, #2
 8011022:	2112      	movs	r1, #18
 8011024:	f7ff ff78 	bl	8010f18 <std>
 8011028:	2301      	movs	r3, #1
 801102a:	61a3      	str	r3, [r4, #24]
 801102c:	e7d2      	b.n	8010fd4 <__sinit+0xc>
 801102e:	bf00      	nop
 8011030:	08012228 	.word	0x08012228
 8011034:	08010f61 	.word	0x08010f61

08011038 <__sfp>:
 8011038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801103a:	4607      	mov	r7, r0
 801103c:	f7ff ffac 	bl	8010f98 <__sfp_lock_acquire>
 8011040:	4b1e      	ldr	r3, [pc, #120]	; (80110bc <__sfp+0x84>)
 8011042:	681e      	ldr	r6, [r3, #0]
 8011044:	69b3      	ldr	r3, [r6, #24]
 8011046:	b913      	cbnz	r3, 801104e <__sfp+0x16>
 8011048:	4630      	mov	r0, r6
 801104a:	f7ff ffbd 	bl	8010fc8 <__sinit>
 801104e:	3648      	adds	r6, #72	; 0x48
 8011050:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011054:	3b01      	subs	r3, #1
 8011056:	d503      	bpl.n	8011060 <__sfp+0x28>
 8011058:	6833      	ldr	r3, [r6, #0]
 801105a:	b30b      	cbz	r3, 80110a0 <__sfp+0x68>
 801105c:	6836      	ldr	r6, [r6, #0]
 801105e:	e7f7      	b.n	8011050 <__sfp+0x18>
 8011060:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011064:	b9d5      	cbnz	r5, 801109c <__sfp+0x64>
 8011066:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <__sfp+0x88>)
 8011068:	60e3      	str	r3, [r4, #12]
 801106a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801106e:	6665      	str	r5, [r4, #100]	; 0x64
 8011070:	f000 f847 	bl	8011102 <__retarget_lock_init_recursive>
 8011074:	f7ff ff96 	bl	8010fa4 <__sfp_lock_release>
 8011078:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801107c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011080:	6025      	str	r5, [r4, #0]
 8011082:	61a5      	str	r5, [r4, #24]
 8011084:	2208      	movs	r2, #8
 8011086:	4629      	mov	r1, r5
 8011088:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801108c:	f7ff fc1c 	bl	80108c8 <memset>
 8011090:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011094:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011098:	4620      	mov	r0, r4
 801109a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801109c:	3468      	adds	r4, #104	; 0x68
 801109e:	e7d9      	b.n	8011054 <__sfp+0x1c>
 80110a0:	2104      	movs	r1, #4
 80110a2:	4638      	mov	r0, r7
 80110a4:	f7ff ff62 	bl	8010f6c <__sfmoreglue>
 80110a8:	4604      	mov	r4, r0
 80110aa:	6030      	str	r0, [r6, #0]
 80110ac:	2800      	cmp	r0, #0
 80110ae:	d1d5      	bne.n	801105c <__sfp+0x24>
 80110b0:	f7ff ff78 	bl	8010fa4 <__sfp_lock_release>
 80110b4:	230c      	movs	r3, #12
 80110b6:	603b      	str	r3, [r7, #0]
 80110b8:	e7ee      	b.n	8011098 <__sfp+0x60>
 80110ba:	bf00      	nop
 80110bc:	08012228 	.word	0x08012228
 80110c0:	ffff0001 	.word	0xffff0001

080110c4 <_fwalk_reent>:
 80110c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110c8:	4606      	mov	r6, r0
 80110ca:	4688      	mov	r8, r1
 80110cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80110d0:	2700      	movs	r7, #0
 80110d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80110d6:	f1b9 0901 	subs.w	r9, r9, #1
 80110da:	d505      	bpl.n	80110e8 <_fwalk_reent+0x24>
 80110dc:	6824      	ldr	r4, [r4, #0]
 80110de:	2c00      	cmp	r4, #0
 80110e0:	d1f7      	bne.n	80110d2 <_fwalk_reent+0xe>
 80110e2:	4638      	mov	r0, r7
 80110e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e8:	89ab      	ldrh	r3, [r5, #12]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d907      	bls.n	80110fe <_fwalk_reent+0x3a>
 80110ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80110f2:	3301      	adds	r3, #1
 80110f4:	d003      	beq.n	80110fe <_fwalk_reent+0x3a>
 80110f6:	4629      	mov	r1, r5
 80110f8:	4630      	mov	r0, r6
 80110fa:	47c0      	blx	r8
 80110fc:	4307      	orrs	r7, r0
 80110fe:	3568      	adds	r5, #104	; 0x68
 8011100:	e7e9      	b.n	80110d6 <_fwalk_reent+0x12>

08011102 <__retarget_lock_init_recursive>:
 8011102:	4770      	bx	lr

08011104 <__retarget_lock_acquire_recursive>:
 8011104:	4770      	bx	lr

08011106 <__retarget_lock_release_recursive>:
 8011106:	4770      	bx	lr

08011108 <__swhatbuf_r>:
 8011108:	b570      	push	{r4, r5, r6, lr}
 801110a:	460e      	mov	r6, r1
 801110c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011110:	2900      	cmp	r1, #0
 8011112:	b096      	sub	sp, #88	; 0x58
 8011114:	4614      	mov	r4, r2
 8011116:	461d      	mov	r5, r3
 8011118:	da08      	bge.n	801112c <__swhatbuf_r+0x24>
 801111a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801111e:	2200      	movs	r2, #0
 8011120:	602a      	str	r2, [r5, #0]
 8011122:	061a      	lsls	r2, r3, #24
 8011124:	d410      	bmi.n	8011148 <__swhatbuf_r+0x40>
 8011126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801112a:	e00e      	b.n	801114a <__swhatbuf_r+0x42>
 801112c:	466a      	mov	r2, sp
 801112e:	f000 fd0d 	bl	8011b4c <_fstat_r>
 8011132:	2800      	cmp	r0, #0
 8011134:	dbf1      	blt.n	801111a <__swhatbuf_r+0x12>
 8011136:	9a01      	ldr	r2, [sp, #4]
 8011138:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801113c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011140:	425a      	negs	r2, r3
 8011142:	415a      	adcs	r2, r3
 8011144:	602a      	str	r2, [r5, #0]
 8011146:	e7ee      	b.n	8011126 <__swhatbuf_r+0x1e>
 8011148:	2340      	movs	r3, #64	; 0x40
 801114a:	2000      	movs	r0, #0
 801114c:	6023      	str	r3, [r4, #0]
 801114e:	b016      	add	sp, #88	; 0x58
 8011150:	bd70      	pop	{r4, r5, r6, pc}
	...

08011154 <__smakebuf_r>:
 8011154:	898b      	ldrh	r3, [r1, #12]
 8011156:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011158:	079d      	lsls	r5, r3, #30
 801115a:	4606      	mov	r6, r0
 801115c:	460c      	mov	r4, r1
 801115e:	d507      	bpl.n	8011170 <__smakebuf_r+0x1c>
 8011160:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011164:	6023      	str	r3, [r4, #0]
 8011166:	6123      	str	r3, [r4, #16]
 8011168:	2301      	movs	r3, #1
 801116a:	6163      	str	r3, [r4, #20]
 801116c:	b002      	add	sp, #8
 801116e:	bd70      	pop	{r4, r5, r6, pc}
 8011170:	ab01      	add	r3, sp, #4
 8011172:	466a      	mov	r2, sp
 8011174:	f7ff ffc8 	bl	8011108 <__swhatbuf_r>
 8011178:	9900      	ldr	r1, [sp, #0]
 801117a:	4605      	mov	r5, r0
 801117c:	4630      	mov	r0, r6
 801117e:	f7ff fc17 	bl	80109b0 <_malloc_r>
 8011182:	b948      	cbnz	r0, 8011198 <__smakebuf_r+0x44>
 8011184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011188:	059a      	lsls	r2, r3, #22
 801118a:	d4ef      	bmi.n	801116c <__smakebuf_r+0x18>
 801118c:	f023 0303 	bic.w	r3, r3, #3
 8011190:	f043 0302 	orr.w	r3, r3, #2
 8011194:	81a3      	strh	r3, [r4, #12]
 8011196:	e7e3      	b.n	8011160 <__smakebuf_r+0xc>
 8011198:	4b0d      	ldr	r3, [pc, #52]	; (80111d0 <__smakebuf_r+0x7c>)
 801119a:	62b3      	str	r3, [r6, #40]	; 0x28
 801119c:	89a3      	ldrh	r3, [r4, #12]
 801119e:	6020      	str	r0, [r4, #0]
 80111a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80111a4:	81a3      	strh	r3, [r4, #12]
 80111a6:	9b00      	ldr	r3, [sp, #0]
 80111a8:	6163      	str	r3, [r4, #20]
 80111aa:	9b01      	ldr	r3, [sp, #4]
 80111ac:	6120      	str	r0, [r4, #16]
 80111ae:	b15b      	cbz	r3, 80111c8 <__smakebuf_r+0x74>
 80111b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111b4:	4630      	mov	r0, r6
 80111b6:	f000 fcdb 	bl	8011b70 <_isatty_r>
 80111ba:	b128      	cbz	r0, 80111c8 <__smakebuf_r+0x74>
 80111bc:	89a3      	ldrh	r3, [r4, #12]
 80111be:	f023 0303 	bic.w	r3, r3, #3
 80111c2:	f043 0301 	orr.w	r3, r3, #1
 80111c6:	81a3      	strh	r3, [r4, #12]
 80111c8:	89a0      	ldrh	r0, [r4, #12]
 80111ca:	4305      	orrs	r5, r0
 80111cc:	81a5      	strh	r5, [r4, #12]
 80111ce:	e7cd      	b.n	801116c <__smakebuf_r+0x18>
 80111d0:	08010f61 	.word	0x08010f61

080111d4 <__malloc_lock>:
 80111d4:	4801      	ldr	r0, [pc, #4]	; (80111dc <__malloc_lock+0x8>)
 80111d6:	f7ff bf95 	b.w	8011104 <__retarget_lock_acquire_recursive>
 80111da:	bf00      	nop
 80111dc:	240027ec 	.word	0x240027ec

080111e0 <__malloc_unlock>:
 80111e0:	4801      	ldr	r0, [pc, #4]	; (80111e8 <__malloc_unlock+0x8>)
 80111e2:	f7ff bf90 	b.w	8011106 <__retarget_lock_release_recursive>
 80111e6:	bf00      	nop
 80111e8:	240027ec 	.word	0x240027ec

080111ec <__ssputs_r>:
 80111ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111f0:	688e      	ldr	r6, [r1, #8]
 80111f2:	429e      	cmp	r6, r3
 80111f4:	4682      	mov	sl, r0
 80111f6:	460c      	mov	r4, r1
 80111f8:	4690      	mov	r8, r2
 80111fa:	461f      	mov	r7, r3
 80111fc:	d838      	bhi.n	8011270 <__ssputs_r+0x84>
 80111fe:	898a      	ldrh	r2, [r1, #12]
 8011200:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011204:	d032      	beq.n	801126c <__ssputs_r+0x80>
 8011206:	6825      	ldr	r5, [r4, #0]
 8011208:	6909      	ldr	r1, [r1, #16]
 801120a:	eba5 0901 	sub.w	r9, r5, r1
 801120e:	6965      	ldr	r5, [r4, #20]
 8011210:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011214:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011218:	3301      	adds	r3, #1
 801121a:	444b      	add	r3, r9
 801121c:	106d      	asrs	r5, r5, #1
 801121e:	429d      	cmp	r5, r3
 8011220:	bf38      	it	cc
 8011222:	461d      	movcc	r5, r3
 8011224:	0553      	lsls	r3, r2, #21
 8011226:	d531      	bpl.n	801128c <__ssputs_r+0xa0>
 8011228:	4629      	mov	r1, r5
 801122a:	f7ff fbc1 	bl	80109b0 <_malloc_r>
 801122e:	4606      	mov	r6, r0
 8011230:	b950      	cbnz	r0, 8011248 <__ssputs_r+0x5c>
 8011232:	230c      	movs	r3, #12
 8011234:	f8ca 3000 	str.w	r3, [sl]
 8011238:	89a3      	ldrh	r3, [r4, #12]
 801123a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801123e:	81a3      	strh	r3, [r4, #12]
 8011240:	f04f 30ff 	mov.w	r0, #4294967295
 8011244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011248:	6921      	ldr	r1, [r4, #16]
 801124a:	464a      	mov	r2, r9
 801124c:	f000 fcb2 	bl	8011bb4 <memcpy>
 8011250:	89a3      	ldrh	r3, [r4, #12]
 8011252:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801125a:	81a3      	strh	r3, [r4, #12]
 801125c:	6126      	str	r6, [r4, #16]
 801125e:	6165      	str	r5, [r4, #20]
 8011260:	444e      	add	r6, r9
 8011262:	eba5 0509 	sub.w	r5, r5, r9
 8011266:	6026      	str	r6, [r4, #0]
 8011268:	60a5      	str	r5, [r4, #8]
 801126a:	463e      	mov	r6, r7
 801126c:	42be      	cmp	r6, r7
 801126e:	d900      	bls.n	8011272 <__ssputs_r+0x86>
 8011270:	463e      	mov	r6, r7
 8011272:	6820      	ldr	r0, [r4, #0]
 8011274:	4632      	mov	r2, r6
 8011276:	4641      	mov	r1, r8
 8011278:	f000 fcaa 	bl	8011bd0 <memmove>
 801127c:	68a3      	ldr	r3, [r4, #8]
 801127e:	1b9b      	subs	r3, r3, r6
 8011280:	60a3      	str	r3, [r4, #8]
 8011282:	6823      	ldr	r3, [r4, #0]
 8011284:	4433      	add	r3, r6
 8011286:	6023      	str	r3, [r4, #0]
 8011288:	2000      	movs	r0, #0
 801128a:	e7db      	b.n	8011244 <__ssputs_r+0x58>
 801128c:	462a      	mov	r2, r5
 801128e:	f000 fcb9 	bl	8011c04 <_realloc_r>
 8011292:	4606      	mov	r6, r0
 8011294:	2800      	cmp	r0, #0
 8011296:	d1e1      	bne.n	801125c <__ssputs_r+0x70>
 8011298:	6921      	ldr	r1, [r4, #16]
 801129a:	4650      	mov	r0, sl
 801129c:	f7ff fb1c 	bl	80108d8 <_free_r>
 80112a0:	e7c7      	b.n	8011232 <__ssputs_r+0x46>
	...

080112a4 <_svfiprintf_r>:
 80112a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112a8:	4698      	mov	r8, r3
 80112aa:	898b      	ldrh	r3, [r1, #12]
 80112ac:	061b      	lsls	r3, r3, #24
 80112ae:	b09d      	sub	sp, #116	; 0x74
 80112b0:	4607      	mov	r7, r0
 80112b2:	460d      	mov	r5, r1
 80112b4:	4614      	mov	r4, r2
 80112b6:	d50e      	bpl.n	80112d6 <_svfiprintf_r+0x32>
 80112b8:	690b      	ldr	r3, [r1, #16]
 80112ba:	b963      	cbnz	r3, 80112d6 <_svfiprintf_r+0x32>
 80112bc:	2140      	movs	r1, #64	; 0x40
 80112be:	f7ff fb77 	bl	80109b0 <_malloc_r>
 80112c2:	6028      	str	r0, [r5, #0]
 80112c4:	6128      	str	r0, [r5, #16]
 80112c6:	b920      	cbnz	r0, 80112d2 <_svfiprintf_r+0x2e>
 80112c8:	230c      	movs	r3, #12
 80112ca:	603b      	str	r3, [r7, #0]
 80112cc:	f04f 30ff 	mov.w	r0, #4294967295
 80112d0:	e0d1      	b.n	8011476 <_svfiprintf_r+0x1d2>
 80112d2:	2340      	movs	r3, #64	; 0x40
 80112d4:	616b      	str	r3, [r5, #20]
 80112d6:	2300      	movs	r3, #0
 80112d8:	9309      	str	r3, [sp, #36]	; 0x24
 80112da:	2320      	movs	r3, #32
 80112dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80112e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80112e4:	2330      	movs	r3, #48	; 0x30
 80112e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011490 <_svfiprintf_r+0x1ec>
 80112ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80112ee:	f04f 0901 	mov.w	r9, #1
 80112f2:	4623      	mov	r3, r4
 80112f4:	469a      	mov	sl, r3
 80112f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80112fa:	b10a      	cbz	r2, 8011300 <_svfiprintf_r+0x5c>
 80112fc:	2a25      	cmp	r2, #37	; 0x25
 80112fe:	d1f9      	bne.n	80112f4 <_svfiprintf_r+0x50>
 8011300:	ebba 0b04 	subs.w	fp, sl, r4
 8011304:	d00b      	beq.n	801131e <_svfiprintf_r+0x7a>
 8011306:	465b      	mov	r3, fp
 8011308:	4622      	mov	r2, r4
 801130a:	4629      	mov	r1, r5
 801130c:	4638      	mov	r0, r7
 801130e:	f7ff ff6d 	bl	80111ec <__ssputs_r>
 8011312:	3001      	adds	r0, #1
 8011314:	f000 80aa 	beq.w	801146c <_svfiprintf_r+0x1c8>
 8011318:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801131a:	445a      	add	r2, fp
 801131c:	9209      	str	r2, [sp, #36]	; 0x24
 801131e:	f89a 3000 	ldrb.w	r3, [sl]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f000 80a2 	beq.w	801146c <_svfiprintf_r+0x1c8>
 8011328:	2300      	movs	r3, #0
 801132a:	f04f 32ff 	mov.w	r2, #4294967295
 801132e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011332:	f10a 0a01 	add.w	sl, sl, #1
 8011336:	9304      	str	r3, [sp, #16]
 8011338:	9307      	str	r3, [sp, #28]
 801133a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801133e:	931a      	str	r3, [sp, #104]	; 0x68
 8011340:	4654      	mov	r4, sl
 8011342:	2205      	movs	r2, #5
 8011344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011348:	4851      	ldr	r0, [pc, #324]	; (8011490 <_svfiprintf_r+0x1ec>)
 801134a:	f7ee ffc9 	bl	80002e0 <memchr>
 801134e:	9a04      	ldr	r2, [sp, #16]
 8011350:	b9d8      	cbnz	r0, 801138a <_svfiprintf_r+0xe6>
 8011352:	06d0      	lsls	r0, r2, #27
 8011354:	bf44      	itt	mi
 8011356:	2320      	movmi	r3, #32
 8011358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801135c:	0711      	lsls	r1, r2, #28
 801135e:	bf44      	itt	mi
 8011360:	232b      	movmi	r3, #43	; 0x2b
 8011362:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011366:	f89a 3000 	ldrb.w	r3, [sl]
 801136a:	2b2a      	cmp	r3, #42	; 0x2a
 801136c:	d015      	beq.n	801139a <_svfiprintf_r+0xf6>
 801136e:	9a07      	ldr	r2, [sp, #28]
 8011370:	4654      	mov	r4, sl
 8011372:	2000      	movs	r0, #0
 8011374:	f04f 0c0a 	mov.w	ip, #10
 8011378:	4621      	mov	r1, r4
 801137a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801137e:	3b30      	subs	r3, #48	; 0x30
 8011380:	2b09      	cmp	r3, #9
 8011382:	d94e      	bls.n	8011422 <_svfiprintf_r+0x17e>
 8011384:	b1b0      	cbz	r0, 80113b4 <_svfiprintf_r+0x110>
 8011386:	9207      	str	r2, [sp, #28]
 8011388:	e014      	b.n	80113b4 <_svfiprintf_r+0x110>
 801138a:	eba0 0308 	sub.w	r3, r0, r8
 801138e:	fa09 f303 	lsl.w	r3, r9, r3
 8011392:	4313      	orrs	r3, r2
 8011394:	9304      	str	r3, [sp, #16]
 8011396:	46a2      	mov	sl, r4
 8011398:	e7d2      	b.n	8011340 <_svfiprintf_r+0x9c>
 801139a:	9b03      	ldr	r3, [sp, #12]
 801139c:	1d19      	adds	r1, r3, #4
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	9103      	str	r1, [sp, #12]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	bfbb      	ittet	lt
 80113a6:	425b      	neglt	r3, r3
 80113a8:	f042 0202 	orrlt.w	r2, r2, #2
 80113ac:	9307      	strge	r3, [sp, #28]
 80113ae:	9307      	strlt	r3, [sp, #28]
 80113b0:	bfb8      	it	lt
 80113b2:	9204      	strlt	r2, [sp, #16]
 80113b4:	7823      	ldrb	r3, [r4, #0]
 80113b6:	2b2e      	cmp	r3, #46	; 0x2e
 80113b8:	d10c      	bne.n	80113d4 <_svfiprintf_r+0x130>
 80113ba:	7863      	ldrb	r3, [r4, #1]
 80113bc:	2b2a      	cmp	r3, #42	; 0x2a
 80113be:	d135      	bne.n	801142c <_svfiprintf_r+0x188>
 80113c0:	9b03      	ldr	r3, [sp, #12]
 80113c2:	1d1a      	adds	r2, r3, #4
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	9203      	str	r2, [sp, #12]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	bfb8      	it	lt
 80113cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80113d0:	3402      	adds	r4, #2
 80113d2:	9305      	str	r3, [sp, #20]
 80113d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80114a0 <_svfiprintf_r+0x1fc>
 80113d8:	7821      	ldrb	r1, [r4, #0]
 80113da:	2203      	movs	r2, #3
 80113dc:	4650      	mov	r0, sl
 80113de:	f7ee ff7f 	bl	80002e0 <memchr>
 80113e2:	b140      	cbz	r0, 80113f6 <_svfiprintf_r+0x152>
 80113e4:	2340      	movs	r3, #64	; 0x40
 80113e6:	eba0 000a 	sub.w	r0, r0, sl
 80113ea:	fa03 f000 	lsl.w	r0, r3, r0
 80113ee:	9b04      	ldr	r3, [sp, #16]
 80113f0:	4303      	orrs	r3, r0
 80113f2:	3401      	adds	r4, #1
 80113f4:	9304      	str	r3, [sp, #16]
 80113f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80113fa:	4826      	ldr	r0, [pc, #152]	; (8011494 <_svfiprintf_r+0x1f0>)
 80113fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011400:	2206      	movs	r2, #6
 8011402:	f7ee ff6d 	bl	80002e0 <memchr>
 8011406:	2800      	cmp	r0, #0
 8011408:	d038      	beq.n	801147c <_svfiprintf_r+0x1d8>
 801140a:	4b23      	ldr	r3, [pc, #140]	; (8011498 <_svfiprintf_r+0x1f4>)
 801140c:	bb1b      	cbnz	r3, 8011456 <_svfiprintf_r+0x1b2>
 801140e:	9b03      	ldr	r3, [sp, #12]
 8011410:	3307      	adds	r3, #7
 8011412:	f023 0307 	bic.w	r3, r3, #7
 8011416:	3308      	adds	r3, #8
 8011418:	9303      	str	r3, [sp, #12]
 801141a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801141c:	4433      	add	r3, r6
 801141e:	9309      	str	r3, [sp, #36]	; 0x24
 8011420:	e767      	b.n	80112f2 <_svfiprintf_r+0x4e>
 8011422:	fb0c 3202 	mla	r2, ip, r2, r3
 8011426:	460c      	mov	r4, r1
 8011428:	2001      	movs	r0, #1
 801142a:	e7a5      	b.n	8011378 <_svfiprintf_r+0xd4>
 801142c:	2300      	movs	r3, #0
 801142e:	3401      	adds	r4, #1
 8011430:	9305      	str	r3, [sp, #20]
 8011432:	4619      	mov	r1, r3
 8011434:	f04f 0c0a 	mov.w	ip, #10
 8011438:	4620      	mov	r0, r4
 801143a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801143e:	3a30      	subs	r2, #48	; 0x30
 8011440:	2a09      	cmp	r2, #9
 8011442:	d903      	bls.n	801144c <_svfiprintf_r+0x1a8>
 8011444:	2b00      	cmp	r3, #0
 8011446:	d0c5      	beq.n	80113d4 <_svfiprintf_r+0x130>
 8011448:	9105      	str	r1, [sp, #20]
 801144a:	e7c3      	b.n	80113d4 <_svfiprintf_r+0x130>
 801144c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011450:	4604      	mov	r4, r0
 8011452:	2301      	movs	r3, #1
 8011454:	e7f0      	b.n	8011438 <_svfiprintf_r+0x194>
 8011456:	ab03      	add	r3, sp, #12
 8011458:	9300      	str	r3, [sp, #0]
 801145a:	462a      	mov	r2, r5
 801145c:	4b0f      	ldr	r3, [pc, #60]	; (801149c <_svfiprintf_r+0x1f8>)
 801145e:	a904      	add	r1, sp, #16
 8011460:	4638      	mov	r0, r7
 8011462:	f3af 8000 	nop.w
 8011466:	1c42      	adds	r2, r0, #1
 8011468:	4606      	mov	r6, r0
 801146a:	d1d6      	bne.n	801141a <_svfiprintf_r+0x176>
 801146c:	89ab      	ldrh	r3, [r5, #12]
 801146e:	065b      	lsls	r3, r3, #25
 8011470:	f53f af2c 	bmi.w	80112cc <_svfiprintf_r+0x28>
 8011474:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011476:	b01d      	add	sp, #116	; 0x74
 8011478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801147c:	ab03      	add	r3, sp, #12
 801147e:	9300      	str	r3, [sp, #0]
 8011480:	462a      	mov	r2, r5
 8011482:	4b06      	ldr	r3, [pc, #24]	; (801149c <_svfiprintf_r+0x1f8>)
 8011484:	a904      	add	r1, sp, #16
 8011486:	4638      	mov	r0, r7
 8011488:	f000 f9d4 	bl	8011834 <_printf_i>
 801148c:	e7eb      	b.n	8011466 <_svfiprintf_r+0x1c2>
 801148e:	bf00      	nop
 8011490:	0801228c 	.word	0x0801228c
 8011494:	08012296 	.word	0x08012296
 8011498:	00000000 	.word	0x00000000
 801149c:	080111ed 	.word	0x080111ed
 80114a0:	08012292 	.word	0x08012292

080114a4 <__sfputc_r>:
 80114a4:	6893      	ldr	r3, [r2, #8]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	b410      	push	{r4}
 80114ac:	6093      	str	r3, [r2, #8]
 80114ae:	da08      	bge.n	80114c2 <__sfputc_r+0x1e>
 80114b0:	6994      	ldr	r4, [r2, #24]
 80114b2:	42a3      	cmp	r3, r4
 80114b4:	db01      	blt.n	80114ba <__sfputc_r+0x16>
 80114b6:	290a      	cmp	r1, #10
 80114b8:	d103      	bne.n	80114c2 <__sfputc_r+0x1e>
 80114ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114be:	f7ff bba9 	b.w	8010c14 <__swbuf_r>
 80114c2:	6813      	ldr	r3, [r2, #0]
 80114c4:	1c58      	adds	r0, r3, #1
 80114c6:	6010      	str	r0, [r2, #0]
 80114c8:	7019      	strb	r1, [r3, #0]
 80114ca:	4608      	mov	r0, r1
 80114cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114d0:	4770      	bx	lr

080114d2 <__sfputs_r>:
 80114d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114d4:	4606      	mov	r6, r0
 80114d6:	460f      	mov	r7, r1
 80114d8:	4614      	mov	r4, r2
 80114da:	18d5      	adds	r5, r2, r3
 80114dc:	42ac      	cmp	r4, r5
 80114de:	d101      	bne.n	80114e4 <__sfputs_r+0x12>
 80114e0:	2000      	movs	r0, #0
 80114e2:	e007      	b.n	80114f4 <__sfputs_r+0x22>
 80114e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80114e8:	463a      	mov	r2, r7
 80114ea:	4630      	mov	r0, r6
 80114ec:	f7ff ffda 	bl	80114a4 <__sfputc_r>
 80114f0:	1c43      	adds	r3, r0, #1
 80114f2:	d1f3      	bne.n	80114dc <__sfputs_r+0xa>
 80114f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080114f8 <_vfiprintf_r>:
 80114f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114fc:	460d      	mov	r5, r1
 80114fe:	b09d      	sub	sp, #116	; 0x74
 8011500:	4614      	mov	r4, r2
 8011502:	4698      	mov	r8, r3
 8011504:	4606      	mov	r6, r0
 8011506:	b118      	cbz	r0, 8011510 <_vfiprintf_r+0x18>
 8011508:	6983      	ldr	r3, [r0, #24]
 801150a:	b90b      	cbnz	r3, 8011510 <_vfiprintf_r+0x18>
 801150c:	f7ff fd5c 	bl	8010fc8 <__sinit>
 8011510:	4b89      	ldr	r3, [pc, #548]	; (8011738 <_vfiprintf_r+0x240>)
 8011512:	429d      	cmp	r5, r3
 8011514:	d11b      	bne.n	801154e <_vfiprintf_r+0x56>
 8011516:	6875      	ldr	r5, [r6, #4]
 8011518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801151a:	07d9      	lsls	r1, r3, #31
 801151c:	d405      	bmi.n	801152a <_vfiprintf_r+0x32>
 801151e:	89ab      	ldrh	r3, [r5, #12]
 8011520:	059a      	lsls	r2, r3, #22
 8011522:	d402      	bmi.n	801152a <_vfiprintf_r+0x32>
 8011524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011526:	f7ff fded 	bl	8011104 <__retarget_lock_acquire_recursive>
 801152a:	89ab      	ldrh	r3, [r5, #12]
 801152c:	071b      	lsls	r3, r3, #28
 801152e:	d501      	bpl.n	8011534 <_vfiprintf_r+0x3c>
 8011530:	692b      	ldr	r3, [r5, #16]
 8011532:	b9eb      	cbnz	r3, 8011570 <_vfiprintf_r+0x78>
 8011534:	4629      	mov	r1, r5
 8011536:	4630      	mov	r0, r6
 8011538:	f7ff fbbe 	bl	8010cb8 <__swsetup_r>
 801153c:	b1c0      	cbz	r0, 8011570 <_vfiprintf_r+0x78>
 801153e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011540:	07dc      	lsls	r4, r3, #31
 8011542:	d50e      	bpl.n	8011562 <_vfiprintf_r+0x6a>
 8011544:	f04f 30ff 	mov.w	r0, #4294967295
 8011548:	b01d      	add	sp, #116	; 0x74
 801154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801154e:	4b7b      	ldr	r3, [pc, #492]	; (801173c <_vfiprintf_r+0x244>)
 8011550:	429d      	cmp	r5, r3
 8011552:	d101      	bne.n	8011558 <_vfiprintf_r+0x60>
 8011554:	68b5      	ldr	r5, [r6, #8]
 8011556:	e7df      	b.n	8011518 <_vfiprintf_r+0x20>
 8011558:	4b79      	ldr	r3, [pc, #484]	; (8011740 <_vfiprintf_r+0x248>)
 801155a:	429d      	cmp	r5, r3
 801155c:	bf08      	it	eq
 801155e:	68f5      	ldreq	r5, [r6, #12]
 8011560:	e7da      	b.n	8011518 <_vfiprintf_r+0x20>
 8011562:	89ab      	ldrh	r3, [r5, #12]
 8011564:	0598      	lsls	r0, r3, #22
 8011566:	d4ed      	bmi.n	8011544 <_vfiprintf_r+0x4c>
 8011568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801156a:	f7ff fdcc 	bl	8011106 <__retarget_lock_release_recursive>
 801156e:	e7e9      	b.n	8011544 <_vfiprintf_r+0x4c>
 8011570:	2300      	movs	r3, #0
 8011572:	9309      	str	r3, [sp, #36]	; 0x24
 8011574:	2320      	movs	r3, #32
 8011576:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801157a:	f8cd 800c 	str.w	r8, [sp, #12]
 801157e:	2330      	movs	r3, #48	; 0x30
 8011580:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011744 <_vfiprintf_r+0x24c>
 8011584:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011588:	f04f 0901 	mov.w	r9, #1
 801158c:	4623      	mov	r3, r4
 801158e:	469a      	mov	sl, r3
 8011590:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011594:	b10a      	cbz	r2, 801159a <_vfiprintf_r+0xa2>
 8011596:	2a25      	cmp	r2, #37	; 0x25
 8011598:	d1f9      	bne.n	801158e <_vfiprintf_r+0x96>
 801159a:	ebba 0b04 	subs.w	fp, sl, r4
 801159e:	d00b      	beq.n	80115b8 <_vfiprintf_r+0xc0>
 80115a0:	465b      	mov	r3, fp
 80115a2:	4622      	mov	r2, r4
 80115a4:	4629      	mov	r1, r5
 80115a6:	4630      	mov	r0, r6
 80115a8:	f7ff ff93 	bl	80114d2 <__sfputs_r>
 80115ac:	3001      	adds	r0, #1
 80115ae:	f000 80aa 	beq.w	8011706 <_vfiprintf_r+0x20e>
 80115b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80115b4:	445a      	add	r2, fp
 80115b6:	9209      	str	r2, [sp, #36]	; 0x24
 80115b8:	f89a 3000 	ldrb.w	r3, [sl]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 80a2 	beq.w	8011706 <_vfiprintf_r+0x20e>
 80115c2:	2300      	movs	r3, #0
 80115c4:	f04f 32ff 	mov.w	r2, #4294967295
 80115c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80115cc:	f10a 0a01 	add.w	sl, sl, #1
 80115d0:	9304      	str	r3, [sp, #16]
 80115d2:	9307      	str	r3, [sp, #28]
 80115d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80115d8:	931a      	str	r3, [sp, #104]	; 0x68
 80115da:	4654      	mov	r4, sl
 80115dc:	2205      	movs	r2, #5
 80115de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e2:	4858      	ldr	r0, [pc, #352]	; (8011744 <_vfiprintf_r+0x24c>)
 80115e4:	f7ee fe7c 	bl	80002e0 <memchr>
 80115e8:	9a04      	ldr	r2, [sp, #16]
 80115ea:	b9d8      	cbnz	r0, 8011624 <_vfiprintf_r+0x12c>
 80115ec:	06d1      	lsls	r1, r2, #27
 80115ee:	bf44      	itt	mi
 80115f0:	2320      	movmi	r3, #32
 80115f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80115f6:	0713      	lsls	r3, r2, #28
 80115f8:	bf44      	itt	mi
 80115fa:	232b      	movmi	r3, #43	; 0x2b
 80115fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011600:	f89a 3000 	ldrb.w	r3, [sl]
 8011604:	2b2a      	cmp	r3, #42	; 0x2a
 8011606:	d015      	beq.n	8011634 <_vfiprintf_r+0x13c>
 8011608:	9a07      	ldr	r2, [sp, #28]
 801160a:	4654      	mov	r4, sl
 801160c:	2000      	movs	r0, #0
 801160e:	f04f 0c0a 	mov.w	ip, #10
 8011612:	4621      	mov	r1, r4
 8011614:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011618:	3b30      	subs	r3, #48	; 0x30
 801161a:	2b09      	cmp	r3, #9
 801161c:	d94e      	bls.n	80116bc <_vfiprintf_r+0x1c4>
 801161e:	b1b0      	cbz	r0, 801164e <_vfiprintf_r+0x156>
 8011620:	9207      	str	r2, [sp, #28]
 8011622:	e014      	b.n	801164e <_vfiprintf_r+0x156>
 8011624:	eba0 0308 	sub.w	r3, r0, r8
 8011628:	fa09 f303 	lsl.w	r3, r9, r3
 801162c:	4313      	orrs	r3, r2
 801162e:	9304      	str	r3, [sp, #16]
 8011630:	46a2      	mov	sl, r4
 8011632:	e7d2      	b.n	80115da <_vfiprintf_r+0xe2>
 8011634:	9b03      	ldr	r3, [sp, #12]
 8011636:	1d19      	adds	r1, r3, #4
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	9103      	str	r1, [sp, #12]
 801163c:	2b00      	cmp	r3, #0
 801163e:	bfbb      	ittet	lt
 8011640:	425b      	neglt	r3, r3
 8011642:	f042 0202 	orrlt.w	r2, r2, #2
 8011646:	9307      	strge	r3, [sp, #28]
 8011648:	9307      	strlt	r3, [sp, #28]
 801164a:	bfb8      	it	lt
 801164c:	9204      	strlt	r2, [sp, #16]
 801164e:	7823      	ldrb	r3, [r4, #0]
 8011650:	2b2e      	cmp	r3, #46	; 0x2e
 8011652:	d10c      	bne.n	801166e <_vfiprintf_r+0x176>
 8011654:	7863      	ldrb	r3, [r4, #1]
 8011656:	2b2a      	cmp	r3, #42	; 0x2a
 8011658:	d135      	bne.n	80116c6 <_vfiprintf_r+0x1ce>
 801165a:	9b03      	ldr	r3, [sp, #12]
 801165c:	1d1a      	adds	r2, r3, #4
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	9203      	str	r2, [sp, #12]
 8011662:	2b00      	cmp	r3, #0
 8011664:	bfb8      	it	lt
 8011666:	f04f 33ff 	movlt.w	r3, #4294967295
 801166a:	3402      	adds	r4, #2
 801166c:	9305      	str	r3, [sp, #20]
 801166e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011754 <_vfiprintf_r+0x25c>
 8011672:	7821      	ldrb	r1, [r4, #0]
 8011674:	2203      	movs	r2, #3
 8011676:	4650      	mov	r0, sl
 8011678:	f7ee fe32 	bl	80002e0 <memchr>
 801167c:	b140      	cbz	r0, 8011690 <_vfiprintf_r+0x198>
 801167e:	2340      	movs	r3, #64	; 0x40
 8011680:	eba0 000a 	sub.w	r0, r0, sl
 8011684:	fa03 f000 	lsl.w	r0, r3, r0
 8011688:	9b04      	ldr	r3, [sp, #16]
 801168a:	4303      	orrs	r3, r0
 801168c:	3401      	adds	r4, #1
 801168e:	9304      	str	r3, [sp, #16]
 8011690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011694:	482c      	ldr	r0, [pc, #176]	; (8011748 <_vfiprintf_r+0x250>)
 8011696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801169a:	2206      	movs	r2, #6
 801169c:	f7ee fe20 	bl	80002e0 <memchr>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	d03f      	beq.n	8011724 <_vfiprintf_r+0x22c>
 80116a4:	4b29      	ldr	r3, [pc, #164]	; (801174c <_vfiprintf_r+0x254>)
 80116a6:	bb1b      	cbnz	r3, 80116f0 <_vfiprintf_r+0x1f8>
 80116a8:	9b03      	ldr	r3, [sp, #12]
 80116aa:	3307      	adds	r3, #7
 80116ac:	f023 0307 	bic.w	r3, r3, #7
 80116b0:	3308      	adds	r3, #8
 80116b2:	9303      	str	r3, [sp, #12]
 80116b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116b6:	443b      	add	r3, r7
 80116b8:	9309      	str	r3, [sp, #36]	; 0x24
 80116ba:	e767      	b.n	801158c <_vfiprintf_r+0x94>
 80116bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80116c0:	460c      	mov	r4, r1
 80116c2:	2001      	movs	r0, #1
 80116c4:	e7a5      	b.n	8011612 <_vfiprintf_r+0x11a>
 80116c6:	2300      	movs	r3, #0
 80116c8:	3401      	adds	r4, #1
 80116ca:	9305      	str	r3, [sp, #20]
 80116cc:	4619      	mov	r1, r3
 80116ce:	f04f 0c0a 	mov.w	ip, #10
 80116d2:	4620      	mov	r0, r4
 80116d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116d8:	3a30      	subs	r2, #48	; 0x30
 80116da:	2a09      	cmp	r2, #9
 80116dc:	d903      	bls.n	80116e6 <_vfiprintf_r+0x1ee>
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d0c5      	beq.n	801166e <_vfiprintf_r+0x176>
 80116e2:	9105      	str	r1, [sp, #20]
 80116e4:	e7c3      	b.n	801166e <_vfiprintf_r+0x176>
 80116e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80116ea:	4604      	mov	r4, r0
 80116ec:	2301      	movs	r3, #1
 80116ee:	e7f0      	b.n	80116d2 <_vfiprintf_r+0x1da>
 80116f0:	ab03      	add	r3, sp, #12
 80116f2:	9300      	str	r3, [sp, #0]
 80116f4:	462a      	mov	r2, r5
 80116f6:	4b16      	ldr	r3, [pc, #88]	; (8011750 <_vfiprintf_r+0x258>)
 80116f8:	a904      	add	r1, sp, #16
 80116fa:	4630      	mov	r0, r6
 80116fc:	f3af 8000 	nop.w
 8011700:	4607      	mov	r7, r0
 8011702:	1c78      	adds	r0, r7, #1
 8011704:	d1d6      	bne.n	80116b4 <_vfiprintf_r+0x1bc>
 8011706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011708:	07d9      	lsls	r1, r3, #31
 801170a:	d405      	bmi.n	8011718 <_vfiprintf_r+0x220>
 801170c:	89ab      	ldrh	r3, [r5, #12]
 801170e:	059a      	lsls	r2, r3, #22
 8011710:	d402      	bmi.n	8011718 <_vfiprintf_r+0x220>
 8011712:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011714:	f7ff fcf7 	bl	8011106 <__retarget_lock_release_recursive>
 8011718:	89ab      	ldrh	r3, [r5, #12]
 801171a:	065b      	lsls	r3, r3, #25
 801171c:	f53f af12 	bmi.w	8011544 <_vfiprintf_r+0x4c>
 8011720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011722:	e711      	b.n	8011548 <_vfiprintf_r+0x50>
 8011724:	ab03      	add	r3, sp, #12
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	462a      	mov	r2, r5
 801172a:	4b09      	ldr	r3, [pc, #36]	; (8011750 <_vfiprintf_r+0x258>)
 801172c:	a904      	add	r1, sp, #16
 801172e:	4630      	mov	r0, r6
 8011730:	f000 f880 	bl	8011834 <_printf_i>
 8011734:	e7e4      	b.n	8011700 <_vfiprintf_r+0x208>
 8011736:	bf00      	nop
 8011738:	0801224c 	.word	0x0801224c
 801173c:	0801226c 	.word	0x0801226c
 8011740:	0801222c 	.word	0x0801222c
 8011744:	0801228c 	.word	0x0801228c
 8011748:	08012296 	.word	0x08012296
 801174c:	00000000 	.word	0x00000000
 8011750:	080114d3 	.word	0x080114d3
 8011754:	08012292 	.word	0x08012292

08011758 <_printf_common>:
 8011758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801175c:	4616      	mov	r6, r2
 801175e:	4699      	mov	r9, r3
 8011760:	688a      	ldr	r2, [r1, #8]
 8011762:	690b      	ldr	r3, [r1, #16]
 8011764:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011768:	4293      	cmp	r3, r2
 801176a:	bfb8      	it	lt
 801176c:	4613      	movlt	r3, r2
 801176e:	6033      	str	r3, [r6, #0]
 8011770:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011774:	4607      	mov	r7, r0
 8011776:	460c      	mov	r4, r1
 8011778:	b10a      	cbz	r2, 801177e <_printf_common+0x26>
 801177a:	3301      	adds	r3, #1
 801177c:	6033      	str	r3, [r6, #0]
 801177e:	6823      	ldr	r3, [r4, #0]
 8011780:	0699      	lsls	r1, r3, #26
 8011782:	bf42      	ittt	mi
 8011784:	6833      	ldrmi	r3, [r6, #0]
 8011786:	3302      	addmi	r3, #2
 8011788:	6033      	strmi	r3, [r6, #0]
 801178a:	6825      	ldr	r5, [r4, #0]
 801178c:	f015 0506 	ands.w	r5, r5, #6
 8011790:	d106      	bne.n	80117a0 <_printf_common+0x48>
 8011792:	f104 0a19 	add.w	sl, r4, #25
 8011796:	68e3      	ldr	r3, [r4, #12]
 8011798:	6832      	ldr	r2, [r6, #0]
 801179a:	1a9b      	subs	r3, r3, r2
 801179c:	42ab      	cmp	r3, r5
 801179e:	dc26      	bgt.n	80117ee <_printf_common+0x96>
 80117a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80117a4:	1e13      	subs	r3, r2, #0
 80117a6:	6822      	ldr	r2, [r4, #0]
 80117a8:	bf18      	it	ne
 80117aa:	2301      	movne	r3, #1
 80117ac:	0692      	lsls	r2, r2, #26
 80117ae:	d42b      	bmi.n	8011808 <_printf_common+0xb0>
 80117b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80117b4:	4649      	mov	r1, r9
 80117b6:	4638      	mov	r0, r7
 80117b8:	47c0      	blx	r8
 80117ba:	3001      	adds	r0, #1
 80117bc:	d01e      	beq.n	80117fc <_printf_common+0xa4>
 80117be:	6823      	ldr	r3, [r4, #0]
 80117c0:	68e5      	ldr	r5, [r4, #12]
 80117c2:	6832      	ldr	r2, [r6, #0]
 80117c4:	f003 0306 	and.w	r3, r3, #6
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	bf08      	it	eq
 80117cc:	1aad      	subeq	r5, r5, r2
 80117ce:	68a3      	ldr	r3, [r4, #8]
 80117d0:	6922      	ldr	r2, [r4, #16]
 80117d2:	bf0c      	ite	eq
 80117d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80117d8:	2500      	movne	r5, #0
 80117da:	4293      	cmp	r3, r2
 80117dc:	bfc4      	itt	gt
 80117de:	1a9b      	subgt	r3, r3, r2
 80117e0:	18ed      	addgt	r5, r5, r3
 80117e2:	2600      	movs	r6, #0
 80117e4:	341a      	adds	r4, #26
 80117e6:	42b5      	cmp	r5, r6
 80117e8:	d11a      	bne.n	8011820 <_printf_common+0xc8>
 80117ea:	2000      	movs	r0, #0
 80117ec:	e008      	b.n	8011800 <_printf_common+0xa8>
 80117ee:	2301      	movs	r3, #1
 80117f0:	4652      	mov	r2, sl
 80117f2:	4649      	mov	r1, r9
 80117f4:	4638      	mov	r0, r7
 80117f6:	47c0      	blx	r8
 80117f8:	3001      	adds	r0, #1
 80117fa:	d103      	bne.n	8011804 <_printf_common+0xac>
 80117fc:	f04f 30ff 	mov.w	r0, #4294967295
 8011800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011804:	3501      	adds	r5, #1
 8011806:	e7c6      	b.n	8011796 <_printf_common+0x3e>
 8011808:	18e1      	adds	r1, r4, r3
 801180a:	1c5a      	adds	r2, r3, #1
 801180c:	2030      	movs	r0, #48	; 0x30
 801180e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011812:	4422      	add	r2, r4
 8011814:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011818:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801181c:	3302      	adds	r3, #2
 801181e:	e7c7      	b.n	80117b0 <_printf_common+0x58>
 8011820:	2301      	movs	r3, #1
 8011822:	4622      	mov	r2, r4
 8011824:	4649      	mov	r1, r9
 8011826:	4638      	mov	r0, r7
 8011828:	47c0      	blx	r8
 801182a:	3001      	adds	r0, #1
 801182c:	d0e6      	beq.n	80117fc <_printf_common+0xa4>
 801182e:	3601      	adds	r6, #1
 8011830:	e7d9      	b.n	80117e6 <_printf_common+0x8e>
	...

08011834 <_printf_i>:
 8011834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011838:	7e0f      	ldrb	r7, [r1, #24]
 801183a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801183c:	2f78      	cmp	r7, #120	; 0x78
 801183e:	4691      	mov	r9, r2
 8011840:	4680      	mov	r8, r0
 8011842:	460c      	mov	r4, r1
 8011844:	469a      	mov	sl, r3
 8011846:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801184a:	d807      	bhi.n	801185c <_printf_i+0x28>
 801184c:	2f62      	cmp	r7, #98	; 0x62
 801184e:	d80a      	bhi.n	8011866 <_printf_i+0x32>
 8011850:	2f00      	cmp	r7, #0
 8011852:	f000 80d8 	beq.w	8011a06 <_printf_i+0x1d2>
 8011856:	2f58      	cmp	r7, #88	; 0x58
 8011858:	f000 80a3 	beq.w	80119a2 <_printf_i+0x16e>
 801185c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011860:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011864:	e03a      	b.n	80118dc <_printf_i+0xa8>
 8011866:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801186a:	2b15      	cmp	r3, #21
 801186c:	d8f6      	bhi.n	801185c <_printf_i+0x28>
 801186e:	a101      	add	r1, pc, #4	; (adr r1, 8011874 <_printf_i+0x40>)
 8011870:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011874:	080118cd 	.word	0x080118cd
 8011878:	080118e1 	.word	0x080118e1
 801187c:	0801185d 	.word	0x0801185d
 8011880:	0801185d 	.word	0x0801185d
 8011884:	0801185d 	.word	0x0801185d
 8011888:	0801185d 	.word	0x0801185d
 801188c:	080118e1 	.word	0x080118e1
 8011890:	0801185d 	.word	0x0801185d
 8011894:	0801185d 	.word	0x0801185d
 8011898:	0801185d 	.word	0x0801185d
 801189c:	0801185d 	.word	0x0801185d
 80118a0:	080119ed 	.word	0x080119ed
 80118a4:	08011911 	.word	0x08011911
 80118a8:	080119cf 	.word	0x080119cf
 80118ac:	0801185d 	.word	0x0801185d
 80118b0:	0801185d 	.word	0x0801185d
 80118b4:	08011a0f 	.word	0x08011a0f
 80118b8:	0801185d 	.word	0x0801185d
 80118bc:	08011911 	.word	0x08011911
 80118c0:	0801185d 	.word	0x0801185d
 80118c4:	0801185d 	.word	0x0801185d
 80118c8:	080119d7 	.word	0x080119d7
 80118cc:	682b      	ldr	r3, [r5, #0]
 80118ce:	1d1a      	adds	r2, r3, #4
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	602a      	str	r2, [r5, #0]
 80118d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80118d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80118dc:	2301      	movs	r3, #1
 80118de:	e0a3      	b.n	8011a28 <_printf_i+0x1f4>
 80118e0:	6820      	ldr	r0, [r4, #0]
 80118e2:	6829      	ldr	r1, [r5, #0]
 80118e4:	0606      	lsls	r6, r0, #24
 80118e6:	f101 0304 	add.w	r3, r1, #4
 80118ea:	d50a      	bpl.n	8011902 <_printf_i+0xce>
 80118ec:	680e      	ldr	r6, [r1, #0]
 80118ee:	602b      	str	r3, [r5, #0]
 80118f0:	2e00      	cmp	r6, #0
 80118f2:	da03      	bge.n	80118fc <_printf_i+0xc8>
 80118f4:	232d      	movs	r3, #45	; 0x2d
 80118f6:	4276      	negs	r6, r6
 80118f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118fc:	485e      	ldr	r0, [pc, #376]	; (8011a78 <_printf_i+0x244>)
 80118fe:	230a      	movs	r3, #10
 8011900:	e019      	b.n	8011936 <_printf_i+0x102>
 8011902:	680e      	ldr	r6, [r1, #0]
 8011904:	602b      	str	r3, [r5, #0]
 8011906:	f010 0f40 	tst.w	r0, #64	; 0x40
 801190a:	bf18      	it	ne
 801190c:	b236      	sxthne	r6, r6
 801190e:	e7ef      	b.n	80118f0 <_printf_i+0xbc>
 8011910:	682b      	ldr	r3, [r5, #0]
 8011912:	6820      	ldr	r0, [r4, #0]
 8011914:	1d19      	adds	r1, r3, #4
 8011916:	6029      	str	r1, [r5, #0]
 8011918:	0601      	lsls	r1, r0, #24
 801191a:	d501      	bpl.n	8011920 <_printf_i+0xec>
 801191c:	681e      	ldr	r6, [r3, #0]
 801191e:	e002      	b.n	8011926 <_printf_i+0xf2>
 8011920:	0646      	lsls	r6, r0, #25
 8011922:	d5fb      	bpl.n	801191c <_printf_i+0xe8>
 8011924:	881e      	ldrh	r6, [r3, #0]
 8011926:	4854      	ldr	r0, [pc, #336]	; (8011a78 <_printf_i+0x244>)
 8011928:	2f6f      	cmp	r7, #111	; 0x6f
 801192a:	bf0c      	ite	eq
 801192c:	2308      	moveq	r3, #8
 801192e:	230a      	movne	r3, #10
 8011930:	2100      	movs	r1, #0
 8011932:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011936:	6865      	ldr	r5, [r4, #4]
 8011938:	60a5      	str	r5, [r4, #8]
 801193a:	2d00      	cmp	r5, #0
 801193c:	bfa2      	ittt	ge
 801193e:	6821      	ldrge	r1, [r4, #0]
 8011940:	f021 0104 	bicge.w	r1, r1, #4
 8011944:	6021      	strge	r1, [r4, #0]
 8011946:	b90e      	cbnz	r6, 801194c <_printf_i+0x118>
 8011948:	2d00      	cmp	r5, #0
 801194a:	d04d      	beq.n	80119e8 <_printf_i+0x1b4>
 801194c:	4615      	mov	r5, r2
 801194e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011952:	fb03 6711 	mls	r7, r3, r1, r6
 8011956:	5dc7      	ldrb	r7, [r0, r7]
 8011958:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801195c:	4637      	mov	r7, r6
 801195e:	42bb      	cmp	r3, r7
 8011960:	460e      	mov	r6, r1
 8011962:	d9f4      	bls.n	801194e <_printf_i+0x11a>
 8011964:	2b08      	cmp	r3, #8
 8011966:	d10b      	bne.n	8011980 <_printf_i+0x14c>
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	07de      	lsls	r6, r3, #31
 801196c:	d508      	bpl.n	8011980 <_printf_i+0x14c>
 801196e:	6923      	ldr	r3, [r4, #16]
 8011970:	6861      	ldr	r1, [r4, #4]
 8011972:	4299      	cmp	r1, r3
 8011974:	bfde      	ittt	le
 8011976:	2330      	movle	r3, #48	; 0x30
 8011978:	f805 3c01 	strble.w	r3, [r5, #-1]
 801197c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011980:	1b52      	subs	r2, r2, r5
 8011982:	6122      	str	r2, [r4, #16]
 8011984:	f8cd a000 	str.w	sl, [sp]
 8011988:	464b      	mov	r3, r9
 801198a:	aa03      	add	r2, sp, #12
 801198c:	4621      	mov	r1, r4
 801198e:	4640      	mov	r0, r8
 8011990:	f7ff fee2 	bl	8011758 <_printf_common>
 8011994:	3001      	adds	r0, #1
 8011996:	d14c      	bne.n	8011a32 <_printf_i+0x1fe>
 8011998:	f04f 30ff 	mov.w	r0, #4294967295
 801199c:	b004      	add	sp, #16
 801199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a2:	4835      	ldr	r0, [pc, #212]	; (8011a78 <_printf_i+0x244>)
 80119a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80119a8:	6829      	ldr	r1, [r5, #0]
 80119aa:	6823      	ldr	r3, [r4, #0]
 80119ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80119b0:	6029      	str	r1, [r5, #0]
 80119b2:	061d      	lsls	r5, r3, #24
 80119b4:	d514      	bpl.n	80119e0 <_printf_i+0x1ac>
 80119b6:	07df      	lsls	r7, r3, #31
 80119b8:	bf44      	itt	mi
 80119ba:	f043 0320 	orrmi.w	r3, r3, #32
 80119be:	6023      	strmi	r3, [r4, #0]
 80119c0:	b91e      	cbnz	r6, 80119ca <_printf_i+0x196>
 80119c2:	6823      	ldr	r3, [r4, #0]
 80119c4:	f023 0320 	bic.w	r3, r3, #32
 80119c8:	6023      	str	r3, [r4, #0]
 80119ca:	2310      	movs	r3, #16
 80119cc:	e7b0      	b.n	8011930 <_printf_i+0xfc>
 80119ce:	6823      	ldr	r3, [r4, #0]
 80119d0:	f043 0320 	orr.w	r3, r3, #32
 80119d4:	6023      	str	r3, [r4, #0]
 80119d6:	2378      	movs	r3, #120	; 0x78
 80119d8:	4828      	ldr	r0, [pc, #160]	; (8011a7c <_printf_i+0x248>)
 80119da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80119de:	e7e3      	b.n	80119a8 <_printf_i+0x174>
 80119e0:	0659      	lsls	r1, r3, #25
 80119e2:	bf48      	it	mi
 80119e4:	b2b6      	uxthmi	r6, r6
 80119e6:	e7e6      	b.n	80119b6 <_printf_i+0x182>
 80119e8:	4615      	mov	r5, r2
 80119ea:	e7bb      	b.n	8011964 <_printf_i+0x130>
 80119ec:	682b      	ldr	r3, [r5, #0]
 80119ee:	6826      	ldr	r6, [r4, #0]
 80119f0:	6961      	ldr	r1, [r4, #20]
 80119f2:	1d18      	adds	r0, r3, #4
 80119f4:	6028      	str	r0, [r5, #0]
 80119f6:	0635      	lsls	r5, r6, #24
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	d501      	bpl.n	8011a00 <_printf_i+0x1cc>
 80119fc:	6019      	str	r1, [r3, #0]
 80119fe:	e002      	b.n	8011a06 <_printf_i+0x1d2>
 8011a00:	0670      	lsls	r0, r6, #25
 8011a02:	d5fb      	bpl.n	80119fc <_printf_i+0x1c8>
 8011a04:	8019      	strh	r1, [r3, #0]
 8011a06:	2300      	movs	r3, #0
 8011a08:	6123      	str	r3, [r4, #16]
 8011a0a:	4615      	mov	r5, r2
 8011a0c:	e7ba      	b.n	8011984 <_printf_i+0x150>
 8011a0e:	682b      	ldr	r3, [r5, #0]
 8011a10:	1d1a      	adds	r2, r3, #4
 8011a12:	602a      	str	r2, [r5, #0]
 8011a14:	681d      	ldr	r5, [r3, #0]
 8011a16:	6862      	ldr	r2, [r4, #4]
 8011a18:	2100      	movs	r1, #0
 8011a1a:	4628      	mov	r0, r5
 8011a1c:	f7ee fc60 	bl	80002e0 <memchr>
 8011a20:	b108      	cbz	r0, 8011a26 <_printf_i+0x1f2>
 8011a22:	1b40      	subs	r0, r0, r5
 8011a24:	6060      	str	r0, [r4, #4]
 8011a26:	6863      	ldr	r3, [r4, #4]
 8011a28:	6123      	str	r3, [r4, #16]
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011a30:	e7a8      	b.n	8011984 <_printf_i+0x150>
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	462a      	mov	r2, r5
 8011a36:	4649      	mov	r1, r9
 8011a38:	4640      	mov	r0, r8
 8011a3a:	47d0      	blx	sl
 8011a3c:	3001      	adds	r0, #1
 8011a3e:	d0ab      	beq.n	8011998 <_printf_i+0x164>
 8011a40:	6823      	ldr	r3, [r4, #0]
 8011a42:	079b      	lsls	r3, r3, #30
 8011a44:	d413      	bmi.n	8011a6e <_printf_i+0x23a>
 8011a46:	68e0      	ldr	r0, [r4, #12]
 8011a48:	9b03      	ldr	r3, [sp, #12]
 8011a4a:	4298      	cmp	r0, r3
 8011a4c:	bfb8      	it	lt
 8011a4e:	4618      	movlt	r0, r3
 8011a50:	e7a4      	b.n	801199c <_printf_i+0x168>
 8011a52:	2301      	movs	r3, #1
 8011a54:	4632      	mov	r2, r6
 8011a56:	4649      	mov	r1, r9
 8011a58:	4640      	mov	r0, r8
 8011a5a:	47d0      	blx	sl
 8011a5c:	3001      	adds	r0, #1
 8011a5e:	d09b      	beq.n	8011998 <_printf_i+0x164>
 8011a60:	3501      	adds	r5, #1
 8011a62:	68e3      	ldr	r3, [r4, #12]
 8011a64:	9903      	ldr	r1, [sp, #12]
 8011a66:	1a5b      	subs	r3, r3, r1
 8011a68:	42ab      	cmp	r3, r5
 8011a6a:	dcf2      	bgt.n	8011a52 <_printf_i+0x21e>
 8011a6c:	e7eb      	b.n	8011a46 <_printf_i+0x212>
 8011a6e:	2500      	movs	r5, #0
 8011a70:	f104 0619 	add.w	r6, r4, #25
 8011a74:	e7f5      	b.n	8011a62 <_printf_i+0x22e>
 8011a76:	bf00      	nop
 8011a78:	0801229d 	.word	0x0801229d
 8011a7c:	080122ae 	.word	0x080122ae

08011a80 <__sread>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	460c      	mov	r4, r1
 8011a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a88:	f000 f8ec 	bl	8011c64 <_read_r>
 8011a8c:	2800      	cmp	r0, #0
 8011a8e:	bfab      	itete	ge
 8011a90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a92:	89a3      	ldrhlt	r3, [r4, #12]
 8011a94:	181b      	addge	r3, r3, r0
 8011a96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a9a:	bfac      	ite	ge
 8011a9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a9e:	81a3      	strhlt	r3, [r4, #12]
 8011aa0:	bd10      	pop	{r4, pc}

08011aa2 <__swrite>:
 8011aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa6:	461f      	mov	r7, r3
 8011aa8:	898b      	ldrh	r3, [r1, #12]
 8011aaa:	05db      	lsls	r3, r3, #23
 8011aac:	4605      	mov	r5, r0
 8011aae:	460c      	mov	r4, r1
 8011ab0:	4616      	mov	r6, r2
 8011ab2:	d505      	bpl.n	8011ac0 <__swrite+0x1e>
 8011ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ab8:	2302      	movs	r3, #2
 8011aba:	2200      	movs	r2, #0
 8011abc:	f000 f868 	bl	8011b90 <_lseek_r>
 8011ac0:	89a3      	ldrh	r3, [r4, #12]
 8011ac2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ac6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011aca:	81a3      	strh	r3, [r4, #12]
 8011acc:	4632      	mov	r2, r6
 8011ace:	463b      	mov	r3, r7
 8011ad0:	4628      	mov	r0, r5
 8011ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ad6:	f000 b817 	b.w	8011b08 <_write_r>

08011ada <__sseek>:
 8011ada:	b510      	push	{r4, lr}
 8011adc:	460c      	mov	r4, r1
 8011ade:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ae2:	f000 f855 	bl	8011b90 <_lseek_r>
 8011ae6:	1c43      	adds	r3, r0, #1
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	bf15      	itete	ne
 8011aec:	6560      	strne	r0, [r4, #84]	; 0x54
 8011aee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011af2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011af6:	81a3      	strheq	r3, [r4, #12]
 8011af8:	bf18      	it	ne
 8011afa:	81a3      	strhne	r3, [r4, #12]
 8011afc:	bd10      	pop	{r4, pc}

08011afe <__sclose>:
 8011afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b02:	f000 b813 	b.w	8011b2c <_close_r>
	...

08011b08 <_write_r>:
 8011b08:	b538      	push	{r3, r4, r5, lr}
 8011b0a:	4d07      	ldr	r5, [pc, #28]	; (8011b28 <_write_r+0x20>)
 8011b0c:	4604      	mov	r4, r0
 8011b0e:	4608      	mov	r0, r1
 8011b10:	4611      	mov	r1, r2
 8011b12:	2200      	movs	r2, #0
 8011b14:	602a      	str	r2, [r5, #0]
 8011b16:	461a      	mov	r2, r3
 8011b18:	f7f0 f891 	bl	8001c3e <_write>
 8011b1c:	1c43      	adds	r3, r0, #1
 8011b1e:	d102      	bne.n	8011b26 <_write_r+0x1e>
 8011b20:	682b      	ldr	r3, [r5, #0]
 8011b22:	b103      	cbz	r3, 8011b26 <_write_r+0x1e>
 8011b24:	6023      	str	r3, [r4, #0]
 8011b26:	bd38      	pop	{r3, r4, r5, pc}
 8011b28:	240027f0 	.word	0x240027f0

08011b2c <_close_r>:
 8011b2c:	b538      	push	{r3, r4, r5, lr}
 8011b2e:	4d06      	ldr	r5, [pc, #24]	; (8011b48 <_close_r+0x1c>)
 8011b30:	2300      	movs	r3, #0
 8011b32:	4604      	mov	r4, r0
 8011b34:	4608      	mov	r0, r1
 8011b36:	602b      	str	r3, [r5, #0]
 8011b38:	f7f0 f89d 	bl	8001c76 <_close>
 8011b3c:	1c43      	adds	r3, r0, #1
 8011b3e:	d102      	bne.n	8011b46 <_close_r+0x1a>
 8011b40:	682b      	ldr	r3, [r5, #0]
 8011b42:	b103      	cbz	r3, 8011b46 <_close_r+0x1a>
 8011b44:	6023      	str	r3, [r4, #0]
 8011b46:	bd38      	pop	{r3, r4, r5, pc}
 8011b48:	240027f0 	.word	0x240027f0

08011b4c <_fstat_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4d07      	ldr	r5, [pc, #28]	; (8011b6c <_fstat_r+0x20>)
 8011b50:	2300      	movs	r3, #0
 8011b52:	4604      	mov	r4, r0
 8011b54:	4608      	mov	r0, r1
 8011b56:	4611      	mov	r1, r2
 8011b58:	602b      	str	r3, [r5, #0]
 8011b5a:	f7f0 f898 	bl	8001c8e <_fstat>
 8011b5e:	1c43      	adds	r3, r0, #1
 8011b60:	d102      	bne.n	8011b68 <_fstat_r+0x1c>
 8011b62:	682b      	ldr	r3, [r5, #0]
 8011b64:	b103      	cbz	r3, 8011b68 <_fstat_r+0x1c>
 8011b66:	6023      	str	r3, [r4, #0]
 8011b68:	bd38      	pop	{r3, r4, r5, pc}
 8011b6a:	bf00      	nop
 8011b6c:	240027f0 	.word	0x240027f0

08011b70 <_isatty_r>:
 8011b70:	b538      	push	{r3, r4, r5, lr}
 8011b72:	4d06      	ldr	r5, [pc, #24]	; (8011b8c <_isatty_r+0x1c>)
 8011b74:	2300      	movs	r3, #0
 8011b76:	4604      	mov	r4, r0
 8011b78:	4608      	mov	r0, r1
 8011b7a:	602b      	str	r3, [r5, #0]
 8011b7c:	f7f0 f897 	bl	8001cae <_isatty>
 8011b80:	1c43      	adds	r3, r0, #1
 8011b82:	d102      	bne.n	8011b8a <_isatty_r+0x1a>
 8011b84:	682b      	ldr	r3, [r5, #0]
 8011b86:	b103      	cbz	r3, 8011b8a <_isatty_r+0x1a>
 8011b88:	6023      	str	r3, [r4, #0]
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}
 8011b8c:	240027f0 	.word	0x240027f0

08011b90 <_lseek_r>:
 8011b90:	b538      	push	{r3, r4, r5, lr}
 8011b92:	4d07      	ldr	r5, [pc, #28]	; (8011bb0 <_lseek_r+0x20>)
 8011b94:	4604      	mov	r4, r0
 8011b96:	4608      	mov	r0, r1
 8011b98:	4611      	mov	r1, r2
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	602a      	str	r2, [r5, #0]
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	f7f0 f890 	bl	8001cc4 <_lseek>
 8011ba4:	1c43      	adds	r3, r0, #1
 8011ba6:	d102      	bne.n	8011bae <_lseek_r+0x1e>
 8011ba8:	682b      	ldr	r3, [r5, #0]
 8011baa:	b103      	cbz	r3, 8011bae <_lseek_r+0x1e>
 8011bac:	6023      	str	r3, [r4, #0]
 8011bae:	bd38      	pop	{r3, r4, r5, pc}
 8011bb0:	240027f0 	.word	0x240027f0

08011bb4 <memcpy>:
 8011bb4:	440a      	add	r2, r1
 8011bb6:	4291      	cmp	r1, r2
 8011bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011bbc:	d100      	bne.n	8011bc0 <memcpy+0xc>
 8011bbe:	4770      	bx	lr
 8011bc0:	b510      	push	{r4, lr}
 8011bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011bca:	4291      	cmp	r1, r2
 8011bcc:	d1f9      	bne.n	8011bc2 <memcpy+0xe>
 8011bce:	bd10      	pop	{r4, pc}

08011bd0 <memmove>:
 8011bd0:	4288      	cmp	r0, r1
 8011bd2:	b510      	push	{r4, lr}
 8011bd4:	eb01 0402 	add.w	r4, r1, r2
 8011bd8:	d902      	bls.n	8011be0 <memmove+0x10>
 8011bda:	4284      	cmp	r4, r0
 8011bdc:	4623      	mov	r3, r4
 8011bde:	d807      	bhi.n	8011bf0 <memmove+0x20>
 8011be0:	1e43      	subs	r3, r0, #1
 8011be2:	42a1      	cmp	r1, r4
 8011be4:	d008      	beq.n	8011bf8 <memmove+0x28>
 8011be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011bee:	e7f8      	b.n	8011be2 <memmove+0x12>
 8011bf0:	4402      	add	r2, r0
 8011bf2:	4601      	mov	r1, r0
 8011bf4:	428a      	cmp	r2, r1
 8011bf6:	d100      	bne.n	8011bfa <memmove+0x2a>
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c02:	e7f7      	b.n	8011bf4 <memmove+0x24>

08011c04 <_realloc_r>:
 8011c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c08:	4680      	mov	r8, r0
 8011c0a:	4614      	mov	r4, r2
 8011c0c:	460e      	mov	r6, r1
 8011c0e:	b921      	cbnz	r1, 8011c1a <_realloc_r+0x16>
 8011c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c14:	4611      	mov	r1, r2
 8011c16:	f7fe becb 	b.w	80109b0 <_malloc_r>
 8011c1a:	b92a      	cbnz	r2, 8011c28 <_realloc_r+0x24>
 8011c1c:	f7fe fe5c 	bl	80108d8 <_free_r>
 8011c20:	4625      	mov	r5, r4
 8011c22:	4628      	mov	r0, r5
 8011c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c28:	f000 f82e 	bl	8011c88 <_malloc_usable_size_r>
 8011c2c:	4284      	cmp	r4, r0
 8011c2e:	4607      	mov	r7, r0
 8011c30:	d802      	bhi.n	8011c38 <_realloc_r+0x34>
 8011c32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011c36:	d812      	bhi.n	8011c5e <_realloc_r+0x5a>
 8011c38:	4621      	mov	r1, r4
 8011c3a:	4640      	mov	r0, r8
 8011c3c:	f7fe feb8 	bl	80109b0 <_malloc_r>
 8011c40:	4605      	mov	r5, r0
 8011c42:	2800      	cmp	r0, #0
 8011c44:	d0ed      	beq.n	8011c22 <_realloc_r+0x1e>
 8011c46:	42bc      	cmp	r4, r7
 8011c48:	4622      	mov	r2, r4
 8011c4a:	4631      	mov	r1, r6
 8011c4c:	bf28      	it	cs
 8011c4e:	463a      	movcs	r2, r7
 8011c50:	f7ff ffb0 	bl	8011bb4 <memcpy>
 8011c54:	4631      	mov	r1, r6
 8011c56:	4640      	mov	r0, r8
 8011c58:	f7fe fe3e 	bl	80108d8 <_free_r>
 8011c5c:	e7e1      	b.n	8011c22 <_realloc_r+0x1e>
 8011c5e:	4635      	mov	r5, r6
 8011c60:	e7df      	b.n	8011c22 <_realloc_r+0x1e>
	...

08011c64 <_read_r>:
 8011c64:	b538      	push	{r3, r4, r5, lr}
 8011c66:	4d07      	ldr	r5, [pc, #28]	; (8011c84 <_read_r+0x20>)
 8011c68:	4604      	mov	r4, r0
 8011c6a:	4608      	mov	r0, r1
 8011c6c:	4611      	mov	r1, r2
 8011c6e:	2200      	movs	r2, #0
 8011c70:	602a      	str	r2, [r5, #0]
 8011c72:	461a      	mov	r2, r3
 8011c74:	f7ef ffc6 	bl	8001c04 <_read>
 8011c78:	1c43      	adds	r3, r0, #1
 8011c7a:	d102      	bne.n	8011c82 <_read_r+0x1e>
 8011c7c:	682b      	ldr	r3, [r5, #0]
 8011c7e:	b103      	cbz	r3, 8011c82 <_read_r+0x1e>
 8011c80:	6023      	str	r3, [r4, #0]
 8011c82:	bd38      	pop	{r3, r4, r5, pc}
 8011c84:	240027f0 	.word	0x240027f0

08011c88 <_malloc_usable_size_r>:
 8011c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c8c:	1f18      	subs	r0, r3, #4
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	bfbc      	itt	lt
 8011c92:	580b      	ldrlt	r3, [r1, r0]
 8011c94:	18c0      	addlt	r0, r0, r3
 8011c96:	4770      	bx	lr

08011c98 <_init>:
 8011c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c9a:	bf00      	nop
 8011c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c9e:	bc08      	pop	{r3}
 8011ca0:	469e      	mov	lr, r3
 8011ca2:	4770      	bx	lr

08011ca4 <_fini>:
 8011ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ca6:	bf00      	nop
 8011ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011caa:	bc08      	pop	{r3}
 8011cac:	469e      	mov	lr, r3
 8011cae:	4770      	bx	lr
