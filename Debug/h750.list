
h750.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001054c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000610  080107ec  080107ec  000207ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010dfc  08010dfc  00020dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010e04  08010e04  00020e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08010e08  08010e08  00020e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08010e0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000276c  24000078  08010e80  00030078  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240027e4  08010e80  000327e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00023eec  00000000  00000000  000300a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000042ed  00000000  00000000  00053f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001b60  00000000  00000000  00058280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000019b8  00000000  00000000  00059de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003d258  00000000  00000000  0005b798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026d67  00000000  00000000  000989f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00172ce8  00000000  00000000  000bf757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023243f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007cd0  00000000  00000000  00232490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080107d4 	.word	0x080107d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	080107d4 	.word	0x080107d4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b4e      	ldr	r3, [pc, #312]	; (80007d4 <MX_GPIO_Init+0x150>)
 800069c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a0:	4a4c      	ldr	r2, [pc, #304]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006a2:	f043 0304 	orr.w	r3, r3, #4
 80006a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006aa:	4b4a      	ldr	r3, [pc, #296]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b0:	f003 0304 	and.w	r3, r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006be:	4a45      	ldr	r2, [pc, #276]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c8:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006dc:	4a3d      	ldr	r2, [pc, #244]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006e6:	4b3b      	ldr	r3, [pc, #236]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ec:	f003 0301 	and.w	r3, r3, #1
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f4:	4b37      	ldr	r3, [pc, #220]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006fa:	4a36      	ldr	r2, [pc, #216]	; (80007d4 <MX_GPIO_Init+0x150>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000704:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <MX_GPIO_Init+0x150>)
 8000706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800070a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_GPIO_Init+0x150>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000718:	4a2e      	ldr	r2, [pc, #184]	; (80007d4 <MX_GPIO_Init+0x150>)
 800071a:	f043 0308 	orr.w	r3, r3, #8
 800071e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <MX_GPIO_Init+0x150>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <MX_GPIO_Init+0x154>)
 8000738:	f002 f802 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ICM_CS_GPIO_Port, ICM_CS_Pin, GPIO_PIN_SET);
 800073c:	2201      	movs	r2, #1
 800073e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000742:	4826      	ldr	r0, [pc, #152]	; (80007dc <MX_GPIO_Init+0x158>)
 8000744:	f001 fffc 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4820      	ldr	r0, [pc, #128]	; (80007e0 <MX_GPIO_Init+0x15c>)
 8000760:	f001 fe3e 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	4816      	ldr	r0, [pc, #88]	; (80007d8 <MX_GPIO_Init+0x154>)
 800077e:	f001 fe2f 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_KEY_Pin;
 8000782:	2310      	movs	r3, #16
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000786:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800078a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_KEY_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0x15c>)
 8000798:	f001 fe22 	bl	80023e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ICM_CS_Pin;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ICM_CS_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4809      	ldr	r0, [pc, #36]	; (80007dc <MX_GPIO_Init+0x158>)
 80007b6:	f001 fe13 	bl	80023e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	200a      	movs	r0, #10
 80007c0:	f001 fdd9 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 fdf0 	bl	80023aa <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	58024400 	.word	0x58024400
 80007d8:	58022000 	.word	0x58022000
 80007dc:	58020c00 	.word	0x58020c00
 80007e0:	58021c00 	.word	0x58021c00

080007e4 <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 80007e8:	bf00      	nop
 80007ea:	f000 f907 	bl	80009fc <icm20948_who_am_i>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d1f7      	bne.n	80007ea <icm20948_init+0x6>

	icm20948_device_reset();
 80007fa:	f000 f924 	bl	8000a46 <icm20948_device_reset>
	icm20948_wakeup();
 80007fe:	f000 f939 	bl	8000a74 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000802:	2001      	movs	r0, #1
 8000804:	f000 f9b1 	bl	8000b6a <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000808:	f000 f9c8 	bl	8000b9c <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 800080c:	f000 f94c 	bl	8000aa8 <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 8000810:	2000      	movs	r0, #0
 8000812:	f000 f9cc 	bl	8000bae <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000816:	2000      	movs	r0, #0
 8000818:	f000 f9e6 	bl	8000be8 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fa00 	bl	8000c22 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000822:	2000      	movs	r0, #0
 8000824:	f000 fa0c 	bl	8000c40 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000828:	f000 fa3a 	bl	8000ca0 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 800082c:	f000 faba 	bl	8000da4 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000830:	2003      	movs	r0, #3
 8000832:	f000 fbad 	bl	8000f90 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000836:	2003      	movs	r0, #3
 8000838:	f000 fbf4 	bl	8001024 <icm20948_accel_full_scale_select>
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}

08000840 <ak09916_init>:

void ak09916_init()
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	icm20948_i2c_master_reset();
 8000844:	f000 f947 	bl	8000ad6 <icm20948_i2c_master_reset>
	icm20948_i2c_master_enable();
 8000848:	f000 f95c 	bl	8000b04 <icm20948_i2c_master_enable>
	icm20948_i2c_master_clk_frq(7);
 800084c:	2007      	movs	r0, #7
 800084e:	f000 f973 	bl	8000b38 <icm20948_i2c_master_clk_frq>

	while(!ak09916_who_am_i());
 8000852:	bf00      	nop
 8000854:	f000 f8e5 	bl	8000a22 <ak09916_who_am_i>
 8000858:	4603      	mov	r3, r0
 800085a:	f083 0301 	eor.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f7      	bne.n	8000854 <ak09916_init+0x14>

	ak09916_soft_reset();
 8000864:	f000 f8fb 	bl	8000a5e <ak09916_soft_reset>
	ak09916_operation_mode_setting(continuous_measurement_100hz);
 8000868:	2008      	movs	r0, #8
 800086a:	f000 fa07 	bl	8000c7c <ak09916_operation_mode_setting>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8000872:	b580      	push	{r7, lr}
 8000874:	b084      	sub	sp, #16
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 800087a:	2206      	movs	r2, #6
 800087c:	2133      	movs	r1, #51	; 0x33
 800087e:	2000      	movs	r0, #0
 8000880:	f000 fc98 	bl	80011b4 <read_multiple_icm20948_reg>
 8000884:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	021b      	lsls	r3, r3, #8
 800088c:	b21a      	sxth	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	3301      	adds	r3, #1
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b21b      	sxth	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b21a      	sxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3302      	adds	r3, #2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	b21a      	sxth	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	3303      	adds	r3, #3
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b21b      	sxth	r3, r3
 80008b0:	4313      	orrs	r3, r2
 80008b2:	b21a      	sxth	r2, r3
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	3304      	adds	r3, #4
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3305      	adds	r3, #5
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	809a      	strh	r2, [r3, #4]
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 80008e4:	2206      	movs	r2, #6
 80008e6:	212d      	movs	r1, #45	; 0x2d
 80008e8:	2000      	movs	r0, #0
 80008ea:	f000 fc63 	bl	80011b4 <read_multiple_icm20948_reg>
 80008ee:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	3301      	adds	r3, #1
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	b21b      	sxth	r3, r3
 8000900:	4313      	orrs	r3, r2
 8000902:	b21a      	sxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	3302      	adds	r3, #2
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	021b      	lsls	r3, r3, #8
 8000910:	b21a      	sxth	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3303      	adds	r3, #3
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	b21b      	sxth	r3, r3
 800091a:	4313      	orrs	r3, r2
 800091c:	b21a      	sxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	3304      	adds	r3, #4
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b21a      	sxth	r2, r3
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3305      	adds	r3, #5
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <icm20948_accel_read+0x84>)
 8000942:	edd3 7a00 	vldr	s15, [r3]
 8000946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800094a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800094e:	ee17 3a90 	vmov	r3, s15
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	809a      	strh	r2, [r3, #4]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000958:	bf00      	nop
 800095a:	3710      	adds	r7, #16
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	24000098 	.word	0x24000098

08000964 <ak09916_mag_read>:

bool ak09916_mag_read(axises* data)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint8_t* temp;
	uint8_t drdy, hofl;	// data ready, overflow

	drdy = read_single_ak09916_reg(MAG_ST1) & 0x01;
 800096c:	2010      	movs	r0, #16
 800096e:	f000 fc7d 	bl	800126c <read_single_ak09916_reg>
 8000972:	4603      	mov	r3, r0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	75fb      	strb	r3, [r7, #23]
	if(!drdy)	return false;
 800097a:	7dfb      	ldrb	r3, [r7, #23]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <ak09916_mag_read+0x20>
 8000980:	2300      	movs	r3, #0
 8000982:	e037      	b.n	80009f4 <ak09916_mag_read+0x90>

	temp = read_multiple_ak09916_reg(MAG_HXL, 6);
 8000984:	2106      	movs	r1, #6
 8000986:	2011      	movs	r0, #17
 8000988:	f000 fcb3 	bl	80012f2 <read_multiple_ak09916_reg>
 800098c:	6138      	str	r0, [r7, #16]

	hofl = read_single_ak09916_reg(MAG_ST2) & 0x08;
 800098e:	2018      	movs	r0, #24
 8000990:	f000 fc6c 	bl	800126c <read_single_ak09916_reg>
 8000994:	4603      	mov	r3, r0
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	73fb      	strb	r3, [r7, #15]
	if(hofl)	return false;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <ak09916_mag_read+0x42>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e026      	b.n	80009f4 <ak09916_mag_read+0x90>

	data->x = (int16_t)(temp[1] << 8 | temp[0]);
 80009a6:	693b      	ldr	r3, [r7, #16]
 80009a8:	3301      	adds	r3, #1
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	021b      	lsls	r3, r3, #8
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	801a      	strh	r2, [r3, #0]
	data->y = (int16_t)(temp[3] << 8 | temp[2]);
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	3303      	adds	r3, #3
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	3302      	adds	r3, #2
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b21a      	sxth	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	805a      	strh	r2, [r3, #2]
	data->z = (int16_t)(temp[5] << 8 | temp[4]);
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	3305      	adds	r3, #5
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	021b      	lsls	r3, r3, #8
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	693b      	ldr	r3, [r7, #16]
 80009e4:	3304      	adds	r3, #4
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	b21a      	sxth	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	809a      	strh	r2, [r3, #4]

	return true;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3718      	adds	r7, #24
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000a02:	2100      	movs	r1, #0
 8000a04:	2000      	movs	r0, #0
 8000a06:	f000 fb85 	bl	8001114 <read_single_icm20948_reg>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2bea      	cmp	r3, #234	; 0xea
 8000a12:	d101      	bne.n	8000a18 <icm20948_who_am_i+0x1c>
		return true;
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <icm20948_who_am_i+0x1e>
	else
		return false;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <ak09916_who_am_i>:

bool ak09916_who_am_i()
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
	uint8_t ak09916_id = read_single_ak09916_reg(MAG_WIA2);
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f000 fc1f 	bl	800126c <read_single_ak09916_reg>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]

	if(ak09916_id == AK09916_ID)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	d101      	bne.n	8000a3c <ak09916_who_am_i+0x1a>
		return true;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <ak09916_who_am_i+0x1c>
	else
		return false;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000a4a:	22c1      	movs	r2, #193	; 0xc1
 8000a4c:	2106      	movs	r1, #6
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 fb8c 	bl	800116c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f001 fb83 	bl	8002160 <HAL_Delay>
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <ak09916_soft_reset>:

void ak09916_soft_reset()
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
 8000a62:	2101      	movs	r1, #1
 8000a64:	2032      	movs	r0, #50	; 0x32
 8000a66:	f000 fc22 	bl	80012ae <write_single_ak09916_reg>
	HAL_Delay(100);
 8000a6a:	2064      	movs	r0, #100	; 0x64
 8000a6c:	f001 fb78 	bl	8002160 <HAL_Delay>
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000a7a:	2106      	movs	r1, #6
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fb49 	bl	8001114 <read_single_icm20948_reg>
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a8c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	461a      	mov	r2, r3
 8000a92:	2106      	movs	r1, #6
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 fb69 	bl	800116c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000a9a:	2064      	movs	r0, #100	; 0x64
 8000a9c:	f001 fb60 	bl	8002160 <HAL_Delay>
}
 8000aa0:	bf00      	nop
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000aae:	2103      	movs	r1, #3
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f000 fb2f 	bl	8001114 <read_single_icm20948_reg>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f043 0310 	orr.w	r3, r3, #16
 8000ac0:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f000 fb4f 	bl	800116c <write_single_icm20948_reg>
}
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <icm20948_i2c_master_reset>:

void icm20948_i2c_master_reset()
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	b082      	sub	sp, #8
 8000ada:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000adc:	2103      	movs	r1, #3
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f000 fb18 	bl	8001114 <read_single_icm20948_reg>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x02;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	461a      	mov	r2, r3
 8000af4:	2103      	movs	r1, #3
 8000af6:	2000      	movs	r0, #0
 8000af8:	f000 fb38 	bl	800116c <write_single_icm20948_reg>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <icm20948_i2c_master_enable>:

void icm20948_i2c_master_enable()
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 fb01 	bl	8001114 <read_single_icm20948_reg>
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x20;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f043 0320 	orr.w	r3, r3, #32
 8000b1c:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	461a      	mov	r2, r3
 8000b22:	2103      	movs	r1, #3
 8000b24:	2000      	movs	r0, #0
 8000b26:	f000 fb21 	bl	800116c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000b2a:	2064      	movs	r0, #100	; 0x64
 8000b2c:	f001 fb18 	bl	8002160 <HAL_Delay>
}
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <icm20948_i2c_master_clk_frq>:

void icm20948_i2c_master_clk_frq(uint8_t config)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL);
 8000b42:	2101      	movs	r1, #1
 8000b44:	2030      	movs	r0, #48	; 0x30
 8000b46:	f000 fae5 	bl	8001114 <read_single_icm20948_reg>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	73fb      	strb	r3, [r7, #15]
	new_val |= config;
 8000b4e:	7bfa      	ldrb	r2, [r7, #15]
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2030      	movs	r0, #48	; 0x30
 8000b5e:	f000 fb05 	bl	800116c <write_single_icm20948_reg>
}
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000b74:	2106      	movs	r1, #6
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 facc 	bl	8001114 <read_single_icm20948_reg>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000b80:	7bfa      	ldrb	r2, [r7, #15]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	2106      	movs	r1, #6
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f000 faec 	bl	800116c <write_single_icm20948_reg>
}
 8000b94:	bf00      	nop
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2109      	movs	r1, #9
 8000ba4:	2020      	movs	r0, #32
 8000ba6:	f000 fae1 	bl	800116c <write_single_icm20948_reg>
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}

08000bae <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b084      	sub	sp, #16
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2020      	movs	r0, #32
 8000bbc:	f000 faaa 	bl	8001114 <read_single_icm20948_reg>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	b25a      	sxtb	r2, r3
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	b25b      	sxtb	r3, r3
 8000bd2:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2101      	movs	r1, #1
 8000bda:	2020      	movs	r0, #32
 8000bdc:	f000 fac6 	bl	800116c <write_single_icm20948_reg>
}
 8000be0:	bf00      	nop
 8000be2:	3710      	adds	r7, #16
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000bf2:	2114      	movs	r1, #20
 8000bf4:	2020      	movs	r0, #32
 8000bf6:	f000 fa8d 	bl	8001114 <read_single_icm20948_reg>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	b25a      	sxtb	r2, r3
 8000c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	461a      	mov	r2, r3
 8000c12:	2101      	movs	r1, #1
 8000c14:	2020      	movs	r0, #32
 8000c16:	f000 faa9 	bl	800116c <write_single_icm20948_reg>
}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	2100      	movs	r1, #0
 8000c32:	2020      	movs	r0, #32
 8000c34:	f000 fa9a 	bl	800116c <write_single_icm20948_reg>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000c4a:	88fb      	ldrh	r3, [r7, #6]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	2110      	movs	r1, #16
 8000c62:	2020      	movs	r0, #32
 8000c64:	f000 fa82 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000c68:	7bbb      	ldrb	r3, [r7, #14]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2111      	movs	r1, #17
 8000c6e:	2020      	movs	r0, #32
 8000c70:	f000 fa7c 	bl	800116c <write_single_icm20948_reg>
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <ak09916_operation_mode_setting>:

void ak09916_operation_mode_setting(operation_mode mode)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
	write_single_ak09916_reg(MAG_CNTL2, mode);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4619      	mov	r1, r3
 8000c8a:	2031      	movs	r0, #49	; 0x31
 8000c8c:	f000 fb0f 	bl	80012ae <write_single_ak09916_reg>
	HAL_Delay(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f001 fa65 	bl	8002160 <HAL_Delay>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	80bb      	strh	r3, [r7, #4]

	for(int i = 0; i < 100; i++)
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	e016      	b.n	8000cee <icm20948_gyro_calibration+0x4e>
	{
		icm20948_gyro_read(&temp);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fdd4 	bl	8000872 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
		gyro_bias[1] += temp.y;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8000cda:	4413      	add	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
		gyro_bias[2] += temp.z;
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 100; i++)
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	3301      	adds	r3, #1
 8000cec:	61fb      	str	r3, [r7, #28]
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	2b63      	cmp	r3, #99	; 0x63
 8000cf2:	dde5      	ble.n	8000cc0 <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4a2a      	ldr	r2, [pc, #168]	; (8000da0 <icm20948_gyro_calibration+0x100>)
 8000cf8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cfc:	1152      	asrs	r2, r2, #5
 8000cfe:	17db      	asrs	r3, r3, #31
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	60bb      	str	r3, [r7, #8]
	gyro_bias[1] /= 100;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	4a26      	ldr	r2, [pc, #152]	; (8000da0 <icm20948_gyro_calibration+0x100>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1152      	asrs	r2, r2, #5
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	60fb      	str	r3, [r7, #12]
	gyro_bias[2] /= 100;
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <icm20948_gyro_calibration+0x100>)
 8000d18:	fb82 1203 	smull	r1, r2, r2, r3
 8000d1c:	1152      	asrs	r2, r2, #5
 8000d1e:	17db      	asrs	r3, r3, #31
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	613b      	str	r3, [r7, #16]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	425b      	negs	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	da00      	bge.n	8000d2e <icm20948_gyro_calibration+0x8e>
 8000d2c:	3303      	adds	r3, #3
 8000d2e:	109b      	asrs	r3, r3, #2
 8000d30:	121b      	asrs	r3, r3, #8
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	703b      	strb	r3, [r7, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	425b      	negs	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	da00      	bge.n	8000d40 <icm20948_gyro_calibration+0xa0>
 8000d3e:	3303      	adds	r3, #3
 8000d40:	109b      	asrs	r3, r3, #2
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	707b      	strb	r3, [r7, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	425b      	negs	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da00      	bge.n	8000d50 <icm20948_gyro_calibration+0xb0>
 8000d4e:	3303      	adds	r3, #3
 8000d50:	109b      	asrs	r3, r3, #2
 8000d52:	121b      	asrs	r3, r3, #8
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	70bb      	strb	r3, [r7, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	425b      	negs	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da00      	bge.n	8000d62 <icm20948_gyro_calibration+0xc2>
 8000d60:	3303      	adds	r3, #3
 8000d62:	109b      	asrs	r3, r3, #2
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	70fb      	strb	r3, [r7, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	425b      	negs	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	da00      	bge.n	8000d72 <icm20948_gyro_calibration+0xd2>
 8000d70:	3303      	adds	r3, #3
 8000d72:	109b      	asrs	r3, r3, #2
 8000d74:	121b      	asrs	r3, r3, #8
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	713b      	strb	r3, [r7, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	da00      	bge.n	8000d84 <icm20948_gyro_calibration+0xe4>
 8000d82:	3303      	adds	r3, #3
 8000d84:	109b      	asrs	r3, r3, #2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	717b      	strb	r3, [r7, #5]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8000d8a:	463a      	mov	r2, r7
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	2103      	movs	r1, #3
 8000d90:	2020      	movs	r0, #32
 8000d92:	f000 fa3f 	bl	8001214 <write_multiple_icm20948_reg>
}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	51eb851f 	.word	0x51eb851f

08000da4 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b090      	sub	sp, #64	; 0x40
 8000da8:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81bb      	strh	r3, [r7, #12]

	for(int i = 0; i < 100; i++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dce:	e016      	b.n	8000dfe <icm20948_accel_calibration+0x5a>
	{
		icm20948_accel_read(&temp);
 8000dd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f7ff fd81 	bl	80008dc <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8000de0:	4413      	add	r3, r2
 8000de2:	61fb      	str	r3, [r7, #28]
		accel_bias[1] += temp.y;
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8000dea:	4413      	add	r3, r2
 8000dec:	623b      	str	r3, [r7, #32]
		accel_bias[2] += temp.z;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8000df4:	4413      	add	r3, r2
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i < 100; i++)
 8000df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e00:	2b63      	cmp	r3, #99	; 0x63
 8000e02:	dde5      	ble.n	8000dd0 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	4a60      	ldr	r2, [pc, #384]	; (8000f88 <icm20948_accel_calibration+0x1e4>)
 8000e08:	fb82 1203 	smull	r1, r2, r2, r3
 8000e0c:	1152      	asrs	r2, r2, #5
 8000e0e:	17db      	asrs	r3, r3, #31
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	61fb      	str	r3, [r7, #28]
	accel_bias[1] /= 100;
 8000e14:	6a3b      	ldr	r3, [r7, #32]
 8000e16:	4a5c      	ldr	r2, [pc, #368]	; (8000f88 <icm20948_accel_calibration+0x1e4>)
 8000e18:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1c:	1152      	asrs	r2, r2, #5
 8000e1e:	17db      	asrs	r3, r3, #31
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	623b      	str	r3, [r7, #32]
	accel_bias[2] /= 100;
 8000e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e26:	4a58      	ldr	r2, [pc, #352]	; (8000f88 <icm20948_accel_calibration+0x1e4>)
 8000e28:	fb82 1203 	smull	r1, r2, r2, r3
 8000e2c:	1152      	asrs	r2, r2, #5
 8000e2e:	17db      	asrs	r3, r3, #31
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t mask_bit[3] = {0, 0, 0};
 8000e34:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <icm20948_accel_calibration+0x1e8>)
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	8019      	strh	r1, [r3, #0]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	0c12      	lsrs	r2, r2, #16
 8000e42:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8000e44:	2202      	movs	r2, #2
 8000e46:	2114      	movs	r1, #20
 8000e48:	2010      	movs	r0, #16
 8000e4a:	f000 f9b3 	bl	80011b4 <read_multiple_icm20948_reg>
 8000e4e:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8000e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000e58:	3201      	adds	r2, #1
 8000e5a:	7812      	ldrb	r2, [r2, #0]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
	mask_bit[0] = temp2[1] & 0x01;
 8000e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e62:	3301      	adds	r3, #1
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	713b      	strb	r3, [r7, #4]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8000e6e:	2202      	movs	r2, #2
 8000e70:	2117      	movs	r1, #23
 8000e72:	2010      	movs	r0, #16
 8000e74:	f000 f99e 	bl	80011b4 <read_multiple_icm20948_reg>
 8000e78:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8000e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e82:	3201      	adds	r2, #1
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	617b      	str	r3, [r7, #20]
	mask_bit[1] = temp3[1] & 0x01;
 8000e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	717b      	strb	r3, [r7, #5]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8000e98:	2202      	movs	r2, #2
 8000e9a:	211a      	movs	r1, #26
 8000e9c:	2010      	movs	r0, #16
 8000e9e:	f000 f989 	bl	80011b4 <read_multiple_icm20948_reg>
 8000ea2:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8000ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000eac:	3201      	adds	r2, #1
 8000eae:	7812      	ldrb	r2, [r2, #0]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
	mask_bit[2] = temp4[1] & 0x01;
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	71bb      	strb	r3, [r7, #6]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	da00      	bge.n	8000ecc <icm20948_accel_calibration+0x128>
 8000eca:	3307      	adds	r3, #7
 8000ecc:	10db      	asrs	r3, r3, #3
 8000ece:	425b      	negs	r3, r3
 8000ed0:	4413      	add	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	da00      	bge.n	8000ede <icm20948_accel_calibration+0x13a>
 8000edc:	3307      	adds	r3, #7
 8000ede:	10db      	asrs	r3, r3, #3
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	4413      	add	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	da00      	bge.n	8000ef0 <icm20948_accel_calibration+0x14c>
 8000eee:	3307      	adds	r3, #7
 8000ef0:	10db      	asrs	r3, r3, #3
 8000ef2:	425b      	negs	r3, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	121b      	asrs	r3, r3, #8
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	723b      	strb	r3, [r7, #8]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	727b      	strb	r3, [r7, #9]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8000f0c:	7a7a      	ldrb	r2, [r7, #9]
 8000f0e:	793b      	ldrb	r3, [r7, #4]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	727b      	strb	r3, [r7, #9]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	121b      	asrs	r3, r3, #8
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	72bb      	strb	r3, [r7, #10]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f023 0301 	bic.w	r3, r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	72fb      	strb	r3, [r7, #11]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8000f2a:	7afa      	ldrb	r2, [r7, #11]
 8000f2c:	797b      	ldrb	r3, [r7, #5]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	72fb      	strb	r3, [r7, #11]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	121b      	asrs	r3, r3, #8
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	733b      	strb	r3, [r7, #12]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	737b      	strb	r3, [r7, #13]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8000f48:	7b7a      	ldrb	r2, [r7, #13]
 8000f4a:	79bb      	ldrb	r3, [r7, #6]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	737b      	strb	r3, [r7, #13]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8000f52:	f107 0208 	add.w	r2, r7, #8
 8000f56:	2302      	movs	r3, #2
 8000f58:	2114      	movs	r1, #20
 8000f5a:	2010      	movs	r0, #16
 8000f5c:	f000 f95a 	bl	8001214 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	1c9a      	adds	r2, r3, #2
 8000f66:	2302      	movs	r3, #2
 8000f68:	2117      	movs	r1, #23
 8000f6a:	2010      	movs	r0, #16
 8000f6c:	f000 f952 	bl	8001214 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	1d1a      	adds	r2, r3, #4
 8000f76:	2302      	movs	r3, #2
 8000f78:	211a      	movs	r1, #26
 8000f7a:	2010      	movs	r0, #16
 8000f7c:	f000 f94a 	bl	8001214 <write_multiple_icm20948_reg>
}
 8000f80:	bf00      	nop
 8000f82:	3740      	adds	r7, #64	; 0x40
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	51eb851f 	.word	0x51eb851f
 8000f8c:	080107ec 	.word	0x080107ec

08000f90 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2020      	movs	r0, #32
 8000f9e:	f000 f8b9 	bl	8001114 <read_single_icm20948_reg>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d827      	bhi.n	8000ffc <icm20948_gyro_full_scale_select+0x6c>
 8000fac:	a201      	add	r2, pc, #4	; (adr r2, 8000fb4 <icm20948_gyro_full_scale_select+0x24>)
 8000fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb2:	bf00      	nop
 8000fb4:	08000fc5 	.word	0x08000fc5
 8000fb8:	08000fcd 	.word	0x08000fcd
 8000fbc:	08000fdd 	.word	0x08000fdd
 8000fc0:	08000fed 	.word	0x08000fed
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <icm20948_gyro_full_scale_select+0x80>)
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <icm20948_gyro_full_scale_select+0x84>)
 8000fc8:	601a      	str	r2, [r3, #0]
			break;
 8000fca:	e017      	b.n	8000ffc <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f043 0302 	orr.w	r3, r3, #2
 8000fd2:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <icm20948_gyro_full_scale_select+0x80>)
 8000fd6:	4a10      	ldr	r2, [pc, #64]	; (8001018 <icm20948_gyro_full_scale_select+0x88>)
 8000fd8:	601a      	str	r2, [r3, #0]
			break;
 8000fda:	e00f      	b.n	8000ffc <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	f043 0304 	orr.w	r3, r3, #4
 8000fe2:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <icm20948_gyro_full_scale_select+0x80>)
 8000fe6:	4a0d      	ldr	r2, [pc, #52]	; (800101c <icm20948_gyro_full_scale_select+0x8c>)
 8000fe8:	601a      	str	r2, [r3, #0]
			break;
 8000fea:	e007      	b.n	8000ffc <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f043 0306 	orr.w	r3, r3, #6
 8000ff2:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <icm20948_gyro_full_scale_select+0x80>)
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <icm20948_gyro_full_scale_select+0x90>)
 8000ff8:	601a      	str	r2, [r3, #0]
			break;
 8000ffa:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	461a      	mov	r2, r3
 8001000:	2101      	movs	r1, #1
 8001002:	2020      	movs	r0, #32
 8001004:	f000 f8b2 	bl	800116c <write_single_icm20948_reg>
}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	24000094 	.word	0x24000094
 8001014:	43030000 	.word	0x43030000
 8001018:	42830000 	.word	0x42830000
 800101c:	42033333 	.word	0x42033333
 8001020:	41833333 	.word	0x41833333

08001024 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 800102e:	2114      	movs	r1, #20
 8001030:	2020      	movs	r0, #32
 8001032:	f000 f86f 	bl	8001114 <read_single_icm20948_reg>
 8001036:	4603      	mov	r3, r0
 8001038:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d82b      	bhi.n	8001098 <icm20948_accel_full_scale_select+0x74>
 8001040:	a201      	add	r2, pc, #4	; (adr r2, 8001048 <icm20948_accel_full_scale_select+0x24>)
 8001042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001046:	bf00      	nop
 8001048:	08001059 	.word	0x08001059
 800104c:	08001063 	.word	0x08001063
 8001050:	08001075 	.word	0x08001075
 8001054:	08001087 	.word	0x08001087
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <icm20948_accel_full_scale_select+0x88>)
 800105a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800105e:	601a      	str	r2, [r3, #0]
			break;
 8001060:	e01a      	b.n	8001098 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <icm20948_accel_full_scale_select+0x88>)
 800106c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8001070:	601a      	str	r2, [r3, #0]
			break;
 8001072:	e011      	b.n	8001098 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	f043 0304 	orr.w	r3, r3, #4
 800107a:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <icm20948_accel_full_scale_select+0x88>)
 800107e:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8001082:	601a      	str	r2, [r3, #0]
			break;
 8001084:	e008      	b.n	8001098 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	f043 0306 	orr.w	r3, r3, #6
 800108c:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <icm20948_accel_full_scale_select+0x88>)
 8001090:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001094:	601a      	str	r2, [r3, #0]
			break;
 8001096:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	461a      	mov	r2, r3
 800109c:	2114      	movs	r1, #20
 800109e:	2020      	movs	r0, #32
 80010a0:	f000 f864 	bl	800116c <write_single_icm20948_reg>
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	24000098 	.word	0x24000098

080010b0 <cs_high>:


/* Static Functions */
static void cs_high()
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ba:	4802      	ldr	r0, [pc, #8]	; (80010c4 <cs_high+0x14>)
 80010bc:	f001 fb40 	bl	8002740 <HAL_GPIO_WritePin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58020c00 	.word	0x58020c00

080010c8 <cs_low>:

static void cs_low()
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010d2:	4802      	ldr	r0, [pc, #8]	; (80010dc <cs_low+0x14>)
 80010d4:	f001 fb34 	bl	8002740 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	58020c00 	.word	0x58020c00

080010e0 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80010ea:	237f      	movs	r3, #127	; 0x7f
 80010ec:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	737b      	strb	r3, [r7, #13]

	cs_low();
 80010f2:	f7ff ffe9 	bl	80010c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80010f6:	f107 010c 	add.w	r1, r7, #12
 80010fa:	230a      	movs	r3, #10
 80010fc:	2202      	movs	r2, #2
 80010fe:	4804      	ldr	r0, [pc, #16]	; (8001110 <select_user_bank+0x30>)
 8001100:	f006 fc18 	bl	8007934 <HAL_SPI_Transmit>
	cs_high();
 8001104:	f7ff ffd4 	bl	80010b0 <cs_high>
}
 8001108:	bf00      	nop
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24000138 	.word	0x24000138

08001114 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	460a      	mov	r2, r1
 800111e:	71fb      	strb	r3, [r7, #7]
 8001120:	4613      	mov	r3, r2
 8001122:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112a:	b2db      	uxtb	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val;
	select_user_bank(ub);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffd5 	bl	80010e0 <select_user_bank>

	cs_low();
 8001136:	f7ff ffc7 	bl	80010c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800113a:	f107 010f 	add.w	r1, r7, #15
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	2201      	movs	r2, #1
 8001144:	4808      	ldr	r0, [pc, #32]	; (8001168 <read_single_icm20948_reg+0x54>)
 8001146:	f006 fbf5 	bl	8007934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 800114a:	f107 010e 	add.w	r1, r7, #14
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	2201      	movs	r2, #1
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <read_single_icm20948_reg+0x54>)
 8001156:	f006 fddf 	bl	8007d18 <HAL_SPI_Receive>
	cs_high();
 800115a:	f7ff ffa9 	bl	80010b0 <cs_high>

	return reg_val;
 800115e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	24000138 	.word	0x24000138

0800116c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	460b      	mov	r3, r1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	4613      	mov	r3, r2
 800117c:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800117e:	79bb      	ldrb	r3, [r7, #6]
 8001180:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 8001182:	797b      	ldrb	r3, [r7, #5]
 8001184:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ffa9 	bl	80010e0 <select_user_bank>

	cs_low();
 800118e:	f7ff ff9b 	bl	80010c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 8001192:	f107 010c 	add.w	r1, r7, #12
 8001196:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800119a:	2202      	movs	r2, #2
 800119c:	4804      	ldr	r0, [pc, #16]	; (80011b0 <write_single_icm20948_reg+0x44>)
 800119e:	f006 fbc9 	bl	8007934 <HAL_SPI_Transmit>
	cs_high();
 80011a2:	f7ff ff85 	bl	80010b0 <cs_high>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	24000138 	.word	0x24000138

080011b4 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 80011c6:	79bb      	ldrb	r3, [r7, #6]
 80011c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff84 	bl	80010e0 <select_user_bank>

	cs_low();
 80011d8:	f7ff ff76 	bl	80010c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80011dc:	f107 010f 	add.w	r1, r7, #15
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	2201      	movs	r2, #1
 80011e6:	4809      	ldr	r0, [pc, #36]	; (800120c <read_multiple_icm20948_reg+0x58>)
 80011e8:	f006 fba4 	bl	8007934 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f4:	4906      	ldr	r1, [pc, #24]	; (8001210 <read_multiple_icm20948_reg+0x5c>)
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <read_multiple_icm20948_reg+0x58>)
 80011f8:	f006 fd8e 	bl	8007d18 <HAL_SPI_Receive>
	cs_high();
 80011fc:	f7ff ff58 	bl	80010b0 <cs_high>

	return reg_val;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <read_multiple_icm20948_reg+0x5c>)
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	24000138 	.word	0x24000138
 8001210:	2400009c 	.word	0x2400009c

08001214 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	603a      	str	r2, [r7, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
 8001222:	460b      	mov	r3, r1
 8001224:	71bb      	strb	r3, [r7, #6]
 8001226:	4613      	mov	r3, r2
 8001228:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ff55 	bl	80010e0 <select_user_bank>

	cs_low();
 8001236:	f7ff ff47 	bl	80010c8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 800123a:	f107 010f 	add.w	r1, r7, #15
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	2201      	movs	r2, #1
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <write_multiple_icm20948_reg+0x54>)
 8001246:	f006 fb75 	bl	8007934 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	b29a      	uxth	r2, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	6839      	ldr	r1, [r7, #0]
 8001254:	4804      	ldr	r0, [pc, #16]	; (8001268 <write_multiple_icm20948_reg+0x54>)
 8001256:	f006 fb6d 	bl	8007934 <HAL_SPI_Transmit>
	cs_high();
 800125a:	f7ff ff29 	bl	80010b0 <cs_high>
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000138 	.word	0x24000138

0800126c <read_single_ak09916_reg>:

static uint8_t read_single_ak09916_reg(uint8_t reg)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001276:	228c      	movs	r2, #140	; 0x8c
 8001278:	2103      	movs	r1, #3
 800127a:	2030      	movs	r0, #48	; 0x30
 800127c:	f7ff ff76 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	461a      	mov	r2, r3
 8001284:	2104      	movs	r1, #4
 8001286:	2030      	movs	r0, #48	; 0x30
 8001288:	f7ff ff70 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 800128c:	2281      	movs	r2, #129	; 0x81
 800128e:	2105      	movs	r1, #5
 8001290:	2030      	movs	r0, #48	; 0x30
 8001292:	f7ff ff6b 	bl	800116c <write_single_icm20948_reg>

	HAL_Delay(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f000 ff62 	bl	8002160 <HAL_Delay>
	return read_single_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00);
 800129c:	213b      	movs	r1, #59	; 0x3b
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff38 	bl	8001114 <read_single_icm20948_reg>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <write_single_ak09916_reg>:

static void write_single_ak09916_reg(uint8_t reg, uint8_t val)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	460a      	mov	r2, r1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	4613      	mov	r3, r2
 80012bc:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, WRITE | MAG_SLAVE_ADDR);
 80012be:	220c      	movs	r2, #12
 80012c0:	2103      	movs	r1, #3
 80012c2:	2030      	movs	r0, #48	; 0x30
 80012c4:	f7ff ff52 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	461a      	mov	r2, r3
 80012cc:	2104      	movs	r1, #4
 80012ce:	2030      	movs	r0, #48	; 0x30
 80012d0:	f7ff ff4c 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_DO, val);
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	461a      	mov	r2, r3
 80012d8:	2106      	movs	r1, #6
 80012da:	2030      	movs	r0, #48	; 0x30
 80012dc:	f7ff ff46 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x81);
 80012e0:	2281      	movs	r2, #129	; 0x81
 80012e2:	2105      	movs	r1, #5
 80012e4:	2030      	movs	r0, #48	; 0x30
 80012e6:	f7ff ff41 	bl	800116c <write_single_icm20948_reg>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <read_multiple_ak09916_reg>:

static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len)
{	
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	460a      	mov	r2, r1
 80012fc:	71fb      	strb	r3, [r7, #7]
 80012fe:	4613      	mov	r3, r2
 8001300:	71bb      	strb	r3, [r7, #6]
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_ADDR, READ | MAG_SLAVE_ADDR);
 8001302:	228c      	movs	r2, #140	; 0x8c
 8001304:	2103      	movs	r1, #3
 8001306:	2030      	movs	r0, #48	; 0x30
 8001308:	f7ff ff30 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_REG, reg);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	461a      	mov	r2, r3
 8001310:	2104      	movs	r1, #4
 8001312:	2030      	movs	r0, #48	; 0x30
 8001314:	f7ff ff2a 	bl	800116c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_3, B3_I2C_SLV0_CTRL, 0x80 | len);
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800131e:	b2db      	uxtb	r3, r3
 8001320:	461a      	mov	r2, r3
 8001322:	2105      	movs	r1, #5
 8001324:	2030      	movs	r0, #48	; 0x30
 8001326:	f7ff ff21 	bl	800116c <write_single_icm20948_reg>

	HAL_Delay(1);
 800132a:	2001      	movs	r0, #1
 800132c:	f000 ff18 	bl	8002160 <HAL_Delay>
	return read_multiple_icm20948_reg(ub_0, B0_EXT_SLV_SENS_DATA_00, len);
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	461a      	mov	r2, r3
 8001334:	213b      	movs	r1, #59	; 0x3b
 8001336:	2000      	movs	r0, #0
 8001338:	f7ff ff3c 	bl	80011b4 <read_multiple_icm20948_reg>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_EXTI_Callback>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

void
HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_4)
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	2b10      	cmp	r3, #16
 8001356:	d102      	bne.n	800135e <HAL_GPIO_EXTI_Callback+0x16>
  {
    userKey1Flag = 1;
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <HAL_GPIO_EXTI_Callback+0x24>)
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
  }
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	240000a2 	.word	0x240000a2

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b0b1      	sub	sp, #196	; 0xc4
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f000 fe61 	bl	800203c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 f945 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f7ff f981 	bl	8000684 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 8001382:	f000 f9dd 	bl	8001740 <MX_SDMMC1_SD_Init>
  MX_UART4_Init();
 8001386:	f000 fd57 	bl	8001e38 <MX_UART4_Init>
  MX_SPI2_Init();
 800138a:	f000 fa9b 	bl	80018c4 <MX_SPI2_Init>
  MX_FATFS_Init();
 800138e:	f009 fb2f 	bl	800a9f0 <MX_FATFS_Init>
  MX_TIM7_Init();
 8001392:	f000 fcf1 	bl	8001d78 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  printf ("start main()\r\n");
 8001396:	4889      	ldr	r0, [pc, #548]	; (80015bc <main+0x24c>)
 8001398:	f00e f8c2 	bl	800f520 <puts>

//  ICM_SelectBank (USER_BANK_0);
  HAL_Delay (10);
 800139c:	200a      	movs	r0, #10
 800139e:	f000 fedf 	bl	8002160 <HAL_Delay>
  icm20948_init();
 80013a2:	f7ff fa1f 	bl	80007e4 <icm20948_init>
//  ICM_PowerOn ();
  ak09916_init();
 80013a6:	f7ff fa4b 	bl	8000840 <ak09916_init>
  HAL_Delay (10);
 80013aa:	200a      	movs	r0, #10
 80013ac:	f000 fed8 	bl	8002160 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char fileName[12];

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013b6:	4882      	ldr	r0, [pc, #520]	; (80015c0 <main+0x250>)
 80013b8:	f001 f9c2 	bl	8002740 <HAL_GPIO_WritePin>
  int i = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  BYTE buf[32] = "Hello world\r\n"; // file copy buffer
 80013c2:	4b80      	ldr	r3, [pc, #512]	; (80015c4 <main+0x254>)
 80013c4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80013c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ca:	c407      	stmia	r4!, {r0, r1, r2}
 80013cc:	8023      	strh	r3, [r4, #0]
 80013ce:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	821a      	strh	r2, [r3, #16]
  uint32_t bw, br;

  // 1.
  //printf("%c%c%c%c\r\n", SDPath[0], SDPath[1], SDPath[2], SDPath[3]);
  if ((retSD = f_mount (&SDFatFS, SDPath, 0)) == FR_OK)
 80013de:	2200      	movs	r2, #0
 80013e0:	4979      	ldr	r1, [pc, #484]	; (80015c8 <main+0x258>)
 80013e2:	487a      	ldr	r0, [pc, #488]	; (80015cc <main+0x25c>)
 80013e4:	f00d f88a 	bl	800e4fc <f_mount>
 80013e8:	4603      	mov	r3, r0
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <main+0x260>)
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	4b77      	ldr	r3, [pc, #476]	; (80015d0 <main+0x260>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d106      	bne.n	8001406 <main+0x96>
  {
    //sprintf(str, "f_mount OK %d", retSD);
    printf ("1. f_mount OK %d \r\n", retSD);
 80013f8:	4b75      	ldr	r3, [pc, #468]	; (80015d0 <main+0x260>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4875      	ldr	r0, [pc, #468]	; (80015d4 <main+0x264>)
 8001400:	f00e f808 	bl	800f414 <iprintf>
 8001404:	e005      	b.n	8001412 <main+0xa2>
  }
  else
  {
    printf ("1. f_mount OK failed %d\r\n", retSD);
 8001406:	4b72      	ldr	r3, [pc, #456]	; (80015d0 <main+0x260>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	4619      	mov	r1, r3
 800140c:	4872      	ldr	r0, [pc, #456]	; (80015d8 <main+0x268>)
 800140e:	f00e f801 	bl	800f414 <iprintf>
  }
  // 2.

  int fileIndex = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  do
  {

    fileIndex++;
 8001418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800141c:	3301      	adds	r3, #1
 800141e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    sprintf (fileName, "data%04d.txt", fileIndex);
 8001422:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001426:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800142a:	496c      	ldr	r1, [pc, #432]	; (80015dc <main+0x26c>)
 800142c:	4618      	mov	r0, r3
 800142e:	f00e f87f 	bl	800f530 <siprintf>

    retSD = f_open (&SDFile, fileName, FA_OPEN_EXISTING | FA_READ);
 8001432:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001436:	2201      	movs	r2, #1
 8001438:	4619      	mov	r1, r3
 800143a:	4869      	ldr	r0, [pc, #420]	; (80015e0 <main+0x270>)
 800143c:	f00d f8a4 	bl	800e588 <f_open>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b62      	ldr	r3, [pc, #392]	; (80015d0 <main+0x260>)
 8001446:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit (&huart4, fileName, 12, HAL_MAX_DELAY);
 8001448:	f107 0144 	add.w	r1, r7, #68	; 0x44
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	220c      	movs	r2, #12
 8001452:	4864      	ldr	r0, [pc, #400]	; (80015e4 <main+0x274>)
 8001454:	f007 fc4c 	bl	8008cf0 <HAL_UART_Transmit>
    printf ("  %d\r\n", retSD);
 8001458:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <main+0x260>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	4862      	ldr	r0, [pc, #392]	; (80015e8 <main+0x278>)
 8001460:	f00d ffd8 	bl	800f414 <iprintf>
    HAL_Delay (1000);
 8001464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001468:	f000 fe7a 	bl	8002160 <HAL_Delay>
    if (retSD == FR_OK)
 800146c:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <main+0x260>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <main+0x10a>
      f_close (&SDFile);
 8001474:	485a      	ldr	r0, [pc, #360]	; (80015e0 <main+0x270>)
 8001476:	f00d fe4f 	bl	800f118 <f_close>
    if ( retSD == FR_NOT_READY)
 800147a:	4b55      	ldr	r3, [pc, #340]	; (80015d0 <main+0x260>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b03      	cmp	r3, #3
 8001480:	d100      	bne.n	8001484 <main+0x114>
      while(1);
 8001482:	e7fe      	b.n	8001482 <main+0x112>
  }while (retSD != FR_NO_FILE);
 8001484:	4b52      	ldr	r3, [pc, #328]	; (80015d0 <main+0x260>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b04      	cmp	r3, #4
 800148a:	d1c5      	bne.n	8001418 <main+0xa8>

  HAL_GPIO_WritePin (LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001492:	484b      	ldr	r0, [pc, #300]	; (80015c0 <main+0x250>)
 8001494:	f001 f954 	bl	8002740 <HAL_GPIO_WritePin>

  uint8_t startFlag = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
  uint8_t save_Count = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba

  IMU imuData;
  while (1)
  {
    if (startFlag)
 80014a4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d048      	beq.n	800153e <main+0x1ce>
    {
//      ICM_SelectBank (USER_BANK_0);
      HAL_Delay (10);
 80014ac:	200a      	movs	r0, #10
 80014ae:	f000 fe57 	bl	8002160 <HAL_Delay>
      // Obtain magnetometer data
      int16_t mag_data[3];
//      ICM_ReadMag (mag_data);
      // Print raw, but joined, axis data values to screen

      icm20948_gyro_read(&my_gyro);
 80014b2:	484e      	ldr	r0, [pc, #312]	; (80015ec <main+0x27c>)
 80014b4:	f7ff f9dd 	bl	8000872 <icm20948_gyro_read>
      icm20948_accel_read(&my_accel);
 80014b8:	484d      	ldr	r0, [pc, #308]	; (80015f0 <main+0x280>)
 80014ba:	f7ff fa0f 	bl	80008dc <icm20948_accel_read>
      ak09916_mag_read(&my_mag);
 80014be:	484d      	ldr	r0, [pc, #308]	; (80015f4 <main+0x284>)
 80014c0:	f7ff fa50 	bl	8000964 <ak09916_mag_read>
//      sprintf (uart_buffer, "%10d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d,%5d\r\n",
//               HAL_GetTick(),my_accel.x,my_accel.y,my_accel.z, my_gyro.x,
//               my_gyro.y, my_gyro.z, my_mag.x, my_mag.y,
//               my_mag.z);

      imuData.time = HAL_GetTick();
 80014c4:	f000 fe40 	bl	8002148 <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	60bb      	str	r3, [r7, #8]
      imuData.ax = my_accel.x;
 80014cc:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <main+0x280>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_accel.y;
 80014d4:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <main+0x280>)
 80014d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014da:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_accel.z;
 80014dc:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <main+0x280>)
 80014de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014e2:	81bb      	strh	r3, [r7, #12]

      imuData.gx = my_gyro.x;
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <main+0x27c>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	827b      	strh	r3, [r7, #18]
      imuData.gx = my_gyro.y;
 80014ec:	4b3f      	ldr	r3, [pc, #252]	; (80015ec <main+0x27c>)
 80014ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014f2:	827b      	strh	r3, [r7, #18]
      imuData.gx = my_gyro.z;
 80014f4:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <main+0x27c>)
 80014f6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014fa:	827b      	strh	r3, [r7, #18]

      imuData.ax = my_mag.x;
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <main+0x284>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_mag.y;
 8001504:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <main+0x284>)
 8001506:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800150a:	81bb      	strh	r3, [r7, #12]
      imuData.ax = my_mag.z;
 800150c:	4b39      	ldr	r3, [pc, #228]	; (80015f4 <main+0x284>)
 800150e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001512:	81bb      	strh	r3, [r7, #12]

      //HAL_UART_Transmit(&huart4, (uint8_t*) uart_buffer, strlen(uart_buffer), 1000);
      //printf("%d\r\n", strlen(uart_buffer));
      f_write (&SDFile,  (uint8_t*)&imuData, 22 , &bw);
 8001514:	f107 0320 	add.w	r3, r7, #32
 8001518:	f107 0108 	add.w	r1, r7, #8
 800151c:	2216      	movs	r2, #22
 800151e:	4830      	ldr	r0, [pc, #192]	; (80015e0 <main+0x270>)
 8001520:	f00d fb05 	bl	800eb2e <f_write>
      if(save_Count++ == 5){
 8001524:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	f887 20ba 	strb.w	r2, [r7, #186]	; 0xba
 800152e:	2b05      	cmp	r3, #5
 8001530:	d105      	bne.n	800153e <main+0x1ce>
        save_Count = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
        f_sync (&SDFile);
 8001538:	4829      	ldr	r0, [pc, #164]	; (80015e0 <main+0x270>)
 800153a:	f00d fccf 	bl	800eedc <f_sync>
      }
    }

    if (userKey1Flag)
 800153e:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <main+0x288>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0ad      	beq.n	80014a4 <main+0x134>
    {
      if (startFlag == 1)
 8001548:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800154c:	2b01      	cmp	r3, #1
 800154e:	d103      	bne.n	8001558 <main+0x1e8>
        f_close (&SDFile);
 8001550:	4823      	ldr	r0, [pc, #140]	; (80015e0 <main+0x270>)
 8001552:	f00d fde1 	bl	800f118 <f_close>
 8001556:	e018      	b.n	800158a <main+0x21a>
      else
      {
        retSD = f_open (&SDFile, fileName, FA_OPEN_APPEND | FA_WRITE);
 8001558:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800155c:	2232      	movs	r2, #50	; 0x32
 800155e:	4619      	mov	r1, r3
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <main+0x270>)
 8001562:	f00d f811 	bl	800e588 <f_open>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <main+0x260>)
 800156c:	701a      	strb	r2, [r3, #0]

        if (retSD == FR_OK)
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <main+0x260>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d103      	bne.n	800157e <main+0x20e>
        {
          printf ("OK\r\n");
 8001576:	4821      	ldr	r0, [pc, #132]	; (80015fc <main+0x28c>)
 8001578:	f00d ffd2 	bl	800f520 <puts>
 800157c:	e005      	b.n	800158a <main+0x21a>
        }
        else
        {
          printf ("2. Failed %d \r\n", retSD);
 800157e:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <main+0x260>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	481e      	ldr	r0, [pc, #120]	; (8001600 <main+0x290>)
 8001586:	f00d ff45 	bl	800f414 <iprintf>
        }
      }

      printf ("asdf\r\n");
 800158a:	481e      	ldr	r0, [pc, #120]	; (8001604 <main+0x294>)
 800158c:	f00d ffc8 	bl	800f520 <puts>

      startFlag = !startFlag;
 8001590:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
      HAL_Delay (500);
 80015a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a6:	f000 fddb 	bl	8002160 <HAL_Delay>
      HAL_GPIO_TogglePin (LED_B_GPIO_Port, LED_B_Pin);
 80015aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <main+0x250>)
 80015b0:	f001 f8df 	bl	8002772 <HAL_GPIO_TogglePin>
      userKey1Flag = 0;
 80015b4:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <main+0x288>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    if (startFlag)
 80015ba:	e773      	b.n	80014a4 <main+0x134>
 80015bc:	080107f0 	.word	0x080107f0
 80015c0:	58022000 	.word	0x58022000
 80015c4:	08010864 	.word	0x08010864
 80015c8:	240002a8 	.word	0x240002a8
 80015cc:	240002ac 	.word	0x240002ac
 80015d0:	240002a4 	.word	0x240002a4
 80015d4:	08010800 	.word	0x08010800
 80015d8:	08010814 	.word	0x08010814
 80015dc:	08010830 	.word	0x08010830
 80015e0:	240012e8 	.word	0x240012e8
 80015e4:	24000210 	.word	0x24000210
 80015e8:	08010840 	.word	0x08010840
 80015ec:	240000a4 	.word	0x240000a4
 80015f0:	240000ac 	.word	0x240000ac
 80015f4:	240000b4 	.word	0x240000b4
 80015f8:	240000a2 	.word	0x240000a2
 80015fc:	08010848 	.word	0x08010848
 8001600:	0801084c 	.word	0x0801084c
 8001604:	0801085c 	.word	0x0801085c

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b09c      	sub	sp, #112	; 0x70
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	224c      	movs	r2, #76	; 0x4c
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d fef4 	bl	800f404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2220      	movs	r2, #32
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f00d feee 	bl	800f404 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001628:	2002      	movs	r0, #2
 800162a:	f001 f8d7 	bl	80027dc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162e:	2300      	movs	r3, #0
 8001630:	603b      	str	r3, [r7, #0]
 8001632:	4b34      	ldr	r3, [pc, #208]	; (8001704 <SystemClock_Config+0xfc>)
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	4a33      	ldr	r2, [pc, #204]	; (8001704 <SystemClock_Config+0xfc>)
 8001638:	f023 0301 	bic.w	r3, r3, #1
 800163c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <SystemClock_Config+0xfc>)
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <SystemClock_Config+0x100>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a2e      	ldr	r2, [pc, #184]	; (8001708 <SystemClock_Config+0x100>)
 800164e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <SystemClock_Config+0x100>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001660:	bf00      	nop
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <SystemClock_Config+0x100>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800166a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800166e:	d1f8      	bne.n	8001662 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001670:	4b26      	ldr	r3, [pc, #152]	; (800170c <SystemClock_Config+0x104>)
 8001672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001674:	f023 0303 	bic.w	r3, r3, #3
 8001678:	4a24      	ldr	r2, [pc, #144]	; (800170c <SystemClock_Config+0x104>)
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001680:	2301      	movs	r3, #1
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800168e:	2302      	movs	r3, #2
 8001690:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001692:	2305      	movs	r3, #5
 8001694:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001696:	23a0      	movs	r3, #160	; 0xa0
 8001698:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800169a:	2302      	movs	r3, #2
 800169c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800169e:	2302      	movs	r3, #2
 80016a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80016a6:	2308      	movs	r3, #8
 80016a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b6:	4618      	mov	r0, r3
 80016b8:	f001 f8ca 	bl	8002850 <HAL_RCC_OscConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80016c2:	f000 f837 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c6:	233f      	movs	r3, #63	; 0x3f
 80016c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ca:	2303      	movs	r3, #3
 80016cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80016d2:	2308      	movs	r3, #8
 80016d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80016d6:	2340      	movs	r3, #64	; 0x40
 80016d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80016da:	2340      	movs	r3, #64	; 0x40
 80016dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80016de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80016e4:	2340      	movs	r3, #64	; 0x40
 80016e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	2102      	movs	r1, #2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fcdd 	bl	80030ac <HAL_RCC_ClockConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80016f8:	f000 f81c 	bl	8001734 <Error_Handler>
  }
}
 80016fc:	bf00      	nop
 80016fe:	3770      	adds	r7, #112	; 0x70
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58000400 	.word	0x58000400
 8001708:	58024800 	.word	0x58024800
 800170c:	58024400 	.word	0x58024400

08001710 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit (&huart4, (uint8_t*) &ch, 1, 0xFFFF);
 8001718:	1d39      	adds	r1, r7, #4
 800171a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171e:	2201      	movs	r2, #1
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <__io_putchar+0x20>)
 8001722:	f007 fae5 	bl	8008cf0 <HAL_UART_Transmit>

  return ch;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	24000210 	.word	0x24000210

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq ();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_SDMMC1_SD_Init+0x34>)
 8001746:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <MX_SDMMC1_SD_Init+0x38>)
 8001748:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_SDMMC1_SD_Init+0x34>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001750:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_SDMMC1_SD_Init+0x34>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <MX_SDMMC1_SD_Init+0x34>)
 8001758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800175e:	4b05      	ldr	r3, [pc, #20]	; (8001774 <MX_SDMMC1_SD_Init+0x34>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 4;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <MX_SDMMC1_SD_Init+0x34>)
 8001766:	2204      	movs	r2, #4
 8001768:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	240000bc 	.word	0x240000bc
 8001778:	52007000 	.word	0x52007000

0800177c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b0ba      	sub	sp, #232	; 0xe8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001794:	f107 0318 	add.w	r3, r7, #24
 8001798:	22bc      	movs	r2, #188	; 0xbc
 800179a:	2100      	movs	r1, #0
 800179c:	4618      	mov	r0, r3
 800179e:	f00d fe31 	bl	800f404 <memset>
  if(sdHandle->Instance==SDMMC1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a43      	ldr	r2, [pc, #268]	; (80018b4 <HAL_SD_MspInit+0x138>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d17f      	bne.n	80018ac <HAL_SD_MspInit+0x130>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80017ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 5;
 80017b2:	2305      	movs	r3, #5
 80017b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80017b6:	23c0      	movs	r3, #192	; 0xc0
 80017b8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80017ba:	2302      	movs	r3, #2
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80017be:	2302      	movs	r3, #2
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2R = 20;
 80017c2:	2314      	movs	r3, #20
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80017d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017d8:	f107 0318 	add.w	r3, r7, #24
 80017dc:	4618      	mov	r0, r3
 80017de:	f001 fff1 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80017e8:	f7ff ffa4 	bl	8001734 <Error_Handler>
    }

    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80017ec:	4b32      	ldr	r3, [pc, #200]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 80017ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017f2:	4a31      	ldr	r2, [pc, #196]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 80017f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 80017fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 800180c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001810:	4a29      	ldr	r2, [pc, #164]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800181a:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 800182a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_SD_MspInit+0x13c>)
 800183a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_8
 8001846:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800184a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001854:	2301      	movs	r3, #1
 8001856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185a:	2303      	movs	r3, #3
 800185c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001860:	230c      	movs	r3, #12
 8001862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001866:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800186a:	4619      	mov	r1, r3
 800186c:	4813      	ldr	r0, [pc, #76]	; (80018bc <HAL_SD_MspInit+0x140>)
 800186e:	f000 fdb7 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001872:	2304      	movs	r3, #4
 8001874:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187e:	2301      	movs	r3, #1
 8001880:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800188a:	230c      	movs	r3, #12
 800188c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001890:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001894:	4619      	mov	r1, r3
 8001896:	480a      	ldr	r0, [pc, #40]	; (80018c0 <HAL_SD_MspInit+0x144>)
 8001898:	f000 fda2 	bl	80023e0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2031      	movs	r0, #49	; 0x31
 80018a2:	f000 fd68 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80018a6:	2031      	movs	r0, #49	; 0x31
 80018a8:	f000 fd7f 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 80018ac:	bf00      	nop
 80018ae:	37e8      	adds	r7, #232	; 0xe8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	52007000 	.word	0x52007000
 80018b8:	58024400 	.word	0x58024400
 80018bc:	58020800 	.word	0x58020800
 80018c0:	58020c00 	.word	0x58020c00

080018c4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80018c8:	4b28      	ldr	r3, [pc, #160]	; (800196c <MX_SPI2_Init+0xa8>)
 80018ca:	4a29      	ldr	r2, [pc, #164]	; (8001970 <MX_SPI2_Init+0xac>)
 80018cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018ce:	4b27      	ldr	r3, [pc, #156]	; (800196c <MX_SPI2_Init+0xa8>)
 80018d0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <MX_SPI2_Init+0xa8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_SPI2_Init+0xa8>)
 80018de:	2207      	movs	r2, #7
 80018e0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <MX_SPI2_Init+0xa8>)
 80018e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_SPI2_Init+0xa8>)
 80018ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <MX_SPI2_Init+0xa8>)
 80018f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <MX_SPI2_Init+0xa8>)
 80018fc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001900:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001902:	4b1a      	ldr	r3, [pc, #104]	; (800196c <MX_SPI2_Init+0xa8>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001908:	4b18      	ldr	r3, [pc, #96]	; (800196c <MX_SPI2_Init+0xa8>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <MX_SPI2_Init+0xa8>)
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001914:	4b15      	ldr	r3, [pc, #84]	; (800196c <MX_SPI2_Init+0xa8>)
 8001916:	2200      	movs	r2, #0
 8001918:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <MX_SPI2_Init+0xa8>)
 800191c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001920:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_SPI2_Init+0xa8>)
 8001924:	2200      	movs	r2, #0
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001928:	4b10      	ldr	r3, [pc, #64]	; (800196c <MX_SPI2_Init+0xa8>)
 800192a:	2200      	movs	r2, #0
 800192c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800192e:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_SPI2_Init+0xa8>)
 8001930:	2200      	movs	r2, #0
 8001932:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MX_SPI2_Init+0xa8>)
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800193a:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_SPI2_Init+0xa8>)
 800193c:	2200      	movs	r2, #0
 800193e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_SPI2_Init+0xa8>)
 8001942:	2200      	movs	r2, #0
 8001944:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_SPI2_Init+0xa8>)
 8001948:	2200      	movs	r2, #0
 800194a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_SPI2_Init+0xa8>)
 800194e:	2200      	movs	r2, #0
 8001950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_SPI2_Init+0xa8>)
 8001954:	2200      	movs	r2, #0
 8001956:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_SPI2_Init+0xa8>)
 800195a:	f005 fee5 	bl	8007728 <HAL_SPI_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001964:	f7ff fee6 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	24000138 	.word	0x24000138
 8001970:	40003800 	.word	0x40003800

08001974 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0b8      	sub	sp, #224	; 0xe0
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	22bc      	movs	r2, #188	; 0xbc
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f00d fd35 	bl	800f404 <memset>
  if(spiHandle->Instance==SPI2)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <HAL_SPI_MspInit+0xe0>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d153      	bne.n	8001a4c <HAL_SPI_MspInit+0xd8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 80019aa:	2305      	movs	r3, #5
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80019ae:	23c0      	movs	r3, #192	; 0xc0
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 20;
 80019b2:	2314      	movs	r3, #20
 80019b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80019b6:	2302      	movs	r3, #2
 80019b8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80019ba:	2302      	movs	r3, #2
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80019be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019c2:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d2:	f107 0310 	add.w	r3, r7, #16
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 fef4 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_SPI_MspInit+0x72>
    {
      Error_Handler();
 80019e2:	f7ff fea7 	bl	8001734 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e6:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 80019e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 80019ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 80019f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 8001a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_SPI_MspInit+0xe4>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a22:	230e      	movs	r3, #14
 8001a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a44:	4619      	mov	r1, r3
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_SPI_MspInit+0xe8>)
 8001a48:	f000 fcca 	bl	80023e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	37e0      	adds	r7, #224	; 0xe0
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40003800 	.word	0x40003800
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58022000 	.word	0x58022000

08001a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_MspInit+0x30>)
 8001a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a6c:	4a08      	ldr	r2, [pc, #32]	; (8001a90 <HAL_MspInit+0x30>)
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <HAL_MspInit+0x30>)
 8001a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	58024400 	.word	0x58024400

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae0:	f000 fb1e 	bl	8002120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_KEY_Pin);
 8001aec:	2010      	movs	r0, #16
 8001aee:	f000 fe5a 	bl	80027a6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <SDMMC1_IRQHandler+0x10>)
 8001afe:	f004 fc1f 	bl	8006340 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	240000bc 	.word	0x240000bc

08001b0c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM7_IRQHandler+0x10>)
 8001b12:	f006 fe05 	bl	8008720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	240001c4 	.word	0x240001c4

08001b20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	e00a      	b.n	8001b48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b32:	f3af 8000 	nop.w
 8001b36:	4601      	mov	r1, r0
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	1c5a      	adds	r2, r3, #1
 8001b3c:	60ba      	str	r2, [r7, #8]
 8001b3e:	b2ca      	uxtb	r2, r1
 8001b40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	3301      	adds	r3, #1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	dbf0      	blt.n	8001b32 <_read+0x12>
	}

return len;
 8001b50:	687b      	ldr	r3, [r7, #4]
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e009      	b.n	8001b80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fdcb 	bl	8001710 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	dbf1      	blt.n	8001b6c <_write+0x12>
	}
	return len;
 8001b88:	687b      	ldr	r3, [r7, #4]
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <_close>:

int _close(int file)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
	return -1;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b083      	sub	sp, #12
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bba:	605a      	str	r2, [r3, #4]
	return 0;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_isatty>:

int _isatty(int file)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bd2:	2301      	movs	r3, #1
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <_sbrk+0x5c>)
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <_sbrk+0x60>)
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <_sbrk+0x64>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d102      	bne.n	8001c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <_sbrk+0x64>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <_sbrk+0x68>)
 8001c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d207      	bcs.n	8001c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c2c:	f00d fbc0 	bl	800f3b0 <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295
 8001c3a:	e009      	b.n	8001c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c3c:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <_sbrk+0x64>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <_sbrk+0x64>)
 8001c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	24080000 	.word	0x24080000
 8001c5c:	00000400 	.word	0x00000400
 8001c60:	240001c0 	.word	0x240001c0
 8001c64:	240027e8 	.word	0x240027e8

08001c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <SystemInit+0xe4>)
 8001c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <SystemInit+0xe4>)
 8001c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c7c:	4b34      	ldr	r3, [pc, #208]	; (8001d50 <SystemInit+0xe8>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b06      	cmp	r3, #6
 8001c86:	d807      	bhi.n	8001c98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c88:	4b31      	ldr	r3, [pc, #196]	; (8001d50 <SystemInit+0xe8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 030f 	bic.w	r3, r3, #15
 8001c90:	4a2f      	ldr	r2, [pc, #188]	; (8001d50 <SystemInit+0xe8>)
 8001c92:	f043 0307 	orr.w	r3, r3, #7
 8001c96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c98:	4b2e      	ldr	r3, [pc, #184]	; (8001d54 <SystemInit+0xec>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a2d      	ldr	r2, [pc, #180]	; (8001d54 <SystemInit+0xec>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ca4:	4b2b      	ldr	r3, [pc, #172]	; (8001d54 <SystemInit+0xec>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <SystemInit+0xec>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4929      	ldr	r1, [pc, #164]	; (8001d54 <SystemInit+0xec>)
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <SystemInit+0xf0>)
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <SystemInit+0xe8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d007      	beq.n	8001cd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001cc2:	4b23      	ldr	r3, [pc, #140]	; (8001d50 <SystemInit+0xe8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 030f 	bic.w	r3, r3, #15
 8001cca:	4a21      	ldr	r2, [pc, #132]	; (8001d50 <SystemInit+0xe8>)
 8001ccc:	f043 0307 	orr.w	r3, r3, #7
 8001cd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001cd2:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <SystemInit+0xec>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <SystemInit+0xec>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <SystemInit+0xec>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <SystemInit+0xec>)
 8001ce6:	4a1d      	ldr	r2, [pc, #116]	; (8001d5c <SystemInit+0xf4>)
 8001ce8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <SystemInit+0xec>)
 8001cec:	4a1c      	ldr	r2, [pc, #112]	; (8001d60 <SystemInit+0xf8>)
 8001cee:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <SystemInit+0xec>)
 8001cf2:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <SystemInit+0xfc>)
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <SystemInit+0xec>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <SystemInit+0xec>)
 8001cfe:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <SystemInit+0xfc>)
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001d02:	4b14      	ldr	r3, [pc, #80]	; (8001d54 <SystemInit+0xec>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <SystemInit+0xec>)
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <SystemInit+0xfc>)
 8001d0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <SystemInit+0xec>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <SystemInit+0xec>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <SystemInit+0xec>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <SystemInit+0xec>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <SystemInit+0x100>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <SystemInit+0x104>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d32:	d202      	bcs.n	8001d3a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <SystemInit+0x108>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <SystemInit+0x10c>)
 8001d3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001d40:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00
 8001d50:	52002000 	.word	0x52002000
 8001d54:	58024400 	.word	0x58024400
 8001d58:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d5c:	02020200 	.word	0x02020200
 8001d60:	01ff0000 	.word	0x01ff0000
 8001d64:	01010280 	.word	0x01010280
 8001d68:	5c001000 	.word	0x5c001000
 8001d6c:	ffff0000 	.word	0xffff0000
 8001d70:	51008108 	.word	0x51008108
 8001d74:	52004000 	.word	0x52004000

08001d78 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d88:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001d8a:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <MX_TIM7_Init+0x6c>)
 8001d8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001d90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d94:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001d9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001da2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001da4:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001dac:	f006 fc61 	bl	8008672 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001db6:	f7ff fcbd 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <MX_TIM7_Init+0x68>)
 8001dc8:	f006 fe96 	bl	8008af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001dd2:	f7ff fcaf 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	240001c4 	.word	0x240001c4
 8001de4:	40001400 	.word	0x40001400

08001de8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0e      	ldr	r2, [pc, #56]	; (8001e30 <HAL_TIM_Base_MspInit+0x48>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d116      	bne.n	8001e28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_TIM_Base_MspInit+0x4c>)
 8001dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e00:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_TIM_Base_MspInit+0x4c>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_TIM_Base_MspInit+0x4c>)
 8001e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	2037      	movs	r0, #55	; 0x37
 8001e1e:	f000 faaa 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001e22:	2037      	movs	r0, #55	; 0x37
 8001e24:	f000 fac1 	bl	80023aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40001400 	.word	0x40001400
 8001e34:	58024400 	.word	0x58024400

08001e38 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e3e:	4a23      	ldr	r2, [pc, #140]	; (8001ecc <MX_UART4_Init+0x94>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e42:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e74:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e7a:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e80:	4811      	ldr	r0, [pc, #68]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e82:	f006 fee5 	bl	8008c50 <HAL_UART_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001e8c:	f7ff fc52 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e90:	2100      	movs	r1, #0
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001e94:	f007 ff18 	bl	8009cc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001e9e:	f7ff fc49 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001ea6:	f007 ff4d 	bl	8009d44 <HAL_UARTEx_SetRxFifoThreshold>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001eb0:	f7ff fc40 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <MX_UART4_Init+0x90>)
 8001eb6:	f007 fece 	bl	8009c56 <HAL_UARTEx_DisableFifoMode>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ec0:	f7ff fc38 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	24000210 	.word	0x24000210
 8001ecc:	40004c00 	.word	0x40004c00

08001ed0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b0ba      	sub	sp, #232	; 0xe8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee8:	f107 0318 	add.w	r3, r7, #24
 8001eec:	22bc      	movs	r2, #188	; 0xbc
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00d fa87 	bl	800f404 <memset>
  if(uartHandle->Instance==UART4)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a37      	ldr	r2, [pc, #220]	; (8001fd8 <HAL_UART_MspInit+0x108>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d166      	bne.n	8001fce <HAL_UART_MspInit+0xfe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0a:	f107 0318 	add.w	r3, r7, #24
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f001 fc58 	bl	80037c4 <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f1a:	f7ff fc0b 	bl	8001734 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f24:	4a2d      	ldr	r2, [pc, #180]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f2a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f42:	4a26      	ldr	r2, [pc, #152]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4c:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5a:	4b20      	ldr	r3, [pc, #128]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_UART_MspInit+0x10c>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PI9     ------> UART4_RX
    PA0_C     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f80:	2302      	movs	r3, #2
 8001f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f92:	2308      	movs	r3, #8
 8001f94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4810      	ldr	r0, [pc, #64]	; (8001fe0 <HAL_UART_MspInit+0x110>)
 8001fa0:	f000 fa1e 	bl	80023e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4806      	ldr	r0, [pc, #24]	; (8001fe4 <HAL_UART_MspInit+0x114>)
 8001fca:	f000 fa09 	bl	80023e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001fce:	bf00      	nop
 8001fd0:	37e8      	adds	r7, #232	; 0xe8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40004c00 	.word	0x40004c00
 8001fdc:	58024400 	.word	0x58024400
 8001fe0:	58022000 	.word	0x58022000
 8001fe4:	58020000 	.word	0x58020000

08001fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fe8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002020 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fec:	f7ff fe3c 	bl	8001c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	480c      	ldr	r0, [pc, #48]	; (8002024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ff2:	490d      	ldr	r1, [pc, #52]	; (8002028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ff4:	4a0d      	ldr	r2, [pc, #52]	; (800202c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002008:	4c0a      	ldr	r4, [pc, #40]	; (8002034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002016:	f00d f9d1 	bl	800f3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201a:	f7ff f9a9 	bl	8001370 <main>
  bx  lr
 800201e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002020:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002024:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002028:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800202c:	08010e0c 	.word	0x08010e0c
  ldr r2, =_sbss
 8002030:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8002034:	240027e4 	.word	0x240027e4

08002038 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002038:	e7fe      	b.n	8002038 <ADC3_IRQHandler>
	...

0800203c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002042:	2003      	movs	r0, #3
 8002044:	f000 f98c 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002048:	f001 f9e6 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_Init+0x68>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	0a1b      	lsrs	r3, r3, #8
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	4913      	ldr	r1, [pc, #76]	; (80020a8 <HAL_Init+0x6c>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_Init+0x68>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	4a0e      	ldr	r2, [pc, #56]	; (80020a8 <HAL_Init+0x6c>)
 8002070:	5cd3      	ldrb	r3, [r2, r3]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <HAL_Init+0x70>)
 800207e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <HAL_Init+0x74>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002086:	200f      	movs	r0, #15
 8002088:	f000 f814 	bl	80020b4 <HAL_InitTick>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e002      	b.n	800209c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002096:	f7ff fce3 	bl	8001a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	58024400 	.word	0x58024400
 80020a8:	080108d8 	.word	0x080108d8
 80020ac:	24000004 	.word	0x24000004
 80020b0:	24000000 	.word	0x24000000

080020b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_InitTick+0x60>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e021      	b.n	800210c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_InitTick+0x64>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <HAL_InitTick+0x60>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4619      	mov	r1, r3
 80020d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f971 	bl	80023c6 <HAL_SYSTICK_Config>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e00e      	b.n	800210c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b0f      	cmp	r3, #15
 80020f2:	d80a      	bhi.n	800210a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f4:	2200      	movs	r2, #0
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f04f 30ff 	mov.w	r0, #4294967295
 80020fc:	f000 f93b 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002100:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_InitTick+0x68>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
}
 800210c:	4618      	mov	r0, r3
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	2400000c 	.word	0x2400000c
 8002118:	24000000 	.word	0x24000000
 800211c:	24000008 	.word	0x24000008

08002120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_IncTick+0x20>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x24>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4413      	add	r3, r2
 8002130:	4a04      	ldr	r2, [pc, #16]	; (8002144 <HAL_IncTick+0x24>)
 8002132:	6013      	str	r3, [r2, #0]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	2400000c 	.word	0x2400000c
 8002144:	240002a0 	.word	0x240002a0

08002148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <HAL_GetTick+0x14>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	240002a0 	.word	0x240002a0

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff ffee 	bl	8002148 <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffde 	bl	8002148 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2400000c 	.word	0x2400000c

080021a8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetREVID+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	0c1b      	lsrs	r3, r3, #16
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	5c001000 	.word	0x5c001000

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <__NVIC_SetPriorityGrouping+0x40>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <__NVIC_SetPriorityGrouping+0x40>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00
 8002204:	05fa0000 	.word	0x05fa0000

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	88fb      	ldrh	r3, [r7, #6]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002384:	f7ff ff40 	bl	8002208 <__NVIC_GetPriorityGrouping>
 8002388:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68b9      	ldr	r1, [r7, #8]
 800238e:	6978      	ldr	r0, [r7, #20]
 8002390:	f7ff ff90 	bl	80022b4 <NVIC_EncodePriority>
 8002394:	4602      	mov	r2, r0
 8002396:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800239a:	4611      	mov	r1, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5f 	bl	8002260 <__NVIC_SetPriority>
}
 80023a2:	bf00      	nop
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff33 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b082      	sub	sp, #8
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ffa4 	bl	800231c <SysTick_Config>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
	...

080023e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80023ee:	4b89      	ldr	r3, [pc, #548]	; (8002614 <HAL_GPIO_Init+0x234>)
 80023f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023f2:	e194      	b.n	800271e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002400:	4013      	ands	r3, r2
 8002402:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8186 	beq.w	8002718 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0303 	and.w	r3, r3, #3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d005      	beq.n	8002424 <HAL_GPIO_Init+0x44>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d130      	bne.n	8002486 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4013      	ands	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800245a:	2201      	movs	r2, #1
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	091b      	lsrs	r3, r3, #4
 8002470:	f003 0201 	and.w	r2, r3, #1
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b03      	cmp	r3, #3
 8002490:	d017      	beq.n	80024c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	2203      	movs	r2, #3
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d123      	bne.n	8002516 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	08da      	lsrs	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3208      	adds	r2, #8
 80024d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	220f      	movs	r2, #15
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4013      	ands	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	08da      	lsrs	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3208      	adds	r2, #8
 8002510:	69b9      	ldr	r1, [r7, #24]
 8002512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0203 	and.w	r2, r3, #3
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 80e0 	beq.w	8002718 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_GPIO_Init+0x238>)
 800255a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800255e:	4a2e      	ldr	r2, [pc, #184]	; (8002618 <HAL_GPIO_Init+0x238>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_GPIO_Init+0x238>)
 800256a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002576:	4a29      	ldr	r2, [pc, #164]	; (800261c <HAL_GPIO_Init+0x23c>)
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	3302      	adds	r3, #2
 800257e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002582:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	220f      	movs	r2, #15
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4013      	ands	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_GPIO_Init+0x240>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d052      	beq.n	8002648 <HAL_GPIO_Init+0x268>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	; (8002624 <HAL_GPIO_Init+0x244>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d031      	beq.n	800260e <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <HAL_GPIO_Init+0x248>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <HAL_GPIO_Init+0x22a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a1d      	ldr	r2, [pc, #116]	; (800262c <HAL_GPIO_Init+0x24c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d025      	beq.n	8002606 <HAL_GPIO_Init+0x226>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a1c      	ldr	r2, [pc, #112]	; (8002630 <HAL_GPIO_Init+0x250>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d01f      	beq.n	8002602 <HAL_GPIO_Init+0x222>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_GPIO_Init+0x254>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d019      	beq.n	80025fe <HAL_GPIO_Init+0x21e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x258>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0x21a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_GPIO_Init+0x25c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00d      	beq.n	80025f6 <HAL_GPIO_Init+0x216>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_GPIO_Init+0x260>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d007      	beq.n	80025f2 <HAL_GPIO_Init+0x212>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_GPIO_Init+0x264>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d101      	bne.n	80025ee <HAL_GPIO_Init+0x20e>
 80025ea:	2309      	movs	r3, #9
 80025ec:	e02d      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025ee:	230a      	movs	r3, #10
 80025f0:	e02b      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025f2:	2308      	movs	r3, #8
 80025f4:	e029      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e027      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025fa:	2306      	movs	r3, #6
 80025fc:	e025      	b.n	800264a <HAL_GPIO_Init+0x26a>
 80025fe:	2305      	movs	r3, #5
 8002600:	e023      	b.n	800264a <HAL_GPIO_Init+0x26a>
 8002602:	2304      	movs	r3, #4
 8002604:	e021      	b.n	800264a <HAL_GPIO_Init+0x26a>
 8002606:	2303      	movs	r3, #3
 8002608:	e01f      	b.n	800264a <HAL_GPIO_Init+0x26a>
 800260a:	2302      	movs	r3, #2
 800260c:	e01d      	b.n	800264a <HAL_GPIO_Init+0x26a>
 800260e:	2301      	movs	r3, #1
 8002610:	e01b      	b.n	800264a <HAL_GPIO_Init+0x26a>
 8002612:	bf00      	nop
 8002614:	58000080 	.word	0x58000080
 8002618:	58024400 	.word	0x58024400
 800261c:	58000400 	.word	0x58000400
 8002620:	58020000 	.word	0x58020000
 8002624:	58020400 	.word	0x58020400
 8002628:	58020800 	.word	0x58020800
 800262c:	58020c00 	.word	0x58020c00
 8002630:	58021000 	.word	0x58021000
 8002634:	58021400 	.word	0x58021400
 8002638:	58021800 	.word	0x58021800
 800263c:	58021c00 	.word	0x58021c00
 8002640:	58022000 	.word	0x58022000
 8002644:	58022400 	.word	0x58022400
 8002648:	2300      	movs	r3, #0
 800264a:	69fa      	ldr	r2, [r7, #28]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	0092      	lsls	r2, r2, #2
 8002652:	4093      	lsls	r3, r2
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800265a:	4938      	ldr	r1, [pc, #224]	; (800273c <HAL_GPIO_Init+0x35c>)
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	3302      	adds	r3, #2
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800268e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80026bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	3301      	adds	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f ae63 	bne.w	80023f4 <HAL_GPIO_Init+0x14>
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	3724      	adds	r7, #36	; 0x24
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58000400 	.word	0x58000400

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002772:	b480      	push	{r7}
 8002774:	b085      	sub	sp, #20
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	460b      	mov	r3, r1
 800277c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002784:	887a      	ldrh	r2, [r7, #2]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	041a      	lsls	r2, r3, #16
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43d9      	mvns	r1, r3
 8002790:	887b      	ldrh	r3, [r7, #2]
 8002792:	400b      	ands	r3, r1
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr

080027a6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	4603      	mov	r3, r0
 80027ae:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fdbb 	bl	8001348 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_PWREx_ConfigSupply+0x70>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d00a      	beq.n	8002806 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80027f0:	4b16      	ldr	r3, [pc, #88]	; (800284c <HAL_PWREx_ConfigSupply+0x70>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d001      	beq.n	8002802 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e01f      	b.n	8002842 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e01d      	b.n	8002842 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_PWREx_ConfigSupply+0x70>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	490f      	ldr	r1, [pc, #60]	; (800284c <HAL_PWREx_ConfigSupply+0x70>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4313      	orrs	r3, r2
 8002814:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002816:	f7ff fc97 	bl	8002148 <HAL_GetTick>
 800281a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800281c:	e009      	b.n	8002832 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800281e:	f7ff fc93 	bl	8002148 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800282c:	d901      	bls.n	8002832 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e007      	b.n	8002842 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_PWREx_ConfigSupply+0x70>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800283a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800283e:	d1ee      	bne.n	800281e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	58024800 	.word	0x58024800

08002850 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08c      	sub	sp, #48	; 0x30
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f000 bc1d 	b.w	800309e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8087 	beq.w	8002980 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002872:	4b99      	ldr	r3, [pc, #612]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800287c:	4b96      	ldr	r3, [pc, #600]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	2b10      	cmp	r3, #16
 8002886:	d007      	beq.n	8002898 <HAL_RCC_OscConfig+0x48>
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2b18      	cmp	r3, #24
 800288c:	d110      	bne.n	80028b0 <HAL_RCC_OscConfig+0x60>
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d10b      	bne.n	80028b0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	4b8f      	ldr	r3, [pc, #572]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d06c      	beq.n	800297e <HAL_RCC_OscConfig+0x12e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d168      	bne.n	800297e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e3f6      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x78>
 80028ba:	4b87      	ldr	r3, [pc, #540]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a86      	ldr	r2, [pc, #536]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c4:	6013      	str	r3, [r2, #0]
 80028c6:	e02e      	b.n	8002926 <HAL_RCC_OscConfig+0xd6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x9a>
 80028d0:	4b81      	ldr	r3, [pc, #516]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a80      	ldr	r2, [pc, #512]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a7d      	ldr	r2, [pc, #500]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e6:	6013      	str	r3, [r2, #0]
 80028e8:	e01d      	b.n	8002926 <HAL_RCC_OscConfig+0xd6>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0xbe>
 80028f4:	4b78      	ldr	r3, [pc, #480]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a77      	ldr	r2, [pc, #476]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80028fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]
 8002900:	4b75      	ldr	r3, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a74      	ldr	r2, [pc, #464]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e00b      	b.n	8002926 <HAL_RCC_OscConfig+0xd6>
 800290e:	4b72      	ldr	r3, [pc, #456]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a71      	ldr	r2, [pc, #452]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b6f      	ldr	r3, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a6e      	ldr	r2, [pc, #440]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d013      	beq.n	8002956 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7ff fc0b 	bl	8002148 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002936:	f7ff fc07 	bl	8002148 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e3aa      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002948:	4b63      	ldr	r3, [pc, #396]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0xe6>
 8002954:	e014      	b.n	8002980 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002956:	f7ff fbf7 	bl	8002148 <HAL_GetTick>
 800295a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295e:	f7ff fbf3 	bl	8002148 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	; 0x64
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e396      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d1f0      	bne.n	800295e <HAL_RCC_OscConfig+0x10e>
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800297e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80cb 	beq.w	8002b24 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800298e:	4b52      	ldr	r3, [pc, #328]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002996:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002998:	4b4f      	ldr	r3, [pc, #316]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_RCC_OscConfig+0x164>
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	2b18      	cmp	r3, #24
 80029a8:	d156      	bne.n	8002a58 <HAL_RCC_OscConfig+0x208>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d151      	bne.n	8002a58 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b4:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCC_OscConfig+0x17c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e368      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029cc:	4b42      	ldr	r3, [pc, #264]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f023 0219 	bic.w	r2, r3, #25
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	493f      	ldr	r1, [pc, #252]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029de:	f7ff fbb3 	bl	8002148 <HAL_GetTick>
 80029e2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e6:	f7ff fbaf 	bl	8002148 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e352      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029f8:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a04:	f7ff fbd0 	bl	80021a8 <HAL_GetREVID>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d817      	bhi.n	8002a42 <HAL_RCC_OscConfig+0x1f2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d108      	bne.n	8002a2c <HAL_RCC_OscConfig+0x1dc>
 8002a1a:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a22:	4a2d      	ldr	r2, [pc, #180]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a28:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a2a:	e07b      	b.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	031b      	lsls	r3, r3, #12
 8002a3a:	4927      	ldr	r1, [pc, #156]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a40:	e070      	b.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	061b      	lsls	r3, r3, #24
 8002a50:	4921      	ldr	r1, [pc, #132]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a56:	e065      	b.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d048      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002a60:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f023 0219 	bic.w	r2, r3, #25
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	491a      	ldr	r1, [pc, #104]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7ff fb69 	bl	8002148 <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7ff fb65 	bl	8002148 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e308      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a8c:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a98:	f7ff fb86 	bl	80021a8 <HAL_GetREVID>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d81a      	bhi.n	8002adc <HAL_RCC_OscConfig+0x28c>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b40      	cmp	r3, #64	; 0x40
 8002aac:	d108      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x270>
 8002aae:	4b0a      	ldr	r3, [pc, #40]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002ab6:	4a08      	ldr	r2, [pc, #32]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	6053      	str	r3, [r2, #4]
 8002abe:	e031      	b.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	031b      	lsls	r3, r3, #12
 8002ace:	4902      	ldr	r1, [pc, #8]	; (8002ad8 <HAL_RCC_OscConfig+0x288>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	604b      	str	r3, [r1, #4]
 8002ad4:	e026      	b.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
 8002ad6:	bf00      	nop
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	4b9a      	ldr	r3, [pc, #616]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	4997      	ldr	r1, [pc, #604]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
 8002af0:	e018      	b.n	8002b24 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af2:	4b95      	ldr	r3, [pc, #596]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a94      	ldr	r2, [pc, #592]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afe:	f7ff fb23 	bl	8002148 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b06:	f7ff fb1f 	bl	8002148 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e2c2      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b18:	4b8b      	ldr	r3, [pc, #556]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 80a9 	beq.w	8002c84 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b32:	4b85      	ldr	r3, [pc, #532]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b3a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b3c:	4b82      	ldr	r3, [pc, #520]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b40:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d007      	beq.n	8002b58 <HAL_RCC_OscConfig+0x308>
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b18      	cmp	r3, #24
 8002b4c:	d13a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x374>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d135      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b58:	4b7b      	ldr	r3, [pc, #492]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_OscConfig+0x320>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	2b80      	cmp	r3, #128	; 0x80
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e296      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b70:	f7ff fb1a 	bl	80021a8 <HAL_GetREVID>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d817      	bhi.n	8002bae <HAL_RCC_OscConfig+0x35e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d108      	bne.n	8002b98 <HAL_RCC_OscConfig+0x348>
 8002b86:	4b70      	ldr	r3, [pc, #448]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b8e:	4a6e      	ldr	r2, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b94:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b96:	e075      	b.n	8002c84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b98:	4b6b      	ldr	r3, [pc, #428]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	069b      	lsls	r3, r3, #26
 8002ba6:	4968      	ldr	r1, [pc, #416]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bac:	e06a      	b.n	8002c84 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bae:	4b66      	ldr	r3, [pc, #408]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	061b      	lsls	r3, r3, #24
 8002bbc:	4962      	ldr	r1, [pc, #392]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002bc2:	e05f      	b.n	8002c84 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d042      	beq.n	8002c52 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a5d      	ldr	r2, [pc, #372]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff fab6 	bl	8002148 <HAL_GetTick>
 8002bdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002be0:	f7ff fab2 	bl	8002148 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e255      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002bf2:	4b55      	ldr	r3, [pc, #340]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002bfe:	f7ff fad3 	bl	80021a8 <HAL_GetREVID>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d817      	bhi.n	8002c3c <HAL_RCC_OscConfig+0x3ec>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d108      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3d6>
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c22:	6053      	str	r3, [r2, #4]
 8002c24:	e02e      	b.n	8002c84 <HAL_RCC_OscConfig+0x434>
 8002c26:	4b48      	ldr	r3, [pc, #288]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	069b      	lsls	r3, r3, #26
 8002c34:	4944      	ldr	r1, [pc, #272]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	604b      	str	r3, [r1, #4]
 8002c3a:	e023      	b.n	8002c84 <HAL_RCC_OscConfig+0x434>
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	061b      	lsls	r3, r3, #24
 8002c4a:	493f      	ldr	r1, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
 8002c50:	e018      	b.n	8002c84 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002c52:	4b3d      	ldr	r3, [pc, #244]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a3c      	ldr	r2, [pc, #240]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fa73 	bl	8002148 <HAL_GetTick>
 8002c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c66:	f7ff fa6f 	bl	8002148 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e212      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002c78:	4b33      	ldr	r3, [pc, #204]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d036      	beq.n	8002cfe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d019      	beq.n	8002ccc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	4a2a      	ldr	r2, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002c9e:	f043 0301 	orr.w	r3, r3, #1
 8002ca2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca4:	f7ff fa50 	bl	8002148 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7ff fa4c 	bl	8002148 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1ef      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cbe:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x45c>
 8002cca:	e018      	b.n	8002cfe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cd0:	4a1d      	ldr	r2, [pc, #116]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002cd2:	f023 0301 	bic.w	r3, r3, #1
 8002cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7ff fa36 	bl	8002148 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce0:	f7ff fa32 	bl	8002148 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1d5      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d039      	beq.n	8002d7e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d12:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d1c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d1e:	f7ff fa13 	bl	8002148 <HAL_GetTick>
 8002d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d26:	f7ff fa0f 	bl	8002148 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1b2      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <HAL_RCC_OscConfig+0x4f8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4d6>
 8002d44:	e01b      	b.n	8002d7e <HAL_RCC_OscConfig+0x52e>
 8002d46:	bf00      	nop
 8002d48:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002d4c:	4b9b      	ldr	r3, [pc, #620]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a9a      	ldr	r2, [pc, #616]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002d52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002d58:	f7ff f9f6 	bl	8002148 <HAL_GetTick>
 8002d5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002d60:	f7ff f9f2 	bl	8002148 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e195      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d72:	4b92      	ldr	r3, [pc, #584]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8081 	beq.w	8002e8e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d8c:	4b8c      	ldr	r3, [pc, #560]	; (8002fc0 <HAL_RCC_OscConfig+0x770>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a8b      	ldr	r2, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x770>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d98:	f7ff f9d6 	bl	8002148 <HAL_GetTick>
 8002d9c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7ff f9d2 	bl	8002148 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b64      	cmp	r3, #100	; 0x64
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e175      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002db2:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <HAL_RCC_OscConfig+0x770>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x584>
 8002dc6:	4b7d      	ldr	r3, [pc, #500]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a7c      	ldr	r2, [pc, #496]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e02d      	b.n	8002e30 <HAL_RCC_OscConfig+0x5e0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x5a6>
 8002ddc:	4b77      	ldr	r3, [pc, #476]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a76      	ldr	r2, [pc, #472]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002de2:	f023 0301 	bic.w	r3, r3, #1
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b74      	ldr	r3, [pc, #464]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a73      	ldr	r2, [pc, #460]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002dee:	f023 0304 	bic.w	r3, r3, #4
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x5e0>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x5c8>
 8002dfe:	4b6f      	ldr	r3, [pc, #444]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e02:	4a6e      	ldr	r2, [pc, #440]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	4a6b      	ldr	r2, [pc, #428]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	; 0x70
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x5e0>
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1c:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	; 0x70
 8002e24:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e28:	4a64      	ldr	r2, [pc, #400]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e2a:	f023 0304 	bic.w	r3, r3, #4
 8002e2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7ff f986 	bl	8002148 <HAL_GetTick>
 8002e3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7ff f982 	bl	8002148 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e123      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e56:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RCC_OscConfig+0x5f0>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7ff f970 	bl	8002148 <HAL_GetTick>
 8002e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7ff f96c 	bl	8002148 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e10d      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e82:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8102 	beq.w	800309c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e98:	4b48      	ldr	r3, [pc, #288]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ea0:	2b18      	cmp	r3, #24
 8002ea2:	f000 80bd 	beq.w	8003020 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	f040 809e 	bne.w	8002fec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a41      	ldr	r2, [pc, #260]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7ff f944 	bl	8002148 <HAL_GetTick>
 8002ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec4:	f7ff f940 	bl	8002148 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0e3      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ed6:	4b39      	ldr	r3, [pc, #228]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_RCC_OscConfig+0x774>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	4931      	ldr	r1, [pc, #196]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	628b      	str	r3, [r1, #40]	; 0x28
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f00:	3b01      	subs	r3, #1
 8002f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	025b      	lsls	r3, r3, #9
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	3b01      	subs	r3, #1
 8002f18:	041b      	lsls	r3, r3, #16
 8002f1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f24:	3b01      	subs	r3, #1
 8002f26:	061b      	lsls	r3, r3, #24
 8002f28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002f2c:	4923      	ldr	r1, [pc, #140]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	4a21      	ldr	r2, [pc, #132]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f38:	f023 0301 	bic.w	r3, r3, #1
 8002f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f42:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <HAL_RCC_OscConfig+0x778>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f4a:	00d2      	lsls	r2, r2, #3
 8002f4c:	491b      	ldr	r1, [pc, #108]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f023 020c 	bic.w	r2, r3, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4917      	ldr	r1, [pc, #92]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f023 0202 	bic.w	r2, r3, #2
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	4912      	ldr	r1, [pc, #72]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f76:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	4a10      	ldr	r2, [pc, #64]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	4a0d      	ldr	r2, [pc, #52]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa6:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_RCC_OscConfig+0x76c>)
 8002fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb2:	f7ff f8c9 	bl	8002148 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fb8:	e011      	b.n	8002fde <HAL_RCC_OscConfig+0x78e>
 8002fba:	bf00      	nop
 8002fbc:	58024400 	.word	0x58024400
 8002fc0:	58024800 	.word	0x58024800
 8002fc4:	fffffc0c 	.word	0xfffffc0c
 8002fc8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7ff f8bc 	bl	8002148 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e05f      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fde:	4b32      	ldr	r3, [pc, #200]	; (80030a8 <HAL_RCC_OscConfig+0x858>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x77c>
 8002fea:	e057      	b.n	800309c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b2e      	ldr	r3, [pc, #184]	; (80030a8 <HAL_RCC_OscConfig+0x858>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	; (80030a8 <HAL_RCC_OscConfig+0x858>)
 8002ff2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff8:	f7ff f8a6 	bl	8002148 <HAL_GetTick>
 8002ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003000:	f7ff f8a2 	bl	8002148 <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e045      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_RCC_OscConfig+0x858>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0x7b0>
 800301e:	e03d      	b.n	800309c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003020:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <HAL_RCC_OscConfig+0x858>)
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <HAL_RCC_OscConfig+0x858>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b01      	cmp	r3, #1
 8003032:	d031      	beq.n	8003098 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 0203 	and.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d12a      	bne.n	8003098 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d122      	bne.n	8003098 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d11a      	bne.n	8003098 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	0a5b      	lsrs	r3, r3, #9
 8003066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003070:	429a      	cmp	r2, r3
 8003072:	d111      	bne.n	8003098 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	0e1b      	lsrs	r3, r3, #24
 800308a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3730      	adds	r7, #48	; 0x30
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400

080030ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e19c      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b8a      	ldr	r3, [pc, #552]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b87      	ldr	r3, [pc, #540]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 020f 	bic.w	r2, r3, #15
 80030d6:	4985      	ldr	r1, [pc, #532]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b83      	ldr	r3, [pc, #524]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e184      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003108:	429a      	cmp	r2, r3
 800310a:	d908      	bls.n	800311e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800310c:	4b78      	ldr	r3, [pc, #480]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	4975      	ldr	r1, [pc, #468]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800311a:	4313      	orrs	r3, r2
 800311c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b00      	cmp	r3, #0
 8003128:	d010      	beq.n	800314c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695a      	ldr	r2, [r3, #20]
 800312e:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003136:	429a      	cmp	r2, r3
 8003138:	d908      	bls.n	800314c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	496a      	ldr	r1, [pc, #424]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 8003148:	4313      	orrs	r3, r2
 800314a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0310 	and.w	r3, r3, #16
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699a      	ldr	r2, [r3, #24]
 800315c:	4b64      	ldr	r3, [pc, #400]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003164:	429a      	cmp	r2, r3
 8003166:	d908      	bls.n	800317a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003168:	4b61      	ldr	r3, [pc, #388]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	495e      	ldr	r1, [pc, #376]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 8003176:	4313      	orrs	r3, r2
 8003178:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d010      	beq.n	80031a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	4b59      	ldr	r3, [pc, #356]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003192:	429a      	cmp	r2, r3
 8003194:	d908      	bls.n	80031a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003196:	4b56      	ldr	r3, [pc, #344]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4953      	ldr	r1, [pc, #332]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d010      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	4b4d      	ldr	r3, [pc, #308]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d908      	bls.n	80031d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f023 020f 	bic.w	r2, r3, #15
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4947      	ldr	r1, [pc, #284]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d055      	beq.n	800328e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80031e2:	4b43      	ldr	r3, [pc, #268]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	4940      	ldr	r1, [pc, #256]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d107      	bne.n	800320c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80031fc:	4b3c      	ldr	r3, [pc, #240]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d121      	bne.n	800324c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0f6      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b03      	cmp	r3, #3
 8003212:	d107      	bne.n	8003224 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d115      	bne.n	800324c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e0ea      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d107      	bne.n	800323c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0de      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0d6      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	f023 0207 	bic.w	r2, r3, #7
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4925      	ldr	r1, [pc, #148]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800325a:	4313      	orrs	r3, r2
 800325c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fe ff73 	bl	8002148 <HAL_GetTick>
 8003262:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003264:	e00a      	b.n	800327c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003266:	f7fe ff6f 	bl	8002148 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e0be      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	429a      	cmp	r2, r3
 800328c:	d1eb      	bne.n	8003266 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d010      	beq.n	80032bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d208      	bcs.n	80032bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032aa:	4b11      	ldr	r3, [pc, #68]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	f023 020f 	bic.w	r2, r3, #15
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	490e      	ldr	r1, [pc, #56]	; (80032f0 <HAL_RCC_ClockConfig+0x244>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d214      	bcs.n	80032f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 020f 	bic.w	r2, r3, #15
 80032d2:	4906      	ldr	r1, [pc, #24]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032da:	4b04      	ldr	r3, [pc, #16]	; (80032ec <HAL_RCC_ClockConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	683a      	ldr	r2, [r7, #0]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e086      	b.n	80033fa <HAL_RCC_ClockConfig+0x34e>
 80032ec:	52002000 	.word	0x52002000
 80032f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d010      	beq.n	8003322 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800330c:	429a      	cmp	r2, r3
 800330e:	d208      	bcs.n	8003322 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003310:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	4939      	ldr	r1, [pc, #228]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 800331e:	4313      	orrs	r3, r2
 8003320:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d010      	beq.n	8003350 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800333a:	429a      	cmp	r2, r3
 800333c:	d208      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800333e:	4b31      	ldr	r3, [pc, #196]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	492e      	ldr	r1, [pc, #184]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 800334c:	4313      	orrs	r3, r2
 800334e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003368:	429a      	cmp	r2, r3
 800336a:	d208      	bcs.n	800337e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	4922      	ldr	r1, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 800337a:	4313      	orrs	r3, r2
 800337c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d010      	beq.n	80033ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003396:	429a      	cmp	r2, r3
 8003398:	d208      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	4917      	ldr	r1, [pc, #92]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033ac:	f000 f834 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	4912      	ldr	r1, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x35c>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
 80033c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCC_ClockConfig+0x358>)
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <HAL_RCC_ClockConfig+0x35c>)
 80033d4:	5cd3      	ldrb	r3, [r2, r3]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	fa22 f303 	lsr.w	r3, r2, r3
 80033e0:	4a0a      	ldr	r2, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x360>)
 80033e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x364>)
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x368>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fe fe60 	bl	80020b4 <HAL_InitTick>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	58024400 	.word	0x58024400
 8003408:	080108d8 	.word	0x080108d8
 800340c:	24000004 	.word	0x24000004
 8003410:	24000000 	.word	0x24000000
 8003414:	24000008 	.word	0x24000008

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b480      	push	{r7}
 800341a:	b089      	sub	sp, #36	; 0x24
 800341c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800341e:	4bb3      	ldr	r3, [pc, #716]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003426:	2b18      	cmp	r3, #24
 8003428:	f200 8155 	bhi.w	80036d6 <HAL_RCC_GetSysClockFreq+0x2be>
 800342c:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <HAL_RCC_GetSysClockFreq+0x1c>)
 800342e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003432:	bf00      	nop
 8003434:	08003499 	.word	0x08003499
 8003438:	080036d7 	.word	0x080036d7
 800343c:	080036d7 	.word	0x080036d7
 8003440:	080036d7 	.word	0x080036d7
 8003444:	080036d7 	.word	0x080036d7
 8003448:	080036d7 	.word	0x080036d7
 800344c:	080036d7 	.word	0x080036d7
 8003450:	080036d7 	.word	0x080036d7
 8003454:	080034bf 	.word	0x080034bf
 8003458:	080036d7 	.word	0x080036d7
 800345c:	080036d7 	.word	0x080036d7
 8003460:	080036d7 	.word	0x080036d7
 8003464:	080036d7 	.word	0x080036d7
 8003468:	080036d7 	.word	0x080036d7
 800346c:	080036d7 	.word	0x080036d7
 8003470:	080036d7 	.word	0x080036d7
 8003474:	080034c5 	.word	0x080034c5
 8003478:	080036d7 	.word	0x080036d7
 800347c:	080036d7 	.word	0x080036d7
 8003480:	080036d7 	.word	0x080036d7
 8003484:	080036d7 	.word	0x080036d7
 8003488:	080036d7 	.word	0x080036d7
 800348c:	080036d7 	.word	0x080036d7
 8003490:	080036d7 	.word	0x080036d7
 8003494:	080034cb 	.word	0x080034cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003498:	4b94      	ldr	r3, [pc, #592]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034a4:	4b91      	ldr	r3, [pc, #580]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	08db      	lsrs	r3, r3, #3
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	4a90      	ldr	r2, [pc, #576]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80034b6:	e111      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80034b8:	4b8d      	ldr	r3, [pc, #564]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034ba:	61bb      	str	r3, [r7, #24]
    break;
 80034bc:	e10e      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80034be:	4b8d      	ldr	r3, [pc, #564]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034c0:	61bb      	str	r3, [r7, #24]
    break;
 80034c2:	e10b      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80034c4:	4b8c      	ldr	r3, [pc, #560]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80034c6:	61bb      	str	r3, [r7, #24]
    break;
 80034c8:	e108      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034ca:	4b88      	ldr	r3, [pc, #544]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80034d4:	4b85      	ldr	r3, [pc, #532]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80034e0:	4b82      	ldr	r3, [pc, #520]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80034ea:	4b80      	ldr	r3, [pc, #512]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	08db      	lsrs	r3, r3, #3
 80034f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	ee07 3a90 	vmov	s15, r3
 80034fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003502:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80e1 	beq.w	80036d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b02      	cmp	r3, #2
 8003512:	f000 8083 	beq.w	800361c <HAL_RCC_GetSysClockFreq+0x204>
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b02      	cmp	r3, #2
 800351a:	f200 80a1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x248>
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x114>
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d056      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800352a:	e099      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d02d      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003538:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	08db      	lsrs	r3, r3, #3
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	4a6b      	ldr	r2, [pc, #428]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	ee07 3a90 	vmov	s15, r3
 8003550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	ee07 3a90 	vmov	s15, r3
 800355a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800355e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003562:	4b62      	ldr	r3, [pc, #392]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800356a:	ee07 3a90 	vmov	s15, r3
 800356e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003572:	ed97 6a02 	vldr	s12, [r7, #8]
 8003576:	eddf 5a61 	vldr	s11, [pc, #388]	; 80036fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800357a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800357e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800358a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800358e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003592:	e087      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003700 <HAL_RCC_GetSysClockFreq+0x2e8>
 80035a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a6:	4b51      	ldr	r3, [pc, #324]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ae:	ee07 3a90 	vmov	s15, r3
 80035b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80035ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80036fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80035be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d6:	e065      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035ea:	4b40      	ldr	r3, [pc, #256]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035f2:	ee07 3a90 	vmov	s15, r3
 80035f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80035fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80036fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800360a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800360e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800361a:	e043      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003626:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003708 <HAL_RCC_GetSysClockFreq+0x2f0>
 800362a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800362e:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800363e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003642:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80036fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800364a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800364e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800365a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800365e:	e021      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800366a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003704 <HAL_RCC_GetSysClockFreq+0x2ec>
 800366e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800367a:	ee07 3a90 	vmov	s15, r3
 800367e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003682:	ed97 6a02 	vldr	s12, [r7, #8]
 8003686:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80036fc <HAL_RCC_GetSysClockFreq+0x2e4>
 800368a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800368e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800369a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036a2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a8:	0a5b      	lsrs	r3, r3, #9
 80036aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ae:	3301      	adds	r3, #1
 80036b0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80036c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c8:	ee17 3a90 	vmov	r3, s15
 80036cc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80036ce:	e005      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61bb      	str	r3, [r7, #24]
    break;
 80036d4:	e002      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80036d6:	4b07      	ldr	r3, [pc, #28]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80036d8:	61bb      	str	r3, [r7, #24]
    break;
 80036da:	bf00      	nop
  }

  return sysclockfreq;
 80036dc:	69bb      	ldr	r3, [r7, #24]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400
 80036f0:	03d09000 	.word	0x03d09000
 80036f4:	003d0900 	.word	0x003d0900
 80036f8:	017d7840 	.word	0x017d7840
 80036fc:	46000000 	.word	0x46000000
 8003700:	4c742400 	.word	0x4c742400
 8003704:	4a742400 	.word	0x4a742400
 8003708:	4bbebc20 	.word	0x4bbebc20

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003712:	f7ff fe81 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b10      	ldr	r3, [pc, #64]	; (800375c <HAL_RCC_GetHCLKFreq+0x50>)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490f      	ldr	r1, [pc, #60]	; (8003760 <HAL_RCC_GetHCLKFreq+0x54>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003730:	4b0a      	ldr	r3, [pc, #40]	; (800375c <HAL_RCC_GetHCLKFreq+0x50>)
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 030f 	and.w	r3, r3, #15
 8003738:	4a09      	ldr	r2, [pc, #36]	; (8003760 <HAL_RCC_GetHCLKFreq+0x54>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a07      	ldr	r2, [pc, #28]	; (8003764 <HAL_RCC_GetHCLKFreq+0x58>)
 8003748:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_GetHCLKFreq+0x5c>)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCC_GetHCLKFreq+0x58>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	58024400 	.word	0x58024400
 8003760:	080108d8 	.word	0x080108d8
 8003764:	24000004 	.word	0x24000004
 8003768:	24000000 	.word	0x24000000

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003770:	f7ff ffcc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003774:	4602      	mov	r2, r0
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	f003 0307 	and.w	r3, r3, #7
 8003780:	4904      	ldr	r1, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003782:	5ccb      	ldrb	r3, [r1, r3]
 8003784:	f003 031f 	and.w	r3, r3, #31
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	58024400 	.word	0x58024400
 8003794:	080108d8 	.word	0x080108d8

08003798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800379c:	f7ff ffb6 	bl	800370c <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4904      	ldr	r1, [pc, #16]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	58024400 	.word	0x58024400
 80037c0:	080108d8 	.word	0x080108d8

080037c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037cc:	2300      	movs	r3, #0
 80037ce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037d0:	2300      	movs	r3, #0
 80037d2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03f      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037e8:	d02a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037ea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037ee:	d824      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037f4:	d018      	beq.n	8003828 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80037fa:	d81e      	bhi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003804:	d007      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003806:	e018      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003808:	4ba3      	ldr	r3, [pc, #652]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	4aa2      	ldr	r2, [pc, #648]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800380e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003812:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003814:	e015      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3304      	adds	r3, #4
 800381a:	2102      	movs	r1, #2
 800381c:	4618      	mov	r0, r3
 800381e:	f001 fff9 	bl	8005814 <RCCEx_PLL2_Config>
 8003822:	4603      	mov	r3, r0
 8003824:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003826:	e00c      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3324      	adds	r3, #36	; 0x24
 800382c:	2102      	movs	r1, #2
 800382e:	4618      	mov	r0, r3
 8003830:	f002 f8a2 	bl	8005978 <RCCEx_PLL3_Config>
 8003834:	4603      	mov	r3, r0
 8003836:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003838:	e003      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	75fb      	strb	r3, [r7, #23]
      break;
 800383e:	e000      	b.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003840:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003848:	4b93      	ldr	r3, [pc, #588]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800384a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800384c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003854:	4990      	ldr	r1, [pc, #576]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003856:	4313      	orrs	r3, r2
 8003858:	650b      	str	r3, [r1, #80]	; 0x50
 800385a:	e001      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d03d      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	2b04      	cmp	r3, #4
 8003872:	d826      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003874:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387a:	bf00      	nop
 800387c:	08003891 	.word	0x08003891
 8003880:	0800389f 	.word	0x0800389f
 8003884:	080038b1 	.word	0x080038b1
 8003888:	080038c9 	.word	0x080038c9
 800388c:	080038c9 	.word	0x080038c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003890:	4b81      	ldr	r3, [pc, #516]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	4a80      	ldr	r2, [pc, #512]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800389c:	e015      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f001 ffb5 	bl	8005814 <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038ae:	e00c      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3324      	adds	r3, #36	; 0x24
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f002 f85e 	bl	8005978 <RCCEx_PLL3_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80038c0:	e003      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
      break;
 80038c6:	e000      	b.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80038c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d109      	bne.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038d0:	4b71      	ldr	r3, [pc, #452]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	f023 0207 	bic.w	r2, r3, #7
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	496e      	ldr	r1, [pc, #440]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	650b      	str	r3, [r1, #80]	; 0x50
 80038e2:	e001      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d042      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038fc:	d02b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80038fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003902:	d825      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003904:	2bc0      	cmp	r3, #192	; 0xc0
 8003906:	d028      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003908:	2bc0      	cmp	r3, #192	; 0xc0
 800390a:	d821      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800390c:	2b80      	cmp	r3, #128	; 0x80
 800390e:	d016      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003910:	2b80      	cmp	r3, #128	; 0x80
 8003912:	d81d      	bhi.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d007      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800391c:	e018      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800391e:	4b5e      	ldr	r3, [pc, #376]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003922:	4a5d      	ldr	r2, [pc, #372]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800392a:	e017      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 ff6e 	bl	8005814 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800393c:	e00e      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3324      	adds	r3, #36	; 0x24
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f002 f817 	bl	8005978 <RCCEx_PLL3_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800394e:	e005      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
      break;
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800395a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003962:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003966:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	494a      	ldr	r1, [pc, #296]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003970:	4313      	orrs	r3, r2
 8003972:	650b      	str	r3, [r1, #80]	; 0x50
 8003974:	e001      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003982:	2b00      	cmp	r3, #0
 8003984:	d049      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800398c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003990:	d030      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003992:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003996:	d82a      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003998:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800399c:	d02c      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800399e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80039a2:	d824      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a8:	d018      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80039aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ae:	d81e      	bhi.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80039b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039b8:	d007      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x206>
 80039ba:	e018      	b.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	4a35      	ldr	r2, [pc, #212]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039c8:	e017      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2100      	movs	r1, #0
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 ff1f 	bl	8005814 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039da:	e00e      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3324      	adds	r3, #36	; 0x24
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f001 ffc8 	bl	8005978 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039ec:	e005      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	75fb      	strb	r3, [r7, #23]
      break;
 80039f2:	e002      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039f4:	bf00      	nop
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80039f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fa:	7dfb      	ldrb	r3, [r7, #23]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a00:	4b25      	ldr	r3, [pc, #148]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a0e:	4922      	ldr	r1, [pc, #136]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	658b      	str	r3, [r1, #88]	; 0x58
 8003a14:	e001      	b.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a16:	7dfb      	ldrb	r3, [r7, #23]
 8003a18:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d04b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a30:	d030      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a36:	d82a      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a3c:	d02e      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003a42:	d824      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a48:	d018      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a4e:	d81e      	bhi.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a58:	d007      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003a5a:	e018      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a68:	e019      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fecf 	bl	8005814 <RCCEx_PLL2_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a7a:	e010      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3324      	adds	r3, #36	; 0x24
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f001 ff78 	bl	8005978 <RCCEx_PLL3_Config>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a8c:	e007      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
      break;
 8003a92:	e004      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003a94:	bf00      	nop
 8003a96:	e002      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a98:	58024400 	.word	0x58024400
      break;
 8003a9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a9e:	7dfb      	ldrb	r3, [r7, #23]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003aa4:	4b99      	ldr	r3, [pc, #612]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ab2:	4996      	ldr	r1, [pc, #600]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	658b      	str	r3, [r1, #88]	; 0x58
 8003ab8:	e001      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aba:	7dfb      	ldrb	r3, [r7, #23]
 8003abc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d032      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ace:	2b30      	cmp	r3, #48	; 0x30
 8003ad0:	d01c      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d817      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d813      	bhi.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d10f      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ae6:	4b89      	ldr	r3, [pc, #548]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	4a88      	ldr	r2, [pc, #544]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003af2:	e00e      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3304      	adds	r3, #4
 8003af8:	2102      	movs	r1, #2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f001 fe8a 	bl	8005814 <RCCEx_PLL2_Config>
 8003b00:	4603      	mov	r3, r0
 8003b02:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b04:	e005      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0a:	e002      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b0c:	bf00      	nop
 8003b0e:	e000      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003b10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b12:	7dfb      	ldrb	r3, [r7, #23]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d109      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b18:	4b7c      	ldr	r3, [pc, #496]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b24:	4979      	ldr	r1, [pc, #484]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b2a:	e001      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b2c:	7dfb      	ldrb	r3, [r7, #23]
 8003b2e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d047      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b44:	d030      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b4a:	d82a      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b50:	d02c      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b56:	d824      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5c:	d018      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b62:	d81e      	bhi.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d007      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003b6e:	e018      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b70:	4b66      	ldr	r3, [pc, #408]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a65      	ldr	r2, [pc, #404]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b7c:	e017      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fe45 	bl	8005814 <RCCEx_PLL2_Config>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b8e:	e00e      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	3324      	adds	r3, #36	; 0x24
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 feee 	bl	8005978 <RCCEx_PLL3_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003ba0:	e005      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ba6:	e002      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003ba8:	bf00      	nop
 8003baa:	e000      	b.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d109      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bb4:	4b55      	ldr	r3, [pc, #340]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bb8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	4952      	ldr	r1, [pc, #328]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	650b      	str	r3, [r1, #80]	; 0x50
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d049      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be0:	d02e      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003be2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be6:	d828      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003be8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bec:	d02a      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003bee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf2:	d822      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003bf4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bf8:	d026      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003bfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bfe:	d81c      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c04:	d010      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003c06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c0a:	d816      	bhi.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d01d      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c14:	d111      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 fdf9 	bl	8005814 <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c26:	e012      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3324      	adds	r3, #36	; 0x24
 8003c2c:	2101      	movs	r1, #1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f001 fea2 	bl	8005978 <RCCEx_PLL3_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c38:	e009      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3e:	e006      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c40:	bf00      	nop
 8003c42:	e004      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c44:	bf00      	nop
 8003c46:	e002      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c48:	bf00      	nop
 8003c4a:	e000      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003c4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c4e:	7dfb      	ldrb	r3, [r7, #23]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d109      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c54:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c58:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c60:	492a      	ldr	r1, [pc, #168]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	650b      	str	r3, [r1, #80]	; 0x50
 8003c66:	e001      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
 8003c6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d04d      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c82:	d02e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003c84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c88:	d828      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8e:	d02a      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c94:	d822      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c9a:	d026      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003c9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ca0:	d81c      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ca6:	d010      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cac:	d816      	bhi.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d01d      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003cb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cb6:	d111      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f001 fda8 	bl	8005814 <RCCEx_PLL2_Config>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cc8:	e012      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	2101      	movs	r1, #1
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 fe51 	bl	8005978 <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ce2:	bf00      	nop
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ce6:	bf00      	nop
 8003ce8:	e002      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cea:	bf00      	nop
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003cee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d04:	4901      	ldr	r1, [pc, #4]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	658b      	str	r3, [r1, #88]	; 0x58
 8003d0a:	e003      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	7dfb      	ldrb	r3, [r7, #23]
 8003d12:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d02f      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d28:	d00e      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d2e:	d814      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d015      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003d34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d38:	d10f      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d3a:	4baf      	ldr	r3, [pc, #700]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	4aae      	ldr	r2, [pc, #696]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d46:	e00c      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 fd60 	bl	8005814 <RCCEx_PLL2_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d58:	e003      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5e:	e000      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d68:	4ba3      	ldr	r3, [pc, #652]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d74:	49a0      	ldr	r1, [pc, #640]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	650b      	str	r3, [r1, #80]	; 0x50
 8003d7a:	e001      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d032      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d81b      	bhi.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dd3 	.word	0x08003dd3
 8003da0:	08003dad 	.word	0x08003dad
 8003da4:	08003dbb 	.word	0x08003dbb
 8003da8:	08003dd3 	.word	0x08003dd3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dac:	4b92      	ldr	r3, [pc, #584]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	4a91      	ldr	r2, [pc, #580]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003db2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003db8:	e00c      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3304      	adds	r3, #4
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fd27 	bl	8005814 <RCCEx_PLL2_Config>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dca:	e003      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003dd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d109      	bne.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dda:	4b87      	ldr	r3, [pc, #540]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	4984      	ldr	r1, [pc, #528]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003dec:	e001      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
 8003df0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	f000 8086 	beq.w	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e00:	4b7e      	ldr	r3, [pc, #504]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7d      	ldr	r2, [pc, #500]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e0c:	f7fe f99c 	bl	8002148 <HAL_GetTick>
 8003e10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e12:	e009      	b.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e14:	f7fe f998 	bl	8002148 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	; 0x64
 8003e20:	d902      	bls.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	75fb      	strb	r3, [r7, #23]
        break;
 8003e26:	e005      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e28:	4b74      	ldr	r3, [pc, #464]	; (8003ffc <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d166      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e3a:	4b6f      	ldr	r3, [pc, #444]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e44:	4053      	eors	r3, r2
 8003e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d013      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e58:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5c:	4a66      	ldr	r2, [pc, #408]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e64:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e68:	4a63      	ldr	r2, [pc, #396]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e70:	4a61      	ldr	r2, [pc, #388]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e80:	d115      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e82:	f7fe f961 	bl	8002148 <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e88:	e00b      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe f95d 	bl	8002148 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d902      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	75fb      	strb	r3, [r7, #23]
            break;
 8003ea0:	e005      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea2:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ed      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d126      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec2:	d10d      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ed2:	0919      	lsrs	r1, r3, #4
 8003ed4:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	4947      	ldr	r1, [pc, #284]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	610b      	str	r3, [r1, #16]
 8003ede:	e005      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	4a44      	ldr	r2, [pc, #272]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ee6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003eea:	6113      	str	r3, [r2, #16]
 8003eec:	4b42      	ldr	r3, [pc, #264]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ef6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003efa:	493f      	ldr	r1, [pc, #252]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	670b      	str	r3, [r1, #112]	; 0x70
 8003f00:	e004      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f02:	7dfb      	ldrb	r3, [r7, #23]
 8003f04:	75bb      	strb	r3, [r7, #22]
 8003f06:	e001      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8085 	beq.w	8004024 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f1e:	2b28      	cmp	r3, #40	; 0x28
 8003f20:	d866      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003f22:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08004005 	.word	0x08004005
 8003f2c:	08003ff1 	.word	0x08003ff1
 8003f30:	08003ff1 	.word	0x08003ff1
 8003f34:	08003ff1 	.word	0x08003ff1
 8003f38:	08003ff1 	.word	0x08003ff1
 8003f3c:	08003ff1 	.word	0x08003ff1
 8003f40:	08003ff1 	.word	0x08003ff1
 8003f44:	08003ff1 	.word	0x08003ff1
 8003f48:	08003fcd 	.word	0x08003fcd
 8003f4c:	08003ff1 	.word	0x08003ff1
 8003f50:	08003ff1 	.word	0x08003ff1
 8003f54:	08003ff1 	.word	0x08003ff1
 8003f58:	08003ff1 	.word	0x08003ff1
 8003f5c:	08003ff1 	.word	0x08003ff1
 8003f60:	08003ff1 	.word	0x08003ff1
 8003f64:	08003ff1 	.word	0x08003ff1
 8003f68:	08003fdf 	.word	0x08003fdf
 8003f6c:	08003ff1 	.word	0x08003ff1
 8003f70:	08003ff1 	.word	0x08003ff1
 8003f74:	08003ff1 	.word	0x08003ff1
 8003f78:	08003ff1 	.word	0x08003ff1
 8003f7c:	08003ff1 	.word	0x08003ff1
 8003f80:	08003ff1 	.word	0x08003ff1
 8003f84:	08003ff1 	.word	0x08003ff1
 8003f88:	08004005 	.word	0x08004005
 8003f8c:	08003ff1 	.word	0x08003ff1
 8003f90:	08003ff1 	.word	0x08003ff1
 8003f94:	08003ff1 	.word	0x08003ff1
 8003f98:	08003ff1 	.word	0x08003ff1
 8003f9c:	08003ff1 	.word	0x08003ff1
 8003fa0:	08003ff1 	.word	0x08003ff1
 8003fa4:	08003ff1 	.word	0x08003ff1
 8003fa8:	08004005 	.word	0x08004005
 8003fac:	08003ff1 	.word	0x08003ff1
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003ff1 	.word	0x08003ff1
 8003fb8:	08003ff1 	.word	0x08003ff1
 8003fbc:	08003ff1 	.word	0x08003ff1
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	08003ff1 	.word	0x08003ff1
 8003fc8:	08004005 	.word	0x08004005
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f001 fc1e 	bl	8005814 <RCCEx_PLL2_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fdc:	e013      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	3324      	adds	r3, #36	; 0x24
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f001 fcc7 	bl	8005978 <RCCEx_PLL3_Config>
 8003fea:	4603      	mov	r3, r0
 8003fec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003fee:	e00a      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff4:	e007      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003ff6:	bf00      	nop
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	58024800 	.word	0x58024800
 8004000:	00ffffcf 	.word	0x00ffffcf
      break;
 8004004:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d109      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800400c:	4b96      	ldr	r3, [pc, #600]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800400e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004010:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004018:	4993      	ldr	r1, [pc, #588]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	654b      	str	r3, [r1, #84]	; 0x54
 800401e:	e001      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d038      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004034:	2b05      	cmp	r3, #5
 8004036:	d821      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8004038:	a201      	add	r2, pc, #4	; (adr r2, 8004040 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800403a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800403e:	bf00      	nop
 8004040:	08004083 	.word	0x08004083
 8004044:	08004059 	.word	0x08004059
 8004048:	0800406b 	.word	0x0800406b
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	2101      	movs	r1, #1
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fbd8 	bl	8005814 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004068:	e00c      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	3324      	adds	r3, #36	; 0x24
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f001 fc81 	bl	8005978 <RCCEx_PLL3_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800407a:	e003      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
      break;
 8004080:	e000      	b.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800408a:	4b77      	ldr	r3, [pc, #476]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f023 0207 	bic.w	r2, r3, #7
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004096:	4974      	ldr	r1, [pc, #464]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004098:	4313      	orrs	r3, r2
 800409a:	654b      	str	r3, [r1, #84]	; 0x54
 800409c:	e001      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d03a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	2b05      	cmp	r3, #5
 80040b6:	d821      	bhi.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x938>
 80040b8:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80040ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040be:	bf00      	nop
 80040c0:	08004103 	.word	0x08004103
 80040c4:	080040d9 	.word	0x080040d9
 80040c8:	080040eb 	.word	0x080040eb
 80040cc:	08004103 	.word	0x08004103
 80040d0:	08004103 	.word	0x08004103
 80040d4:	08004103 	.word	0x08004103
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	3304      	adds	r3, #4
 80040dc:	2101      	movs	r1, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	f001 fb98 	bl	8005814 <RCCEx_PLL2_Config>
 80040e4:	4603      	mov	r3, r0
 80040e6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040e8:	e00c      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	3324      	adds	r3, #36	; 0x24
 80040ee:	2101      	movs	r1, #1
 80040f0:	4618      	mov	r0, r3
 80040f2:	f001 fc41 	bl	8005978 <RCCEx_PLL3_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80040fa:	e003      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	75fb      	strb	r3, [r7, #23]
      break;
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800410a:	4b57      	ldr	r3, [pc, #348]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	4953      	ldr	r1, [pc, #332]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	658b      	str	r3, [r1, #88]	; 0x58
 800411e:	e001      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0320 	and.w	r3, r3, #32
 800412c:	2b00      	cmp	r3, #0
 800412e:	d04b      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800413a:	d02e      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800413c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004140:	d828      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004146:	d02a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d822      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800414e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004152:	d026      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8004154:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004158:	d81c      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800415a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415e:	d010      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8004160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004164:	d816      	bhi.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01d      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416e:	d111      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	3304      	adds	r3, #4
 8004174:	2100      	movs	r1, #0
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fb4c 	bl	8005814 <RCCEx_PLL2_Config>
 800417c:	4603      	mov	r3, r0
 800417e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004180:	e012      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	3324      	adds	r3, #36	; 0x24
 8004186:	2102      	movs	r1, #2
 8004188:	4618      	mov	r0, r3
 800418a:	f001 fbf5 	bl	8005978 <RCCEx_PLL3_Config>
 800418e:	4603      	mov	r3, r0
 8004190:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004192:	e009      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	75fb      	strb	r3, [r7, #23]
      break;
 8004198:	e006      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800419a:	bf00      	nop
 800419c:	e004      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800419e:	bf00      	nop
 80041a0:	e002      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80041a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10a      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ae:	4b2e      	ldr	r3, [pc, #184]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041bc:	492a      	ldr	r1, [pc, #168]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	654b      	str	r3, [r1, #84]	; 0x54
 80041c2:	e001      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d04d      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041da:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041de:	d02e      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80041e0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80041e4:	d828      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ea:	d02a      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80041ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f0:	d822      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041f6:	d026      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80041f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041fc:	d81c      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80041fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004202:	d010      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004208:	d816      	bhi.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01d      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800420e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004212:	d111      	bne.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	3304      	adds	r3, #4
 8004218:	2100      	movs	r1, #0
 800421a:	4618      	mov	r0, r3
 800421c:	f001 fafa 	bl	8005814 <RCCEx_PLL2_Config>
 8004220:	4603      	mov	r3, r0
 8004222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004224:	e012      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3324      	adds	r3, #36	; 0x24
 800422a:	2102      	movs	r1, #2
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fba3 	bl	8005978 <RCCEx_PLL3_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004236:	e009      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	75fb      	strb	r3, [r7, #23]
      break;
 800423c:	e006      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800423e:	bf00      	nop
 8004240:	e004      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004242:	bf00      	nop
 8004244:	e002      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004246:	bf00      	nop
 8004248:	e000      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800424a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800424c:	7dfb      	ldrb	r3, [r7, #23]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10c      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004252:	4b05      	ldr	r3, [pc, #20]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004256:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004260:	4901      	ldr	r1, [pc, #4]	; (8004268 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	658b      	str	r3, [r1, #88]	; 0x58
 8004266:	e003      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
 800426e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	2b00      	cmp	r3, #0
 800427a:	d04b      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004282:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004286:	d02e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004288:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800428c:	d828      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800428e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004292:	d02a      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004298:	d822      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800429a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800429e:	d026      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80042a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042a4:	d81c      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042aa:	d010      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80042ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b0:	d816      	bhi.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d01d      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042ba:	d111      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 faa6 	bl	8005814 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042cc:	e012      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3324      	adds	r3, #36	; 0x24
 80042d2:	2102      	movs	r1, #2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fb4f 	bl	8005978 <RCCEx_PLL3_Config>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042de:	e009      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
      break;
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042e6:	bf00      	nop
 80042e8:	e004      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042ea:	bf00      	nop
 80042ec:	e002      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042ee:	bf00      	nop
 80042f0:	e000      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80042f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042fa:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004308:	4999      	ldr	r1, [pc, #612]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800430a:	4313      	orrs	r3, r2
 800430c:	658b      	str	r3, [r1, #88]	; 0x58
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01a      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d10a      	bne.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	2102      	movs	r1, #2
 8004332:	4618      	mov	r0, r3
 8004334:	f001 fb20 	bl	8005978 <RCCEx_PLL3_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004342:	4b8b      	ldr	r3, [pc, #556]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004350:	4987      	ldr	r1, [pc, #540]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004352:	4313      	orrs	r3, r2
 8004354:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	2b00      	cmp	r3, #0
 8004360:	d01a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800436c:	d10a      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	3324      	adds	r3, #36	; 0x24
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f001 faff 	bl	8005978 <RCCEx_PLL3_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004384:	4b7a      	ldr	r3, [pc, #488]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004388:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	4977      	ldr	r1, [pc, #476]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004394:	4313      	orrs	r3, r2
 8004396:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d034      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ae:	d01d      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80043b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043b4:	d817      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80043ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80043c0:	e011      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f001 fa23 	bl	8005814 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043d2:	e00c      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 facc 	bl	8005978 <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043e4:	e003      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e000      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80043ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043ee:	7dfb      	ldrb	r3, [r7, #23]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043f4:	4b5e      	ldr	r3, [pc, #376]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004402:	495b      	ldr	r1, [pc, #364]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004404:	4313      	orrs	r3, r2
 8004406:	658b      	str	r3, [r1, #88]	; 0x58
 8004408:	e001      	b.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800440a:	7dfb      	ldrb	r3, [r7, #23]
 800440c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d033      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004420:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004424:	d01c      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004426:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800442a:	d816      	bhi.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800442c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004430:	d003      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004432:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004436:	d007      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004438:	e00f      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800443a:	4b4d      	ldr	r3, [pc, #308]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	4a4c      	ldr	r2, [pc, #304]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004444:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004446:	e00c      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	3324      	adds	r3, #36	; 0x24
 800444c:	2101      	movs	r1, #1
 800444e:	4618      	mov	r0, r3
 8004450:	f001 fa92 	bl	8005978 <RCCEx_PLL3_Config>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004458:	e003      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	75fb      	strb	r3, [r7, #23]
      break;
 800445e:	e000      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004468:	4b41      	ldr	r3, [pc, #260]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004476:	493e      	ldr	r1, [pc, #248]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004478:	4313      	orrs	r3, r2
 800447a:	654b      	str	r3, [r1, #84]	; 0x54
 800447c:	e001      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	7dfb      	ldrb	r3, [r7, #23]
 8004480:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d029      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8004496:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800449a:	d007      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800449c:	e00f      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449e:	4b34      	ldr	r3, [pc, #208]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4a33      	ldr	r2, [pc, #204]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044aa:	e00b      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3304      	adds	r3, #4
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f001 f9ae 	bl	8005814 <RCCEx_PLL2_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044bc:	e002      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
      break;
 80044c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044c4:	7dfb      	ldrb	r3, [r7, #23]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044ca:	4b29      	ldr	r3, [pc, #164]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	4926      	ldr	r1, [pc, #152]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044dc:	e001      	b.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	3324      	adds	r3, #36	; 0x24
 80044f2:	2102      	movs	r1, #2
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 fa3f 	bl	8005978 <RCCEx_PLL3_Config>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d033      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004518:	d017      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800451a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451e:	d811      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d013      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004526:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800452a:	d80b      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800452c:	2b00      	cmp	r3, #0
 800452e:	d010      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004534:	d106      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004536:	4b0e      	ldr	r3, [pc, #56]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453a:	4a0d      	ldr	r2, [pc, #52]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800453c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004540:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004542:	e007      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
      break;
 8004548:	e004      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800454a:	bf00      	nop
 800454c:	e002      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004552:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004566:	4902      	ldr	r1, [pc, #8]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004568:	4313      	orrs	r3, r2
 800456a:	654b      	str	r3, [r1, #84]	; 0x54
 800456c:	e004      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800456e:	bf00      	nop
 8004570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
 8004576:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004584:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	492e      	ldr	r1, [pc, #184]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004592:	4313      	orrs	r3, r2
 8004594:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d009      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045a2:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045b0:	4926      	ldr	r1, [pc, #152]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d008      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045c2:	4b22      	ldr	r3, [pc, #136]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ce:	491f      	ldr	r1, [pc, #124]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00d      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ea:	6113      	str	r3, [r2, #16]
 80045ec:	4b17      	ldr	r3, [pc, #92]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045f6:	4915      	ldr	r1, [pc, #84]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	da08      	bge.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004608:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004610:	490e      	ldr	r1, [pc, #56]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004612:	4313      	orrs	r3, r2
 8004614:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d009      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004622:	4b0a      	ldr	r3, [pc, #40]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004630:	4906      	ldr	r1, [pc, #24]	; (800464c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004632:	4313      	orrs	r3, r2
 8004634:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004636:	7dbb      	ldrb	r3, [r7, #22]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	58024400 	.word	0x58024400

08004650 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b090      	sub	sp, #64	; 0x40
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800465e:	f040 8095 	bne.w	800478c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004662:	4b97      	ldr	r3, [pc, #604]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800466c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800466e:	2b04      	cmp	r3, #4
 8004670:	f200 8088 	bhi.w	8004784 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8004674:	a201      	add	r2, pc, #4	; (adr r2, 800467c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8004676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800467a:	bf00      	nop
 800467c:	08004691 	.word	0x08004691
 8004680:	080046b9 	.word	0x080046b9
 8004684:	080046e1 	.word	0x080046e1
 8004688:	0800477d 	.word	0x0800477d
 800468c:	08004709 	.word	0x08004709
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004690:	4b8b      	ldr	r3, [pc, #556]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800469c:	d108      	bne.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800469e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 ff64 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80046a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046ac:	f000 bc94 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046b4:	f000 bc90 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80046b8:	4b81      	ldr	r3, [pc, #516]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046c4:	d108      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80046c6:	f107 0318 	add.w	r3, r7, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fca8 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046d4:	f000 bc80 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80046dc:	f000 bc7c 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80046e0:	4b77      	ldr	r3, [pc, #476]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ec:	d108      	bne.n	8004700 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 fde8 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80046fc:	f000 bc6c 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004704:	f000 bc68 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004708:	4b6d      	ldr	r3, [pc, #436]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800470a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004710:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004712:	4b6b      	ldr	r3, [pc, #428]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b04      	cmp	r3, #4
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004724:	4b66      	ldr	r3, [pc, #408]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	08db      	lsrs	r3, r3, #3
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	4a65      	ldr	r2, [pc, #404]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8004730:	fa22 f303 	lsr.w	r3, r2, r3
 8004734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004736:	e01f      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004738:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004744:	d106      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8004746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004748:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800474c:	d102      	bne.n	8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800474e:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004750:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004752:	e011      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004754:	4b5a      	ldr	r3, [pc, #360]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004760:	d106      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004768:	d102      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800476a:	4b58      	ldr	r3, [pc, #352]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800476e:	e003      	b.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004774:	f000 bc30 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004778:	f000 bc2e 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800477c:	4b54      	ldr	r3, [pc, #336]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004780:	f000 bc2a 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004788:	f000 bc26 	b.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004792:	f040 809f 	bne.w	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004796:	4b4a      	ldr	r3, [pc, #296]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800479e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80047a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a6:	d04d      	beq.n	8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80047a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ae:	f200 8084 	bhi.w	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	2bc0      	cmp	r3, #192	; 0xc0
 80047b6:	d07d      	beq.n	80048b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ba:	2bc0      	cmp	r3, #192	; 0xc0
 80047bc:	d87d      	bhi.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d02d      	beq.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	2b80      	cmp	r3, #128	; 0x80
 80047c8:	d877      	bhi.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d012      	beq.n	80047fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80047d6:	e070      	b.n	80048ba <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80047d8:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047e4:	d107      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80047e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fec0 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047f4:	e3f0      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047fa:	e3ed      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80047fc:	4b30      	ldr	r3, [pc, #192]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004808:	d107      	bne.n	800481a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800480a:	f107 0318 	add.w	r3, r7, #24
 800480e:	4618      	mov	r0, r3
 8004810:	f000 fc06 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004818:	e3de      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800481e:	e3db      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800482c:	d107      	bne.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800482e:	f107 030c 	add.w	r3, r7, #12
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fd48 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800483c:	e3cc      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004842:	e3c9      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004844:	4b1e      	ldr	r3, [pc, #120]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800484c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d10c      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800485a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004860:	4b17      	ldr	r3, [pc, #92]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	08db      	lsrs	r3, r3, #3
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	4a16      	ldr	r2, [pc, #88]	; (80048c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004872:	e01e      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004874:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004880:	d106      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004884:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004888:	d102      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800488c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800488e:	e010      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004898:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800489e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a4:	d102      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80048a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048aa:	e002      	b.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80048b0:	e392      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80048b2:	e391      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80048b4:	4b06      	ldr	r3, [pc, #24]	; (80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80048b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048b8:	e38e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048be:	e38b      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80048c0:	58024400 	.word	0x58024400
 80048c4:	03d09000 	.word	0x03d09000
 80048c8:	003d0900 	.word	0x003d0900
 80048cc:	017d7840 	.word	0x017d7840
 80048d0:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048da:	f040 809c 	bne.w	8004a16 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80048de:	4b9d      	ldr	r3, [pc, #628]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80048e6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048ee:	d054      	beq.n	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80048f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80048f6:	f200 808b 	bhi.w	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004900:	f000 8083 	beq.w	8004a0a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800490a:	f200 8081 	bhi.w	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004914:	d02f      	beq.n	8004976 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491c:	d878      	bhi.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	2b00      	cmp	r3, #0
 8004922:	d004      	beq.n	800492e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800492a:	d012      	beq.n	8004952 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800492c:	e070      	b.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800492e:	4b89      	ldr	r3, [pc, #548]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004936:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800493a:	d107      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800493c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fe15 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800494a:	e345      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004950:	e342      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004952:	4b80      	ldr	r3, [pc, #512]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800495a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495e:	d107      	bne.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004960:	f107 0318 	add.w	r3, r7, #24
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fb5b 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800496e:	e333      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004974:	e330      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004976:	4b77      	ldr	r3, [pc, #476]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004982:	d107      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004984:	f107 030c 	add.w	r3, r7, #12
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fc9d 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004992:	e321      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004998:	e31e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800499a:	4b6e      	ldr	r3, [pc, #440]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80049a4:	4b6b      	ldr	r3, [pc, #428]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d10c      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 80049b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d109      	bne.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80049b6:	4b67      	ldr	r3, [pc, #412]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	08db      	lsrs	r3, r3, #3
 80049bc:	f003 0303 	and.w	r3, r3, #3
 80049c0:	4a65      	ldr	r2, [pc, #404]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80049c2:	fa22 f303 	lsr.w	r3, r2, r3
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049c8:	e01e      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80049ca:	4b62      	ldr	r3, [pc, #392]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049d6:	d106      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80049d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049de:	d102      	bne.n	80049e6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80049e0:	4b5e      	ldr	r3, [pc, #376]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049e4:	e010      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80049e6:	4b5b      	ldr	r3, [pc, #364]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f2:	d106      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80049f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049fa:	d102      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80049fc:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004a06:	e2e7      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004a08:	e2e6      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a0a:	4b56      	ldr	r3, [pc, #344]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a0e:	e2e3      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a14:	e2e0      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a1c:	f040 80a7 	bne.w	8004b6e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004a20:	4b4c      	ldr	r3, [pc, #304]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a28:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a30:	d055      	beq.n	8004ade <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a38:	f200 8096 	bhi.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a42:	f000 8084 	beq.w	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8004a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a48:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a4c:	f200 808c 	bhi.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a56:	d030      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8004a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a5e:	f200 8083 	bhi.w	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d004      	beq.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a6e:	d012      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8004a70:	e07a      	b.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a7e:	d107      	bne.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd73 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a8e:	e2a3      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a94:	e2a0      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a96:	4b2f      	ldr	r3, [pc, #188]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004aa4:	f107 0318 	add.w	r3, r7, #24
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fab9 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004ab2:	e291      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ab8:	e28e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac6:	d107      	bne.n	8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fbfb 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ad6:	e27f      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004adc:	e27c      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d10c      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d109      	bne.n	8004b0e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004afa:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	08db      	lsrs	r3, r3, #3
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004b06:	fa22 f303 	lsr.w	r3, r2, r3
 8004b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b0c:	e01e      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b1a:	d106      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b22:	d102      	bne.n	8004b2a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004b24:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b28:	e010      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b36:	d106      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b3e:	d102      	bne.n	8004b46 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004b40:	4b07      	ldr	r3, [pc, #28]	; (8004b60 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b44:	e002      	b.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004b4a:	e245      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004b4c:	e244      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004b4e:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b52:	e241      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004b54:	58024400 	.word	0x58024400
 8004b58:	03d09000 	.word	0x03d09000
 8004b5c:	003d0900 	.word	0x003d0900
 8004b60:	017d7840 	.word	0x017d7840
 8004b64:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6c:	e234      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	f040 809c 	bne.w	8004cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004b78:	4b9b      	ldr	r3, [pc, #620]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b80:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b88:	d054      	beq.n	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b90:	f200 808b 	bhi.w	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b9a:	f000 8083 	beq.w	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ba4:	f200 8081 	bhi.w	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8004ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bae:	d02f      	beq.n	8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb6:	d878      	bhi.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc4:	d012      	beq.n	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004bc6:	e070      	b.n	8004caa <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bc8:	4b87      	ldr	r3, [pc, #540]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bd4:	d107      	bne.n	8004be6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fcc8 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004be4:	e1f8      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bea:	e1f5      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bec:	4b7e      	ldr	r3, [pc, #504]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bfa:	f107 0318 	add.w	r3, r7, #24
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f000 fa0e 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c08:	e1e6      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c0e:	e1e3      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c10:	4b75      	ldr	r3, [pc, #468]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c1e:	f107 030c 	add.w	r3, r7, #12
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fb50 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c2c:	e1d4      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c32:	e1d1      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004c34:	4b6c      	ldr	r3, [pc, #432]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c3c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c3e:	4b6a      	ldr	r3, [pc, #424]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d109      	bne.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004c50:	4b65      	ldr	r3, [pc, #404]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	08db      	lsrs	r3, r3, #3
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	4a64      	ldr	r2, [pc, #400]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c62:	e01e      	b.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c64:	4b60      	ldr	r3, [pc, #384]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c70:	d106      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c78:	d102      	bne.n	8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004c7a:	4b5d      	ldr	r3, [pc, #372]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7e:	e010      	b.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c80:	4b59      	ldr	r3, [pc, #356]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c8c:	d106      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c94:	d102      	bne.n	8004c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c96:	4b57      	ldr	r3, [pc, #348]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9a:	e002      	b.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ca0:	e19a      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004ca2:	e199      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ca4:	4b54      	ldr	r3, [pc, #336]	; (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ca8:	e196      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cae:	e193      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004cb6:	d173      	bne.n	8004da0 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004cb8:	4b4b      	ldr	r3, [pc, #300]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc8:	d02f      	beq.n	8004d2a <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ccc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cd0:	d863      	bhi.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d004      	beq.n	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cde:	d012      	beq.n	8004d06 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004ce0:	e05b      	b.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ce2:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cee:	d107      	bne.n	8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cf0:	f107 0318 	add.w	r3, r7, #24
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 f993 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004cfe:	e16b      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d04:	e168      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d06:	4b38      	ldr	r3, [pc, #224]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d12:	d107      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d14:	f107 030c 	add.w	r3, r7, #12
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fad5 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004d22:	e159      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d28:	e156      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004d2a:	4b2f      	ldr	r3, [pc, #188]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d34:	4b2c      	ldr	r3, [pc, #176]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d10c      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d46:	4b28      	ldr	r3, [pc, #160]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	08db      	lsrs	r3, r3, #3
 8004d4c:	f003 0303 	and.w	r3, r3, #3
 8004d50:	4a26      	ldr	r2, [pc, #152]	; (8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004d52:	fa22 f303 	lsr.w	r3, r2, r3
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	e01e      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d5a:	4b23      	ldr	r3, [pc, #140]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d66:	d106      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d6e:	d102      	bne.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004d70:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d74:	e010      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d76:	4b1c      	ldr	r3, [pc, #112]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d82:	d106      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8004d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d8a:	d102      	bne.n	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d8c:	4b19      	ldr	r3, [pc, #100]	; (8004df4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d90:	e002      	b.n	8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d96:	e11f      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004d98:	e11e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d9e:	e11b      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d13e      	bne.n	8004e26 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004da8:	4b0f      	ldr	r3, [pc, #60]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dbe:	d01d      	beq.n	8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004dc0:	e02e      	b.n	8004e20 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004dc2:	4b09      	ldr	r3, [pc, #36]	; (8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dce:	d107      	bne.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fbcb 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004dde:	e0fb      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004de0:	2300      	movs	r3, #0
 8004de2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004de4:	e0f8      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004de6:	bf00      	nop
 8004de8:	58024400 	.word	0x58024400
 8004dec:	03d09000 	.word	0x03d09000
 8004df0:	003d0900 	.word	0x003d0900
 8004df4:	017d7840 	.word	0x017d7840
 8004df8:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004dfc:	4b79      	ldr	r3, [pc, #484]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e08:	d107      	bne.n	8004e1a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e0a:	f107 0318 	add.w	r3, r7, #24
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f906 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004e14:	6a3b      	ldr	r3, [r7, #32]
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e18:	e0de      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e1e:	e0db      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e24:	e0d8      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e2c:	f040 8085 	bne.w	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004e30:	4b6c      	ldr	r3, [pc, #432]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e40:	d06b      	beq.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e48:	d874      	bhi.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d056      	beq.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e58:	d86c      	bhi.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e60:	d03b      	beq.n	8004eda <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004e68:	d864      	bhi.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e70:	d021      	beq.n	8004eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e78:	d85c      	bhi.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e86:	d004      	beq.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004e88:	e054      	b.n	8004f34 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e8a:	f000 f8b3 	bl	8004ff4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e8e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e90:	e0a2      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e92:	4b54      	ldr	r3, [pc, #336]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9e:	d107      	bne.n	8004eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ea0:	f107 0318 	add.w	r3, r7, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f8bb 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eae:	e093      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb4:	e090      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eb6:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 f9fd 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ed2:	e081      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ed8:	e07e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004eda:	4b42      	ldr	r3, [pc, #264]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d109      	bne.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ee6:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	08db      	lsrs	r3, r3, #3
 8004eec:	f003 0303 	and.w	r3, r3, #3
 8004ef0:	4a3d      	ldr	r2, [pc, #244]	; (8004fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004ef8:	e06e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004efa:	2300      	movs	r3, #0
 8004efc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004efe:	e06b      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004f00:	4b38      	ldr	r3, [pc, #224]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f0c:	d102      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8004f0e:	4b37      	ldr	r3, [pc, #220]	; (8004fec <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004f12:	e061      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f18:	e05e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f1a:	4b32      	ldr	r3, [pc, #200]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f26:	d102      	bne.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004f28:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f2c:	e054      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f32:	e051      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f38:	e04e      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f40:	d148      	bne.n	8004fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004f42:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f4a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f52:	d02a      	beq.n	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f5a:	d838      	bhi.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8004f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d004      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f68:	d00d      	beq.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8004f6a:	e030      	b.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004f6c:	4b1d      	ldr	r3, [pc, #116]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f78:	d102      	bne.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f7e:	e02b      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f84:	e028      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f86:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f92:	d107      	bne.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 fae9 	bl	8005570 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fa2:	e019      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fa8:	e016      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004faa:	4b0e      	ldr	r3, [pc, #56]	; (8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004fb8:	f107 0318 	add.w	r3, r7, #24
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f82f 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004fc6:	e007      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fcc:	e004      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004fd2:	e001      	b.n	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3740      	adds	r7, #64	; 0x40
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	03d09000 	.word	0x03d09000
 8004fec:	003d0900 	.word	0x003d0900
 8004ff0:	017d7840 	.word	0x017d7840

08004ff4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004ff8:	f7fe fb88 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	091b      	lsrs	r3, r3, #4
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	4904      	ldr	r1, [pc, #16]	; (800501c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800500a:	5ccb      	ldrb	r3, [r1, r3]
 800500c:	f003 031f 	and.w	r3, r3, #31
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	58024400 	.word	0x58024400
 800501c:	080108d8 	.word	0x080108d8

08005020 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005032:	4b9f      	ldr	r3, [pc, #636]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	0b1b      	lsrs	r3, r3, #12
 8005038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800503c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800503e:	4b9c      	ldr	r3, [pc, #624]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	091b      	lsrs	r3, r3, #4
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800504a:	4b99      	ldr	r3, [pc, #612]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	08db      	lsrs	r3, r3, #3
 8005050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8111 	beq.w	8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b02      	cmp	r3, #2
 8005072:	f000 8083 	beq.w	800517c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f200 80a1 	bhi.w	80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d056      	beq.n	8005138 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800508a:	e099      	b.n	80051c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508c:	4b88      	ldr	r3, [pc, #544]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02d      	beq.n	80050f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005098:	4b85      	ldr	r3, [pc, #532]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	4a84      	ldr	r2, [pc, #528]	; (80052b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050f2:	e087      	b.n	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005136:	e065      	b.n	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800514c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800517a:	e043      	b.n	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051be:	e021      	b.n	8005204 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005202:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800521a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522a:	ee17 2a90 	vmov	r2, s15
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005232:	4b1f      	ldr	r3, [pc, #124]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005258:	ee17 2a90 	vmov	r2, s15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005260:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	0e1b      	lsrs	r3, r3, #24
 8005266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527a:	edd7 6a07 	vldr	s13, [r7, #28]
 800527e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 2a90 	vmov	r2, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3724      	adds	r7, #36	; 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	46000000 	.word	0x46000000
 80052bc:	4c742400 	.word	0x4c742400
 80052c0:	4a742400 	.word	0x4a742400
 80052c4:	4bbebc20 	.word	0x4bbebc20

080052c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	; 0x24
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d0:	4ba1      	ldr	r3, [pc, #644]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80052da:	4b9f      	ldr	r3, [pc, #636]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	0d1b      	lsrs	r3, r3, #20
 80052e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052e6:	4b9c      	ldr	r3, [pc, #624]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80052f2:	4b99      	ldr	r3, [pc, #612]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	08db      	lsrs	r3, r3, #3
 80052f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	fb02 f303 	mul.w	r3, r2, r3
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8111 	beq.w	8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b02      	cmp	r3, #2
 800531a:	f000 8083 	beq.w	8005424 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b02      	cmp	r3, #2
 8005322:	f200 80a1 	bhi.w	8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d056      	beq.n	80053e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005332:	e099      	b.n	8005468 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005334:	4b88      	ldr	r3, [pc, #544]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02d      	beq.n	800539c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005340:	4b85      	ldr	r3, [pc, #532]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	08db      	lsrs	r3, r3, #3
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	4a84      	ldr	r2, [pc, #528]	; (800555c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800534c:	fa22 f303 	lsr.w	r3, r2, r3
 8005350:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	ee07 3a90 	vmov	s15, r3
 8005358:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536a:	4b7b      	ldr	r3, [pc, #492]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537a:	ed97 6a03 	vldr	s12, [r7, #12]
 800537e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005396:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800539a:	e087      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005564 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80053aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ae:	4b6a      	ldr	r3, [pc, #424]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053be:	ed97 6a03 	vldr	s12, [r7, #12]
 80053c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053de:	e065      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fa:	ee07 3a90 	vmov	s15, r3
 80053fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005402:	ed97 6a03 	vldr	s12, [r7, #12]
 8005406:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800540a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800540e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005412:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800541e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005422:	e043      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800542e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800556c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005436:	4b48      	ldr	r3, [pc, #288]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005446:	ed97 6a03 	vldr	s12, [r7, #12]
 800544a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800544e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005456:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800545a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800545e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005462:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005466:	e021      	b.n	80054ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005568 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547a:	4b37      	ldr	r3, [pc, #220]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005482:	ee07 3a90 	vmov	s15, r3
 8005486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548a:	ed97 6a03 	vldr	s12, [r7, #12]
 800548e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005560 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80054ac:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	0a5b      	lsrs	r3, r3, #9
 80054b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d2:	ee17 2a90 	vmov	r2, s15
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80054da:	4b1f      	ldr	r3, [pc, #124]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	0c1b      	lsrs	r3, r3, #16
 80054e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e4:	ee07 3a90 	vmov	s15, r3
 80054e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005500:	ee17 2a90 	vmov	r2, s15
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005508:	4b13      	ldr	r3, [pc, #76]	; (8005558 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800550a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550c:	0e1b      	lsrs	r3, r3, #24
 800550e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800551e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005522:	edd7 6a07 	vldr	s13, [r7, #28]
 8005526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800552a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800552e:	ee17 2a90 	vmov	r2, s15
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005536:	e008      	b.n	800554a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	609a      	str	r2, [r3, #8]
}
 800554a:	bf00      	nop
 800554c:	3724      	adds	r7, #36	; 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	58024400 	.word	0x58024400
 800555c:	03d09000 	.word	0x03d09000
 8005560:	46000000 	.word	0x46000000
 8005564:	4c742400 	.word	0x4c742400
 8005568:	4a742400 	.word	0x4a742400
 800556c:	4bbebc20 	.word	0x4bbebc20

08005570 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005578:	4ba0      	ldr	r3, [pc, #640]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800557a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005582:	4b9e      	ldr	r3, [pc, #632]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	091b      	lsrs	r3, r3, #4
 8005588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800558c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800558e:	4b9b      	ldr	r3, [pc, #620]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005598:	4b98      	ldr	r3, [pc, #608]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800559a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559c:	08db      	lsrs	r3, r3, #3
 800559e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	fb02 f303 	mul.w	r3, r2, r3
 80055a8:	ee07 3a90 	vmov	s15, r3
 80055ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 8111 	beq.w	80057de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b02      	cmp	r3, #2
 80055c0:	f000 8083 	beq.w	80056ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	f200 80a1 	bhi.w	800570e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d056      	beq.n	8005686 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80055d8:	e099      	b.n	800570e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055da:	4b88      	ldr	r3, [pc, #544]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d02d      	beq.n	8005642 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80055e6:	4b85      	ldr	r3, [pc, #532]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	08db      	lsrs	r3, r3, #3
 80055ec:	f003 0303 	and.w	r3, r3, #3
 80055f0:	4a83      	ldr	r2, [pc, #524]	; (8005800 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	ee07 3a90 	vmov	s15, r3
 80055fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	ee07 3a90 	vmov	s15, r3
 8005608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800560c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005610:	4b7a      	ldr	r3, [pc, #488]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005620:	ed97 6a03 	vldr	s12, [r7, #12]
 8005624:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005628:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800562c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005630:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005634:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005638:	ee67 7a27 	vmul.f32	s15, s14, s15
 800563c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005640:	e087      	b.n	8005752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	ee07 3a90 	vmov	s15, r3
 8005648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800564c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005650:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005654:	4b69      	ldr	r3, [pc, #420]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005664:	ed97 6a03 	vldr	s12, [r7, #12]
 8005668:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800566c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005670:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005674:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005678:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800567c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005680:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005684:	e065      	b.n	8005752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	ee07 3a90 	vmov	s15, r3
 800568c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005690:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800580c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005694:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005698:	4b58      	ldr	r3, [pc, #352]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056c8:	e043      	b.n	8005752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005810 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80056d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056dc:	4b47      	ldr	r3, [pc, #284]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e4:	ee07 3a90 	vmov	s15, r3
 80056e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80056f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005700:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005708:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800570c:	e021      	b.n	8005752 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	ee07 3a90 	vmov	s15, r3
 8005714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005718:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005808 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800571c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005720:	4b36      	ldr	r3, [pc, #216]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005728:	ee07 3a90 	vmov	s15, r3
 800572c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005730:	ed97 6a03 	vldr	s12, [r7, #12]
 8005734:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005804 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005738:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800573c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005744:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005750:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8005752:	4b2a      	ldr	r3, [pc, #168]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	0a5b      	lsrs	r3, r3, #9
 8005758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005764:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005768:	ee37 7a87 	vadd.f32	s14, s15, s14
 800576c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005778:	ee17 2a90 	vmov	r2, s15
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005784:	0c1b      	lsrs	r3, r3, #16
 8005786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800578a:	ee07 3a90 	vmov	s15, r3
 800578e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800579a:	edd7 6a07 	vldr	s13, [r7, #28]
 800579e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a6:	ee17 2a90 	vmov	r2, s15
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	0e1b      	lsrs	r3, r3, #24
 80057b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057d4:	ee17 2a90 	vmov	r2, s15
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057dc:	e008      	b.n	80057f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	3724      	adds	r7, #36	; 0x24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	58024400 	.word	0x58024400
 8005800:	03d09000 	.word	0x03d09000
 8005804:	46000000 	.word	0x46000000
 8005808:	4c742400 	.word	0x4c742400
 800580c:	4a742400 	.word	0x4a742400
 8005810:	4bbebc20 	.word	0x4bbebc20

08005814 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005822:	4b53      	ldr	r3, [pc, #332]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005826:	f003 0303 	and.w	r3, r3, #3
 800582a:	2b03      	cmp	r3, #3
 800582c:	d101      	bne.n	8005832 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e099      	b.n	8005966 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005832:	4b4f      	ldr	r3, [pc, #316]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a4e      	ldr	r2, [pc, #312]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005838:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800583c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fc fc83 	bl	8002148 <HAL_GetTick>
 8005842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005844:	e008      	b.n	8005858 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005846:	f7fc fc7f 	bl	8002148 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e086      	b.n	8005966 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005858:	4b45      	ldr	r3, [pc, #276]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f0      	bne.n	8005846 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005864:	4b42      	ldr	r3, [pc, #264]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	031b      	lsls	r3, r3, #12
 8005872:	493f      	ldr	r1, [pc, #252]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005874:	4313      	orrs	r3, r2
 8005876:	628b      	str	r3, [r1, #40]	; 0x28
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	3b01      	subs	r3, #1
 800587e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	3b01      	subs	r3, #1
 8005888:	025b      	lsls	r3, r3, #9
 800588a:	b29b      	uxth	r3, r3
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	3b01      	subs	r3, #1
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	061b      	lsls	r3, r3, #24
 80058a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058a8:	4931      	ldr	r1, [pc, #196]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80058ae:	4b30      	ldr	r3, [pc, #192]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	492d      	ldr	r1, [pc, #180]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80058c0:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	f023 0220 	bic.w	r2, r3, #32
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	4928      	ldr	r1, [pc, #160]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80058d2:	4b27      	ldr	r3, [pc, #156]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	4a26      	ldr	r2, [pc, #152]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058d8:	f023 0310 	bic.w	r3, r3, #16
 80058dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058e2:	4b24      	ldr	r3, [pc, #144]	; (8005974 <RCCEx_PLL2_Config+0x160>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	69d2      	ldr	r2, [r2, #28]
 80058ea:	00d2      	lsls	r2, r2, #3
 80058ec:	4920      	ldr	r1, [pc, #128]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80058f2:	4b1f      	ldr	r3, [pc, #124]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	4a1e      	ldr	r2, [pc, #120]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 80058f8:	f043 0310 	orr.w	r3, r3, #16
 80058fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d106      	bne.n	8005912 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 800590a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800590e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005910:	e00f      	b.n	8005932 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d106      	bne.n	8005926 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a14      	ldr	r2, [pc, #80]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 800591e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005924:	e005      	b.n	8005932 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005926:	4b12      	ldr	r3, [pc, #72]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a11      	ldr	r2, [pc, #68]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 800592c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005932:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 8005938:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800593c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800593e:	f7fc fc03 	bl	8002148 <HAL_GetTick>
 8005942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005944:	e008      	b.n	8005958 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005946:	f7fc fbff 	bl	8002148 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	2b02      	cmp	r3, #2
 8005952:	d901      	bls.n	8005958 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <RCCEx_PLL2_Config+0x15c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d0f0      	beq.n	8005946 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005964:	7bfb      	ldrb	r3, [r7, #15]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	58024400 	.word	0x58024400
 8005974:	ffff0007 	.word	0xffff0007

08005978 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005986:	4b53      	ldr	r3, [pc, #332]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b03      	cmp	r3, #3
 8005990:	d101      	bne.n	8005996 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e099      	b.n	8005aca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005996:	4b4f      	ldr	r3, [pc, #316]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a4e      	ldr	r2, [pc, #312]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 800599c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a2:	f7fc fbd1 	bl	8002148 <HAL_GetTick>
 80059a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059a8:	e008      	b.n	80059bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80059aa:	f7fc fbcd 	bl	8002148 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e086      	b.n	8005aca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80059bc:	4b45      	ldr	r3, [pc, #276]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1f0      	bne.n	80059aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80059c8:	4b42      	ldr	r3, [pc, #264]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	051b      	lsls	r3, r3, #20
 80059d6:	493f      	ldr	r1, [pc, #252]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	628b      	str	r3, [r1, #40]	; 0x28
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	025b      	lsls	r3, r3, #9
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	041b      	lsls	r3, r3, #16
 80059fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059fe:	431a      	orrs	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	061b      	lsls	r3, r3, #24
 8005a08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a0c:	4931      	ldr	r1, [pc, #196]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a12:	4b30      	ldr	r3, [pc, #192]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	492d      	ldr	r1, [pc, #180]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005a24:	4b2b      	ldr	r3, [pc, #172]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	4928      	ldr	r1, [pc, #160]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005a36:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a26      	ldr	r2, [pc, #152]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005a42:	4b24      	ldr	r3, [pc, #144]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a46:	4b24      	ldr	r3, [pc, #144]	; (8005ad8 <RCCEx_PLL3_Config+0x160>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	69d2      	ldr	r2, [r2, #28]
 8005a4e:	00d2      	lsls	r2, r2, #3
 8005a50:	4920      	ldr	r1, [pc, #128]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005a56:	4b1f      	ldr	r3, [pc, #124]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d106      	bne.n	8005a76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005a68:	4b1a      	ldr	r3, [pc, #104]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a19      	ldr	r2, [pc, #100]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005a72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a74:	e00f      	b.n	8005a96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d106      	bne.n	8005a8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a7c:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a88:	e005      	b.n	8005a96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a8a:	4b12      	ldr	r3, [pc, #72]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8e:	4a11      	ldr	r2, [pc, #68]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a96:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aa2:	f7fc fb51 	bl	8002148 <HAL_GetTick>
 8005aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aa8:	e008      	b.n	8005abc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005aaa:	f7fc fb4d 	bl	8002148 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e006      	b.n	8005aca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005abc:	4b05      	ldr	r3, [pc, #20]	; (8005ad4 <RCCEx_PLL3_Config+0x15c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f0      	beq.n	8005aaa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	58024400 	.word	0x58024400
 8005ad8:	ffff0007 	.word	0xffff0007

08005adc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08a      	sub	sp, #40	; 0x28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e075      	b.n	8005bda <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d105      	bne.n	8005b06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f7fb fe3b 	bl	800177c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2204      	movs	r2, #4
 8005b0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f868 	bl	8005be4 <HAL_SD_InitCard>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e05d      	b.n	8005bda <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005b1e:	f107 0308 	add.w	r3, r7, #8
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 ff71 	bl	8006a0c <HAL_SD_GetCardStatus>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e052      	b.n	8005bda <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005b34:	7e3b      	ldrb	r3, [r7, #24]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005b3a:	7e7b      	ldrb	r3, [r7, #25]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10a      	bne.n	8005b5e <HAL_SD_Init+0x82>
 8005b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_SD_Init+0x78>
 8005b4e:	6a3b      	ldr	r3, [r7, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d004      	beq.n	8005b5e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005b5c:	e00b      	b.n	8005b76 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d104      	bne.n	8005b70 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b6c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b6e:	e002      	b.n	8005b76 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f001 f82f 	bl	8006be0 <HAL_SD_ConfigWideBusOperation>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e026      	b.n	8005bda <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b8c:	f7fc fadc 	bl	8002148 <HAL_GetTick>
 8005b90:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b92:	e011      	b.n	8005bb8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b94:	f7fc fad8 	bl	8002148 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d109      	bne.n	8005bb8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005baa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e010      	b.n	8005bda <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f001 f923 	bl	8006e04 <HAL_SD_GetCardState>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d1e7      	bne.n	8005b94 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3728      	adds	r7, #40	; 0x28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005be4:	b590      	push	{r4, r7, lr}
 8005be6:	b08d      	sub	sp, #52	; 0x34
 8005be8:	af02      	add	r7, sp, #8
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005c00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005c04:	f7fe fd24 	bl	8004650 <HAL_RCCEx_GetPeriphCLKFreq>
 8005c08:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d109      	bne.n	8005c24 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c1e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e06a      	b.n	8005cfa <HAL_SD_InitCard+0x116>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	0a1b      	lsrs	r3, r3, #8
 8005c28:	4a36      	ldr	r2, [pc, #216]	; (8005d04 <HAL_SD_InitCard+0x120>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	091b      	lsrs	r3, r3, #4
 8005c30:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681c      	ldr	r4, [r3, #0]
 8005c36:	466a      	mov	r2, sp
 8005c38:	f107 0318 	add.w	r3, r7, #24
 8005c3c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005c40:	e882 0003 	stmia.w	r2, {r0, r1}
 8005c44:	f107 030c 	add.w	r3, r7, #12
 8005c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f004 f906 	bl	8009e5c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f004 f949 	bl	8009eec <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c66:	4a28      	ldr	r2, [pc, #160]	; (8005d08 <HAL_SD_InitCard+0x124>)
 8005c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6e:	3301      	adds	r3, #1
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fc fa75 	bl	8002160 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 f9b2 	bl	8006fe0 <SD_PowerON>
 8005c7c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d00b      	beq.n	8005c9c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e02e      	b.n	8005cfa <HAL_SD_InitCard+0x116>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f8d1 	bl	8006e44 <SD_InitCard>
 8005ca2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_SD_InitCard+0xde>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e01b      	b.n	8005cfa <HAL_SD_InitCard+0x116>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f004 f9a4 	bl	800a018 <SDMMC_CmdBlockLength>
 8005cd0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00f      	beq.n	8005cf8 <HAL_SD_InitCard+0x114>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a0b      	ldr	r2, [pc, #44]	; (8005d0c <HAL_SD_InitCard+0x128>)
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_SD_InitCard+0x116>
  }

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	372c      	adds	r7, #44	; 0x2c
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}
 8005d02:	bf00      	nop
 8005d04:	014f8b59 	.word	0x014f8b59
 8005d08:	00012110 	.word	0x00012110
 8005d0c:	1fe00fff 	.word	0x1fe00fff

08005d10 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b092      	sub	sp, #72	; 0x48
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d1e:	f7fc fa13 	bl	8002148 <HAL_GetTick>
 8005d22:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e167      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	f040 815a 	bne.w	8006004 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	441a      	add	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d907      	bls.n	8005d74 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d68:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e14e      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2203      	movs	r2, #3
 8005d78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2200      	movs	r2, #0
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d002      	beq.n	8005d92 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	025b      	lsls	r3, r3, #9
 8005d90:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	025b      	lsls	r3, r3, #9
 8005d9c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d9e:	2390      	movs	r3, #144	; 0x90
 8005da0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005da2:	2302      	movs	r3, #2
 8005da4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f107 0214 	add.w	r2, r7, #20
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f004 f901 	bl	8009fc0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	68da      	ldr	r2, [r3, #12]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dcc:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d90a      	bls.n	8005dea <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005de0:	4618      	mov	r0, r3
 8005de2:	f004 f95f 	bl	800a0a4 <SDMMC_CmdReadMultiBlock>
 8005de6:	6478      	str	r0, [r7, #68]	; 0x44
 8005de8:	e009      	b.n	8005dfe <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2201      	movs	r2, #1
 8005dee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005df6:	4618      	mov	r0, r3
 8005df8:	f004 f931 	bl	800a05e <SDMMC_CmdReadSingleBlock>
 8005dfc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005dfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d012      	beq.n	8005e2a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a84      	ldr	r2, [pc, #528]	; (800601c <HAL_SD_ReadBlocks+0x30c>)
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e0f3      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005e2e:	e058      	b.n	8005ee2 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d033      	beq.n	8005ea6 <HAL_SD_ReadBlocks+0x196>
 8005e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e40:	2b1f      	cmp	r3, #31
 8005e42:	d930      	bls.n	8005ea6 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8005e44:	2300      	movs	r3, #0
 8005e46:	643b      	str	r3, [r7, #64]	; 0x40
 8005e48:	e027      	b.n	8005e9a <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f004 f82e 	bl	8009eb0 <SDMMC_ReadFIFO>
 8005e54:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e60:	3301      	adds	r3, #1
 8005e62:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e66:	0a1b      	lsrs	r3, r3, #8
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e70:	3301      	adds	r3, #1
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e76:	0c1b      	lsrs	r3, r3, #16
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	3301      	adds	r3, #1
 8005e82:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e86:	0e1b      	lsrs	r3, r3, #24
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e90:	3301      	adds	r3, #1
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
        for (count = 0U; count < 8U; count++)
 8005e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e96:	3301      	adds	r3, #1
 8005e98:	643b      	str	r3, [r7, #64]	; 0x40
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9c:	2b07      	cmp	r3, #7
 8005e9e:	d9d4      	bls.n	8005e4a <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8005ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea2:	3b20      	subs	r3, #32
 8005ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005ea6:	f7fc f94f 	bl	8002148 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d902      	bls.n	8005ebc <HAL_SD_ReadBlocks+0x1ac>
 8005eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d112      	bne.n	8005ee2 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a56      	ldr	r2, [pc, #344]	; (800601c <HAL_SD_ReadBlocks+0x30c>)
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e097      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d09f      	beq.n	8005e30 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005efe:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <HAL_SD_ReadBlocks+0x244>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d91f      	bls.n	8005f54 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f18:	2b03      	cmp	r3, #3
 8005f1a:	d01b      	beq.n	8005f54 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f004 f929 	bl	800a178 <SDMMC_CmdStopTransfer>
 8005f26:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8005f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d012      	beq.n	8005f54 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a3a      	ldr	r2, [pc, #232]	; (800601c <HAL_SD_ReadBlocks+0x30c>)
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e05e      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5a:	f003 0308 	and.w	r3, r3, #8
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d012      	beq.n	8005f88 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2d      	ldr	r2, [pc, #180]	; (800601c <HAL_SD_ReadBlocks+0x30c>)
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6e:	f043 0208 	orr.w	r2, r3, #8
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e044      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d012      	beq.n	8005fbc <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a20      	ldr	r2, [pc, #128]	; (800601c <HAL_SD_ReadBlocks+0x30c>)
 8005f9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa2:	f043 0202 	orr.w	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	e02a      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d012      	beq.n	8005ff0 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a13      	ldr	r2, [pc, #76]	; (800601c <HAL_SD_ReadBlocks+0x30c>)
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd6:	f043 0220 	orr.w	r2, r3, #32
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e010      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a0a      	ldr	r2, [pc, #40]	; (8006020 <HAL_SD_ReadBlocks+0x310>)
 8005ff6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	e006      	b.n	8006012 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006008:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3748      	adds	r7, #72	; 0x48
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	1fe00fff 	.word	0x1fe00fff
 8006020:	18000f3a 	.word	0x18000f3a

08006024 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                     uint32_t Timeout)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b092      	sub	sp, #72	; 0x48
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006032:	f7fc f889 	bl	8002148 <HAL_GetTick>
 8006036:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	637b      	str	r3, [r7, #52]	; 0x34

  if (NULL == pData)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d107      	bne.n	8006056 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e16b      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800605c:	b2db      	uxtb	r3, r3
 800605e:	2b01      	cmp	r3, #1
 8006060:	f040 815e 	bne.w	8006320 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800606a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	441a      	add	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006074:	429a      	cmp	r2, r3
 8006076:	d907      	bls.n	8006088 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800607c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e152      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2203      	movs	r2, #3
 800608c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2200      	movs	r2, #0
 8006096:	62da      	str	r2, [r3, #44]	; 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d002      	beq.n	80060a6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80060a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a2:	025b      	lsls	r3, r3, #9
 80060a4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80060a6:	f04f 33ff 	mov.w	r3, #4294967295
 80060aa:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	025b      	lsls	r3, r3, #9
 80060b0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80060b2:	2390      	movs	r3, #144	; 0x90
 80060b4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80060b6:	2300      	movs	r3, #0
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80060be:	2300      	movs	r3, #0
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f107 0218 	add.w	r2, r7, #24
 80060ca:	4611      	mov	r1, r2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f003 ff77 	bl	8009fc0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68da      	ldr	r2, [r3, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e0:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d90a      	bls.n	80060fe <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060f4:	4618      	mov	r0, r3
 80060f6:	f004 f81b 	bl	800a130 <SDMMC_CmdWriteMultiBlock>
 80060fa:	6478      	str	r0, [r7, #68]	; 0x44
 80060fc:	e009      	b.n	8006112 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2210      	movs	r2, #16
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800610a:	4618      	mov	r0, r3
 800610c:	f003 ffed 	bl	800a0ea <SDMMC_CmdWriteSingleBlock>
 8006110:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006114:	2b00      	cmp	r3, #0
 8006116:	d012      	beq.n	800613e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a86      	ldr	r2, [pc, #536]	; (8006338 <HAL_SD_WriteBlocks+0x314>)
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006126:	431a      	orrs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	e0f7      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8006142:	e05c      	b.n	80061fe <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d037      	beq.n	80061c2 <HAL_SD_WriteBlocks+0x19e>
 8006152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006154:	2b1f      	cmp	r3, #31
 8006156:	d934      	bls.n	80061c2 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < 8U; count++)
 8006158:	2300      	movs	r3, #0
 800615a:	643b      	str	r3, [r7, #64]	; 0x40
 800615c:	e02b      	b.n	80061b6 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800615e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006166:	3301      	adds	r3, #1
 8006168:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800616a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	021a      	lsls	r2, r3, #8
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	3301      	adds	r3, #1
 800617a:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800617c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	041a      	lsls	r2, r3, #16
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	4313      	orrs	r3, r2
 8006186:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800618a:	3301      	adds	r3, #1
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800618e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	061a      	lsls	r2, r3, #24
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	4313      	orrs	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800619a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800619c:	3301      	adds	r3, #1
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f107 0214 	add.w	r2, r7, #20
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f003 fe8d 	bl	8009eca <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 80061b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b2:	3301      	adds	r3, #1
 80061b4:	643b      	str	r3, [r7, #64]	; 0x40
 80061b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b8:	2b07      	cmp	r3, #7
 80061ba:	d9d0      	bls.n	800615e <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 80061bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061be:	3b20      	subs	r3, #32
 80061c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80061c2:	f7fb ffc1 	bl	8002148 <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d902      	bls.n	80061d8 <HAL_SD_WriteBlocks+0x1b4>
 80061d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d112      	bne.n	80061fe <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a56      	ldr	r2, [pc, #344]	; (8006338 <HAL_SD_WriteBlocks+0x314>)
 80061de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e6:	431a      	orrs	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	635a      	str	r2, [r3, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	62da      	str	r2, [r3, #44]	; 0x2c
        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e097      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8006208:	2b00      	cmp	r3, #0
 800620a:	d09b      	beq.n	8006144 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68da      	ldr	r2, [r3, #12]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800621a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d022      	beq.n	8006270 <HAL_SD_WriteBlocks+0x24c>
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d91f      	bls.n	8006270 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006234:	2b03      	cmp	r3, #3
 8006236:	d01b      	beq.n	8006270 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f003 ff9b 	bl	800a178 <SDMMC_CmdStopTransfer>
 8006242:	6478      	str	r0, [r7, #68]	; 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8006244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006246:	2b00      	cmp	r3, #0
 8006248:	d012      	beq.n	8006270 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a3a      	ldr	r2, [pc, #232]	; (8006338 <HAL_SD_WriteBlocks+0x314>)
 8006250:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006258:	431a      	orrs	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	635a      	str	r2, [r3, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
          return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e05e      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d012      	beq.n	80062a4 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2d      	ldr	r2, [pc, #180]	; (8006338 <HAL_SD_WriteBlocks+0x314>)
 8006284:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	f043 0208 	orr.w	r2, r3, #8
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e044      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d012      	beq.n	80062d8 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a20      	ldr	r2, [pc, #128]	; (8006338 <HAL_SD_WriteBlocks+0x314>)
 80062b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062be:	f043 0202 	orr.w	r2, r3, #2
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e02a      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062de:	f003 0310 	and.w	r3, r3, #16
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d012      	beq.n	800630c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a13      	ldr	r2, [pc, #76]	; (8006338 <HAL_SD_WriteBlocks+0x314>)
 80062ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	f043 0210 	orr.w	r2, r3, #16
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e010      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a0a      	ldr	r2, [pc, #40]	; (800633c <HAL_SD_WriteBlocks+0x318>)
 8006312:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e006      	b.n	800632e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006324:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
  }
}
 800632e:	4618      	mov	r0, r3
 8006330:	3748      	adds	r7, #72	; 0x48
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	1fe00fff 	.word	0x1fe00fff
 800633c:	18000f3a 	.word	0x18000f3a

08006340 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d008      	beq.n	800636e <HAL_SD_IRQHandler+0x2e>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d003      	beq.n	800636e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f001 f926 	bl	80075b8 <SD_Read_IT>
 800636c:	e19a      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80ac 	beq.w	80064d6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006386:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b59      	ldr	r3, [pc, #356]	; (80064f8 <HAL_SD_IRQHandler+0x1b8>)
 8006394:	400b      	ands	r3, r1
 8006396:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063a6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063b6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d038      	beq.n	8006434 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <HAL_SD_IRQHandler+0x96>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4618      	mov	r0, r3
 80063dc:	f003 fecc 	bl	800a178 <SDMMC_CmdStopTransfer>
 80063e0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d008      	beq.n	80063fa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f95b 	bl	80066b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <HAL_SD_IRQHandler+0x1bc>)
 8006400:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <HAL_SD_IRQHandler+0xe4>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f003 0302 	and.w	r3, r3, #2
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f004 fb87 	bl	800ab38 <HAL_SD_RxCpltCallback>
 800642a:	e13b      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f004 fb79 	bl	800ab24 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006432:	e137      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800643a:	2b00      	cmp	r3, #0
 800643c:	f000 8132 	beq.w	80066a4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2200      	movs	r2, #0
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2200      	movs	r2, #0
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f003 0302 	and.w	r3, r3, #2
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_SD_IRQHandler+0x12c>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f003 0320 	and.w	r3, r3, #32
 8006468:	2b00      	cmp	r3, #0
 800646a:	d011      	beq.n	8006490 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f003 fe81 	bl	800a178 <SDMMC_CmdStopTransfer>
 8006476:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	431a      	orrs	r2, r3
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f910 	bl	80066b0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0310 	and.w	r3, r3, #16
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d104      	bne.n	80064b2 <HAL_SD_IRQHandler+0x172>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f004 fb36 	bl	800ab24 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <HAL_SD_IRQHandler+0x18e>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 80eb 	beq.w	80066a4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f004 fb32 	bl	800ab38 <HAL_SD_RxCpltCallback>
}
 80064d4:	e0e6      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00d      	beq.n	8006500 <HAL_SD_IRQHandler+0x1c0>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f001 f8a8 	bl	8007644 <SD_Write_IT>
 80064f4:	e0d6      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
 80064f6:	bf00      	nop
 80064f8:	ffff3ec5 	.word	0xffff3ec5
 80064fc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006506:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 809d 	beq.w	800664a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	f043 0202 	orr.w	r2, r3, #2
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	f003 0308 	and.w	r3, r3, #8
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653c:	f043 0208 	orr.w	r2, r3, #8
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006556:	f043 0220 	orr.w	r2, r3, #32
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006564:	f003 0310 	and.w	r3, r3, #16
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	f043 0210 	orr.w	r2, r3, #16
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a4b      	ldr	r2, [pc, #300]	; (80066ac <HAL_SD_IRQHandler+0x36c>)
 800657e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800658e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68da      	ldr	r2, [r3, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800659e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065be:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f003 fdd7 	bl	800a178 <SDMMC_CmdStopTransfer>
 80065ca:	4602      	mov	r2, r0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d0:	431a      	orrs	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065e4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d00a      	beq.n	8006610 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2201      	movs	r2, #1
 80065fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f851 	bl	80066b0 <HAL_SD_ErrorCallback>
}
 800660e:	e049      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d044      	beq.n	80066a4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661e:	2b00      	cmp	r3, #0
 8006620:	d040      	beq.n	80066a4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006630:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f834 	bl	80066b0 <HAL_SD_ErrorCallback>
}
 8006648:	e02c      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d025      	beq.n	80066a4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006660:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	f003 0304 	and.w	r3, r3, #4
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f003 0320 	and.w	r3, r3, #32
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f001 f84a 	bl	8007714 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006680:	e010      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 f832 	bl	80076ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006688:	e00c      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d003      	beq.n	800669c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 f833 	bl	8007700 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800669a:	e003      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f001 f81b 	bl	80076d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80066a2:	e7ff      	b.n	80066a4 <HAL_SD_IRQHandler+0x364>
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	18000f3a 	.word	0x18000f3a

080066b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d2:	0f9b      	lsrs	r3, r3, #30
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066de:	0e9b      	lsrs	r3, r3, #26
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f0:	0e1b      	lsrs	r3, r3, #24
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	f003 0303 	and.w	r3, r3, #3
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006702:	0c1b      	lsrs	r3, r3, #16
 8006704:	b2da      	uxtb	r2, r3
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800670e:	0a1b      	lsrs	r3, r3, #8
 8006710:	b2da      	uxtb	r2, r3
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671a:	b2da      	uxtb	r2, r3
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006724:	0d1b      	lsrs	r3, r3, #20
 8006726:	b29a      	uxth	r2, r3
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	b2da      	uxtb	r2, r3
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006742:	0bdb      	lsrs	r3, r3, #15
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0301 	and.w	r3, r3, #1
 800674a:	b2da      	uxtb	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	0b9b      	lsrs	r3, r3, #14
 8006756:	b2db      	uxtb	r3, r3
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	b2da      	uxtb	r2, r3
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006766:	0b5b      	lsrs	r3, r3, #13
 8006768:	b2db      	uxtb	r3, r3
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	b2da      	uxtb	r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006778:	0b1b      	lsrs	r3, r3, #12
 800677a:	b2db      	uxtb	r3, r3
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2200      	movs	r2, #0
 800678a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	2b00      	cmp	r3, #0
 8006792:	d163      	bne.n	800685c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006798:	009a      	lsls	r2, r3, #2
 800679a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800679e:	4013      	ands	r3, r2
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80067a4:	0f92      	lsrs	r2, r2, #30
 80067a6:	431a      	orrs	r2, r3
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067b0:	0edb      	lsrs	r3, r3, #27
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c2:	0e1b      	lsrs	r3, r3, #24
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d4:	0d5b      	lsrs	r3, r3, #21
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	f003 0307 	and.w	r3, r3, #7
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e6:	0c9b      	lsrs	r3, r3, #18
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f8:	0bdb      	lsrs	r3, r3, #15
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 0307 	and.w	r3, r3, #7
 8006800:	b2da      	uxtb	r2, r3
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	691b      	ldr	r3, [r3, #16]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	7e1b      	ldrb	r3, [r3, #24]
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	3302      	adds	r3, #2
 800681c:	2201      	movs	r2, #1
 800681e:	fa02 f303 	lsl.w	r3, r2, r3
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006826:	fb03 f202 	mul.w	r2, r3, r2
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	7a1b      	ldrb	r3, [r3, #8]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	2201      	movs	r2, #1
 800683a:	409a      	lsls	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006848:	0a52      	lsrs	r2, r2, #9
 800684a:	fb03 f202 	mul.w	r2, r3, r2
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006858:	655a      	str	r2, [r3, #84]	; 0x54
 800685a:	e031      	b.n	80068c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006860:	2b01      	cmp	r3, #1
 8006862:	d11d      	bne.n	80068a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006872:	0c1b      	lsrs	r3, r3, #16
 8006874:	431a      	orrs	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	3301      	adds	r3, #1
 8006880:	029a      	lsls	r2, r3, #10
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006894:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	655a      	str	r2, [r3, #84]	; 0x54
 800689e:	e00f      	b.n	80068c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a58      	ldr	r2, [pc, #352]	; (8006a08 <HAL_SD_GetCardCSD+0x344>)
 80068a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e09d      	b.n	80069fc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c4:	0b9b      	lsrs	r3, r3, #14
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	b2da      	uxtb	r2, r3
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d6:	09db      	lsrs	r3, r3, #7
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068f8:	0fdb      	lsrs	r3, r3, #31
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006904:	0f5b      	lsrs	r3, r3, #29
 8006906:	b2db      	uxtb	r3, r3
 8006908:	f003 0303 	and.w	r3, r3, #3
 800690c:	b2da      	uxtb	r2, r3
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006916:	0e9b      	lsrs	r3, r3, #26
 8006918:	b2db      	uxtb	r3, r3
 800691a:	f003 0307 	and.w	r3, r3, #7
 800691e:	b2da      	uxtb	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006928:	0d9b      	lsrs	r3, r3, #22
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 030f 	and.w	r3, r3, #15
 8006930:	b2da      	uxtb	r2, r3
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800693a:	0d5b      	lsrs	r3, r3, #21
 800693c:	b2db      	uxtb	r3, r3
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	b2da      	uxtb	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	b2db      	uxtb	r3, r3
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	b2da      	uxtb	r2, r3
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800696a:	0bdb      	lsrs	r3, r3, #15
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697e:	0b9b      	lsrs	r3, r3, #14
 8006980:	b2db      	uxtb	r3, r3
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	b2da      	uxtb	r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006992:	0b5b      	lsrs	r3, r3, #13
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	b2da      	uxtb	r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a6:	0b1b      	lsrs	r3, r3, #12
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ba:	0a9b      	lsrs	r3, r3, #10
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069e2:	085b      	lsrs	r3, r3, #1
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ea:	b2da      	uxtb	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2201      	movs	r2, #1
 80069f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	1fe00fff 	.word	0x1fe00fff

08006a0c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b094      	sub	sp, #80	; 0x50
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b03      	cmp	r3, #3
 8006a26:	d101      	bne.n	8006a2c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e0a7      	b.n	8006b7c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a2c:	f107 0308 	add.w	r3, r7, #8
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fb62 	bl	80070fc <SD_SendSDStatus>
 8006a38:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d011      	beq.n	8006a64 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a4f      	ldr	r2, [pc, #316]	; (8006b84 <HAL_SD_GetCardStatus+0x178>)
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4e:	431a      	orrs	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a62:	e070      	b.n	8006b46 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	099b      	lsrs	r3, r3, #6
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	f003 0303 	and.w	r3, r3, #3
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	095b      	lsrs	r3, r3, #5
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	0a1b      	lsrs	r3, r3, #8
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	0e1b      	lsrs	r3, r3, #24
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	061a      	lsls	r2, r3, #24
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aaa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ab4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	0e1b      	lsrs	r3, r3, #24
 8006aba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	0a1b      	lsrs	r3, r3, #8
 8006acc:	b2da      	uxtb	r2, r3
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	0d1b      	lsrs	r3, r3, #20
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	0c1b      	lsrs	r3, r3, #16
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	0a9b      	lsrs	r3, r3, #10
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	0a1b      	lsrs	r3, r3, #8
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 0303 	and.w	r3, r3, #3
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	091b      	lsrs	r3, r3, #4
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 030f 	and.w	r3, r3, #15
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	0e1b      	lsrs	r3, r3, #24
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f003 fa62 	bl	800a018 <SDMMC_CmdBlockLength>
 8006b54:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d00d      	beq.n	8006b78 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a08      	ldr	r2, [pc, #32]	; (8006b84 <HAL_SD_GetCardStatus+0x178>)
 8006b62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3750      	adds	r7, #80	; 0x50
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	1fe00fff 	.word	0x1fe00fff

08006b88 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006be0:	b590      	push	{r4, r7, lr}
 8006be2:	b08d      	sub	sp, #52	; 0x34
 8006be4:	af02      	add	r7, sp, #8
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	623b      	str	r3, [r7, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	2b03      	cmp	r3, #3
 8006c02:	d02e      	beq.n	8006c62 <HAL_SD_ConfigWideBusOperation+0x82>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c0a:	d106      	bne.n	8006c1a <HAL_SD_ConfigWideBusOperation+0x3a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	635a      	str	r2, [r3, #52]	; 0x34
 8006c18:	e029      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c20:	d10a      	bne.n	8006c38 <HAL_SD_ConfigWideBusOperation+0x58>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fb62 	bl	80072ec <SD_WideBus_Enable>
 8006c28:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	635a      	str	r2, [r3, #52]	; 0x34
 8006c36:	e01a      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <HAL_SD_ConfigWideBusOperation+0x74>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fb9f 	bl	8007382 <SD_WideBus_Disable>
 8006c44:	61f8      	str	r0, [r7, #28]

      hsd->ErrorCode |= errorstate;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	635a      	str	r2, [r3, #52]	; 0x34
 8006c52:	e00c      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	635a      	str	r2, [r3, #52]	; 0x34
 8006c60:	e005      	b.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x8e>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d007      	beq.n	8006c86 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a5e      	ldr	r2, [pc, #376]	; (8006df4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c7c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c84:	e094      	b.n	8006db0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c86:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c8a:	f7fd fce1 	bl	8004650 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c8e:	6238      	str	r0, [r7, #32]
    if (sdmmc_clk != 0U)
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 8083 	beq.w	8006d9e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695a      	ldr	r2, [r3, #20]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	4950      	ldr	r1, [pc, #320]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cb6:	fba1 1303 	umull	r1, r3, r1, r3
 8006cba:	0e1b      	lsrs	r3, r3, #24
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d303      	bcc.n	8006cc8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	61bb      	str	r3, [r7, #24]
 8006cc6:	e05a      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cd0:	d103      	bne.n	8006cda <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	e051      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ce2:	d126      	bne.n	8006d32 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10e      	bne.n	8006d0a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cec:	6a3b      	ldr	r3, [r7, #32]
 8006cee:	4a43      	ldr	r2, [pc, #268]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d906      	bls.n	8006d02 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	4a40      	ldr	r2, [pc, #256]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cfc:	0e5b      	lsrs	r3, r3, #25
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	e03d      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	e039      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d16:	4a39      	ldr	r2, [pc, #228]	; (8006dfc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d906      	bls.n	8006d2a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d1c:	6a3b      	ldr	r3, [r7, #32]
 8006d1e:	4a36      	ldr	r2, [pc, #216]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d20:	fba2 2303 	umull	r2, r3, r2, r3
 8006d24:	0e5b      	lsrs	r3, r3, #25
 8006d26:	61bb      	str	r3, [r7, #24]
 8006d28:	e029      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e025      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10e      	bne.n	8006d58 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	4a30      	ldr	r2, [pc, #192]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d906      	bls.n	8006d50 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	4a2c      	ldr	r2, [pc, #176]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	0e1b      	lsrs	r3, r3, #24
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e016      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	695b      	ldr	r3, [r3, #20]
 8006d54:	61bb      	str	r3, [r7, #24]
 8006d56:	e012      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	6a3a      	ldr	r2, [r7, #32]
 8006d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d64:	4a26      	ldr	r2, [pc, #152]	; (8006e00 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d906      	bls.n	8006d78 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	4a22      	ldr	r2, [pc, #136]	; (8006df8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d72:	0e1b      	lsrs	r3, r3, #24
 8006d74:	61bb      	str	r3, [r7, #24]
 8006d76:	e002      	b.n	8006d7e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681c      	ldr	r4, [r3, #0]
 8006d82:	466a      	mov	r2, sp
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d8c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d90:	f107 0308 	add.w	r3, r7, #8
 8006d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d96:	4620      	mov	r0, r4
 8006d98:	f003 f860 	bl	8009e5c <SDMMC_Init>
 8006d9c:	e008      	b.n	8006db0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006db8:	4618      	mov	r0, r3
 8006dba:	f003 f92d 	bl	800a018 <SDMMC_CmdBlockLength>
 8006dbe:	61f8      	str	r0, [r7, #28]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dc0:	69fb      	ldr	r3, [r7, #28]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00c      	beq.n	8006de0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a0a      	ldr	r2, [pc, #40]	; (8006df4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	372c      	adds	r7, #44	; 0x2c
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd90      	pop	{r4, r7, pc}
 8006df4:	1fe00fff 	.word	0x1fe00fff
 8006df8:	55e63b89 	.word	0x55e63b89
 8006dfc:	02faf080 	.word	0x02faf080
 8006e00:	017d7840 	.word	0x017d7840

08006e04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e10:	f107 030c 	add.w	r3, r7, #12
 8006e14:	4619      	mov	r1, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fa40 	bl	800729c <SD_SendStatus>
 8006e1c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	0a5b      	lsrs	r3, r3, #9
 8006e34:	f003 030f 	and.w	r3, r3, #15
 8006e38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e3a:	693b      	ldr	r3, [r7, #16]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3718      	adds	r7, #24
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b090      	sub	sp, #64	; 0x40
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e50:	f7fb f97a 	bl	8002148 <HAL_GetTick>
 8006e54:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f003 f857 	bl	8009f0e <SDMMC_GetPowerState>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d102      	bne.n	8006e6c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e6a:	e0b5      	b.n	8006fd8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d02e      	beq.n	8006ed2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f003 faa2 	bl	800a3c2 <SDMMC_CmdSendCID>
 8006e7e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <SD_InitCard+0x46>
    {
      return errorstate;
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	e0a6      	b.n	8006fd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2100      	movs	r1, #0
 8006e90:	4618      	mov	r0, r3
 8006e92:	f003 f882 	bl	8009f9a <SDMMC_GetResponse>
 8006e96:	4602      	mov	r2, r0
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2104      	movs	r1, #4
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f003 f879 	bl	8009f9a <SDMMC_GetResponse>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2108      	movs	r1, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f003 f870 	bl	8009f9a <SDMMC_GetResponse>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	210c      	movs	r1, #12
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f003 f867 	bl	8009f9a <SDMMC_GetResponse>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d01d      	beq.n	8006f16 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006eda:	e019      	b.n	8006f10 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f107 020a 	add.w	r2, r7, #10
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f003 faaa 	bl	800a440 <SDMMC_CmdSetRelAdd>
 8006eec:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef6:	e06f      	b.n	8006fd8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006ef8:	f7fb f926 	bl	8002148 <HAL_GetTick>
 8006efc:	4602      	mov	r2, r0
 8006efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	f241 3287 	movw	r2, #4999	; 0x1387
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d902      	bls.n	8006f10 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006f0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f0e:	e063      	b.n	8006fd8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006f10:	897b      	ldrh	r3, [r7, #10]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0e2      	beq.n	8006edc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d036      	beq.n	8006f8c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f1e:	897b      	ldrh	r3, [r7, #10]
 8006f20:	461a      	mov	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	4619      	mov	r1, r3
 8006f32:	4610      	mov	r0, r2
 8006f34:	f003 fa64 	bl	800a400 <SDMMC_CmdSendCSD>
 8006f38:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d001      	beq.n	8006f44 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f42:	e049      	b.n	8006fd8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2100      	movs	r1, #0
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f003 f825 	bl	8009f9a <SDMMC_GetResponse>
 8006f50:	4602      	mov	r2, r0
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f003 f81c 	bl	8009f9a <SDMMC_GetResponse>
 8006f62:	4602      	mov	r2, r0
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2108      	movs	r1, #8
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f003 f813 	bl	8009f9a <SDMMC_GetResponse>
 8006f74:	4602      	mov	r2, r0
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	210c      	movs	r1, #12
 8006f80:	4618      	mov	r0, r3
 8006f82:	f003 f80a 	bl	8009f9a <SDMMC_GetResponse>
 8006f86:	4602      	mov	r2, r0
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2104      	movs	r1, #4
 8006f92:	4618      	mov	r0, r3
 8006f94:	f003 f801 	bl	8009f9a <SDMMC_GetResponse>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	0d1a      	lsrs	r2, r3, #20
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fa0:	f107 030c 	add.w	r3, r7, #12
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7ff fb8c 	bl	80066c4 <HAL_SD_GetCardCSD>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fb2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006fb6:	e00f      	b.n	8006fd8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc0:	041b      	lsls	r3, r3, #16
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f003 f913 	bl	800a1f0 <SDMMC_CmdSelDesel>
 8006fca:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <SD_InitCard+0x192>
  {
    return errorstate;
 8006fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd4:	e000      	b.n	8006fd8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3740      	adds	r7, #64	; 0x40
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f003 f91c 	bl	800a236 <SDMMC_CmdGoIdleState>
 8006ffe:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	e072      	b.n	80070f0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f003 f92f 	bl	800a272 <SDMMC_CmdOperCond>
 8007014:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800701c:	d10d      	bne.n	800703a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f003 f904 	bl	800a236 <SDMMC_CmdGoIdleState>
 800702e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d004      	beq.n	8007040 <SD_PowerON+0x60>
    {
      return errorstate;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	e05a      	b.n	80070f0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d137      	bne.n	80070b8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f003 f92f 	bl	800a2b2 <SDMMC_CmdAppCommand>
 8007054:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d02d      	beq.n	80070b8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800705c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007060:	e046      	b.n	80070f0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2100      	movs	r1, #0
 8007068:	4618      	mov	r0, r3
 800706a:	f003 f922 	bl	800a2b2 <SDMMC_CmdAppCommand>
 800706e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d001      	beq.n	800707a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	e03a      	b.n	80070f0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	491e      	ldr	r1, [pc, #120]	; (80070f8 <SD_PowerON+0x118>)
 8007080:	4618      	mov	r0, r3
 8007082:	f003 f939 	bl	800a2f8 <SDMMC_CmdAppOperCommand>
 8007086:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d002      	beq.n	8007094 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800708e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007092:	e02d      	b.n	80070f0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2100      	movs	r1, #0
 800709a:	4618      	mov	r0, r3
 800709c:	f002 ff7d 	bl	8009f9a <SDMMC_GetResponse>
 80070a0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	0fdb      	lsrs	r3, r3, #31
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <SD_PowerON+0xce>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <SD_PowerON+0xd0>
 80070ae:	2300      	movs	r3, #0
 80070b0:	613b      	str	r3, [r7, #16]

    count++;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3301      	adds	r3, #1
 80070b6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070be:	4293      	cmp	r3, r2
 80070c0:	d802      	bhi.n	80070c8 <SD_PowerON+0xe8>
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d0cc      	beq.n	8007062 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d902      	bls.n	80070d8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80070d6:	e00b      	b.n	80070f0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	c1100000 	.word	0xc1100000

080070fc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08c      	sub	sp, #48	; 0x30
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007106:	f7fb f81f 	bl	8002148 <HAL_GetTick>
 800710a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	2100      	movs	r1, #0
 8007116:	4618      	mov	r0, r3
 8007118:	f002 ff3f 	bl	8009f9a <SDMMC_GetResponse>
 800711c:	4603      	mov	r3, r0
 800711e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007126:	d102      	bne.n	800712e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800712c:	e0b0      	b.n	8007290 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2140      	movs	r1, #64	; 0x40
 8007134:	4618      	mov	r0, r3
 8007136:	f002 ff6f 	bl	800a018 <SDMMC_CmdBlockLength>
 800713a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d005      	beq.n	800714e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	e0a0      	b.n	8007290 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	4619      	mov	r1, r3
 800715a:	4610      	mov	r0, r2
 800715c:	f003 f8a9 	bl	800a2b2 <SDMMC_CmdAppCommand>
 8007160:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	e08d      	b.n	8007290 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295
 8007178:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800717a:	2340      	movs	r3, #64	; 0x40
 800717c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800717e:	2360      	movs	r3, #96	; 0x60
 8007180:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007182:	2302      	movs	r3, #2
 8007184:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007186:	2300      	movs	r3, #0
 8007188:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800718a:	2301      	movs	r3, #1
 800718c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f107 0208 	add.w	r2, r7, #8
 8007196:	4611      	mov	r1, r2
 8007198:	4618      	mov	r0, r3
 800719a:	f002 ff11 	bl	8009fc0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f003 f991 	bl	800a4ca <SDMMC_CmdStatusRegister>
 80071a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d02b      	beq.n	8007208 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	e069      	b.n	8007290 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d013      	beq.n	80071f2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80071ca:	2300      	movs	r3, #0
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ce:	e00d      	b.n	80071ec <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4618      	mov	r0, r3
 80071d6:	f002 fe6b 	bl	8009eb0 <SDMMC_ReadFIFO>
 80071da:	4602      	mov	r2, r0
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	601a      	str	r2, [r3, #0]
        pData++;
 80071e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e2:	3304      	adds	r3, #4
 80071e4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	3301      	adds	r3, #1
 80071ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ee:	2b07      	cmp	r3, #7
 80071f0:	d9ee      	bls.n	80071d0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071f2:	f7fa ffa9 	bl	8002148 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007200:	d102      	bne.n	8007208 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007202:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007206:	e043      	b.n	8007290 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007212:	2b00      	cmp	r3, #0
 8007214:	d0d2      	beq.n	80071bc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721c:	f003 0308 	and.w	r3, r3, #8
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007224:	2308      	movs	r3, #8
 8007226:	e033      	b.n	8007290 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007236:	2302      	movs	r3, #2
 8007238:	e02a      	b.n	8007290 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d017      	beq.n	8007278 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007248:	2320      	movs	r3, #32
 800724a:	e021      	b.n	8007290 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4618      	mov	r0, r3
 8007252:	f002 fe2d 	bl	8009eb0 <SDMMC_ReadFIFO>
 8007256:	4602      	mov	r2, r0
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	601a      	str	r2, [r3, #0]
    pData++;
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	3304      	adds	r3, #4
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007262:	f7fa ff71 	bl	8002148 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007270:	d102      	bne.n	8007278 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007272:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007276:	e00b      	b.n	8007290 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e2      	bne.n	800724c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a03      	ldr	r2, [pc, #12]	; (8007298 <SD_SendSDStatus+0x19c>)
 800728c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3730      	adds	r7, #48	; 0x30
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	18000f3a 	.word	0x18000f3a

0800729c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d102      	bne.n	80072b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072b0:	e018      	b.n	80072e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	041b      	lsls	r3, r3, #16
 80072bc:	4619      	mov	r1, r3
 80072be:	4610      	mov	r0, r2
 80072c0:	f003 f8e0 	bl	800a484 <SDMMC_CmdSendStatus>
 80072c4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d001      	beq.n	80072d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	e009      	b.n	80072e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f002 fe5f 	bl	8009f9a <SDMMC_GetResponse>
 80072dc:	4602      	mov	r2, r0
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072e2:	2300      	movs	r3, #0
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072f4:	2300      	movs	r3, #0
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	2300      	movs	r3, #0
 80072fa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f002 fe49 	bl	8009f9a <SDMMC_GetResponse>
 8007308:	4603      	mov	r3, r0
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007312:	d102      	bne.n	800731a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007318:	e02f      	b.n	800737a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f879 	bl	8007418 <SD_FindSCR>
 8007326:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	e023      	b.n	800737a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01c      	beq.n	8007376 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007344:	041b      	lsls	r3, r3, #16
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f002 ffb2 	bl	800a2b2 <SDMMC_CmdAppCommand>
 800734e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	e00f      	b.n	800737a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2102      	movs	r1, #2
 8007360:	4618      	mov	r0, r3
 8007362:	f002 ffe9 	bl	800a338 <SDMMC_CmdBusWidth>
 8007366:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d001      	beq.n	8007372 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	e003      	b.n	800737a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007372:	2300      	movs	r3, #0
 8007374:	e001      	b.n	800737a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007376:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800737a:	4618      	mov	r0, r3
 800737c:	3718      	adds	r7, #24
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b086      	sub	sp, #24
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800738a:	2300      	movs	r3, #0
 800738c:	60fb      	str	r3, [r7, #12]
 800738e:	2300      	movs	r3, #0
 8007390:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2100      	movs	r1, #0
 8007398:	4618      	mov	r0, r3
 800739a:	f002 fdfe 	bl	8009f9a <SDMMC_GetResponse>
 800739e:	4603      	mov	r3, r0
 80073a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073a8:	d102      	bne.n	80073b0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073ae:	e02f      	b.n	8007410 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073b0:	f107 030c 	add.w	r3, r7, #12
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f82e 	bl	8007418 <SD_FindSCR>
 80073bc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	e023      	b.n	8007410 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01c      	beq.n	800740c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073da:	041b      	lsls	r3, r3, #16
 80073dc:	4619      	mov	r1, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	f002 ff67 	bl	800a2b2 <SDMMC_CmdAppCommand>
 80073e4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	e00f      	b.n	8007410 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2100      	movs	r1, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	f002 ff9e 	bl	800a338 <SDMMC_CmdBusWidth>
 80073fc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	e003      	b.n	8007410 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007408:	2300      	movs	r3, #0
 800740a:	e001      	b.n	8007410 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800740c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007410:	4618      	mov	r0, r3
 8007412:	3718      	adds	r7, #24
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08e      	sub	sp, #56	; 0x38
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007422:	f7fa fe91 	bl	8002148 <HAL_GetTick>
 8007426:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007428:	2300      	movs	r3, #0
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800742c:	2300      	movs	r3, #0
 800742e:	60bb      	str	r3, [r7, #8]
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2108      	movs	r1, #8
 800743e:	4618      	mov	r0, r3
 8007440:	f002 fdea 	bl	800a018 <SDMMC_CmdBlockLength>
 8007444:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <SD_FindSCR+0x38>
  {
    return errorstate;
 800744c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744e:	e0ad      	b.n	80075ac <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007458:	041b      	lsls	r3, r3, #16
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f002 ff28 	bl	800a2b2 <SDMMC_CmdAppCommand>
 8007462:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <SD_FindSCR+0x56>
  {
    return errorstate;
 800746a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800746c:	e09e      	b.n	80075ac <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800746e:	f04f 33ff 	mov.w	r3, #4294967295
 8007472:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007474:	2308      	movs	r3, #8
 8007476:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007478:	2330      	movs	r3, #48	; 0x30
 800747a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800747c:	2302      	movs	r3, #2
 800747e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007480:	2300      	movs	r3, #0
 8007482:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007484:	2301      	movs	r3, #1
 8007486:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f107 0210 	add.w	r2, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f002 fd94 	bl	8009fc0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f002 ff6e 	bl	800a37e <SDMMC_CmdSendSCR>
 80074a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d027      	beq.n	80074fa <SD_FindSCR+0xe2>
  {
    return errorstate;
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	e07e      	b.n	80075ac <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d113      	bne.n	80074e4 <SD_FindSCR+0xcc>
 80074bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d110      	bne.n	80074e4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f002 fcf2 	bl	8009eb0 <SDMMC_ReadFIFO>
 80074cc:	4603      	mov	r3, r0
 80074ce:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4618      	mov	r0, r3
 80074d6:	f002 fceb 	bl	8009eb0 <SDMMC_ReadFIFO>
 80074da:	4603      	mov	r3, r0
 80074dc:	60fb      	str	r3, [r7, #12]
      index++;
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	3301      	adds	r3, #1
 80074e2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074e4:	f7fa fe30 	bl	8002148 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f2:	d102      	bne.n	80074fa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074f8:	e058      	b.n	80075ac <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007500:	f240 532a 	movw	r3, #1322	; 0x52a
 8007504:	4013      	ands	r3, r2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d0d1      	beq.n	80074ae <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007510:	f003 0308 	and.w	r3, r3, #8
 8007514:	2b00      	cmp	r3, #0
 8007516:	d005      	beq.n	8007524 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2208      	movs	r2, #8
 800751e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007520:	2308      	movs	r3, #8
 8007522:	e043      	b.n	80075ac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d005      	beq.n	800753e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2202      	movs	r2, #2
 8007538:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800753a:	2302      	movs	r3, #2
 800753c:	e036      	b.n	80075ac <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007544:	f003 0320 	and.w	r3, r3, #32
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2220      	movs	r2, #32
 8007552:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007554:	2320      	movs	r3, #32
 8007556:	e029      	b.n	80075ac <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <SD_FindSCR+0x19c>)
 800755e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	061a      	lsls	r2, r3, #24
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	021b      	lsls	r3, r3, #8
 8007568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800756c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	0a1b      	lsrs	r3, r3, #8
 8007572:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007576:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	0e1b      	lsrs	r3, r3, #24
 800757c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800757e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007580:	601a      	str	r2, [r3, #0]
    scr++;
 8007582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007584:	3304      	adds	r3, #4
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	061a      	lsls	r2, r3, #24
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	021b      	lsls	r3, r3, #8
 8007590:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007594:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	0a1b      	lsrs	r3, r3, #8
 800759a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800759e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	0e1b      	lsrs	r3, r3, #24
 80075a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3738      	adds	r7, #56	; 0x38
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	18000f3a 	.word	0x18000f3a

080075b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	2b1f      	cmp	r3, #31
 80075cc:	d936      	bls.n	800763c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e027      	b.n	8007624 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f002 fc69 	bl	8009eb0 <SDMMC_ReadFIFO>
 80075de:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	3301      	adds	r3, #1
 80075ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	0a1b      	lsrs	r3, r3, #8
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3301      	adds	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	b2da      	uxtb	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	0e1b      	lsrs	r3, r3, #24
 8007612:	b2da      	uxtb	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	3301      	adds	r3, #1
 800761c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	3301      	adds	r3, #1
 8007622:	617b      	str	r3, [r7, #20]
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b07      	cmp	r3, #7
 8007628:	d9d4      	bls.n	80075d4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007634:	f1a3 0220 	sub.w	r2, r3, #32
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800763c:	bf00      	nop
 800763e:	3718      	adds	r7, #24
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	2b1f      	cmp	r3, #31
 8007658:	d93a      	bls.n	80076d0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
 800765e:	e02b      	b.n	80076b8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	3301      	adds	r3, #1
 800766a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	021a      	lsls	r2, r3, #8
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	4313      	orrs	r3, r2
 8007676:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	3301      	adds	r3, #1
 800767c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	041a      	lsls	r2, r3, #16
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]
      tmp++;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	3301      	adds	r3, #1
 800768e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	061a      	lsls	r2, r3, #24
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	3301      	adds	r3, #1
 80076a0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f107 020c 	add.w	r2, r7, #12
 80076aa:	4611      	mov	r1, r2
 80076ac:	4618      	mov	r0, r3
 80076ae:	f002 fc0c 	bl	8009eca <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	3301      	adds	r3, #1
 80076b6:	617b      	str	r3, [r7, #20]
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b07      	cmp	r3, #7
 80076bc:	d9d0      	bls.n	8007660 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a1b      	ldr	r3, [r3, #32]
 80076c8:	f1a3 0220 	sub.w	r2, r3, #32
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	621a      	str	r2, [r3, #32]
  }
}
 80076d0:	bf00      	nop
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e0f1      	b.n	800791e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a78      	ldr	r2, [pc, #480]	; (8007928 <HAL_SPI_Init+0x200>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00f      	beq.n	800776a <HAL_SPI_Init+0x42>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a77      	ldr	r2, [pc, #476]	; (800792c <HAL_SPI_Init+0x204>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d00a      	beq.n	800776a <HAL_SPI_Init+0x42>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a75      	ldr	r2, [pc, #468]	; (8007930 <HAL_SPI_Init+0x208>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d005      	beq.n	800776a <HAL_SPI_Init+0x42>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2b0f      	cmp	r3, #15
 8007764:	d901      	bls.n	800776a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0d9      	b.n	800791e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 ff66 	bl	800863c <SPI_GetPacketSize>
 8007770:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a6c      	ldr	r2, [pc, #432]	; (8007928 <HAL_SPI_Init+0x200>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d00c      	beq.n	8007796 <HAL_SPI_Init+0x6e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a6a      	ldr	r2, [pc, #424]	; (800792c <HAL_SPI_Init+0x204>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d007      	beq.n	8007796 <HAL_SPI_Init+0x6e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a69      	ldr	r2, [pc, #420]	; (8007930 <HAL_SPI_Init+0x208>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d002      	beq.n	8007796 <HAL_SPI_Init+0x6e>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b08      	cmp	r3, #8
 8007794:	d811      	bhi.n	80077ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800779a:	4a63      	ldr	r2, [pc, #396]	; (8007928 <HAL_SPI_Init+0x200>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d009      	beq.n	80077b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a61      	ldr	r2, [pc, #388]	; (800792c <HAL_SPI_Init+0x204>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_SPI_Init+0x8c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a60      	ldr	r2, [pc, #384]	; (8007930 <HAL_SPI_Init+0x208>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d104      	bne.n	80077be <HAL_SPI_Init+0x96>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b10      	cmp	r3, #16
 80077b8:	d901      	bls.n	80077be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e0af      	b.n	800791e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d106      	bne.n	80077d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f7fa f8ce 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2202      	movs	r2, #2
 80077dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 0201 	bic.w	r2, r2, #1
 80077ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80077fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007804:	d119      	bne.n	800783a <HAL_SPI_Init+0x112>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800780e:	d103      	bne.n	8007818 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007814:	2b00      	cmp	r3, #0
 8007816:	d008      	beq.n	800782a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10c      	bne.n	800783a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007824:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007828:	d107      	bne.n	800783a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007838:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	69da      	ldr	r2, [r3, #28]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007842:	431a      	orrs	r2, r3
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	431a      	orrs	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784c:	ea42 0103 	orr.w	r1, r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	431a      	orrs	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	431a      	orrs	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	431a      	orrs	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789a:	ea42 0103 	orr.w	r1, r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d113      	bne.n	80078da <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f022 0201 	bic.w	r2, r2, #1
 80078e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00a      	beq.n	800790c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	68db      	ldr	r3, [r3, #12]
 80078fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	430a      	orrs	r2, r1
 800790a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	40013000 	.word	0x40013000
 800792c:	40003800 	.word	0x40003800
 8007930:	40003c00 	.word	0x40003c00

08007934 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af02      	add	r7, sp, #8
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3320      	adds	r3, #32
 800794a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007956:	2b01      	cmp	r3, #1
 8007958:	d101      	bne.n	800795e <HAL_SPI_Transmit+0x2a>
 800795a:	2302      	movs	r3, #2
 800795c:	e1d7      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007966:	f7fa fbef 	bl	8002148 <HAL_GetTick>
 800796a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	d007      	beq.n	8007988 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007978:	2302      	movs	r3, #2
 800797a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007984:	7efb      	ldrb	r3, [r7, #27]
 8007986:	e1c2      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_SPI_Transmit+0x60>
 800798e:	88fb      	ldrh	r3, [r7, #6]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d107      	bne.n	80079a4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80079a0:	7efb      	ldrb	r3, [r7, #27]
 80079a2:	e1b4      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2203      	movs	r2, #3
 80079a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2200      	movs	r2, #0
 80079b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	88fa      	ldrh	r2, [r7, #6]
 80079c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80079f4:	d107      	bne.n	8007a06 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	4b96      	ldr	r3, [pc, #600]	; (8007c68 <HAL_SPI_Transmit+0x334>)
 8007a0e:	4013      	ands	r3, r2
 8007a10:	88f9      	ldrh	r1, [r7, #6]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	6812      	ldr	r2, [r2, #0]
 8007a16:	430b      	orrs	r3, r1
 8007a18:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a32:	d107      	bne.n	8007a44 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	2b0f      	cmp	r3, #15
 8007a4a:	d947      	bls.n	8007adc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a4c:	e03f      	b.n	8007ace <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d114      	bne.n	8007a86 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a6c:	1d1a      	adds	r2, r3, #4
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	b29a      	uxth	r2, r3
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007a84:	e023      	b.n	8007ace <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a86:	f7fa fb5f 	bl	8002148 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d803      	bhi.n	8007a9e <HAL_SPI_Transmit+0x16a>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9c:	d102      	bne.n	8007aa4 <HAL_SPI_Transmit+0x170>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d114      	bne.n	8007ace <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 fcfb 	bl	80084a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e11f      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1b9      	bne.n	8007a4e <HAL_SPI_Transmit+0x11a>
 8007ada:	e0f2      	b.n	8007cc2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b07      	cmp	r3, #7
 8007ae2:	f240 80e7 	bls.w	8007cb4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ae6:	e05d      	b.n	8007ba4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	695b      	ldr	r3, [r3, #20]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d132      	bne.n	8007b5c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d918      	bls.n	8007b34 <HAL_SPI_Transmit+0x200>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d014      	beq.n	8007b34 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6812      	ldr	r2, [r2, #0]
 8007b14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b1a:	1d1a      	adds	r2, r3, #4
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	3b02      	subs	r3, #2
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b32:	e037      	b.n	8007ba4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b38:	881a      	ldrh	r2, [r3, #0]
 8007b3a:	69fb      	ldr	r3, [r7, #28]
 8007b3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b42:	1c9a      	adds	r2, r3, #2
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007b5a:	e023      	b.n	8007ba4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007b5c:	f7fa faf4 	bl	8002148 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d803      	bhi.n	8007b74 <HAL_SPI_Transmit+0x240>
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d102      	bne.n	8007b7a <HAL_SPI_Transmit+0x246>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d114      	bne.n	8007ba4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b7a:	68f8      	ldr	r0, [r7, #12]
 8007b7c:	f000 fc90 	bl	80084a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e0b4      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d19b      	bne.n	8007ae8 <HAL_SPI_Transmit+0x1b4>
 8007bb0:	e087      	b.n	8007cc2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d155      	bne.n	8007c6c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	2b03      	cmp	r3, #3
 8007bca:	d918      	bls.n	8007bfe <HAL_SPI_Transmit+0x2ca>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d914      	bls.n	8007bfe <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6812      	ldr	r2, [r2, #0]
 8007bde:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b04      	subs	r3, #4
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007bfc:	e05a      	b.n	8007cb4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d917      	bls.n	8007c3a <HAL_SPI_Transmit+0x306>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d013      	beq.n	8007c3a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c16:	881a      	ldrh	r2, [r3, #0]
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c20:	1c9a      	adds	r2, r3, #2
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b02      	subs	r3, #2
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c38:	e03c      	b.n	8007cb4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	3320      	adds	r3, #32
 8007c44:	7812      	ldrb	r2, [r2, #0]
 8007c46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	b29a      	uxth	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007c64:	e026      	b.n	8007cb4 <HAL_SPI_Transmit+0x380>
 8007c66:	bf00      	nop
 8007c68:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c6c:	f7fa fa6c 	bl	8002148 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d803      	bhi.n	8007c84 <HAL_SPI_Transmit+0x350>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d102      	bne.n	8007c8a <HAL_SPI_Transmit+0x356>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d114      	bne.n	8007cb4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fc08 	bl	80084a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e02c      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f47f af78 	bne.w	8007bb2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	9300      	str	r3, [sp, #0]
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2108      	movs	r1, #8
 8007ccc:	68f8      	ldr	r0, [r7, #12]
 8007cce:	f000 fc87 	bl	80085e0 <SPI_WaitOnFlagUntilTimeout>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007cde:	f043 0220 	orr.w	r2, r3, #32
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f000 fbd9 	bl	80084a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007d0c:	7efb      	ldrb	r3, [r7, #27]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3720      	adds	r7, #32
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08a      	sub	sp, #40	; 0x28
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	4613      	mov	r3, r2
 8007d26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3330      	adds	r3, #48	; 0x30
 8007d32:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d3c:	d112      	bne.n	8007d64 <HAL_SPI_Receive+0x4c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10e      	bne.n	8007d64 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2204      	movs	r2, #4
 8007d4a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007d4e:	88fa      	ldrh	r2, [r7, #6]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	9300      	str	r3, [sp, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	68b9      	ldr	r1, [r7, #8]
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f978 	bl	8008050 <HAL_SPI_TransmitReceive>
 8007d60:	4603      	mov	r3, r0
 8007d62:	e16f      	b.n	8008044 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d101      	bne.n	8007d72 <HAL_SPI_Receive+0x5a>
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e168      	b.n	8008044 <HAL_SPI_Receive+0x32c>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7a:	f7fa f9e5 	bl	8002148 <HAL_GetTick>
 8007d7e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d007      	beq.n	8007d9c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8007d8c:	2302      	movs	r3, #2
 8007d8e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007d98:	7ffb      	ldrb	r3, [r7, #31]
 8007d9a:	e153      	b.n	8008044 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_SPI_Receive+0x90>
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d107      	bne.n	8007db8 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007db4:	7ffb      	ldrb	r3, [r7, #31]
 8007db6:	e145      	b.n	8008044 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2204      	movs	r2, #4
 8007dbc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	88fa      	ldrh	r2, [r7, #6]
 8007dd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	88fa      	ldrh	r2, [r7, #6]
 8007dda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007e08:	d107      	bne.n	8007e1a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	4b8a      	ldr	r3, [pc, #552]	; (800804c <HAL_SPI_Receive+0x334>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	88f9      	ldrh	r1, [r7, #6]
 8007e26:	68fa      	ldr	r2, [r7, #12]
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f042 0201 	orr.w	r2, r2, #1
 8007e3c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e46:	d107      	bne.n	8007e58 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	2b0f      	cmp	r3, #15
 8007e5e:	d948      	bls.n	8007ef2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007e60:	e040      	b.n	8007ee4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	695a      	ldr	r2, [r3, #20]
 8007e68:	f248 0308 	movw	r3, #32776	; 0x8008
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d014      	beq.n	8007e9c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e7c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e82:	1d1a      	adds	r2, r3, #4
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007e9a:	e023      	b.n	8007ee4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e9c:	f7fa f954 	bl	8002148 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d803      	bhi.n	8007eb4 <HAL_SPI_Receive+0x19c>
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d102      	bne.n	8007eba <HAL_SPI_Receive+0x1a2>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d114      	bne.n	8007ee4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f000 faf0 	bl	80084a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ece:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e0af      	b.n	8008044 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1b8      	bne.n	8007e62 <HAL_SPI_Receive+0x14a>
 8007ef0:	e095      	b.n	800801e <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	2b07      	cmp	r3, #7
 8007ef8:	f240 808b 	bls.w	8008012 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007efc:	e03f      	b.n	8007f7e <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d114      	bne.n	8007f36 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	8812      	ldrh	r2, [r2, #0]
 8007f14:	b292      	uxth	r2, r2
 8007f16:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f1c:	1c9a      	adds	r2, r3, #2
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007f34:	e023      	b.n	8007f7e <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f36:	f7fa f907 	bl	8002148 <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d803      	bhi.n	8007f4e <HAL_SPI_Receive+0x236>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4c:	d102      	bne.n	8007f54 <HAL_SPI_Receive+0x23c>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d114      	bne.n	8007f7e <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 faa3 	bl	80084a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f7a:	2303      	movs	r3, #3
 8007f7c:	e062      	b.n	8008044 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d1b9      	bne.n	8007efe <HAL_SPI_Receive+0x1e6>
 8007f8a:	e048      	b.n	800801e <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d117      	bne.n	8007fca <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fa6:	7812      	ldrb	r2, [r2, #0]
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007fc8:	e023      	b.n	8008012 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fca:	f7fa f8bd 	bl	8002148 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d803      	bhi.n	8007fe2 <HAL_SPI_Receive+0x2ca>
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe0:	d102      	bne.n	8007fe8 <HAL_SPI_Receive+0x2d0>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d114      	bne.n	8008012 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fa59 	bl	80084a0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2201      	movs	r2, #1
 800800a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e018      	b.n	8008044 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008018:	b29b      	uxth	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d1b6      	bne.n	8007f8c <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f000 fa3e 	bl	80084a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2201      	movs	r2, #1
 8008030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e000      	b.n	8008044 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8008042:	7ffb      	ldrb	r3, [r7, #31]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	ffff0000 	.word	0xffff0000

08008050 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08e      	sub	sp, #56	; 0x38
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	3320      	adds	r3, #32
 800806a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3330      	adds	r3, #48	; 0x30
 8008072:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800807a:	2b01      	cmp	r3, #1
 800807c:	d101      	bne.n	8008082 <HAL_SPI_TransmitReceive+0x32>
 800807e:	2302      	movs	r3, #2
 8008080:	e209      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2201      	movs	r2, #1
 8008086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800808a:	f7fa f85d 	bl	8002148 <HAL_GetTick>
 800808e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8008090:	887b      	ldrh	r3, [r7, #2]
 8008092:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8008094:	887b      	ldrh	r3, [r7, #2]
 8008096:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800809e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080a6:	7efb      	ldrb	r3, [r7, #27]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d014      	beq.n	80080d6 <HAL_SPI_TransmitReceive+0x86>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b2:	d106      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d102      	bne.n	80080c2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 80080bc:	7efb      	ldrb	r3, [r7, #27]
 80080be:	2b04      	cmp	r3, #4
 80080c0:	d009      	beq.n	80080d6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 80080c2:	2302      	movs	r3, #2
 80080c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80080d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080d4:	e1df      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d005      	beq.n	80080e8 <HAL_SPI_TransmitReceive+0x98>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <HAL_SPI_TransmitReceive+0x98>
 80080e2:	887b      	ldrh	r3, [r7, #2]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d109      	bne.n	80080fc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80080f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080fa:	e1cc      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b04      	cmp	r3, #4
 8008106:	d003      	beq.n	8008110 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2205      	movs	r2, #5
 800810c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	887a      	ldrh	r2, [r7, #2]
 8008122:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	887a      	ldrh	r2, [r7, #2]
 800812a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68ba      	ldr	r2, [r7, #8]
 8008132:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	887a      	ldrh	r2, [r7, #2]
 8008138:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	887a      	ldrh	r2, [r7, #2]
 8008140:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	4b82      	ldr	r3, [pc, #520]	; (8008360 <HAL_SPI_TransmitReceive+0x310>)
 8008158:	4013      	ands	r3, r2
 800815a:	8879      	ldrh	r1, [r7, #2]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	6812      	ldr	r2, [r2, #0]
 8008160:	430b      	orrs	r3, r1
 8008162:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f042 0201 	orr.w	r2, r2, #1
 8008172:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800817c:	d107      	bne.n	800818e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800818c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b0f      	cmp	r3, #15
 8008194:	d970      	bls.n	8008278 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008196:	e068      	b.n	800826a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	f003 0302 	and.w	r3, r3, #2
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d11a      	bne.n	80081dc <HAL_SPI_TransmitReceive+0x18c>
 80081a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d017      	beq.n	80081dc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6812      	ldr	r2, [r2, #0]
 80081b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081bc:	1d1a      	adds	r2, r3, #4
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	3b01      	subs	r3, #1
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081da:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695a      	ldr	r2, [r3, #20]
 80081e2:	f248 0308 	movw	r3, #32776	; 0x8008
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01a      	beq.n	8008222 <HAL_SPI_TransmitReceive+0x1d2>
 80081ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d017      	beq.n	8008222 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008202:	1d1a      	adds	r2, r3, #4
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800820e:	b29b      	uxth	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008220:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008222:	f7f9 ff91 	bl	8002148 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	69fb      	ldr	r3, [r7, #28]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800822e:	429a      	cmp	r2, r3
 8008230:	d803      	bhi.n	800823a <HAL_SPI_TransmitReceive+0x1ea>
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008238:	d102      	bne.n	8008240 <HAL_SPI_TransmitReceive+0x1f0>
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	d114      	bne.n	800826a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f000 f92d 	bl	80084a0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008254:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e115      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800826a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800826c:	2b00      	cmp	r3, #0
 800826e:	d193      	bne.n	8008198 <HAL_SPI_TransmitReceive+0x148>
 8008270:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d190      	bne.n	8008198 <HAL_SPI_TransmitReceive+0x148>
 8008276:	e0e7      	b.n	8008448 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	2b07      	cmp	r3, #7
 800827e:	f240 80dd 	bls.w	800843c <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008282:	e066      	b.n	8008352 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b02      	cmp	r3, #2
 8008290:	d119      	bne.n	80082c6 <HAL_SPI_TransmitReceive+0x276>
 8008292:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008294:	2b00      	cmp	r3, #0
 8008296:	d016      	beq.n	80082c6 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829c:	881a      	ldrh	r2, [r3, #0]
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a6:	1c9a      	adds	r2, r3, #2
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	3b01      	subs	r3, #1
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d11a      	bne.n	800830a <HAL_SPI_TransmitReceive+0x2ba>
 80082d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d017      	beq.n	800830a <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082de:	6a3a      	ldr	r2, [r7, #32]
 80082e0:	8812      	ldrh	r2, [r2, #0]
 80082e2:	b292      	uxth	r2, r2
 80082e4:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ea:	1c9a      	adds	r2, r3, #2
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	3b01      	subs	r3, #1
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008308:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800830a:	f7f9 ff1d 	bl	8002148 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008316:	429a      	cmp	r2, r3
 8008318:	d803      	bhi.n	8008322 <HAL_SPI_TransmitReceive+0x2d2>
 800831a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800831c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008320:	d102      	bne.n	8008328 <HAL_SPI_TransmitReceive+0x2d8>
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	2b00      	cmp	r3, #0
 8008326:	d114      	bne.n	8008352 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f000 f8b9 	bl	80084a0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800833c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800834e:	2303      	movs	r3, #3
 8008350:	e0a1      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8008352:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008354:	2b00      	cmp	r3, #0
 8008356:	d195      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x234>
 8008358:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d192      	bne.n	8008284 <HAL_SPI_TransmitReceive+0x234>
 800835e:	e073      	b.n	8008448 <HAL_SPI_TransmitReceive+0x3f8>
 8008360:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b02      	cmp	r3, #2
 8008370:	d11b      	bne.n	80083aa <HAL_SPI_TransmitReceive+0x35a>
 8008372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008374:	2b00      	cmp	r3, #0
 8008376:	d018      	beq.n	80083aa <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3320      	adds	r3, #32
 8008382:	7812      	ldrb	r2, [r2, #0]
 8008384:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838a:	1c5a      	adds	r2, r3, #1
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008396:	b29b      	uxth	r3, r3
 8008398:	3b01      	subs	r3, #1
 800839a:	b29a      	uxth	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80083a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	f003 0301 	and.w	r3, r3, #1
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d11d      	bne.n	80083f4 <HAL_SPI_TransmitReceive+0x3a4>
 80083b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d01a      	beq.n	80083f4 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ca:	7812      	ldrb	r2, [r2, #0]
 80083cc:	b2d2      	uxtb	r2, r2
 80083ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	3b01      	subs	r3, #1
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80083f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083f4:	f7f9 fea8 	bl	8002148 <HAL_GetTick>
 80083f8:	4602      	mov	r2, r0
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008400:	429a      	cmp	r2, r3
 8008402:	d803      	bhi.n	800840c <HAL_SPI_TransmitReceive+0x3bc>
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d102      	bne.n	8008412 <HAL_SPI_TransmitReceive+0x3c2>
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	2b00      	cmp	r3, #0
 8008410:	d114      	bne.n	800843c <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f000 f844 	bl	80084a0 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e02c      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800843c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800843e:	2b00      	cmp	r3, #0
 8008440:	d190      	bne.n	8008364 <HAL_SPI_TransmitReceive+0x314>
 8008442:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008444:	2b00      	cmp	r3, #0
 8008446:	d18d      	bne.n	8008364 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	2200      	movs	r2, #0
 8008450:	2108      	movs	r1, #8
 8008452:	68f8      	ldr	r0, [r7, #12]
 8008454:	f000 f8c4 	bl	80085e0 <SPI_WaitOnFlagUntilTimeout>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d007      	beq.n	800846e <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008464:	f043 0220 	orr.w	r2, r3, #32
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 f816 	bl	80084a0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e001      	b.n	8008496 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 8008492:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008496:	4618      	mov	r0, r3
 8008498:	3730      	adds	r7, #48	; 0x30
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop

080084a0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699a      	ldr	r2, [r3, #24]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f042 0208 	orr.w	r2, r2, #8
 80084be:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	699a      	ldr	r2, [r3, #24]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f042 0210 	orr.w	r2, r2, #16
 80084ce:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0201 	bic.w	r2, r2, #1
 80084de:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6919      	ldr	r1, [r3, #16]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	4b3c      	ldr	r3, [pc, #240]	; (80085dc <SPI_CloseTransfer+0x13c>)
 80084ec:	400b      	ands	r3, r1
 80084ee:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689a      	ldr	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084fe:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b04      	cmp	r3, #4
 800850a:	d014      	beq.n	8008536 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f003 0320 	and.w	r3, r3, #32
 8008512:	2b00      	cmp	r3, #0
 8008514:	d00f      	beq.n	8008536 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800851c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	699a      	ldr	r2, [r3, #24]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0220 	orr.w	r2, r2, #32
 8008534:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b03      	cmp	r3, #3
 8008540:	d014      	beq.n	800856c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00f      	beq.n	800856c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008552:	f043 0204 	orr.w	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699a      	ldr	r2, [r3, #24]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800856a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00f      	beq.n	8008596 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800857c:	f043 0201 	orr.w	r2, r3, #1
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	699a      	ldr	r2, [r3, #24]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008594:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00f      	beq.n	80085c0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a6:	f043 0208 	orr.w	r2, r3, #8
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	699a      	ldr	r2, [r3, #24]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085be:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80085d0:	bf00      	nop
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	fffffc90 	.word	0xfffffc90

080085e0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	4613      	mov	r3, r2
 80085ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80085f0:	e010      	b.n	8008614 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085f2:	f7f9 fda9 	bl	8002148 <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d803      	bhi.n	800860a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008608:	d102      	bne.n	8008610 <SPI_WaitOnFlagUntilTimeout+0x30>
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d101      	bne.n	8008614 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e00f      	b.n	8008634 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	4013      	ands	r3, r2
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	429a      	cmp	r2, r3
 8008622:	bf0c      	ite	eq
 8008624:	2301      	moveq	r3, #1
 8008626:	2300      	movne	r3, #0
 8008628:	b2db      	uxtb	r3, r3
 800862a:	461a      	mov	r2, r3
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	429a      	cmp	r2, r3
 8008630:	d0df      	beq.n	80085f2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	095b      	lsrs	r3, r3, #5
 800864a:	3301      	adds	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	3301      	adds	r3, #1
 8008654:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	3307      	adds	r3, #7
 800865a:	08db      	lsrs	r3, r3, #3
 800865c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	fb02 f303 	mul.w	r3, r2, r3
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008672:	b580      	push	{r7, lr}
 8008674:	b082      	sub	sp, #8
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e049      	b.n	8008718 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7f9 fba5 	bl	8001de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2202      	movs	r2, #2
 80086a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4619      	mov	r1, r3
 80086b0:	4610      	mov	r0, r2
 80086b2:	f000 f987 	bl	80089c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2201      	movs	r2, #1
 80086e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b02      	cmp	r3, #2
 8008734:	d122      	bne.n	800877c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f003 0302 	and.w	r3, r3, #2
 8008740:	2b02      	cmp	r3, #2
 8008742:	d11b      	bne.n	800877c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f06f 0202 	mvn.w	r2, #2
 800874c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f003 0303 	and.w	r3, r3, #3
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 f90f 	bl	8008986 <HAL_TIM_IC_CaptureCallback>
 8008768:	e005      	b.n	8008776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f000 f901 	bl	8008972 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f912 	bl	800899a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	2b04      	cmp	r3, #4
 8008788:	d122      	bne.n	80087d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0304 	and.w	r3, r3, #4
 8008794:	2b04      	cmp	r3, #4
 8008796:	d11b      	bne.n	80087d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0204 	mvn.w	r2, #4
 80087a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f8e5 	bl	8008986 <HAL_TIM_IC_CaptureCallback>
 80087bc:	e005      	b.n	80087ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f8d7 	bl	8008972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f8e8 	bl	800899a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b08      	cmp	r3, #8
 80087dc:	d122      	bne.n	8008824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f003 0308 	and.w	r3, r3, #8
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d11b      	bne.n	8008824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f06f 0208 	mvn.w	r2, #8
 80087f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2204      	movs	r2, #4
 80087fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	f003 0303 	and.w	r3, r3, #3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8bb 	bl	8008986 <HAL_TIM_IC_CaptureCallback>
 8008810:	e005      	b.n	800881e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f8ad 	bl	8008972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f8be 	bl	800899a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	f003 0310 	and.w	r3, r3, #16
 800882e:	2b10      	cmp	r3, #16
 8008830:	d122      	bne.n	8008878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b10      	cmp	r3, #16
 800883e:	d11b      	bne.n	8008878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f06f 0210 	mvn.w	r2, #16
 8008848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2208      	movs	r2, #8
 800884e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800885a:	2b00      	cmp	r3, #0
 800885c:	d003      	beq.n	8008866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 f891 	bl	8008986 <HAL_TIM_IC_CaptureCallback>
 8008864:	e005      	b.n	8008872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f883 	bl	8008972 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f894 	bl	800899a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2200      	movs	r2, #0
 8008876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b01      	cmp	r3, #1
 8008884:	d10e      	bne.n	80088a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	2b01      	cmp	r3, #1
 8008892:	d107      	bne.n	80088a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f06f 0201 	mvn.w	r2, #1
 800889c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f85d 	bl	800895e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ae:	2b80      	cmp	r3, #128	; 0x80
 80088b0:	d10e      	bne.n	80088d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d107      	bne.n	80088d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 f9ac 	bl	8008c28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088de:	d10e      	bne.n	80088fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ea:	2b80      	cmp	r3, #128	; 0x80
 80088ec:	d107      	bne.n	80088fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f99f 	bl	8008c3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008908:	2b40      	cmp	r3, #64	; 0x40
 800890a:	d10e      	bne.n	800892a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b40      	cmp	r3, #64	; 0x40
 8008918:	d107      	bne.n	800892a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f842 	bl	80089ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b20      	cmp	r3, #32
 8008936:	d10e      	bne.n	8008956 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	f003 0320 	and.w	r3, r3, #32
 8008942:	2b20      	cmp	r3, #32
 8008944:	d107      	bne.n	8008956 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f06f 0220 	mvn.w	r2, #32
 800894e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f95f 	bl	8008c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008956:	bf00      	nop
 8008958:	3708      	adds	r7, #8
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}

0800895e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800897a:	bf00      	nop
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008986:	b480      	push	{r7}
 8008988:	b083      	sub	sp, #12
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800898e:	bf00      	nop
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089b6:	bf00      	nop
 80089b8:	370c      	adds	r7, #12
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a40      	ldr	r2, [pc, #256]	; (8008ad8 <TIM_Base_SetConfig+0x114>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d013      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089e2:	d00f      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a3d      	ldr	r2, [pc, #244]	; (8008adc <TIM_Base_SetConfig+0x118>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00b      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a3c      	ldr	r2, [pc, #240]	; (8008ae0 <TIM_Base_SetConfig+0x11c>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d007      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a3b      	ldr	r2, [pc, #236]	; (8008ae4 <TIM_Base_SetConfig+0x120>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d003      	beq.n	8008a04 <TIM_Base_SetConfig+0x40>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a3a      	ldr	r2, [pc, #232]	; (8008ae8 <TIM_Base_SetConfig+0x124>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d108      	bne.n	8008a16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a2f      	ldr	r2, [pc, #188]	; (8008ad8 <TIM_Base_SetConfig+0x114>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d01f      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a24:	d01b      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a2c      	ldr	r2, [pc, #176]	; (8008adc <TIM_Base_SetConfig+0x118>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d017      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2b      	ldr	r2, [pc, #172]	; (8008ae0 <TIM_Base_SetConfig+0x11c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d013      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a2a      	ldr	r2, [pc, #168]	; (8008ae4 <TIM_Base_SetConfig+0x120>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00f      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a29      	ldr	r2, [pc, #164]	; (8008ae8 <TIM_Base_SetConfig+0x124>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00b      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a28      	ldr	r2, [pc, #160]	; (8008aec <TIM_Base_SetConfig+0x128>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d007      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a27      	ldr	r2, [pc, #156]	; (8008af0 <TIM_Base_SetConfig+0x12c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d003      	beq.n	8008a5e <TIM_Base_SetConfig+0x9a>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a26      	ldr	r2, [pc, #152]	; (8008af4 <TIM_Base_SetConfig+0x130>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d108      	bne.n	8008a70 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	689a      	ldr	r2, [r3, #8]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a10      	ldr	r2, [pc, #64]	; (8008ad8 <TIM_Base_SetConfig+0x114>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00f      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a12      	ldr	r2, [pc, #72]	; (8008ae8 <TIM_Base_SetConfig+0x124>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00b      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a11      	ldr	r2, [pc, #68]	; (8008aec <TIM_Base_SetConfig+0x128>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d007      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a10      	ldr	r2, [pc, #64]	; (8008af0 <TIM_Base_SetConfig+0x12c>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_Base_SetConfig+0xf8>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a0f      	ldr	r2, [pc, #60]	; (8008af4 <TIM_Base_SetConfig+0x130>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d103      	bne.n	8008ac4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	691a      	ldr	r2, [r3, #16]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	615a      	str	r2, [r3, #20]
}
 8008aca:	bf00      	nop
 8008acc:	3714      	adds	r7, #20
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	40010000 	.word	0x40010000
 8008adc:	40000400 	.word	0x40000400
 8008ae0:	40000800 	.word	0x40000800
 8008ae4:	40000c00 	.word	0x40000c00
 8008ae8:	40010400 	.word	0x40010400
 8008aec:	40014000 	.word	0x40014000
 8008af0:	40014400 	.word	0x40014400
 8008af4:	40014800 	.word	0x40014800

08008af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e06d      	b.n	8008bec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a30      	ldr	r2, [pc, #192]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d004      	beq.n	8008b44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a2f      	ldr	r2, [pc, #188]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d108      	bne.n	8008b56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008b4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	68fa      	ldr	r2, [r7, #12]
 8008b6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a20      	ldr	r2, [pc, #128]	; (8008bf8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d022      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b82:	d01d      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a1d      	ldr	r2, [pc, #116]	; (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d018      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a1c      	ldr	r2, [pc, #112]	; (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d013      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a1a      	ldr	r2, [pc, #104]	; (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00e      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d009      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a16      	ldr	r2, [pc, #88]	; (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d004      	beq.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10c      	bne.n	8008bda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68ba      	ldr	r2, [r7, #8]
 8008bd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bea:	2300      	movs	r3, #0
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	40010000 	.word	0x40010000
 8008bfc:	40010400 	.word	0x40010400
 8008c00:	40000400 	.word	0x40000400
 8008c04:	40000800 	.word	0x40000800
 8008c08:	40000c00 	.word	0x40000c00
 8008c0c:	40001800 	.word	0x40001800
 8008c10:	40014000 	.word	0x40014000

08008c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c30:	bf00      	nop
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c44:	bf00      	nop
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e042      	b.n	8008ce8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7f9 f92b 	bl	8001ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2224      	movs	r2, #36	; 0x24
 8008c7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f022 0201 	bic.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 f8c2 	bl	8008e1c <UART_SetConfig>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d101      	bne.n	8008ca2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e022      	b.n	8008ce8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fe1e 	bl	80098ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685a      	ldr	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008cbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008cce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f042 0201 	orr.w	r2, r2, #1
 8008cde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fea5 	bl	8009a30 <UART_CheckIdleState>
 8008ce6:	4603      	mov	r3, r0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08a      	sub	sp, #40	; 0x28
 8008cf4:	af02      	add	r7, sp, #8
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	603b      	str	r3, [r7, #0]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d06:	2b20      	cmp	r3, #32
 8008d08:	f040 8083 	bne.w	8008e12 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d002      	beq.n	8008d18 <HAL_UART_Transmit+0x28>
 8008d12:	88fb      	ldrh	r3, [r7, #6]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d101      	bne.n	8008d1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e07b      	b.n	8008e14 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d101      	bne.n	8008d2a <HAL_UART_Transmit+0x3a>
 8008d26:	2302      	movs	r3, #2
 8008d28:	e074      	b.n	8008e14 <HAL_UART_Transmit+0x124>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2221      	movs	r2, #33	; 0x21
 8008d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d42:	f7f9 fa01 	bl	8002148 <HAL_GetTick>
 8008d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	88fa      	ldrh	r2, [r7, #6]
 8008d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	88fa      	ldrh	r2, [r7, #6]
 8008d54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d60:	d108      	bne.n	8008d74 <HAL_UART_Transmit+0x84>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d104      	bne.n	8008d74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	61bb      	str	r3, [r7, #24]
 8008d72:	e003      	b.n	8008d7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008d84:	e02c      	b.n	8008de0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	9300      	str	r3, [sp, #0]
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2180      	movs	r1, #128	; 0x80
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f000 fe98 	bl	8009ac6 <UART_WaitOnFlagUntilTimeout>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e039      	b.n	8008e14 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10b      	bne.n	8008dbe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008db4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	3302      	adds	r3, #2
 8008dba:	61bb      	str	r3, [r7, #24]
 8008dbc:	e007      	b.n	8008dce <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	781a      	ldrb	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1cc      	bne.n	8008d86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	9300      	str	r3, [sp, #0]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	2200      	movs	r2, #0
 8008df4:	2140      	movs	r1, #64	; 0x40
 8008df6:	68f8      	ldr	r0, [r7, #12]
 8008df8:	f000 fe65 	bl	8009ac6 <UART_WaitOnFlagUntilTimeout>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d001      	beq.n	8008e06 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e006      	b.n	8008e14 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2220      	movs	r2, #32
 8008e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	e000      	b.n	8008e14 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008e12:	2302      	movs	r3, #2
  }
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3720      	adds	r7, #32
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e20:	b092      	sub	sp, #72	; 0x48
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	689a      	ldr	r2, [r3, #8]
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	431a      	orrs	r2, r3
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	695b      	ldr	r3, [r3, #20]
 8008e3a:	431a      	orrs	r2, r3
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	69db      	ldr	r3, [r3, #28]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	4bbe      	ldr	r3, [pc, #760]	; (8009144 <UART_SetConfig+0x328>)
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	697a      	ldr	r2, [r7, #20]
 8008e50:	6812      	ldr	r2, [r2, #0]
 8008e52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	430a      	orrs	r2, r1
 8008e6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	699b      	ldr	r3, [r3, #24]
 8008e72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4ab3      	ldr	r2, [pc, #716]	; (8009148 <UART_SetConfig+0x32c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d004      	beq.n	8008e88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e84:	4313      	orrs	r3, r2
 8008e86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	689a      	ldr	r2, [r3, #8]
 8008e8e:	4baf      	ldr	r3, [pc, #700]	; (800914c <UART_SetConfig+0x330>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	697a      	ldr	r2, [r7, #20]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea2:	f023 010f 	bic.w	r1, r3, #15
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4aa6      	ldr	r2, [pc, #664]	; (8009150 <UART_SetConfig+0x334>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d177      	bne.n	8008fac <UART_SetConfig+0x190>
 8008ebc:	4ba5      	ldr	r3, [pc, #660]	; (8009154 <UART_SetConfig+0x338>)
 8008ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ec4:	2b28      	cmp	r3, #40	; 0x28
 8008ec6:	d86d      	bhi.n	8008fa4 <UART_SetConfig+0x188>
 8008ec8:	a201      	add	r2, pc, #4	; (adr r2, 8008ed0 <UART_SetConfig+0xb4>)
 8008eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ece:	bf00      	nop
 8008ed0:	08008f75 	.word	0x08008f75
 8008ed4:	08008fa5 	.word	0x08008fa5
 8008ed8:	08008fa5 	.word	0x08008fa5
 8008edc:	08008fa5 	.word	0x08008fa5
 8008ee0:	08008fa5 	.word	0x08008fa5
 8008ee4:	08008fa5 	.word	0x08008fa5
 8008ee8:	08008fa5 	.word	0x08008fa5
 8008eec:	08008fa5 	.word	0x08008fa5
 8008ef0:	08008f7d 	.word	0x08008f7d
 8008ef4:	08008fa5 	.word	0x08008fa5
 8008ef8:	08008fa5 	.word	0x08008fa5
 8008efc:	08008fa5 	.word	0x08008fa5
 8008f00:	08008fa5 	.word	0x08008fa5
 8008f04:	08008fa5 	.word	0x08008fa5
 8008f08:	08008fa5 	.word	0x08008fa5
 8008f0c:	08008fa5 	.word	0x08008fa5
 8008f10:	08008f85 	.word	0x08008f85
 8008f14:	08008fa5 	.word	0x08008fa5
 8008f18:	08008fa5 	.word	0x08008fa5
 8008f1c:	08008fa5 	.word	0x08008fa5
 8008f20:	08008fa5 	.word	0x08008fa5
 8008f24:	08008fa5 	.word	0x08008fa5
 8008f28:	08008fa5 	.word	0x08008fa5
 8008f2c:	08008fa5 	.word	0x08008fa5
 8008f30:	08008f8d 	.word	0x08008f8d
 8008f34:	08008fa5 	.word	0x08008fa5
 8008f38:	08008fa5 	.word	0x08008fa5
 8008f3c:	08008fa5 	.word	0x08008fa5
 8008f40:	08008fa5 	.word	0x08008fa5
 8008f44:	08008fa5 	.word	0x08008fa5
 8008f48:	08008fa5 	.word	0x08008fa5
 8008f4c:	08008fa5 	.word	0x08008fa5
 8008f50:	08008f95 	.word	0x08008f95
 8008f54:	08008fa5 	.word	0x08008fa5
 8008f58:	08008fa5 	.word	0x08008fa5
 8008f5c:	08008fa5 	.word	0x08008fa5
 8008f60:	08008fa5 	.word	0x08008fa5
 8008f64:	08008fa5 	.word	0x08008fa5
 8008f68:	08008fa5 	.word	0x08008fa5
 8008f6c:	08008fa5 	.word	0x08008fa5
 8008f70:	08008f9d 	.word	0x08008f9d
 8008f74:	2301      	movs	r3, #1
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f7a:	e222      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008f7c:	2304      	movs	r3, #4
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e21e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008f84:	2308      	movs	r3, #8
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8a:	e21a      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008f8c:	2310      	movs	r3, #16
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f92:	e216      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008f94:	2320      	movs	r3, #32
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e212      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008f9c:	2340      	movs	r3, #64	; 0x40
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e20e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008fa4:	2380      	movs	r3, #128	; 0x80
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e20a      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a69      	ldr	r2, [pc, #420]	; (8009158 <UART_SetConfig+0x33c>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d130      	bne.n	8009018 <UART_SetConfig+0x1fc>
 8008fb6:	4b67      	ldr	r3, [pc, #412]	; (8009154 <UART_SetConfig+0x338>)
 8008fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fba:	f003 0307 	and.w	r3, r3, #7
 8008fbe:	2b05      	cmp	r3, #5
 8008fc0:	d826      	bhi.n	8009010 <UART_SetConfig+0x1f4>
 8008fc2:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <UART_SetConfig+0x1ac>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fe1 	.word	0x08008fe1
 8008fcc:	08008fe9 	.word	0x08008fe9
 8008fd0:	08008ff1 	.word	0x08008ff1
 8008fd4:	08008ff9 	.word	0x08008ff9
 8008fd8:	08009001 	.word	0x08009001
 8008fdc:	08009009 	.word	0x08009009
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fe6:	e1ec      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008fe8:	2304      	movs	r3, #4
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e1e8      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008ff0:	2308      	movs	r3, #8
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff6:	e1e4      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8008ff8:	2310      	movs	r3, #16
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffe:	e1e0      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009000:	2320      	movs	r3, #32
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e1dc      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009008:	2340      	movs	r3, #64	; 0x40
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e1d8      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009010:	2380      	movs	r3, #128	; 0x80
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e1d4      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a4f      	ldr	r2, [pc, #316]	; (800915c <UART_SetConfig+0x340>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d130      	bne.n	8009084 <UART_SetConfig+0x268>
 8009022:	4b4c      	ldr	r3, [pc, #304]	; (8009154 <UART_SetConfig+0x338>)
 8009024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	2b05      	cmp	r3, #5
 800902c:	d826      	bhi.n	800907c <UART_SetConfig+0x260>
 800902e:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <UART_SetConfig+0x218>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	0800904d 	.word	0x0800904d
 8009038:	08009055 	.word	0x08009055
 800903c:	0800905d 	.word	0x0800905d
 8009040:	08009065 	.word	0x08009065
 8009044:	0800906d 	.word	0x0800906d
 8009048:	08009075 	.word	0x08009075
 800904c:	2300      	movs	r3, #0
 800904e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009052:	e1b6      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009054:	2304      	movs	r3, #4
 8009056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800905a:	e1b2      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800905c:	2308      	movs	r3, #8
 800905e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009062:	e1ae      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009064:	2310      	movs	r3, #16
 8009066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800906a:	e1aa      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800906c:	2320      	movs	r3, #32
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e1a6      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009074:	2340      	movs	r3, #64	; 0x40
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e1a2      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800907c:	2380      	movs	r3, #128	; 0x80
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e19e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a35      	ldr	r2, [pc, #212]	; (8009160 <UART_SetConfig+0x344>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d130      	bne.n	80090f0 <UART_SetConfig+0x2d4>
 800908e:	4b31      	ldr	r3, [pc, #196]	; (8009154 <UART_SetConfig+0x338>)
 8009090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	2b05      	cmp	r3, #5
 8009098:	d826      	bhi.n	80090e8 <UART_SetConfig+0x2cc>
 800909a:	a201      	add	r2, pc, #4	; (adr r2, 80090a0 <UART_SetConfig+0x284>)
 800909c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a0:	080090b9 	.word	0x080090b9
 80090a4:	080090c1 	.word	0x080090c1
 80090a8:	080090c9 	.word	0x080090c9
 80090ac:	080090d1 	.word	0x080090d1
 80090b0:	080090d9 	.word	0x080090d9
 80090b4:	080090e1 	.word	0x080090e1
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e180      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090c0:	2304      	movs	r3, #4
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e17c      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090c8:	2308      	movs	r3, #8
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e178      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090d0:	2310      	movs	r3, #16
 80090d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090d6:	e174      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090d8:	2320      	movs	r3, #32
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e170      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090e0:	2340      	movs	r3, #64	; 0x40
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e16c      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090e8:	2380      	movs	r3, #128	; 0x80
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e168      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	; (8009164 <UART_SetConfig+0x348>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d142      	bne.n	8009180 <UART_SetConfig+0x364>
 80090fa:	4b16      	ldr	r3, [pc, #88]	; (8009154 <UART_SetConfig+0x338>)
 80090fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090fe:	f003 0307 	and.w	r3, r3, #7
 8009102:	2b05      	cmp	r3, #5
 8009104:	d838      	bhi.n	8009178 <UART_SetConfig+0x35c>
 8009106:	a201      	add	r2, pc, #4	; (adr r2, 800910c <UART_SetConfig+0x2f0>)
 8009108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910c:	08009125 	.word	0x08009125
 8009110:	0800912d 	.word	0x0800912d
 8009114:	08009135 	.word	0x08009135
 8009118:	0800913d 	.word	0x0800913d
 800911c:	08009169 	.word	0x08009169
 8009120:	08009171 	.word	0x08009171
 8009124:	2300      	movs	r3, #0
 8009126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800912a:	e14a      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800912c:	2304      	movs	r3, #4
 800912e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009132:	e146      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009134:	2308      	movs	r3, #8
 8009136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800913a:	e142      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800913c:	2310      	movs	r3, #16
 800913e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009142:	e13e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009144:	cfff69f3 	.word	0xcfff69f3
 8009148:	58000c00 	.word	0x58000c00
 800914c:	11fff4ff 	.word	0x11fff4ff
 8009150:	40011000 	.word	0x40011000
 8009154:	58024400 	.word	0x58024400
 8009158:	40004400 	.word	0x40004400
 800915c:	40004800 	.word	0x40004800
 8009160:	40004c00 	.word	0x40004c00
 8009164:	40005000 	.word	0x40005000
 8009168:	2320      	movs	r3, #32
 800916a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916e:	e128      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009170:	2340      	movs	r3, #64	; 0x40
 8009172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009176:	e124      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009178:	2380      	movs	r3, #128	; 0x80
 800917a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917e:	e120      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4acb      	ldr	r2, [pc, #812]	; (80094b4 <UART_SetConfig+0x698>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d176      	bne.n	8009278 <UART_SetConfig+0x45c>
 800918a:	4bcb      	ldr	r3, [pc, #812]	; (80094b8 <UART_SetConfig+0x69c>)
 800918c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800918e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009192:	2b28      	cmp	r3, #40	; 0x28
 8009194:	d86c      	bhi.n	8009270 <UART_SetConfig+0x454>
 8009196:	a201      	add	r2, pc, #4	; (adr r2, 800919c <UART_SetConfig+0x380>)
 8009198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800919c:	08009241 	.word	0x08009241
 80091a0:	08009271 	.word	0x08009271
 80091a4:	08009271 	.word	0x08009271
 80091a8:	08009271 	.word	0x08009271
 80091ac:	08009271 	.word	0x08009271
 80091b0:	08009271 	.word	0x08009271
 80091b4:	08009271 	.word	0x08009271
 80091b8:	08009271 	.word	0x08009271
 80091bc:	08009249 	.word	0x08009249
 80091c0:	08009271 	.word	0x08009271
 80091c4:	08009271 	.word	0x08009271
 80091c8:	08009271 	.word	0x08009271
 80091cc:	08009271 	.word	0x08009271
 80091d0:	08009271 	.word	0x08009271
 80091d4:	08009271 	.word	0x08009271
 80091d8:	08009271 	.word	0x08009271
 80091dc:	08009251 	.word	0x08009251
 80091e0:	08009271 	.word	0x08009271
 80091e4:	08009271 	.word	0x08009271
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009271 	.word	0x08009271
 80091f0:	08009271 	.word	0x08009271
 80091f4:	08009271 	.word	0x08009271
 80091f8:	08009271 	.word	0x08009271
 80091fc:	08009259 	.word	0x08009259
 8009200:	08009271 	.word	0x08009271
 8009204:	08009271 	.word	0x08009271
 8009208:	08009271 	.word	0x08009271
 800920c:	08009271 	.word	0x08009271
 8009210:	08009271 	.word	0x08009271
 8009214:	08009271 	.word	0x08009271
 8009218:	08009271 	.word	0x08009271
 800921c:	08009261 	.word	0x08009261
 8009220:	08009271 	.word	0x08009271
 8009224:	08009271 	.word	0x08009271
 8009228:	08009271 	.word	0x08009271
 800922c:	08009271 	.word	0x08009271
 8009230:	08009271 	.word	0x08009271
 8009234:	08009271 	.word	0x08009271
 8009238:	08009271 	.word	0x08009271
 800923c:	08009269 	.word	0x08009269
 8009240:	2301      	movs	r3, #1
 8009242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009246:	e0bc      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009248:	2304      	movs	r3, #4
 800924a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800924e:	e0b8      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009250:	2308      	movs	r3, #8
 8009252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009256:	e0b4      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009258:	2310      	movs	r3, #16
 800925a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800925e:	e0b0      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009260:	2320      	movs	r3, #32
 8009262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009266:	e0ac      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009268:	2340      	movs	r3, #64	; 0x40
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926e:	e0a8      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009270:	2380      	movs	r3, #128	; 0x80
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009276:	e0a4      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a8f      	ldr	r2, [pc, #572]	; (80094bc <UART_SetConfig+0x6a0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d130      	bne.n	80092e4 <UART_SetConfig+0x4c8>
 8009282:	4b8d      	ldr	r3, [pc, #564]	; (80094b8 <UART_SetConfig+0x69c>)
 8009284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b05      	cmp	r3, #5
 800928c:	d826      	bhi.n	80092dc <UART_SetConfig+0x4c0>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <UART_SetConfig+0x478>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092ad 	.word	0x080092ad
 8009298:	080092b5 	.word	0x080092b5
 800929c:	080092bd 	.word	0x080092bd
 80092a0:	080092c5 	.word	0x080092c5
 80092a4:	080092cd 	.word	0x080092cd
 80092a8:	080092d5 	.word	0x080092d5
 80092ac:	2300      	movs	r3, #0
 80092ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092b2:	e086      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092b4:	2304      	movs	r3, #4
 80092b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ba:	e082      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092bc:	2308      	movs	r3, #8
 80092be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092c2:	e07e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092c4:	2310      	movs	r3, #16
 80092c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ca:	e07a      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092cc:	2320      	movs	r3, #32
 80092ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092d2:	e076      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092d4:	2340      	movs	r3, #64	; 0x40
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e072      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092dc:	2380      	movs	r3, #128	; 0x80
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e06e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a75      	ldr	r2, [pc, #468]	; (80094c0 <UART_SetConfig+0x6a4>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d130      	bne.n	8009350 <UART_SetConfig+0x534>
 80092ee:	4b72      	ldr	r3, [pc, #456]	; (80094b8 <UART_SetConfig+0x69c>)
 80092f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	d826      	bhi.n	8009348 <UART_SetConfig+0x52c>
 80092fa:	a201      	add	r2, pc, #4	; (adr r2, 8009300 <UART_SetConfig+0x4e4>)
 80092fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009300:	08009319 	.word	0x08009319
 8009304:	08009321 	.word	0x08009321
 8009308:	08009329 	.word	0x08009329
 800930c:	08009331 	.word	0x08009331
 8009310:	08009339 	.word	0x08009339
 8009314:	08009341 	.word	0x08009341
 8009318:	2300      	movs	r3, #0
 800931a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800931e:	e050      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009320:	2304      	movs	r3, #4
 8009322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009326:	e04c      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009328:	2308      	movs	r3, #8
 800932a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800932e:	e048      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009330:	2310      	movs	r3, #16
 8009332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009336:	e044      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009338:	2320      	movs	r3, #32
 800933a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800933e:	e040      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009340:	2340      	movs	r3, #64	; 0x40
 8009342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009346:	e03c      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009348:	2380      	movs	r3, #128	; 0x80
 800934a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800934e:	e038      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a5b      	ldr	r2, [pc, #364]	; (80094c4 <UART_SetConfig+0x6a8>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d130      	bne.n	80093bc <UART_SetConfig+0x5a0>
 800935a:	4b57      	ldr	r3, [pc, #348]	; (80094b8 <UART_SetConfig+0x69c>)
 800935c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	2b05      	cmp	r3, #5
 8009364:	d826      	bhi.n	80093b4 <UART_SetConfig+0x598>
 8009366:	a201      	add	r2, pc, #4	; (adr r2, 800936c <UART_SetConfig+0x550>)
 8009368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800936c:	08009385 	.word	0x08009385
 8009370:	0800938d 	.word	0x0800938d
 8009374:	08009395 	.word	0x08009395
 8009378:	0800939d 	.word	0x0800939d
 800937c:	080093a5 	.word	0x080093a5
 8009380:	080093ad 	.word	0x080093ad
 8009384:	2302      	movs	r3, #2
 8009386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800938a:	e01a      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800938c:	2304      	movs	r3, #4
 800938e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009392:	e016      	b.n	80093c2 <UART_SetConfig+0x5a6>
 8009394:	2308      	movs	r3, #8
 8009396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800939a:	e012      	b.n	80093c2 <UART_SetConfig+0x5a6>
 800939c:	2310      	movs	r3, #16
 800939e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093a2:	e00e      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80093a4:	2320      	movs	r3, #32
 80093a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093aa:	e00a      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80093ac:	2340      	movs	r3, #64	; 0x40
 80093ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093b2:	e006      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80093b4:	2380      	movs	r3, #128	; 0x80
 80093b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80093ba:	e002      	b.n	80093c2 <UART_SetConfig+0x5a6>
 80093bc:	2380      	movs	r3, #128	; 0x80
 80093be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a3f      	ldr	r2, [pc, #252]	; (80094c4 <UART_SetConfig+0x6a8>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	f040 80f8 	bne.w	80095be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	dc46      	bgt.n	8009464 <UART_SetConfig+0x648>
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	f2c0 8082 	blt.w	80094e0 <UART_SetConfig+0x6c4>
 80093dc:	3b02      	subs	r3, #2
 80093de:	2b1e      	cmp	r3, #30
 80093e0:	d87e      	bhi.n	80094e0 <UART_SetConfig+0x6c4>
 80093e2:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0x5cc>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	0800946b 	.word	0x0800946b
 80093ec:	080094e1 	.word	0x080094e1
 80093f0:	08009473 	.word	0x08009473
 80093f4:	080094e1 	.word	0x080094e1
 80093f8:	080094e1 	.word	0x080094e1
 80093fc:	080094e1 	.word	0x080094e1
 8009400:	08009483 	.word	0x08009483
 8009404:	080094e1 	.word	0x080094e1
 8009408:	080094e1 	.word	0x080094e1
 800940c:	080094e1 	.word	0x080094e1
 8009410:	080094e1 	.word	0x080094e1
 8009414:	080094e1 	.word	0x080094e1
 8009418:	080094e1 	.word	0x080094e1
 800941c:	080094e1 	.word	0x080094e1
 8009420:	08009493 	.word	0x08009493
 8009424:	080094e1 	.word	0x080094e1
 8009428:	080094e1 	.word	0x080094e1
 800942c:	080094e1 	.word	0x080094e1
 8009430:	080094e1 	.word	0x080094e1
 8009434:	080094e1 	.word	0x080094e1
 8009438:	080094e1 	.word	0x080094e1
 800943c:	080094e1 	.word	0x080094e1
 8009440:	080094e1 	.word	0x080094e1
 8009444:	080094e1 	.word	0x080094e1
 8009448:	080094e1 	.word	0x080094e1
 800944c:	080094e1 	.word	0x080094e1
 8009450:	080094e1 	.word	0x080094e1
 8009454:	080094e1 	.word	0x080094e1
 8009458:	080094e1 	.word	0x080094e1
 800945c:	080094e1 	.word	0x080094e1
 8009460:	080094d3 	.word	0x080094d3
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d037      	beq.n	80094d8 <UART_SetConfig+0x6bc>
 8009468:	e03a      	b.n	80094e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800946a:	f7fb fdc3 	bl	8004ff4 <HAL_RCCEx_GetD3PCLK1Freq>
 800946e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009470:	e03c      	b.n	80094ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009476:	4618      	mov	r0, r3
 8009478:	f7fb fdd2 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800947c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800947e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009480:	e034      	b.n	80094ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009482:	f107 0318 	add.w	r3, r7, #24
 8009486:	4618      	mov	r0, r3
 8009488:	f7fb ff1e 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009490:	e02c      	b.n	80094ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009492:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <UART_SetConfig+0x69c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d016      	beq.n	80094cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800949e:	4b06      	ldr	r3, [pc, #24]	; (80094b8 <UART_SetConfig+0x69c>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	08db      	lsrs	r3, r3, #3
 80094a4:	f003 0303 	and.w	r3, r3, #3
 80094a8:	4a07      	ldr	r2, [pc, #28]	; (80094c8 <UART_SetConfig+0x6ac>)
 80094aa:	fa22 f303 	lsr.w	r3, r2, r3
 80094ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094b0:	e01c      	b.n	80094ec <UART_SetConfig+0x6d0>
 80094b2:	bf00      	nop
 80094b4:	40011400 	.word	0x40011400
 80094b8:	58024400 	.word	0x58024400
 80094bc:	40007800 	.word	0x40007800
 80094c0:	40007c00 	.word	0x40007c00
 80094c4:	58000c00 	.word	0x58000c00
 80094c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80094cc:	4b9d      	ldr	r3, [pc, #628]	; (8009744 <UART_SetConfig+0x928>)
 80094ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d0:	e00c      	b.n	80094ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094d2:	4b9d      	ldr	r3, [pc, #628]	; (8009748 <UART_SetConfig+0x92c>)
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d6:	e009      	b.n	80094ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094de:	e005      	b.n	80094ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80094e0:	2300      	movs	r3, #0
 80094e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80094ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	f000 81de 	beq.w	80098b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	4a94      	ldr	r2, [pc, #592]	; (800974c <UART_SetConfig+0x930>)
 80094fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094fe:	461a      	mov	r2, r3
 8009500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009502:	fbb3 f3f2 	udiv	r3, r3, r2
 8009506:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	4613      	mov	r3, r2
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	4413      	add	r3, r2
 8009512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009514:	429a      	cmp	r2, r3
 8009516:	d305      	bcc.n	8009524 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	685b      	ldr	r3, [r3, #4]
 800951c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800951e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009520:	429a      	cmp	r2, r3
 8009522:	d903      	bls.n	800952c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800952a:	e1c1      	b.n	80098b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800952c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952e:	2200      	movs	r2, #0
 8009530:	60bb      	str	r3, [r7, #8]
 8009532:	60fa      	str	r2, [r7, #12]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009538:	4a84      	ldr	r2, [pc, #528]	; (800974c <UART_SetConfig+0x930>)
 800953a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800953e:	b29b      	uxth	r3, r3
 8009540:	2200      	movs	r2, #0
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	607a      	str	r2, [r7, #4]
 8009546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800954e:	f7f6 ff17 	bl	8000380 <__aeabi_uldivmod>
 8009552:	4602      	mov	r2, r0
 8009554:	460b      	mov	r3, r1
 8009556:	4610      	mov	r0, r2
 8009558:	4619      	mov	r1, r3
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	020b      	lsls	r3, r1, #8
 8009564:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009568:	0202      	lsls	r2, r0, #8
 800956a:	6979      	ldr	r1, [r7, #20]
 800956c:	6849      	ldr	r1, [r1, #4]
 800956e:	0849      	lsrs	r1, r1, #1
 8009570:	2000      	movs	r0, #0
 8009572:	460c      	mov	r4, r1
 8009574:	4605      	mov	r5, r0
 8009576:	eb12 0804 	adds.w	r8, r2, r4
 800957a:	eb43 0905 	adc.w	r9, r3, r5
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	469a      	mov	sl, r3
 8009586:	4693      	mov	fp, r2
 8009588:	4652      	mov	r2, sl
 800958a:	465b      	mov	r3, fp
 800958c:	4640      	mov	r0, r8
 800958e:	4649      	mov	r1, r9
 8009590:	f7f6 fef6 	bl	8000380 <__aeabi_uldivmod>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4613      	mov	r3, r2
 800959a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800959c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80095a2:	d308      	bcc.n	80095b6 <UART_SetConfig+0x79a>
 80095a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095aa:	d204      	bcs.n	80095b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095b2:	60da      	str	r2, [r3, #12]
 80095b4:	e17c      	b.n	80098b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80095bc:	e178      	b.n	80098b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095c6:	f040 80c5 	bne.w	8009754 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80095ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80095ce:	2b20      	cmp	r3, #32
 80095d0:	dc48      	bgt.n	8009664 <UART_SetConfig+0x848>
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	db7b      	blt.n	80096ce <UART_SetConfig+0x8b2>
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	d879      	bhi.n	80096ce <UART_SetConfig+0x8b2>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x7c4>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	0800966b 	.word	0x0800966b
 80095e4:	08009673 	.word	0x08009673
 80095e8:	080096cf 	.word	0x080096cf
 80095ec:	080096cf 	.word	0x080096cf
 80095f0:	0800967b 	.word	0x0800967b
 80095f4:	080096cf 	.word	0x080096cf
 80095f8:	080096cf 	.word	0x080096cf
 80095fc:	080096cf 	.word	0x080096cf
 8009600:	0800968b 	.word	0x0800968b
 8009604:	080096cf 	.word	0x080096cf
 8009608:	080096cf 	.word	0x080096cf
 800960c:	080096cf 	.word	0x080096cf
 8009610:	080096cf 	.word	0x080096cf
 8009614:	080096cf 	.word	0x080096cf
 8009618:	080096cf 	.word	0x080096cf
 800961c:	080096cf 	.word	0x080096cf
 8009620:	0800969b 	.word	0x0800969b
 8009624:	080096cf 	.word	0x080096cf
 8009628:	080096cf 	.word	0x080096cf
 800962c:	080096cf 	.word	0x080096cf
 8009630:	080096cf 	.word	0x080096cf
 8009634:	080096cf 	.word	0x080096cf
 8009638:	080096cf 	.word	0x080096cf
 800963c:	080096cf 	.word	0x080096cf
 8009640:	080096cf 	.word	0x080096cf
 8009644:	080096cf 	.word	0x080096cf
 8009648:	080096cf 	.word	0x080096cf
 800964c:	080096cf 	.word	0x080096cf
 8009650:	080096cf 	.word	0x080096cf
 8009654:	080096cf 	.word	0x080096cf
 8009658:	080096cf 	.word	0x080096cf
 800965c:	080096cf 	.word	0x080096cf
 8009660:	080096c1 	.word	0x080096c1
 8009664:	2b40      	cmp	r3, #64	; 0x40
 8009666:	d02e      	beq.n	80096c6 <UART_SetConfig+0x8aa>
 8009668:	e031      	b.n	80096ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800966a:	f7fa f87f 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 800966e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009670:	e033      	b.n	80096da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009672:	f7fa f891 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8009676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009678:	e02f      	b.n	80096da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800967a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800967e:	4618      	mov	r0, r3
 8009680:	f7fb fcce 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009688:	e027      	b.n	80096da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800968a:	f107 0318 	add.w	r3, r7, #24
 800968e:	4618      	mov	r0, r3
 8009690:	f7fb fe1a 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009698:	e01f      	b.n	80096da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800969a:	4b2d      	ldr	r3, [pc, #180]	; (8009750 <UART_SetConfig+0x934>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d009      	beq.n	80096ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80096a6:	4b2a      	ldr	r3, [pc, #168]	; (8009750 <UART_SetConfig+0x934>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	08db      	lsrs	r3, r3, #3
 80096ac:	f003 0303 	and.w	r3, r3, #3
 80096b0:	4a24      	ldr	r2, [pc, #144]	; (8009744 <UART_SetConfig+0x928>)
 80096b2:	fa22 f303 	lsr.w	r3, r2, r3
 80096b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096b8:	e00f      	b.n	80096da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80096ba:	4b22      	ldr	r3, [pc, #136]	; (8009744 <UART_SetConfig+0x928>)
 80096bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096be:	e00c      	b.n	80096da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096c0:	4b21      	ldr	r3, [pc, #132]	; (8009748 <UART_SetConfig+0x92c>)
 80096c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c4:	e009      	b.n	80096da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096cc:	e005      	b.n	80096da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80096ce:	2300      	movs	r3, #0
 80096d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80096d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80e7 	beq.w	80098b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	4a19      	ldr	r2, [pc, #100]	; (800974c <UART_SetConfig+0x930>)
 80096e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096ec:	461a      	mov	r2, r3
 80096ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f4:	005a      	lsls	r2, r3, #1
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	085b      	lsrs	r3, r3, #1
 80096fc:	441a      	add	r2, r3
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	fbb2 f3f3 	udiv	r3, r2, r3
 8009706:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	2b0f      	cmp	r3, #15
 800970c:	d916      	bls.n	800973c <UART_SetConfig+0x920>
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009714:	d212      	bcs.n	800973c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	b29b      	uxth	r3, r3
 800971a:	f023 030f 	bic.w	r3, r3, #15
 800971e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009722:	085b      	lsrs	r3, r3, #1
 8009724:	b29b      	uxth	r3, r3
 8009726:	f003 0307 	and.w	r3, r3, #7
 800972a:	b29a      	uxth	r2, r3
 800972c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800972e:	4313      	orrs	r3, r2
 8009730:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009738:	60da      	str	r2, [r3, #12]
 800973a:	e0b9      	b.n	80098b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009742:	e0b5      	b.n	80098b0 <UART_SetConfig+0xa94>
 8009744:	03d09000 	.word	0x03d09000
 8009748:	003d0900 	.word	0x003d0900
 800974c:	080108e8 	.word	0x080108e8
 8009750:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009754:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009758:	2b20      	cmp	r3, #32
 800975a:	dc49      	bgt.n	80097f0 <UART_SetConfig+0x9d4>
 800975c:	2b00      	cmp	r3, #0
 800975e:	db7c      	blt.n	800985a <UART_SetConfig+0xa3e>
 8009760:	2b20      	cmp	r3, #32
 8009762:	d87a      	bhi.n	800985a <UART_SetConfig+0xa3e>
 8009764:	a201      	add	r2, pc, #4	; (adr r2, 800976c <UART_SetConfig+0x950>)
 8009766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976a:	bf00      	nop
 800976c:	080097f7 	.word	0x080097f7
 8009770:	080097ff 	.word	0x080097ff
 8009774:	0800985b 	.word	0x0800985b
 8009778:	0800985b 	.word	0x0800985b
 800977c:	08009807 	.word	0x08009807
 8009780:	0800985b 	.word	0x0800985b
 8009784:	0800985b 	.word	0x0800985b
 8009788:	0800985b 	.word	0x0800985b
 800978c:	08009817 	.word	0x08009817
 8009790:	0800985b 	.word	0x0800985b
 8009794:	0800985b 	.word	0x0800985b
 8009798:	0800985b 	.word	0x0800985b
 800979c:	0800985b 	.word	0x0800985b
 80097a0:	0800985b 	.word	0x0800985b
 80097a4:	0800985b 	.word	0x0800985b
 80097a8:	0800985b 	.word	0x0800985b
 80097ac:	08009827 	.word	0x08009827
 80097b0:	0800985b 	.word	0x0800985b
 80097b4:	0800985b 	.word	0x0800985b
 80097b8:	0800985b 	.word	0x0800985b
 80097bc:	0800985b 	.word	0x0800985b
 80097c0:	0800985b 	.word	0x0800985b
 80097c4:	0800985b 	.word	0x0800985b
 80097c8:	0800985b 	.word	0x0800985b
 80097cc:	0800985b 	.word	0x0800985b
 80097d0:	0800985b 	.word	0x0800985b
 80097d4:	0800985b 	.word	0x0800985b
 80097d8:	0800985b 	.word	0x0800985b
 80097dc:	0800985b 	.word	0x0800985b
 80097e0:	0800985b 	.word	0x0800985b
 80097e4:	0800985b 	.word	0x0800985b
 80097e8:	0800985b 	.word	0x0800985b
 80097ec:	0800984d 	.word	0x0800984d
 80097f0:	2b40      	cmp	r3, #64	; 0x40
 80097f2:	d02e      	beq.n	8009852 <UART_SetConfig+0xa36>
 80097f4:	e031      	b.n	800985a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097f6:	f7f9 ffb9 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 80097fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80097fc:	e033      	b.n	8009866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097fe:	f7f9 ffcb 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8009802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009804:	e02f      	b.n	8009866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800980a:	4618      	mov	r0, r3
 800980c:	f7fb fc08 	bl	8005020 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009814:	e027      	b.n	8009866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009816:	f107 0318 	add.w	r3, r7, #24
 800981a:	4618      	mov	r0, r3
 800981c:	f7fb fd54 	bl	80052c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009824:	e01f      	b.n	8009866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009826:	4b2d      	ldr	r3, [pc, #180]	; (80098dc <UART_SetConfig+0xac0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d009      	beq.n	8009846 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009832:	4b2a      	ldr	r3, [pc, #168]	; (80098dc <UART_SetConfig+0xac0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	08db      	lsrs	r3, r3, #3
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	4a28      	ldr	r2, [pc, #160]	; (80098e0 <UART_SetConfig+0xac4>)
 800983e:	fa22 f303 	lsr.w	r3, r2, r3
 8009842:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009844:	e00f      	b.n	8009866 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009846:	4b26      	ldr	r3, [pc, #152]	; (80098e0 <UART_SetConfig+0xac4>)
 8009848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800984a:	e00c      	b.n	8009866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <UART_SetConfig+0xac8>)
 800984e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009850:	e009      	b.n	8009866 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009858:	e005      	b.n	8009866 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009864:	bf00      	nop
    }

    if (pclk != 0U)
 8009866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009868:	2b00      	cmp	r3, #0
 800986a:	d021      	beq.n	80098b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	4a1d      	ldr	r2, [pc, #116]	; (80098e8 <UART_SetConfig+0xacc>)
 8009872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009876:	461a      	mov	r2, r3
 8009878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987a:	fbb3 f2f2 	udiv	r2, r3, r2
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	085b      	lsrs	r3, r3, #1
 8009884:	441a      	add	r2, r3
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	fbb2 f3f3 	udiv	r3, r2, r3
 800988e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009892:	2b0f      	cmp	r3, #15
 8009894:	d909      	bls.n	80098aa <UART_SetConfig+0xa8e>
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800989c:	d205      	bcs.n	80098aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800989e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60da      	str	r2, [r3, #12]
 80098a8:	e002      	b.n	80098b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80098aa:	2301      	movs	r3, #1
 80098ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2200      	movs	r2, #0
 80098c4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2200      	movs	r2, #0
 80098ca:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80098cc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3748      	adds	r7, #72	; 0x48
 80098d4:	46bd      	mov	sp, r7
 80098d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098da:	bf00      	nop
 80098dc:	58024400 	.word	0x58024400
 80098e0:	03d09000 	.word	0x03d09000
 80098e4:	003d0900 	.word	0x003d0900
 80098e8:	080108e8 	.word	0x080108e8

080098ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00a      	beq.n	8009916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00a      	beq.n	8009938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	430a      	orrs	r2, r1
 8009936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800993c:	f003 0304 	and.w	r3, r3, #4
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00a      	beq.n	800995a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	430a      	orrs	r2, r1
 8009958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	f003 0308 	and.w	r3, r3, #8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	430a      	orrs	r2, r1
 800997a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009980:	f003 0310 	and.w	r3, r3, #16
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00a      	beq.n	800999e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a2:	f003 0320 	and.w	r3, r3, #32
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	430a      	orrs	r2, r1
 80099be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01a      	beq.n	8009a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	430a      	orrs	r2, r1
 80099e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099ea:	d10a      	bne.n	8009a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	605a      	str	r2, [r3, #4]
  }
}
 8009a24:	bf00      	nop
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b086      	sub	sp, #24
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a40:	f7f8 fb82 	bl	8002148 <HAL_GetTick>
 8009a44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0308 	and.w	r3, r3, #8
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d10e      	bne.n	8009a72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a58:	9300      	str	r3, [sp, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 f82f 	bl	8009ac6 <UART_WaitOnFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a6e:	2303      	movs	r3, #3
 8009a70:	e025      	b.n	8009abe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f003 0304 	and.w	r3, r3, #4
 8009a7c:	2b04      	cmp	r3, #4
 8009a7e:	d10e      	bne.n	8009a9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f000 f819 	bl	8009ac6 <UART_WaitOnFlagUntilTimeout>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e00f      	b.n	8009abe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b09c      	sub	sp, #112	; 0x70
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	60f8      	str	r0, [r7, #12]
 8009ace:	60b9      	str	r1, [r7, #8]
 8009ad0:	603b      	str	r3, [r7, #0]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ad6:	e0a9      	b.n	8009c2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ad8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	f000 80a5 	beq.w	8009c2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae2:	f7f8 fb31 	bl	8002148 <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d302      	bcc.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d140      	bne.n	8009b7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009b06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b0c:	667b      	str	r3, [r7, #100]	; 0x64
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b18:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009b24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e6      	bne.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	3308      	adds	r3, #8
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b34:	e853 3f00 	ldrex	r3, [r3]
 8009b38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b3c:	f023 0301 	bic.w	r3, r3, #1
 8009b40:	663b      	str	r3, [r7, #96]	; 0x60
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009b4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009b4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b52:	e841 2300 	strex	r3, r2, [r1]
 8009b56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1e5      	bne.n	8009b2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2220      	movs	r2, #32
 8009b62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2220      	movs	r2, #32
 8009b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e069      	b.n	8009c4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d051      	beq.n	8009c2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	69db      	ldr	r3, [r3, #28]
 8009b8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b96:	d149      	bne.n	8009c2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009ba0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e6      	bne.n	8009ba2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	3308      	adds	r3, #8
 8009bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	e853 3f00 	ldrex	r3, [r3]
 8009be2:	613b      	str	r3, [r7, #16]
   return(result);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	f023 0301 	bic.w	r3, r3, #1
 8009bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009bf4:	623a      	str	r2, [r7, #32]
 8009bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf8:	69f9      	ldr	r1, [r7, #28]
 8009bfa:	6a3a      	ldr	r2, [r7, #32]
 8009bfc:	e841 2300 	strex	r3, r2, [r1]
 8009c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1e5      	bne.n	8009bd4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2220      	movs	r2, #32
 8009c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e010      	b.n	8009c4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	69da      	ldr	r2, [r3, #28]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4013      	ands	r3, r2
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	bf0c      	ite	eq
 8009c3c:	2301      	moveq	r3, #1
 8009c3e:	2300      	movne	r3, #0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	461a      	mov	r2, r3
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	f43f af46 	beq.w	8009ad8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3770      	adds	r7, #112	; 0x70
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}

08009c56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c56:	b480      	push	{r7}
 8009c58:	b085      	sub	sp, #20
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d101      	bne.n	8009c6c <HAL_UARTEx_DisableFifoMode+0x16>
 8009c68:	2302      	movs	r3, #2
 8009c6a:	e027      	b.n	8009cbc <HAL_UARTEx_DisableFifoMode+0x66>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2224      	movs	r2, #36	; 0x24
 8009c78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0201 	bic.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2220      	movs	r2, #32
 8009cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cba:	2300      	movs	r3, #0
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d101      	bne.n	8009ce0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009cdc:	2302      	movs	r3, #2
 8009cde:	e02d      	b.n	8009d3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2224      	movs	r2, #36	; 0x24
 8009cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0201 	bic.w	r2, r2, #1
 8009d06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	430a      	orrs	r2, r1
 8009d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f84f 	bl	8009dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2220      	movs	r2, #32
 8009d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d3a:	2300      	movs	r3, #0
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3710      	adds	r7, #16
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e02d      	b.n	8009db8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2224      	movs	r2, #36	; 0x24
 8009d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f022 0201 	bic.w	r2, r2, #1
 8009d82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	430a      	orrs	r2, r1
 8009d96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 f811 	bl	8009dc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	68fa      	ldr	r2, [r7, #12]
 8009da4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2220      	movs	r2, #32
 8009daa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d108      	bne.n	8009de2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009de0:	e031      	b.n	8009e46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009de2:	2310      	movs	r3, #16
 8009de4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009de6:	2310      	movs	r3, #16
 8009de8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	0e5b      	lsrs	r3, r3, #25
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	0f5b      	lsrs	r3, r3, #29
 8009e02:	b2db      	uxtb	r3, r3
 8009e04:	f003 0307 	and.w	r3, r3, #7
 8009e08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	7b3a      	ldrb	r2, [r7, #12]
 8009e0e:	4911      	ldr	r1, [pc, #68]	; (8009e54 <UARTEx_SetNbDataToProcess+0x94>)
 8009e10:	5c8a      	ldrb	r2, [r1, r2]
 8009e12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e16:	7b3a      	ldrb	r2, [r7, #12]
 8009e18:	490f      	ldr	r1, [pc, #60]	; (8009e58 <UARTEx_SetNbDataToProcess+0x98>)
 8009e1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e20:	b29a      	uxth	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	7b7a      	ldrb	r2, [r7, #13]
 8009e2c:	4909      	ldr	r1, [pc, #36]	; (8009e54 <UARTEx_SetNbDataToProcess+0x94>)
 8009e2e:	5c8a      	ldrb	r2, [r1, r2]
 8009e30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e34:	7b7a      	ldrb	r2, [r7, #13]
 8009e36:	4908      	ldr	r1, [pc, #32]	; (8009e58 <UARTEx_SetNbDataToProcess+0x98>)
 8009e38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e3a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e3e:	b29a      	uxth	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e46:	bf00      	nop
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	08010900 	.word	0x08010900
 8009e58:	08010908 	.word	0x08010908

08009e5c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	f107 001c 	add.w	r0, r7, #28
 8009e6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009e72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009e74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009e76:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009e7a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009e7e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009e82:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	4b07      	ldr	r3, [pc, #28]	; (8009eac <SDMMC_Init+0x50>)
 8009e90:	4013      	ands	r3, r2
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	431a      	orrs	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	b004      	add	sp, #16
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	ffc02c00 	.word	0xffc02c00

08009eb0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f043 0203 	orr.w	r2, r3, #3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	370c      	adds	r7, #12
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b083      	sub	sp, #12
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f003 0303 	and.w	r3, r3, #3
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	370c      	adds	r7, #12
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
 8009f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009f50:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009f56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4313      	orrs	r3, r2
 8009f5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <SDMMC_SendCommand+0x50>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr
 8009f7c:	fffee0c0 	.word	0xfffee0c0

08009f80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	691b      	ldr	r3, [r3, #16]
 8009f8c:	b2db      	uxtb	r3, r3
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	370c      	adds	r7, #12
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	3314      	adds	r3, #20
 8009fa8:	461a      	mov	r2, r3
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	4413      	add	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	681a      	ldr	r2, [r3, #0]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009fe6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009fec:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009ff2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ffe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0

}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a026:	2310      	movs	r3, #16
 800a028:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a02a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a02e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a030:	2300      	movs	r3, #0
 800a032:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a038:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f7ff ff73 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a046:	f241 3288 	movw	r2, #5000	; 0x1388
 800a04a:	2110      	movs	r1, #16
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fa5f 	bl	800a510 <SDMMC_GetCmdResp1>
 800a052:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a054:	69fb      	ldr	r3, [r7, #28]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3720      	adds	r7, #32
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a05e:	b580      	push	{r7, lr}
 800a060:	b088      	sub	sp, #32
 800a062:	af00      	add	r7, sp, #0
 800a064:	6078      	str	r0, [r7, #4]
 800a066:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a06c:	2311      	movs	r3, #17
 800a06e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a070:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a07a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a07e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff ff50 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a090:	2111      	movs	r1, #17
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fa3c 	bl	800a510 <SDMMC_GetCmdResp1>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a0b2:	2312      	movs	r3, #18
 800a0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0c6:	f107 0308 	add.w	r3, r7, #8
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f7ff ff2d 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a0d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d6:	2112      	movs	r1, #18
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fa19 	bl	800a510 <SDMMC_GetCmdResp1>
 800a0de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0e0:	69fb      	ldr	r3, [r7, #28]
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3720      	adds	r7, #32
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
 800a0f2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a0f8:	2318      	movs	r3, #24
 800a0fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a10a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a10c:	f107 0308 	add.w	r3, r7, #8
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7ff ff0a 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a118:	f241 3288 	movw	r2, #5000	; 0x1388
 800a11c:	2118      	movs	r1, #24
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f9f6 	bl	800a510 <SDMMC_GetCmdResp1>
 800a124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a126:	69fb      	ldr	r3, [r7, #28]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3720      	adds	r7, #32
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b088      	sub	sp, #32
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a13e:	2319      	movs	r3, #25
 800a140:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a142:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a148:	2300      	movs	r3, #0
 800a14a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a14c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a150:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a152:	f107 0308 	add.w	r3, r7, #8
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff fee7 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a15e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a162:	2119      	movs	r1, #25
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 f9d3 	bl	800a510 <SDMMC_GetCmdResp1>
 800a16a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a16c:	69fb      	ldr	r3, [r7, #28]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3720      	adds	r7, #32
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b088      	sub	sp, #32
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a180:	2300      	movs	r3, #0
 800a182:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a184:	230c      	movs	r3, #12
 800a186:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a18e:	2300      	movs	r3, #0
 800a190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a196:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7ff feb8 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a1bc:	4a0b      	ldr	r2, [pc, #44]	; (800a1ec <SDMMC_CmdStopTransfer+0x74>)
 800a1be:	210c      	movs	r1, #12
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f000 f9a5 	bl	800a510 <SDMMC_GetCmdResp1>
 800a1c6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	68db      	ldr	r3, [r3, #12]
 800a1cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1da:	d101      	bne.n	800a1e0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800a1e0:	69fb      	ldr	r3, [r7, #28]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3720      	adds	r7, #32
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	05f5e100 	.word	0x05f5e100

0800a1f0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a1fe:	2307      	movs	r3, #7
 800a200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a202:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a206:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a208:	2300      	movs	r3, #0
 800a20a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a20c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a210:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a212:	f107 0308 	add.w	r3, r7, #8
 800a216:	4619      	mov	r1, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff fe87 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a21e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a222:	2107      	movs	r1, #7
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f973 	bl	800a510 <SDMMC_GetCmdResp1>
 800a22a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a22c:	69fb      	ldr	r3, [r7, #28]
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3720      	adds	r7, #32
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b088      	sub	sp, #32
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a242:	2300      	movs	r3, #0
 800a244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a246:	2300      	movs	r3, #0
 800a248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a24a:	2300      	movs	r3, #0
 800a24c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a24e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a252:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a254:	f107 0308 	add.w	r3, r7, #8
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fe66 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 fb97 	bl	800a994 <SDMMC_GetCmdError>
 800a266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a268:	69fb      	ldr	r3, [r7, #28]
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3720      	adds	r7, #32
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b088      	sub	sp, #32
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a27a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a27e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a280:	2308      	movs	r3, #8
 800a282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a284:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a28e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff fe46 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 fb29 	bl	800a8f8 <SDMMC_GetCmdResp7>
 800a2a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2a8:	69fb      	ldr	r3, [r7, #28]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3720      	adds	r7, #32
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b088      	sub	sp, #32
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a2c0:	2337      	movs	r3, #55	; 0x37
 800a2c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2d4:	f107 0308 	add.w	r3, r7, #8
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f7ff fe26 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a2e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e4:	2137      	movs	r1, #55	; 0x37
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f912 	bl	800a510 <SDMMC_GetCmdResp1>
 800a2ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ee:	69fb      	ldr	r3, [r7, #28]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3720      	adds	r7, #32
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b088      	sub	sp, #32
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a306:	2329      	movs	r3, #41	; 0x29
 800a308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a30a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a30e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a310:	2300      	movs	r3, #0
 800a312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a314:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a318:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a31a:	f107 0308 	add.w	r3, r7, #8
 800a31e:	4619      	mov	r1, r3
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f7ff fe03 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f000 fa2e 	bl	800a788 <SDMMC_GetCmdResp3>
 800a32c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a32e:	69fb      	ldr	r3, [r7, #28]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3720      	adds	r7, #32
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b088      	sub	sp, #32
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a346:	2306      	movs	r3, #6
 800a348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a34a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a34e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a358:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a35a:	f107 0308 	add.w	r3, r7, #8
 800a35e:	4619      	mov	r1, r3
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff fde3 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a366:	f241 3288 	movw	r2, #5000	; 0x1388
 800a36a:	2106      	movs	r1, #6
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f8cf 	bl	800a510 <SDMMC_GetCmdResp1>
 800a372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a374:	69fb      	ldr	r3, [r7, #28]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3720      	adds	r7, #32
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a37e:	b580      	push	{r7, lr}
 800a380:	b088      	sub	sp, #32
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a386:	2300      	movs	r3, #0
 800a388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a38a:	2333      	movs	r3, #51	; 0x33
 800a38c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a38e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a392:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a394:	2300      	movs	r3, #0
 800a396:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a39c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a39e:	f107 0308 	add.w	r3, r7, #8
 800a3a2:	4619      	mov	r1, r3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f7ff fdc1 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a3aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ae:	2133      	movs	r1, #51	; 0x33
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8ad 	bl	800a510 <SDMMC_GetCmdResp1>
 800a3b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3b8:	69fb      	ldr	r3, [r7, #28]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3720      	adds	r7, #32
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a3c2:	b580      	push	{r7, lr}
 800a3c4:	b088      	sub	sp, #32
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a3ce:	2302      	movs	r3, #2
 800a3d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a3d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a3d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3e2:	f107 0308 	add.w	r3, r7, #8
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7ff fd9f 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f980 	bl	800a6f4 <SDMMC_GetCmdResp2>
 800a3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3f6:	69fb      	ldr	r3, [r7, #28]
}
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	3720      	adds	r7, #32
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a40e:	2309      	movs	r3, #9
 800a410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a412:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a416:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a418:	2300      	movs	r3, #0
 800a41a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a41c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a420:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a422:	f107 0308 	add.w	r3, r7, #8
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff fd7f 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f960 	bl	800a6f4 <SDMMC_GetCmdResp2>
 800a434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a436:	69fb      	ldr	r3, [r7, #28]
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a44a:	2300      	movs	r3, #0
 800a44c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a44e:	2303      	movs	r3, #3
 800a450:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a452:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a456:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a458:	2300      	movs	r3, #0
 800a45a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a45c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a460:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4619      	mov	r1, r3
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7ff fd5f 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	2103      	movs	r1, #3
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f9c8 	bl	800a808 <SDMMC_GetCmdResp6>
 800a478:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a47a:	69fb      	ldr	r3, [r7, #28]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3720      	adds	r7, #32
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b088      	sub	sp, #32
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a492:	230d      	movs	r3, #13
 800a494:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a49a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a49c:	2300      	movs	r3, #0
 800a49e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff fd3d 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4b6:	210d      	movs	r1, #13
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f000 f829 	bl	800a510 <SDMMC_GetCmdResp1>
 800a4be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4c0:	69fb      	ldr	r3, [r7, #28]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b088      	sub	sp, #32
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800a4d6:	230d      	movs	r3, #13
 800a4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4ea:	f107 0308 	add.w	r3, r7, #8
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f7ff fd1b 	bl	8009f2c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800a4f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4fa:	210d      	movs	r1, #13
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f000 f807 	bl	800a510 <SDMMC_GetCmdResp1>
 800a502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a504:	69fb      	ldr	r3, [r7, #28]
}
 800a506:	4618      	mov	r0, r3
 800a508:	3720      	adds	r7, #32
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
	...

0800a510 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b088      	sub	sp, #32
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	460b      	mov	r3, r1
 800a51a:	607a      	str	r2, [r7, #4]
 800a51c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800a51e:	4b70      	ldr	r3, [pc, #448]	; (800a6e0 <SDMMC_GetCmdResp1+0x1d0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4a70      	ldr	r2, [pc, #448]	; (800a6e4 <SDMMC_GetCmdResp1+0x1d4>)
 800a524:	fba2 2303 	umull	r2, r3, r2, r3
 800a528:	0a5a      	lsrs	r2, r3, #9
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	fb02 f303 	mul.w	r3, r2, r3
 800a530:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	1e5a      	subs	r2, r3, #1
 800a536:	61fa      	str	r2, [r7, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d102      	bne.n	800a542 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a53c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a540:	e0c9      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a546:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	4b67      	ldr	r3, [pc, #412]	; (800a6e8 <SDMMC_GetCmdResp1+0x1d8>)
 800a54c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d0ef      	beq.n	800a532 <SDMMC_GetCmdResp1+0x22>
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1ea      	bne.n	800a532 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d004      	beq.n	800a572 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2204      	movs	r2, #4
 800a56c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a56e:	2304      	movs	r3, #4
 800a570:	e0b1      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d004      	beq.n	800a588 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a584:	2301      	movs	r3, #1
 800a586:	e0a6      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	4a58      	ldr	r2, [pc, #352]	; (800a6ec <SDMMC_GetCmdResp1+0x1dc>)
 800a58c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f7ff fcf6 	bl	8009f80 <SDMMC_GetCommandResponse>
 800a594:	4603      	mov	r3, r0
 800a596:	461a      	mov	r2, r3
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d001      	beq.n	800a5a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e099      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a5a2:	2100      	movs	r1, #0
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fcf8 	bl	8009f9a <SDMMC_GetResponse>
 800a5aa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a5ac:	697a      	ldr	r2, [r7, #20]
 800a5ae:	4b50      	ldr	r3, [pc, #320]	; (800a6f0 <SDMMC_GetCmdResp1+0x1e0>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d101      	bne.n	800a5ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	e08d      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	da02      	bge.n	800a5c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5c4:	e087      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5d0:	2340      	movs	r3, #64	; 0x40
 800a5d2:	e080      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5de:	2380      	movs	r3, #128	; 0x80
 800a5e0:	e079      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5f0:	e071      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a600:	e069      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a60c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a610:	e061      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a61c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a620:	e059      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a62c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a630:	e051      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a640:	e049      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a64c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a650:	e041      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a65c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a660:	e039      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a66c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a670:	e031      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a67c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a680:	e029      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a68c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a690:	e021      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a69c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6a0:	e019      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a6ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6b0:	e011      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a6bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a6c0:	e009      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f003 0308 	and.w	r3, r3, #8
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d002      	beq.n	800a6d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a6cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a6d0:	e001      	b.n	800a6d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3720      	adds	r7, #32
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	24000000 	.word	0x24000000
 800a6e4:	10624dd3 	.word	0x10624dd3
 800a6e8:	00200045 	.word	0x00200045
 800a6ec:	002000c5 	.word	0x002000c5
 800a6f0:	fdffe008 	.word	0xfdffe008

0800a6f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b085      	sub	sp, #20
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a6fc:	4b1f      	ldr	r3, [pc, #124]	; (800a77c <SDMMC_GetCmdResp2+0x88>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a1f      	ldr	r2, [pc, #124]	; (800a780 <SDMMC_GetCmdResp2+0x8c>)
 800a702:	fba2 2303 	umull	r2, r3, r2, r3
 800a706:	0a5b      	lsrs	r3, r3, #9
 800a708:	f241 3288 	movw	r2, #5000	; 0x1388
 800a70c:	fb02 f303 	mul.w	r3, r2, r3
 800a710:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	1e5a      	subs	r2, r3, #1
 800a716:	60fa      	str	r2, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d102      	bne.n	800a722 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a720:	e026      	b.n	800a770 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a726:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d0ef      	beq.n	800a712 <SDMMC_GetCmdResp2+0x1e>
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d1ea      	bne.n	800a712 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a740:	f003 0304 	and.w	r3, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	d004      	beq.n	800a752 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2204      	movs	r2, #4
 800a74c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a74e:	2304      	movs	r3, #4
 800a750:	e00e      	b.n	800a770 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a756:	f003 0301 	and.w	r3, r3, #1
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2201      	movs	r2, #1
 800a762:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a764:	2301      	movs	r3, #1
 800a766:	e003      	b.n	800a770 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a06      	ldr	r2, [pc, #24]	; (800a784 <SDMMC_GetCmdResp2+0x90>)
 800a76c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3714      	adds	r7, #20
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	24000000 	.word	0x24000000
 800a780:	10624dd3 	.word	0x10624dd3
 800a784:	002000c5 	.word	0x002000c5

0800a788 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a788:	b480      	push	{r7}
 800a78a:	b085      	sub	sp, #20
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a790:	4b1a      	ldr	r3, [pc, #104]	; (800a7fc <SDMMC_GetCmdResp3+0x74>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a1a      	ldr	r2, [pc, #104]	; (800a800 <SDMMC_GetCmdResp3+0x78>)
 800a796:	fba2 2303 	umull	r2, r3, r2, r3
 800a79a:	0a5b      	lsrs	r3, r3, #9
 800a79c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a0:	fb02 f303 	mul.w	r3, r2, r3
 800a7a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	1e5a      	subs	r2, r3, #1
 800a7aa:	60fa      	str	r2, [r7, #12]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7b4:	e01b      	b.n	800a7ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d0ef      	beq.n	800a7a6 <SDMMC_GetCmdResp3+0x1e>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1ea      	bne.n	800a7a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d4:	f003 0304 	and.w	r3, r3, #4
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d004      	beq.n	800a7e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2204      	movs	r2, #4
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7e2:	2304      	movs	r3, #4
 800a7e4:	e003      	b.n	800a7ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a06      	ldr	r2, [pc, #24]	; (800a804 <SDMMC_GetCmdResp3+0x7c>)
 800a7ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	24000000 	.word	0x24000000
 800a800:	10624dd3 	.word	0x10624dd3
 800a804:	002000c5 	.word	0x002000c5

0800a808 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b088      	sub	sp, #32
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	460b      	mov	r3, r1
 800a812:	607a      	str	r2, [r7, #4]
 800a814:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a816:	4b35      	ldr	r3, [pc, #212]	; (800a8ec <SDMMC_GetCmdResp6+0xe4>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a35      	ldr	r2, [pc, #212]	; (800a8f0 <SDMMC_GetCmdResp6+0xe8>)
 800a81c:	fba2 2303 	umull	r2, r3, r2, r3
 800a820:	0a5b      	lsrs	r3, r3, #9
 800a822:	f241 3288 	movw	r2, #5000	; 0x1388
 800a826:	fb02 f303 	mul.w	r3, r2, r3
 800a82a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	1e5a      	subs	r2, r3, #1
 800a830:	61fa      	str	r2, [r7, #28]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d102      	bne.n	800a83c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a836:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a83a:	e052      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a840:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0ef      	beq.n	800a82c <SDMMC_GetCmdResp6+0x24>
 800a84c:	69bb      	ldr	r3, [r7, #24]
 800a84e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1ea      	bne.n	800a82c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a85a:	f003 0304 	and.w	r3, r3, #4
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d004      	beq.n	800a86c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2204      	movs	r2, #4
 800a866:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a868:	2304      	movs	r3, #4
 800a86a:	e03a      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a870:	f003 0301 	and.w	r3, r3, #1
 800a874:	2b00      	cmp	r3, #0
 800a876:	d004      	beq.n	800a882 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2201      	movs	r2, #1
 800a87c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a87e:	2301      	movs	r3, #1
 800a880:	e02f      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a882:	68f8      	ldr	r0, [r7, #12]
 800a884:	f7ff fb7c 	bl	8009f80 <SDMMC_GetCommandResponse>
 800a888:	4603      	mov	r3, r0
 800a88a:	461a      	mov	r2, r3
 800a88c:	7afb      	ldrb	r3, [r7, #11]
 800a88e:	4293      	cmp	r3, r2
 800a890:	d001      	beq.n	800a896 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a892:	2301      	movs	r3, #1
 800a894:	e025      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4a16      	ldr	r2, [pc, #88]	; (800a8f4 <SDMMC_GetCmdResp6+0xec>)
 800a89a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a89c:	2100      	movs	r1, #0
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f7ff fb7b 	bl	8009f9a <SDMMC_GetResponse>
 800a8a4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d106      	bne.n	800a8be <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	0c1b      	lsrs	r3, r3, #16
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	e011      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8cc:	e009      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8dc:	e001      	b.n	800a8e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	3720      	adds	r7, #32
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	24000000 	.word	0x24000000
 800a8f0:	10624dd3 	.word	0x10624dd3
 800a8f4:	002000c5 	.word	0x002000c5

0800a8f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b085      	sub	sp, #20
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a900:	4b22      	ldr	r3, [pc, #136]	; (800a98c <SDMMC_GetCmdResp7+0x94>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a22      	ldr	r2, [pc, #136]	; (800a990 <SDMMC_GetCmdResp7+0x98>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	0a5b      	lsrs	r3, r3, #9
 800a90c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a910:	fb02 f303 	mul.w	r3, r2, r3
 800a914:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	1e5a      	subs	r2, r3, #1
 800a91a:	60fa      	str	r2, [r7, #12]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a924:	e02c      	b.n	800a980 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0ef      	beq.n	800a916 <SDMMC_GetCmdResp7+0x1e>
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d1ea      	bne.n	800a916 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a944:	f003 0304 	and.w	r3, r3, #4
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d004      	beq.n	800a956 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2204      	movs	r2, #4
 800a950:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a952:	2304      	movs	r3, #4
 800a954:	e014      	b.n	800a980 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a968:	2301      	movs	r3, #1
 800a96a:	e009      	b.n	800a980 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2240      	movs	r2, #64	; 0x40
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a97e:	2300      	movs	r3, #0

}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	24000000 	.word	0x24000000
 800a990:	10624dd3 	.word	0x10624dd3

0800a994 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a99c:	4b11      	ldr	r3, [pc, #68]	; (800a9e4 <SDMMC_GetCmdError+0x50>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a11      	ldr	r2, [pc, #68]	; (800a9e8 <SDMMC_GetCmdError+0x54>)
 800a9a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a6:	0a5b      	lsrs	r3, r3, #9
 800a9a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ac:	fb02 f303 	mul.w	r3, r2, r3
 800a9b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	1e5a      	subs	r2, r3, #1
 800a9b6:	60fa      	str	r2, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d102      	bne.n	800a9c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9c0:	e009      	b.n	800a9d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0f1      	beq.n	800a9b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	4a06      	ldr	r2, [pc, #24]	; (800a9ec <SDMMC_GetCmdError+0x58>)
 800a9d2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
 800a9e2:	bf00      	nop
 800a9e4:	24000000 	.word	0x24000000
 800a9e8:	10624dd3 	.word	0x10624dd3
 800a9ec:	002000c5 	.word	0x002000c5

0800a9f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a9f4:	4904      	ldr	r1, [pc, #16]	; (800aa08 <MX_FATFS_Init+0x18>)
 800a9f6:	4805      	ldr	r0, [pc, #20]	; (800aa0c <MX_FATFS_Init+0x1c>)
 800a9f8:	f004 fc04 	bl	800f204 <FATFS_LinkDriver>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	461a      	mov	r2, r3
 800aa00:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <MX_FATFS_Init+0x20>)
 800aa02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa04:	bf00      	nop
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	240002a8 	.word	0x240002a8
 800aa0c:	08010910 	.word	0x08010910
 800aa10:	240002a4 	.word	0x240002a4

0800aa14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa14:	b480      	push	{r7}
 800aa16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b082      	sub	sp, #8
 800aa28:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800aa2e:	f000 f89b 	bl	800ab68 <BSP_SD_IsDetected>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d001      	beq.n	800aa3c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800aa38:	2302      	movs	r3, #2
 800aa3a:	e012      	b.n	800aa62 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800aa3c:	480b      	ldr	r0, [pc, #44]	; (800aa6c <BSP_SD_Init+0x48>)
 800aa3e:	f7fb f84d 	bl	8005adc <HAL_SD_Init>
 800aa42:	4603      	mov	r3, r0
 800aa44:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800aa46:	79fb      	ldrb	r3, [r7, #7]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d109      	bne.n	800aa60 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800aa4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800aa50:	4806      	ldr	r0, [pc, #24]	; (800aa6c <BSP_SD_Init+0x48>)
 800aa52:	f7fc f8c5 	bl	8006be0 <HAL_SD_ConfigWideBusOperation>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800aa60:	79fb      	ldrb	r3, [r7, #7]
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	240000bc 	.word	0x240000bc

0800aa70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b088      	sub	sp, #32
 800aa74:	af02      	add	r7, sp, #8
 800aa76:	60f8      	str	r0, [r7, #12]
 800aa78:	60b9      	str	r1, [r7, #8]
 800aa7a:	607a      	str	r2, [r7, #4]
 800aa7c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	9300      	str	r3, [sp, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	4806      	ldr	r0, [pc, #24]	; (800aaa8 <BSP_SD_ReadBlocks+0x38>)
 800aa8e:	f7fb f93f 	bl	8005d10 <HAL_SD_ReadBlocks>
 800aa92:	4603      	mov	r3, r0
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d001      	beq.n	800aa9c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aa9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3718      	adds	r7, #24
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	240000bc 	.word	0x240000bc

0800aaac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	9300      	str	r3, [sp, #0]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	68f9      	ldr	r1, [r7, #12]
 800aac8:	4806      	ldr	r0, [pc, #24]	; (800aae4 <BSP_SD_WriteBlocks+0x38>)
 800aaca:	f7fb faab 	bl	8006024 <HAL_SD_WriteBlocks>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800aad4:	2301      	movs	r3, #1
 800aad6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800aad8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	240000bc 	.word	0x240000bc

0800aae8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aaec:	4805      	ldr	r0, [pc, #20]	; (800ab04 <BSP_SD_GetCardState+0x1c>)
 800aaee:	f7fc f989 	bl	8006e04 <HAL_SD_GetCardState>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	2b04      	cmp	r3, #4
 800aaf6:	bf14      	ite	ne
 800aaf8:	2301      	movne	r3, #1
 800aafa:	2300      	moveq	r3, #0
 800aafc:	b2db      	uxtb	r3, r3
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	240000bc 	.word	0x240000bc

0800ab08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ab10:	6879      	ldr	r1, [r7, #4]
 800ab12:	4803      	ldr	r0, [pc, #12]	; (800ab20 <BSP_SD_GetCardInfo+0x18>)
 800ab14:	f7fc f838 	bl	8006b88 <HAL_SD_GetCardInfo>
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	240000bc 	.word	0x240000bc

0800ab24 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ab2c:	f000 f80e 	bl	800ab4c <BSP_SD_WriteCpltCallback>
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ab40:	f000 f80b 	bl	800ab5a <BSP_SD_ReadCpltCallback>
}
 800ab44:	bf00      	nop
 800ab46:	3708      	adds	r7, #8
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0

}
 800ab50:	bf00      	nop
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800ab5a:	b480      	push	{r7}
 800ab5c:	af00      	add	r7, sp, #0

}
 800ab5e:	bf00      	nop
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800ab72:	79fb      	ldrb	r3, [r7, #7]
 800ab74:	b2db      	uxtb	r3, r3
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
	...

0800ab84 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b082      	sub	sp, #8
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ab8e:	4b0b      	ldr	r3, [pc, #44]	; (800abbc <SD_CheckStatus+0x38>)
 800ab90:	2201      	movs	r2, #1
 800ab92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ab94:	f7ff ffa8 	bl	800aae8 <BSP_SD_GetCardState>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d107      	bne.n	800abae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ab9e:	4b07      	ldr	r3, [pc, #28]	; (800abbc <SD_CheckStatus+0x38>)
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	f023 0301 	bic.w	r3, r3, #1
 800aba8:	b2da      	uxtb	r2, r3
 800abaa:	4b04      	ldr	r3, [pc, #16]	; (800abbc <SD_CheckStatus+0x38>)
 800abac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800abae:	4b03      	ldr	r3, [pc, #12]	; (800abbc <SD_CheckStatus+0x38>)
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	b2db      	uxtb	r3, r3
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3708      	adds	r7, #8
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}
 800abbc:	2400000d 	.word	0x2400000d

0800abc0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800abca:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <SD_initialize+0x38>)
 800abcc:	2201      	movs	r2, #1
 800abce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800abd0:	f7ff ff28 	bl	800aa24 <BSP_SD_Init>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d107      	bne.n	800abea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800abda:	79fb      	ldrb	r3, [r7, #7]
 800abdc:	4618      	mov	r0, r3
 800abde:	f7ff ffd1 	bl	800ab84 <SD_CheckStatus>
 800abe2:	4603      	mov	r3, r0
 800abe4:	461a      	mov	r2, r3
 800abe6:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <SD_initialize+0x38>)
 800abe8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800abea:	4b03      	ldr	r3, [pc, #12]	; (800abf8 <SD_initialize+0x38>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	b2db      	uxtb	r3, r3
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}
 800abf8:	2400000d 	.word	0x2400000d

0800abfc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	4603      	mov	r3, r0
 800ac04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ac06:	79fb      	ldrb	r3, [r7, #7]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff ffbb 	bl	800ab84 <SD_CheckStatus>
 800ac0e:	4603      	mov	r3, r0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b086      	sub	sp, #24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	4603      	mov	r3, r0
 800ac26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	6879      	ldr	r1, [r7, #4]
 800ac34:	68b8      	ldr	r0, [r7, #8]
 800ac36:	f7ff ff1b 	bl	800aa70 <BSP_SD_ReadBlocks>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d107      	bne.n	800ac50 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ac40:	bf00      	nop
 800ac42:	f7ff ff51 	bl	800aae8 <BSP_SD_GetCardState>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1fa      	bne.n	800ac42 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ac50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3718      	adds	r7, #24
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	4603      	mov	r3, r0
 800ac68:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ac6e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac72:	683a      	ldr	r2, [r7, #0]
 800ac74:	6879      	ldr	r1, [r7, #4]
 800ac76:	68b8      	ldr	r0, [r7, #8]
 800ac78:	f7ff ff18 	bl	800aaac <BSP_SD_WriteBlocks>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d107      	bne.n	800ac92 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ac82:	bf00      	nop
 800ac84:	f7ff ff30 	bl	800aae8 <BSP_SD_GetCardState>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1fa      	bne.n	800ac84 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ac92:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3718      	adds	r7, #24
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08c      	sub	sp, #48	; 0x30
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	603a      	str	r2, [r7, #0]
 800aca6:	71fb      	strb	r3, [r7, #7]
 800aca8:	460b      	mov	r3, r1
 800acaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800acb2:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <SD_ioctl+0xac>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 0301 	and.w	r3, r3, #1
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <SD_ioctl+0x28>
 800acc0:	2303      	movs	r3, #3
 800acc2:	e03c      	b.n	800ad3e <SD_ioctl+0xa2>

  switch (cmd)
 800acc4:	79bb      	ldrb	r3, [r7, #6]
 800acc6:	2b03      	cmp	r3, #3
 800acc8:	d834      	bhi.n	800ad34 <SD_ioctl+0x98>
 800acca:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <SD_ioctl+0x34>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800ace1 	.word	0x0800ace1
 800acd4:	0800ace9 	.word	0x0800ace9
 800acd8:	0800ad01 	.word	0x0800ad01
 800acdc:	0800ad1b 	.word	0x0800ad1b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ace6:	e028      	b.n	800ad3a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ace8:	f107 0308 	add.w	r3, r7, #8
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff ff0b 	bl	800ab08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800acf2:	6a3a      	ldr	r2, [r7, #32]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800acfe:	e01c      	b.n	800ad3a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ad00:	f107 0308 	add.w	r3, r7, #8
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff feff 	bl	800ab08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad18:	e00f      	b.n	800ad3a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ad1a:	f107 0308 	add.w	r3, r7, #8
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff fef2 	bl	800ab08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad26:	0a5a      	lsrs	r2, r3, #9
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ad32:	e002      	b.n	800ad3a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ad34:	2304      	movs	r3, #4
 800ad36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ad3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3730      	adds	r7, #48	; 0x30
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	2400000d 	.word	0x2400000d

0800ad4c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	4603      	mov	r3, r0
 800ad54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ad56:	79fb      	ldrb	r3, [r7, #7]
 800ad58:	4a08      	ldr	r2, [pc, #32]	; (800ad7c <disk_status+0x30>)
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	685b      	ldr	r3, [r3, #4]
 800ad62:	79fa      	ldrb	r2, [r7, #7]
 800ad64:	4905      	ldr	r1, [pc, #20]	; (800ad7c <disk_status+0x30>)
 800ad66:	440a      	add	r2, r1
 800ad68:	7a12      	ldrb	r2, [r2, #8]
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	4798      	blx	r3
 800ad6e:	4603      	mov	r3, r0
 800ad70:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ad72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	240027c8 	.word	0x240027c8

0800ad80 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	4a0d      	ldr	r2, [pc, #52]	; (800adc8 <disk_initialize+0x48>)
 800ad92:	5cd3      	ldrb	r3, [r2, r3]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d111      	bne.n	800adbc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ad98:	79fb      	ldrb	r3, [r7, #7]
 800ad9a:	4a0b      	ldr	r2, [pc, #44]	; (800adc8 <disk_initialize+0x48>)
 800ad9c:	2101      	movs	r1, #1
 800ad9e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ada0:	79fb      	ldrb	r3, [r7, #7]
 800ada2:	4a09      	ldr	r2, [pc, #36]	; (800adc8 <disk_initialize+0x48>)
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	79fa      	ldrb	r2, [r7, #7]
 800adae:	4906      	ldr	r1, [pc, #24]	; (800adc8 <disk_initialize+0x48>)
 800adb0:	440a      	add	r2, r1
 800adb2:	7a12      	ldrb	r2, [r2, #8]
 800adb4:	4610      	mov	r0, r2
 800adb6:	4798      	blx	r3
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
 800adc6:	bf00      	nop
 800adc8:	240027c8 	.word	0x240027c8

0800adcc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800adcc:	b590      	push	{r4, r7, lr}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	60b9      	str	r1, [r7, #8]
 800add4:	607a      	str	r2, [r7, #4]
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	4a0a      	ldr	r2, [pc, #40]	; (800ae08 <disk_read+0x3c>)
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	4413      	add	r3, r2
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	689c      	ldr	r4, [r3, #8]
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	4a07      	ldr	r2, [pc, #28]	; (800ae08 <disk_read+0x3c>)
 800adec:	4413      	add	r3, r2
 800adee:	7a18      	ldrb	r0, [r3, #8]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	68b9      	ldr	r1, [r7, #8]
 800adf6:	47a0      	blx	r4
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]
  return res;
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd90      	pop	{r4, r7, pc}
 800ae06:	bf00      	nop
 800ae08:	240027c8 	.word	0x240027c8

0800ae0c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ae0c:	b590      	push	{r4, r7, lr}
 800ae0e:	b087      	sub	sp, #28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	607a      	str	r2, [r7, #4]
 800ae16:	603b      	str	r3, [r7, #0]
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	4a0a      	ldr	r2, [pc, #40]	; (800ae48 <disk_write+0x3c>)
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	68dc      	ldr	r4, [r3, #12]
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	4a07      	ldr	r2, [pc, #28]	; (800ae48 <disk_write+0x3c>)
 800ae2c:	4413      	add	r3, r2
 800ae2e:	7a18      	ldrb	r0, [r3, #8]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	68b9      	ldr	r1, [r7, #8]
 800ae36:	47a0      	blx	r4
 800ae38:	4603      	mov	r3, r0
 800ae3a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ae3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd90      	pop	{r4, r7, pc}
 800ae46:	bf00      	nop
 800ae48:	240027c8 	.word	0x240027c8

0800ae4c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	4603      	mov	r3, r0
 800ae54:	603a      	str	r2, [r7, #0]
 800ae56:	71fb      	strb	r3, [r7, #7]
 800ae58:	460b      	mov	r3, r1
 800ae5a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ae5c:	79fb      	ldrb	r3, [r7, #7]
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <disk_ioctl+0x38>)
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	4413      	add	r3, r2
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	691b      	ldr	r3, [r3, #16]
 800ae68:	79fa      	ldrb	r2, [r7, #7]
 800ae6a:	4906      	ldr	r1, [pc, #24]	; (800ae84 <disk_ioctl+0x38>)
 800ae6c:	440a      	add	r2, r1
 800ae6e:	7a10      	ldrb	r0, [r2, #8]
 800ae70:	79b9      	ldrb	r1, [r7, #6]
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	4798      	blx	r3
 800ae76:	4603      	mov	r3, r0
 800ae78:	73fb      	strb	r3, [r7, #15]
  return res;
 800ae7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	240027c8 	.word	0x240027c8

0800ae88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	3301      	adds	r3, #1
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ae98:	89fb      	ldrh	r3, [r7, #14]
 800ae9a:	021b      	lsls	r3, r3, #8
 800ae9c:	b21a      	sxth	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	b21b      	sxth	r3, r3
 800aea4:	4313      	orrs	r3, r2
 800aea6:	b21b      	sxth	r3, r3
 800aea8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800aeaa:	89fb      	ldrh	r3, [r7, #14]
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3714      	adds	r7, #20
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3303      	adds	r3, #3
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	021b      	lsls	r3, r3, #8
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	3202      	adds	r2, #2
 800aed0:	7812      	ldrb	r2, [r2, #0]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	021b      	lsls	r3, r3, #8
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	3201      	adds	r2, #1
 800aede:	7812      	ldrb	r2, [r2, #0]
 800aee0:	4313      	orrs	r3, r2
 800aee2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	021b      	lsls	r3, r3, #8
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	7812      	ldrb	r2, [r2, #0]
 800aeec:	4313      	orrs	r3, r2
 800aeee:	60fb      	str	r3, [r7, #12]
	return rv;
 800aef0:	68fb      	ldr	r3, [r7, #12]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800aefe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800af02:	b09d      	sub	sp, #116	; 0x74
 800af04:	af00      	add	r7, sp, #0
 800af06:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800af08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af0a:	3307      	adds	r3, #7
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	2200      	movs	r2, #0
 800af12:	469a      	mov	sl, r3
 800af14:	4693      	mov	fp, r2
 800af16:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800af1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800af1e:	f04f 0000 	mov.w	r0, #0
 800af22:	f04f 0100 	mov.w	r1, #0
 800af26:	0219      	lsls	r1, r3, #8
 800af28:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800af2c:	0210      	lsls	r0, r2, #8
 800af2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af30:	3306      	adds	r3, #6
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2200      	movs	r2, #0
 800af38:	461c      	mov	r4, r3
 800af3a:	4615      	mov	r5, r2
 800af3c:	ea40 0804 	orr.w	r8, r0, r4
 800af40:	ea41 0905 	orr.w	r9, r1, r5
 800af44:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800af48:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800af4c:	f04f 0000 	mov.w	r0, #0
 800af50:	f04f 0100 	mov.w	r1, #0
 800af54:	0219      	lsls	r1, r3, #8
 800af56:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800af5a:	0210      	lsls	r0, r2, #8
 800af5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af5e:	3305      	adds	r3, #5
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2200      	movs	r2, #0
 800af66:	65bb      	str	r3, [r7, #88]	; 0x58
 800af68:	65fa      	str	r2, [r7, #92]	; 0x5c
 800af6a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800af6e:	4623      	mov	r3, r4
 800af70:	4303      	orrs	r3, r0
 800af72:	62bb      	str	r3, [r7, #40]	; 0x28
 800af74:	462b      	mov	r3, r5
 800af76:	430b      	orrs	r3, r1
 800af78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af7a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800af7e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800af82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800af86:	f04f 0000 	mov.w	r0, #0
 800af8a:	f04f 0100 	mov.w	r1, #0
 800af8e:	0219      	lsls	r1, r3, #8
 800af90:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800af94:	0210      	lsls	r0, r2, #8
 800af96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af98:	3304      	adds	r3, #4
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2200      	movs	r2, #0
 800afa0:	653b      	str	r3, [r7, #80]	; 0x50
 800afa2:	657a      	str	r2, [r7, #84]	; 0x54
 800afa4:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800afa8:	4623      	mov	r3, r4
 800afaa:	4303      	orrs	r3, r0
 800afac:	623b      	str	r3, [r7, #32]
 800afae:	462b      	mov	r3, r5
 800afb0:	430b      	orrs	r3, r1
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
 800afb4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800afb8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800afbc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800afc0:	f04f 0000 	mov.w	r0, #0
 800afc4:	f04f 0100 	mov.w	r1, #0
 800afc8:	0219      	lsls	r1, r3, #8
 800afca:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800afce:	0210      	lsls	r0, r2, #8
 800afd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afd2:	3303      	adds	r3, #3
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	2200      	movs	r2, #0
 800afda:	64bb      	str	r3, [r7, #72]	; 0x48
 800afdc:	64fa      	str	r2, [r7, #76]	; 0x4c
 800afde:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800afe2:	4623      	mov	r3, r4
 800afe4:	4303      	orrs	r3, r0
 800afe6:	61bb      	str	r3, [r7, #24]
 800afe8:	462b      	mov	r3, r5
 800afea:	430b      	orrs	r3, r1
 800afec:	61fb      	str	r3, [r7, #28]
 800afee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800aff2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800aff6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800affa:	f04f 0000 	mov.w	r0, #0
 800affe:	f04f 0100 	mov.w	r1, #0
 800b002:	0219      	lsls	r1, r3, #8
 800b004:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800b008:	0210      	lsls	r0, r2, #8
 800b00a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b00c:	3302      	adds	r3, #2
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	b2db      	uxtb	r3, r3
 800b012:	2200      	movs	r2, #0
 800b014:	643b      	str	r3, [r7, #64]	; 0x40
 800b016:	647a      	str	r2, [r7, #68]	; 0x44
 800b018:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800b01c:	4623      	mov	r3, r4
 800b01e:	4303      	orrs	r3, r0
 800b020:	613b      	str	r3, [r7, #16]
 800b022:	462b      	mov	r3, r5
 800b024:	430b      	orrs	r3, r1
 800b026:	617b      	str	r3, [r7, #20]
 800b028:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800b02c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800b030:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b034:	f04f 0200 	mov.w	r2, #0
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	020b      	lsls	r3, r1, #8
 800b03e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b042:	0202      	lsls	r2, r0, #8
 800b044:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b046:	3101      	adds	r1, #1
 800b048:	7809      	ldrb	r1, [r1, #0]
 800b04a:	b2c9      	uxtb	r1, r1
 800b04c:	2000      	movs	r0, #0
 800b04e:	63b9      	str	r1, [r7, #56]	; 0x38
 800b050:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b052:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800b056:	4621      	mov	r1, r4
 800b058:	4311      	orrs	r1, r2
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	4629      	mov	r1, r5
 800b05e:	4319      	orrs	r1, r3
 800b060:	60f9      	str	r1, [r7, #12]
 800b062:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800b066:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800b06a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b06e:	f04f 0200 	mov.w	r2, #0
 800b072:	f04f 0300 	mov.w	r3, #0
 800b076:	020b      	lsls	r3, r1, #8
 800b078:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b07c:	0202      	lsls	r2, r0, #8
 800b07e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b080:	7809      	ldrb	r1, [r1, #0]
 800b082:	b2c9      	uxtb	r1, r1
 800b084:	2000      	movs	r0, #0
 800b086:	6339      	str	r1, [r7, #48]	; 0x30
 800b088:	6378      	str	r0, [r7, #52]	; 0x34
 800b08a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b08e:	4621      	mov	r1, r4
 800b090:	4311      	orrs	r1, r2
 800b092:	6039      	str	r1, [r7, #0]
 800b094:	4629      	mov	r1, r5
 800b096:	4319      	orrs	r1, r3
 800b098:	6079      	str	r1, [r7, #4]
 800b09a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b09e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800b0a2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	4619      	mov	r1, r3
 800b0aa:	3774      	adds	r7, #116	; 0x74
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800b0b2:	4770      	bx	lr

0800b0b4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	607a      	str	r2, [r7, #4]
 800b0c6:	887a      	ldrh	r2, [r7, #2]
 800b0c8:	b2d2      	uxtb	r2, r2
 800b0ca:	701a      	strb	r2, [r3, #0]
 800b0cc:	887b      	ldrh	r3, [r7, #2]
 800b0ce:	0a1b      	lsrs	r3, r3, #8
 800b0d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	607a      	str	r2, [r7, #4]
 800b0d8:	887a      	ldrh	r2, [r7, #2]
 800b0da:	b2d2      	uxtb	r2, r2
 800b0dc:	701a      	strb	r2, [r3, #0]
}
 800b0de:	bf00      	nop
 800b0e0:	370c      	adds	r7, #12
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b0ea:	b480      	push	{r7}
 800b0ec:	b083      	sub	sp, #12
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	1c5a      	adds	r2, r3, #1
 800b0f8:	607a      	str	r2, [r7, #4]
 800b0fa:	683a      	ldr	r2, [r7, #0]
 800b0fc:	b2d2      	uxtb	r2, r2
 800b0fe:	701a      	strb	r2, [r3, #0]
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	0a1b      	lsrs	r3, r3, #8
 800b104:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	1c5a      	adds	r2, r3, #1
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	683a      	ldr	r2, [r7, #0]
 800b10e:	b2d2      	uxtb	r2, r2
 800b110:	701a      	strb	r2, [r3, #0]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	0a1b      	lsrs	r3, r3, #8
 800b116:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	607a      	str	r2, [r7, #4]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	b2d2      	uxtb	r2, r2
 800b122:	701a      	strb	r2, [r3, #0]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	0a1b      	lsrs	r3, r3, #8
 800b128:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	1c5a      	adds	r2, r3, #1
 800b12e:	607a      	str	r2, [r7, #4]
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	b2d2      	uxtb	r2, r2
 800b134:	701a      	strb	r2, [r3, #0]
}
 800b136:	bf00      	nop
 800b138:	370c      	adds	r7, #12
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr

0800b142 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800b142:	b480      	push	{r7}
 800b144:	b085      	sub	sp, #20
 800b146:	af00      	add	r7, sp, #0
 800b148:	60f8      	str	r0, [r7, #12]
 800b14a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	60fa      	str	r2, [r7, #12]
 800b154:	783a      	ldrb	r2, [r7, #0]
 800b156:	701a      	strb	r2, [r3, #0]
 800b158:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b15c:	f04f 0200 	mov.w	r2, #0
 800b160:	f04f 0300 	mov.w	r3, #0
 800b164:	0a02      	lsrs	r2, r0, #8
 800b166:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b16a:	0a0b      	lsrs	r3, r1, #8
 800b16c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	1c5a      	adds	r2, r3, #1
 800b174:	60fa      	str	r2, [r7, #12]
 800b176:	783a      	ldrb	r2, [r7, #0]
 800b178:	701a      	strb	r2, [r3, #0]
 800b17a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b17e:	f04f 0200 	mov.w	r2, #0
 800b182:	f04f 0300 	mov.w	r3, #0
 800b186:	0a02      	lsrs	r2, r0, #8
 800b188:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b18c:	0a0b      	lsrs	r3, r1, #8
 800b18e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	1c5a      	adds	r2, r3, #1
 800b196:	60fa      	str	r2, [r7, #12]
 800b198:	783a      	ldrb	r2, [r7, #0]
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1a0:	f04f 0200 	mov.w	r2, #0
 800b1a4:	f04f 0300 	mov.w	r3, #0
 800b1a8:	0a02      	lsrs	r2, r0, #8
 800b1aa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b1ae:	0a0b      	lsrs	r3, r1, #8
 800b1b0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	1c5a      	adds	r2, r3, #1
 800b1b8:	60fa      	str	r2, [r7, #12]
 800b1ba:	783a      	ldrb	r2, [r7, #0]
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1c2:	f04f 0200 	mov.w	r2, #0
 800b1c6:	f04f 0300 	mov.w	r3, #0
 800b1ca:	0a02      	lsrs	r2, r0, #8
 800b1cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b1d0:	0a0b      	lsrs	r3, r1, #8
 800b1d2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	60fa      	str	r2, [r7, #12]
 800b1dc:	783a      	ldrb	r2, [r7, #0]
 800b1de:	701a      	strb	r2, [r3, #0]
 800b1e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b1e4:	f04f 0200 	mov.w	r2, #0
 800b1e8:	f04f 0300 	mov.w	r3, #0
 800b1ec:	0a02      	lsrs	r2, r0, #8
 800b1ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b1f2:	0a0b      	lsrs	r3, r1, #8
 800b1f4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	1c5a      	adds	r2, r3, #1
 800b1fc:	60fa      	str	r2, [r7, #12]
 800b1fe:	783a      	ldrb	r2, [r7, #0]
 800b200:	701a      	strb	r2, [r3, #0]
 800b202:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b206:	f04f 0200 	mov.w	r2, #0
 800b20a:	f04f 0300 	mov.w	r3, #0
 800b20e:	0a02      	lsrs	r2, r0, #8
 800b210:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b214:	0a0b      	lsrs	r3, r1, #8
 800b216:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	1c5a      	adds	r2, r3, #1
 800b21e:	60fa      	str	r2, [r7, #12]
 800b220:	783a      	ldrb	r2, [r7, #0]
 800b222:	701a      	strb	r2, [r3, #0]
 800b224:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b228:	f04f 0200 	mov.w	r2, #0
 800b22c:	f04f 0300 	mov.w	r3, #0
 800b230:	0a02      	lsrs	r2, r0, #8
 800b232:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b236:	0a0b      	lsrs	r3, r1, #8
 800b238:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	1c5a      	adds	r2, r3, #1
 800b240:	60fa      	str	r2, [r7, #12]
 800b242:	783a      	ldrb	r2, [r7, #0]
 800b244:	701a      	strb	r2, [r3, #0]
}
 800b246:	bf00      	nop
 800b248:	3714      	adds	r7, #20
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr

0800b252 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b252:	b480      	push	{r7}
 800b254:	b087      	sub	sp, #28
 800b256:	af00      	add	r7, sp, #0
 800b258:	60f8      	str	r0, [r7, #12]
 800b25a:	60b9      	str	r1, [r7, #8]
 800b25c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d00d      	beq.n	800b288 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	1c53      	adds	r3, r2, #1
 800b270:	613b      	str	r3, [r7, #16]
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	1c59      	adds	r1, r3, #1
 800b276:	6179      	str	r1, [r7, #20]
 800b278:	7812      	ldrb	r2, [r2, #0]
 800b27a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	3b01      	subs	r3, #1
 800b280:	607b      	str	r3, [r7, #4]
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d1f1      	bne.n	800b26c <mem_cpy+0x1a>
	}
}
 800b288:	bf00      	nop
 800b28a:	371c      	adds	r7, #28
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr

0800b294 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	617a      	str	r2, [r7, #20]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	b2d2      	uxtb	r2, r2
 800b2ae:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	607b      	str	r3, [r7, #4]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d1f3      	bne.n	800b2a4 <mem_set+0x10>
}
 800b2bc:	bf00      	nop
 800b2be:	bf00      	nop
 800b2c0:	371c      	adds	r7, #28
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b2ca:	b480      	push	{r7}
 800b2cc:	b089      	sub	sp, #36	; 0x24
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	61fb      	str	r3, [r7, #28]
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	1c5a      	adds	r2, r3, #1
 800b2e6:	61fa      	str	r2, [r7, #28]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	61ba      	str	r2, [r7, #24]
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	1acb      	subs	r3, r1, r3
 800b2f6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	607b      	str	r3, [r7, #4]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <mem_cmp+0x40>
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0eb      	beq.n	800b2e2 <mem_cmp+0x18>

	return r;
 800b30a:	697b      	ldr	r3, [r7, #20]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3724      	adds	r7, #36	; 0x24
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b322:	e002      	b.n	800b32a <chk_chr+0x12>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3301      	adds	r3, #1
 800b328:	607b      	str	r3, [r7, #4]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d005      	beq.n	800b33e <chk_chr+0x26>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d1f2      	bne.n	800b324 <chk_chr+0xc>
	return *str;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	781b      	ldrb	r3, [r3, #0]
}
 800b342:	4618      	mov	r0, r3
 800b344:	370c      	adds	r7, #12
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr
	...

0800b350 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b35a:	2300      	movs	r3, #0
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	60fb      	str	r3, [r7, #12]
 800b362:	e029      	b.n	800b3b8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b364:	4a27      	ldr	r2, [pc, #156]	; (800b404 <chk_lock+0xb4>)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	011b      	lsls	r3, r3, #4
 800b36a:	4413      	add	r3, r2
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d01d      	beq.n	800b3ae <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b372:	4a24      	ldr	r2, [pc, #144]	; (800b404 <chk_lock+0xb4>)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	4413      	add	r3, r2
 800b37a:	681a      	ldr	r2, [r3, #0]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	429a      	cmp	r2, r3
 800b382:	d116      	bne.n	800b3b2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b384:	4a1f      	ldr	r2, [pc, #124]	; (800b404 <chk_lock+0xb4>)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	011b      	lsls	r3, r3, #4
 800b38a:	4413      	add	r3, r2
 800b38c:	3304      	adds	r3, #4
 800b38e:	681a      	ldr	r2, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b394:	429a      	cmp	r2, r3
 800b396:	d10c      	bne.n	800b3b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b398:	4a1a      	ldr	r2, [pc, #104]	; (800b404 <chk_lock+0xb4>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	4413      	add	r3, r2
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d102      	bne.n	800b3b2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3ac:	e007      	b.n	800b3be <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	60fb      	str	r3, [r7, #12]
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d9d2      	bls.n	800b364 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d109      	bne.n	800b3d8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d102      	bne.n	800b3d0 <chk_lock+0x80>
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d101      	bne.n	800b3d4 <chk_lock+0x84>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	e010      	b.n	800b3f6 <chk_lock+0xa6>
 800b3d4:	2312      	movs	r3, #18
 800b3d6:	e00e      	b.n	800b3f6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d108      	bne.n	800b3f0 <chk_lock+0xa0>
 800b3de:	4a09      	ldr	r2, [pc, #36]	; (800b404 <chk_lock+0xb4>)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	011b      	lsls	r3, r3, #4
 800b3e4:	4413      	add	r3, r2
 800b3e6:	330c      	adds	r3, #12
 800b3e8:	881b      	ldrh	r3, [r3, #0]
 800b3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ee:	d101      	bne.n	800b3f4 <chk_lock+0xa4>
 800b3f0:	2310      	movs	r3, #16
 800b3f2:	e000      	b.n	800b3f6 <chk_lock+0xa6>
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3714      	adds	r7, #20
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	24002348 	.word	0x24002348

0800b408 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b40e:	2300      	movs	r3, #0
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	e002      	b.n	800b41a <enq_lock+0x12>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3301      	adds	r3, #1
 800b418:	607b      	str	r3, [r7, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d806      	bhi.n	800b42e <enq_lock+0x26>
 800b420:	4a09      	ldr	r2, [pc, #36]	; (800b448 <enq_lock+0x40>)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	4413      	add	r3, r2
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d1f2      	bne.n	800b414 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2b02      	cmp	r3, #2
 800b432:	bf14      	ite	ne
 800b434:	2301      	movne	r3, #1
 800b436:	2300      	moveq	r3, #0
 800b438:	b2db      	uxtb	r3, r3
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	370c      	adds	r7, #12
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	24002348 	.word	0x24002348

0800b44c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b456:	2300      	movs	r3, #0
 800b458:	60fb      	str	r3, [r7, #12]
 800b45a:	e01f      	b.n	800b49c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b45c:	4a41      	ldr	r2, [pc, #260]	; (800b564 <inc_lock+0x118>)
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	4413      	add	r3, r2
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d113      	bne.n	800b496 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b46e:	4a3d      	ldr	r2, [pc, #244]	; (800b564 <inc_lock+0x118>)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	011b      	lsls	r3, r3, #4
 800b474:	4413      	add	r3, r2
 800b476:	3304      	adds	r3, #4
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b47e:	429a      	cmp	r2, r3
 800b480:	d109      	bne.n	800b496 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b482:	4a38      	ldr	r2, [pc, #224]	; (800b564 <inc_lock+0x118>)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	011b      	lsls	r3, r3, #4
 800b488:	4413      	add	r3, r2
 800b48a:	3308      	adds	r3, #8
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800b492:	429a      	cmp	r2, r3
 800b494:	d006      	beq.n	800b4a4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	3301      	adds	r3, #1
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d9dc      	bls.n	800b45c <inc_lock+0x10>
 800b4a2:	e000      	b.n	800b4a6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b4a4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d132      	bne.n	800b512 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	60fb      	str	r3, [r7, #12]
 800b4b0:	e002      	b.n	800b4b8 <inc_lock+0x6c>
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	60fb      	str	r3, [r7, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d806      	bhi.n	800b4cc <inc_lock+0x80>
 800b4be:	4a29      	ldr	r2, [pc, #164]	; (800b564 <inc_lock+0x118>)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	011b      	lsls	r3, r3, #4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f2      	bne.n	800b4b2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b02      	cmp	r3, #2
 800b4d0:	d101      	bne.n	800b4d6 <inc_lock+0x8a>
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	e040      	b.n	800b558 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	4922      	ldr	r1, [pc, #136]	; (800b564 <inc_lock+0x118>)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	011b      	lsls	r3, r3, #4
 800b4e0:	440b      	add	r3, r1
 800b4e2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	689a      	ldr	r2, [r3, #8]
 800b4e8:	491e      	ldr	r1, [pc, #120]	; (800b564 <inc_lock+0x118>)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	011b      	lsls	r3, r3, #4
 800b4ee:	440b      	add	r3, r1
 800b4f0:	3304      	adds	r3, #4
 800b4f2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4f8:	491a      	ldr	r1, [pc, #104]	; (800b564 <inc_lock+0x118>)
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	011b      	lsls	r3, r3, #4
 800b4fe:	440b      	add	r3, r1
 800b500:	3308      	adds	r3, #8
 800b502:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b504:	4a17      	ldr	r2, [pc, #92]	; (800b564 <inc_lock+0x118>)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	011b      	lsls	r3, r3, #4
 800b50a:	4413      	add	r3, r2
 800b50c:	330c      	adds	r3, #12
 800b50e:	2200      	movs	r2, #0
 800b510:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d009      	beq.n	800b52c <inc_lock+0xe0>
 800b518:	4a12      	ldr	r2, [pc, #72]	; (800b564 <inc_lock+0x118>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	4413      	add	r3, r2
 800b520:	330c      	adds	r3, #12
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d001      	beq.n	800b52c <inc_lock+0xe0>
 800b528:	2300      	movs	r3, #0
 800b52a:	e015      	b.n	800b558 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d108      	bne.n	800b544 <inc_lock+0xf8>
 800b532:	4a0c      	ldr	r2, [pc, #48]	; (800b564 <inc_lock+0x118>)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	011b      	lsls	r3, r3, #4
 800b538:	4413      	add	r3, r2
 800b53a:	330c      	adds	r3, #12
 800b53c:	881b      	ldrh	r3, [r3, #0]
 800b53e:	3301      	adds	r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	e001      	b.n	800b548 <inc_lock+0xfc>
 800b544:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b548:	4906      	ldr	r1, [pc, #24]	; (800b564 <inc_lock+0x118>)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	011b      	lsls	r3, r3, #4
 800b54e:	440b      	add	r3, r1
 800b550:	330c      	adds	r3, #12
 800b552:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	3301      	adds	r3, #1
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr
 800b564:	24002348 	.word	0x24002348

0800b568 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	3b01      	subs	r3, #1
 800b574:	607b      	str	r3, [r7, #4]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d825      	bhi.n	800b5c8 <dec_lock+0x60>
		n = Files[i].ctr;
 800b57c:	4a17      	ldr	r2, [pc, #92]	; (800b5dc <dec_lock+0x74>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	011b      	lsls	r3, r3, #4
 800b582:	4413      	add	r3, r2
 800b584:	330c      	adds	r3, #12
 800b586:	881b      	ldrh	r3, [r3, #0]
 800b588:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b58a:	89fb      	ldrh	r3, [r7, #14]
 800b58c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b590:	d101      	bne.n	800b596 <dec_lock+0x2e>
 800b592:	2300      	movs	r3, #0
 800b594:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b596:	89fb      	ldrh	r3, [r7, #14]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <dec_lock+0x3a>
 800b59c:	89fb      	ldrh	r3, [r7, #14]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b5a2:	4a0e      	ldr	r2, [pc, #56]	; (800b5dc <dec_lock+0x74>)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	011b      	lsls	r3, r3, #4
 800b5a8:	4413      	add	r3, r2
 800b5aa:	330c      	adds	r3, #12
 800b5ac:	89fa      	ldrh	r2, [r7, #14]
 800b5ae:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b5b0:	89fb      	ldrh	r3, [r7, #14]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d105      	bne.n	800b5c2 <dec_lock+0x5a>
 800b5b6:	4a09      	ldr	r2, [pc, #36]	; (800b5dc <dec_lock+0x74>)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	011b      	lsls	r3, r3, #4
 800b5bc:	4413      	add	r3, r2
 800b5be:	2200      	movs	r2, #0
 800b5c0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	737b      	strb	r3, [r7, #13]
 800b5c6:	e001      	b.n	800b5cc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b5c8:	2302      	movs	r3, #2
 800b5ca:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b5cc:	7b7b      	ldrb	r3, [r7, #13]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	24002348 	.word	0x24002348

0800b5e0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	e010      	b.n	800b610 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5ee:	4a0d      	ldr	r2, [pc, #52]	; (800b624 <clear_lock+0x44>)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	4413      	add	r3, r2
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d105      	bne.n	800b60a <clear_lock+0x2a>
 800b5fe:	4a09      	ldr	r2, [pc, #36]	; (800b624 <clear_lock+0x44>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	011b      	lsls	r3, r3, #4
 800b604:	4413      	add	r3, r2
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3301      	adds	r3, #1
 800b60e:	60fb      	str	r3, [r7, #12]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2b01      	cmp	r3, #1
 800b614:	d9eb      	bls.n	800b5ee <clear_lock+0xe>
	}
}
 800b616:	bf00      	nop
 800b618:	bf00      	nop
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	24002348 	.word	0x24002348

0800b628 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	78db      	ldrb	r3, [r3, #3]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d034      	beq.n	800b6a6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b640:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	7858      	ldrb	r0, [r3, #1]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b64c:	2301      	movs	r3, #1
 800b64e:	697a      	ldr	r2, [r7, #20]
 800b650:	f7ff fbdc 	bl	800ae0c <disk_write>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d002      	beq.n	800b660 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	73fb      	strb	r3, [r7, #15]
 800b65e:	e022      	b.n	800b6a6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66a:	697a      	ldr	r2, [r7, #20]
 800b66c:	1ad2      	subs	r2, r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b672:	429a      	cmp	r2, r3
 800b674:	d217      	bcs.n	800b6a6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	789b      	ldrb	r3, [r3, #2]
 800b67a:	613b      	str	r3, [r7, #16]
 800b67c:	e010      	b.n	800b6a0 <sync_window+0x78>
					wsect += fs->fsize;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	4413      	add	r3, r2
 800b686:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7858      	ldrb	r0, [r3, #1]
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b692:	2301      	movs	r3, #1
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	f7ff fbb9 	bl	800ae0c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	3b01      	subs	r3, #1
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d8eb      	bhi.n	800b67e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c2:	683a      	ldr	r2, [r7, #0]
 800b6c4:	429a      	cmp	r2, r3
 800b6c6:	d01b      	beq.n	800b700 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff ffad 	bl	800b628 <sync_window>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d113      	bne.n	800b700 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	7858      	ldrb	r0, [r3, #1]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	683a      	ldr	r2, [r7, #0]
 800b6e6:	f7ff fb71 	bl	800adcc <disk_read>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d004      	beq.n	800b6fa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6f0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f7ff ff87 	bl	800b628 <sync_window>
 800b71a:	4603      	mov	r3, r0
 800b71c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b71e:	7bfb      	ldrb	r3, [r7, #15]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d159      	bne.n	800b7d8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b03      	cmp	r3, #3
 800b72a:	d149      	bne.n	800b7c0 <sync_fs+0xb4>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	791b      	ldrb	r3, [r3, #4]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d145      	bne.n	800b7c0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	899b      	ldrh	r3, [r3, #12]
 800b73e:	461a      	mov	r2, r3
 800b740:	2100      	movs	r1, #0
 800b742:	f7ff fda7 	bl	800b294 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	333c      	adds	r3, #60	; 0x3c
 800b74a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b74e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b752:	4618      	mov	r0, r3
 800b754:	f7ff fcae 	bl	800b0b4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	333c      	adds	r3, #60	; 0x3c
 800b75c:	4921      	ldr	r1, [pc, #132]	; (800b7e4 <sync_fs+0xd8>)
 800b75e:	4618      	mov	r0, r3
 800b760:	f7ff fcc3 	bl	800b0ea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	333c      	adds	r3, #60	; 0x3c
 800b768:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b76c:	491e      	ldr	r1, [pc, #120]	; (800b7e8 <sync_fs+0xdc>)
 800b76e:	4618      	mov	r0, r3
 800b770:	f7ff fcbb 	bl	800b0ea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	333c      	adds	r3, #60	; 0x3c
 800b778:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	69db      	ldr	r3, [r3, #28]
 800b780:	4619      	mov	r1, r3
 800b782:	4610      	mov	r0, r2
 800b784:	f7ff fcb1 	bl	800b0ea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	333c      	adds	r3, #60	; 0x3c
 800b78c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f7ff fca7 	bl	800b0ea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	7858      	ldrb	r0, [r3, #1]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	f7ff fb29 	bl	800ae0c <disk_write>
			fs->fsi_flag = 0;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2200      	movs	r2, #0
 800b7be:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7ff fb3f 	bl	800ae4c <disk_ioctl>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <sync_fs+0xcc>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	41615252 	.word	0x41615252
 800b7e8:	61417272 	.word	0x61417272

0800b7ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b083      	sub	sp, #12
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
 800b7f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	3b02      	subs	r3, #2
 800b7fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a1b      	ldr	r3, [r3, #32]
 800b800:	3b02      	subs	r3, #2
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d301      	bcc.n	800b80c <clust2sect+0x20>
 800b808:	2300      	movs	r3, #0
 800b80a:	e008      	b.n	800b81e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	895b      	ldrh	r3, [r3, #10]
 800b810:	461a      	mov	r2, r3
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	fb03 f202 	mul.w	r2, r3, r2
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b81c:	4413      	add	r3, r2
}
 800b81e:	4618      	mov	r0, r3
 800b820:	370c      	adds	r7, #12
 800b822:	46bd      	mov	sp, r7
 800b824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b828:	4770      	bx	lr
	...

0800b82c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b82c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b830:	b088      	sub	sp, #32
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d904      	bls.n	800b84e <get_fat+0x22>
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	6a1b      	ldr	r3, [r3, #32]
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d302      	bcc.n	800b854 <get_fat+0x28>
		val = 1;	/* Internal error */
 800b84e:	2301      	movs	r3, #1
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	e13a      	b.n	800baca <get_fat+0x29e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b854:	f04f 33ff 	mov.w	r3, #4294967295
 800b858:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	3b01      	subs	r3, #1
 800b860:	2b03      	cmp	r3, #3
 800b862:	f200 8126 	bhi.w	800bab2 <get_fat+0x286>
 800b866:	a201      	add	r2, pc, #4	; (adr r2, 800b86c <get_fat+0x40>)
 800b868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86c:	0800b87d 	.word	0x0800b87d
 800b870:	0800b92b 	.word	0x0800b92b
 800b874:	0800b977 	.word	0x0800b977
 800b878:	0800b9c7 	.word	0x0800b9c7
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88e:	69bb      	ldr	r3, [r7, #24]
 800b890:	899b      	ldrh	r3, [r3, #12]
 800b892:	4619      	mov	r1, r3
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	fbb3 f3f1 	udiv	r3, r3, r1
 800b89a:	4413      	add	r3, r2
 800b89c:	4619      	mov	r1, r3
 800b89e:	69b8      	ldr	r0, [r7, #24]
 800b8a0:	f7ff ff06 	bl	800b6b0 <move_window>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f040 8106 	bne.w	800bab8 <get_fat+0x28c>
			wc = fs->win[bc++ % SS(fs)];
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	1c5a      	adds	r2, r3, #1
 800b8b0:	60fa      	str	r2, [r7, #12]
 800b8b2:	69ba      	ldr	r2, [r7, #24]
 800b8b4:	8992      	ldrh	r2, [r2, #12]
 800b8b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8ba:	fb01 f202 	mul.w	r2, r1, r2
 800b8be:	1a9b      	subs	r3, r3, r2
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	899b      	ldrh	r3, [r3, #12]
 800b8d2:	4619      	mov	r1, r3
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800b8da:	4413      	add	r3, r2
 800b8dc:	4619      	mov	r1, r3
 800b8de:	69b8      	ldr	r0, [r7, #24]
 800b8e0:	f7ff fee6 	bl	800b6b0 <move_window>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f040 80e8 	bne.w	800babc <get_fat+0x290>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	899b      	ldrh	r3, [r3, #12]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8f8:	fb01 f202 	mul.w	r2, r1, r2
 800b8fc:	1a9b      	subs	r3, r3, r2
 800b8fe:	69ba      	ldr	r2, [r7, #24]
 800b900:	4413      	add	r3, r2
 800b902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b906:	021b      	lsls	r3, r3, #8
 800b908:	461a      	mov	r2, r3
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <get_fat+0xf4>
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	091b      	lsrs	r3, r3, #4
 800b91e:	e002      	b.n	800b926 <get_fat+0xfa>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b926:	61fb      	str	r3, [r7, #28]
			break;
 800b928:	e0cf      	b.n	800baca <get_fat+0x29e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	899b      	ldrh	r3, [r3, #12]
 800b932:	085b      	lsrs	r3, r3, #1
 800b934:	b29b      	uxth	r3, r3
 800b936:	4619      	mov	r1, r3
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	fbb3 f3f1 	udiv	r3, r3, r1
 800b93e:	4413      	add	r3, r2
 800b940:	4619      	mov	r1, r3
 800b942:	69b8      	ldr	r0, [r7, #24]
 800b944:	f7ff feb4 	bl	800b6b0 <move_window>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	f040 80b8 	bne.w	800bac0 <get_fat+0x294>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b950:	69bb      	ldr	r3, [r7, #24]
 800b952:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	005b      	lsls	r3, r3, #1
 800b95a:	69ba      	ldr	r2, [r7, #24]
 800b95c:	8992      	ldrh	r2, [r2, #12]
 800b95e:	fbb3 f0f2 	udiv	r0, r3, r2
 800b962:	fb00 f202 	mul.w	r2, r0, r2
 800b966:	1a9b      	subs	r3, r3, r2
 800b968:	440b      	add	r3, r1
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7ff fa8c 	bl	800ae88 <ld_word>
 800b970:	4603      	mov	r3, r0
 800b972:	61fb      	str	r3, [r7, #28]
			break;
 800b974:	e0a9      	b.n	800baca <get_fat+0x29e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b97a:	69bb      	ldr	r3, [r7, #24]
 800b97c:	899b      	ldrh	r3, [r3, #12]
 800b97e:	089b      	lsrs	r3, r3, #2
 800b980:	b29b      	uxth	r3, r3
 800b982:	4619      	mov	r1, r3
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	fbb3 f3f1 	udiv	r3, r3, r1
 800b98a:	4413      	add	r3, r2
 800b98c:	4619      	mov	r1, r3
 800b98e:	69b8      	ldr	r0, [r7, #24]
 800b990:	f7ff fe8e 	bl	800b6b0 <move_window>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	f040 8094 	bne.w	800bac4 <get_fat+0x298>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	8992      	ldrh	r2, [r2, #12]
 800b9aa:	fbb3 f0f2 	udiv	r0, r3, r2
 800b9ae:	fb00 f202 	mul.w	r2, r0, r2
 800b9b2:	1a9b      	subs	r3, r3, r2
 800b9b4:	440b      	add	r3, r1
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff fa7e 	bl	800aeb8 <ld_dword>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b9c2:	61fb      	str	r3, [r7, #28]
			break;
 800b9c4:	e081      	b.n	800baca <get_fat+0x29e>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d070      	beq.n	800bab2 <get_fat+0x286>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	683a      	ldr	r2, [r7, #0]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800b9e0:	1e54      	subs	r4, r2, #1
 800b9e2:	f143 35ff 	adc.w	r5, r3, #4294967295
 800b9e6:	69bb      	ldr	r3, [r7, #24]
 800b9e8:	899b      	ldrh	r3, [r3, #12]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	4698      	mov	r8, r3
 800b9f0:	4691      	mov	r9, r2
 800b9f2:	4642      	mov	r2, r8
 800b9f4:	464b      	mov	r3, r9
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f7f4 fcc1 	bl	8000380 <__aeabi_uldivmod>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	460b      	mov	r3, r1
 800ba02:	69bb      	ldr	r3, [r7, #24]
 800ba04:	895b      	ldrh	r3, [r3, #10]
 800ba06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba0a:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	79db      	ldrb	r3, [r3, #7]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	d10e      	bne.n	800ba32 <get_fat+0x206>
					if (cofs <= clen) {
 800ba14:	697a      	ldr	r2, [r7, #20]
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d80a      	bhi.n	800ba32 <get_fat+0x206>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ba1c:	697a      	ldr	r2, [r7, #20]
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d002      	beq.n	800ba2a <get_fat+0x1fe>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	3301      	adds	r3, #1
 800ba28:	e001      	b.n	800ba2e <get_fat+0x202>
 800ba2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ba2e:	61fb      	str	r3, [r7, #28]
						break;
 800ba30:	e04b      	b.n	800baca <get_fat+0x29e>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	79db      	ldrb	r3, [r3, #7]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	d108      	bne.n	800ba4c <get_fat+0x220>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d203      	bcs.n	800ba4c <get_fat+0x220>
					val = clst + 1; 	/* Generate the value */
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	3301      	adds	r3, #1
 800ba48:	61fb      	str	r3, [r7, #28]
					break;
 800ba4a:	e03e      	b.n	800baca <get_fat+0x29e>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	79db      	ldrb	r3, [r3, #7]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	d02e      	beq.n	800bab2 <get_fat+0x286>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	69db      	ldr	r3, [r3, #28]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d003      	beq.n	800ba64 <get_fat+0x238>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800ba5c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ba60:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800ba62:	e032      	b.n	800baca <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	899b      	ldrh	r3, [r3, #12]
 800ba6c:	089b      	lsrs	r3, r3, #2
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	4619      	mov	r1, r3
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	fbb3 f3f1 	udiv	r3, r3, r1
 800ba78:	4413      	add	r3, r2
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	69b8      	ldr	r0, [r7, #24]
 800ba7e:	f7ff fe17 	bl	800b6b0 <move_window>
 800ba82:	4603      	mov	r3, r0
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d11f      	bne.n	800bac8 <get_fat+0x29c>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	8992      	ldrh	r2, [r2, #12]
 800ba96:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba9a:	fb00 f202 	mul.w	r2, r0, r2
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	440b      	add	r3, r1
 800baa2:	4618      	mov	r0, r3
 800baa4:	f7ff fa08 	bl	800aeb8 <ld_dword>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800baae:	61fb      	str	r3, [r7, #28]
					break;
 800bab0:	e00b      	b.n	800baca <get_fat+0x29e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bab2:	2301      	movs	r3, #1
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	e008      	b.n	800baca <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bab8:	bf00      	nop
 800baba:	e006      	b.n	800baca <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800babc:	bf00      	nop
 800babe:	e004      	b.n	800baca <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bac0:	bf00      	nop
 800bac2:	e002      	b.n	800baca <get_fat+0x29e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bac4:	bf00      	nop
 800bac6:	e000      	b.n	800baca <get_fat+0x29e>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bac8:	bf00      	nop
		}
	}

	return val;
 800baca:	69fb      	ldr	r3, [r7, #28]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bad6:	bf00      	nop

0800bad8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bad8:	b590      	push	{r4, r7, lr}
 800bada:	b089      	sub	sp, #36	; 0x24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bae4:	2302      	movs	r3, #2
 800bae6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	2b01      	cmp	r3, #1
 800baec:	f240 8106 	bls.w	800bcfc <put_fat+0x224>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a1b      	ldr	r3, [r3, #32]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	429a      	cmp	r2, r3
 800baf8:	f080 8100 	bcs.w	800bcfc <put_fat+0x224>
		switch (fs->fs_type) {
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	2b04      	cmp	r3, #4
 800bb02:	f300 8104 	bgt.w	800bd0e <put_fat+0x236>
 800bb06:	2b03      	cmp	r3, #3
 800bb08:	f280 80b3 	bge.w	800bc72 <put_fat+0x19a>
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d003      	beq.n	800bb18 <put_fat+0x40>
 800bb10:	2b02      	cmp	r3, #2
 800bb12:	f000 8083 	beq.w	800bc1c <put_fat+0x144>
 800bb16:	e0fa      	b.n	800bd0e <put_fat+0x236>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	61bb      	str	r3, [r7, #24]
 800bb1c:	69bb      	ldr	r3, [r7, #24]
 800bb1e:	085b      	lsrs	r3, r3, #1
 800bb20:	69ba      	ldr	r2, [r7, #24]
 800bb22:	4413      	add	r3, r2
 800bb24:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	899b      	ldrh	r3, [r3, #12]
 800bb2e:	4619      	mov	r1, r3
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	fbb3 f3f1 	udiv	r3, r3, r1
 800bb36:	4413      	add	r3, r2
 800bb38:	4619      	mov	r1, r3
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f7ff fdb8 	bl	800b6b0 <move_window>
 800bb40:	4603      	mov	r3, r0
 800bb42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb44:	7ffb      	ldrb	r3, [r7, #31]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	f040 80da 	bne.w	800bd00 <put_fat+0x228>
			p = fs->win + bc++ % SS(fs);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bb52:	69bb      	ldr	r3, [r7, #24]
 800bb54:	1c5a      	adds	r2, r3, #1
 800bb56:	61ba      	str	r2, [r7, #24]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	8992      	ldrh	r2, [r2, #12]
 800bb5c:	fbb3 f0f2 	udiv	r0, r3, r2
 800bb60:	fb00 f202 	mul.w	r2, r0, r2
 800bb64:	1a9b      	subs	r3, r3, r2
 800bb66:	440b      	add	r3, r1
 800bb68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d00d      	beq.n	800bb90 <put_fat+0xb8>
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	b25b      	sxtb	r3, r3
 800bb7a:	f003 030f 	and.w	r3, r3, #15
 800bb7e:	b25a      	sxtb	r2, r3
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	b25b      	sxtb	r3, r3
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	b25b      	sxtb	r3, r3
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	e001      	b.n	800bb94 <put_fat+0xbc>
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	697a      	ldr	r2, [r7, #20]
 800bb96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	899b      	ldrh	r3, [r3, #12]
 800bba6:	4619      	mov	r1, r3
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800bbae:	4413      	add	r3, r2
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f7ff fd7c 	bl	800b6b0 <move_window>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bbbc:	7ffb      	ldrb	r3, [r7, #31]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	f040 80a0 	bne.w	800bd04 <put_fat+0x22c>
			p = fs->win + bc % SS(fs);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	899b      	ldrh	r3, [r3, #12]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	69bb      	ldr	r3, [r7, #24]
 800bbd2:	fbb3 f0f2 	udiv	r0, r3, r2
 800bbd6:	fb00 f202 	mul.w	r2, r0, r2
 800bbda:	1a9b      	subs	r3, r3, r2
 800bbdc:	440b      	add	r3, r1
 800bbde:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f003 0301 	and.w	r3, r3, #1
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <put_fat+0x11a>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	091b      	lsrs	r3, r3, #4
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	e00e      	b.n	800bc10 <put_fat+0x138>
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	b25b      	sxtb	r3, r3
 800bbf8:	f023 030f 	bic.w	r3, r3, #15
 800bbfc:	b25a      	sxtb	r2, r3
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	0a1b      	lsrs	r3, r3, #8
 800bc02:	b25b      	sxtb	r3, r3
 800bc04:	f003 030f 	and.w	r3, r3, #15
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	b25b      	sxtb	r3, r3
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	697a      	ldr	r2, [r7, #20]
 800bc12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	2201      	movs	r2, #1
 800bc18:	70da      	strb	r2, [r3, #3]
			break;
 800bc1a:	e078      	b.n	800bd0e <put_fat+0x236>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	899b      	ldrh	r3, [r3, #12]
 800bc24:	085b      	lsrs	r3, r3, #1
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	4619      	mov	r1, r3
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc30:	4413      	add	r3, r2
 800bc32:	4619      	mov	r1, r3
 800bc34:	68f8      	ldr	r0, [r7, #12]
 800bc36:	f7ff fd3b 	bl	800b6b0 <move_window>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc3e:	7ffb      	ldrb	r3, [r7, #31]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d161      	bne.n	800bd08 <put_fat+0x230>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	005b      	lsls	r3, r3, #1
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	8992      	ldrh	r2, [r2, #12]
 800bc52:	fbb3 f0f2 	udiv	r0, r3, r2
 800bc56:	fb00 f202 	mul.w	r2, r0, r2
 800bc5a:	1a9b      	subs	r3, r3, r2
 800bc5c:	440b      	add	r3, r1
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	b292      	uxth	r2, r2
 800bc62:	4611      	mov	r1, r2
 800bc64:	4618      	mov	r0, r3
 800bc66:	f7ff fa25 	bl	800b0b4 <st_word>
			fs->wflag = 1;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	70da      	strb	r2, [r3, #3]
			break;
 800bc70:	e04d      	b.n	800bd0e <put_fat+0x236>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	899b      	ldrh	r3, [r3, #12]
 800bc7a:	089b      	lsrs	r3, r3, #2
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	4619      	mov	r1, r3
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc86:	4413      	add	r3, r2
 800bc88:	4619      	mov	r1, r3
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f7ff fd10 	bl	800b6b0 <move_window>
 800bc90:	4603      	mov	r3, r0
 800bc92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bc94:	7ffb      	ldrb	r3, [r7, #31]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d138      	bne.n	800bd0c <put_fat+0x234>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d017      	beq.n	800bcd2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	68fa      	ldr	r2, [r7, #12]
 800bcb4:	8992      	ldrh	r2, [r2, #12]
 800bcb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800bcba:	fb00 f202 	mul.w	r2, r0, r2
 800bcbe:	1a9b      	subs	r3, r3, r2
 800bcc0:	440b      	add	r3, r1
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff f8f8 	bl	800aeb8 <ld_dword>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bcce:	4323      	orrs	r3, r4
 800bcd0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	68fa      	ldr	r2, [r7, #12]
 800bcde:	8992      	ldrh	r2, [r2, #12]
 800bce0:	fbb3 f0f2 	udiv	r0, r3, r2
 800bce4:	fb00 f202 	mul.w	r2, r0, r2
 800bce8:	1a9b      	subs	r3, r3, r2
 800bcea:	440b      	add	r3, r1
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff f9fb 	bl	800b0ea <st_dword>
			fs->wflag = 1;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2201      	movs	r2, #1
 800bcf8:	70da      	strb	r2, [r3, #3]
			break;
 800bcfa:	e008      	b.n	800bd0e <put_fat+0x236>
		}
	}
 800bcfc:	bf00      	nop
 800bcfe:	e006      	b.n	800bd0e <put_fat+0x236>
			if (res != FR_OK) break;
 800bd00:	bf00      	nop
 800bd02:	e004      	b.n	800bd0e <put_fat+0x236>
			if (res != FR_OK) break;
 800bd04:	bf00      	nop
 800bd06:	e002      	b.n	800bd0e <put_fat+0x236>
			if (res != FR_OK) break;
 800bd08:	bf00      	nop
 800bd0a:	e000      	b.n	800bd0e <put_fat+0x236>
			if (res != FR_OK) break;
 800bd0c:	bf00      	nop
	return res;
 800bd0e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	3724      	adds	r7, #36	; 0x24
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd90      	pop	{r4, r7, pc}

0800bd18 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b08a      	sub	sp, #40	; 0x28
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	3b02      	subs	r3, #2
 800bd28:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	3b02      	subs	r3, #2
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d301      	bcc.n	800bd3a <find_bitmap+0x22>
 800bd36:	2300      	movs	r3, #0
 800bd38:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	61bb      	str	r3, [r7, #24]
 800bd42:	2300      	movs	r3, #0
 800bd44:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	08db      	lsrs	r3, r3, #3
 800bd4e:	68f9      	ldr	r1, [r7, #12]
 800bd50:	8989      	ldrh	r1, [r1, #12]
 800bd52:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd56:	4413      	add	r3, r2
 800bd58:	4619      	mov	r1, r3
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7ff fca8 	bl	800b6b0 <move_window>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <find_bitmap+0x54>
 800bd66:	f04f 33ff 	mov.w	r3, #4294967295
 800bd6a:	e058      	b.n	800be1e <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	08db      	lsrs	r3, r3, #3
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	8992      	ldrh	r2, [r2, #12]
 800bd74:	fbb3 f1f2 	udiv	r1, r3, r2
 800bd78:	fb01 f202 	mul.w	r2, r1, r2
 800bd7c:	1a9b      	subs	r3, r3, r2
 800bd7e:	623b      	str	r3, [r7, #32]
 800bd80:	69fb      	ldr	r3, [r7, #28]
 800bd82:	f003 0307 	and.w	r3, r3, #7
 800bd86:	2201      	movs	r2, #1
 800bd88:	fa02 f303 	lsl.w	r3, r2, r3
 800bd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	4413      	add	r3, r2
 800bd96:	333c      	adds	r3, #60	; 0x3c
 800bd98:	781a      	ldrb	r2, [r3, #0]
 800bd9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd9e:	4013      	ands	r3, r2
 800bda0:	74fb      	strb	r3, [r7, #19]
 800bda2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bda6:	005b      	lsls	r3, r3, #1
 800bda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	3301      	adds	r3, #1
 800bdb0:	61fb      	str	r3, [r7, #28]
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	6a1b      	ldr	r3, [r3, #32]
 800bdb6:	3b02      	subs	r3, #2
 800bdb8:	69fa      	ldr	r2, [r7, #28]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d307      	bcc.n	800bdce <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	61fb      	str	r3, [r7, #28]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	899b      	ldrh	r3, [r3, #12]
 800bdcc:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800bdce:	7cfb      	ldrb	r3, [r7, #19]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d109      	bne.n	800bde8 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	617b      	str	r3, [r7, #20]
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d106      	bne.n	800bdf0 <find_bitmap+0xd8>
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	3302      	adds	r3, #2
 800bde6:	e01a      	b.n	800be1e <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	61bb      	str	r3, [r7, #24]
 800bdec:	2300      	movs	r3, #0
 800bdee:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800bdf0:	69fa      	ldr	r2, [r7, #28]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d101      	bne.n	800bdfc <find_bitmap+0xe4>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	e010      	b.n	800be1e <find_bitmap+0x106>
			} while (bm);
 800bdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1c5      	bne.n	800bd90 <find_bitmap+0x78>
			bm = 1;
 800be04:	2301      	movs	r3, #1
 800be06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800be0a:	6a3b      	ldr	r3, [r7, #32]
 800be0c:	3301      	adds	r3, #1
 800be0e:	623b      	str	r3, [r7, #32]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	899b      	ldrh	r3, [r3, #12]
 800be14:	461a      	mov	r2, r3
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	4293      	cmp	r3, r2
 800be1a:	d3b9      	bcc.n	800bd90 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800be1c:	e793      	b.n	800bd46 <find_bitmap+0x2e>
	}
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3728      	adds	r7, #40	; 0x28
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b088      	sub	sp, #32
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	3b02      	subs	r3, #2
 800be38:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	08db      	lsrs	r3, r3, #3
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	8989      	ldrh	r1, [r1, #12]
 800be46:	fbb3 f3f1 	udiv	r3, r3, r1
 800be4a:	4413      	add	r3, r2
 800be4c:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	08db      	lsrs	r3, r3, #3
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	8992      	ldrh	r2, [r2, #12]
 800be56:	fbb3 f1f2 	udiv	r1, r3, r2
 800be5a:	fb01 f202 	mul.w	r2, r1, r2
 800be5e:	1a9b      	subs	r3, r3, r2
 800be60:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	f003 0307 	and.w	r3, r3, #7
 800be68:	2201      	movs	r2, #1
 800be6a:	fa02 f303 	lsl.w	r3, r2, r3
 800be6e:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	1c5a      	adds	r2, r3, #1
 800be74:	617a      	str	r2, [r7, #20]
 800be76:	4619      	mov	r1, r3
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7ff fc19 	bl	800b6b0 <move_window>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	d001      	beq.n	800be88 <change_bitmap+0x62>
 800be84:	2301      	movs	r3, #1
 800be86:	e03f      	b.n	800bf08 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800be88:	68fa      	ldr	r2, [r7, #12]
 800be8a:	69bb      	ldr	r3, [r7, #24]
 800be8c:	4413      	add	r3, r2
 800be8e:	333c      	adds	r3, #60	; 0x3c
 800be90:	781a      	ldrb	r2, [r3, #0]
 800be92:	7ffb      	ldrb	r3, [r7, #31]
 800be94:	4013      	ands	r3, r2
 800be96:	b2db      	uxtb	r3, r3
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bf14      	ite	ne
 800be9c:	2301      	movne	r3, #1
 800be9e:	2300      	moveq	r3, #0
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	461a      	mov	r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d101      	bne.n	800beae <change_bitmap+0x88>
 800beaa:	2302      	movs	r3, #2
 800beac:	e02c      	b.n	800bf08 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	4413      	add	r3, r2
 800beb4:	333c      	adds	r3, #60	; 0x3c
 800beb6:	781a      	ldrb	r2, [r3, #0]
 800beb8:	7ffb      	ldrb	r3, [r7, #31]
 800beba:	4053      	eors	r3, r2
 800bebc:	b2d9      	uxtb	r1, r3
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	4413      	add	r3, r2
 800bec4:	333c      	adds	r3, #60	; 0x3c
 800bec6:	460a      	mov	r2, r1
 800bec8:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2201      	movs	r2, #1
 800bece:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	607b      	str	r3, [r7, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d101      	bne.n	800bee0 <change_bitmap+0xba>
 800bedc:	2300      	movs	r3, #0
 800bede:	e013      	b.n	800bf08 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800bee0:	7ffb      	ldrb	r3, [r7, #31]
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	77fb      	strb	r3, [r7, #31]
 800bee6:	7ffb      	ldrb	r3, [r7, #31]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1cd      	bne.n	800be88 <change_bitmap+0x62>
			bm = 1;
 800beec:	2301      	movs	r3, #1
 800beee:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800bef0:	69bb      	ldr	r3, [r7, #24]
 800bef2:	3301      	adds	r3, #1
 800bef4:	61bb      	str	r3, [r7, #24]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	899b      	ldrh	r3, [r3, #12]
 800befa:	461a      	mov	r2, r3
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	4293      	cmp	r3, r2
 800bf00:	d3c2      	bcc.n	800be88 <change_bitmap+0x62>
		i = 0;
 800bf02:	2300      	movs	r3, #0
 800bf04:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800bf06:	e7b3      	b.n	800be70 <change_bitmap+0x4a>
	}
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3720      	adds	r7, #32
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b086      	sub	sp, #24
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	79db      	ldrb	r3, [r3, #7]
 800bf1c:	2b03      	cmp	r3, #3
 800bf1e:	d121      	bne.n	800bf64 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	613b      	str	r3, [r7, #16]
 800bf2c:	e014      	b.n	800bf58 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	3301      	adds	r3, #1
 800bf36:	461a      	mov	r2, r3
 800bf38:	6979      	ldr	r1, [r7, #20]
 800bf3a:	f7ff fdcd 	bl	800bad8 <put_fat>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800bf42:	7bfb      	ldrb	r3, [r7, #15]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d001      	beq.n	800bf4c <fill_first_frag+0x3c>
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
 800bf4a:	e00c      	b.n	800bf66 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800bf4c:	697b      	ldr	r3, [r7, #20]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	617b      	str	r3, [r7, #20]
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	613b      	str	r3, [r7, #16]
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e7      	bne.n	800bf2e <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2200      	movs	r2, #0
 800bf62:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3718      	adds	r7, #24
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800bf6e:	b580      	push	{r7, lr}
 800bf70:	b086      	sub	sp, #24
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	60f8      	str	r0, [r7, #12]
 800bf76:	60b9      	str	r1, [r7, #8]
 800bf78:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800bf7a:	e020      	b.n	800bfbe <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	6818      	ldr	r0, [r3, #0]
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	69db      	ldr	r3, [r3, #28]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	1c59      	adds	r1, r3, #1
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	69db      	ldr	r3, [r3, #28]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d905      	bls.n	800bf9e <fill_last_frag+0x30>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	69db      	ldr	r3, [r3, #28]
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	3302      	adds	r3, #2
 800bf9c:	e000      	b.n	800bfa0 <fill_last_frag+0x32>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	f7ff fd99 	bl	800bad8 <put_fat>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d001      	beq.n	800bfb4 <fill_last_frag+0x46>
 800bfb0:	7dfb      	ldrb	r3, [r7, #23]
 800bfb2:	e009      	b.n	800bfc8 <fill_last_frag+0x5a>
		obj->n_frag--;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	69db      	ldr	r3, [r3, #28]
 800bfb8:	1e5a      	subs	r2, r3, #1
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d1da      	bne.n	800bf7c <fill_last_frag+0xe>
	}
	return FR_OK;
 800bfc6:	2300      	movs	r3, #0
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3718      	adds	r7, #24
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08a      	sub	sp, #40	; 0x28
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	60f8      	str	r0, [r7, #12]
 800bfd8:	60b9      	str	r1, [r7, #8]
 800bfda:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	627b      	str	r3, [r7, #36]	; 0x24
 800bfea:	68bb      	ldr	r3, [r7, #8]
 800bfec:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	2b01      	cmp	r3, #1
 800bff2:	d904      	bls.n	800bffe <remove_chain+0x2e>
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	6a1b      	ldr	r3, [r3, #32]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d301      	bcc.n	800c002 <remove_chain+0x32>
 800bffe:	2302      	movs	r3, #2
 800c000:	e096      	b.n	800c130 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d014      	beq.n	800c032 <remove_chain+0x62>
 800c008:	69bb      	ldr	r3, [r7, #24]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	d103      	bne.n	800c018 <remove_chain+0x48>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	79db      	ldrb	r3, [r3, #7]
 800c014:	2b02      	cmp	r3, #2
 800c016:	d00c      	beq.n	800c032 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c018:	f04f 32ff 	mov.w	r2, #4294967295
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	69b8      	ldr	r0, [r7, #24]
 800c020:	f7ff fd5a 	bl	800bad8 <put_fat>
 800c024:	4603      	mov	r3, r0
 800c026:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c028:	7ffb      	ldrb	r3, [r7, #31]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <remove_chain+0x62>
 800c02e:	7ffb      	ldrb	r3, [r7, #31]
 800c030:	e07e      	b.n	800c130 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff fbf9 	bl	800b82c <get_fat>
 800c03a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d055      	beq.n	800c0ee <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <remove_chain+0x7c>
 800c048:	2302      	movs	r3, #2
 800c04a:	e071      	b.n	800c130 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c052:	d101      	bne.n	800c058 <remove_chain+0x88>
 800c054:	2301      	movs	r3, #1
 800c056:	e06b      	b.n	800c130 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	d00b      	beq.n	800c078 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c060:	2200      	movs	r2, #0
 800c062:	68b9      	ldr	r1, [r7, #8]
 800c064:	69b8      	ldr	r0, [r7, #24]
 800c066:	f7ff fd37 	bl	800bad8 <put_fat>
 800c06a:	4603      	mov	r3, r0
 800c06c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d001      	beq.n	800c078 <remove_chain+0xa8>
 800c074:	7ffb      	ldrb	r3, [r7, #31]
 800c076:	e05b      	b.n	800c130 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	69da      	ldr	r2, [r3, #28]
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	6a1b      	ldr	r3, [r3, #32]
 800c080:	3b02      	subs	r3, #2
 800c082:	429a      	cmp	r2, r3
 800c084:	d20b      	bcs.n	800c09e <remove_chain+0xce>
			fs->free_clst++;
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	69db      	ldr	r3, [r3, #28]
 800c08a:	1c5a      	adds	r2, r3, #1
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	791b      	ldrb	r3, [r3, #4]
 800c094:	f043 0301 	orr.w	r3, r3, #1
 800c098:	b2da      	uxtb	r2, r3
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	3301      	adds	r3, #1
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d102      	bne.n	800c0ae <remove_chain+0xde>
			ecl = nxt;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	623b      	str	r3, [r7, #32]
 800c0ac:	e017      	b.n	800c0de <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800c0ae:	69bb      	ldr	r3, [r7, #24]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d10f      	bne.n	800c0d6 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800c0b6:	6a3a      	ldr	r2, [r7, #32]
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0c2:	69b8      	ldr	r0, [r7, #24]
 800c0c4:	f7ff feaf 	bl	800be26 <change_bitmap>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800c0cc:	7ffb      	ldrb	r3, [r7, #31]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d001      	beq.n	800c0d6 <remove_chain+0x106>
 800c0d2:	7ffb      	ldrb	r3, [r7, #31]
 800c0d4:	e02c      	b.n	800c130 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	623b      	str	r3, [r7, #32]
 800c0da:	6a3b      	ldr	r3, [r7, #32]
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	6a1b      	ldr	r3, [r3, #32]
 800c0e6:	68ba      	ldr	r2, [r7, #8]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d3a2      	bcc.n	800c032 <remove_chain+0x62>
 800c0ec:	e000      	b.n	800c0f0 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800c0ee:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	2b04      	cmp	r3, #4
 800c0f6:	d11a      	bne.n	800c12e <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d103      	bne.n	800c106 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	71da      	strb	r2, [r3, #7]
 800c104:	e013      	b.n	800c12e <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	79db      	ldrb	r3, [r3, #7]
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d10f      	bne.n	800c12e <remove_chain+0x15e>
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d30a      	bcc.n	800c12e <remove_chain+0x15e>
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	689a      	ldr	r2, [r3, #8]
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	699b      	ldr	r3, [r3, #24]
 800c120:	4413      	add	r3, r2
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	429a      	cmp	r2, r3
 800c126:	d802      	bhi.n	800c12e <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2202      	movs	r2, #2
 800c12c:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3728      	adds	r7, #40	; 0x28
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b088      	sub	sp, #32
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c148:	683b      	ldr	r3, [r7, #0]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d10d      	bne.n	800c16a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c154:	69bb      	ldr	r3, [r7, #24]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d004      	beq.n	800c164 <create_chain+0x2c>
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	429a      	cmp	r2, r3
 800c162:	d31b      	bcc.n	800c19c <create_chain+0x64>
 800c164:	2301      	movs	r3, #1
 800c166:	61bb      	str	r3, [r7, #24]
 800c168:	e018      	b.n	800c19c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f7ff fb5d 	bl	800b82c <get_fat>
 800c172:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d801      	bhi.n	800c17e <create_chain+0x46>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e0d9      	b.n	800c332 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c184:	d101      	bne.n	800c18a <create_chain+0x52>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	e0d3      	b.n	800c332 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	6a1b      	ldr	r3, [r3, #32]
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	429a      	cmp	r2, r3
 800c192:	d201      	bcs.n	800c198 <create_chain+0x60>
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	e0cc      	b.n	800c332 <create_chain+0x1fa>
		scl = clst;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	d164      	bne.n	800c26e <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	69b9      	ldr	r1, [r7, #24]
 800c1a8:	6938      	ldr	r0, [r7, #16]
 800c1aa:	f7ff fdb5 	bl	800bd18 <find_bitmap>
 800c1ae:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d003      	beq.n	800c1be <create_chain+0x86>
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1bc:	d101      	bne.n	800c1c2 <create_chain+0x8a>
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	e0b7      	b.n	800c332 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	69f9      	ldr	r1, [r7, #28]
 800c1c8:	6938      	ldr	r0, [r7, #16]
 800c1ca:	f7ff fe2c 	bl	800be26 <change_bitmap>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d101      	bne.n	800c1dc <create_chain+0xa4>
 800c1d8:	2301      	movs	r3, #1
 800c1da:	e0aa      	b.n	800c332 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800c1dc:	7dfb      	ldrb	r3, [r7, #23]
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d102      	bne.n	800c1e8 <create_chain+0xb0>
 800c1e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1e6:	e0a4      	b.n	800c332 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2202      	movs	r2, #2
 800c1f2:	71da      	strb	r2, [r3, #7]
 800c1f4:	e011      	b.n	800c21a <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	79db      	ldrb	r3, [r3, #7]
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d10d      	bne.n	800c21a <create_chain+0xe2>
 800c1fe:	69bb      	ldr	r3, [r7, #24]
 800c200:	3301      	adds	r3, #1
 800c202:	69fa      	ldr	r2, [r7, #28]
 800c204:	429a      	cmp	r2, r3
 800c206:	d008      	beq.n	800c21a <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	69ba      	ldr	r2, [r7, #24]
 800c20e:	1ad2      	subs	r2, r2, r3
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2203      	movs	r2, #3
 800c218:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	79db      	ldrb	r3, [r3, #7]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d064      	beq.n	800c2ec <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	3301      	adds	r3, #1
 800c226:	69fa      	ldr	r2, [r7, #28]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d10b      	bne.n	800c244 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	69db      	ldr	r3, [r3, #28]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d003      	beq.n	800c23c <create_chain+0x104>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	3301      	adds	r3, #1
 800c23a:	e000      	b.n	800c23e <create_chain+0x106>
 800c23c:	2302      	movs	r3, #2
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	61d3      	str	r3, [r2, #28]
 800c242:	e053      	b.n	800c2ec <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d102      	bne.n	800c252 <create_chain+0x11a>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800c252:	69fa      	ldr	r2, [r7, #28]
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f7ff fe89 	bl	800bf6e <fill_last_frag>
 800c25c:	4603      	mov	r3, r0
 800c25e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800c260:	7dfb      	ldrb	r3, [r7, #23]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d142      	bne.n	800c2ec <create_chain+0x1b4>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2201      	movs	r2, #1
 800c26a:	61da      	str	r2, [r3, #28]
 800c26c:	e03e      	b.n	800c2ec <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	3301      	adds	r3, #1
 800c276:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	6a1b      	ldr	r3, [r3, #32]
 800c27c:	69fa      	ldr	r2, [r7, #28]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d307      	bcc.n	800c292 <create_chain+0x15a>
				ncl = 2;
 800c282:	2302      	movs	r3, #2
 800c284:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c286:	69fa      	ldr	r2, [r7, #28]
 800c288:	69bb      	ldr	r3, [r7, #24]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d901      	bls.n	800c292 <create_chain+0x15a>
 800c28e:	2300      	movs	r3, #0
 800c290:	e04f      	b.n	800c332 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c292:	69f9      	ldr	r1, [r7, #28]
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff fac9 	bl	800b82c <get_fat>
 800c29a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00e      	beq.n	800c2c0 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d003      	beq.n	800c2b0 <create_chain+0x178>
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ae:	d101      	bne.n	800c2b4 <create_chain+0x17c>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	e03e      	b.n	800c332 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800c2b4:	69fa      	ldr	r2, [r7, #28]
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	429a      	cmp	r2, r3
 800c2ba:	d1da      	bne.n	800c272 <create_chain+0x13a>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	e038      	b.n	800c332 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800c2c0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c6:	69f9      	ldr	r1, [r7, #28]
 800c2c8:	6938      	ldr	r0, [r7, #16]
 800c2ca:	f7ff fc05 	bl	800bad8 <put_fat>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c2d2:	7dfb      	ldrb	r3, [r7, #23]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d109      	bne.n	800c2ec <create_chain+0x1b4>
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c2de:	69fa      	ldr	r2, [r7, #28]
 800c2e0:	6839      	ldr	r1, [r7, #0]
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f7ff fbf8 	bl	800bad8 <put_fat>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d116      	bne.n	800c320 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	69fa      	ldr	r2, [r7, #28]
 800c2f6:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	69da      	ldr	r2, [r3, #28]
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	3b02      	subs	r3, #2
 800c302:	429a      	cmp	r2, r3
 800c304:	d804      	bhi.n	800c310 <create_chain+0x1d8>
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	69db      	ldr	r3, [r3, #28]
 800c30a:	1e5a      	subs	r2, r3, #1
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	791b      	ldrb	r3, [r3, #4]
 800c314:	f043 0301 	orr.w	r3, r3, #1
 800c318:	b2da      	uxtb	r2, r3
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	711a      	strb	r2, [r3, #4]
 800c31e:	e007      	b.n	800c330 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d102      	bne.n	800c32c <create_chain+0x1f4>
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	e000      	b.n	800c32e <create_chain+0x1f6>
 800c32c:	2301      	movs	r3, #1
 800c32e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c330:	69fb      	ldr	r3, [r7, #28]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3720      	adds	r7, #32
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c33a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c33e:	b088      	sub	sp, #32
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c352:	3304      	adds	r3, #4
 800c354:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	899b      	ldrh	r3, [r3, #12]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2200      	movs	r2, #0
 800c35e:	4698      	mov	r8, r3
 800c360:	4691      	mov	r9, r2
 800c362:	4642      	mov	r2, r8
 800c364:	464b      	mov	r3, r9
 800c366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c36a:	f7f4 f809 	bl	8000380 <__aeabi_uldivmod>
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4610      	mov	r0, r2
 800c374:	4619      	mov	r1, r3
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	895b      	ldrh	r3, [r3, #10]
 800c37a:	b29b      	uxth	r3, r3
 800c37c:	2200      	movs	r2, #0
 800c37e:	461c      	mov	r4, r3
 800c380:	4615      	mov	r5, r2
 800c382:	4622      	mov	r2, r4
 800c384:	462b      	mov	r3, r5
 800c386:	f7f3 fffb 	bl	8000380 <__aeabi_uldivmod>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	4613      	mov	r3, r2
 800c390:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	1d1a      	adds	r2, r3, #4
 800c396:	61ba      	str	r2, [r7, #24]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d101      	bne.n	800c3a6 <clmt_clust+0x6c>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	e010      	b.n	800c3c8 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800c3a6:	69fa      	ldr	r2, [r7, #28]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d307      	bcc.n	800c3be <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800c3ae:	69fa      	ldr	r2, [r7, #28]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	61fb      	str	r3, [r7, #28]
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c3bc:	e7e9      	b.n	800c392 <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800c3be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	4413      	add	r3, r2
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3720      	adds	r7, #32
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800c3d2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b086      	sub	sp, #24
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	2b04      	cmp	r3, #4
 800c3e8:	d102      	bne.n	800c3f0 <dir_sdi+0x1e>
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ee:	e001      	b.n	800c3f4 <dir_sdi+0x22>
 800c3f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d904      	bls.n	800c404 <dir_sdi+0x32>
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	f003 031f 	and.w	r3, r3, #31
 800c400:	2b00      	cmp	r3, #0
 800c402:	d001      	beq.n	800c408 <dir_sdi+0x36>
		return FR_INT_ERR;
 800c404:	2302      	movs	r3, #2
 800c406:	e074      	b.n	800c4f2 <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d109      	bne.n	800c42e <dir_sdi+0x5c>
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d905      	bls.n	800c42e <dir_sdi+0x5c>
		clst = fs->dirbase;
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c426:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10c      	bne.n	800c44e <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	095b      	lsrs	r3, r3, #5
 800c438:	693a      	ldr	r2, [r7, #16]
 800c43a:	8912      	ldrh	r2, [r2, #8]
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d301      	bcc.n	800c444 <dir_sdi+0x72>
 800c440:	2302      	movs	r3, #2
 800c442:	e056      	b.n	800c4f2 <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	639a      	str	r2, [r3, #56]	; 0x38
 800c44c:	e02d      	b.n	800c4aa <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	895b      	ldrh	r3, [r3, #10]
 800c452:	461a      	mov	r2, r3
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	899b      	ldrh	r3, [r3, #12]
 800c458:	fb02 f303 	mul.w	r3, r2, r3
 800c45c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c45e:	e019      	b.n	800c494 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6979      	ldr	r1, [r7, #20]
 800c464:	4618      	mov	r0, r3
 800c466:	f7ff f9e1 	bl	800b82c <get_fat>
 800c46a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c472:	d101      	bne.n	800c478 <dir_sdi+0xa6>
 800c474:	2301      	movs	r3, #1
 800c476:	e03c      	b.n	800c4f2 <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d904      	bls.n	800c488 <dir_sdi+0xb6>
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	429a      	cmp	r2, r3
 800c486:	d301      	bcc.n	800c48c <dir_sdi+0xba>
 800c488:	2302      	movs	r3, #2
 800c48a:	e032      	b.n	800c4f2 <dir_sdi+0x120>
			ofs -= csz;
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c494:	683a      	ldr	r2, [r7, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d2e1      	bcs.n	800c460 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800c49c:	6979      	ldr	r1, [r7, #20]
 800c49e:	6938      	ldr	r0, [r7, #16]
 800c4a0:	f7ff f9a4 	bl	800b7ec <clust2sect>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	697a      	ldr	r2, [r7, #20]
 800c4ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <dir_sdi+0xea>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	e01a      	b.n	800c4f2 <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	899b      	ldrh	r3, [r3, #12]
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4cc:	441a      	add	r2, r3
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	899b      	ldrh	r3, [r3, #12]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4e4:	fb00 f202 	mul.w	r2, r0, r2
 800c4e8:	1a9b      	subs	r3, r3, r2
 800c4ea:	18ca      	adds	r2, r1, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b086      	sub	sp, #24
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
 800c502:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50e:	3320      	adds	r3, #32
 800c510:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c516:	2b00      	cmp	r3, #0
 800c518:	d00b      	beq.n	800c532 <dir_next+0x38>
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d102      	bne.n	800c528 <dir_next+0x2e>
 800c522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c526:	e001      	b.n	800c52c <dir_next+0x32>
 800c528:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d801      	bhi.n	800c536 <dir_next+0x3c>
 800c532:	2304      	movs	r3, #4
 800c534:	e0c3      	b.n	800c6be <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	899b      	ldrh	r3, [r3, #12]
 800c53a:	461a      	mov	r2, r3
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c542:	fb01 f202 	mul.w	r2, r1, r2
 800c546:	1a9b      	subs	r3, r3, r2
 800c548:	2b00      	cmp	r3, #0
 800c54a:	f040 80a5 	bne.w	800c698 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c552:	1c5a      	adds	r2, r3, #1
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d10b      	bne.n	800c578 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	095b      	lsrs	r3, r3, #5
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	8912      	ldrh	r2, [r2, #8]
 800c568:	4293      	cmp	r3, r2
 800c56a:	f0c0 8095 	bcc.w	800c698 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	639a      	str	r2, [r3, #56]	; 0x38
 800c574:	2304      	movs	r3, #4
 800c576:	e0a2      	b.n	800c6be <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	899b      	ldrh	r3, [r3, #12]
 800c57c:	461a      	mov	r2, r3
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	fbb3 f3f2 	udiv	r3, r3, r2
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	8952      	ldrh	r2, [r2, #10]
 800c588:	3a01      	subs	r2, #1
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8083 	bne.w	800c698 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c598:	4619      	mov	r1, r3
 800c59a:	4610      	mov	r0, r2
 800c59c:	f7ff f946 	bl	800b82c <get_fat>
 800c5a0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d801      	bhi.n	800c5ac <dir_next+0xb2>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e088      	b.n	800c6be <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5b2:	d101      	bne.n	800c5b8 <dir_next+0xbe>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	e082      	b.n	800c6be <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d360      	bcc.n	800c684 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d104      	bne.n	800c5d2 <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	639a      	str	r2, [r3, #56]	; 0x38
 800c5ce:	2304      	movs	r3, #4
 800c5d0:	e075      	b.n	800c6be <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f7ff fdac 	bl	800c138 <create_chain>
 800c5e0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d101      	bne.n	800c5ec <dir_next+0xf2>
 800c5e8:	2307      	movs	r3, #7
 800c5ea:	e068      	b.n	800c6be <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d101      	bne.n	800c5f6 <dir_next+0xfc>
 800c5f2:	2302      	movs	r3, #2
 800c5f4:	e063      	b.n	800c6be <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5fc:	d101      	bne.n	800c602 <dir_next+0x108>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e05d      	b.n	800c6be <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	79db      	ldrb	r3, [r3, #7]
 800c606:	f043 0304 	orr.w	r3, r3, #4
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f7ff f809 	bl	800b628 <sync_window>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d001      	beq.n	800c620 <dir_next+0x126>
 800c61c:	2301      	movs	r3, #1
 800c61e:	e04e      	b.n	800c6be <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	899b      	ldrh	r3, [r3, #12]
 800c62a:	461a      	mov	r2, r3
 800c62c:	2100      	movs	r1, #0
 800c62e:	f7fe fe31 	bl	800b294 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c632:	2300      	movs	r3, #0
 800c634:	613b      	str	r3, [r7, #16]
 800c636:	6979      	ldr	r1, [r7, #20]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff f8d7 	bl	800b7ec <clust2sect>
 800c63e:	4602      	mov	r2, r0
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	639a      	str	r2, [r3, #56]	; 0x38
 800c644:	e012      	b.n	800c66c <dir_next+0x172>
						fs->wflag = 1;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	2201      	movs	r2, #1
 800c64a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f7fe ffeb 	bl	800b628 <sync_window>
 800c652:	4603      	mov	r3, r0
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <dir_next+0x162>
 800c658:	2301      	movs	r3, #1
 800c65a:	e030      	b.n	800c6be <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	3301      	adds	r3, #1
 800c660:	613b      	str	r3, [r7, #16]
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c666:	1c5a      	adds	r2, r3, #1
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	895b      	ldrh	r3, [r3, #10]
 800c670:	461a      	mov	r2, r3
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	4293      	cmp	r3, r2
 800c676:	d3e6      	bcc.n	800c646 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	1ad2      	subs	r2, r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800c68a:	6979      	ldr	r1, [r7, #20]
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f7ff f8ad 	bl	800b7ec <clust2sect>
 800c692:	4602      	mov	r2, r0
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	899b      	ldrh	r3, [r3, #12]
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800c6b0:	fb00 f202 	mul.w	r2, r0, r2
 800c6b4:	1a9b      	subs	r3, r3, r2
 800c6b6:	18ca      	adds	r2, r1, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800c6bc:	2300      	movs	r3, #0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3718      	adds	r7, #24
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b086      	sub	sp, #24
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
 800c6ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c6d6:	2100      	movs	r1, #0
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7ff fe7a 	bl	800c3d2 <dir_sdi>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d140      	bne.n	800c76a <dir_alloc+0xa4>
		n = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	f7fe ffdc 	bl	800b6b0 <move_window>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6fc:	7dfb      	ldrb	r3, [r7, #23]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d132      	bne.n	800c768 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	2b04      	cmp	r3, #4
 800c708:	d108      	bne.n	800c71c <dir_alloc+0x56>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	b25b      	sxtb	r3, r3
 800c712:	43db      	mvns	r3, r3
 800c714:	b2db      	uxtb	r3, r3
 800c716:	09db      	lsrs	r3, r3, #7
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	e00f      	b.n	800c73c <dir_alloc+0x76>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2be5      	cmp	r3, #229	; 0xe5
 800c724:	d004      	beq.n	800c730 <dir_alloc+0x6a>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <dir_alloc+0x6e>
 800c730:	2301      	movs	r3, #1
 800c732:	e000      	b.n	800c736 <dir_alloc+0x70>
 800c734:	2300      	movs	r3, #0
 800c736:	f003 0301 	and.w	r3, r3, #1
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d007      	beq.n	800c750 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	3301      	adds	r3, #1
 800c744:	613b      	str	r3, [r7, #16]
 800c746:	693a      	ldr	r2, [r7, #16]
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d102      	bne.n	800c754 <dir_alloc+0x8e>
 800c74e:	e00c      	b.n	800c76a <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c750:	2300      	movs	r3, #0
 800c752:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c754:	2101      	movs	r1, #1
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7ff fecf 	bl	800c4fa <dir_next>
 800c75c:	4603      	mov	r3, r0
 800c75e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d0c2      	beq.n	800c6ec <dir_alloc+0x26>
 800c766:	e000      	b.n	800c76a <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c768:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c76a:	7dfb      	ldrb	r3, [r7, #23]
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	d101      	bne.n	800c774 <dir_alloc+0xae>
 800c770:	2307      	movs	r3, #7
 800c772:	75fb      	strb	r3, [r7, #23]
	return res;
 800c774:	7dfb      	ldrb	r3, [r7, #23]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3718      	adds	r7, #24
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}

0800c77e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b084      	sub	sp, #16
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
 800c786:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	331a      	adds	r3, #26
 800c78c:	4618      	mov	r0, r3
 800c78e:	f7fe fb7b 	bl	800ae88 <ld_word>
 800c792:	4603      	mov	r3, r0
 800c794:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b03      	cmp	r3, #3
 800c79c:	d109      	bne.n	800c7b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	3314      	adds	r3, #20
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7fe fb70 	bl	800ae88 <ld_word>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	041b      	lsls	r3, r3, #16
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	331a      	adds	r3, #26
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	b292      	uxth	r2, r2
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fe fc6e 	bl	800b0b4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d109      	bne.n	800c7f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	f103 0214 	add.w	r2, r3, #20
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	0c1b      	lsrs	r3, r3, #16
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	4610      	mov	r0, r2
 800c7f0:	f7fe fc60 	bl	800b0b4 <st_word>
	}
}
 800c7f4:	bf00      	nop
 800c7f6:	3710      	adds	r7, #16
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c7fc:	b590      	push	{r4, r7, lr}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	331a      	adds	r3, #26
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fb3c 	bl	800ae88 <ld_word>
 800c810:	4603      	mov	r3, r0
 800c812:	2b00      	cmp	r3, #0
 800c814:	d001      	beq.n	800c81a <cmp_lfn+0x1e>
 800c816:	2300      	movs	r3, #0
 800c818:	e059      	b.n	800c8ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c822:	1e5a      	subs	r2, r3, #1
 800c824:	4613      	mov	r3, r2
 800c826:	005b      	lsls	r3, r3, #1
 800c828:	4413      	add	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c830:	2301      	movs	r3, #1
 800c832:	81fb      	strh	r3, [r7, #14]
 800c834:	2300      	movs	r3, #0
 800c836:	613b      	str	r3, [r7, #16]
 800c838:	e033      	b.n	800c8a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c83a:	4a27      	ldr	r2, [pc, #156]	; (800c8d8 <cmp_lfn+0xdc>)
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	4413      	add	r3, r2
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	461a      	mov	r2, r3
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	4413      	add	r3, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f7fe fb1d 	bl	800ae88 <ld_word>
 800c84e:	4603      	mov	r3, r0
 800c850:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c852:	89fb      	ldrh	r3, [r7, #14]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d01a      	beq.n	800c88e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	2bfe      	cmp	r3, #254	; 0xfe
 800c85c:	d812      	bhi.n	800c884 <cmp_lfn+0x88>
 800c85e:	89bb      	ldrh	r3, [r7, #12]
 800c860:	4618      	mov	r0, r3
 800c862:	f002 fd1b 	bl	800f29c <ff_wtoupper>
 800c866:	4603      	mov	r3, r0
 800c868:	461c      	mov	r4, r3
 800c86a:	697b      	ldr	r3, [r7, #20]
 800c86c:	1c5a      	adds	r2, r3, #1
 800c86e:	617a      	str	r2, [r7, #20]
 800c870:	005b      	lsls	r3, r3, #1
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	4413      	add	r3, r2
 800c876:	881b      	ldrh	r3, [r3, #0]
 800c878:	4618      	mov	r0, r3
 800c87a:	f002 fd0f 	bl	800f29c <ff_wtoupper>
 800c87e:	4603      	mov	r3, r0
 800c880:	429c      	cmp	r4, r3
 800c882:	d001      	beq.n	800c888 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c884:	2300      	movs	r3, #0
 800c886:	e022      	b.n	800c8ce <cmp_lfn+0xd2>
			}
			wc = uc;
 800c888:	89bb      	ldrh	r3, [r7, #12]
 800c88a:	81fb      	strh	r3, [r7, #14]
 800c88c:	e006      	b.n	800c89c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c88e:	89bb      	ldrh	r3, [r7, #12]
 800c890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c894:	4293      	cmp	r3, r2
 800c896:	d001      	beq.n	800c89c <cmp_lfn+0xa0>
 800c898:	2300      	movs	r3, #0
 800c89a:	e018      	b.n	800c8ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c89c:	693b      	ldr	r3, [r7, #16]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	613b      	str	r3, [r7, #16]
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	2b0c      	cmp	r3, #12
 800c8a6:	d9c8      	bls.n	800c83a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00b      	beq.n	800c8cc <cmp_lfn+0xd0>
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d008      	beq.n	800c8cc <cmp_lfn+0xd0>
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	005b      	lsls	r3, r3, #1
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	881b      	ldrh	r3, [r3, #0]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <cmp_lfn+0xd0>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	e000      	b.n	800c8ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c8cc:	2301      	movs	r3, #1
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd90      	pop	{r4, r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	080109a4 	.word	0x080109a4

0800c8dc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	331a      	adds	r3, #26
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fe facc 	bl	800ae88 <ld_word>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d001      	beq.n	800c8fa <pick_lfn+0x1e>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e04d      	b.n	800c996 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c902:	1e5a      	subs	r2, r3, #1
 800c904:	4613      	mov	r3, r2
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	4413      	add	r3, r2
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	4413      	add	r3, r2
 800c90e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c910:	2301      	movs	r3, #1
 800c912:	81fb      	strh	r3, [r7, #14]
 800c914:	2300      	movs	r3, #0
 800c916:	613b      	str	r3, [r7, #16]
 800c918:	e028      	b.n	800c96c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c91a:	4a21      	ldr	r2, [pc, #132]	; (800c9a0 <pick_lfn+0xc4>)
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	4413      	add	r3, r2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	461a      	mov	r2, r3
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	4413      	add	r3, r2
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe faad 	bl	800ae88 <ld_word>
 800c92e:	4603      	mov	r3, r0
 800c930:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c932:	89fb      	ldrh	r3, [r7, #14]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d00f      	beq.n	800c958 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	2bfe      	cmp	r3, #254	; 0xfe
 800c93c:	d901      	bls.n	800c942 <pick_lfn+0x66>
 800c93e:	2300      	movs	r3, #0
 800c940:	e029      	b.n	800c996 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c942:	89bb      	ldrh	r3, [r7, #12]
 800c944:	81fb      	strh	r3, [r7, #14]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	1c5a      	adds	r2, r3, #1
 800c94a:	617a      	str	r2, [r7, #20]
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	4413      	add	r3, r2
 800c952:	89fa      	ldrh	r2, [r7, #14]
 800c954:	801a      	strh	r2, [r3, #0]
 800c956:	e006      	b.n	800c966 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c958:	89bb      	ldrh	r3, [r7, #12]
 800c95a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c95e:	4293      	cmp	r3, r2
 800c960:	d001      	beq.n	800c966 <pick_lfn+0x8a>
 800c962:	2300      	movs	r3, #0
 800c964:	e017      	b.n	800c996 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	3301      	adds	r3, #1
 800c96a:	613b      	str	r3, [r7, #16]
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	2b0c      	cmp	r3, #12
 800c970:	d9d3      	bls.n	800c91a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2bfe      	cmp	r3, #254	; 0xfe
 800c982:	d901      	bls.n	800c988 <pick_lfn+0xac>
 800c984:	2300      	movs	r3, #0
 800c986:	e006      	b.n	800c996 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	005b      	lsls	r3, r3, #1
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	4413      	add	r3, r2
 800c990:	2200      	movs	r2, #0
 800c992:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c994:	2301      	movs	r3, #1
}
 800c996:	4618      	mov	r0, r3
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	080109a4 	.word	0x080109a4

0800c9a4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	460b      	mov	r3, r1
 800c9b4:	71fb      	strb	r3, [r7, #7]
 800c9b6:	4613      	mov	r3, r2
 800c9b8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	330d      	adds	r3, #13
 800c9be:	79ba      	ldrb	r2, [r7, #6]
 800c9c0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	330b      	adds	r3, #11
 800c9c6:	220f      	movs	r2, #15
 800c9c8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	330c      	adds	r3, #12
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	331a      	adds	r3, #26
 800c9d6:	2100      	movs	r1, #0
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fb6b 	bl	800b0b4 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	1e5a      	subs	r2, r3, #1
 800c9e2:	4613      	mov	r3, r2
 800c9e4:	005b      	lsls	r3, r3, #1
 800c9e6:	4413      	add	r3, r2
 800c9e8:	009b      	lsls	r3, r3, #2
 800c9ea:	4413      	add	r3, r2
 800c9ec:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	82fb      	strh	r3, [r7, #22]
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c9f6:	8afb      	ldrh	r3, [r7, #22]
 800c9f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d007      	beq.n	800ca10 <put_lfn+0x6c>
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	61fa      	str	r2, [r7, #28]
 800ca06:	005b      	lsls	r3, r3, #1
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca10:	4a17      	ldr	r2, [pc, #92]	; (800ca70 <put_lfn+0xcc>)
 800ca12:	69bb      	ldr	r3, [r7, #24]
 800ca14:	4413      	add	r3, r2
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	461a      	mov	r2, r3
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	8afa      	ldrh	r2, [r7, #22]
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fe fb46 	bl	800b0b4 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ca28:	8afb      	ldrh	r3, [r7, #22]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d102      	bne.n	800ca34 <put_lfn+0x90>
 800ca2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca32:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	3301      	adds	r3, #1
 800ca38:	61bb      	str	r3, [r7, #24]
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	2b0c      	cmp	r3, #12
 800ca3e:	d9da      	bls.n	800c9f6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ca40:	8afb      	ldrh	r3, [r7, #22]
 800ca42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d006      	beq.n	800ca58 <put_lfn+0xb4>
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	68fa      	ldr	r2, [r7, #12]
 800ca50:	4413      	add	r3, r2
 800ca52:	881b      	ldrh	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d103      	bne.n	800ca60 <put_lfn+0xbc>
 800ca58:	79fb      	ldrb	r3, [r7, #7]
 800ca5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca5e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	79fa      	ldrb	r2, [r7, #7]
 800ca64:	701a      	strb	r2, [r3, #0]
}
 800ca66:	bf00      	nop
 800ca68:	3720      	adds	r7, #32
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}
 800ca6e:	bf00      	nop
 800ca70:	080109a4 	.word	0x080109a4

0800ca74 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08c      	sub	sp, #48	; 0x30
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	60b9      	str	r1, [r7, #8]
 800ca7e:	607a      	str	r2, [r7, #4]
 800ca80:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ca82:	220b      	movs	r2, #11
 800ca84:	68b9      	ldr	r1, [r7, #8]
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f7fe fbe3 	bl	800b252 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	2b05      	cmp	r3, #5
 800ca90:	d929      	bls.n	800cae6 <gen_numname+0x72>
		sr = seq;
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ca96:	e020      	b.n	800cada <gen_numname+0x66>
			wc = *lfn++;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	1c9a      	adds	r2, r3, #2
 800ca9c:	607a      	str	r2, [r7, #4]
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800caa2:	2300      	movs	r3, #0
 800caa4:	62bb      	str	r3, [r7, #40]	; 0x28
 800caa6:	e015      	b.n	800cad4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800caa8:	69fb      	ldr	r3, [r7, #28]
 800caaa:	005a      	lsls	r2, r3, #1
 800caac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	4413      	add	r3, r2
 800cab4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cab8:	085b      	lsrs	r3, r3, #1
 800caba:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d003      	beq.n	800cace <gen_numname+0x5a>
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	4b30      	ldr	r3, [pc, #192]	; (800cb8c <gen_numname+0x118>)
 800caca:	4053      	eors	r3, r2
 800cacc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	3301      	adds	r3, #1
 800cad2:	62bb      	str	r3, [r7, #40]	; 0x28
 800cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad6:	2b0f      	cmp	r3, #15
 800cad8:	d9e6      	bls.n	800caa8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	881b      	ldrh	r3, [r3, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1da      	bne.n	800ca98 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cae6:	2307      	movs	r3, #7
 800cae8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	b2db      	uxtb	r3, r3
 800caee:	f003 030f 	and.w	r3, r3, #15
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	3330      	adds	r3, #48	; 0x30
 800caf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cafa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cafe:	2b39      	cmp	r3, #57	; 0x39
 800cb00:	d904      	bls.n	800cb0c <gen_numname+0x98>
 800cb02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cb06:	3307      	adds	r3, #7
 800cb08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	1e5a      	subs	r2, r3, #1
 800cb10:	62ba      	str	r2, [r7, #40]	; 0x28
 800cb12:	3330      	adds	r3, #48	; 0x30
 800cb14:	443b      	add	r3, r7
 800cb16:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cb1a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	091b      	lsrs	r3, r3, #4
 800cb22:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1df      	bne.n	800caea <gen_numname+0x76>
	ns[i] = '~';
 800cb2a:	f107 0214 	add.w	r2, r7, #20
 800cb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb30:	4413      	add	r3, r2
 800cb32:	227e      	movs	r2, #126	; 0x7e
 800cb34:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cb36:	2300      	movs	r3, #0
 800cb38:	627b      	str	r3, [r7, #36]	; 0x24
 800cb3a:	e002      	b.n	800cb42 <gen_numname+0xce>
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	3301      	adds	r3, #1
 800cb40:	627b      	str	r3, [r7, #36]	; 0x24
 800cb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb46:	429a      	cmp	r2, r3
 800cb48:	d205      	bcs.n	800cb56 <gen_numname+0xe2>
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	4413      	add	r3, r2
 800cb50:	781b      	ldrb	r3, [r3, #0]
 800cb52:	2b20      	cmp	r3, #32
 800cb54:	d1f2      	bne.n	800cb3c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb58:	2b07      	cmp	r3, #7
 800cb5a:	d807      	bhi.n	800cb6c <gen_numname+0xf8>
 800cb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5e:	1c5a      	adds	r2, r3, #1
 800cb60:	62ba      	str	r2, [r7, #40]	; 0x28
 800cb62:	3330      	adds	r3, #48	; 0x30
 800cb64:	443b      	add	r3, r7
 800cb66:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cb6a:	e000      	b.n	800cb6e <gen_numname+0xfa>
 800cb6c:	2120      	movs	r1, #32
 800cb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	627a      	str	r2, [r7, #36]	; 0x24
 800cb74:	68fa      	ldr	r2, [r7, #12]
 800cb76:	4413      	add	r3, r2
 800cb78:	460a      	mov	r2, r1
 800cb7a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	2b07      	cmp	r3, #7
 800cb80:	d9e9      	bls.n	800cb56 <gen_numname+0xe2>
}
 800cb82:	bf00      	nop
 800cb84:	bf00      	nop
 800cb86:	3730      	adds	r7, #48	; 0x30
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	00011021 	.word	0x00011021

0800cb90 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cb9c:	230b      	movs	r3, #11
 800cb9e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cba0:	7bfb      	ldrb	r3, [r7, #15]
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	0852      	lsrs	r2, r2, #1
 800cba6:	01db      	lsls	r3, r3, #7
 800cba8:	4313      	orrs	r3, r2
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	1c59      	adds	r1, r3, #1
 800cbb0:	6079      	str	r1, [r7, #4]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cbb8:	68bb      	ldr	r3, [r7, #8]
 800cbba:	3b01      	subs	r3, #1
 800cbbc:	60bb      	str	r3, [r7, #8]
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d1ed      	bne.n	800cba0 <sum_sfn+0x10>
	return sum;
 800cbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3714      	adds	r7, #20
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr

0800cbd2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800cbd2:	b480      	push	{r7}
 800cbd4:	b087      	sub	sp, #28
 800cbd6:	af00      	add	r7, sp, #0
 800cbd8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	015b      	lsls	r3, r3, #5
 800cbe4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	827b      	strh	r3, [r7, #18]
 800cbea:	2300      	movs	r3, #0
 800cbec:	617b      	str	r3, [r7, #20]
 800cbee:	e018      	b.n	800cc22 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d103      	bne.n	800cbfe <xdir_sum+0x2c>
			i++;
 800cbf6:	697b      	ldr	r3, [r7, #20]
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	617b      	str	r3, [r7, #20]
 800cbfc:	e00e      	b.n	800cc1c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800cbfe:	8a7b      	ldrh	r3, [r7, #18]
 800cc00:	03db      	lsls	r3, r3, #15
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	8a7b      	ldrh	r3, [r7, #18]
 800cc06:	085b      	lsrs	r3, r3, #1
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	4413      	add	r3, r2
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	6879      	ldr	r1, [r7, #4]
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	440b      	add	r3, r1
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	4413      	add	r3, r2
 800cc1a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	617b      	str	r3, [r7, #20]
 800cc22:	697a      	ldr	r2, [r7, #20]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d3e2      	bcc.n	800cbf0 <xdir_sum+0x1e>
		}
	}
	return sum;
 800cc2a:	8a7b      	ldrh	r3, [r7, #18]
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	371c      	adds	r7, #28
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800cc40:	2300      	movs	r3, #0
 800cc42:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800cc44:	e01f      	b.n	800cc86 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800cc46:	89bb      	ldrh	r3, [r7, #12]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f002 fb27 	bl	800f29c <ff_wtoupper>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800cc52:	89fb      	ldrh	r3, [r7, #14]
 800cc54:	03db      	lsls	r3, r3, #15
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	89fb      	ldrh	r3, [r7, #14]
 800cc5a:	085b      	lsrs	r3, r3, #1
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	4413      	add	r3, r2
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	89bb      	ldrh	r3, [r7, #12]
 800cc64:	b2db      	uxtb	r3, r3
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	4413      	add	r3, r2
 800cc6a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800cc6c:	89fb      	ldrh	r3, [r7, #14]
 800cc6e:	03db      	lsls	r3, r3, #15
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	89fb      	ldrh	r3, [r7, #14]
 800cc74:	085b      	lsrs	r3, r3, #1
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	4413      	add	r3, r2
 800cc7a:	b29a      	uxth	r2, r3
 800cc7c:	89bb      	ldrh	r3, [r7, #12]
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	4413      	add	r3, r2
 800cc84:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	1c9a      	adds	r2, r3, #2
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	81bb      	strh	r3, [r7, #12]
 800cc90:	89bb      	ldrh	r3, [r7, #12]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1d7      	bne.n	800cc46 <xname_sum+0xe>
	}
	return sum;
 800cc96:	89fb      	ldrh	r3, [r7, #14]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800cca0:	b590      	push	{r4, r7, lr}
 800cca2:	b087      	sub	sp, #28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	695b      	ldr	r3, [r3, #20]
 800ccae:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681a      	ldr	r2, [r3, #0]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb8:	4619      	mov	r1, r3
 800ccba:	4610      	mov	r0, r2
 800ccbc:	f7fe fcf8 	bl	800b6b0 <move_window>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d001      	beq.n	800ccce <load_xdir+0x2e>
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
 800cccc:	e09f      	b.n	800ce0e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	2b85      	cmp	r3, #133	; 0x85
 800ccd6:	d001      	beq.n	800ccdc <load_xdir+0x3c>
 800ccd8:	2302      	movs	r3, #2
 800ccda:	e098      	b.n	800ce0e <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce0:	2220      	movs	r2, #32
 800cce2:	4619      	mov	r1, r3
 800cce4:	6938      	ldr	r0, [r7, #16]
 800cce6:	f7fe fab4 	bl	800b252 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	3301      	adds	r3, #1
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	015b      	lsls	r3, r3, #5
 800ccf4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2b5f      	cmp	r3, #95	; 0x5f
 800ccfa:	d903      	bls.n	800cd04 <load_xdir+0x64>
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800cd02:	d901      	bls.n	800cd08 <load_xdir+0x68>
 800cd04:	2302      	movs	r3, #2
 800cd06:	e082      	b.n	800ce0e <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800cd08:	2100      	movs	r1, #0
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fbf5 	bl	800c4fa <dir_next>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cd14:	7bfb      	ldrb	r3, [r7, #15]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d001      	beq.n	800cd1e <load_xdir+0x7e>
 800cd1a:	7bfb      	ldrb	r3, [r7, #15]
 800cd1c:	e077      	b.n	800ce0e <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd26:	4619      	mov	r1, r3
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f7fe fcc1 	bl	800b6b0 <move_window>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <load_xdir+0x9c>
 800cd38:	7bfb      	ldrb	r3, [r7, #15]
 800cd3a:	e068      	b.n	800ce0e <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2bc0      	cmp	r3, #192	; 0xc0
 800cd44:	d001      	beq.n	800cd4a <load_xdir+0xaa>
 800cd46:	2302      	movs	r3, #2
 800cd48:	e061      	b.n	800ce0e <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	f103 0020 	add.w	r0, r3, #32
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd54:	2220      	movs	r2, #32
 800cd56:	4619      	mov	r1, r3
 800cd58:	f7fe fa7b 	bl	800b252 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	3323      	adds	r3, #35	; 0x23
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	332c      	adds	r3, #44	; 0x2c
 800cd64:	4a2c      	ldr	r2, [pc, #176]	; (800ce18 <load_xdir+0x178>)
 800cd66:	fba2 2303 	umull	r2, r3, r2, r3
 800cd6a:	08db      	lsrs	r3, r3, #3
 800cd6c:	015b      	lsls	r3, r3, #5
 800cd6e:	68ba      	ldr	r2, [r7, #8]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d201      	bcs.n	800cd78 <load_xdir+0xd8>
 800cd74:	2302      	movs	r3, #2
 800cd76:	e04a      	b.n	800ce0e <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800cd7c:	2100      	movs	r1, #0
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f7ff fbbb 	bl	800c4fa <dir_next>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cd88:	7bfb      	ldrb	r3, [r7, #15]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <load_xdir+0xf2>
 800cd8e:	7bfb      	ldrb	r3, [r7, #15]
 800cd90:	e03d      	b.n	800ce0e <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	4610      	mov	r0, r2
 800cd9e:	f7fe fc87 	bl	800b6b0 <move_window>
 800cda2:	4603      	mov	r3, r0
 800cda4:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d001      	beq.n	800cdb0 <load_xdir+0x110>
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
 800cdae:	e02e      	b.n	800ce0e <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	2bc1      	cmp	r3, #193	; 0xc1
 800cdb8:	d001      	beq.n	800cdbe <load_xdir+0x11e>
 800cdba:	2302      	movs	r3, #2
 800cdbc:	e027      	b.n	800ce0e <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800cdc4:	d208      	bcs.n	800cdd8 <load_xdir+0x138>
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	18d0      	adds	r0, r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	f7fe fa3d 	bl	800b252 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	3320      	adds	r3, #32
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	697a      	ldr	r2, [r7, #20]
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d3ca      	bcc.n	800cd7c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800cdec:	d80e      	bhi.n	800ce0c <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800cdee:	6938      	ldr	r0, [r7, #16]
 800cdf0:	f7ff feef 	bl	800cbd2 <xdir_sum>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	461c      	mov	r4, r3
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	3302      	adds	r3, #2
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fe f843 	bl	800ae88 <ld_word>
 800ce02:	4603      	mov	r3, r0
 800ce04:	429c      	cmp	r4, r3
 800ce06:	d001      	beq.n	800ce0c <load_xdir+0x16c>
 800ce08:	2302      	movs	r3, #2
 800ce0a:	e000      	b.n	800ce0e <load_xdir+0x16e>
	}
	return FR_OK;
 800ce0c:	2300      	movs	r3, #0
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	371c      	adds	r7, #28
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd90      	pop	{r4, r7, pc}
 800ce16:	bf00      	nop
 800ce18:	88888889 	.word	0x88888889

0800ce1c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800ce1c:	b5b0      	push	{r4, r5, r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	6808      	ldr	r0, [r1, #0]
 800ce2a:	6879      	ldr	r1, [r7, #4]
 800ce2c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	6a08      	ldr	r0, [r1, #32]
 800ce32:	6879      	ldr	r1, [r7, #4]
 800ce34:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800ce36:	6839      	ldr	r1, [r7, #0]
 800ce38:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ce3a:	b2c8      	uxtb	r0, r1
 800ce3c:	6879      	ldr	r1, [r7, #4]
 800ce3e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800ce40:	6839      	ldr	r1, [r7, #0]
 800ce42:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ce44:	2000      	movs	r0, #0
 800ce46:	460c      	mov	r4, r1
 800ce48:	4605      	mov	r5, r0
 800ce4a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ce4e:	2300      	movs	r3, #0
 800ce50:	6879      	ldr	r1, [r7, #4]
 800ce52:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce62:	4619      	mov	r1, r3
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff fab4 	bl	800c3d2 <dir_sdi>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d104      	bne.n	800ce7e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f7ff ff13 	bl	800cca0 <load_xdir>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800ce7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3710      	adds	r7, #16
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bdb0      	pop	{r4, r5, r7, pc}

0800ce88 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800ce88:	b590      	push	{r4, r7, lr}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	695b      	ldr	r3, [r3, #20]
 800ce96:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	1c9c      	adds	r4, r3, #2
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7ff fe98 	bl	800cbd2 <xdir_sum>
 800cea2:	4603      	mov	r3, r0
 800cea4:	4619      	mov	r1, r3
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7fe f904 	bl	800b0b4 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ceba:	4619      	mov	r1, r3
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f7ff fa88 	bl	800c3d2 <dir_sdi>
 800cec2:	4603      	mov	r3, r0
 800cec4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cec6:	e026      	b.n	800cf16 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced0:	4619      	mov	r1, r3
 800ced2:	4610      	mov	r0, r2
 800ced4:	f7fe fbec 	bl	800b6b0 <move_window>
 800ced8:	4603      	mov	r3, r0
 800ceda:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d11d      	bne.n	800cf1e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cee6:	2220      	movs	r2, #32
 800cee8:	68f9      	ldr	r1, [r7, #12]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f7fe f9b1 	bl	800b252 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2201      	movs	r2, #1
 800cef6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	3b01      	subs	r3, #1
 800cefc:	613b      	str	r3, [r7, #16]
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00e      	beq.n	800cf22 <store_xdir+0x9a>
		dirb += SZDIRE;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	3320      	adds	r3, #32
 800cf08:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff faf4 	bl	800c4fa <dir_next>
 800cf12:	4603      	mov	r3, r0
 800cf14:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800cf16:	7dfb      	ldrb	r3, [r7, #23]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d0d5      	beq.n	800cec8 <store_xdir+0x40>
 800cf1c:	e002      	b.n	800cf24 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800cf1e:	bf00      	nop
 800cf20:	e000      	b.n	800cf24 <store_xdir+0x9c>
		if (--nent == 0) break;
 800cf22:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800cf24:	7dfb      	ldrb	r3, [r7, #23]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d002      	beq.n	800cf30 <store_xdir+0xa8>
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d101      	bne.n	800cf34 <store_xdir+0xac>
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
 800cf32:	e000      	b.n	800cf36 <store_xdir+0xae>
 800cf34:	2302      	movs	r3, #2
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	bd90      	pop	{r4, r7, pc}

0800cf3e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800cf3e:	b590      	push	{r4, r7, lr}
 800cf40:	b085      	sub	sp, #20
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	6078      	str	r0, [r7, #4]
 800cf46:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800cf48:	2240      	movs	r2, #64	; 0x40
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f7fe f9a1 	bl	800b294 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2285      	movs	r2, #133	; 0x85
 800cf56:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3320      	adds	r3, #32
 800cf5c:	22c0      	movs	r2, #192	; 0xc0
 800cf5e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800cf60:	2300      	movs	r3, #0
 800cf62:	72bb      	strb	r3, [r7, #10]
 800cf64:	2301      	movs	r3, #1
 800cf66:	72fb      	strb	r3, [r7, #11]
 800cf68:	2301      	movs	r3, #1
 800cf6a:	813b      	strh	r3, [r7, #8]
 800cf6c:	2340      	movs	r3, #64	; 0x40
 800cf6e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	1c5a      	adds	r2, r3, #1
 800cf74:	60fa      	str	r2, [r7, #12]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	4413      	add	r3, r2
 800cf7a:	22c1      	movs	r2, #193	; 0xc1
 800cf7c:	701a      	strb	r2, [r3, #0]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	60fa      	str	r2, [r7, #12]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	4413      	add	r3, r2
 800cf88:	2200      	movs	r2, #0
 800cf8a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800cf8c:	893b      	ldrh	r3, [r7, #8]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00b      	beq.n	800cfaa <create_xdir+0x6c>
 800cf92:	7abb      	ldrb	r3, [r7, #10]
 800cf94:	005b      	lsls	r3, r3, #1
 800cf96:	683a      	ldr	r2, [r7, #0]
 800cf98:	4413      	add	r3, r2
 800cf9a:	881b      	ldrh	r3, [r3, #0]
 800cf9c:	813b      	strh	r3, [r7, #8]
 800cf9e:	893b      	ldrh	r3, [r7, #8]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d002      	beq.n	800cfaa <create_xdir+0x6c>
 800cfa4:	7abb      	ldrb	r3, [r7, #10]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	4413      	add	r3, r2
 800cfb0:	893a      	ldrh	r2, [r7, #8]
 800cfb2:	4611      	mov	r1, r2
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fe f87d 	bl	800b0b4 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	3302      	adds	r3, #2
 800cfbe:	60fb      	str	r3, [r7, #12]
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f003 031f 	and.w	r3, r3, #31
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1e0      	bne.n	800cf8c <create_xdir+0x4e>
		nb++;
 800cfca:	7afb      	ldrb	r3, [r7, #11]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800cfd0:	7abb      	ldrb	r3, [r7, #10]
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	683a      	ldr	r2, [r7, #0]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	881b      	ldrh	r3, [r3, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d1c8      	bne.n	800cf70 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	3323      	adds	r3, #35	; 0x23
 800cfe2:	7aba      	ldrb	r2, [r7, #10]
 800cfe4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	7afa      	ldrb	r2, [r7, #11]
 800cfec:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800cff4:	6838      	ldr	r0, [r7, #0]
 800cff6:	f7ff fe1f 	bl	800cc38 <xname_sum>
 800cffa:	4603      	mov	r3, r0
 800cffc:	4619      	mov	r1, r3
 800cffe:	4620      	mov	r0, r4
 800d000:	f7fe f858 	bl	800b0b4 <st_word>
}
 800d004:	bf00      	nop
 800d006:	3714      	adds	r7, #20
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd90      	pop	{r4, r7, pc}

0800d00c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800d016:	2304      	movs	r3, #4
 800d018:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800d020:	23ff      	movs	r3, #255	; 0xff
 800d022:	757b      	strb	r3, [r7, #21]
 800d024:	23ff      	movs	r3, #255	; 0xff
 800d026:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800d028:	e09f      	b.n	800d16a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02e:	4619      	mov	r1, r3
 800d030:	6938      	ldr	r0, [r7, #16]
 800d032:	f7fe fb3d 	bl	800b6b0 <move_window>
 800d036:	4603      	mov	r3, r0
 800d038:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d03a:	7dfb      	ldrb	r3, [r7, #23]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f040 809a 	bne.w	800d176 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800d04a:	7dbb      	ldrb	r3, [r7, #22]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d102      	bne.n	800d056 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800d050:	2304      	movs	r3, #4
 800d052:	75fb      	strb	r3, [r7, #23]
 800d054:	e096      	b.n	800d184 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	2b04      	cmp	r3, #4
 800d05c:	d118      	bne.n	800d090 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800d05e:	7dbb      	ldrb	r3, [r7, #22]
 800d060:	2b85      	cmp	r3, #133	; 0x85
 800d062:	d179      	bne.n	800d158 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7ff fe17 	bl	800cca0 <load_xdir>
 800d072:	4603      	mov	r3, r0
 800d074:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800d076:	7dfb      	ldrb	r3, [r7, #23]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d17e      	bne.n	800d17a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800d07c:	693b      	ldr	r3, [r7, #16]
 800d07e:	695b      	ldr	r3, [r3, #20]
 800d080:	3304      	adds	r3, #4
 800d082:	781b      	ldrb	r3, [r3, #0]
 800d084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800d08e:	e074      	b.n	800d17a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d094:	330b      	adds	r3, #11
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d09c:	73fb      	strb	r3, [r7, #15]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	7bfa      	ldrb	r2, [r7, #15]
 800d0a2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d0a4:	7dbb      	ldrb	r3, [r7, #22]
 800d0a6:	2be5      	cmp	r3, #229	; 0xe5
 800d0a8:	d00e      	beq.n	800d0c8 <dir_read+0xbc>
 800d0aa:	7dbb      	ldrb	r3, [r7, #22]
 800d0ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ae:	d00b      	beq.n	800d0c8 <dir_read+0xbc>
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	f023 0320 	bic.w	r3, r3, #32
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	bf0c      	ite	eq
 800d0ba:	2301      	moveq	r3, #1
 800d0bc:	2300      	movne	r3, #0
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d002      	beq.n	800d0ce <dir_read+0xc2>
				ord = 0xFF;
 800d0c8:	23ff      	movs	r3, #255	; 0xff
 800d0ca:	757b      	strb	r3, [r7, #21]
 800d0cc:	e044      	b.n	800d158 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d0ce:	7bfb      	ldrb	r3, [r7, #15]
 800d0d0:	2b0f      	cmp	r3, #15
 800d0d2:	d12f      	bne.n	800d134 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d0d4:	7dbb      	ldrb	r3, [r7, #22]
 800d0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00d      	beq.n	800d0fa <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0e2:	7b5b      	ldrb	r3, [r3, #13]
 800d0e4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800d0e6:	7dbb      	ldrb	r3, [r7, #22]
 800d0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0ec:	75bb      	strb	r3, [r7, #22]
 800d0ee:	7dbb      	ldrb	r3, [r7, #22]
 800d0f0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d0fa:	7dba      	ldrb	r2, [r7, #22]
 800d0fc:	7d7b      	ldrb	r3, [r7, #21]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d115      	bne.n	800d12e <dir_read+0x122>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d106:	330d      	adds	r3, #13
 800d108:	781b      	ldrb	r3, [r3, #0]
 800d10a:	7d3a      	ldrb	r2, [r7, #20]
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d10e      	bne.n	800d12e <dir_read+0x122>
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	691a      	ldr	r2, [r3, #16]
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f7ff fbde 	bl	800c8dc <pick_lfn>
 800d120:	4603      	mov	r3, r0
 800d122:	2b00      	cmp	r3, #0
 800d124:	d003      	beq.n	800d12e <dir_read+0x122>
 800d126:	7d7b      	ldrb	r3, [r7, #21]
 800d128:	3b01      	subs	r3, #1
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	e000      	b.n	800d130 <dir_read+0x124>
 800d12e:	23ff      	movs	r3, #255	; 0xff
 800d130:	757b      	strb	r3, [r7, #21]
 800d132:	e011      	b.n	800d158 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800d134:	7d7b      	ldrb	r3, [r7, #21]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d109      	bne.n	800d14e <dir_read+0x142>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d13e:	4618      	mov	r0, r3
 800d140:	f7ff fd26 	bl	800cb90 <sum_sfn>
 800d144:	4603      	mov	r3, r0
 800d146:	461a      	mov	r2, r3
 800d148:	7d3b      	ldrb	r3, [r7, #20]
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d017      	beq.n	800d17e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f04f 32ff 	mov.w	r2, #4294967295
 800d154:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800d156:	e012      	b.n	800d17e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800d158:	2100      	movs	r1, #0
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff f9cd 	bl	800c4fa <dir_next>
 800d160:	4603      	mov	r3, r0
 800d162:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d164:	7dfb      	ldrb	r3, [r7, #23]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d10b      	bne.n	800d182 <dir_read+0x176>
	while (dp->sect) {
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f47f af5b 	bne.w	800d02a <dir_read+0x1e>
 800d174:	e006      	b.n	800d184 <dir_read+0x178>
		if (res != FR_OK) break;
 800d176:	bf00      	nop
 800d178:	e004      	b.n	800d184 <dir_read+0x178>
					break;
 800d17a:	bf00      	nop
 800d17c:	e002      	b.n	800d184 <dir_read+0x178>
					break;
 800d17e:	bf00      	nop
 800d180:	e000      	b.n	800d184 <dir_read+0x178>
		if (res != FR_OK) break;
 800d182:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d184:	7dfb      	ldrb	r3, [r7, #23]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d002      	beq.n	800d190 <dir_read+0x184>
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2200      	movs	r2, #0
 800d18e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800d190:	7dfb      	ldrb	r3, [r7, #23]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3718      	adds	r7, #24
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d19a:	b590      	push	{r4, r7, lr}
 800d19c:	b089      	sub	sp, #36	; 0x24
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7ff f911 	bl	800c3d2 <dir_sdi>
 800d1b0:	4603      	mov	r3, r0
 800d1b2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800d1b4:	7ffb      	ldrb	r3, [r7, #31]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <dir_find+0x24>
 800d1ba:	7ffb      	ldrb	r3, [r7, #31]
 800d1bc:	e112      	b.n	800d3e4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	781b      	ldrb	r3, [r3, #0]
 800d1c2:	2b04      	cmp	r3, #4
 800d1c4:	d164      	bne.n	800d290 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff fd34 	bl	800cc38 <xname_sum>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d1d4:	e04f      	b.n	800d276 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	3324      	adds	r3, #36	; 0x24
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fd fe53 	bl	800ae88 <ld_word>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	893b      	ldrh	r3, [r7, #8]
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d000      	beq.n	800d1ee <dir_find+0x54>
 800d1ec:	e043      	b.n	800d276 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800d1f6:	76fb      	strb	r3, [r7, #27]
 800d1f8:	2340      	movs	r3, #64	; 0x40
 800d1fa:	617b      	str	r3, [r7, #20]
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	613b      	str	r3, [r7, #16]
 800d200:	e029      	b.n	800d256 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f003 031f 	and.w	r3, r3, #31
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d102      	bne.n	800d212 <dir_find+0x78>
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	3302      	adds	r3, #2
 800d210:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	695a      	ldr	r2, [r3, #20]
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	4413      	add	r3, r2
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fd fe34 	bl	800ae88 <ld_word>
 800d220:	4603      	mov	r3, r0
 800d222:	4618      	mov	r0, r3
 800d224:	f002 f83a 	bl	800f29c <ff_wtoupper>
 800d228:	4603      	mov	r3, r0
 800d22a:	461c      	mov	r4, r3
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	691a      	ldr	r2, [r3, #16]
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	005b      	lsls	r3, r3, #1
 800d234:	4413      	add	r3, r2
 800d236:	881b      	ldrh	r3, [r3, #0]
 800d238:	4618      	mov	r0, r3
 800d23a:	f002 f82f 	bl	800f29c <ff_wtoupper>
 800d23e:	4603      	mov	r3, r0
 800d240:	429c      	cmp	r4, r3
 800d242:	d10c      	bne.n	800d25e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800d244:	7efb      	ldrb	r3, [r7, #27]
 800d246:	3b01      	subs	r3, #1
 800d248:	76fb      	strb	r3, [r7, #27]
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	3302      	adds	r3, #2
 800d24e:	617b      	str	r3, [r7, #20]
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	3301      	adds	r3, #1
 800d254:	613b      	str	r3, [r7, #16]
 800d256:	7efb      	ldrb	r3, [r7, #27]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1d2      	bne.n	800d202 <dir_find+0x68>
 800d25c:	e000      	b.n	800d260 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800d25e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d260:	7efb      	ldrb	r3, [r7, #27]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d107      	bne.n	800d276 <dir_find+0xdc>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	691a      	ldr	r2, [r3, #16]
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	4413      	add	r3, r2
 800d270:	881b      	ldrh	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d009      	beq.n	800d28a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800d276:	2100      	movs	r1, #0
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff fec7 	bl	800d00c <dir_read>
 800d27e:	4603      	mov	r3, r0
 800d280:	77fb      	strb	r3, [r7, #31]
 800d282:	7ffb      	ldrb	r3, [r7, #31]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d0a6      	beq.n	800d1d6 <dir_find+0x3c>
 800d288:	e000      	b.n	800d28c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800d28a:	bf00      	nop
		}
		return res;
 800d28c:	7ffb      	ldrb	r3, [r7, #31]
 800d28e:	e0a9      	b.n	800d3e4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d290:	23ff      	movs	r3, #255	; 0xff
 800d292:	773b      	strb	r3, [r7, #28]
 800d294:	7f3b      	ldrb	r3, [r7, #28]
 800d296:	777b      	strb	r3, [r7, #29]
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	68f8      	ldr	r0, [r7, #12]
 800d2a8:	f7fe fa02 	bl	800b6b0 <move_window>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800d2b0:	7ffb      	ldrb	r3, [r7, #31]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	f040 8090 	bne.w	800d3d8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d2c0:	7fbb      	ldrb	r3, [r7, #30]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d102      	bne.n	800d2cc <dir_find+0x132>
 800d2c6:	2304      	movs	r3, #4
 800d2c8:	77fb      	strb	r3, [r7, #31]
 800d2ca:	e08a      	b.n	800d3e2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2d0:	330b      	adds	r3, #11
 800d2d2:	781b      	ldrb	r3, [r3, #0]
 800d2d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d2d8:	72fb      	strb	r3, [r7, #11]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	7afa      	ldrb	r2, [r7, #11]
 800d2de:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d2e0:	7fbb      	ldrb	r3, [r7, #30]
 800d2e2:	2be5      	cmp	r3, #229	; 0xe5
 800d2e4:	d007      	beq.n	800d2f6 <dir_find+0x15c>
 800d2e6:	7afb      	ldrb	r3, [r7, #11]
 800d2e8:	f003 0308 	and.w	r3, r3, #8
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d009      	beq.n	800d304 <dir_find+0x16a>
 800d2f0:	7afb      	ldrb	r3, [r7, #11]
 800d2f2:	2b0f      	cmp	r3, #15
 800d2f4:	d006      	beq.n	800d304 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d2f6:	23ff      	movs	r3, #255	; 0xff
 800d2f8:	777b      	strb	r3, [r7, #29]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d300:	64da      	str	r2, [r3, #76]	; 0x4c
 800d302:	e05e      	b.n	800d3c2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d304:	7afb      	ldrb	r3, [r7, #11]
 800d306:	2b0f      	cmp	r3, #15
 800d308:	d136      	bne.n	800d378 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d314:	2b00      	cmp	r3, #0
 800d316:	d154      	bne.n	800d3c2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d318:	7fbb      	ldrb	r3, [r7, #30]
 800d31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00d      	beq.n	800d33e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d326:	7b5b      	ldrb	r3, [r3, #13]
 800d328:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d32a:	7fbb      	ldrb	r3, [r7, #30]
 800d32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d330:	77bb      	strb	r3, [r7, #30]
 800d332:	7fbb      	ldrb	r3, [r7, #30]
 800d334:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d33e:	7fba      	ldrb	r2, [r7, #30]
 800d340:	7f7b      	ldrb	r3, [r7, #29]
 800d342:	429a      	cmp	r2, r3
 800d344:	d115      	bne.n	800d372 <dir_find+0x1d8>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d34a:	330d      	adds	r3, #13
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	7f3a      	ldrb	r2, [r7, #28]
 800d350:	429a      	cmp	r2, r3
 800d352:	d10e      	bne.n	800d372 <dir_find+0x1d8>
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	691a      	ldr	r2, [r3, #16]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d35c:	4619      	mov	r1, r3
 800d35e:	4610      	mov	r0, r2
 800d360:	f7ff fa4c 	bl	800c7fc <cmp_lfn>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d003      	beq.n	800d372 <dir_find+0x1d8>
 800d36a:	7f7b      	ldrb	r3, [r7, #29]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	e000      	b.n	800d374 <dir_find+0x1da>
 800d372:	23ff      	movs	r3, #255	; 0xff
 800d374:	777b      	strb	r3, [r7, #29]
 800d376:	e024      	b.n	800d3c2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d378:	7f7b      	ldrb	r3, [r7, #29]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d109      	bne.n	800d392 <dir_find+0x1f8>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d382:	4618      	mov	r0, r3
 800d384:	f7ff fc04 	bl	800cb90 <sum_sfn>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	7f3b      	ldrb	r3, [r7, #28]
 800d38e:	4293      	cmp	r3, r2
 800d390:	d024      	beq.n	800d3dc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d398:	f003 0301 	and.w	r3, r3, #1
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10a      	bne.n	800d3b6 <dir_find+0x21c>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	3340      	adds	r3, #64	; 0x40
 800d3a8:	220b      	movs	r2, #11
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	f7fd ff8d 	bl	800b2ca <mem_cmp>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d014      	beq.n	800d3e0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d3b6:	23ff      	movs	r3, #255	; 0xff
 800d3b8:	777b      	strb	r3, [r7, #29]
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d3c0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d3c2:	2100      	movs	r1, #0
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7ff f898 	bl	800c4fa <dir_next>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800d3ce:	7ffb      	ldrb	r3, [r7, #31]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	f43f af65 	beq.w	800d2a0 <dir_find+0x106>
 800d3d6:	e004      	b.n	800d3e2 <dir_find+0x248>
		if (res != FR_OK) break;
 800d3d8:	bf00      	nop
 800d3da:	e002      	b.n	800d3e2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d3dc:	bf00      	nop
 800d3de:	e000      	b.n	800d3e2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d3e0:	bf00      	nop

	return res;
 800d3e2:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3724      	adds	r7, #36	; 0x24
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd90      	pop	{r4, r7, pc}

0800d3ec <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d3ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d3f0:	b0a0      	sub	sp, #128	; 0x80
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d402:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d001      	beq.n	800d40e <dir_register+0x22>
 800d40a:	2306      	movs	r3, #6
 800d40c:	e192      	b.n	800d734 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d40e:	2300      	movs	r3, #0
 800d410:	677b      	str	r3, [r7, #116]	; 0x74
 800d412:	e002      	b.n	800d41a <dir_register+0x2e>
 800d414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d416:	3301      	adds	r3, #1
 800d418:	677b      	str	r3, [r7, #116]	; 0x74
 800d41a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41c:	691a      	ldr	r2, [r3, #16]
 800d41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d420:	005b      	lsls	r3, r3, #1
 800d422:	4413      	add	r3, r2
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1f4      	bne.n	800d414 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800d42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	2b04      	cmp	r3, #4
 800d430:	f040 80a3 	bne.w	800d57a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800d434:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d436:	330e      	adds	r3, #14
 800d438:	4aa4      	ldr	r2, [pc, #656]	; (800d6cc <dir_register+0x2e0>)
 800d43a:	fba2 2303 	umull	r2, r3, r2, r3
 800d43e:	08db      	lsrs	r3, r3, #3
 800d440:	3302      	adds	r3, #2
 800d442:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800d444:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff f93d 	bl	800c6c6 <dir_alloc>
 800d44c:	4603      	mov	r3, r0
 800d44e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800d452:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <dir_register+0x74>
 800d45a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d45e:	e169      	b.n	800d734 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d464:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d466:	3b01      	subs	r3, #1
 800d468:	015b      	lsls	r3, r3, #5
 800d46a:	1ad2      	subs	r2, r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d076      	beq.n	800d566 <dir_register+0x17a>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	79db      	ldrb	r3, [r3, #7]
 800d47c:	f003 0304 	and.w	r3, r3, #4
 800d480:	2b00      	cmp	r3, #0
 800d482:	d070      	beq.n	800d566 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d48a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d48c:	8949      	ldrh	r1, [r1, #10]
 800d48e:	4608      	mov	r0, r1
 800d490:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800d492:	8989      	ldrh	r1, [r1, #12]
 800d494:	fb00 f101 	mul.w	r1, r0, r1
 800d498:	2000      	movs	r0, #0
 800d49a:	460c      	mov	r4, r1
 800d49c:	4605      	mov	r5, r0
 800d49e:	eb12 0804 	adds.w	r8, r2, r4
 800d4a2:	eb43 0905 	adc.w	r9, r3, r5
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fe fd2e 	bl	800bf10 <fill_first_frag>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d4ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <dir_register+0xdc>
 800d4c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d4c6:	e135      	b.n	800d734 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800d4d2:	4619      	mov	r1, r3
 800d4d4:	f7fe fd4b 	bl	800bf6e <fill_last_frag>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d4de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d002      	beq.n	800d4ec <dir_register+0x100>
 800d4e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d4ea:	e123      	b.n	800d734 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	f107 0308 	add.w	r3, r7, #8
 800d4f2:	4611      	mov	r1, r2
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7ff fc91 	bl	800ce1c <load_obj_dir>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d500:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d504:	2b00      	cmp	r3, #0
 800d506:	d002      	beq.n	800d50e <dir_register+0x122>
 800d508:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d50c:	e112      	b.n	800d734 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800d50e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d51c:	4608      	mov	r0, r1
 800d51e:	f7fd fe10 	bl	800b142 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800d522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d530:	4608      	mov	r0, r1
 800d532:	f7fd fe06 	bl	800b142 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	79da      	ldrb	r2, [r3, #7]
 800d53a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d53c:	695b      	ldr	r3, [r3, #20]
 800d53e:	3321      	adds	r3, #33	; 0x21
 800d540:	f042 0201 	orr.w	r2, r2, #1
 800d544:	b2d2      	uxtb	r2, r2
 800d546:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800d548:	f107 0308 	add.w	r3, r7, #8
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7ff fc9b 	bl	800ce88 <store_xdir>
 800d552:	4603      	mov	r3, r0
 800d554:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800d558:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d002      	beq.n	800d566 <dir_register+0x17a>
 800d560:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d564:	e0e6      	b.n	800d734 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800d566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d568:	695a      	ldr	r2, [r3, #20]
 800d56a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	4619      	mov	r1, r3
 800d570:	4610      	mov	r0, r2
 800d572:	f7ff fce4 	bl	800cf3e <create_xdir>
		return FR_OK;
 800d576:	2300      	movs	r3, #0
 800d578:	e0dc      	b.n	800d734 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800d580:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800d584:	220c      	movs	r2, #12
 800d586:	4618      	mov	r0, r3
 800d588:	f7fd fe63 	bl	800b252 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d58c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d033      	beq.n	800d600 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2240      	movs	r2, #64	; 0x40
 800d59c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d5a4:	e016      	b.n	800d5d4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800d5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5ae:	691a      	ldr	r2, [r3, #16]
 800d5b0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800d5b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5b6:	f7ff fa5d 	bl	800ca74 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f7ff fded 	bl	800d19a <dir_find>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800d5c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d106      	bne.n	800d5dc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800d5ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	67bb      	str	r3, [r7, #120]	; 0x78
 800d5d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5d6:	2b63      	cmp	r3, #99	; 0x63
 800d5d8:	d9e5      	bls.n	800d5a6 <dir_register+0x1ba>
 800d5da:	e000      	b.n	800d5de <dir_register+0x1f2>
			if (res != FR_OK) break;
 800d5dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d5de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5e0:	2b64      	cmp	r3, #100	; 0x64
 800d5e2:	d101      	bne.n	800d5e8 <dir_register+0x1fc>
 800d5e4:	2307      	movs	r3, #7
 800d5e6:	e0a5      	b.n	800d734 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d5e8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5ec:	2b04      	cmp	r3, #4
 800d5ee:	d002      	beq.n	800d5f6 <dir_register+0x20a>
 800d5f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d5f4:	e09e      	b.n	800d734 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d5f6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d604:	f003 0302 	and.w	r3, r3, #2
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d007      	beq.n	800d61c <dir_register+0x230>
 800d60c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d60e:	330c      	adds	r3, #12
 800d610:	4a2f      	ldr	r2, [pc, #188]	; (800d6d0 <dir_register+0x2e4>)
 800d612:	fba2 2303 	umull	r2, r3, r2, r3
 800d616:	089b      	lsrs	r3, r3, #2
 800d618:	3301      	adds	r3, #1
 800d61a:	e000      	b.n	800d61e <dir_register+0x232>
 800d61c:	2301      	movs	r3, #1
 800d61e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d620:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f7ff f84f 	bl	800c6c6 <dir_alloc>
 800d628:	4603      	mov	r3, r0
 800d62a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d62e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d632:	2b00      	cmp	r3, #0
 800d634:	d14f      	bne.n	800d6d6 <dir_register+0x2ea>
 800d636:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d638:	3b01      	subs	r3, #1
 800d63a:	673b      	str	r3, [r7, #112]	; 0x70
 800d63c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d049      	beq.n	800d6d6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d648:	015b      	lsls	r3, r3, #5
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	4619      	mov	r1, r3
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f7fe febf 	bl	800c3d2 <dir_sdi>
 800d654:	4603      	mov	r3, r0
 800d656:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d65a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d139      	bne.n	800d6d6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3340      	adds	r3, #64	; 0x40
 800d666:	4618      	mov	r0, r3
 800d668:	f7ff fa92 	bl	800cb90 <sum_sfn>
 800d66c:	4603      	mov	r3, r0
 800d66e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d676:	4619      	mov	r1, r3
 800d678:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d67a:	f7fe f819 	bl	800b6b0 <move_window>
 800d67e:	4603      	mov	r3, r0
 800d680:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800d684:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d123      	bne.n	800d6d4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d68e:	6918      	ldr	r0, [r3, #16]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d696:	b2da      	uxtb	r2, r3
 800d698:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800d69c:	f7ff f982 	bl	800c9a4 <put_lfn>
				fs->wflag = 1;
 800d6a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f7fe ff26 	bl	800c4fa <dir_next>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800d6b4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10c      	bne.n	800d6d6 <dir_register+0x2ea>
 800d6bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	673b      	str	r3, [r7, #112]	; 0x70
 800d6c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1d4      	bne.n	800d672 <dir_register+0x286>
 800d6c8:	e005      	b.n	800d6d6 <dir_register+0x2ea>
 800d6ca:	bf00      	nop
 800d6cc:	88888889 	.word	0x88888889
 800d6d0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d6d4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d6d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d128      	bne.n	800d730 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d6e6:	f7fd ffe3 	bl	800b6b0 <move_window>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d6f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d11b      	bne.n	800d730 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6fc:	2220      	movs	r2, #32
 800d6fe:	2100      	movs	r1, #0
 800d700:	4618      	mov	r0, r3
 800d702:	f7fd fdc7 	bl	800b294 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	3340      	adds	r3, #64	; 0x40
 800d70e:	220b      	movs	r2, #11
 800d710:	4619      	mov	r1, r3
 800d712:	f7fd fd9e 	bl	800b252 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d720:	330c      	adds	r3, #12
 800d722:	f002 0218 	and.w	r2, r2, #24
 800d726:	b2d2      	uxtb	r2, r2
 800d728:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d72c:	2201      	movs	r2, #1
 800d72e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d730:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d734:	4618      	mov	r0, r3
 800d736:	3780      	adds	r7, #128	; 0x80
 800d738:	46bd      	mov	sp, r7
 800d73a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d73e:	bf00      	nop

0800d740 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08a      	sub	sp, #40	; 0x28
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	613b      	str	r3, [r7, #16]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	691b      	ldr	r3, [r3, #16]
 800d756:	60fb      	str	r3, [r7, #12]
 800d758:	2300      	movs	r3, #0
 800d75a:	617b      	str	r3, [r7, #20]
 800d75c:	697b      	ldr	r3, [r7, #20]
 800d75e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d760:	69bb      	ldr	r3, [r7, #24]
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	61ba      	str	r2, [r7, #24]
 800d766:	693a      	ldr	r2, [r7, #16]
 800d768:	4413      	add	r3, r2
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d76e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d770:	2b1f      	cmp	r3, #31
 800d772:	d940      	bls.n	800d7f6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d776:	2b2f      	cmp	r3, #47	; 0x2f
 800d778:	d006      	beq.n	800d788 <create_name+0x48>
 800d77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d77c:	2b5c      	cmp	r3, #92	; 0x5c
 800d77e:	d110      	bne.n	800d7a2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d780:	e002      	b.n	800d788 <create_name+0x48>
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	3301      	adds	r3, #1
 800d786:	61bb      	str	r3, [r7, #24]
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	4413      	add	r3, r2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	2b2f      	cmp	r3, #47	; 0x2f
 800d792:	d0f6      	beq.n	800d782 <create_name+0x42>
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	69bb      	ldr	r3, [r7, #24]
 800d798:	4413      	add	r3, r2
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b5c      	cmp	r3, #92	; 0x5c
 800d79e:	d0f0      	beq.n	800d782 <create_name+0x42>
			break;
 800d7a0:	e02a      	b.n	800d7f8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	2bfe      	cmp	r3, #254	; 0xfe
 800d7a6:	d901      	bls.n	800d7ac <create_name+0x6c>
 800d7a8:	2306      	movs	r3, #6
 800d7aa:	e17d      	b.n	800daa8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d7ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d7b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7b4:	2101      	movs	r1, #1
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fd34 	bl	800f224 <ff_convert>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d7c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d101      	bne.n	800d7ca <create_name+0x8a>
 800d7c6:	2306      	movs	r3, #6
 800d7c8:	e16e      	b.n	800daa8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7cc:	2b7f      	cmp	r3, #127	; 0x7f
 800d7ce:	d809      	bhi.n	800d7e4 <create_name+0xa4>
 800d7d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	488d      	ldr	r0, [pc, #564]	; (800da0c <create_name+0x2cc>)
 800d7d6:	f7fd fd9f 	bl	800b318 <chk_chr>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d001      	beq.n	800d7e4 <create_name+0xa4>
 800d7e0:	2306      	movs	r3, #6
 800d7e2:	e161      	b.n	800daa8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	1c5a      	adds	r2, r3, #1
 800d7e8:	617a      	str	r2, [r7, #20]
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	68fa      	ldr	r2, [r7, #12]
 800d7ee:	4413      	add	r3, r2
 800d7f0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d7f2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d7f4:	e7b4      	b.n	800d760 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d7f6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d7f8:	693a      	ldr	r2, [r7, #16]
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	441a      	add	r2, r3
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d804:	2b1f      	cmp	r3, #31
 800d806:	d801      	bhi.n	800d80c <create_name+0xcc>
 800d808:	2304      	movs	r3, #4
 800d80a:	e000      	b.n	800d80e <create_name+0xce>
 800d80c:	2300      	movs	r3, #0
 800d80e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d812:	e011      	b.n	800d838 <create_name+0xf8>
		w = lfn[di - 1];
 800d814:	697a      	ldr	r2, [r7, #20]
 800d816:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d81a:	4413      	add	r3, r2
 800d81c:	005b      	lsls	r3, r3, #1
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d828:	2b20      	cmp	r3, #32
 800d82a:	d002      	beq.n	800d832 <create_name+0xf2>
 800d82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d82e:	2b2e      	cmp	r3, #46	; 0x2e
 800d830:	d106      	bne.n	800d840 <create_name+0x100>
		di--;
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	3b01      	subs	r3, #1
 800d836:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1ea      	bne.n	800d814 <create_name+0xd4>
 800d83e:	e000      	b.n	800d842 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d840:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d842:	697b      	ldr	r3, [r7, #20]
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	68fa      	ldr	r2, [r7, #12]
 800d848:	4413      	add	r3, r2
 800d84a:	2200      	movs	r2, #0
 800d84c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d84e:	697b      	ldr	r3, [r7, #20]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d101      	bne.n	800d858 <create_name+0x118>
 800d854:	2306      	movs	r3, #6
 800d856:	e127      	b.n	800daa8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3340      	adds	r3, #64	; 0x40
 800d85c:	220b      	movs	r2, #11
 800d85e:	2120      	movs	r1, #32
 800d860:	4618      	mov	r0, r3
 800d862:	f7fd fd17 	bl	800b294 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d866:	2300      	movs	r3, #0
 800d868:	61bb      	str	r3, [r7, #24]
 800d86a:	e002      	b.n	800d872 <create_name+0x132>
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	3301      	adds	r3, #1
 800d870:	61bb      	str	r3, [r7, #24]
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	005b      	lsls	r3, r3, #1
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	4413      	add	r3, r2
 800d87a:	881b      	ldrh	r3, [r3, #0]
 800d87c:	2b20      	cmp	r3, #32
 800d87e:	d0f5      	beq.n	800d86c <create_name+0x12c>
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	005b      	lsls	r3, r3, #1
 800d884:	68fa      	ldr	r2, [r7, #12]
 800d886:	4413      	add	r3, r2
 800d888:	881b      	ldrh	r3, [r3, #0]
 800d88a:	2b2e      	cmp	r3, #46	; 0x2e
 800d88c:	d0ee      	beq.n	800d86c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d009      	beq.n	800d8a8 <create_name+0x168>
 800d894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d898:	f043 0303 	orr.w	r3, r3, #3
 800d89c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d8a0:	e002      	b.n	800d8a8 <create_name+0x168>
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	697b      	ldr	r3, [r7, #20]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d009      	beq.n	800d8c2 <create_name+0x182>
 800d8ae:	697a      	ldr	r2, [r7, #20]
 800d8b0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d8b4:	4413      	add	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	881b      	ldrh	r3, [r3, #0]
 800d8be:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c0:	d1ef      	bne.n	800d8a2 <create_name+0x162>

	i = b = 0; ni = 8;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	623b      	str	r3, [r7, #32]
 800d8cc:	2308      	movs	r3, #8
 800d8ce:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	61ba      	str	r2, [r7, #24]
 800d8d6:	005b      	lsls	r3, r3, #1
 800d8d8:	68fa      	ldr	r2, [r7, #12]
 800d8da:	4413      	add	r3, r2
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d8e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	f000 8090 	beq.w	800da08 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d8e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8ea:	2b20      	cmp	r3, #32
 800d8ec:	d006      	beq.n	800d8fc <create_name+0x1bc>
 800d8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8f0:	2b2e      	cmp	r3, #46	; 0x2e
 800d8f2:	d10a      	bne.n	800d90a <create_name+0x1ca>
 800d8f4:	69ba      	ldr	r2, [r7, #24]
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	d006      	beq.n	800d90a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d8fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d900:	f043 0303 	orr.w	r3, r3, #3
 800d904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d908:	e07d      	b.n	800da06 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d90a:	6a3a      	ldr	r2, [r7, #32]
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d203      	bcs.n	800d91a <create_name+0x1da>
 800d912:	69ba      	ldr	r2, [r7, #24]
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	429a      	cmp	r2, r3
 800d918:	d123      	bne.n	800d962 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d91a:	69fb      	ldr	r3, [r7, #28]
 800d91c:	2b0b      	cmp	r3, #11
 800d91e:	d106      	bne.n	800d92e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d924:	f043 0303 	orr.w	r3, r3, #3
 800d928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d92c:	e075      	b.n	800da1a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d92e:	69ba      	ldr	r2, [r7, #24]
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	429a      	cmp	r2, r3
 800d934:	d005      	beq.n	800d942 <create_name+0x202>
 800d936:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d93a:	f043 0303 	orr.w	r3, r3, #3
 800d93e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d942:	69ba      	ldr	r2, [r7, #24]
 800d944:	697b      	ldr	r3, [r7, #20]
 800d946:	429a      	cmp	r2, r3
 800d948:	d866      	bhi.n	800da18 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d94a:	697b      	ldr	r3, [r7, #20]
 800d94c:	61bb      	str	r3, [r7, #24]
 800d94e:	2308      	movs	r3, #8
 800d950:	623b      	str	r3, [r7, #32]
 800d952:	230b      	movs	r3, #11
 800d954:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d956:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d960:	e051      	b.n	800da06 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d964:	2b7f      	cmp	r3, #127	; 0x7f
 800d966:	d914      	bls.n	800d992 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d96a:	2100      	movs	r1, #0
 800d96c:	4618      	mov	r0, r3
 800d96e:	f001 fc59 	bl	800f224 <ff_convert>
 800d972:	4603      	mov	r3, r0
 800d974:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d976:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d004      	beq.n	800d986 <create_name+0x246>
 800d97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d97e:	3b80      	subs	r3, #128	; 0x80
 800d980:	4a23      	ldr	r2, [pc, #140]	; (800da10 <create_name+0x2d0>)
 800d982:	5cd3      	ldrb	r3, [r2, r3]
 800d984:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d98a:	f043 0302 	orr.w	r3, r3, #2
 800d98e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d994:	2b00      	cmp	r3, #0
 800d996:	d007      	beq.n	800d9a8 <create_name+0x268>
 800d998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d99a:	4619      	mov	r1, r3
 800d99c:	481d      	ldr	r0, [pc, #116]	; (800da14 <create_name+0x2d4>)
 800d99e:	f7fd fcbb 	bl	800b318 <chk_chr>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d008      	beq.n	800d9ba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d9a8:	235f      	movs	r3, #95	; 0x5f
 800d9aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9b0:	f043 0303 	orr.w	r3, r3, #3
 800d9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d9b8:	e01b      	b.n	800d9f2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d9ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9bc:	2b40      	cmp	r3, #64	; 0x40
 800d9be:	d909      	bls.n	800d9d4 <create_name+0x294>
 800d9c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9c2:	2b5a      	cmp	r3, #90	; 0x5a
 800d9c4:	d806      	bhi.n	800d9d4 <create_name+0x294>
					b |= 2;
 800d9c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9ca:	f043 0302 	orr.w	r3, r3, #2
 800d9ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9d2:	e00e      	b.n	800d9f2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9d6:	2b60      	cmp	r3, #96	; 0x60
 800d9d8:	d90b      	bls.n	800d9f2 <create_name+0x2b2>
 800d9da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9dc:	2b7a      	cmp	r3, #122	; 0x7a
 800d9de:	d808      	bhi.n	800d9f2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d9e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d9e4:	f043 0301 	orr.w	r3, r3, #1
 800d9e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d9ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d9ee:	3b20      	subs	r3, #32
 800d9f0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	623a      	str	r2, [r7, #32]
 800d9f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d9fa:	b2d1      	uxtb	r1, r2
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	4413      	add	r3, r2
 800da00:	460a      	mov	r2, r1
 800da02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800da06:	e763      	b.n	800d8d0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800da08:	bf00      	nop
 800da0a:	e006      	b.n	800da1a <create_name+0x2da>
 800da0c:	08010884 	.word	0x08010884
 800da10:	08010924 	.word	0x08010924
 800da14:	08010890 	.word	0x08010890
			if (si > di) break;			/* No extension */
 800da18:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da20:	2be5      	cmp	r3, #229	; 0xe5
 800da22:	d103      	bne.n	800da2c <create_name+0x2ec>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2205      	movs	r2, #5
 800da28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	2b08      	cmp	r3, #8
 800da30:	d104      	bne.n	800da3c <create_name+0x2fc>
 800da32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800da3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da40:	f003 030c 	and.w	r3, r3, #12
 800da44:	2b0c      	cmp	r3, #12
 800da46:	d005      	beq.n	800da54 <create_name+0x314>
 800da48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da4c:	f003 0303 	and.w	r3, r3, #3
 800da50:	2b03      	cmp	r3, #3
 800da52:	d105      	bne.n	800da60 <create_name+0x320>
 800da54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da58:	f043 0302 	orr.w	r3, r3, #2
 800da5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800da60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da64:	f003 0302 	and.w	r3, r3, #2
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d117      	bne.n	800da9c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800da6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da70:	f003 0303 	and.w	r3, r3, #3
 800da74:	2b01      	cmp	r3, #1
 800da76:	d105      	bne.n	800da84 <create_name+0x344>
 800da78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da7c:	f043 0310 	orr.w	r3, r3, #16
 800da80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800da84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da88:	f003 030c 	and.w	r3, r3, #12
 800da8c:	2b04      	cmp	r3, #4
 800da8e:	d105      	bne.n	800da9c <create_name+0x35c>
 800da90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da94:	f043 0308 	orr.w	r3, r3, #8
 800da98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800daa2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800daa6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3728      	adds	r7, #40	; 0x28
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dabe:	693b      	ldr	r3, [r7, #16]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dac4:	e002      	b.n	800dacc <follow_path+0x1c>
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	3301      	adds	r3, #1
 800daca:	603b      	str	r3, [r7, #0]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	2b2f      	cmp	r3, #47	; 0x2f
 800dad2:	d0f8      	beq.n	800dac6 <follow_path+0x16>
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b5c      	cmp	r3, #92	; 0x5c
 800dada:	d0f4      	beq.n	800dac6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	2200      	movs	r2, #0
 800dae0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800dae2:	693b      	ldr	r3, [r7, #16]
 800dae4:	2200      	movs	r2, #0
 800dae6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	2b1f      	cmp	r3, #31
 800daee:	d80a      	bhi.n	800db06 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2280      	movs	r2, #128	; 0x80
 800daf4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800daf8:	2100      	movs	r1, #0
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7fe fc69 	bl	800c3d2 <dir_sdi>
 800db00:	4603      	mov	r3, r0
 800db02:	75fb      	strb	r3, [r7, #23]
 800db04:	e07d      	b.n	800dc02 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db06:	463b      	mov	r3, r7
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7ff fe18 	bl	800d740 <create_name>
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d16e      	bne.n	800dbf8 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f7ff fb3d 	bl	800d19a <dir_find>
 800db20:	4603      	mov	r3, r0
 800db22:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800db2a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db2c:	7dfb      	ldrb	r3, [r7, #23]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d00a      	beq.n	800db48 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db32:	7dfb      	ldrb	r3, [r7, #23]
 800db34:	2b04      	cmp	r3, #4
 800db36:	d161      	bne.n	800dbfc <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db38:	7afb      	ldrb	r3, [r7, #11]
 800db3a:	f003 0304 	and.w	r3, r3, #4
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d15c      	bne.n	800dbfc <follow_path+0x14c>
 800db42:	2305      	movs	r3, #5
 800db44:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800db46:	e059      	b.n	800dbfc <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db48:	7afb      	ldrb	r3, [r7, #11]
 800db4a:	f003 0304 	and.w	r3, r3, #4
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d156      	bne.n	800dc00 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	799b      	ldrb	r3, [r3, #6]
 800db56:	f003 0310 	and.w	r3, r3, #16
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d102      	bne.n	800db64 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800db5e:	2305      	movs	r3, #5
 800db60:	75fb      	strb	r3, [r7, #23]
 800db62:	e04e      	b.n	800dc02 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	2b04      	cmp	r3, #4
 800db6a:	d130      	bne.n	800dbce <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800db6c:	693b      	ldr	r3, [r7, #16]
 800db6e:	689a      	ldr	r2, [r3, #8]
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800db7a:	4613      	mov	r3, r2
 800db7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	79d2      	ldrb	r2, [r2, #7]
 800db84:	431a      	orrs	r2, r3
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	695b      	ldr	r3, [r3, #20]
 800db96:	3334      	adds	r3, #52	; 0x34
 800db98:	4618      	mov	r0, r3
 800db9a:	f7fd f98d 	bl	800aeb8 <ld_dword>
 800db9e:	4602      	mov	r2, r0
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	3321      	adds	r3, #33	; 0x21
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	f003 0302 	and.w	r3, r3, #2
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	695b      	ldr	r3, [r3, #20]
 800dbba:	3338      	adds	r3, #56	; 0x38
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f7fd f99e 	bl	800aefe <ld_qword>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	6939      	ldr	r1, [r7, #16]
 800dbc8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800dbcc:	e79b      	b.n	800db06 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbd8:	68fa      	ldr	r2, [r7, #12]
 800dbda:	8992      	ldrh	r2, [r2, #12]
 800dbdc:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbe0:	fb00 f202 	mul.w	r2, r0, r2
 800dbe4:	1a9b      	subs	r3, r3, r2
 800dbe6:	440b      	add	r3, r1
 800dbe8:	4619      	mov	r1, r3
 800dbea:	68f8      	ldr	r0, [r7, #12]
 800dbec:	f7fe fdc7 	bl	800c77e <ld_clust>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbf6:	e786      	b.n	800db06 <follow_path+0x56>
			if (res != FR_OK) break;
 800dbf8:	bf00      	nop
 800dbfa:	e002      	b.n	800dc02 <follow_path+0x152>
				break;
 800dbfc:	bf00      	nop
 800dbfe:	e000      	b.n	800dc02 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dc00:	bf00      	nop
			}
		}
	}

	return res;
 800dc02:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3718      	adds	r7, #24
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b087      	sub	sp, #28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc14:	f04f 33ff 	mov.w	r3, #4294967295
 800dc18:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d031      	beq.n	800dc86 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	617b      	str	r3, [r7, #20]
 800dc28:	e002      	b.n	800dc30 <get_ldnumber+0x24>
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	617b      	str	r3, [r7, #20]
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	2b1f      	cmp	r3, #31
 800dc36:	d903      	bls.n	800dc40 <get_ldnumber+0x34>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	2b3a      	cmp	r3, #58	; 0x3a
 800dc3e:	d1f4      	bne.n	800dc2a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc40:	697b      	ldr	r3, [r7, #20]
 800dc42:	781b      	ldrb	r3, [r3, #0]
 800dc44:	2b3a      	cmp	r3, #58	; 0x3a
 800dc46:	d11c      	bne.n	800dc82 <get_ldnumber+0x76>
			tp = *path;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	1c5a      	adds	r2, r3, #1
 800dc52:	60fa      	str	r2, [r7, #12]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	3b30      	subs	r3, #48	; 0x30
 800dc58:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	2b09      	cmp	r3, #9
 800dc5e:	d80e      	bhi.n	800dc7e <get_ldnumber+0x72>
 800dc60:	68fa      	ldr	r2, [r7, #12]
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d10a      	bne.n	800dc7e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d107      	bne.n	800dc7e <get_ldnumber+0x72>
					vol = (int)i;
 800dc6e:	68bb      	ldr	r3, [r7, #8]
 800dc70:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc72:	697b      	ldr	r3, [r7, #20]
 800dc74:	3301      	adds	r3, #1
 800dc76:	617b      	str	r3, [r7, #20]
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	e002      	b.n	800dc88 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc82:	2300      	movs	r3, #0
 800dc84:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc86:	693b      	ldr	r3, [r7, #16]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	371c      	adds	r7, #28
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr

0800dc94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	70da      	strb	r2, [r3, #3]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcaa:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7fd fcfe 	bl	800b6b0 <move_window>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <check_fs+0x2a>
 800dcba:	2304      	movs	r3, #4
 800dcbc:	e044      	b.n	800dd48 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	333c      	adds	r3, #60	; 0x3c
 800dcc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fd f8de 	bl	800ae88 <ld_word>
 800dccc:	4603      	mov	r3, r0
 800dcce:	461a      	mov	r2, r3
 800dcd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d001      	beq.n	800dcdc <check_fs+0x48>
 800dcd8:	2303      	movs	r3, #3
 800dcda:	e035      	b.n	800dd48 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dce2:	2be9      	cmp	r3, #233	; 0xe9
 800dce4:	d009      	beq.n	800dcfa <check_fs+0x66>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcec:	2beb      	cmp	r3, #235	; 0xeb
 800dcee:	d11e      	bne.n	800dd2e <check_fs+0x9a>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dcf6:	2b90      	cmp	r3, #144	; 0x90
 800dcf8:	d119      	bne.n	800dd2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	333c      	adds	r3, #60	; 0x3c
 800dcfe:	3336      	adds	r3, #54	; 0x36
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fd f8d9 	bl	800aeb8 <ld_dword>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd0c:	4a10      	ldr	r2, [pc, #64]	; (800dd50 <check_fs+0xbc>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d101      	bne.n	800dd16 <check_fs+0x82>
 800dd12:	2300      	movs	r3, #0
 800dd14:	e018      	b.n	800dd48 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	333c      	adds	r3, #60	; 0x3c
 800dd1a:	3352      	adds	r3, #82	; 0x52
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fd f8cb 	bl	800aeb8 <ld_dword>
 800dd22:	4603      	mov	r3, r0
 800dd24:	4a0b      	ldr	r2, [pc, #44]	; (800dd54 <check_fs+0xc0>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d101      	bne.n	800dd2e <check_fs+0x9a>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e00c      	b.n	800dd48 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	333c      	adds	r3, #60	; 0x3c
 800dd32:	220b      	movs	r2, #11
 800dd34:	4908      	ldr	r1, [pc, #32]	; (800dd58 <check_fs+0xc4>)
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fd fac7 	bl	800b2ca <mem_cmp>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d101      	bne.n	800dd46 <check_fs+0xb2>
 800dd42:	2301      	movs	r3, #1
 800dd44:	e000      	b.n	800dd48 <check_fs+0xb4>
#endif
	return 2;
 800dd46:	2302      	movs	r3, #2
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3708      	adds	r7, #8
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	00544146 	.word	0x00544146
 800dd54:	33544146 	.word	0x33544146
 800dd58:	08010898 	.word	0x08010898

0800dd5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dd60:	b09c      	sub	sp, #112	; 0x70
 800dd62:	af00      	add	r7, sp, #0
 800dd64:	61f8      	str	r0, [r7, #28]
 800dd66:	61b9      	str	r1, [r7, #24]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd72:	69f8      	ldr	r0, [r7, #28]
 800dd74:	f7ff ff4a 	bl	800dc0c <get_ldnumber>
 800dd78:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	da01      	bge.n	800dd84 <find_volume+0x28>
 800dd80:	230b      	movs	r3, #11
 800dd82:	e376      	b.n	800e472 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd84:	4aa6      	ldr	r2, [pc, #664]	; (800e020 <find_volume+0x2c4>)
 800dd86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd8c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d101      	bne.n	800dd98 <find_volume+0x3c>
 800dd94:	230c      	movs	r3, #12
 800dd96:	e36c      	b.n	800e472 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dd98:	69bb      	ldr	r3, [r7, #24]
 800dd9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dd9c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dd9e:	7dfb      	ldrb	r3, [r7, #23]
 800dda0:	f023 0301 	bic.w	r3, r3, #1
 800dda4:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dda6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d01a      	beq.n	800dde4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800ddae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddb0:	785b      	ldrb	r3, [r3, #1]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fc ffca 	bl	800ad4c <disk_status>
 800ddb8:	4603      	mov	r3, r0
 800ddba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ddbe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddc2:	f003 0301 	and.w	r3, r3, #1
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10c      	bne.n	800dde4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d007      	beq.n	800dde0 <find_volume+0x84>
 800ddd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ddd4:	f003 0304 	and.w	r3, r3, #4
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d001      	beq.n	800dde0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800dddc:	230a      	movs	r3, #10
 800ddde:	e348      	b.n	800e472 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 800dde0:	2300      	movs	r3, #0
 800dde2:	e346      	b.n	800e472 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dde4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dde6:	2200      	movs	r2, #0
 800dde8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ddea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ddec:	b2da      	uxtb	r2, r3
 800ddee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddf0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ddf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddf4:	785b      	ldrb	r3, [r3, #1]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fc ffc2 	bl	800ad80 <disk_initialize>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800de02:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de0e:	2303      	movs	r3, #3
 800de10:	e32f      	b.n	800e472 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de12:	7dfb      	ldrb	r3, [r7, #23]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d007      	beq.n	800de28 <find_volume+0xcc>
 800de18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800de1c:	f003 0304 	and.w	r3, r3, #4
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800de24:	230a      	movs	r3, #10
 800de26:	e324      	b.n	800e472 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800de28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de2a:	7858      	ldrb	r0, [r3, #1]
 800de2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de2e:	330c      	adds	r3, #12
 800de30:	461a      	mov	r2, r3
 800de32:	2102      	movs	r1, #2
 800de34:	f7fd f80a 	bl	800ae4c <disk_ioctl>
 800de38:	4603      	mov	r3, r0
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d001      	beq.n	800de42 <find_volume+0xe6>
 800de3e:	2301      	movs	r3, #1
 800de40:	e317      	b.n	800e472 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800de42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de44:	899b      	ldrh	r3, [r3, #12]
 800de46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de4a:	d80d      	bhi.n	800de68 <find_volume+0x10c>
 800de4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de4e:	899b      	ldrh	r3, [r3, #12]
 800de50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de54:	d308      	bcc.n	800de68 <find_volume+0x10c>
 800de56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de58:	899b      	ldrh	r3, [r3, #12]
 800de5a:	461a      	mov	r2, r3
 800de5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de5e:	899b      	ldrh	r3, [r3, #12]
 800de60:	3b01      	subs	r3, #1
 800de62:	4013      	ands	r3, r2
 800de64:	2b00      	cmp	r3, #0
 800de66:	d001      	beq.n	800de6c <find_volume+0x110>
 800de68:	2301      	movs	r3, #1
 800de6a:	e302      	b.n	800e472 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de6c:	2300      	movs	r3, #0
 800de6e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de70:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800de72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800de74:	f7ff ff0e 	bl	800dc94 <check_fs>
 800de78:	4603      	mov	r3, r0
 800de7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800de82:	2b02      	cmp	r3, #2
 800de84:	d14d      	bne.n	800df22 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de86:	2300      	movs	r3, #0
 800de88:	65bb      	str	r3, [r7, #88]	; 0x58
 800de8a:	e020      	b.n	800dece <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800de8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de8e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800de92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de94:	011b      	lsls	r3, r3, #4
 800de96:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de9a:	4413      	add	r3, r2
 800de9c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800de9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dea0:	3304      	adds	r3, #4
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d006      	beq.n	800deb6 <find_volume+0x15a>
 800dea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800deaa:	3308      	adds	r3, #8
 800deac:	4618      	mov	r0, r3
 800deae:	f7fd f803 	bl	800aeb8 <ld_dword>
 800deb2:	4602      	mov	r2, r0
 800deb4:	e000      	b.n	800deb8 <find_volume+0x15c>
 800deb6:	2200      	movs	r2, #0
 800deb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	3360      	adds	r3, #96	; 0x60
 800debe:	f107 0110 	add.w	r1, r7, #16
 800dec2:	440b      	add	r3, r1
 800dec4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dec8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deca:	3301      	adds	r3, #1
 800decc:	65bb      	str	r3, [r7, #88]	; 0x58
 800dece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d9db      	bls.n	800de8c <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ded4:	2300      	movs	r3, #0
 800ded6:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800ded8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <find_volume+0x188>
 800dede:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dee0:	3b01      	subs	r3, #1
 800dee2:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	3360      	adds	r3, #96	; 0x60
 800deea:	f107 0210 	add.w	r2, r7, #16
 800deee:	4413      	add	r3, r2
 800def0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800def4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800def6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800def8:	2b00      	cmp	r3, #0
 800defa:	d005      	beq.n	800df08 <find_volume+0x1ac>
 800defc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800defe:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800df00:	f7ff fec8 	bl	800dc94 <check_fs>
 800df04:	4603      	mov	r3, r0
 800df06:	e000      	b.n	800df0a <find_volume+0x1ae>
 800df08:	2303      	movs	r3, #3
 800df0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800df0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df12:	2b01      	cmp	r3, #1
 800df14:	d905      	bls.n	800df22 <find_volume+0x1c6>
 800df16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df18:	3301      	adds	r3, #1
 800df1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800df1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df1e:	2b03      	cmp	r3, #3
 800df20:	d9e0      	bls.n	800dee4 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800df22:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df26:	2b04      	cmp	r3, #4
 800df28:	d101      	bne.n	800df2e <find_volume+0x1d2>
 800df2a:	2301      	movs	r3, #1
 800df2c:	e2a1      	b.n	800e472 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800df2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df32:	2b01      	cmp	r3, #1
 800df34:	d901      	bls.n	800df3a <find_volume+0x1de>
 800df36:	230d      	movs	r3, #13
 800df38:	e29b      	b.n	800e472 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800df3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800df3e:	2b01      	cmp	r3, #1
 800df40:	f040 8101 	bne.w	800e146 <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800df44:	230b      	movs	r3, #11
 800df46:	65bb      	str	r3, [r7, #88]	; 0x58
 800df48:	e002      	b.n	800df50 <find_volume+0x1f4>
 800df4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df4c:	3301      	adds	r3, #1
 800df4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800df50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df52:	2b3f      	cmp	r3, #63	; 0x3f
 800df54:	d806      	bhi.n	800df64 <find_volume+0x208>
 800df56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df5a:	4413      	add	r3, r2
 800df5c:	333c      	adds	r3, #60	; 0x3c
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d0f2      	beq.n	800df4a <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800df64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df66:	2b3f      	cmp	r3, #63	; 0x3f
 800df68:	d801      	bhi.n	800df6e <find_volume+0x212>
 800df6a:	230d      	movs	r3, #13
 800df6c:	e281      	b.n	800e472 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800df6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df70:	333c      	adds	r3, #60	; 0x3c
 800df72:	3368      	adds	r3, #104	; 0x68
 800df74:	4618      	mov	r0, r3
 800df76:	f7fc ff87 	bl	800ae88 <ld_word>
 800df7a:	4603      	mov	r3, r0
 800df7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df80:	d001      	beq.n	800df86 <find_volume+0x22a>
 800df82:	230d      	movs	r3, #13
 800df84:	e275      	b.n	800e472 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800df86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df88:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800df8c:	461a      	mov	r2, r3
 800df8e:	2301      	movs	r3, #1
 800df90:	4093      	lsls	r3, r2
 800df92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800df94:	8992      	ldrh	r2, [r2, #12]
 800df96:	4293      	cmp	r3, r2
 800df98:	d001      	beq.n	800df9e <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 800df9a:	230d      	movs	r3, #13
 800df9c:	e269      	b.n	800e472 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800df9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfa0:	333c      	adds	r3, #60	; 0x3c
 800dfa2:	3348      	adds	r3, #72	; 0x48
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fc ffaa 	bl	800aefe <ld_qword>
 800dfaa:	4602      	mov	r2, r0
 800dfac:	460b      	mov	r3, r1
 800dfae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800dfb0:	2000      	movs	r0, #0
 800dfb2:	60b9      	str	r1, [r7, #8]
 800dfb4:	60f8      	str	r0, [r7, #12]
 800dfb6:	68b9      	ldr	r1, [r7, #8]
 800dfb8:	1851      	adds	r1, r2, r1
 800dfba:	6039      	str	r1, [r7, #0]
 800dfbc:	68f9      	ldr	r1, [r7, #12]
 800dfbe:	eb43 0101 	adc.w	r1, r3, r1
 800dfc2:	6079      	str	r1, [r7, #4]
 800dfc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfc8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800dfcc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d301      	bcc.n	800dfd8 <find_volume+0x27c>
 800dfd4:	230d      	movs	r3, #13
 800dfd6:	e24c      	b.n	800e472 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800dfd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfda:	333c      	adds	r3, #60	; 0x3c
 800dfdc:	3354      	adds	r3, #84	; 0x54
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fc ff6a 	bl	800aeb8 <ld_dword>
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfe8:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800dfea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfec:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800dff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dff2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800dff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dff6:	789b      	ldrb	r3, [r3, #2]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d001      	beq.n	800e000 <find_volume+0x2a4>
 800dffc:	230d      	movs	r3, #13
 800dffe:	e238      	b.n	800e472 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800e000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e002:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800e006:	461a      	mov	r2, r3
 800e008:	2301      	movs	r3, #1
 800e00a:	4093      	lsls	r3, r2
 800e00c:	b29a      	uxth	r2, r3
 800e00e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e010:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800e012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e014:	895b      	ldrh	r3, [r3, #10]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d104      	bne.n	800e024 <find_volume+0x2c8>
 800e01a:	230d      	movs	r3, #13
 800e01c:	e229      	b.n	800e472 <find_volume+0x716>
 800e01e:	bf00      	nop
 800e020:	24002340 	.word	0x24002340

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800e024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e026:	333c      	adds	r3, #60	; 0x3c
 800e028:	335c      	adds	r3, #92	; 0x5c
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7fc ff44 	bl	800aeb8 <ld_dword>
 800e030:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800e032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e034:	4a99      	ldr	r2, [pc, #612]	; (800e29c <find_volume+0x540>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d901      	bls.n	800e03e <find_volume+0x2e2>
 800e03a:	230d      	movs	r3, #13
 800e03c:	e219      	b.n	800e472 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 800e03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e040:	1c9a      	adds	r2, r3, #2
 800e042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e044:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800e046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e048:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e04a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800e04c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e04e:	333c      	adds	r3, #60	; 0x3c
 800e050:	3358      	adds	r3, #88	; 0x58
 800e052:	4618      	mov	r0, r3
 800e054:	f7fc ff30 	bl	800aeb8 <ld_dword>
 800e058:	4602      	mov	r2, r0
 800e05a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e05c:	441a      	add	r2, r3
 800e05e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e060:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800e062:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e064:	333c      	adds	r3, #60	; 0x3c
 800e066:	3350      	adds	r3, #80	; 0x50
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fc ff25 	bl	800aeb8 <ld_dword>
 800e06e:	4602      	mov	r2, r0
 800e070:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e072:	441a      	add	r2, r3
 800e074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e076:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800e078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e07c:	2200      	movs	r2, #0
 800e07e:	469a      	mov	sl, r3
 800e080:	4693      	mov	fp, r2
 800e082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e084:	895b      	ldrh	r3, [r3, #10]
 800e086:	461a      	mov	r2, r3
 800e088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e08a:	fb02 f303 	mul.w	r3, r2, r3
 800e08e:	2200      	movs	r2, #0
 800e090:	4698      	mov	r8, r3
 800e092:	4691      	mov	r9, r2
 800e094:	eb1a 0408 	adds.w	r4, sl, r8
 800e098:	eb4b 0509 	adc.w	r5, fp, r9
 800e09c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e0a0:	42a2      	cmp	r2, r4
 800e0a2:	41ab      	sbcs	r3, r5
 800e0a4:	d201      	bcs.n	800e0aa <find_volume+0x34e>
 800e0a6:	230d      	movs	r3, #13
 800e0a8:	e1e3      	b.n	800e472 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800e0aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ac:	333c      	adds	r3, #60	; 0x3c
 800e0ae:	3360      	adds	r3, #96	; 0x60
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fc ff01 	bl	800aeb8 <ld_dword>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0ba:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800e0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e0c4:	f7fd fb92 	bl	800b7ec <clust2sect>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e0ce:	f7fd faef 	bl	800b6b0 <move_window>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <find_volume+0x380>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e1ca      	b.n	800e472 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e0dc:	2300      	movs	r3, #0
 800e0de:	65bb      	str	r3, [r7, #88]	; 0x58
 800e0e0:	e015      	b.n	800e10e <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e0e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e0e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0e6:	4413      	add	r3, r2
 800e0e8:	333c      	adds	r3, #60	; 0x3c
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	2b81      	cmp	r3, #129	; 0x81
 800e0ee:	d10b      	bne.n	800e108 <find_volume+0x3ac>
 800e0f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0f2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e0f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0f8:	3314      	adds	r3, #20
 800e0fa:	4413      	add	r3, r2
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fc fedb 	bl	800aeb8 <ld_dword>
 800e102:	4603      	mov	r3, r0
 800e104:	2b02      	cmp	r3, #2
 800e106:	d009      	beq.n	800e11c <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800e108:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e10a:	3320      	adds	r3, #32
 800e10c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e10e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e110:	899b      	ldrh	r3, [r3, #12]
 800e112:	461a      	mov	r2, r3
 800e114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e116:	4293      	cmp	r3, r2
 800e118:	d3e3      	bcc.n	800e0e2 <find_volume+0x386>
 800e11a:	e000      	b.n	800e11e <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800e11c:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800e11e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e120:	899b      	ldrh	r3, [r3, #12]
 800e122:	461a      	mov	r2, r3
 800e124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e126:	4293      	cmp	r3, r2
 800e128:	d101      	bne.n	800e12e <find_volume+0x3d2>
 800e12a:	230d      	movs	r3, #13
 800e12c:	e1a1      	b.n	800e472 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e12e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e130:	f04f 32ff 	mov.w	r2, #4294967295
 800e134:	61da      	str	r2, [r3, #28]
 800e136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e138:	69da      	ldr	r2, [r3, #28]
 800e13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e13c:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800e13e:	2304      	movs	r3, #4
 800e140:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800e144:	e17d      	b.n	800e442 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e148:	333c      	adds	r3, #60	; 0x3c
 800e14a:	330b      	adds	r3, #11
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fc fe9b 	bl	800ae88 <ld_word>
 800e152:	4603      	mov	r3, r0
 800e154:	461a      	mov	r2, r3
 800e156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e158:	899b      	ldrh	r3, [r3, #12]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d001      	beq.n	800e162 <find_volume+0x406>
 800e15e:	230d      	movs	r3, #13
 800e160:	e187      	b.n	800e472 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e164:	333c      	adds	r3, #60	; 0x3c
 800e166:	3316      	adds	r3, #22
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fc fe8d 	bl	800ae88 <ld_word>
 800e16e:	4603      	mov	r3, r0
 800e170:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e174:	2b00      	cmp	r3, #0
 800e176:	d106      	bne.n	800e186 <find_volume+0x42a>
 800e178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e17a:	333c      	adds	r3, #60	; 0x3c
 800e17c:	3324      	adds	r3, #36	; 0x24
 800e17e:	4618      	mov	r0, r3
 800e180:	f7fc fe9a 	bl	800aeb8 <ld_dword>
 800e184:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800e186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e188:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e18a:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e18e:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800e192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e194:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e198:	789b      	ldrb	r3, [r3, #2]
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d005      	beq.n	800e1aa <find_volume+0x44e>
 800e19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1a0:	789b      	ldrb	r3, [r3, #2]
 800e1a2:	2b02      	cmp	r3, #2
 800e1a4:	d001      	beq.n	800e1aa <find_volume+0x44e>
 800e1a6:	230d      	movs	r3, #13
 800e1a8:	e163      	b.n	800e472 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ac:	789b      	ldrb	r3, [r3, #2]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1b2:	fb02 f303 	mul.w	r3, r2, r3
 800e1b6:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e1b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ba:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800e1be:	b29a      	uxth	r2, r3
 800e1c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e1c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1c6:	895b      	ldrh	r3, [r3, #10]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d008      	beq.n	800e1de <find_volume+0x482>
 800e1cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1ce:	895b      	ldrh	r3, [r3, #10]
 800e1d0:	461a      	mov	r2, r3
 800e1d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d4:	895b      	ldrh	r3, [r3, #10]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	4013      	ands	r3, r2
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d001      	beq.n	800e1e2 <find_volume+0x486>
 800e1de:	230d      	movs	r3, #13
 800e1e0:	e147      	b.n	800e472 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e1e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1e4:	333c      	adds	r3, #60	; 0x3c
 800e1e6:	3311      	adds	r3, #17
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f7fc fe4d 	bl	800ae88 <ld_word>
 800e1ee:	4603      	mov	r3, r0
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f4:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e1f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1f8:	891b      	ldrh	r3, [r3, #8]
 800e1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1fc:	8992      	ldrh	r2, [r2, #12]
 800e1fe:	0952      	lsrs	r2, r2, #5
 800e200:	b292      	uxth	r2, r2
 800e202:	fbb3 f1f2 	udiv	r1, r3, r2
 800e206:	fb01 f202 	mul.w	r2, r1, r2
 800e20a:	1a9b      	subs	r3, r3, r2
 800e20c:	b29b      	uxth	r3, r3
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <find_volume+0x4ba>
 800e212:	230d      	movs	r3, #13
 800e214:	e12d      	b.n	800e472 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e218:	333c      	adds	r3, #60	; 0x3c
 800e21a:	3313      	adds	r3, #19
 800e21c:	4618      	mov	r0, r3
 800e21e:	f7fc fe33 	bl	800ae88 <ld_word>
 800e222:	4603      	mov	r3, r0
 800e224:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d106      	bne.n	800e23a <find_volume+0x4de>
 800e22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e22e:	333c      	adds	r3, #60	; 0x3c
 800e230:	3320      	adds	r3, #32
 800e232:	4618      	mov	r0, r3
 800e234:	f7fc fe40 	bl	800aeb8 <ld_dword>
 800e238:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e23c:	333c      	adds	r3, #60	; 0x3c
 800e23e:	330e      	adds	r3, #14
 800e240:	4618      	mov	r0, r3
 800e242:	f7fc fe21 	bl	800ae88 <ld_word>
 800e246:	4603      	mov	r3, r0
 800e248:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e24c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e250:	2b00      	cmp	r3, #0
 800e252:	d101      	bne.n	800e258 <find_volume+0x4fc>
 800e254:	230d      	movs	r3, #13
 800e256:	e10c      	b.n	800e472 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e258:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e25c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e25e:	4413      	add	r3, r2
 800e260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e262:	8911      	ldrh	r1, [r2, #8]
 800e264:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e266:	8992      	ldrh	r2, [r2, #12]
 800e268:	0952      	lsrs	r2, r2, #5
 800e26a:	b292      	uxth	r2, r2
 800e26c:	fbb1 f2f2 	udiv	r2, r1, r2
 800e270:	b292      	uxth	r2, r2
 800e272:	4413      	add	r3, r2
 800e274:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e276:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d201      	bcs.n	800e282 <find_volume+0x526>
 800e27e:	230d      	movs	r3, #13
 800e280:	e0f7      	b.n	800e472 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e282:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e28a:	8952      	ldrh	r2, [r2, #10]
 800e28c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e290:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e294:	2b00      	cmp	r3, #0
 800e296:	d103      	bne.n	800e2a0 <find_volume+0x544>
 800e298:	230d      	movs	r3, #13
 800e29a:	e0ea      	b.n	800e472 <find_volume+0x716>
 800e29c:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e2a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d802      	bhi.n	800e2b6 <find_volume+0x55a>
 800e2b0:	2302      	movs	r3, #2
 800e2b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e2bc:	4293      	cmp	r3, r2
 800e2be:	d802      	bhi.n	800e2c6 <find_volume+0x56a>
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c8:	1c9a      	adds	r2, r3, #2
 800e2ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2cc:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800e2ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2d2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e2d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e2d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2da:	441a      	add	r2, r3
 800e2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2de:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800e2e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2e4:	441a      	add	r2, r3
 800e2e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2e8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800e2ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e2ee:	2b03      	cmp	r3, #3
 800e2f0:	d11e      	bne.n	800e330 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e2f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f4:	333c      	adds	r3, #60	; 0x3c
 800e2f6:	332a      	adds	r3, #42	; 0x2a
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7fc fdc5 	bl	800ae88 <ld_word>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d001      	beq.n	800e308 <find_volume+0x5ac>
 800e304:	230d      	movs	r3, #13
 800e306:	e0b4      	b.n	800e472 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e30a:	891b      	ldrh	r3, [r3, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d001      	beq.n	800e314 <find_volume+0x5b8>
 800e310:	230d      	movs	r3, #13
 800e312:	e0ae      	b.n	800e472 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e316:	333c      	adds	r3, #60	; 0x3c
 800e318:	332c      	adds	r3, #44	; 0x2c
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fc fdcc 	bl	800aeb8 <ld_dword>
 800e320:	4602      	mov	r2, r0
 800e322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e324:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e326:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	009b      	lsls	r3, r3, #2
 800e32c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e32e:	e01f      	b.n	800e370 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e332:	891b      	ldrh	r3, [r3, #8]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d101      	bne.n	800e33c <find_volume+0x5e0>
 800e338:	230d      	movs	r3, #13
 800e33a:	e09a      	b.n	800e472 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e33c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e342:	441a      	add	r2, r3
 800e344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e346:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e348:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e34c:	2b02      	cmp	r3, #2
 800e34e:	d103      	bne.n	800e358 <find_volume+0x5fc>
 800e350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e352:	6a1b      	ldr	r3, [r3, #32]
 800e354:	005b      	lsls	r3, r3, #1
 800e356:	e00a      	b.n	800e36e <find_volume+0x612>
 800e358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e35a:	6a1a      	ldr	r2, [r3, #32]
 800e35c:	4613      	mov	r3, r2
 800e35e:	005b      	lsls	r3, r3, #1
 800e360:	4413      	add	r3, r2
 800e362:	085a      	lsrs	r2, r3, #1
 800e364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e366:	6a1b      	ldr	r3, [r3, #32]
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e36e:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e376:	899b      	ldrh	r3, [r3, #12]
 800e378:	4619      	mov	r1, r3
 800e37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e37c:	440b      	add	r3, r1
 800e37e:	3b01      	subs	r3, #1
 800e380:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e382:	8989      	ldrh	r1, [r1, #12]
 800e384:	fbb3 f3f1 	udiv	r3, r3, r1
 800e388:	429a      	cmp	r2, r3
 800e38a:	d201      	bcs.n	800e390 <find_volume+0x634>
 800e38c:	230d      	movs	r3, #13
 800e38e:	e070      	b.n	800e472 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e392:	f04f 32ff 	mov.w	r2, #4294967295
 800e396:	61da      	str	r2, [r3, #28]
 800e398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e39a:	69da      	ldr	r2, [r3, #28]
 800e39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e39e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800e3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a2:	2280      	movs	r2, #128	; 0x80
 800e3a4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e3a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e3aa:	2b03      	cmp	r3, #3
 800e3ac:	d149      	bne.n	800e442 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e3ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3b0:	333c      	adds	r3, #60	; 0x3c
 800e3b2:	3330      	adds	r3, #48	; 0x30
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fc fd67 	bl	800ae88 <ld_word>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d140      	bne.n	800e442 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e3c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e3c8:	f7fd f972 	bl	800b6b0 <move_window>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d137      	bne.n	800e442 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 800e3d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e3d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3da:	333c      	adds	r3, #60	; 0x3c
 800e3dc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7fc fd51 	bl	800ae88 <ld_word>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d127      	bne.n	800e442 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3f4:	333c      	adds	r3, #60	; 0x3c
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7fc fd5e 	bl	800aeb8 <ld_dword>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4a1f      	ldr	r2, [pc, #124]	; (800e47c <find_volume+0x720>)
 800e400:	4293      	cmp	r3, r2
 800e402:	d11e      	bne.n	800e442 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e406:	333c      	adds	r3, #60	; 0x3c
 800e408:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fc fd53 	bl	800aeb8 <ld_dword>
 800e412:	4603      	mov	r3, r0
 800e414:	4a1a      	ldr	r2, [pc, #104]	; (800e480 <find_volume+0x724>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d113      	bne.n	800e442 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41c:	333c      	adds	r3, #60	; 0x3c
 800e41e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e422:	4618      	mov	r0, r3
 800e424:	f7fc fd48 	bl	800aeb8 <ld_dword>
 800e428:	4602      	mov	r2, r0
 800e42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e42c:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e430:	333c      	adds	r3, #60	; 0x3c
 800e432:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e436:	4618      	mov	r0, r3
 800e438:	f7fc fd3e 	bl	800aeb8 <ld_dword>
 800e43c:	4602      	mov	r2, r0
 800e43e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e440:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e444:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800e448:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e44a:	4b0e      	ldr	r3, [pc, #56]	; (800e484 <find_volume+0x728>)
 800e44c:	881b      	ldrh	r3, [r3, #0]
 800e44e:	3301      	adds	r3, #1
 800e450:	b29a      	uxth	r2, r3
 800e452:	4b0c      	ldr	r3, [pc, #48]	; (800e484 <find_volume+0x728>)
 800e454:	801a      	strh	r2, [r3, #0]
 800e456:	4b0b      	ldr	r3, [pc, #44]	; (800e484 <find_volume+0x728>)
 800e458:	881a      	ldrh	r2, [r3, #0]
 800e45a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e45c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800e45e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e460:	4a09      	ldr	r2, [pc, #36]	; (800e488 <find_volume+0x72c>)
 800e462:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 800e464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e466:	4a09      	ldr	r2, [pc, #36]	; (800e48c <find_volume+0x730>)
 800e468:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e46a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e46c:	f7fd f8b8 	bl	800b5e0 <clear_lock>
#endif
	return FR_OK;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3770      	adds	r7, #112	; 0x70
 800e476:	46bd      	mov	sp, r7
 800e478:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e47c:	41615252 	.word	0x41615252
 800e480:	61417272 	.word	0x61417272
 800e484:	24002344 	.word	0x24002344
 800e488:	240025c8 	.word	0x240025c8
 800e48c:	24002368 	.word	0x24002368

0800e490 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b084      	sub	sp, #16
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e49a:	2309      	movs	r3, #9
 800e49c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d01c      	beq.n	800e4de <validate+0x4e>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d018      	beq.n	800e4de <validate+0x4e>
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d013      	beq.n	800e4de <validate+0x4e>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	889a      	ldrh	r2, [r3, #4]
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	88db      	ldrh	r3, [r3, #6]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d10c      	bne.n	800e4de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	785b      	ldrb	r3, [r3, #1]
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fc fc3e 	bl	800ad4c <disk_status>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f003 0301 	and.w	r3, r3, #1
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <validate+0x4e>
			res = FR_OK;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e4de:	7bfb      	ldrb	r3, [r7, #15]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d102      	bne.n	800e4ea <validate+0x5a>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	e000      	b.n	800e4ec <validate+0x5c>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	683a      	ldr	r2, [r7, #0]
 800e4ee:	6013      	str	r3, [r2, #0]
	return res;
 800e4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
	...

0800e4fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e4fc:	b580      	push	{r7, lr}
 800e4fe:	b088      	sub	sp, #32
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	4613      	mov	r3, r2
 800e508:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e50e:	f107 0310 	add.w	r3, r7, #16
 800e512:	4618      	mov	r0, r3
 800e514:	f7ff fb7a 	bl	800dc0c <get_ldnumber>
 800e518:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	da01      	bge.n	800e524 <f_mount+0x28>
 800e520:	230b      	movs	r3, #11
 800e522:	e02b      	b.n	800e57c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e524:	4a17      	ldr	r2, [pc, #92]	; (800e584 <f_mount+0x88>)
 800e526:	69fb      	ldr	r3, [r7, #28]
 800e528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e52c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e52e:	69bb      	ldr	r3, [r7, #24]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d005      	beq.n	800e540 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e534:	69b8      	ldr	r0, [r7, #24]
 800e536:	f7fd f853 	bl	800b5e0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d002      	beq.n	800e54c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e54c:	68fa      	ldr	r2, [r7, #12]
 800e54e:	490d      	ldr	r1, [pc, #52]	; (800e584 <f_mount+0x88>)
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <f_mount+0x66>
 800e55c:	79fb      	ldrb	r3, [r7, #7]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d001      	beq.n	800e566 <f_mount+0x6a>
 800e562:	2300      	movs	r3, #0
 800e564:	e00a      	b.n	800e57c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e566:	f107 010c 	add.w	r1, r7, #12
 800e56a:	f107 0308 	add.w	r3, r7, #8
 800e56e:	2200      	movs	r2, #0
 800e570:	4618      	mov	r0, r3
 800e572:	f7ff fbf3 	bl	800dd5c <find_volume>
 800e576:	4603      	mov	r3, r0
 800e578:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3720      	adds	r7, #32
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	24002340 	.word	0x24002340

0800e588 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e58c:	b0a8      	sub	sp, #160	; 0xa0
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6278      	str	r0, [r7, #36]	; 0x24
 800e592:	6239      	str	r1, [r7, #32]
 800e594:	4613      	mov	r3, r2
 800e596:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d101      	bne.n	800e5a2 <f_open+0x1a>
 800e59e:	2309      	movs	r3, #9
 800e5a0:	e2c0      	b.n	800eb24 <f_open+0x59c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e5a2:	7ffb      	ldrb	r3, [r7, #31]
 800e5a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5a8:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800e5aa:	7ffb      	ldrb	r3, [r7, #31]
 800e5ac:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800e5b0:	f107 0020 	add.w	r0, r7, #32
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	f7ff fbd1 	bl	800dd5c <find_volume>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800e5c0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f040 82a4 	bne.w	800eb12 <f_open+0x58a>
		dj.obj.fs = fs;
 800e5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5cc:	633b      	str	r3, [r7, #48]	; 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e5ce:	6a3b      	ldr	r3, [r7, #32]
 800e5d0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	4610      	mov	r0, r2
 800e5d8:	f7ff fa6a 	bl	800dab0 <follow_path>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e5e2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d11a      	bne.n	800e620 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e5ea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800e5ee:	b25b      	sxtb	r3, r3
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	da03      	bge.n	800e5fc <f_open+0x74>
				res = FR_INVALID_NAME;
 800e5f4:	2306      	movs	r3, #6
 800e5f6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e5fa:	e011      	b.n	800e620 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e5fc:	7ffb      	ldrb	r3, [r7, #31]
 800e5fe:	f023 0301 	bic.w	r3, r3, #1
 800e602:	2b00      	cmp	r3, #0
 800e604:	bf14      	ite	ne
 800e606:	2301      	movne	r3, #1
 800e608:	2300      	moveq	r3, #0
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e612:	4611      	mov	r1, r2
 800e614:	4618      	mov	r0, r3
 800e616:	f7fc fe9b 	bl	800b350 <chk_lock>
 800e61a:	4603      	mov	r3, r0
 800e61c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e620:	7ffb      	ldrb	r3, [r7, #31]
 800e622:	f003 031c 	and.w	r3, r3, #28
 800e626:	2b00      	cmp	r3, #0
 800e628:	f000 8117 	beq.w	800e85a <f_open+0x2d2>
			if (res != FR_OK) {					/* No file, create new */
 800e62c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e630:	2b00      	cmp	r3, #0
 800e632:	d017      	beq.n	800e664 <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e634:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e638:	2b04      	cmp	r3, #4
 800e63a:	d10e      	bne.n	800e65a <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e63c:	f7fc fee4 	bl	800b408 <enq_lock>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d006      	beq.n	800e654 <f_open+0xcc>
 800e646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7fe fece 	bl	800d3ec <dir_register>
 800e650:	4603      	mov	r3, r0
 800e652:	e000      	b.n	800e656 <f_open+0xce>
 800e654:	2312      	movs	r3, #18
 800e656:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e65a:	7ffb      	ldrb	r3, [r7, #31]
 800e65c:	f043 0308 	orr.w	r3, r3, #8
 800e660:	77fb      	strb	r3, [r7, #31]
 800e662:	e011      	b.n	800e688 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e664:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e668:	f003 0311 	and.w	r3, r3, #17
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d003      	beq.n	800e678 <f_open+0xf0>
					res = FR_DENIED;
 800e670:	2307      	movs	r3, #7
 800e672:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e676:	e007      	b.n	800e688 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e678:	7ffb      	ldrb	r3, [r7, #31]
 800e67a:	f003 0304 	and.w	r3, r3, #4
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d002      	beq.n	800e688 <f_open+0x100>
 800e682:	2308      	movs	r3, #8
 800e684:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e688:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f040 8100 	bne.w	800e892 <f_open+0x30a>
 800e692:	7ffb      	ldrb	r3, [r7, #31]
 800e694:	f003 0308 	and.w	r3, r3, #8
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f000 80fa 	beq.w	800e892 <f_open+0x30a>
				dw = GET_FATTIME();
 800e69e:	f7fc f9b9 	bl	800aa14 <get_fattime>
 800e6a2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	2b04      	cmp	r3, #4
 800e6ac:	f040 8085 	bne.w	800e7ba <f_open+0x232>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800e6b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	695b      	ldr	r3, [r3, #20]
 800e6ba:	3334      	adds	r3, #52	; 0x34
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7fc fbfb 	bl	800aeb8 <ld_dword>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ca:	695b      	ldr	r3, [r3, #20]
 800e6cc:	3338      	adds	r3, #56	; 0x38
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fc fc15 	bl	800aefe <ld_qword>
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6dc:	695b      	ldr	r3, [r3, #20]
 800e6de:	3321      	adds	r3, #33	; 0x21
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	f003 0302 	and.w	r3, r3, #2
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ea:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800e6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	695b      	ldr	r3, [r3, #20]
 800e6f6:	3308      	adds	r3, #8
 800e6f8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fc fcf4 	bl	800b0ea <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	695b      	ldr	r3, [r3, #20]
 800e706:	f103 0214 	add.w	r2, r3, #20
 800e70a:	2300      	movs	r3, #0
 800e70c:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	695b      	ldr	r3, [r3, #20]
 800e712:	330c      	adds	r3, #12
 800e714:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fc fce6 	bl	800b0ea <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800e71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	f103 0215 	add.w	r2, r3, #21
 800e726:	2300      	movs	r3, #0
 800e728:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	1d1a      	adds	r2, r3, #4
 800e730:	2320      	movs	r3, #32
 800e732:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	695b      	ldr	r3, [r3, #20]
 800e738:	3334      	adds	r3, #52	; 0x34
 800e73a:	2100      	movs	r1, #0
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7fc fcd4 	bl	800b0ea <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800e742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e744:	695b      	ldr	r3, [r3, #20]
 800e746:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e74a:	f04f 0200 	mov.w	r2, #0
 800e74e:	f04f 0300 	mov.w	r3, #0
 800e752:	4608      	mov	r0, r1
 800e754:	f7fc fcf5 	bl	800b142 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e760:	f04f 0200 	mov.w	r2, #0
 800e764:	f04f 0300 	mov.w	r3, #0
 800e768:	4608      	mov	r0, r1
 800e76a:	f7fc fcea 	bl	800b142 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800e776:	2301      	movs	r3, #1
 800e778:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800e77a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e77e:	4618      	mov	r0, r3
 800e780:	f7fe fb82 	bl	800ce88 <store_xdir>
 800e784:	4603      	mov	r3, r0
 800e786:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e78a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d17f      	bne.n	800e892 <f_open+0x30a>
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d07b      	beq.n	800e892 <f_open+0x30a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e79a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	4619      	mov	r1, r3
 800e7a4:	f7fd fc14 	bl	800bfd0 <remove_chain>
 800e7a8:	4603      	mov	r3, r0
 800e7aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	6193      	str	r3, [r2, #24]
 800e7b8:	e06b      	b.n	800e892 <f_open+0x30a>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7bc:	330e      	adds	r3, #14
 800e7be:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f7fc fc91 	bl	800b0ea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e7c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7ca:	3316      	adds	r3, #22
 800e7cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	f7fc fc8a 	bl	800b0ea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7d8:	f103 020b 	add.w	r2, r3, #11
 800e7dc:	2320      	movs	r3, #32
 800e7de:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e7e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	f7fd ffc9 	bl	800c77e <ld_clust>
 800e7ec:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e7f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	f7fd ffe0 	bl	800c7bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e7fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e7fe:	331c      	adds	r3, #28
 800e800:	2100      	movs	r1, #0
 800e802:	4618      	mov	r0, r3
 800e804:	f7fc fc71 	bl	800b0ea <st_dword>
					fs->wflag = 1;
 800e808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e80a:	2301      	movs	r3, #1
 800e80c:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e80e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e812:	2b00      	cmp	r3, #0
 800e814:	d03d      	beq.n	800e892 <f_open+0x30a>
						dw = fs->winsect;
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e81a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 800e81e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e822:	2200      	movs	r2, #0
 800e824:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e828:	4618      	mov	r0, r3
 800e82a:	f7fd fbd1 	bl	800bfd0 <remove_chain>
 800e82e:	4603      	mov	r3, r0
 800e830:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800e834:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d12a      	bne.n	800e892 <f_open+0x30a>
							res = move_window(fs, dw);
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800e842:	4618      	mov	r0, r3
 800e844:	f7fc ff34 	bl	800b6b0 <move_window>
 800e848:	4603      	mov	r3, r0
 800e84a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e854:	3b01      	subs	r3, #1
 800e856:	6193      	str	r3, [r2, #24]
 800e858:	e01b      	b.n	800e892 <f_open+0x30a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e85a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d117      	bne.n	800e892 <f_open+0x30a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e862:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e866:	f003 0310 	and.w	r3, r3, #16
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d003      	beq.n	800e876 <f_open+0x2ee>
					res = FR_NO_FILE;
 800e86e:	2304      	movs	r3, #4
 800e870:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e874:	e00d      	b.n	800e892 <f_open+0x30a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e876:	7ffb      	ldrb	r3, [r7, #31]
 800e878:	f003 0302 	and.w	r3, r3, #2
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d008      	beq.n	800e892 <f_open+0x30a>
 800e880:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800e884:	f003 0301 	and.w	r3, r3, #1
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d002      	beq.n	800e892 <f_open+0x30a>
						res = FR_DENIED;
 800e88c:	2307      	movs	r3, #7
 800e88e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e892:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e896:	2b00      	cmp	r3, #0
 800e898:	d128      	bne.n	800e8ec <f_open+0x364>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e89a:	7ffb      	ldrb	r3, [r7, #31]
 800e89c:	f003 0308 	and.w	r3, r3, #8
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d003      	beq.n	800e8ac <f_open+0x324>
				mode |= FA_MODIFIED;
 800e8a4:	7ffb      	ldrb	r3, [r7, #31]
 800e8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8aa:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800e8b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e8ba:	7ffb      	ldrb	r3, [r7, #31]
 800e8bc:	f023 0301 	bic.w	r3, r3, #1
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	bf14      	ite	ne
 800e8c4:	2301      	movne	r3, #1
 800e8c6:	2300      	moveq	r3, #0
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fc fdba 	bl	800b44c <inc_lock>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8dc:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d102      	bne.n	800e8ec <f_open+0x364>
 800e8e6:	2302      	movs	r3, #2
 800e8e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e8ec:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f040 810e 	bne.w	800eb12 <f_open+0x58a>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	2b04      	cmp	r3, #4
 800e8fc:	d12d      	bne.n	800e95a <f_open+0x3d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e8fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e904:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e908:	4613      	mov	r3, r2
 800e90a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e90e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e912:	431a      	orrs	r2, r3
 800e914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e916:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800e918:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e91c:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e920:	695b      	ldr	r3, [r3, #20]
 800e922:	3334      	adds	r3, #52	; 0x34
 800e924:	4618      	mov	r0, r3
 800e926:	f7fc fac7 	bl	800aeb8 <ld_dword>
 800e92a:	4602      	mov	r2, r0
 800e92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e932:	695b      	ldr	r3, [r3, #20]
 800e934:	3338      	adds	r3, #56	; 0x38
 800e936:	4618      	mov	r0, r3
 800e938:	f7fc fae1 	bl	800aefe <ld_qword>
 800e93c:	4602      	mov	r2, r0
 800e93e:	460b      	mov	r3, r1
 800e940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e942:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e948:	695b      	ldr	r3, [r3, #20]
 800e94a:	3321      	adds	r3, #33	; 0x21
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	f003 0302 	and.w	r3, r3, #2
 800e952:	b2da      	uxtb	r2, r3
 800e954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e956:	71da      	strb	r2, [r3, #7]
 800e958:	e016      	b.n	800e988 <f_open+0x400>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e95c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e95e:	4619      	mov	r1, r3
 800e960:	4610      	mov	r0, r2
 800e962:	f7fd ff0c 	bl	800c77e <ld_clust>
 800e966:	4602      	mov	r2, r0
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e96c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e96e:	331c      	adds	r3, #28
 800e970:	4618      	mov	r0, r3
 800e972:	f7fc faa1 	bl	800aeb8 <ld_dword>
 800e976:	4603      	mov	r3, r0
 800e978:	2200      	movs	r2, #0
 800e97a:	613b      	str	r3, [r7, #16]
 800e97c:	617a      	str	r2, [r7, #20]
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e984:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	2200      	movs	r2, #0
 800e98c:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e98e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e992:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e996:	88da      	ldrh	r2, [r3, #6]
 800e998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	7ffa      	ldrb	r2, [r7, #31]
 800e9a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800e9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e9b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9b4:	f04f 0200 	mov.w	r2, #0
 800e9b8:	f04f 0300 	mov.w	r3, #0
 800e9bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c2:	3354      	adds	r3, #84	; 0x54
 800e9c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7fc fc62 	bl	800b294 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e9d0:	7ffb      	ldrb	r3, [r7, #31]
 800e9d2:	f003 0320 	and.w	r3, r3, #32
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f000 809b 	beq.w	800eb12 <f_open+0x58a>
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	f000 8095 	beq.w	800eb12 <f_open+0x58a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e9ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9f0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	895b      	ldrh	r3, [r3, #10]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	899b      	ldrh	r3, [r3, #12]
 800e9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ea02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ea06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea10:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ea14:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800ea18:	e023      	b.n	800ea62 <f_open+0x4da>
					clst = get_fat(&fp->obj, clst);
 800ea1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fc ff03 	bl	800b82c <get_fat>
 800ea26:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800ea2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d802      	bhi.n	800ea38 <f_open+0x4b0>
 800ea32:	2302      	movs	r3, #2
 800ea34:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ea38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ea3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea40:	d102      	bne.n	800ea48 <f_open+0x4c0>
 800ea42:	2301      	movs	r3, #1
 800ea44:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ea48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4698      	mov	r8, r3
 800ea50:	4691      	mov	r9, r2
 800ea52:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ea56:	ebb2 0a08 	subs.w	sl, r2, r8
 800ea5a:	eb63 0b09 	sbc.w	fp, r3, r9
 800ea5e:	e9c7 ab24 	strd	sl, fp, [r7, #144]	; 0x90
 800ea62:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d10a      	bne.n	800ea80 <f_open+0x4f8>
 800ea6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea6e:	2200      	movs	r2, #0
 800ea70:	461c      	mov	r4, r3
 800ea72:	4615      	mov	r5, r2
 800ea74:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800ea78:	4294      	cmp	r4, r2
 800ea7a:	eb75 0303 	sbcs.w	r3, r5, r3
 800ea7e:	d3cc      	bcc.n	800ea1a <f_open+0x492>
				}
				fp->clust = clst;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ea86:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ea88:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d140      	bne.n	800eb12 <f_open+0x58a>
 800ea90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea92:	899b      	ldrh	r3, [r3, #12]
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	2200      	movs	r2, #0
 800ea98:	60bb      	str	r3, [r7, #8]
 800ea9a:	60fa      	str	r2, [r7, #12]
 800ea9c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800eaa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800eaa4:	f7f1 fc6c 	bl	8000380 <__aeabi_uldivmod>
 800eaa8:	4313      	orrs	r3, r2
 800eaaa:	d032      	beq.n	800eb12 <f_open+0x58a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800eab2:	4618      	mov	r0, r3
 800eab4:	f7fc fe9a 	bl	800b7ec <clust2sect>
 800eab8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 800eabc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d103      	bne.n	800eacc <f_open+0x544>
						res = FR_INT_ERR;
 800eac4:	2302      	movs	r3, #2
 800eac6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800eaca:	e022      	b.n	800eb12 <f_open+0x58a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800eacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eace:	899b      	ldrh	r3, [r3, #12]
 800ead0:	b29b      	uxth	r3, r3
 800ead2:	2200      	movs	r2, #0
 800ead4:	603b      	str	r3, [r7, #0]
 800ead6:	607a      	str	r2, [r7, #4]
 800ead8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eadc:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800eae0:	f7f1 fc4e 	bl	8000380 <__aeabi_uldivmod>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
 800eae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800eaec:	441a      	add	r2, r3
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800eaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf4:	7858      	ldrb	r0, [r3, #1]
 800eaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb00:	2301      	movs	r3, #1
 800eb02:	f7fc f963 	bl	800adcc <disk_read>
 800eb06:	4603      	mov	r3, r0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d002      	beq.n	800eb12 <f_open+0x58a>
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800eb12:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d002      	beq.n	800eb20 <f_open+0x598>
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800eb20:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800eb24:	4618      	mov	r0, r3
 800eb26:	37a0      	adds	r7, #160	; 0xa0
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800eb2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800eb2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb32:	b091      	sub	sp, #68	; 0x44
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	61f8      	str	r0, [r7, #28]
 800eb38:	61b9      	str	r1, [r7, #24]
 800eb3a:	617a      	str	r2, [r7, #20]
 800eb3c:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	62fb      	str	r3, [r7, #44]	; 0x2c


	*bw = 0;	/* Clear write byte counter */
 800eb42:	693b      	ldr	r3, [r7, #16]
 800eb44:	2200      	movs	r2, #0
 800eb46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	f107 0220 	add.w	r2, r7, #32
 800eb4e:	4611      	mov	r1, r2
 800eb50:	4618      	mov	r0, r3
 800eb52:	f7ff fc9d 	bl	800e490 <validate>
 800eb56:	4603      	mov	r3, r0
 800eb58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eb5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d108      	bne.n	800eb76 <f_write+0x48>
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800eb6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800eb6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d002      	beq.n	800eb7c <f_write+0x4e>
 800eb76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800eb7a:	e1aa      	b.n	800eed2 <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800eb7c:	69fb      	ldr	r3, [r7, #28]
 800eb7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb82:	f003 0302 	and.w	r3, r3, #2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d101      	bne.n	800eb8e <f_write+0x60>
 800eb8a:	2307      	movs	r3, #7
 800eb8c:	e1a1      	b.n	800eed2 <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800eb8e:	6a3b      	ldr	r3, [r7, #32]
 800eb90:	781b      	ldrb	r3, [r3, #0]
 800eb92:	2b04      	cmp	r3, #4
 800eb94:	f000 818d 	beq.w	800eeb2 <f_write+0x384>
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	18d1      	adds	r1, r2, r3
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800eba8:	4613      	mov	r3, r2
 800ebaa:	4299      	cmp	r1, r3
 800ebac:	f080 8181 	bcs.w	800eeb2 <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	43db      	mvns	r3, r3
 800ebba:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ebbc:	e179      	b.n	800eeb2 <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	899b      	ldrh	r3, [r3, #12]
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	2200      	movs	r2, #0
 800ebcc:	461d      	mov	r5, r3
 800ebce:	4616      	mov	r6, r2
 800ebd0:	462a      	mov	r2, r5
 800ebd2:	4633      	mov	r3, r6
 800ebd4:	f7f1 fbd4 	bl	8000380 <__aeabi_uldivmod>
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	f040 810a 	bne.w	800edf2 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ebde:	69fb      	ldr	r3, [r7, #28]
 800ebe0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ebe4:	6a3b      	ldr	r3, [r7, #32]
 800ebe6:	899b      	ldrh	r3, [r3, #12]
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	2200      	movs	r2, #0
 800ebec:	60bb      	str	r3, [r7, #8]
 800ebee:	60fa      	str	r2, [r7, #12]
 800ebf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ebf4:	f7f1 fbc4 	bl	8000380 <__aeabi_uldivmod>
 800ebf8:	4602      	mov	r2, r0
 800ebfa:	460b      	mov	r3, r1
 800ebfc:	6a3b      	ldr	r3, [r7, #32]
 800ebfe:	895b      	ldrh	r3, [r3, #10]
 800ec00:	3b01      	subs	r3, #1
 800ec02:	4013      	ands	r3, r2
 800ec04:	62bb      	str	r3, [r7, #40]	; 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800ec06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d146      	bne.n	800ec9a <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ec0c:	69fb      	ldr	r3, [r7, #28]
 800ec0e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ec12:	4313      	orrs	r3, r2
 800ec14:	d10c      	bne.n	800ec30 <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	689b      	ldr	r3, [r3, #8]
 800ec1a:	63bb      	str	r3, [r7, #56]	; 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d11a      	bne.n	800ec58 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ec22:	69fb      	ldr	r3, [r7, #28]
 800ec24:	2100      	movs	r1, #0
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fd fa86 	bl	800c138 <create_chain>
 800ec2c:	63b8      	str	r0, [r7, #56]	; 0x38
 800ec2e:	e013      	b.n	800ec58 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d007      	beq.n	800ec48 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ec3e:	69f8      	ldr	r0, [r7, #28]
 800ec40:	f7fd fb7b 	bl	800c33a <clmt_clust>
 800ec44:	63b8      	str	r0, [r7, #56]	; 0x38
 800ec46:	e007      	b.n	800ec58 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ec48:	69fa      	ldr	r2, [r7, #28]
 800ec4a:	69fb      	ldr	r3, [r7, #28]
 800ec4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec4e:	4619      	mov	r1, r3
 800ec50:	4610      	mov	r0, r2
 800ec52:	f7fd fa71 	bl	800c138 <create_chain>
 800ec56:	63b8      	str	r0, [r7, #56]	; 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ec58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f000 812e 	beq.w	800eebc <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ec60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d105      	bne.n	800ec72 <f_write+0x144>
 800ec66:	69fb      	ldr	r3, [r7, #28]
 800ec68:	2202      	movs	r2, #2
 800ec6a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e12f      	b.n	800eed2 <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec78:	d105      	bne.n	800ec86 <f_write+0x158>
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	2201      	movs	r2, #1
 800ec7e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ec82:	2301      	movs	r3, #1
 800ec84:	e125      	b.n	800eed2 <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec8a:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ec8c:	69fb      	ldr	r3, [r7, #28]
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d102      	bne.n	800ec9a <f_write+0x16c>
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec98:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eca0:	b25b      	sxtb	r3, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	da1b      	bge.n	800ecde <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eca6:	6a3b      	ldr	r3, [r7, #32]
 800eca8:	7858      	ldrb	r0, [r3, #1]
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	f7fc f8a9 	bl	800ae0c <disk_write>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d005      	beq.n	800eccc <f_write+0x19e>
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ecc8:	2301      	movs	r3, #1
 800ecca:	e102      	b.n	800eed2 <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eccc:	69fb      	ldr	r3, [r7, #28]
 800ecce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ecd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecd6:	b2da      	uxtb	r2, r3
 800ecd8:	69fb      	ldr	r3, [r7, #28]
 800ecda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ecde:	6a3a      	ldr	r2, [r7, #32]
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ece4:	4619      	mov	r1, r3
 800ece6:	4610      	mov	r0, r2
 800ece8:	f7fc fd80 	bl	800b7ec <clust2sect>
 800ecec:	6278      	str	r0, [r7, #36]	; 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ecee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d105      	bne.n	800ed00 <f_write+0x1d2>
 800ecf4:	69fb      	ldr	r3, [r7, #28]
 800ecf6:	2202      	movs	r2, #2
 800ecf8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ecfc:	2302      	movs	r3, #2
 800ecfe:	e0e8      	b.n	800eed2 <f_write+0x3a4>
			sect += csect;
 800ed00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed04:	4413      	add	r3, r2
 800ed06:	627b      	str	r3, [r7, #36]	; 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	899b      	ldrh	r3, [r3, #12]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed14:	633b      	str	r3, [r7, #48]	; 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d046      	beq.n	800edaa <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ed1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed20:	4413      	add	r3, r2
 800ed22:	6a3a      	ldr	r2, [r7, #32]
 800ed24:	8952      	ldrh	r2, [r2, #10]
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d905      	bls.n	800ed36 <f_write+0x208>
					cc = fs->csize - csect;
 800ed2a:	6a3b      	ldr	r3, [r7, #32]
 800ed2c:	895b      	ldrh	r3, [r3, #10]
 800ed2e:	461a      	mov	r2, r3
 800ed30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed32:	1ad3      	subs	r3, r2, r3
 800ed34:	633b      	str	r3, [r7, #48]	; 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	7858      	ldrb	r0, [r3, #1]
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed40:	f7fc f864 	bl	800ae0c <disk_write>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d005      	beq.n	800ed56 <f_write+0x228>
 800ed4a:	69fb      	ldr	r3, [r7, #28]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ed52:	2301      	movs	r3, #1
 800ed54:	e0bd      	b.n	800eed2 <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	1ad3      	subs	r3, r2, r3
 800ed5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d91a      	bls.n	800ed9a <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ed64:	69fb      	ldr	r3, [r7, #28]
 800ed66:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800ed6a:	69fb      	ldr	r3, [r7, #28]
 800ed6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	6a3a      	ldr	r2, [r7, #32]
 800ed74:	8992      	ldrh	r2, [r2, #12]
 800ed76:	fb02 f303 	mul.w	r3, r2, r3
 800ed7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed7c:	18d1      	adds	r1, r2, r3
 800ed7e:	6a3b      	ldr	r3, [r7, #32]
 800ed80:	899b      	ldrh	r3, [r3, #12]
 800ed82:	461a      	mov	r2, r3
 800ed84:	f7fc fa65 	bl	800b252 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ed8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	69fb      	ldr	r3, [r7, #28]
 800ed96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ed9a:	6a3b      	ldr	r3, [r7, #32]
 800ed9c:	899b      	ldrh	r3, [r3, #12]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	fb02 f303 	mul.w	r3, r2, r3
 800eda6:	637b      	str	r3, [r7, #52]	; 0x34
				continue;
 800eda8:	e058      	b.n	800ee5c <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d01b      	beq.n	800edec <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800edb4:	69fb      	ldr	r3, [r7, #28]
 800edb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800edba:	69fb      	ldr	r3, [r7, #28]
 800edbc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800edc0:	4290      	cmp	r0, r2
 800edc2:	eb71 0303 	sbcs.w	r3, r1, r3
 800edc6:	d211      	bcs.n	800edec <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800edc8:	6a3b      	ldr	r3, [r7, #32]
 800edca:	7858      	ldrb	r0, [r3, #1]
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800edd2:	2301      	movs	r3, #1
 800edd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edd6:	f7fb fff9 	bl	800adcc <disk_read>
 800edda:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d005      	beq.n	800edec <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	2201      	movs	r2, #1
 800ede4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800ede8:	2301      	movs	r3, #1
 800edea:	e072      	b.n	800eed2 <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edf0:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800edf2:	6a3b      	ldr	r3, [r7, #32]
 800edf4:	899b      	ldrh	r3, [r3, #12]
 800edf6:	4618      	mov	r0, r3
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800edfe:	6a3b      	ldr	r3, [r7, #32]
 800ee00:	899b      	ldrh	r3, [r3, #12]
 800ee02:	fbb2 f1f3 	udiv	r1, r2, r3
 800ee06:	fb01 f303 	mul.w	r3, r1, r3
 800ee0a:	1ad3      	subs	r3, r2, r3
 800ee0c:	1ac3      	subs	r3, r0, r3
 800ee0e:	637b      	str	r3, [r7, #52]	; 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ee10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d901      	bls.n	800ee1c <f_write+0x2ee>
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	637b      	str	r3, [r7, #52]	; 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800ee28:	6a3b      	ldr	r3, [r7, #32]
 800ee2a:	899b      	ldrh	r3, [r3, #12]
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	2200      	movs	r2, #0
 800ee30:	603b      	str	r3, [r7, #0]
 800ee32:	607a      	str	r2, [r7, #4]
 800ee34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee38:	f7f1 faa2 	bl	8000380 <__aeabi_uldivmod>
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	4423      	add	r3, r4
 800ee40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ee42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fc fa04 	bl	800b252 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ee4a:	69fb      	ldr	r3, [r7, #28]
 800ee4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee54:	b2da      	uxtb	r2, r3
 800ee56:	69fb      	ldr	r3, [r7, #28]
 800ee58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ee5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee60:	4413      	add	r3, r2
 800ee62:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ee6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee6c:	2000      	movs	r0, #0
 800ee6e:	4688      	mov	r8, r1
 800ee70:	4681      	mov	r9, r0
 800ee72:	eb12 0a08 	adds.w	sl, r2, r8
 800ee76:	eb43 0b09 	adc.w	fp, r3, r9
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ee8c:	4290      	cmp	r0, r2
 800ee8e:	eb71 0403 	sbcs.w	r4, r1, r3
 800ee92:	d201      	bcs.n	800ee98 <f_write+0x36a>
 800ee94:	4610      	mov	r0, r2
 800ee96:	4619      	mov	r1, r3
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	681a      	ldr	r2, [r3, #0]
 800eea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eea4:	441a      	add	r2, r3
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	601a      	str	r2, [r3, #0]
 800eeaa:	697a      	ldr	r2, [r7, #20]
 800eeac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f47f ae82 	bne.w	800ebbe <f_write+0x90>
 800eeba:	e000      	b.n	800eebe <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800eebc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eec8:	b2da      	uxtb	r2, r3
 800eeca:	69fb      	ldr	r3, [r7, #28]
 800eecc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800eed0:	2300      	movs	r3, #0
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3744      	adds	r7, #68	; 0x44
 800eed6:	46bd      	mov	sp, r7
 800eed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800eedc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b09a      	sub	sp, #104	; 0x68
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800eeea:	4611      	mov	r1, r2
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7ff facf 	bl	800e490 <validate>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800eef8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	f040 8105 	bne.w	800f10c <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f000 80fd 	beq.w	800f10c <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef18:	b25b      	sxtb	r3, r3
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	da17      	bge.n	800ef4e <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef20:	7858      	ldrb	r0, [r3, #1]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	f7fb ff6d 	bl	800ae0c <disk_write>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d001      	beq.n	800ef3c <f_sync+0x60>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e0e9      	b.n	800f110 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ef4e:	f7fb fd61 	bl	800aa14 <get_fattime>
 800ef52:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ef54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ef56:	781b      	ldrb	r3, [r3, #0]
 800ef58:	2b04      	cmp	r3, #4
 800ef5a:	f040 808c 	bne.w	800f076 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7fc ffd5 	bl	800bf10 <fill_first_frag>
 800ef66:	4603      	mov	r3, r0
 800ef68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800ef6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d10a      	bne.n	800ef8a <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef7e:	4619      	mov	r1, r3
 800ef80:	f7fc fff5 	bl	800bf6e <fill_last_frag>
 800ef84:	4603      	mov	r3, r0
 800ef86:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 800ef8a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f040 80bc 	bne.w	800f10c <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	f107 0308 	add.w	r3, r7, #8
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fd ff3d 	bl	800ce1c <load_obj_dir>
 800efa2:	4603      	mov	r3, r0
 800efa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 800efa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800efac:	2b00      	cmp	r3, #0
 800efae:	f040 80ad 	bne.w	800f10c <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800efb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efb4:	695b      	ldr	r3, [r3, #20]
 800efb6:	3304      	adds	r3, #4
 800efb8:	781a      	ldrb	r2, [r3, #0]
 800efba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efbc:	695b      	ldr	r3, [r3, #20]
 800efbe:	3304      	adds	r3, #4
 800efc0:	f042 0220 	orr.w	r2, r2, #32
 800efc4:	b2d2      	uxtb	r2, r2
 800efc6:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	79da      	ldrb	r2, [r3, #7]
 800efcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efce:	695b      	ldr	r3, [r3, #20]
 800efd0:	3321      	adds	r3, #33	; 0x21
 800efd2:	f042 0201 	orr.w	r2, r2, #1
 800efd6:	b2d2      	uxtb	r2, r2
 800efd8:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800efda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800efdc:	695b      	ldr	r3, [r3, #20]
 800efde:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	689b      	ldr	r3, [r3, #8]
 800efe6:	4619      	mov	r1, r3
 800efe8:	4610      	mov	r0, r2
 800efea:	f7fc f87e 	bl	800b0ea <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800efee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eff0:	695b      	ldr	r3, [r3, #20]
 800eff2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800effc:	4608      	mov	r0, r1
 800effe:	f7fc f8a0 	bl	800b142 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800f002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f010:	4608      	mov	r0, r1
 800f012:	f7fc f896 	bl	800b142 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800f016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f018:	695b      	ldr	r3, [r3, #20]
 800f01a:	330c      	adds	r3, #12
 800f01c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fc f863 	bl	800b0ea <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800f024:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	3315      	adds	r3, #21
 800f02a:	2200      	movs	r2, #0
 800f02c:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800f02e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f030:	695b      	ldr	r3, [r3, #20]
 800f032:	3310      	adds	r3, #16
 800f034:	2100      	movs	r1, #0
 800f036:	4618      	mov	r0, r3
 800f038:	f7fc f857 	bl	800b0ea <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800f03c:	f107 0308 	add.w	r3, r7, #8
 800f040:	4618      	mov	r0, r3
 800f042:	f7fd ff21 	bl	800ce88 <store_xdir>
 800f046:	4603      	mov	r3, r0
 800f048:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f04c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f050:	2b00      	cmp	r3, #0
 800f052:	d15b      	bne.n	800f10c <f_sync+0x230>
							res = sync_fs(fs);
 800f054:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f056:	4618      	mov	r0, r3
 800f058:	f7fc fb58 	bl	800b70c <sync_fs>
 800f05c:	4603      	mov	r3, r0
 800f05e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f06c:	b2da      	uxtb	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f074:	e04a      	b.n	800f10c <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800f076:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f07c:	4619      	mov	r1, r3
 800f07e:	4610      	mov	r0, r2
 800f080:	f7fc fb16 	bl	800b6b0 <move_window>
 800f084:	4603      	mov	r3, r0
 800f086:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800f08a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d13c      	bne.n	800f10c <f_sync+0x230>
					dir = fp->dir_ptr;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f096:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800f098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f09a:	330b      	adds	r3, #11
 800f09c:	781a      	ldrb	r2, [r3, #0]
 800f09e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0a0:	330b      	adds	r3, #11
 800f0a2:	f042 0220 	orr.w	r2, r2, #32
 800f0a6:	b2d2      	uxtb	r2, r2
 800f0a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6818      	ldr	r0, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f0b6:	f7fd fb81 	bl	800c7bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f0ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0bc:	f103 001c 	add.w	r0, r3, #28
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f0c6:	4613      	mov	r3, r2
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	f7fc f80e 	bl	800b0ea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f0ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0d0:	3316      	adds	r3, #22
 800f0d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	f7fc f808 	bl	800b0ea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f0da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f0dc:	3312      	adds	r3, #18
 800f0de:	2100      	movs	r1, #0
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fb ffe7 	bl	800b0b4 <st_word>
					fs->wflag = 1;
 800f0e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f0ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fc fb0c 	bl	800b70c <sync_fs>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f104:	b2da      	uxtb	r2, r3
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f10c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800f110:	4618      	mov	r0, r3
 800f112:	3768      	adds	r7, #104	; 0x68
 800f114:	46bd      	mov	sp, r7
 800f116:	bd80      	pop	{r7, pc}

0800f118 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b084      	sub	sp, #16
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f7ff fedb 	bl	800eedc <f_sync>
 800f126:	4603      	mov	r3, r0
 800f128:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d118      	bne.n	800f162 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f107 0208 	add.w	r2, r7, #8
 800f136:	4611      	mov	r1, r2
 800f138:	4618      	mov	r0, r3
 800f13a:	f7ff f9a9 	bl	800e490 <validate>
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f142:	7bfb      	ldrb	r3, [r7, #15]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d10c      	bne.n	800f162 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f14c:	4618      	mov	r0, r3
 800f14e:	f7fc fa0b 	bl	800b568 <dec_lock>
 800f152:	4603      	mov	r3, r0
 800f154:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f156:	7bfb      	ldrb	r3, [r7, #15]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d102      	bne.n	800f162 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2200      	movs	r2, #0
 800f160:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800f162:	7bfb      	ldrb	r3, [r7, #15]
}
 800f164:	4618      	mov	r0, r3
 800f166:	3710      	adds	r7, #16
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b087      	sub	sp, #28
 800f170:	af00      	add	r7, sp, #0
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	4613      	mov	r3, r2
 800f178:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f17a:	2301      	movs	r3, #1
 800f17c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f182:	4b1f      	ldr	r3, [pc, #124]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f184:	7a5b      	ldrb	r3, [r3, #9]
 800f186:	b2db      	uxtb	r3, r3
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d131      	bne.n	800f1f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f18c:	4b1c      	ldr	r3, [pc, #112]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f18e:	7a5b      	ldrb	r3, [r3, #9]
 800f190:	b2db      	uxtb	r3, r3
 800f192:	461a      	mov	r2, r3
 800f194:	4b1a      	ldr	r3, [pc, #104]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f196:	2100      	movs	r1, #0
 800f198:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f19a:	4b19      	ldr	r3, [pc, #100]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f19c:	7a5b      	ldrb	r3, [r3, #9]
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	4a17      	ldr	r2, [pc, #92]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f1a2:	009b      	lsls	r3, r3, #2
 800f1a4:	4413      	add	r3, r2
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f1aa:	4b15      	ldr	r3, [pc, #84]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f1ac:	7a5b      	ldrb	r3, [r3, #9]
 800f1ae:	b2db      	uxtb	r3, r3
 800f1b0:	461a      	mov	r2, r3
 800f1b2:	4b13      	ldr	r3, [pc, #76]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f1b4:	4413      	add	r3, r2
 800f1b6:	79fa      	ldrb	r2, [r7, #7]
 800f1b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f1ba:	4b11      	ldr	r3, [pc, #68]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f1bc:	7a5b      	ldrb	r3, [r3, #9]
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	1c5a      	adds	r2, r3, #1
 800f1c2:	b2d1      	uxtb	r1, r2
 800f1c4:	4a0e      	ldr	r2, [pc, #56]	; (800f200 <FATFS_LinkDriverEx+0x94>)
 800f1c6:	7251      	strb	r1, [r2, #9]
 800f1c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f1ca:	7dbb      	ldrb	r3, [r7, #22]
 800f1cc:	3330      	adds	r3, #48	; 0x30
 800f1ce:	b2da      	uxtb	r2, r3
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	223a      	movs	r2, #58	; 0x3a
 800f1da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	3302      	adds	r3, #2
 800f1e0:	222f      	movs	r2, #47	; 0x2f
 800f1e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	3303      	adds	r3, #3
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	371c      	adds	r7, #28
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop
 800f200:	240027c8 	.word	0x240027c8

0800f204 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b082      	sub	sp, #8
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
 800f20c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f20e:	2200      	movs	r2, #0
 800f210:	6839      	ldr	r1, [r7, #0]
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f7ff ffaa 	bl	800f16c <FATFS_LinkDriverEx>
 800f218:	4603      	mov	r3, r0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3708      	adds	r7, #8
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
	...

0800f224 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	4603      	mov	r3, r0
 800f22c:	6039      	str	r1, [r7, #0]
 800f22e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f230:	88fb      	ldrh	r3, [r7, #6]
 800f232:	2b7f      	cmp	r3, #127	; 0x7f
 800f234:	d802      	bhi.n	800f23c <ff_convert+0x18>
		c = chr;
 800f236:	88fb      	ldrh	r3, [r7, #6]
 800f238:	81fb      	strh	r3, [r7, #14]
 800f23a:	e025      	b.n	800f288 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00b      	beq.n	800f25a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f242:	88fb      	ldrh	r3, [r7, #6]
 800f244:	2bff      	cmp	r3, #255	; 0xff
 800f246:	d805      	bhi.n	800f254 <ff_convert+0x30>
 800f248:	88fb      	ldrh	r3, [r7, #6]
 800f24a:	3b80      	subs	r3, #128	; 0x80
 800f24c:	4a12      	ldr	r2, [pc, #72]	; (800f298 <ff_convert+0x74>)
 800f24e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f252:	e000      	b.n	800f256 <ff_convert+0x32>
 800f254:	2300      	movs	r3, #0
 800f256:	81fb      	strh	r3, [r7, #14]
 800f258:	e016      	b.n	800f288 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f25a:	2300      	movs	r3, #0
 800f25c:	81fb      	strh	r3, [r7, #14]
 800f25e:	e009      	b.n	800f274 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f260:	89fb      	ldrh	r3, [r7, #14]
 800f262:	4a0d      	ldr	r2, [pc, #52]	; (800f298 <ff_convert+0x74>)
 800f264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f268:	88fa      	ldrh	r2, [r7, #6]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d006      	beq.n	800f27c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f26e:	89fb      	ldrh	r3, [r7, #14]
 800f270:	3301      	adds	r3, #1
 800f272:	81fb      	strh	r3, [r7, #14]
 800f274:	89fb      	ldrh	r3, [r7, #14]
 800f276:	2b7f      	cmp	r3, #127	; 0x7f
 800f278:	d9f2      	bls.n	800f260 <ff_convert+0x3c>
 800f27a:	e000      	b.n	800f27e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f27c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f27e:	89fb      	ldrh	r3, [r7, #14]
 800f280:	3380      	adds	r3, #128	; 0x80
 800f282:	b29b      	uxth	r3, r3
 800f284:	b2db      	uxtb	r3, r3
 800f286:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f288:	89fb      	ldrh	r3, [r7, #14]
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3714      	adds	r7, #20
 800f28e:	46bd      	mov	sp, r7
 800f290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop
 800f298:	080109b4 	.word	0x080109b4

0800f29c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b087      	sub	sp, #28
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f2a6:	88fb      	ldrh	r3, [r7, #6]
 800f2a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2ac:	d201      	bcs.n	800f2b2 <ff_wtoupper+0x16>
 800f2ae:	4b3e      	ldr	r3, [pc, #248]	; (800f3a8 <ff_wtoupper+0x10c>)
 800f2b0:	e000      	b.n	800f2b4 <ff_wtoupper+0x18>
 800f2b2:	4b3e      	ldr	r3, [pc, #248]	; (800f3ac <ff_wtoupper+0x110>)
 800f2b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	1c9a      	adds	r2, r3, #2
 800f2ba:	617a      	str	r2, [r7, #20]
 800f2bc:	881b      	ldrh	r3, [r3, #0]
 800f2be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f2c0:	8a7b      	ldrh	r3, [r7, #18]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d068      	beq.n	800f398 <ff_wtoupper+0xfc>
 800f2c6:	88fa      	ldrh	r2, [r7, #6]
 800f2c8:	8a7b      	ldrh	r3, [r7, #18]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d364      	bcc.n	800f398 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	1c9a      	adds	r2, r3, #2
 800f2d2:	617a      	str	r2, [r7, #20]
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	823b      	strh	r3, [r7, #16]
 800f2d8:	8a3b      	ldrh	r3, [r7, #16]
 800f2da:	0a1b      	lsrs	r3, r3, #8
 800f2dc:	81fb      	strh	r3, [r7, #14]
 800f2de:	8a3b      	ldrh	r3, [r7, #16]
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f2e4:	88fa      	ldrh	r2, [r7, #6]
 800f2e6:	8a79      	ldrh	r1, [r7, #18]
 800f2e8:	8a3b      	ldrh	r3, [r7, #16]
 800f2ea:	440b      	add	r3, r1
 800f2ec:	429a      	cmp	r2, r3
 800f2ee:	da49      	bge.n	800f384 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f2f0:	89fb      	ldrh	r3, [r7, #14]
 800f2f2:	2b08      	cmp	r3, #8
 800f2f4:	d84f      	bhi.n	800f396 <ff_wtoupper+0xfa>
 800f2f6:	a201      	add	r2, pc, #4	; (adr r2, 800f2fc <ff_wtoupper+0x60>)
 800f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fc:	0800f321 	.word	0x0800f321
 800f300:	0800f333 	.word	0x0800f333
 800f304:	0800f349 	.word	0x0800f349
 800f308:	0800f351 	.word	0x0800f351
 800f30c:	0800f359 	.word	0x0800f359
 800f310:	0800f361 	.word	0x0800f361
 800f314:	0800f369 	.word	0x0800f369
 800f318:	0800f371 	.word	0x0800f371
 800f31c:	0800f379 	.word	0x0800f379
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f320:	88fa      	ldrh	r2, [r7, #6]
 800f322:	8a7b      	ldrh	r3, [r7, #18]
 800f324:	1ad3      	subs	r3, r2, r3
 800f326:	005b      	lsls	r3, r3, #1
 800f328:	697a      	ldr	r2, [r7, #20]
 800f32a:	4413      	add	r3, r2
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	80fb      	strh	r3, [r7, #6]
 800f330:	e027      	b.n	800f382 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f332:	88fa      	ldrh	r2, [r7, #6]
 800f334:	8a7b      	ldrh	r3, [r7, #18]
 800f336:	1ad3      	subs	r3, r2, r3
 800f338:	b29b      	uxth	r3, r3
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	b29b      	uxth	r3, r3
 800f340:	88fa      	ldrh	r2, [r7, #6]
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	80fb      	strh	r3, [r7, #6]
 800f346:	e01c      	b.n	800f382 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f348:	88fb      	ldrh	r3, [r7, #6]
 800f34a:	3b10      	subs	r3, #16
 800f34c:	80fb      	strh	r3, [r7, #6]
 800f34e:	e018      	b.n	800f382 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f350:	88fb      	ldrh	r3, [r7, #6]
 800f352:	3b20      	subs	r3, #32
 800f354:	80fb      	strh	r3, [r7, #6]
 800f356:	e014      	b.n	800f382 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f358:	88fb      	ldrh	r3, [r7, #6]
 800f35a:	3b30      	subs	r3, #48	; 0x30
 800f35c:	80fb      	strh	r3, [r7, #6]
 800f35e:	e010      	b.n	800f382 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f360:	88fb      	ldrh	r3, [r7, #6]
 800f362:	3b1a      	subs	r3, #26
 800f364:	80fb      	strh	r3, [r7, #6]
 800f366:	e00c      	b.n	800f382 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f368:	88fb      	ldrh	r3, [r7, #6]
 800f36a:	3308      	adds	r3, #8
 800f36c:	80fb      	strh	r3, [r7, #6]
 800f36e:	e008      	b.n	800f382 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f370:	88fb      	ldrh	r3, [r7, #6]
 800f372:	3b50      	subs	r3, #80	; 0x50
 800f374:	80fb      	strh	r3, [r7, #6]
 800f376:	e004      	b.n	800f382 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f378:	88fb      	ldrh	r3, [r7, #6]
 800f37a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800f37e:	80fb      	strh	r3, [r7, #6]
 800f380:	bf00      	nop
			}
			break;
 800f382:	e008      	b.n	800f396 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f384:	89fb      	ldrh	r3, [r7, #14]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d195      	bne.n	800f2b6 <ff_wtoupper+0x1a>
 800f38a:	8a3b      	ldrh	r3, [r7, #16]
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	697a      	ldr	r2, [r7, #20]
 800f390:	4413      	add	r3, r2
 800f392:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f394:	e78f      	b.n	800f2b6 <ff_wtoupper+0x1a>
			break;
 800f396:	bf00      	nop
	}

	return chr;
 800f398:	88fb      	ldrh	r3, [r7, #6]
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	371c      	adds	r7, #28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop
 800f3a8:	08010ab4 	.word	0x08010ab4
 800f3ac:	08010ca8 	.word	0x08010ca8

0800f3b0 <__errno>:
 800f3b0:	4b01      	ldr	r3, [pc, #4]	; (800f3b8 <__errno+0x8>)
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	24000010 	.word	0x24000010

0800f3bc <__libc_init_array>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4d0d      	ldr	r5, [pc, #52]	; (800f3f4 <__libc_init_array+0x38>)
 800f3c0:	4c0d      	ldr	r4, [pc, #52]	; (800f3f8 <__libc_init_array+0x3c>)
 800f3c2:	1b64      	subs	r4, r4, r5
 800f3c4:	10a4      	asrs	r4, r4, #2
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	42a6      	cmp	r6, r4
 800f3ca:	d109      	bne.n	800f3e0 <__libc_init_array+0x24>
 800f3cc:	4d0b      	ldr	r5, [pc, #44]	; (800f3fc <__libc_init_array+0x40>)
 800f3ce:	4c0c      	ldr	r4, [pc, #48]	; (800f400 <__libc_init_array+0x44>)
 800f3d0:	f001 fa00 	bl	80107d4 <_init>
 800f3d4:	1b64      	subs	r4, r4, r5
 800f3d6:	10a4      	asrs	r4, r4, #2
 800f3d8:	2600      	movs	r6, #0
 800f3da:	42a6      	cmp	r6, r4
 800f3dc:	d105      	bne.n	800f3ea <__libc_init_array+0x2e>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e4:	4798      	blx	r3
 800f3e6:	3601      	adds	r6, #1
 800f3e8:	e7ee      	b.n	800f3c8 <__libc_init_array+0xc>
 800f3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ee:	4798      	blx	r3
 800f3f0:	3601      	adds	r6, #1
 800f3f2:	e7f2      	b.n	800f3da <__libc_init_array+0x1e>
 800f3f4:	08010e04 	.word	0x08010e04
 800f3f8:	08010e04 	.word	0x08010e04
 800f3fc:	08010e04 	.word	0x08010e04
 800f400:	08010e08 	.word	0x08010e08

0800f404 <memset>:
 800f404:	4402      	add	r2, r0
 800f406:	4603      	mov	r3, r0
 800f408:	4293      	cmp	r3, r2
 800f40a:	d100      	bne.n	800f40e <memset+0xa>
 800f40c:	4770      	bx	lr
 800f40e:	f803 1b01 	strb.w	r1, [r3], #1
 800f412:	e7f9      	b.n	800f408 <memset+0x4>

0800f414 <iprintf>:
 800f414:	b40f      	push	{r0, r1, r2, r3}
 800f416:	4b0a      	ldr	r3, [pc, #40]	; (800f440 <iprintf+0x2c>)
 800f418:	b513      	push	{r0, r1, r4, lr}
 800f41a:	681c      	ldr	r4, [r3, #0]
 800f41c:	b124      	cbz	r4, 800f428 <iprintf+0x14>
 800f41e:	69a3      	ldr	r3, [r4, #24]
 800f420:	b913      	cbnz	r3, 800f428 <iprintf+0x14>
 800f422:	4620      	mov	r0, r4
 800f424:	f000 fa7e 	bl	800f924 <__sinit>
 800f428:	ab05      	add	r3, sp, #20
 800f42a:	9a04      	ldr	r2, [sp, #16]
 800f42c:	68a1      	ldr	r1, [r4, #8]
 800f42e:	9301      	str	r3, [sp, #4]
 800f430:	4620      	mov	r0, r4
 800f432:	f000 fde3 	bl	800fffc <_vfiprintf_r>
 800f436:	b002      	add	sp, #8
 800f438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f43c:	b004      	add	sp, #16
 800f43e:	4770      	bx	lr
 800f440:	24000010 	.word	0x24000010

0800f444 <_puts_r>:
 800f444:	b570      	push	{r4, r5, r6, lr}
 800f446:	460e      	mov	r6, r1
 800f448:	4605      	mov	r5, r0
 800f44a:	b118      	cbz	r0, 800f454 <_puts_r+0x10>
 800f44c:	6983      	ldr	r3, [r0, #24]
 800f44e:	b90b      	cbnz	r3, 800f454 <_puts_r+0x10>
 800f450:	f000 fa68 	bl	800f924 <__sinit>
 800f454:	69ab      	ldr	r3, [r5, #24]
 800f456:	68ac      	ldr	r4, [r5, #8]
 800f458:	b913      	cbnz	r3, 800f460 <_puts_r+0x1c>
 800f45a:	4628      	mov	r0, r5
 800f45c:	f000 fa62 	bl	800f924 <__sinit>
 800f460:	4b2c      	ldr	r3, [pc, #176]	; (800f514 <_puts_r+0xd0>)
 800f462:	429c      	cmp	r4, r3
 800f464:	d120      	bne.n	800f4a8 <_puts_r+0x64>
 800f466:	686c      	ldr	r4, [r5, #4]
 800f468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f46a:	07db      	lsls	r3, r3, #31
 800f46c:	d405      	bmi.n	800f47a <_puts_r+0x36>
 800f46e:	89a3      	ldrh	r3, [r4, #12]
 800f470:	0598      	lsls	r0, r3, #22
 800f472:	d402      	bmi.n	800f47a <_puts_r+0x36>
 800f474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f476:	f000 faf3 	bl	800fa60 <__retarget_lock_acquire_recursive>
 800f47a:	89a3      	ldrh	r3, [r4, #12]
 800f47c:	0719      	lsls	r1, r3, #28
 800f47e:	d51d      	bpl.n	800f4bc <_puts_r+0x78>
 800f480:	6923      	ldr	r3, [r4, #16]
 800f482:	b1db      	cbz	r3, 800f4bc <_puts_r+0x78>
 800f484:	3e01      	subs	r6, #1
 800f486:	68a3      	ldr	r3, [r4, #8]
 800f488:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f48c:	3b01      	subs	r3, #1
 800f48e:	60a3      	str	r3, [r4, #8]
 800f490:	bb39      	cbnz	r1, 800f4e2 <_puts_r+0x9e>
 800f492:	2b00      	cmp	r3, #0
 800f494:	da38      	bge.n	800f508 <_puts_r+0xc4>
 800f496:	4622      	mov	r2, r4
 800f498:	210a      	movs	r1, #10
 800f49a:	4628      	mov	r0, r5
 800f49c:	f000 f868 	bl	800f570 <__swbuf_r>
 800f4a0:	3001      	adds	r0, #1
 800f4a2:	d011      	beq.n	800f4c8 <_puts_r+0x84>
 800f4a4:	250a      	movs	r5, #10
 800f4a6:	e011      	b.n	800f4cc <_puts_r+0x88>
 800f4a8:	4b1b      	ldr	r3, [pc, #108]	; (800f518 <_puts_r+0xd4>)
 800f4aa:	429c      	cmp	r4, r3
 800f4ac:	d101      	bne.n	800f4b2 <_puts_r+0x6e>
 800f4ae:	68ac      	ldr	r4, [r5, #8]
 800f4b0:	e7da      	b.n	800f468 <_puts_r+0x24>
 800f4b2:	4b1a      	ldr	r3, [pc, #104]	; (800f51c <_puts_r+0xd8>)
 800f4b4:	429c      	cmp	r4, r3
 800f4b6:	bf08      	it	eq
 800f4b8:	68ec      	ldreq	r4, [r5, #12]
 800f4ba:	e7d5      	b.n	800f468 <_puts_r+0x24>
 800f4bc:	4621      	mov	r1, r4
 800f4be:	4628      	mov	r0, r5
 800f4c0:	f000 f8a8 	bl	800f614 <__swsetup_r>
 800f4c4:	2800      	cmp	r0, #0
 800f4c6:	d0dd      	beq.n	800f484 <_puts_r+0x40>
 800f4c8:	f04f 35ff 	mov.w	r5, #4294967295
 800f4cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f4ce:	07da      	lsls	r2, r3, #31
 800f4d0:	d405      	bmi.n	800f4de <_puts_r+0x9a>
 800f4d2:	89a3      	ldrh	r3, [r4, #12]
 800f4d4:	059b      	lsls	r3, r3, #22
 800f4d6:	d402      	bmi.n	800f4de <_puts_r+0x9a>
 800f4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f4da:	f000 fac2 	bl	800fa62 <__retarget_lock_release_recursive>
 800f4de:	4628      	mov	r0, r5
 800f4e0:	bd70      	pop	{r4, r5, r6, pc}
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	da04      	bge.n	800f4f0 <_puts_r+0xac>
 800f4e6:	69a2      	ldr	r2, [r4, #24]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	dc06      	bgt.n	800f4fa <_puts_r+0xb6>
 800f4ec:	290a      	cmp	r1, #10
 800f4ee:	d004      	beq.n	800f4fa <_puts_r+0xb6>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	1c5a      	adds	r2, r3, #1
 800f4f4:	6022      	str	r2, [r4, #0]
 800f4f6:	7019      	strb	r1, [r3, #0]
 800f4f8:	e7c5      	b.n	800f486 <_puts_r+0x42>
 800f4fa:	4622      	mov	r2, r4
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	f000 f837 	bl	800f570 <__swbuf_r>
 800f502:	3001      	adds	r0, #1
 800f504:	d1bf      	bne.n	800f486 <_puts_r+0x42>
 800f506:	e7df      	b.n	800f4c8 <_puts_r+0x84>
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	250a      	movs	r5, #10
 800f50c:	1c5a      	adds	r2, r3, #1
 800f50e:	6022      	str	r2, [r4, #0]
 800f510:	701d      	strb	r5, [r3, #0]
 800f512:	e7db      	b.n	800f4cc <_puts_r+0x88>
 800f514:	08010d88 	.word	0x08010d88
 800f518:	08010da8 	.word	0x08010da8
 800f51c:	08010d68 	.word	0x08010d68

0800f520 <puts>:
 800f520:	4b02      	ldr	r3, [pc, #8]	; (800f52c <puts+0xc>)
 800f522:	4601      	mov	r1, r0
 800f524:	6818      	ldr	r0, [r3, #0]
 800f526:	f7ff bf8d 	b.w	800f444 <_puts_r>
 800f52a:	bf00      	nop
 800f52c:	24000010 	.word	0x24000010

0800f530 <siprintf>:
 800f530:	b40e      	push	{r1, r2, r3}
 800f532:	b500      	push	{lr}
 800f534:	b09c      	sub	sp, #112	; 0x70
 800f536:	ab1d      	add	r3, sp, #116	; 0x74
 800f538:	9002      	str	r0, [sp, #8]
 800f53a:	9006      	str	r0, [sp, #24]
 800f53c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f540:	4809      	ldr	r0, [pc, #36]	; (800f568 <siprintf+0x38>)
 800f542:	9107      	str	r1, [sp, #28]
 800f544:	9104      	str	r1, [sp, #16]
 800f546:	4909      	ldr	r1, [pc, #36]	; (800f56c <siprintf+0x3c>)
 800f548:	f853 2b04 	ldr.w	r2, [r3], #4
 800f54c:	9105      	str	r1, [sp, #20]
 800f54e:	6800      	ldr	r0, [r0, #0]
 800f550:	9301      	str	r3, [sp, #4]
 800f552:	a902      	add	r1, sp, #8
 800f554:	f000 fc28 	bl	800fda8 <_svfiprintf_r>
 800f558:	9b02      	ldr	r3, [sp, #8]
 800f55a:	2200      	movs	r2, #0
 800f55c:	701a      	strb	r2, [r3, #0]
 800f55e:	b01c      	add	sp, #112	; 0x70
 800f560:	f85d eb04 	ldr.w	lr, [sp], #4
 800f564:	b003      	add	sp, #12
 800f566:	4770      	bx	lr
 800f568:	24000010 	.word	0x24000010
 800f56c:	ffff0208 	.word	0xffff0208

0800f570 <__swbuf_r>:
 800f570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f572:	460e      	mov	r6, r1
 800f574:	4614      	mov	r4, r2
 800f576:	4605      	mov	r5, r0
 800f578:	b118      	cbz	r0, 800f582 <__swbuf_r+0x12>
 800f57a:	6983      	ldr	r3, [r0, #24]
 800f57c:	b90b      	cbnz	r3, 800f582 <__swbuf_r+0x12>
 800f57e:	f000 f9d1 	bl	800f924 <__sinit>
 800f582:	4b21      	ldr	r3, [pc, #132]	; (800f608 <__swbuf_r+0x98>)
 800f584:	429c      	cmp	r4, r3
 800f586:	d12b      	bne.n	800f5e0 <__swbuf_r+0x70>
 800f588:	686c      	ldr	r4, [r5, #4]
 800f58a:	69a3      	ldr	r3, [r4, #24]
 800f58c:	60a3      	str	r3, [r4, #8]
 800f58e:	89a3      	ldrh	r3, [r4, #12]
 800f590:	071a      	lsls	r2, r3, #28
 800f592:	d52f      	bpl.n	800f5f4 <__swbuf_r+0x84>
 800f594:	6923      	ldr	r3, [r4, #16]
 800f596:	b36b      	cbz	r3, 800f5f4 <__swbuf_r+0x84>
 800f598:	6923      	ldr	r3, [r4, #16]
 800f59a:	6820      	ldr	r0, [r4, #0]
 800f59c:	1ac0      	subs	r0, r0, r3
 800f59e:	6963      	ldr	r3, [r4, #20]
 800f5a0:	b2f6      	uxtb	r6, r6
 800f5a2:	4283      	cmp	r3, r0
 800f5a4:	4637      	mov	r7, r6
 800f5a6:	dc04      	bgt.n	800f5b2 <__swbuf_r+0x42>
 800f5a8:	4621      	mov	r1, r4
 800f5aa:	4628      	mov	r0, r5
 800f5ac:	f000 f926 	bl	800f7fc <_fflush_r>
 800f5b0:	bb30      	cbnz	r0, 800f600 <__swbuf_r+0x90>
 800f5b2:	68a3      	ldr	r3, [r4, #8]
 800f5b4:	3b01      	subs	r3, #1
 800f5b6:	60a3      	str	r3, [r4, #8]
 800f5b8:	6823      	ldr	r3, [r4, #0]
 800f5ba:	1c5a      	adds	r2, r3, #1
 800f5bc:	6022      	str	r2, [r4, #0]
 800f5be:	701e      	strb	r6, [r3, #0]
 800f5c0:	6963      	ldr	r3, [r4, #20]
 800f5c2:	3001      	adds	r0, #1
 800f5c4:	4283      	cmp	r3, r0
 800f5c6:	d004      	beq.n	800f5d2 <__swbuf_r+0x62>
 800f5c8:	89a3      	ldrh	r3, [r4, #12]
 800f5ca:	07db      	lsls	r3, r3, #31
 800f5cc:	d506      	bpl.n	800f5dc <__swbuf_r+0x6c>
 800f5ce:	2e0a      	cmp	r6, #10
 800f5d0:	d104      	bne.n	800f5dc <__swbuf_r+0x6c>
 800f5d2:	4621      	mov	r1, r4
 800f5d4:	4628      	mov	r0, r5
 800f5d6:	f000 f911 	bl	800f7fc <_fflush_r>
 800f5da:	b988      	cbnz	r0, 800f600 <__swbuf_r+0x90>
 800f5dc:	4638      	mov	r0, r7
 800f5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5e0:	4b0a      	ldr	r3, [pc, #40]	; (800f60c <__swbuf_r+0x9c>)
 800f5e2:	429c      	cmp	r4, r3
 800f5e4:	d101      	bne.n	800f5ea <__swbuf_r+0x7a>
 800f5e6:	68ac      	ldr	r4, [r5, #8]
 800f5e8:	e7cf      	b.n	800f58a <__swbuf_r+0x1a>
 800f5ea:	4b09      	ldr	r3, [pc, #36]	; (800f610 <__swbuf_r+0xa0>)
 800f5ec:	429c      	cmp	r4, r3
 800f5ee:	bf08      	it	eq
 800f5f0:	68ec      	ldreq	r4, [r5, #12]
 800f5f2:	e7ca      	b.n	800f58a <__swbuf_r+0x1a>
 800f5f4:	4621      	mov	r1, r4
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f000 f80c 	bl	800f614 <__swsetup_r>
 800f5fc:	2800      	cmp	r0, #0
 800f5fe:	d0cb      	beq.n	800f598 <__swbuf_r+0x28>
 800f600:	f04f 37ff 	mov.w	r7, #4294967295
 800f604:	e7ea      	b.n	800f5dc <__swbuf_r+0x6c>
 800f606:	bf00      	nop
 800f608:	08010d88 	.word	0x08010d88
 800f60c:	08010da8 	.word	0x08010da8
 800f610:	08010d68 	.word	0x08010d68

0800f614 <__swsetup_r>:
 800f614:	4b32      	ldr	r3, [pc, #200]	; (800f6e0 <__swsetup_r+0xcc>)
 800f616:	b570      	push	{r4, r5, r6, lr}
 800f618:	681d      	ldr	r5, [r3, #0]
 800f61a:	4606      	mov	r6, r0
 800f61c:	460c      	mov	r4, r1
 800f61e:	b125      	cbz	r5, 800f62a <__swsetup_r+0x16>
 800f620:	69ab      	ldr	r3, [r5, #24]
 800f622:	b913      	cbnz	r3, 800f62a <__swsetup_r+0x16>
 800f624:	4628      	mov	r0, r5
 800f626:	f000 f97d 	bl	800f924 <__sinit>
 800f62a:	4b2e      	ldr	r3, [pc, #184]	; (800f6e4 <__swsetup_r+0xd0>)
 800f62c:	429c      	cmp	r4, r3
 800f62e:	d10f      	bne.n	800f650 <__swsetup_r+0x3c>
 800f630:	686c      	ldr	r4, [r5, #4]
 800f632:	89a3      	ldrh	r3, [r4, #12]
 800f634:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f638:	0719      	lsls	r1, r3, #28
 800f63a:	d42c      	bmi.n	800f696 <__swsetup_r+0x82>
 800f63c:	06dd      	lsls	r5, r3, #27
 800f63e:	d411      	bmi.n	800f664 <__swsetup_r+0x50>
 800f640:	2309      	movs	r3, #9
 800f642:	6033      	str	r3, [r6, #0]
 800f644:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f648:	81a3      	strh	r3, [r4, #12]
 800f64a:	f04f 30ff 	mov.w	r0, #4294967295
 800f64e:	e03e      	b.n	800f6ce <__swsetup_r+0xba>
 800f650:	4b25      	ldr	r3, [pc, #148]	; (800f6e8 <__swsetup_r+0xd4>)
 800f652:	429c      	cmp	r4, r3
 800f654:	d101      	bne.n	800f65a <__swsetup_r+0x46>
 800f656:	68ac      	ldr	r4, [r5, #8]
 800f658:	e7eb      	b.n	800f632 <__swsetup_r+0x1e>
 800f65a:	4b24      	ldr	r3, [pc, #144]	; (800f6ec <__swsetup_r+0xd8>)
 800f65c:	429c      	cmp	r4, r3
 800f65e:	bf08      	it	eq
 800f660:	68ec      	ldreq	r4, [r5, #12]
 800f662:	e7e6      	b.n	800f632 <__swsetup_r+0x1e>
 800f664:	0758      	lsls	r0, r3, #29
 800f666:	d512      	bpl.n	800f68e <__swsetup_r+0x7a>
 800f668:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f66a:	b141      	cbz	r1, 800f67e <__swsetup_r+0x6a>
 800f66c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f670:	4299      	cmp	r1, r3
 800f672:	d002      	beq.n	800f67a <__swsetup_r+0x66>
 800f674:	4630      	mov	r0, r6
 800f676:	f000 fa5b 	bl	800fb30 <_free_r>
 800f67a:	2300      	movs	r3, #0
 800f67c:	6363      	str	r3, [r4, #52]	; 0x34
 800f67e:	89a3      	ldrh	r3, [r4, #12]
 800f680:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f684:	81a3      	strh	r3, [r4, #12]
 800f686:	2300      	movs	r3, #0
 800f688:	6063      	str	r3, [r4, #4]
 800f68a:	6923      	ldr	r3, [r4, #16]
 800f68c:	6023      	str	r3, [r4, #0]
 800f68e:	89a3      	ldrh	r3, [r4, #12]
 800f690:	f043 0308 	orr.w	r3, r3, #8
 800f694:	81a3      	strh	r3, [r4, #12]
 800f696:	6923      	ldr	r3, [r4, #16]
 800f698:	b94b      	cbnz	r3, 800f6ae <__swsetup_r+0x9a>
 800f69a:	89a3      	ldrh	r3, [r4, #12]
 800f69c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f6a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6a4:	d003      	beq.n	800f6ae <__swsetup_r+0x9a>
 800f6a6:	4621      	mov	r1, r4
 800f6a8:	4630      	mov	r0, r6
 800f6aa:	f000 fa01 	bl	800fab0 <__smakebuf_r>
 800f6ae:	89a0      	ldrh	r0, [r4, #12]
 800f6b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f6b4:	f010 0301 	ands.w	r3, r0, #1
 800f6b8:	d00a      	beq.n	800f6d0 <__swsetup_r+0xbc>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60a3      	str	r3, [r4, #8]
 800f6be:	6963      	ldr	r3, [r4, #20]
 800f6c0:	425b      	negs	r3, r3
 800f6c2:	61a3      	str	r3, [r4, #24]
 800f6c4:	6923      	ldr	r3, [r4, #16]
 800f6c6:	b943      	cbnz	r3, 800f6da <__swsetup_r+0xc6>
 800f6c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f6cc:	d1ba      	bne.n	800f644 <__swsetup_r+0x30>
 800f6ce:	bd70      	pop	{r4, r5, r6, pc}
 800f6d0:	0781      	lsls	r1, r0, #30
 800f6d2:	bf58      	it	pl
 800f6d4:	6963      	ldrpl	r3, [r4, #20]
 800f6d6:	60a3      	str	r3, [r4, #8]
 800f6d8:	e7f4      	b.n	800f6c4 <__swsetup_r+0xb0>
 800f6da:	2000      	movs	r0, #0
 800f6dc:	e7f7      	b.n	800f6ce <__swsetup_r+0xba>
 800f6de:	bf00      	nop
 800f6e0:	24000010 	.word	0x24000010
 800f6e4:	08010d88 	.word	0x08010d88
 800f6e8:	08010da8 	.word	0x08010da8
 800f6ec:	08010d68 	.word	0x08010d68

0800f6f0 <__sflush_r>:
 800f6f0:	898a      	ldrh	r2, [r1, #12]
 800f6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6f6:	4605      	mov	r5, r0
 800f6f8:	0710      	lsls	r0, r2, #28
 800f6fa:	460c      	mov	r4, r1
 800f6fc:	d458      	bmi.n	800f7b0 <__sflush_r+0xc0>
 800f6fe:	684b      	ldr	r3, [r1, #4]
 800f700:	2b00      	cmp	r3, #0
 800f702:	dc05      	bgt.n	800f710 <__sflush_r+0x20>
 800f704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f706:	2b00      	cmp	r3, #0
 800f708:	dc02      	bgt.n	800f710 <__sflush_r+0x20>
 800f70a:	2000      	movs	r0, #0
 800f70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f712:	2e00      	cmp	r6, #0
 800f714:	d0f9      	beq.n	800f70a <__sflush_r+0x1a>
 800f716:	2300      	movs	r3, #0
 800f718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f71c:	682f      	ldr	r7, [r5, #0]
 800f71e:	602b      	str	r3, [r5, #0]
 800f720:	d032      	beq.n	800f788 <__sflush_r+0x98>
 800f722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f724:	89a3      	ldrh	r3, [r4, #12]
 800f726:	075a      	lsls	r2, r3, #29
 800f728:	d505      	bpl.n	800f736 <__sflush_r+0x46>
 800f72a:	6863      	ldr	r3, [r4, #4]
 800f72c:	1ac0      	subs	r0, r0, r3
 800f72e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f730:	b10b      	cbz	r3, 800f736 <__sflush_r+0x46>
 800f732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f734:	1ac0      	subs	r0, r0, r3
 800f736:	2300      	movs	r3, #0
 800f738:	4602      	mov	r2, r0
 800f73a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f73c:	6a21      	ldr	r1, [r4, #32]
 800f73e:	4628      	mov	r0, r5
 800f740:	47b0      	blx	r6
 800f742:	1c43      	adds	r3, r0, #1
 800f744:	89a3      	ldrh	r3, [r4, #12]
 800f746:	d106      	bne.n	800f756 <__sflush_r+0x66>
 800f748:	6829      	ldr	r1, [r5, #0]
 800f74a:	291d      	cmp	r1, #29
 800f74c:	d82c      	bhi.n	800f7a8 <__sflush_r+0xb8>
 800f74e:	4a2a      	ldr	r2, [pc, #168]	; (800f7f8 <__sflush_r+0x108>)
 800f750:	40ca      	lsrs	r2, r1
 800f752:	07d6      	lsls	r6, r2, #31
 800f754:	d528      	bpl.n	800f7a8 <__sflush_r+0xb8>
 800f756:	2200      	movs	r2, #0
 800f758:	6062      	str	r2, [r4, #4]
 800f75a:	04d9      	lsls	r1, r3, #19
 800f75c:	6922      	ldr	r2, [r4, #16]
 800f75e:	6022      	str	r2, [r4, #0]
 800f760:	d504      	bpl.n	800f76c <__sflush_r+0x7c>
 800f762:	1c42      	adds	r2, r0, #1
 800f764:	d101      	bne.n	800f76a <__sflush_r+0x7a>
 800f766:	682b      	ldr	r3, [r5, #0]
 800f768:	b903      	cbnz	r3, 800f76c <__sflush_r+0x7c>
 800f76a:	6560      	str	r0, [r4, #84]	; 0x54
 800f76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f76e:	602f      	str	r7, [r5, #0]
 800f770:	2900      	cmp	r1, #0
 800f772:	d0ca      	beq.n	800f70a <__sflush_r+0x1a>
 800f774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f778:	4299      	cmp	r1, r3
 800f77a:	d002      	beq.n	800f782 <__sflush_r+0x92>
 800f77c:	4628      	mov	r0, r5
 800f77e:	f000 f9d7 	bl	800fb30 <_free_r>
 800f782:	2000      	movs	r0, #0
 800f784:	6360      	str	r0, [r4, #52]	; 0x34
 800f786:	e7c1      	b.n	800f70c <__sflush_r+0x1c>
 800f788:	6a21      	ldr	r1, [r4, #32]
 800f78a:	2301      	movs	r3, #1
 800f78c:	4628      	mov	r0, r5
 800f78e:	47b0      	blx	r6
 800f790:	1c41      	adds	r1, r0, #1
 800f792:	d1c7      	bne.n	800f724 <__sflush_r+0x34>
 800f794:	682b      	ldr	r3, [r5, #0]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d0c4      	beq.n	800f724 <__sflush_r+0x34>
 800f79a:	2b1d      	cmp	r3, #29
 800f79c:	d001      	beq.n	800f7a2 <__sflush_r+0xb2>
 800f79e:	2b16      	cmp	r3, #22
 800f7a0:	d101      	bne.n	800f7a6 <__sflush_r+0xb6>
 800f7a2:	602f      	str	r7, [r5, #0]
 800f7a4:	e7b1      	b.n	800f70a <__sflush_r+0x1a>
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7ac:	81a3      	strh	r3, [r4, #12]
 800f7ae:	e7ad      	b.n	800f70c <__sflush_r+0x1c>
 800f7b0:	690f      	ldr	r7, [r1, #16]
 800f7b2:	2f00      	cmp	r7, #0
 800f7b4:	d0a9      	beq.n	800f70a <__sflush_r+0x1a>
 800f7b6:	0793      	lsls	r3, r2, #30
 800f7b8:	680e      	ldr	r6, [r1, #0]
 800f7ba:	bf08      	it	eq
 800f7bc:	694b      	ldreq	r3, [r1, #20]
 800f7be:	600f      	str	r7, [r1, #0]
 800f7c0:	bf18      	it	ne
 800f7c2:	2300      	movne	r3, #0
 800f7c4:	eba6 0807 	sub.w	r8, r6, r7
 800f7c8:	608b      	str	r3, [r1, #8]
 800f7ca:	f1b8 0f00 	cmp.w	r8, #0
 800f7ce:	dd9c      	ble.n	800f70a <__sflush_r+0x1a>
 800f7d0:	6a21      	ldr	r1, [r4, #32]
 800f7d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f7d4:	4643      	mov	r3, r8
 800f7d6:	463a      	mov	r2, r7
 800f7d8:	4628      	mov	r0, r5
 800f7da:	47b0      	blx	r6
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	dc06      	bgt.n	800f7ee <__sflush_r+0xfe>
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7e6:	81a3      	strh	r3, [r4, #12]
 800f7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ec:	e78e      	b.n	800f70c <__sflush_r+0x1c>
 800f7ee:	4407      	add	r7, r0
 800f7f0:	eba8 0800 	sub.w	r8, r8, r0
 800f7f4:	e7e9      	b.n	800f7ca <__sflush_r+0xda>
 800f7f6:	bf00      	nop
 800f7f8:	20400001 	.word	0x20400001

0800f7fc <_fflush_r>:
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	690b      	ldr	r3, [r1, #16]
 800f800:	4605      	mov	r5, r0
 800f802:	460c      	mov	r4, r1
 800f804:	b913      	cbnz	r3, 800f80c <_fflush_r+0x10>
 800f806:	2500      	movs	r5, #0
 800f808:	4628      	mov	r0, r5
 800f80a:	bd38      	pop	{r3, r4, r5, pc}
 800f80c:	b118      	cbz	r0, 800f816 <_fflush_r+0x1a>
 800f80e:	6983      	ldr	r3, [r0, #24]
 800f810:	b90b      	cbnz	r3, 800f816 <_fflush_r+0x1a>
 800f812:	f000 f887 	bl	800f924 <__sinit>
 800f816:	4b14      	ldr	r3, [pc, #80]	; (800f868 <_fflush_r+0x6c>)
 800f818:	429c      	cmp	r4, r3
 800f81a:	d11b      	bne.n	800f854 <_fflush_r+0x58>
 800f81c:	686c      	ldr	r4, [r5, #4]
 800f81e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d0ef      	beq.n	800f806 <_fflush_r+0xa>
 800f826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f828:	07d0      	lsls	r0, r2, #31
 800f82a:	d404      	bmi.n	800f836 <_fflush_r+0x3a>
 800f82c:	0599      	lsls	r1, r3, #22
 800f82e:	d402      	bmi.n	800f836 <_fflush_r+0x3a>
 800f830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f832:	f000 f915 	bl	800fa60 <__retarget_lock_acquire_recursive>
 800f836:	4628      	mov	r0, r5
 800f838:	4621      	mov	r1, r4
 800f83a:	f7ff ff59 	bl	800f6f0 <__sflush_r>
 800f83e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f840:	07da      	lsls	r2, r3, #31
 800f842:	4605      	mov	r5, r0
 800f844:	d4e0      	bmi.n	800f808 <_fflush_r+0xc>
 800f846:	89a3      	ldrh	r3, [r4, #12]
 800f848:	059b      	lsls	r3, r3, #22
 800f84a:	d4dd      	bmi.n	800f808 <_fflush_r+0xc>
 800f84c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f84e:	f000 f908 	bl	800fa62 <__retarget_lock_release_recursive>
 800f852:	e7d9      	b.n	800f808 <_fflush_r+0xc>
 800f854:	4b05      	ldr	r3, [pc, #20]	; (800f86c <_fflush_r+0x70>)
 800f856:	429c      	cmp	r4, r3
 800f858:	d101      	bne.n	800f85e <_fflush_r+0x62>
 800f85a:	68ac      	ldr	r4, [r5, #8]
 800f85c:	e7df      	b.n	800f81e <_fflush_r+0x22>
 800f85e:	4b04      	ldr	r3, [pc, #16]	; (800f870 <_fflush_r+0x74>)
 800f860:	429c      	cmp	r4, r3
 800f862:	bf08      	it	eq
 800f864:	68ec      	ldreq	r4, [r5, #12]
 800f866:	e7da      	b.n	800f81e <_fflush_r+0x22>
 800f868:	08010d88 	.word	0x08010d88
 800f86c:	08010da8 	.word	0x08010da8
 800f870:	08010d68 	.word	0x08010d68

0800f874 <std>:
 800f874:	2300      	movs	r3, #0
 800f876:	b510      	push	{r4, lr}
 800f878:	4604      	mov	r4, r0
 800f87a:	e9c0 3300 	strd	r3, r3, [r0]
 800f87e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f882:	6083      	str	r3, [r0, #8]
 800f884:	8181      	strh	r1, [r0, #12]
 800f886:	6643      	str	r3, [r0, #100]	; 0x64
 800f888:	81c2      	strh	r2, [r0, #14]
 800f88a:	6183      	str	r3, [r0, #24]
 800f88c:	4619      	mov	r1, r3
 800f88e:	2208      	movs	r2, #8
 800f890:	305c      	adds	r0, #92	; 0x5c
 800f892:	f7ff fdb7 	bl	800f404 <memset>
 800f896:	4b05      	ldr	r3, [pc, #20]	; (800f8ac <std+0x38>)
 800f898:	6263      	str	r3, [r4, #36]	; 0x24
 800f89a:	4b05      	ldr	r3, [pc, #20]	; (800f8b0 <std+0x3c>)
 800f89c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f89e:	4b05      	ldr	r3, [pc, #20]	; (800f8b4 <std+0x40>)
 800f8a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f8a2:	4b05      	ldr	r3, [pc, #20]	; (800f8b8 <std+0x44>)
 800f8a4:	6224      	str	r4, [r4, #32]
 800f8a6:	6323      	str	r3, [r4, #48]	; 0x30
 800f8a8:	bd10      	pop	{r4, pc}
 800f8aa:	bf00      	nop
 800f8ac:	080105a5 	.word	0x080105a5
 800f8b0:	080105c7 	.word	0x080105c7
 800f8b4:	080105ff 	.word	0x080105ff
 800f8b8:	08010623 	.word	0x08010623

0800f8bc <_cleanup_r>:
 800f8bc:	4901      	ldr	r1, [pc, #4]	; (800f8c4 <_cleanup_r+0x8>)
 800f8be:	f000 b8af 	b.w	800fa20 <_fwalk_reent>
 800f8c2:	bf00      	nop
 800f8c4:	0800f7fd 	.word	0x0800f7fd

0800f8c8 <__sfmoreglue>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	2268      	movs	r2, #104	; 0x68
 800f8cc:	1e4d      	subs	r5, r1, #1
 800f8ce:	4355      	muls	r5, r2
 800f8d0:	460e      	mov	r6, r1
 800f8d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f8d6:	f000 f997 	bl	800fc08 <_malloc_r>
 800f8da:	4604      	mov	r4, r0
 800f8dc:	b140      	cbz	r0, 800f8f0 <__sfmoreglue+0x28>
 800f8de:	2100      	movs	r1, #0
 800f8e0:	e9c0 1600 	strd	r1, r6, [r0]
 800f8e4:	300c      	adds	r0, #12
 800f8e6:	60a0      	str	r0, [r4, #8]
 800f8e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f8ec:	f7ff fd8a 	bl	800f404 <memset>
 800f8f0:	4620      	mov	r0, r4
 800f8f2:	bd70      	pop	{r4, r5, r6, pc}

0800f8f4 <__sfp_lock_acquire>:
 800f8f4:	4801      	ldr	r0, [pc, #4]	; (800f8fc <__sfp_lock_acquire+0x8>)
 800f8f6:	f000 b8b3 	b.w	800fa60 <__retarget_lock_acquire_recursive>
 800f8fa:	bf00      	nop
 800f8fc:	240027d5 	.word	0x240027d5

0800f900 <__sfp_lock_release>:
 800f900:	4801      	ldr	r0, [pc, #4]	; (800f908 <__sfp_lock_release+0x8>)
 800f902:	f000 b8ae 	b.w	800fa62 <__retarget_lock_release_recursive>
 800f906:	bf00      	nop
 800f908:	240027d5 	.word	0x240027d5

0800f90c <__sinit_lock_acquire>:
 800f90c:	4801      	ldr	r0, [pc, #4]	; (800f914 <__sinit_lock_acquire+0x8>)
 800f90e:	f000 b8a7 	b.w	800fa60 <__retarget_lock_acquire_recursive>
 800f912:	bf00      	nop
 800f914:	240027d6 	.word	0x240027d6

0800f918 <__sinit_lock_release>:
 800f918:	4801      	ldr	r0, [pc, #4]	; (800f920 <__sinit_lock_release+0x8>)
 800f91a:	f000 b8a2 	b.w	800fa62 <__retarget_lock_release_recursive>
 800f91e:	bf00      	nop
 800f920:	240027d6 	.word	0x240027d6

0800f924 <__sinit>:
 800f924:	b510      	push	{r4, lr}
 800f926:	4604      	mov	r4, r0
 800f928:	f7ff fff0 	bl	800f90c <__sinit_lock_acquire>
 800f92c:	69a3      	ldr	r3, [r4, #24]
 800f92e:	b11b      	cbz	r3, 800f938 <__sinit+0x14>
 800f930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f934:	f7ff bff0 	b.w	800f918 <__sinit_lock_release>
 800f938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f93c:	6523      	str	r3, [r4, #80]	; 0x50
 800f93e:	4b13      	ldr	r3, [pc, #76]	; (800f98c <__sinit+0x68>)
 800f940:	4a13      	ldr	r2, [pc, #76]	; (800f990 <__sinit+0x6c>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	62a2      	str	r2, [r4, #40]	; 0x28
 800f946:	42a3      	cmp	r3, r4
 800f948:	bf04      	itt	eq
 800f94a:	2301      	moveq	r3, #1
 800f94c:	61a3      	streq	r3, [r4, #24]
 800f94e:	4620      	mov	r0, r4
 800f950:	f000 f820 	bl	800f994 <__sfp>
 800f954:	6060      	str	r0, [r4, #4]
 800f956:	4620      	mov	r0, r4
 800f958:	f000 f81c 	bl	800f994 <__sfp>
 800f95c:	60a0      	str	r0, [r4, #8]
 800f95e:	4620      	mov	r0, r4
 800f960:	f000 f818 	bl	800f994 <__sfp>
 800f964:	2200      	movs	r2, #0
 800f966:	60e0      	str	r0, [r4, #12]
 800f968:	2104      	movs	r1, #4
 800f96a:	6860      	ldr	r0, [r4, #4]
 800f96c:	f7ff ff82 	bl	800f874 <std>
 800f970:	68a0      	ldr	r0, [r4, #8]
 800f972:	2201      	movs	r2, #1
 800f974:	2109      	movs	r1, #9
 800f976:	f7ff ff7d 	bl	800f874 <std>
 800f97a:	68e0      	ldr	r0, [r4, #12]
 800f97c:	2202      	movs	r2, #2
 800f97e:	2112      	movs	r1, #18
 800f980:	f7ff ff78 	bl	800f874 <std>
 800f984:	2301      	movs	r3, #1
 800f986:	61a3      	str	r3, [r4, #24]
 800f988:	e7d2      	b.n	800f930 <__sinit+0xc>
 800f98a:	bf00      	nop
 800f98c:	08010d64 	.word	0x08010d64
 800f990:	0800f8bd 	.word	0x0800f8bd

0800f994 <__sfp>:
 800f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f996:	4607      	mov	r7, r0
 800f998:	f7ff ffac 	bl	800f8f4 <__sfp_lock_acquire>
 800f99c:	4b1e      	ldr	r3, [pc, #120]	; (800fa18 <__sfp+0x84>)
 800f99e:	681e      	ldr	r6, [r3, #0]
 800f9a0:	69b3      	ldr	r3, [r6, #24]
 800f9a2:	b913      	cbnz	r3, 800f9aa <__sfp+0x16>
 800f9a4:	4630      	mov	r0, r6
 800f9a6:	f7ff ffbd 	bl	800f924 <__sinit>
 800f9aa:	3648      	adds	r6, #72	; 0x48
 800f9ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	d503      	bpl.n	800f9bc <__sfp+0x28>
 800f9b4:	6833      	ldr	r3, [r6, #0]
 800f9b6:	b30b      	cbz	r3, 800f9fc <__sfp+0x68>
 800f9b8:	6836      	ldr	r6, [r6, #0]
 800f9ba:	e7f7      	b.n	800f9ac <__sfp+0x18>
 800f9bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f9c0:	b9d5      	cbnz	r5, 800f9f8 <__sfp+0x64>
 800f9c2:	4b16      	ldr	r3, [pc, #88]	; (800fa1c <__sfp+0x88>)
 800f9c4:	60e3      	str	r3, [r4, #12]
 800f9c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f9ca:	6665      	str	r5, [r4, #100]	; 0x64
 800f9cc:	f000 f847 	bl	800fa5e <__retarget_lock_init_recursive>
 800f9d0:	f7ff ff96 	bl	800f900 <__sfp_lock_release>
 800f9d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f9d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f9dc:	6025      	str	r5, [r4, #0]
 800f9de:	61a5      	str	r5, [r4, #24]
 800f9e0:	2208      	movs	r2, #8
 800f9e2:	4629      	mov	r1, r5
 800f9e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f9e8:	f7ff fd0c 	bl	800f404 <memset>
 800f9ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f9f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9f8:	3468      	adds	r4, #104	; 0x68
 800f9fa:	e7d9      	b.n	800f9b0 <__sfp+0x1c>
 800f9fc:	2104      	movs	r1, #4
 800f9fe:	4638      	mov	r0, r7
 800fa00:	f7ff ff62 	bl	800f8c8 <__sfmoreglue>
 800fa04:	4604      	mov	r4, r0
 800fa06:	6030      	str	r0, [r6, #0]
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d1d5      	bne.n	800f9b8 <__sfp+0x24>
 800fa0c:	f7ff ff78 	bl	800f900 <__sfp_lock_release>
 800fa10:	230c      	movs	r3, #12
 800fa12:	603b      	str	r3, [r7, #0]
 800fa14:	e7ee      	b.n	800f9f4 <__sfp+0x60>
 800fa16:	bf00      	nop
 800fa18:	08010d64 	.word	0x08010d64
 800fa1c:	ffff0001 	.word	0xffff0001

0800fa20 <_fwalk_reent>:
 800fa20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa24:	4606      	mov	r6, r0
 800fa26:	4688      	mov	r8, r1
 800fa28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fa2c:	2700      	movs	r7, #0
 800fa2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fa32:	f1b9 0901 	subs.w	r9, r9, #1
 800fa36:	d505      	bpl.n	800fa44 <_fwalk_reent+0x24>
 800fa38:	6824      	ldr	r4, [r4, #0]
 800fa3a:	2c00      	cmp	r4, #0
 800fa3c:	d1f7      	bne.n	800fa2e <_fwalk_reent+0xe>
 800fa3e:	4638      	mov	r0, r7
 800fa40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa44:	89ab      	ldrh	r3, [r5, #12]
 800fa46:	2b01      	cmp	r3, #1
 800fa48:	d907      	bls.n	800fa5a <_fwalk_reent+0x3a>
 800fa4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fa4e:	3301      	adds	r3, #1
 800fa50:	d003      	beq.n	800fa5a <_fwalk_reent+0x3a>
 800fa52:	4629      	mov	r1, r5
 800fa54:	4630      	mov	r0, r6
 800fa56:	47c0      	blx	r8
 800fa58:	4307      	orrs	r7, r0
 800fa5a:	3568      	adds	r5, #104	; 0x68
 800fa5c:	e7e9      	b.n	800fa32 <_fwalk_reent+0x12>

0800fa5e <__retarget_lock_init_recursive>:
 800fa5e:	4770      	bx	lr

0800fa60 <__retarget_lock_acquire_recursive>:
 800fa60:	4770      	bx	lr

0800fa62 <__retarget_lock_release_recursive>:
 800fa62:	4770      	bx	lr

0800fa64 <__swhatbuf_r>:
 800fa64:	b570      	push	{r4, r5, r6, lr}
 800fa66:	460e      	mov	r6, r1
 800fa68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa6c:	2900      	cmp	r1, #0
 800fa6e:	b096      	sub	sp, #88	; 0x58
 800fa70:	4614      	mov	r4, r2
 800fa72:	461d      	mov	r5, r3
 800fa74:	da08      	bge.n	800fa88 <__swhatbuf_r+0x24>
 800fa76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	602a      	str	r2, [r5, #0]
 800fa7e:	061a      	lsls	r2, r3, #24
 800fa80:	d410      	bmi.n	800faa4 <__swhatbuf_r+0x40>
 800fa82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa86:	e00e      	b.n	800faa6 <__swhatbuf_r+0x42>
 800fa88:	466a      	mov	r2, sp
 800fa8a:	f000 fdf1 	bl	8010670 <_fstat_r>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	dbf1      	blt.n	800fa76 <__swhatbuf_r+0x12>
 800fa92:	9a01      	ldr	r2, [sp, #4]
 800fa94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fa9c:	425a      	negs	r2, r3
 800fa9e:	415a      	adcs	r2, r3
 800faa0:	602a      	str	r2, [r5, #0]
 800faa2:	e7ee      	b.n	800fa82 <__swhatbuf_r+0x1e>
 800faa4:	2340      	movs	r3, #64	; 0x40
 800faa6:	2000      	movs	r0, #0
 800faa8:	6023      	str	r3, [r4, #0]
 800faaa:	b016      	add	sp, #88	; 0x58
 800faac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fab0 <__smakebuf_r>:
 800fab0:	898b      	ldrh	r3, [r1, #12]
 800fab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fab4:	079d      	lsls	r5, r3, #30
 800fab6:	4606      	mov	r6, r0
 800fab8:	460c      	mov	r4, r1
 800faba:	d507      	bpl.n	800facc <__smakebuf_r+0x1c>
 800fabc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	6123      	str	r3, [r4, #16]
 800fac4:	2301      	movs	r3, #1
 800fac6:	6163      	str	r3, [r4, #20]
 800fac8:	b002      	add	sp, #8
 800faca:	bd70      	pop	{r4, r5, r6, pc}
 800facc:	ab01      	add	r3, sp, #4
 800face:	466a      	mov	r2, sp
 800fad0:	f7ff ffc8 	bl	800fa64 <__swhatbuf_r>
 800fad4:	9900      	ldr	r1, [sp, #0]
 800fad6:	4605      	mov	r5, r0
 800fad8:	4630      	mov	r0, r6
 800fada:	f000 f895 	bl	800fc08 <_malloc_r>
 800fade:	b948      	cbnz	r0, 800faf4 <__smakebuf_r+0x44>
 800fae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae4:	059a      	lsls	r2, r3, #22
 800fae6:	d4ef      	bmi.n	800fac8 <__smakebuf_r+0x18>
 800fae8:	f023 0303 	bic.w	r3, r3, #3
 800faec:	f043 0302 	orr.w	r3, r3, #2
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	e7e3      	b.n	800fabc <__smakebuf_r+0xc>
 800faf4:	4b0d      	ldr	r3, [pc, #52]	; (800fb2c <__smakebuf_r+0x7c>)
 800faf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800faf8:	89a3      	ldrh	r3, [r4, #12]
 800fafa:	6020      	str	r0, [r4, #0]
 800fafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb00:	81a3      	strh	r3, [r4, #12]
 800fb02:	9b00      	ldr	r3, [sp, #0]
 800fb04:	6163      	str	r3, [r4, #20]
 800fb06:	9b01      	ldr	r3, [sp, #4]
 800fb08:	6120      	str	r0, [r4, #16]
 800fb0a:	b15b      	cbz	r3, 800fb24 <__smakebuf_r+0x74>
 800fb0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb10:	4630      	mov	r0, r6
 800fb12:	f000 fdbf 	bl	8010694 <_isatty_r>
 800fb16:	b128      	cbz	r0, 800fb24 <__smakebuf_r+0x74>
 800fb18:	89a3      	ldrh	r3, [r4, #12]
 800fb1a:	f023 0303 	bic.w	r3, r3, #3
 800fb1e:	f043 0301 	orr.w	r3, r3, #1
 800fb22:	81a3      	strh	r3, [r4, #12]
 800fb24:	89a0      	ldrh	r0, [r4, #12]
 800fb26:	4305      	orrs	r5, r0
 800fb28:	81a5      	strh	r5, [r4, #12]
 800fb2a:	e7cd      	b.n	800fac8 <__smakebuf_r+0x18>
 800fb2c:	0800f8bd 	.word	0x0800f8bd

0800fb30 <_free_r>:
 800fb30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb32:	2900      	cmp	r1, #0
 800fb34:	d044      	beq.n	800fbc0 <_free_r+0x90>
 800fb36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb3a:	9001      	str	r0, [sp, #4]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fb42:	bfb8      	it	lt
 800fb44:	18e4      	addlt	r4, r4, r3
 800fb46:	f000 fdef 	bl	8010728 <__malloc_lock>
 800fb4a:	4a1e      	ldr	r2, [pc, #120]	; (800fbc4 <_free_r+0x94>)
 800fb4c:	9801      	ldr	r0, [sp, #4]
 800fb4e:	6813      	ldr	r3, [r2, #0]
 800fb50:	b933      	cbnz	r3, 800fb60 <_free_r+0x30>
 800fb52:	6063      	str	r3, [r4, #4]
 800fb54:	6014      	str	r4, [r2, #0]
 800fb56:	b003      	add	sp, #12
 800fb58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb5c:	f000 bdea 	b.w	8010734 <__malloc_unlock>
 800fb60:	42a3      	cmp	r3, r4
 800fb62:	d908      	bls.n	800fb76 <_free_r+0x46>
 800fb64:	6825      	ldr	r5, [r4, #0]
 800fb66:	1961      	adds	r1, r4, r5
 800fb68:	428b      	cmp	r3, r1
 800fb6a:	bf01      	itttt	eq
 800fb6c:	6819      	ldreq	r1, [r3, #0]
 800fb6e:	685b      	ldreq	r3, [r3, #4]
 800fb70:	1949      	addeq	r1, r1, r5
 800fb72:	6021      	streq	r1, [r4, #0]
 800fb74:	e7ed      	b.n	800fb52 <_free_r+0x22>
 800fb76:	461a      	mov	r2, r3
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	b10b      	cbz	r3, 800fb80 <_free_r+0x50>
 800fb7c:	42a3      	cmp	r3, r4
 800fb7e:	d9fa      	bls.n	800fb76 <_free_r+0x46>
 800fb80:	6811      	ldr	r1, [r2, #0]
 800fb82:	1855      	adds	r5, r2, r1
 800fb84:	42a5      	cmp	r5, r4
 800fb86:	d10b      	bne.n	800fba0 <_free_r+0x70>
 800fb88:	6824      	ldr	r4, [r4, #0]
 800fb8a:	4421      	add	r1, r4
 800fb8c:	1854      	adds	r4, r2, r1
 800fb8e:	42a3      	cmp	r3, r4
 800fb90:	6011      	str	r1, [r2, #0]
 800fb92:	d1e0      	bne.n	800fb56 <_free_r+0x26>
 800fb94:	681c      	ldr	r4, [r3, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	6053      	str	r3, [r2, #4]
 800fb9a:	4421      	add	r1, r4
 800fb9c:	6011      	str	r1, [r2, #0]
 800fb9e:	e7da      	b.n	800fb56 <_free_r+0x26>
 800fba0:	d902      	bls.n	800fba8 <_free_r+0x78>
 800fba2:	230c      	movs	r3, #12
 800fba4:	6003      	str	r3, [r0, #0]
 800fba6:	e7d6      	b.n	800fb56 <_free_r+0x26>
 800fba8:	6825      	ldr	r5, [r4, #0]
 800fbaa:	1961      	adds	r1, r4, r5
 800fbac:	428b      	cmp	r3, r1
 800fbae:	bf04      	itt	eq
 800fbb0:	6819      	ldreq	r1, [r3, #0]
 800fbb2:	685b      	ldreq	r3, [r3, #4]
 800fbb4:	6063      	str	r3, [r4, #4]
 800fbb6:	bf04      	itt	eq
 800fbb8:	1949      	addeq	r1, r1, r5
 800fbba:	6021      	streq	r1, [r4, #0]
 800fbbc:	6054      	str	r4, [r2, #4]
 800fbbe:	e7ca      	b.n	800fb56 <_free_r+0x26>
 800fbc0:	b003      	add	sp, #12
 800fbc2:	bd30      	pop	{r4, r5, pc}
 800fbc4:	240027d8 	.word	0x240027d8

0800fbc8 <sbrk_aligned>:
 800fbc8:	b570      	push	{r4, r5, r6, lr}
 800fbca:	4e0e      	ldr	r6, [pc, #56]	; (800fc04 <sbrk_aligned+0x3c>)
 800fbcc:	460c      	mov	r4, r1
 800fbce:	6831      	ldr	r1, [r6, #0]
 800fbd0:	4605      	mov	r5, r0
 800fbd2:	b911      	cbnz	r1, 800fbda <sbrk_aligned+0x12>
 800fbd4:	f000 fcd6 	bl	8010584 <_sbrk_r>
 800fbd8:	6030      	str	r0, [r6, #0]
 800fbda:	4621      	mov	r1, r4
 800fbdc:	4628      	mov	r0, r5
 800fbde:	f000 fcd1 	bl	8010584 <_sbrk_r>
 800fbe2:	1c43      	adds	r3, r0, #1
 800fbe4:	d00a      	beq.n	800fbfc <sbrk_aligned+0x34>
 800fbe6:	1cc4      	adds	r4, r0, #3
 800fbe8:	f024 0403 	bic.w	r4, r4, #3
 800fbec:	42a0      	cmp	r0, r4
 800fbee:	d007      	beq.n	800fc00 <sbrk_aligned+0x38>
 800fbf0:	1a21      	subs	r1, r4, r0
 800fbf2:	4628      	mov	r0, r5
 800fbf4:	f000 fcc6 	bl	8010584 <_sbrk_r>
 800fbf8:	3001      	adds	r0, #1
 800fbfa:	d101      	bne.n	800fc00 <sbrk_aligned+0x38>
 800fbfc:	f04f 34ff 	mov.w	r4, #4294967295
 800fc00:	4620      	mov	r0, r4
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
 800fc04:	240027dc 	.word	0x240027dc

0800fc08 <_malloc_r>:
 800fc08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc0c:	1ccd      	adds	r5, r1, #3
 800fc0e:	f025 0503 	bic.w	r5, r5, #3
 800fc12:	3508      	adds	r5, #8
 800fc14:	2d0c      	cmp	r5, #12
 800fc16:	bf38      	it	cc
 800fc18:	250c      	movcc	r5, #12
 800fc1a:	2d00      	cmp	r5, #0
 800fc1c:	4607      	mov	r7, r0
 800fc1e:	db01      	blt.n	800fc24 <_malloc_r+0x1c>
 800fc20:	42a9      	cmp	r1, r5
 800fc22:	d905      	bls.n	800fc30 <_malloc_r+0x28>
 800fc24:	230c      	movs	r3, #12
 800fc26:	603b      	str	r3, [r7, #0]
 800fc28:	2600      	movs	r6, #0
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc30:	4e2e      	ldr	r6, [pc, #184]	; (800fcec <_malloc_r+0xe4>)
 800fc32:	f000 fd79 	bl	8010728 <__malloc_lock>
 800fc36:	6833      	ldr	r3, [r6, #0]
 800fc38:	461c      	mov	r4, r3
 800fc3a:	bb34      	cbnz	r4, 800fc8a <_malloc_r+0x82>
 800fc3c:	4629      	mov	r1, r5
 800fc3e:	4638      	mov	r0, r7
 800fc40:	f7ff ffc2 	bl	800fbc8 <sbrk_aligned>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	4604      	mov	r4, r0
 800fc48:	d14d      	bne.n	800fce6 <_malloc_r+0xde>
 800fc4a:	6834      	ldr	r4, [r6, #0]
 800fc4c:	4626      	mov	r6, r4
 800fc4e:	2e00      	cmp	r6, #0
 800fc50:	d140      	bne.n	800fcd4 <_malloc_r+0xcc>
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	4631      	mov	r1, r6
 800fc56:	4638      	mov	r0, r7
 800fc58:	eb04 0803 	add.w	r8, r4, r3
 800fc5c:	f000 fc92 	bl	8010584 <_sbrk_r>
 800fc60:	4580      	cmp	r8, r0
 800fc62:	d13a      	bne.n	800fcda <_malloc_r+0xd2>
 800fc64:	6821      	ldr	r1, [r4, #0]
 800fc66:	3503      	adds	r5, #3
 800fc68:	1a6d      	subs	r5, r5, r1
 800fc6a:	f025 0503 	bic.w	r5, r5, #3
 800fc6e:	3508      	adds	r5, #8
 800fc70:	2d0c      	cmp	r5, #12
 800fc72:	bf38      	it	cc
 800fc74:	250c      	movcc	r5, #12
 800fc76:	4629      	mov	r1, r5
 800fc78:	4638      	mov	r0, r7
 800fc7a:	f7ff ffa5 	bl	800fbc8 <sbrk_aligned>
 800fc7e:	3001      	adds	r0, #1
 800fc80:	d02b      	beq.n	800fcda <_malloc_r+0xd2>
 800fc82:	6823      	ldr	r3, [r4, #0]
 800fc84:	442b      	add	r3, r5
 800fc86:	6023      	str	r3, [r4, #0]
 800fc88:	e00e      	b.n	800fca8 <_malloc_r+0xa0>
 800fc8a:	6822      	ldr	r2, [r4, #0]
 800fc8c:	1b52      	subs	r2, r2, r5
 800fc8e:	d41e      	bmi.n	800fcce <_malloc_r+0xc6>
 800fc90:	2a0b      	cmp	r2, #11
 800fc92:	d916      	bls.n	800fcc2 <_malloc_r+0xba>
 800fc94:	1961      	adds	r1, r4, r5
 800fc96:	42a3      	cmp	r3, r4
 800fc98:	6025      	str	r5, [r4, #0]
 800fc9a:	bf18      	it	ne
 800fc9c:	6059      	strne	r1, [r3, #4]
 800fc9e:	6863      	ldr	r3, [r4, #4]
 800fca0:	bf08      	it	eq
 800fca2:	6031      	streq	r1, [r6, #0]
 800fca4:	5162      	str	r2, [r4, r5]
 800fca6:	604b      	str	r3, [r1, #4]
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f104 060b 	add.w	r6, r4, #11
 800fcae:	f000 fd41 	bl	8010734 <__malloc_unlock>
 800fcb2:	f026 0607 	bic.w	r6, r6, #7
 800fcb6:	1d23      	adds	r3, r4, #4
 800fcb8:	1af2      	subs	r2, r6, r3
 800fcba:	d0b6      	beq.n	800fc2a <_malloc_r+0x22>
 800fcbc:	1b9b      	subs	r3, r3, r6
 800fcbe:	50a3      	str	r3, [r4, r2]
 800fcc0:	e7b3      	b.n	800fc2a <_malloc_r+0x22>
 800fcc2:	6862      	ldr	r2, [r4, #4]
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	bf0c      	ite	eq
 800fcc8:	6032      	streq	r2, [r6, #0]
 800fcca:	605a      	strne	r2, [r3, #4]
 800fccc:	e7ec      	b.n	800fca8 <_malloc_r+0xa0>
 800fcce:	4623      	mov	r3, r4
 800fcd0:	6864      	ldr	r4, [r4, #4]
 800fcd2:	e7b2      	b.n	800fc3a <_malloc_r+0x32>
 800fcd4:	4634      	mov	r4, r6
 800fcd6:	6876      	ldr	r6, [r6, #4]
 800fcd8:	e7b9      	b.n	800fc4e <_malloc_r+0x46>
 800fcda:	230c      	movs	r3, #12
 800fcdc:	603b      	str	r3, [r7, #0]
 800fcde:	4638      	mov	r0, r7
 800fce0:	f000 fd28 	bl	8010734 <__malloc_unlock>
 800fce4:	e7a1      	b.n	800fc2a <_malloc_r+0x22>
 800fce6:	6025      	str	r5, [r4, #0]
 800fce8:	e7de      	b.n	800fca8 <_malloc_r+0xa0>
 800fcea:	bf00      	nop
 800fcec:	240027d8 	.word	0x240027d8

0800fcf0 <__ssputs_r>:
 800fcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcf4:	688e      	ldr	r6, [r1, #8]
 800fcf6:	429e      	cmp	r6, r3
 800fcf8:	4682      	mov	sl, r0
 800fcfa:	460c      	mov	r4, r1
 800fcfc:	4690      	mov	r8, r2
 800fcfe:	461f      	mov	r7, r3
 800fd00:	d838      	bhi.n	800fd74 <__ssputs_r+0x84>
 800fd02:	898a      	ldrh	r2, [r1, #12]
 800fd04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd08:	d032      	beq.n	800fd70 <__ssputs_r+0x80>
 800fd0a:	6825      	ldr	r5, [r4, #0]
 800fd0c:	6909      	ldr	r1, [r1, #16]
 800fd0e:	eba5 0901 	sub.w	r9, r5, r1
 800fd12:	6965      	ldr	r5, [r4, #20]
 800fd14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	444b      	add	r3, r9
 800fd20:	106d      	asrs	r5, r5, #1
 800fd22:	429d      	cmp	r5, r3
 800fd24:	bf38      	it	cc
 800fd26:	461d      	movcc	r5, r3
 800fd28:	0553      	lsls	r3, r2, #21
 800fd2a:	d531      	bpl.n	800fd90 <__ssputs_r+0xa0>
 800fd2c:	4629      	mov	r1, r5
 800fd2e:	f7ff ff6b 	bl	800fc08 <_malloc_r>
 800fd32:	4606      	mov	r6, r0
 800fd34:	b950      	cbnz	r0, 800fd4c <__ssputs_r+0x5c>
 800fd36:	230c      	movs	r3, #12
 800fd38:	f8ca 3000 	str.w	r3, [sl]
 800fd3c:	89a3      	ldrh	r3, [r4, #12]
 800fd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd42:	81a3      	strh	r3, [r4, #12]
 800fd44:	f04f 30ff 	mov.w	r0, #4294967295
 800fd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd4c:	6921      	ldr	r1, [r4, #16]
 800fd4e:	464a      	mov	r2, r9
 800fd50:	f000 fcc2 	bl	80106d8 <memcpy>
 800fd54:	89a3      	ldrh	r3, [r4, #12]
 800fd56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd5e:	81a3      	strh	r3, [r4, #12]
 800fd60:	6126      	str	r6, [r4, #16]
 800fd62:	6165      	str	r5, [r4, #20]
 800fd64:	444e      	add	r6, r9
 800fd66:	eba5 0509 	sub.w	r5, r5, r9
 800fd6a:	6026      	str	r6, [r4, #0]
 800fd6c:	60a5      	str	r5, [r4, #8]
 800fd6e:	463e      	mov	r6, r7
 800fd70:	42be      	cmp	r6, r7
 800fd72:	d900      	bls.n	800fd76 <__ssputs_r+0x86>
 800fd74:	463e      	mov	r6, r7
 800fd76:	6820      	ldr	r0, [r4, #0]
 800fd78:	4632      	mov	r2, r6
 800fd7a:	4641      	mov	r1, r8
 800fd7c:	f000 fcba 	bl	80106f4 <memmove>
 800fd80:	68a3      	ldr	r3, [r4, #8]
 800fd82:	1b9b      	subs	r3, r3, r6
 800fd84:	60a3      	str	r3, [r4, #8]
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	4433      	add	r3, r6
 800fd8a:	6023      	str	r3, [r4, #0]
 800fd8c:	2000      	movs	r0, #0
 800fd8e:	e7db      	b.n	800fd48 <__ssputs_r+0x58>
 800fd90:	462a      	mov	r2, r5
 800fd92:	f000 fcd5 	bl	8010740 <_realloc_r>
 800fd96:	4606      	mov	r6, r0
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d1e1      	bne.n	800fd60 <__ssputs_r+0x70>
 800fd9c:	6921      	ldr	r1, [r4, #16]
 800fd9e:	4650      	mov	r0, sl
 800fda0:	f7ff fec6 	bl	800fb30 <_free_r>
 800fda4:	e7c7      	b.n	800fd36 <__ssputs_r+0x46>
	...

0800fda8 <_svfiprintf_r>:
 800fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdac:	4698      	mov	r8, r3
 800fdae:	898b      	ldrh	r3, [r1, #12]
 800fdb0:	061b      	lsls	r3, r3, #24
 800fdb2:	b09d      	sub	sp, #116	; 0x74
 800fdb4:	4607      	mov	r7, r0
 800fdb6:	460d      	mov	r5, r1
 800fdb8:	4614      	mov	r4, r2
 800fdba:	d50e      	bpl.n	800fdda <_svfiprintf_r+0x32>
 800fdbc:	690b      	ldr	r3, [r1, #16]
 800fdbe:	b963      	cbnz	r3, 800fdda <_svfiprintf_r+0x32>
 800fdc0:	2140      	movs	r1, #64	; 0x40
 800fdc2:	f7ff ff21 	bl	800fc08 <_malloc_r>
 800fdc6:	6028      	str	r0, [r5, #0]
 800fdc8:	6128      	str	r0, [r5, #16]
 800fdca:	b920      	cbnz	r0, 800fdd6 <_svfiprintf_r+0x2e>
 800fdcc:	230c      	movs	r3, #12
 800fdce:	603b      	str	r3, [r7, #0]
 800fdd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fdd4:	e0d1      	b.n	800ff7a <_svfiprintf_r+0x1d2>
 800fdd6:	2340      	movs	r3, #64	; 0x40
 800fdd8:	616b      	str	r3, [r5, #20]
 800fdda:	2300      	movs	r3, #0
 800fddc:	9309      	str	r3, [sp, #36]	; 0x24
 800fdde:	2320      	movs	r3, #32
 800fde0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fde4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fde8:	2330      	movs	r3, #48	; 0x30
 800fdea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ff94 <_svfiprintf_r+0x1ec>
 800fdee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fdf2:	f04f 0901 	mov.w	r9, #1
 800fdf6:	4623      	mov	r3, r4
 800fdf8:	469a      	mov	sl, r3
 800fdfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdfe:	b10a      	cbz	r2, 800fe04 <_svfiprintf_r+0x5c>
 800fe00:	2a25      	cmp	r2, #37	; 0x25
 800fe02:	d1f9      	bne.n	800fdf8 <_svfiprintf_r+0x50>
 800fe04:	ebba 0b04 	subs.w	fp, sl, r4
 800fe08:	d00b      	beq.n	800fe22 <_svfiprintf_r+0x7a>
 800fe0a:	465b      	mov	r3, fp
 800fe0c:	4622      	mov	r2, r4
 800fe0e:	4629      	mov	r1, r5
 800fe10:	4638      	mov	r0, r7
 800fe12:	f7ff ff6d 	bl	800fcf0 <__ssputs_r>
 800fe16:	3001      	adds	r0, #1
 800fe18:	f000 80aa 	beq.w	800ff70 <_svfiprintf_r+0x1c8>
 800fe1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fe1e:	445a      	add	r2, fp
 800fe20:	9209      	str	r2, [sp, #36]	; 0x24
 800fe22:	f89a 3000 	ldrb.w	r3, [sl]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	f000 80a2 	beq.w	800ff70 <_svfiprintf_r+0x1c8>
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	f04f 32ff 	mov.w	r2, #4294967295
 800fe32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fe36:	f10a 0a01 	add.w	sl, sl, #1
 800fe3a:	9304      	str	r3, [sp, #16]
 800fe3c:	9307      	str	r3, [sp, #28]
 800fe3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fe42:	931a      	str	r3, [sp, #104]	; 0x68
 800fe44:	4654      	mov	r4, sl
 800fe46:	2205      	movs	r2, #5
 800fe48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe4c:	4851      	ldr	r0, [pc, #324]	; (800ff94 <_svfiprintf_r+0x1ec>)
 800fe4e:	f7f0 fa47 	bl	80002e0 <memchr>
 800fe52:	9a04      	ldr	r2, [sp, #16]
 800fe54:	b9d8      	cbnz	r0, 800fe8e <_svfiprintf_r+0xe6>
 800fe56:	06d0      	lsls	r0, r2, #27
 800fe58:	bf44      	itt	mi
 800fe5a:	2320      	movmi	r3, #32
 800fe5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe60:	0711      	lsls	r1, r2, #28
 800fe62:	bf44      	itt	mi
 800fe64:	232b      	movmi	r3, #43	; 0x2b
 800fe66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fe6a:	f89a 3000 	ldrb.w	r3, [sl]
 800fe6e:	2b2a      	cmp	r3, #42	; 0x2a
 800fe70:	d015      	beq.n	800fe9e <_svfiprintf_r+0xf6>
 800fe72:	9a07      	ldr	r2, [sp, #28]
 800fe74:	4654      	mov	r4, sl
 800fe76:	2000      	movs	r0, #0
 800fe78:	f04f 0c0a 	mov.w	ip, #10
 800fe7c:	4621      	mov	r1, r4
 800fe7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fe82:	3b30      	subs	r3, #48	; 0x30
 800fe84:	2b09      	cmp	r3, #9
 800fe86:	d94e      	bls.n	800ff26 <_svfiprintf_r+0x17e>
 800fe88:	b1b0      	cbz	r0, 800feb8 <_svfiprintf_r+0x110>
 800fe8a:	9207      	str	r2, [sp, #28]
 800fe8c:	e014      	b.n	800feb8 <_svfiprintf_r+0x110>
 800fe8e:	eba0 0308 	sub.w	r3, r0, r8
 800fe92:	fa09 f303 	lsl.w	r3, r9, r3
 800fe96:	4313      	orrs	r3, r2
 800fe98:	9304      	str	r3, [sp, #16]
 800fe9a:	46a2      	mov	sl, r4
 800fe9c:	e7d2      	b.n	800fe44 <_svfiprintf_r+0x9c>
 800fe9e:	9b03      	ldr	r3, [sp, #12]
 800fea0:	1d19      	adds	r1, r3, #4
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	9103      	str	r1, [sp, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	bfbb      	ittet	lt
 800feaa:	425b      	neglt	r3, r3
 800feac:	f042 0202 	orrlt.w	r2, r2, #2
 800feb0:	9307      	strge	r3, [sp, #28]
 800feb2:	9307      	strlt	r3, [sp, #28]
 800feb4:	bfb8      	it	lt
 800feb6:	9204      	strlt	r2, [sp, #16]
 800feb8:	7823      	ldrb	r3, [r4, #0]
 800feba:	2b2e      	cmp	r3, #46	; 0x2e
 800febc:	d10c      	bne.n	800fed8 <_svfiprintf_r+0x130>
 800febe:	7863      	ldrb	r3, [r4, #1]
 800fec0:	2b2a      	cmp	r3, #42	; 0x2a
 800fec2:	d135      	bne.n	800ff30 <_svfiprintf_r+0x188>
 800fec4:	9b03      	ldr	r3, [sp, #12]
 800fec6:	1d1a      	adds	r2, r3, #4
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	9203      	str	r2, [sp, #12]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	bfb8      	it	lt
 800fed0:	f04f 33ff 	movlt.w	r3, #4294967295
 800fed4:	3402      	adds	r4, #2
 800fed6:	9305      	str	r3, [sp, #20]
 800fed8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ffa4 <_svfiprintf_r+0x1fc>
 800fedc:	7821      	ldrb	r1, [r4, #0]
 800fede:	2203      	movs	r2, #3
 800fee0:	4650      	mov	r0, sl
 800fee2:	f7f0 f9fd 	bl	80002e0 <memchr>
 800fee6:	b140      	cbz	r0, 800fefa <_svfiprintf_r+0x152>
 800fee8:	2340      	movs	r3, #64	; 0x40
 800feea:	eba0 000a 	sub.w	r0, r0, sl
 800feee:	fa03 f000 	lsl.w	r0, r3, r0
 800fef2:	9b04      	ldr	r3, [sp, #16]
 800fef4:	4303      	orrs	r3, r0
 800fef6:	3401      	adds	r4, #1
 800fef8:	9304      	str	r3, [sp, #16]
 800fefa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fefe:	4826      	ldr	r0, [pc, #152]	; (800ff98 <_svfiprintf_r+0x1f0>)
 800ff00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff04:	2206      	movs	r2, #6
 800ff06:	f7f0 f9eb 	bl	80002e0 <memchr>
 800ff0a:	2800      	cmp	r0, #0
 800ff0c:	d038      	beq.n	800ff80 <_svfiprintf_r+0x1d8>
 800ff0e:	4b23      	ldr	r3, [pc, #140]	; (800ff9c <_svfiprintf_r+0x1f4>)
 800ff10:	bb1b      	cbnz	r3, 800ff5a <_svfiprintf_r+0x1b2>
 800ff12:	9b03      	ldr	r3, [sp, #12]
 800ff14:	3307      	adds	r3, #7
 800ff16:	f023 0307 	bic.w	r3, r3, #7
 800ff1a:	3308      	adds	r3, #8
 800ff1c:	9303      	str	r3, [sp, #12]
 800ff1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff20:	4433      	add	r3, r6
 800ff22:	9309      	str	r3, [sp, #36]	; 0x24
 800ff24:	e767      	b.n	800fdf6 <_svfiprintf_r+0x4e>
 800ff26:	fb0c 3202 	mla	r2, ip, r2, r3
 800ff2a:	460c      	mov	r4, r1
 800ff2c:	2001      	movs	r0, #1
 800ff2e:	e7a5      	b.n	800fe7c <_svfiprintf_r+0xd4>
 800ff30:	2300      	movs	r3, #0
 800ff32:	3401      	adds	r4, #1
 800ff34:	9305      	str	r3, [sp, #20]
 800ff36:	4619      	mov	r1, r3
 800ff38:	f04f 0c0a 	mov.w	ip, #10
 800ff3c:	4620      	mov	r0, r4
 800ff3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ff42:	3a30      	subs	r2, #48	; 0x30
 800ff44:	2a09      	cmp	r2, #9
 800ff46:	d903      	bls.n	800ff50 <_svfiprintf_r+0x1a8>
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d0c5      	beq.n	800fed8 <_svfiprintf_r+0x130>
 800ff4c:	9105      	str	r1, [sp, #20]
 800ff4e:	e7c3      	b.n	800fed8 <_svfiprintf_r+0x130>
 800ff50:	fb0c 2101 	mla	r1, ip, r1, r2
 800ff54:	4604      	mov	r4, r0
 800ff56:	2301      	movs	r3, #1
 800ff58:	e7f0      	b.n	800ff3c <_svfiprintf_r+0x194>
 800ff5a:	ab03      	add	r3, sp, #12
 800ff5c:	9300      	str	r3, [sp, #0]
 800ff5e:	462a      	mov	r2, r5
 800ff60:	4b0f      	ldr	r3, [pc, #60]	; (800ffa0 <_svfiprintf_r+0x1f8>)
 800ff62:	a904      	add	r1, sp, #16
 800ff64:	4638      	mov	r0, r7
 800ff66:	f3af 8000 	nop.w
 800ff6a:	1c42      	adds	r2, r0, #1
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	d1d6      	bne.n	800ff1e <_svfiprintf_r+0x176>
 800ff70:	89ab      	ldrh	r3, [r5, #12]
 800ff72:	065b      	lsls	r3, r3, #25
 800ff74:	f53f af2c 	bmi.w	800fdd0 <_svfiprintf_r+0x28>
 800ff78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ff7a:	b01d      	add	sp, #116	; 0x74
 800ff7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff80:	ab03      	add	r3, sp, #12
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	462a      	mov	r2, r5
 800ff86:	4b06      	ldr	r3, [pc, #24]	; (800ffa0 <_svfiprintf_r+0x1f8>)
 800ff88:	a904      	add	r1, sp, #16
 800ff8a:	4638      	mov	r0, r7
 800ff8c:	f000 f9d4 	bl	8010338 <_printf_i>
 800ff90:	e7eb      	b.n	800ff6a <_svfiprintf_r+0x1c2>
 800ff92:	bf00      	nop
 800ff94:	08010dc8 	.word	0x08010dc8
 800ff98:	08010dd2 	.word	0x08010dd2
 800ff9c:	00000000 	.word	0x00000000
 800ffa0:	0800fcf1 	.word	0x0800fcf1
 800ffa4:	08010dce 	.word	0x08010dce

0800ffa8 <__sfputc_r>:
 800ffa8:	6893      	ldr	r3, [r2, #8]
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	b410      	push	{r4}
 800ffb0:	6093      	str	r3, [r2, #8]
 800ffb2:	da08      	bge.n	800ffc6 <__sfputc_r+0x1e>
 800ffb4:	6994      	ldr	r4, [r2, #24]
 800ffb6:	42a3      	cmp	r3, r4
 800ffb8:	db01      	blt.n	800ffbe <__sfputc_r+0x16>
 800ffba:	290a      	cmp	r1, #10
 800ffbc:	d103      	bne.n	800ffc6 <__sfputc_r+0x1e>
 800ffbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffc2:	f7ff bad5 	b.w	800f570 <__swbuf_r>
 800ffc6:	6813      	ldr	r3, [r2, #0]
 800ffc8:	1c58      	adds	r0, r3, #1
 800ffca:	6010      	str	r0, [r2, #0]
 800ffcc:	7019      	strb	r1, [r3, #0]
 800ffce:	4608      	mov	r0, r1
 800ffd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ffd4:	4770      	bx	lr

0800ffd6 <__sfputs_r>:
 800ffd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffd8:	4606      	mov	r6, r0
 800ffda:	460f      	mov	r7, r1
 800ffdc:	4614      	mov	r4, r2
 800ffde:	18d5      	adds	r5, r2, r3
 800ffe0:	42ac      	cmp	r4, r5
 800ffe2:	d101      	bne.n	800ffe8 <__sfputs_r+0x12>
 800ffe4:	2000      	movs	r0, #0
 800ffe6:	e007      	b.n	800fff8 <__sfputs_r+0x22>
 800ffe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffec:	463a      	mov	r2, r7
 800ffee:	4630      	mov	r0, r6
 800fff0:	f7ff ffda 	bl	800ffa8 <__sfputc_r>
 800fff4:	1c43      	adds	r3, r0, #1
 800fff6:	d1f3      	bne.n	800ffe0 <__sfputs_r+0xa>
 800fff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fffc <_vfiprintf_r>:
 800fffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010000:	460d      	mov	r5, r1
 8010002:	b09d      	sub	sp, #116	; 0x74
 8010004:	4614      	mov	r4, r2
 8010006:	4698      	mov	r8, r3
 8010008:	4606      	mov	r6, r0
 801000a:	b118      	cbz	r0, 8010014 <_vfiprintf_r+0x18>
 801000c:	6983      	ldr	r3, [r0, #24]
 801000e:	b90b      	cbnz	r3, 8010014 <_vfiprintf_r+0x18>
 8010010:	f7ff fc88 	bl	800f924 <__sinit>
 8010014:	4b89      	ldr	r3, [pc, #548]	; (801023c <_vfiprintf_r+0x240>)
 8010016:	429d      	cmp	r5, r3
 8010018:	d11b      	bne.n	8010052 <_vfiprintf_r+0x56>
 801001a:	6875      	ldr	r5, [r6, #4]
 801001c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801001e:	07d9      	lsls	r1, r3, #31
 8010020:	d405      	bmi.n	801002e <_vfiprintf_r+0x32>
 8010022:	89ab      	ldrh	r3, [r5, #12]
 8010024:	059a      	lsls	r2, r3, #22
 8010026:	d402      	bmi.n	801002e <_vfiprintf_r+0x32>
 8010028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801002a:	f7ff fd19 	bl	800fa60 <__retarget_lock_acquire_recursive>
 801002e:	89ab      	ldrh	r3, [r5, #12]
 8010030:	071b      	lsls	r3, r3, #28
 8010032:	d501      	bpl.n	8010038 <_vfiprintf_r+0x3c>
 8010034:	692b      	ldr	r3, [r5, #16]
 8010036:	b9eb      	cbnz	r3, 8010074 <_vfiprintf_r+0x78>
 8010038:	4629      	mov	r1, r5
 801003a:	4630      	mov	r0, r6
 801003c:	f7ff faea 	bl	800f614 <__swsetup_r>
 8010040:	b1c0      	cbz	r0, 8010074 <_vfiprintf_r+0x78>
 8010042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010044:	07dc      	lsls	r4, r3, #31
 8010046:	d50e      	bpl.n	8010066 <_vfiprintf_r+0x6a>
 8010048:	f04f 30ff 	mov.w	r0, #4294967295
 801004c:	b01d      	add	sp, #116	; 0x74
 801004e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010052:	4b7b      	ldr	r3, [pc, #492]	; (8010240 <_vfiprintf_r+0x244>)
 8010054:	429d      	cmp	r5, r3
 8010056:	d101      	bne.n	801005c <_vfiprintf_r+0x60>
 8010058:	68b5      	ldr	r5, [r6, #8]
 801005a:	e7df      	b.n	801001c <_vfiprintf_r+0x20>
 801005c:	4b79      	ldr	r3, [pc, #484]	; (8010244 <_vfiprintf_r+0x248>)
 801005e:	429d      	cmp	r5, r3
 8010060:	bf08      	it	eq
 8010062:	68f5      	ldreq	r5, [r6, #12]
 8010064:	e7da      	b.n	801001c <_vfiprintf_r+0x20>
 8010066:	89ab      	ldrh	r3, [r5, #12]
 8010068:	0598      	lsls	r0, r3, #22
 801006a:	d4ed      	bmi.n	8010048 <_vfiprintf_r+0x4c>
 801006c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801006e:	f7ff fcf8 	bl	800fa62 <__retarget_lock_release_recursive>
 8010072:	e7e9      	b.n	8010048 <_vfiprintf_r+0x4c>
 8010074:	2300      	movs	r3, #0
 8010076:	9309      	str	r3, [sp, #36]	; 0x24
 8010078:	2320      	movs	r3, #32
 801007a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801007e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010082:	2330      	movs	r3, #48	; 0x30
 8010084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010248 <_vfiprintf_r+0x24c>
 8010088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801008c:	f04f 0901 	mov.w	r9, #1
 8010090:	4623      	mov	r3, r4
 8010092:	469a      	mov	sl, r3
 8010094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010098:	b10a      	cbz	r2, 801009e <_vfiprintf_r+0xa2>
 801009a:	2a25      	cmp	r2, #37	; 0x25
 801009c:	d1f9      	bne.n	8010092 <_vfiprintf_r+0x96>
 801009e:	ebba 0b04 	subs.w	fp, sl, r4
 80100a2:	d00b      	beq.n	80100bc <_vfiprintf_r+0xc0>
 80100a4:	465b      	mov	r3, fp
 80100a6:	4622      	mov	r2, r4
 80100a8:	4629      	mov	r1, r5
 80100aa:	4630      	mov	r0, r6
 80100ac:	f7ff ff93 	bl	800ffd6 <__sfputs_r>
 80100b0:	3001      	adds	r0, #1
 80100b2:	f000 80aa 	beq.w	801020a <_vfiprintf_r+0x20e>
 80100b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100b8:	445a      	add	r2, fp
 80100ba:	9209      	str	r2, [sp, #36]	; 0x24
 80100bc:	f89a 3000 	ldrb.w	r3, [sl]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f000 80a2 	beq.w	801020a <_vfiprintf_r+0x20e>
 80100c6:	2300      	movs	r3, #0
 80100c8:	f04f 32ff 	mov.w	r2, #4294967295
 80100cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100d0:	f10a 0a01 	add.w	sl, sl, #1
 80100d4:	9304      	str	r3, [sp, #16]
 80100d6:	9307      	str	r3, [sp, #28]
 80100d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100dc:	931a      	str	r3, [sp, #104]	; 0x68
 80100de:	4654      	mov	r4, sl
 80100e0:	2205      	movs	r2, #5
 80100e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e6:	4858      	ldr	r0, [pc, #352]	; (8010248 <_vfiprintf_r+0x24c>)
 80100e8:	f7f0 f8fa 	bl	80002e0 <memchr>
 80100ec:	9a04      	ldr	r2, [sp, #16]
 80100ee:	b9d8      	cbnz	r0, 8010128 <_vfiprintf_r+0x12c>
 80100f0:	06d1      	lsls	r1, r2, #27
 80100f2:	bf44      	itt	mi
 80100f4:	2320      	movmi	r3, #32
 80100f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100fa:	0713      	lsls	r3, r2, #28
 80100fc:	bf44      	itt	mi
 80100fe:	232b      	movmi	r3, #43	; 0x2b
 8010100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010104:	f89a 3000 	ldrb.w	r3, [sl]
 8010108:	2b2a      	cmp	r3, #42	; 0x2a
 801010a:	d015      	beq.n	8010138 <_vfiprintf_r+0x13c>
 801010c:	9a07      	ldr	r2, [sp, #28]
 801010e:	4654      	mov	r4, sl
 8010110:	2000      	movs	r0, #0
 8010112:	f04f 0c0a 	mov.w	ip, #10
 8010116:	4621      	mov	r1, r4
 8010118:	f811 3b01 	ldrb.w	r3, [r1], #1
 801011c:	3b30      	subs	r3, #48	; 0x30
 801011e:	2b09      	cmp	r3, #9
 8010120:	d94e      	bls.n	80101c0 <_vfiprintf_r+0x1c4>
 8010122:	b1b0      	cbz	r0, 8010152 <_vfiprintf_r+0x156>
 8010124:	9207      	str	r2, [sp, #28]
 8010126:	e014      	b.n	8010152 <_vfiprintf_r+0x156>
 8010128:	eba0 0308 	sub.w	r3, r0, r8
 801012c:	fa09 f303 	lsl.w	r3, r9, r3
 8010130:	4313      	orrs	r3, r2
 8010132:	9304      	str	r3, [sp, #16]
 8010134:	46a2      	mov	sl, r4
 8010136:	e7d2      	b.n	80100de <_vfiprintf_r+0xe2>
 8010138:	9b03      	ldr	r3, [sp, #12]
 801013a:	1d19      	adds	r1, r3, #4
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	9103      	str	r1, [sp, #12]
 8010140:	2b00      	cmp	r3, #0
 8010142:	bfbb      	ittet	lt
 8010144:	425b      	neglt	r3, r3
 8010146:	f042 0202 	orrlt.w	r2, r2, #2
 801014a:	9307      	strge	r3, [sp, #28]
 801014c:	9307      	strlt	r3, [sp, #28]
 801014e:	bfb8      	it	lt
 8010150:	9204      	strlt	r2, [sp, #16]
 8010152:	7823      	ldrb	r3, [r4, #0]
 8010154:	2b2e      	cmp	r3, #46	; 0x2e
 8010156:	d10c      	bne.n	8010172 <_vfiprintf_r+0x176>
 8010158:	7863      	ldrb	r3, [r4, #1]
 801015a:	2b2a      	cmp	r3, #42	; 0x2a
 801015c:	d135      	bne.n	80101ca <_vfiprintf_r+0x1ce>
 801015e:	9b03      	ldr	r3, [sp, #12]
 8010160:	1d1a      	adds	r2, r3, #4
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	9203      	str	r2, [sp, #12]
 8010166:	2b00      	cmp	r3, #0
 8010168:	bfb8      	it	lt
 801016a:	f04f 33ff 	movlt.w	r3, #4294967295
 801016e:	3402      	adds	r4, #2
 8010170:	9305      	str	r3, [sp, #20]
 8010172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010258 <_vfiprintf_r+0x25c>
 8010176:	7821      	ldrb	r1, [r4, #0]
 8010178:	2203      	movs	r2, #3
 801017a:	4650      	mov	r0, sl
 801017c:	f7f0 f8b0 	bl	80002e0 <memchr>
 8010180:	b140      	cbz	r0, 8010194 <_vfiprintf_r+0x198>
 8010182:	2340      	movs	r3, #64	; 0x40
 8010184:	eba0 000a 	sub.w	r0, r0, sl
 8010188:	fa03 f000 	lsl.w	r0, r3, r0
 801018c:	9b04      	ldr	r3, [sp, #16]
 801018e:	4303      	orrs	r3, r0
 8010190:	3401      	adds	r4, #1
 8010192:	9304      	str	r3, [sp, #16]
 8010194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010198:	482c      	ldr	r0, [pc, #176]	; (801024c <_vfiprintf_r+0x250>)
 801019a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801019e:	2206      	movs	r2, #6
 80101a0:	f7f0 f89e 	bl	80002e0 <memchr>
 80101a4:	2800      	cmp	r0, #0
 80101a6:	d03f      	beq.n	8010228 <_vfiprintf_r+0x22c>
 80101a8:	4b29      	ldr	r3, [pc, #164]	; (8010250 <_vfiprintf_r+0x254>)
 80101aa:	bb1b      	cbnz	r3, 80101f4 <_vfiprintf_r+0x1f8>
 80101ac:	9b03      	ldr	r3, [sp, #12]
 80101ae:	3307      	adds	r3, #7
 80101b0:	f023 0307 	bic.w	r3, r3, #7
 80101b4:	3308      	adds	r3, #8
 80101b6:	9303      	str	r3, [sp, #12]
 80101b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101ba:	443b      	add	r3, r7
 80101bc:	9309      	str	r3, [sp, #36]	; 0x24
 80101be:	e767      	b.n	8010090 <_vfiprintf_r+0x94>
 80101c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80101c4:	460c      	mov	r4, r1
 80101c6:	2001      	movs	r0, #1
 80101c8:	e7a5      	b.n	8010116 <_vfiprintf_r+0x11a>
 80101ca:	2300      	movs	r3, #0
 80101cc:	3401      	adds	r4, #1
 80101ce:	9305      	str	r3, [sp, #20]
 80101d0:	4619      	mov	r1, r3
 80101d2:	f04f 0c0a 	mov.w	ip, #10
 80101d6:	4620      	mov	r0, r4
 80101d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101dc:	3a30      	subs	r2, #48	; 0x30
 80101de:	2a09      	cmp	r2, #9
 80101e0:	d903      	bls.n	80101ea <_vfiprintf_r+0x1ee>
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d0c5      	beq.n	8010172 <_vfiprintf_r+0x176>
 80101e6:	9105      	str	r1, [sp, #20]
 80101e8:	e7c3      	b.n	8010172 <_vfiprintf_r+0x176>
 80101ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80101ee:	4604      	mov	r4, r0
 80101f0:	2301      	movs	r3, #1
 80101f2:	e7f0      	b.n	80101d6 <_vfiprintf_r+0x1da>
 80101f4:	ab03      	add	r3, sp, #12
 80101f6:	9300      	str	r3, [sp, #0]
 80101f8:	462a      	mov	r2, r5
 80101fa:	4b16      	ldr	r3, [pc, #88]	; (8010254 <_vfiprintf_r+0x258>)
 80101fc:	a904      	add	r1, sp, #16
 80101fe:	4630      	mov	r0, r6
 8010200:	f3af 8000 	nop.w
 8010204:	4607      	mov	r7, r0
 8010206:	1c78      	adds	r0, r7, #1
 8010208:	d1d6      	bne.n	80101b8 <_vfiprintf_r+0x1bc>
 801020a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801020c:	07d9      	lsls	r1, r3, #31
 801020e:	d405      	bmi.n	801021c <_vfiprintf_r+0x220>
 8010210:	89ab      	ldrh	r3, [r5, #12]
 8010212:	059a      	lsls	r2, r3, #22
 8010214:	d402      	bmi.n	801021c <_vfiprintf_r+0x220>
 8010216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010218:	f7ff fc23 	bl	800fa62 <__retarget_lock_release_recursive>
 801021c:	89ab      	ldrh	r3, [r5, #12]
 801021e:	065b      	lsls	r3, r3, #25
 8010220:	f53f af12 	bmi.w	8010048 <_vfiprintf_r+0x4c>
 8010224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010226:	e711      	b.n	801004c <_vfiprintf_r+0x50>
 8010228:	ab03      	add	r3, sp, #12
 801022a:	9300      	str	r3, [sp, #0]
 801022c:	462a      	mov	r2, r5
 801022e:	4b09      	ldr	r3, [pc, #36]	; (8010254 <_vfiprintf_r+0x258>)
 8010230:	a904      	add	r1, sp, #16
 8010232:	4630      	mov	r0, r6
 8010234:	f000 f880 	bl	8010338 <_printf_i>
 8010238:	e7e4      	b.n	8010204 <_vfiprintf_r+0x208>
 801023a:	bf00      	nop
 801023c:	08010d88 	.word	0x08010d88
 8010240:	08010da8 	.word	0x08010da8
 8010244:	08010d68 	.word	0x08010d68
 8010248:	08010dc8 	.word	0x08010dc8
 801024c:	08010dd2 	.word	0x08010dd2
 8010250:	00000000 	.word	0x00000000
 8010254:	0800ffd7 	.word	0x0800ffd7
 8010258:	08010dce 	.word	0x08010dce

0801025c <_printf_common>:
 801025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010260:	4616      	mov	r6, r2
 8010262:	4699      	mov	r9, r3
 8010264:	688a      	ldr	r2, [r1, #8]
 8010266:	690b      	ldr	r3, [r1, #16]
 8010268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801026c:	4293      	cmp	r3, r2
 801026e:	bfb8      	it	lt
 8010270:	4613      	movlt	r3, r2
 8010272:	6033      	str	r3, [r6, #0]
 8010274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010278:	4607      	mov	r7, r0
 801027a:	460c      	mov	r4, r1
 801027c:	b10a      	cbz	r2, 8010282 <_printf_common+0x26>
 801027e:	3301      	adds	r3, #1
 8010280:	6033      	str	r3, [r6, #0]
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	0699      	lsls	r1, r3, #26
 8010286:	bf42      	ittt	mi
 8010288:	6833      	ldrmi	r3, [r6, #0]
 801028a:	3302      	addmi	r3, #2
 801028c:	6033      	strmi	r3, [r6, #0]
 801028e:	6825      	ldr	r5, [r4, #0]
 8010290:	f015 0506 	ands.w	r5, r5, #6
 8010294:	d106      	bne.n	80102a4 <_printf_common+0x48>
 8010296:	f104 0a19 	add.w	sl, r4, #25
 801029a:	68e3      	ldr	r3, [r4, #12]
 801029c:	6832      	ldr	r2, [r6, #0]
 801029e:	1a9b      	subs	r3, r3, r2
 80102a0:	42ab      	cmp	r3, r5
 80102a2:	dc26      	bgt.n	80102f2 <_printf_common+0x96>
 80102a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80102a8:	1e13      	subs	r3, r2, #0
 80102aa:	6822      	ldr	r2, [r4, #0]
 80102ac:	bf18      	it	ne
 80102ae:	2301      	movne	r3, #1
 80102b0:	0692      	lsls	r2, r2, #26
 80102b2:	d42b      	bmi.n	801030c <_printf_common+0xb0>
 80102b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80102b8:	4649      	mov	r1, r9
 80102ba:	4638      	mov	r0, r7
 80102bc:	47c0      	blx	r8
 80102be:	3001      	adds	r0, #1
 80102c0:	d01e      	beq.n	8010300 <_printf_common+0xa4>
 80102c2:	6823      	ldr	r3, [r4, #0]
 80102c4:	68e5      	ldr	r5, [r4, #12]
 80102c6:	6832      	ldr	r2, [r6, #0]
 80102c8:	f003 0306 	and.w	r3, r3, #6
 80102cc:	2b04      	cmp	r3, #4
 80102ce:	bf08      	it	eq
 80102d0:	1aad      	subeq	r5, r5, r2
 80102d2:	68a3      	ldr	r3, [r4, #8]
 80102d4:	6922      	ldr	r2, [r4, #16]
 80102d6:	bf0c      	ite	eq
 80102d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80102dc:	2500      	movne	r5, #0
 80102de:	4293      	cmp	r3, r2
 80102e0:	bfc4      	itt	gt
 80102e2:	1a9b      	subgt	r3, r3, r2
 80102e4:	18ed      	addgt	r5, r5, r3
 80102e6:	2600      	movs	r6, #0
 80102e8:	341a      	adds	r4, #26
 80102ea:	42b5      	cmp	r5, r6
 80102ec:	d11a      	bne.n	8010324 <_printf_common+0xc8>
 80102ee:	2000      	movs	r0, #0
 80102f0:	e008      	b.n	8010304 <_printf_common+0xa8>
 80102f2:	2301      	movs	r3, #1
 80102f4:	4652      	mov	r2, sl
 80102f6:	4649      	mov	r1, r9
 80102f8:	4638      	mov	r0, r7
 80102fa:	47c0      	blx	r8
 80102fc:	3001      	adds	r0, #1
 80102fe:	d103      	bne.n	8010308 <_printf_common+0xac>
 8010300:	f04f 30ff 	mov.w	r0, #4294967295
 8010304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010308:	3501      	adds	r5, #1
 801030a:	e7c6      	b.n	801029a <_printf_common+0x3e>
 801030c:	18e1      	adds	r1, r4, r3
 801030e:	1c5a      	adds	r2, r3, #1
 8010310:	2030      	movs	r0, #48	; 0x30
 8010312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010316:	4422      	add	r2, r4
 8010318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801031c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010320:	3302      	adds	r3, #2
 8010322:	e7c7      	b.n	80102b4 <_printf_common+0x58>
 8010324:	2301      	movs	r3, #1
 8010326:	4622      	mov	r2, r4
 8010328:	4649      	mov	r1, r9
 801032a:	4638      	mov	r0, r7
 801032c:	47c0      	blx	r8
 801032e:	3001      	adds	r0, #1
 8010330:	d0e6      	beq.n	8010300 <_printf_common+0xa4>
 8010332:	3601      	adds	r6, #1
 8010334:	e7d9      	b.n	80102ea <_printf_common+0x8e>
	...

08010338 <_printf_i>:
 8010338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801033c:	7e0f      	ldrb	r7, [r1, #24]
 801033e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010340:	2f78      	cmp	r7, #120	; 0x78
 8010342:	4691      	mov	r9, r2
 8010344:	4680      	mov	r8, r0
 8010346:	460c      	mov	r4, r1
 8010348:	469a      	mov	sl, r3
 801034a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801034e:	d807      	bhi.n	8010360 <_printf_i+0x28>
 8010350:	2f62      	cmp	r7, #98	; 0x62
 8010352:	d80a      	bhi.n	801036a <_printf_i+0x32>
 8010354:	2f00      	cmp	r7, #0
 8010356:	f000 80d8 	beq.w	801050a <_printf_i+0x1d2>
 801035a:	2f58      	cmp	r7, #88	; 0x58
 801035c:	f000 80a3 	beq.w	80104a6 <_printf_i+0x16e>
 8010360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010368:	e03a      	b.n	80103e0 <_printf_i+0xa8>
 801036a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801036e:	2b15      	cmp	r3, #21
 8010370:	d8f6      	bhi.n	8010360 <_printf_i+0x28>
 8010372:	a101      	add	r1, pc, #4	; (adr r1, 8010378 <_printf_i+0x40>)
 8010374:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010378:	080103d1 	.word	0x080103d1
 801037c:	080103e5 	.word	0x080103e5
 8010380:	08010361 	.word	0x08010361
 8010384:	08010361 	.word	0x08010361
 8010388:	08010361 	.word	0x08010361
 801038c:	08010361 	.word	0x08010361
 8010390:	080103e5 	.word	0x080103e5
 8010394:	08010361 	.word	0x08010361
 8010398:	08010361 	.word	0x08010361
 801039c:	08010361 	.word	0x08010361
 80103a0:	08010361 	.word	0x08010361
 80103a4:	080104f1 	.word	0x080104f1
 80103a8:	08010415 	.word	0x08010415
 80103ac:	080104d3 	.word	0x080104d3
 80103b0:	08010361 	.word	0x08010361
 80103b4:	08010361 	.word	0x08010361
 80103b8:	08010513 	.word	0x08010513
 80103bc:	08010361 	.word	0x08010361
 80103c0:	08010415 	.word	0x08010415
 80103c4:	08010361 	.word	0x08010361
 80103c8:	08010361 	.word	0x08010361
 80103cc:	080104db 	.word	0x080104db
 80103d0:	682b      	ldr	r3, [r5, #0]
 80103d2:	1d1a      	adds	r2, r3, #4
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	602a      	str	r2, [r5, #0]
 80103d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80103dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80103e0:	2301      	movs	r3, #1
 80103e2:	e0a3      	b.n	801052c <_printf_i+0x1f4>
 80103e4:	6820      	ldr	r0, [r4, #0]
 80103e6:	6829      	ldr	r1, [r5, #0]
 80103e8:	0606      	lsls	r6, r0, #24
 80103ea:	f101 0304 	add.w	r3, r1, #4
 80103ee:	d50a      	bpl.n	8010406 <_printf_i+0xce>
 80103f0:	680e      	ldr	r6, [r1, #0]
 80103f2:	602b      	str	r3, [r5, #0]
 80103f4:	2e00      	cmp	r6, #0
 80103f6:	da03      	bge.n	8010400 <_printf_i+0xc8>
 80103f8:	232d      	movs	r3, #45	; 0x2d
 80103fa:	4276      	negs	r6, r6
 80103fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010400:	485e      	ldr	r0, [pc, #376]	; (801057c <_printf_i+0x244>)
 8010402:	230a      	movs	r3, #10
 8010404:	e019      	b.n	801043a <_printf_i+0x102>
 8010406:	680e      	ldr	r6, [r1, #0]
 8010408:	602b      	str	r3, [r5, #0]
 801040a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801040e:	bf18      	it	ne
 8010410:	b236      	sxthne	r6, r6
 8010412:	e7ef      	b.n	80103f4 <_printf_i+0xbc>
 8010414:	682b      	ldr	r3, [r5, #0]
 8010416:	6820      	ldr	r0, [r4, #0]
 8010418:	1d19      	adds	r1, r3, #4
 801041a:	6029      	str	r1, [r5, #0]
 801041c:	0601      	lsls	r1, r0, #24
 801041e:	d501      	bpl.n	8010424 <_printf_i+0xec>
 8010420:	681e      	ldr	r6, [r3, #0]
 8010422:	e002      	b.n	801042a <_printf_i+0xf2>
 8010424:	0646      	lsls	r6, r0, #25
 8010426:	d5fb      	bpl.n	8010420 <_printf_i+0xe8>
 8010428:	881e      	ldrh	r6, [r3, #0]
 801042a:	4854      	ldr	r0, [pc, #336]	; (801057c <_printf_i+0x244>)
 801042c:	2f6f      	cmp	r7, #111	; 0x6f
 801042e:	bf0c      	ite	eq
 8010430:	2308      	moveq	r3, #8
 8010432:	230a      	movne	r3, #10
 8010434:	2100      	movs	r1, #0
 8010436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801043a:	6865      	ldr	r5, [r4, #4]
 801043c:	60a5      	str	r5, [r4, #8]
 801043e:	2d00      	cmp	r5, #0
 8010440:	bfa2      	ittt	ge
 8010442:	6821      	ldrge	r1, [r4, #0]
 8010444:	f021 0104 	bicge.w	r1, r1, #4
 8010448:	6021      	strge	r1, [r4, #0]
 801044a:	b90e      	cbnz	r6, 8010450 <_printf_i+0x118>
 801044c:	2d00      	cmp	r5, #0
 801044e:	d04d      	beq.n	80104ec <_printf_i+0x1b4>
 8010450:	4615      	mov	r5, r2
 8010452:	fbb6 f1f3 	udiv	r1, r6, r3
 8010456:	fb03 6711 	mls	r7, r3, r1, r6
 801045a:	5dc7      	ldrb	r7, [r0, r7]
 801045c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010460:	4637      	mov	r7, r6
 8010462:	42bb      	cmp	r3, r7
 8010464:	460e      	mov	r6, r1
 8010466:	d9f4      	bls.n	8010452 <_printf_i+0x11a>
 8010468:	2b08      	cmp	r3, #8
 801046a:	d10b      	bne.n	8010484 <_printf_i+0x14c>
 801046c:	6823      	ldr	r3, [r4, #0]
 801046e:	07de      	lsls	r6, r3, #31
 8010470:	d508      	bpl.n	8010484 <_printf_i+0x14c>
 8010472:	6923      	ldr	r3, [r4, #16]
 8010474:	6861      	ldr	r1, [r4, #4]
 8010476:	4299      	cmp	r1, r3
 8010478:	bfde      	ittt	le
 801047a:	2330      	movle	r3, #48	; 0x30
 801047c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010480:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010484:	1b52      	subs	r2, r2, r5
 8010486:	6122      	str	r2, [r4, #16]
 8010488:	f8cd a000 	str.w	sl, [sp]
 801048c:	464b      	mov	r3, r9
 801048e:	aa03      	add	r2, sp, #12
 8010490:	4621      	mov	r1, r4
 8010492:	4640      	mov	r0, r8
 8010494:	f7ff fee2 	bl	801025c <_printf_common>
 8010498:	3001      	adds	r0, #1
 801049a:	d14c      	bne.n	8010536 <_printf_i+0x1fe>
 801049c:	f04f 30ff 	mov.w	r0, #4294967295
 80104a0:	b004      	add	sp, #16
 80104a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104a6:	4835      	ldr	r0, [pc, #212]	; (801057c <_printf_i+0x244>)
 80104a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80104ac:	6829      	ldr	r1, [r5, #0]
 80104ae:	6823      	ldr	r3, [r4, #0]
 80104b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80104b4:	6029      	str	r1, [r5, #0]
 80104b6:	061d      	lsls	r5, r3, #24
 80104b8:	d514      	bpl.n	80104e4 <_printf_i+0x1ac>
 80104ba:	07df      	lsls	r7, r3, #31
 80104bc:	bf44      	itt	mi
 80104be:	f043 0320 	orrmi.w	r3, r3, #32
 80104c2:	6023      	strmi	r3, [r4, #0]
 80104c4:	b91e      	cbnz	r6, 80104ce <_printf_i+0x196>
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	f023 0320 	bic.w	r3, r3, #32
 80104cc:	6023      	str	r3, [r4, #0]
 80104ce:	2310      	movs	r3, #16
 80104d0:	e7b0      	b.n	8010434 <_printf_i+0xfc>
 80104d2:	6823      	ldr	r3, [r4, #0]
 80104d4:	f043 0320 	orr.w	r3, r3, #32
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	2378      	movs	r3, #120	; 0x78
 80104dc:	4828      	ldr	r0, [pc, #160]	; (8010580 <_printf_i+0x248>)
 80104de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104e2:	e7e3      	b.n	80104ac <_printf_i+0x174>
 80104e4:	0659      	lsls	r1, r3, #25
 80104e6:	bf48      	it	mi
 80104e8:	b2b6      	uxthmi	r6, r6
 80104ea:	e7e6      	b.n	80104ba <_printf_i+0x182>
 80104ec:	4615      	mov	r5, r2
 80104ee:	e7bb      	b.n	8010468 <_printf_i+0x130>
 80104f0:	682b      	ldr	r3, [r5, #0]
 80104f2:	6826      	ldr	r6, [r4, #0]
 80104f4:	6961      	ldr	r1, [r4, #20]
 80104f6:	1d18      	adds	r0, r3, #4
 80104f8:	6028      	str	r0, [r5, #0]
 80104fa:	0635      	lsls	r5, r6, #24
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	d501      	bpl.n	8010504 <_printf_i+0x1cc>
 8010500:	6019      	str	r1, [r3, #0]
 8010502:	e002      	b.n	801050a <_printf_i+0x1d2>
 8010504:	0670      	lsls	r0, r6, #25
 8010506:	d5fb      	bpl.n	8010500 <_printf_i+0x1c8>
 8010508:	8019      	strh	r1, [r3, #0]
 801050a:	2300      	movs	r3, #0
 801050c:	6123      	str	r3, [r4, #16]
 801050e:	4615      	mov	r5, r2
 8010510:	e7ba      	b.n	8010488 <_printf_i+0x150>
 8010512:	682b      	ldr	r3, [r5, #0]
 8010514:	1d1a      	adds	r2, r3, #4
 8010516:	602a      	str	r2, [r5, #0]
 8010518:	681d      	ldr	r5, [r3, #0]
 801051a:	6862      	ldr	r2, [r4, #4]
 801051c:	2100      	movs	r1, #0
 801051e:	4628      	mov	r0, r5
 8010520:	f7ef fede 	bl	80002e0 <memchr>
 8010524:	b108      	cbz	r0, 801052a <_printf_i+0x1f2>
 8010526:	1b40      	subs	r0, r0, r5
 8010528:	6060      	str	r0, [r4, #4]
 801052a:	6863      	ldr	r3, [r4, #4]
 801052c:	6123      	str	r3, [r4, #16]
 801052e:	2300      	movs	r3, #0
 8010530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010534:	e7a8      	b.n	8010488 <_printf_i+0x150>
 8010536:	6923      	ldr	r3, [r4, #16]
 8010538:	462a      	mov	r2, r5
 801053a:	4649      	mov	r1, r9
 801053c:	4640      	mov	r0, r8
 801053e:	47d0      	blx	sl
 8010540:	3001      	adds	r0, #1
 8010542:	d0ab      	beq.n	801049c <_printf_i+0x164>
 8010544:	6823      	ldr	r3, [r4, #0]
 8010546:	079b      	lsls	r3, r3, #30
 8010548:	d413      	bmi.n	8010572 <_printf_i+0x23a>
 801054a:	68e0      	ldr	r0, [r4, #12]
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	4298      	cmp	r0, r3
 8010550:	bfb8      	it	lt
 8010552:	4618      	movlt	r0, r3
 8010554:	e7a4      	b.n	80104a0 <_printf_i+0x168>
 8010556:	2301      	movs	r3, #1
 8010558:	4632      	mov	r2, r6
 801055a:	4649      	mov	r1, r9
 801055c:	4640      	mov	r0, r8
 801055e:	47d0      	blx	sl
 8010560:	3001      	adds	r0, #1
 8010562:	d09b      	beq.n	801049c <_printf_i+0x164>
 8010564:	3501      	adds	r5, #1
 8010566:	68e3      	ldr	r3, [r4, #12]
 8010568:	9903      	ldr	r1, [sp, #12]
 801056a:	1a5b      	subs	r3, r3, r1
 801056c:	42ab      	cmp	r3, r5
 801056e:	dcf2      	bgt.n	8010556 <_printf_i+0x21e>
 8010570:	e7eb      	b.n	801054a <_printf_i+0x212>
 8010572:	2500      	movs	r5, #0
 8010574:	f104 0619 	add.w	r6, r4, #25
 8010578:	e7f5      	b.n	8010566 <_printf_i+0x22e>
 801057a:	bf00      	nop
 801057c:	08010dd9 	.word	0x08010dd9
 8010580:	08010dea 	.word	0x08010dea

08010584 <_sbrk_r>:
 8010584:	b538      	push	{r3, r4, r5, lr}
 8010586:	4d06      	ldr	r5, [pc, #24]	; (80105a0 <_sbrk_r+0x1c>)
 8010588:	2300      	movs	r3, #0
 801058a:	4604      	mov	r4, r0
 801058c:	4608      	mov	r0, r1
 801058e:	602b      	str	r3, [r5, #0]
 8010590:	f7f1 fb34 	bl	8001bfc <_sbrk>
 8010594:	1c43      	adds	r3, r0, #1
 8010596:	d102      	bne.n	801059e <_sbrk_r+0x1a>
 8010598:	682b      	ldr	r3, [r5, #0]
 801059a:	b103      	cbz	r3, 801059e <_sbrk_r+0x1a>
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	bd38      	pop	{r3, r4, r5, pc}
 80105a0:	240027e0 	.word	0x240027e0

080105a4 <__sread>:
 80105a4:	b510      	push	{r4, lr}
 80105a6:	460c      	mov	r4, r1
 80105a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105ac:	f000 f8f8 	bl	80107a0 <_read_r>
 80105b0:	2800      	cmp	r0, #0
 80105b2:	bfab      	itete	ge
 80105b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80105b6:	89a3      	ldrhlt	r3, [r4, #12]
 80105b8:	181b      	addge	r3, r3, r0
 80105ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80105be:	bfac      	ite	ge
 80105c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80105c2:	81a3      	strhlt	r3, [r4, #12]
 80105c4:	bd10      	pop	{r4, pc}

080105c6 <__swrite>:
 80105c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ca:	461f      	mov	r7, r3
 80105cc:	898b      	ldrh	r3, [r1, #12]
 80105ce:	05db      	lsls	r3, r3, #23
 80105d0:	4605      	mov	r5, r0
 80105d2:	460c      	mov	r4, r1
 80105d4:	4616      	mov	r6, r2
 80105d6:	d505      	bpl.n	80105e4 <__swrite+0x1e>
 80105d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105dc:	2302      	movs	r3, #2
 80105de:	2200      	movs	r2, #0
 80105e0:	f000 f868 	bl	80106b4 <_lseek_r>
 80105e4:	89a3      	ldrh	r3, [r4, #12]
 80105e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80105ee:	81a3      	strh	r3, [r4, #12]
 80105f0:	4632      	mov	r2, r6
 80105f2:	463b      	mov	r3, r7
 80105f4:	4628      	mov	r0, r5
 80105f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80105fa:	f000 b817 	b.w	801062c <_write_r>

080105fe <__sseek>:
 80105fe:	b510      	push	{r4, lr}
 8010600:	460c      	mov	r4, r1
 8010602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010606:	f000 f855 	bl	80106b4 <_lseek_r>
 801060a:	1c43      	adds	r3, r0, #1
 801060c:	89a3      	ldrh	r3, [r4, #12]
 801060e:	bf15      	itete	ne
 8010610:	6560      	strne	r0, [r4, #84]	; 0x54
 8010612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801061a:	81a3      	strheq	r3, [r4, #12]
 801061c:	bf18      	it	ne
 801061e:	81a3      	strhne	r3, [r4, #12]
 8010620:	bd10      	pop	{r4, pc}

08010622 <__sclose>:
 8010622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010626:	f000 b813 	b.w	8010650 <_close_r>
	...

0801062c <_write_r>:
 801062c:	b538      	push	{r3, r4, r5, lr}
 801062e:	4d07      	ldr	r5, [pc, #28]	; (801064c <_write_r+0x20>)
 8010630:	4604      	mov	r4, r0
 8010632:	4608      	mov	r0, r1
 8010634:	4611      	mov	r1, r2
 8010636:	2200      	movs	r2, #0
 8010638:	602a      	str	r2, [r5, #0]
 801063a:	461a      	mov	r2, r3
 801063c:	f7f1 fa8d 	bl	8001b5a <_write>
 8010640:	1c43      	adds	r3, r0, #1
 8010642:	d102      	bne.n	801064a <_write_r+0x1e>
 8010644:	682b      	ldr	r3, [r5, #0]
 8010646:	b103      	cbz	r3, 801064a <_write_r+0x1e>
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	bd38      	pop	{r3, r4, r5, pc}
 801064c:	240027e0 	.word	0x240027e0

08010650 <_close_r>:
 8010650:	b538      	push	{r3, r4, r5, lr}
 8010652:	4d06      	ldr	r5, [pc, #24]	; (801066c <_close_r+0x1c>)
 8010654:	2300      	movs	r3, #0
 8010656:	4604      	mov	r4, r0
 8010658:	4608      	mov	r0, r1
 801065a:	602b      	str	r3, [r5, #0]
 801065c:	f7f1 fa99 	bl	8001b92 <_close>
 8010660:	1c43      	adds	r3, r0, #1
 8010662:	d102      	bne.n	801066a <_close_r+0x1a>
 8010664:	682b      	ldr	r3, [r5, #0]
 8010666:	b103      	cbz	r3, 801066a <_close_r+0x1a>
 8010668:	6023      	str	r3, [r4, #0]
 801066a:	bd38      	pop	{r3, r4, r5, pc}
 801066c:	240027e0 	.word	0x240027e0

08010670 <_fstat_r>:
 8010670:	b538      	push	{r3, r4, r5, lr}
 8010672:	4d07      	ldr	r5, [pc, #28]	; (8010690 <_fstat_r+0x20>)
 8010674:	2300      	movs	r3, #0
 8010676:	4604      	mov	r4, r0
 8010678:	4608      	mov	r0, r1
 801067a:	4611      	mov	r1, r2
 801067c:	602b      	str	r3, [r5, #0]
 801067e:	f7f1 fa94 	bl	8001baa <_fstat>
 8010682:	1c43      	adds	r3, r0, #1
 8010684:	d102      	bne.n	801068c <_fstat_r+0x1c>
 8010686:	682b      	ldr	r3, [r5, #0]
 8010688:	b103      	cbz	r3, 801068c <_fstat_r+0x1c>
 801068a:	6023      	str	r3, [r4, #0]
 801068c:	bd38      	pop	{r3, r4, r5, pc}
 801068e:	bf00      	nop
 8010690:	240027e0 	.word	0x240027e0

08010694 <_isatty_r>:
 8010694:	b538      	push	{r3, r4, r5, lr}
 8010696:	4d06      	ldr	r5, [pc, #24]	; (80106b0 <_isatty_r+0x1c>)
 8010698:	2300      	movs	r3, #0
 801069a:	4604      	mov	r4, r0
 801069c:	4608      	mov	r0, r1
 801069e:	602b      	str	r3, [r5, #0]
 80106a0:	f7f1 fa93 	bl	8001bca <_isatty>
 80106a4:	1c43      	adds	r3, r0, #1
 80106a6:	d102      	bne.n	80106ae <_isatty_r+0x1a>
 80106a8:	682b      	ldr	r3, [r5, #0]
 80106aa:	b103      	cbz	r3, 80106ae <_isatty_r+0x1a>
 80106ac:	6023      	str	r3, [r4, #0]
 80106ae:	bd38      	pop	{r3, r4, r5, pc}
 80106b0:	240027e0 	.word	0x240027e0

080106b4 <_lseek_r>:
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	4d07      	ldr	r5, [pc, #28]	; (80106d4 <_lseek_r+0x20>)
 80106b8:	4604      	mov	r4, r0
 80106ba:	4608      	mov	r0, r1
 80106bc:	4611      	mov	r1, r2
 80106be:	2200      	movs	r2, #0
 80106c0:	602a      	str	r2, [r5, #0]
 80106c2:	461a      	mov	r2, r3
 80106c4:	f7f1 fa8c 	bl	8001be0 <_lseek>
 80106c8:	1c43      	adds	r3, r0, #1
 80106ca:	d102      	bne.n	80106d2 <_lseek_r+0x1e>
 80106cc:	682b      	ldr	r3, [r5, #0]
 80106ce:	b103      	cbz	r3, 80106d2 <_lseek_r+0x1e>
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	bd38      	pop	{r3, r4, r5, pc}
 80106d4:	240027e0 	.word	0x240027e0

080106d8 <memcpy>:
 80106d8:	440a      	add	r2, r1
 80106da:	4291      	cmp	r1, r2
 80106dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80106e0:	d100      	bne.n	80106e4 <memcpy+0xc>
 80106e2:	4770      	bx	lr
 80106e4:	b510      	push	{r4, lr}
 80106e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80106ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80106ee:	4291      	cmp	r1, r2
 80106f0:	d1f9      	bne.n	80106e6 <memcpy+0xe>
 80106f2:	bd10      	pop	{r4, pc}

080106f4 <memmove>:
 80106f4:	4288      	cmp	r0, r1
 80106f6:	b510      	push	{r4, lr}
 80106f8:	eb01 0402 	add.w	r4, r1, r2
 80106fc:	d902      	bls.n	8010704 <memmove+0x10>
 80106fe:	4284      	cmp	r4, r0
 8010700:	4623      	mov	r3, r4
 8010702:	d807      	bhi.n	8010714 <memmove+0x20>
 8010704:	1e43      	subs	r3, r0, #1
 8010706:	42a1      	cmp	r1, r4
 8010708:	d008      	beq.n	801071c <memmove+0x28>
 801070a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801070e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010712:	e7f8      	b.n	8010706 <memmove+0x12>
 8010714:	4402      	add	r2, r0
 8010716:	4601      	mov	r1, r0
 8010718:	428a      	cmp	r2, r1
 801071a:	d100      	bne.n	801071e <memmove+0x2a>
 801071c:	bd10      	pop	{r4, pc}
 801071e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010722:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010726:	e7f7      	b.n	8010718 <memmove+0x24>

08010728 <__malloc_lock>:
 8010728:	4801      	ldr	r0, [pc, #4]	; (8010730 <__malloc_lock+0x8>)
 801072a:	f7ff b999 	b.w	800fa60 <__retarget_lock_acquire_recursive>
 801072e:	bf00      	nop
 8010730:	240027d4 	.word	0x240027d4

08010734 <__malloc_unlock>:
 8010734:	4801      	ldr	r0, [pc, #4]	; (801073c <__malloc_unlock+0x8>)
 8010736:	f7ff b994 	b.w	800fa62 <__retarget_lock_release_recursive>
 801073a:	bf00      	nop
 801073c:	240027d4 	.word	0x240027d4

08010740 <_realloc_r>:
 8010740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010744:	4680      	mov	r8, r0
 8010746:	4614      	mov	r4, r2
 8010748:	460e      	mov	r6, r1
 801074a:	b921      	cbnz	r1, 8010756 <_realloc_r+0x16>
 801074c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	4611      	mov	r1, r2
 8010752:	f7ff ba59 	b.w	800fc08 <_malloc_r>
 8010756:	b92a      	cbnz	r2, 8010764 <_realloc_r+0x24>
 8010758:	f7ff f9ea 	bl	800fb30 <_free_r>
 801075c:	4625      	mov	r5, r4
 801075e:	4628      	mov	r0, r5
 8010760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010764:	f000 f82e 	bl	80107c4 <_malloc_usable_size_r>
 8010768:	4284      	cmp	r4, r0
 801076a:	4607      	mov	r7, r0
 801076c:	d802      	bhi.n	8010774 <_realloc_r+0x34>
 801076e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010772:	d812      	bhi.n	801079a <_realloc_r+0x5a>
 8010774:	4621      	mov	r1, r4
 8010776:	4640      	mov	r0, r8
 8010778:	f7ff fa46 	bl	800fc08 <_malloc_r>
 801077c:	4605      	mov	r5, r0
 801077e:	2800      	cmp	r0, #0
 8010780:	d0ed      	beq.n	801075e <_realloc_r+0x1e>
 8010782:	42bc      	cmp	r4, r7
 8010784:	4622      	mov	r2, r4
 8010786:	4631      	mov	r1, r6
 8010788:	bf28      	it	cs
 801078a:	463a      	movcs	r2, r7
 801078c:	f7ff ffa4 	bl	80106d8 <memcpy>
 8010790:	4631      	mov	r1, r6
 8010792:	4640      	mov	r0, r8
 8010794:	f7ff f9cc 	bl	800fb30 <_free_r>
 8010798:	e7e1      	b.n	801075e <_realloc_r+0x1e>
 801079a:	4635      	mov	r5, r6
 801079c:	e7df      	b.n	801075e <_realloc_r+0x1e>
	...

080107a0 <_read_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d07      	ldr	r5, [pc, #28]	; (80107c0 <_read_r+0x20>)
 80107a4:	4604      	mov	r4, r0
 80107a6:	4608      	mov	r0, r1
 80107a8:	4611      	mov	r1, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	602a      	str	r2, [r5, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	f7f1 f9b6 	bl	8001b20 <_read>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d102      	bne.n	80107be <_read_r+0x1e>
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	b103      	cbz	r3, 80107be <_read_r+0x1e>
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	240027e0 	.word	0x240027e0

080107c4 <_malloc_usable_size_r>:
 80107c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107c8:	1f18      	subs	r0, r3, #4
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	bfbc      	itt	lt
 80107ce:	580b      	ldrlt	r3, [r1, r0]
 80107d0:	18c0      	addlt	r0, r0, r3
 80107d2:	4770      	bx	lr

080107d4 <_init>:
 80107d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d6:	bf00      	nop
 80107d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107da:	bc08      	pop	{r3}
 80107dc:	469e      	mov	lr, r3
 80107de:	4770      	bx	lr

080107e0 <_fini>:
 80107e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107e2:	bf00      	nop
 80107e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107e6:	bc08      	pop	{r3}
 80107e8:	469e      	mov	lr, r3
 80107ea:	4770      	bx	lr
